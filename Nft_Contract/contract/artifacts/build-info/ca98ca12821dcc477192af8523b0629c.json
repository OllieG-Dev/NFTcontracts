{
	"id": "ca98ca12821dcc477192af8523b0629c",
	"_format": "hh-sol-build-info-1",
	"solcVersion": "0.8.9",
	"solcLongVersion": "0.8.9+commit.e5eed63a",
	"input": {
		"language": "Solidity",
		"sources": {
			"contract/NewCryptoBullDogs.sol": {
				"content": "// SPDX-License-Identifier: MIT\npragma solidity ^0.8.9;\n\nimport \"erc721a/contracts/ERC721A.sol\";\nimport \"@openzeppelin/contracts/access/Ownable.sol\";\nimport \"@openzeppelin/contracts/utils/cryptography/MerkleProof.sol\";\n\ncontract CryptoBullDogsOfficial is ERC721A, Ownable{\n    using Strings for uint256;\n\n    uint256 public constant MAX_SUPPLY = 2222;\n    uint256 public constant MAX_PUBLIC_MINT = 10;\n    uint256 public constant MAX_WHITELIST_MINT = 10;\n    uint256 public constant PUBLIC_SALE_PRICE = .04 ether;\n    uint256 public constant WHITELIST_SALE_PRICE = .03 ether;\n\n    string private  baseTokenUri;\n    string public   placeholderTokenUri;\n\n    //deploy smart contract, toggle WL, toggle WL when done, toggle publicSale \n    //2 days later toggle reveal\n    bool public isRevealed;\n    bool public publicSale;\n    bool public whiteListSale;\n    bool public pause;\n    bool public teamMinted;\n\n    bytes32 private merkleRoot;\n\n    mapping(address => uint256) public totalPublicMint;\n    mapping(address => uint256) public totalWhitelistMint;\n\n    constructor() ERC721A(\"CryptoBullDogs Official\", \"CBD\"){\n\n    }\n\n    modifier callerIsUser() {\n        require(tx.origin == msg.sender, \"CryptoBullDogs :: Cannot be called by a contract\");\n        _;\n    }\n\n    function mint(uint256 _quantity) external payable callerIsUser{\n        require(publicSale, \"CryptoBullDogs :: Not Yet Active.\");\n        require((totalSupply() + _quantity) <= MAX_SUPPLY, \"CryptoBullDogs :: Beyond Max Supply\");\n        require((totalPublicMint[msg.sender] +_quantity) <= MAX_PUBLIC_MINT, \"CryptoBullDogs :: Already minted 3 times!\");\n        require(msg.value >= (PUBLIC_SALE_PRICE * _quantity), \"CryptoBullDogs :: Below \");\n\n        totalPublicMint[msg.sender] += _quantity;\n        _safeMint(msg.sender, _quantity);\n    }\n\n    function whitelistMint(bytes32[] memory _merkleProof, uint256 _quantity) external payable callerIsUser{\n        require(whiteListSale, \"CryptoBullDogs :: Minting is on Pause\");\n        require((totalSupply() + _quantity) <= MAX_SUPPLY, \"CryptoBullDogs :: Cannot mint beyond max supply\");\n        require((totalWhitelistMint[msg.sender] + _quantity)  <= MAX_WHITELIST_MINT, \"CryptoBullDogs:: Cannot mint beyond whitelist max mint!\");\n        require(msg.value >= (WHITELIST_SALE_PRICE * _quantity), \"CryptoBullDogs :: Payment is below the price\");\n        //create leaf node\n        bytes32 sender = keccak256(abi.encodePacked(msg.sender));\n        require(MerkleProof.verify(_merkleProof, merkleRoot, sender), \"CryptoBullDogs :: You are not whitelisted\");\n\n        totalWhitelistMint[msg.sender] += _quantity;\n        _safeMint(msg.sender, _quantity);\n\n    }\n\n    function teamMint() external onlyOwner{\n        require(!teamMinted, \"CryptoBullDogs :: Team already minted\");\n        teamMinted = true;\n        _safeMint(msg.sender, 620);\n    }\n\n    function _baseURI() internal view virtual override returns (string memory) {\n        return baseTokenUri;\n    }\n\n    //return uri for certain token\n    function tokenURI(uint256 tokenId) public view virtual override returns (string memory) {\n        require(_exists(tokenId), \"ERC721Metadata: URI query for nonexistent token\");\n\n        uint256 trueId = tokenId + 1;\n\n        if(!isRevealed){\n            return placeholderTokenUri;\n        }\n        //string memory baseURI = _baseURI();\n        return bytes(baseTokenUri).length > 0 ? string(abi.encodePacked(baseTokenUri, trueId.toString(), \".json\")) : \"\";\n    }\n\n    /// @dev walletOf() function shouldn't be called on-chain due to gas consumption\n    function walletOf() external view returns(uint256[] memory){\n        address _owner = msg.sender;\n        uint256 numberOfOwnedNFT = balanceOf(_owner);\n        uint256[] memory ownerIds = new uint256[](numberOfOwnedNFT);\n\n        for(uint256 index = 0; index < numberOfOwnedNFT; index++){\n         //   ownerIds[index] = tokenOfOwnerByIndex(_owner, index);\n        }\n\n        return ownerIds;\n    }\n\n    function setTokenUri(string memory _baseTokenUri) external onlyOwner{\n        baseTokenUri = _baseTokenUri;\n    }\n    function setPlaceHolderUri(string memory _placeholderTokenUri) external onlyOwner{\n        placeholderTokenUri = _placeholderTokenUri;\n    }\n\n    function setMerkleRoot(bytes32 _merkleRoot) external onlyOwner{\n        merkleRoot = _merkleRoot;\n    }\n\n    function getMerkleRoot() external view returns (bytes32){\n        return merkleRoot;\n    }\n\n    function togglePause() external onlyOwner{\n        pause = !pause;\n    }\n\n    function toggleWhiteListSale() external onlyOwner{\n        whiteListSale = !whiteListSale;\n    }\n\n    function togglePublicSale() external onlyOwner{\n        publicSale = !publicSale;\n    }\n\n    function toggleReveal() external onlyOwner{\n        isRevealed = !isRevealed;\n    }\n\n    function withdraw() external onlyOwner{\n         //3% to developers wallet\n        uint256 withdrawAmount_35 = address(this).balance * 3/100;\n        payable(0x90EE4b80C3b15b8b83510BE8Fcf2BCeD69a4c9DB).transfer(withdrawAmount_35);  \n        payable(msg.sender).transfer(address(this).balance);\n    }\n}\n\n"
			},
			"@openzeppelin/contracts/utils/cryptography/MerkleProof.sol": {
				"content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.5.0) (utils/cryptography/MerkleProof.sol)\n\npragma solidity ^0.8.0;\n\n/**\n * @dev These functions deal with verification of Merkle Trees proofs.\n *\n * The proofs can be generated using the JavaScript library\n * https://github.com/miguelmota/merkletreejs[merkletreejs].\n * Note: the hashing algorithm should be keccak256 and pair sorting should be enabled.\n *\n * See `test/utils/cryptography/MerkleProof.test.js` for some examples.\n */\nlibrary MerkleProof {\n    /**\n     * @dev Returns true if a `leaf` can be proved to be a part of a Merkle tree\n     * defined by `root`. For this, a `proof` must be provided, containing\n     * sibling hashes on the branch from the leaf to the root of the tree. Each\n     * pair of leaves and each pair of pre-images are assumed to be sorted.\n     */\n    function verify(\n        bytes32[] memory proof,\n        bytes32 root,\n        bytes32 leaf\n    ) internal pure returns (bool) {\n        return processProof(proof, leaf) == root;\n    }\n\n    /**\n     * @dev Returns the rebuilt hash obtained by traversing a Merklee tree up\n     * from `leaf` using `proof`. A `proof` is valid if and only if the rebuilt\n     * hash matches the root of the tree. When processing the proof, the pairs\n     * of leafs & pre-images are assumed to be sorted.\n     *\n     * _Available since v4.4._\n     */\n    function processProof(bytes32[] memory proof, bytes32 leaf) internal pure returns (bytes32) {\n        bytes32 computedHash = leaf;\n        for (uint256 i = 0; i < proof.length; i++) {\n            bytes32 proofElement = proof[i];\n            if (computedHash <= proofElement) {\n                // Hash(current computed hash + current element of the proof)\n                computedHash = _efficientHash(computedHash, proofElement);\n            } else {\n                // Hash(current element of the proof + current computed hash)\n                computedHash = _efficientHash(proofElement, computedHash);\n            }\n        }\n        return computedHash;\n    }\n\n    function _efficientHash(bytes32 a, bytes32 b) private pure returns (bytes32 value) {\n        assembly {\n            mstore(0x00, a)\n            mstore(0x20, b)\n            value := keccak256(0x00, 0x40)\n        }\n    }\n}\n"
			},
			"@openzeppelin/contracts/access/Ownable.sol": {
				"content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts v4.4.1 (access/Ownable.sol)\n\npragma solidity ^0.8.0;\n\nimport \"../utils/Context.sol\";\n\n/**\n * @dev Contract module which provides a basic access control mechanism, where\n * there is an account (an owner) that can be granted exclusive access to\n * specific functions.\n *\n * By default, the owner account will be the one that deploys the contract. This\n * can later be changed with {transferOwnership}.\n *\n * This module is used through inheritance. It will make available the modifier\n * `onlyOwner`, which can be applied to your functions to restrict their use to\n * the owner.\n */\nabstract contract Ownable is Context {\n    address private _owner;\n\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\n\n    /**\n     * @dev Initializes the contract setting the deployer as the initial owner.\n     */\n    constructor() {\n        _transferOwnership(_msgSender());\n    }\n\n    /**\n     * @dev Returns the address of the current owner.\n     */\n    function owner() public view virtual returns (address) {\n        return _owner;\n    }\n\n    /**\n     * @dev Throws if called by any account other than the owner.\n     */\n    modifier onlyOwner() {\n        require(owner() == _msgSender(), \"Ownable: caller is not the owner\");\n        _;\n    }\n\n    /**\n     * @dev Leaves the contract without owner. It will not be possible to call\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\n     *\n     * NOTE: Renouncing ownership will leave the contract without an owner,\n     * thereby removing any functionality that is only available to the owner.\n     */\n    function renounceOwnership() public virtual onlyOwner {\n        _transferOwnership(address(0));\n    }\n\n    /**\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\n     * Can only be called by the current owner.\n     */\n    function transferOwnership(address newOwner) public virtual onlyOwner {\n        require(newOwner != address(0), \"Ownable: new owner is the zero address\");\n        _transferOwnership(newOwner);\n    }\n\n    /**\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\n     * Internal function without access restriction.\n     */\n    function _transferOwnership(address newOwner) internal virtual {\n        address oldOwner = _owner;\n        _owner = newOwner;\n        emit OwnershipTransferred(oldOwner, newOwner);\n    }\n}\n"
			},
			"erc721a/contracts/ERC721A.sol": {
				"content": "// SPDX-License-Identifier: MIT\n// Creator: Chiru Labs\n\npragma solidity ^0.8.4;\n\nimport '@openzeppelin/contracts/token/ERC721/IERC721.sol';\nimport '@openzeppelin/contracts/token/ERC721/IERC721Receiver.sol';\nimport '@openzeppelin/contracts/token/ERC721/extensions/IERC721Metadata.sol';\nimport '@openzeppelin/contracts/token/ERC721/extensions/IERC721Enumerable.sol';\nimport '@openzeppelin/contracts/utils/Address.sol';\nimport '@openzeppelin/contracts/utils/Context.sol';\nimport '@openzeppelin/contracts/utils/Strings.sol';\nimport '@openzeppelin/contracts/utils/introspection/ERC165.sol';\n\nerror ApprovalCallerNotOwnerNorApproved();\nerror ApprovalQueryForNonexistentToken();\nerror ApproveToCaller();\nerror ApprovalToCurrentOwner();\nerror BalanceQueryForZeroAddress();\nerror MintedQueryForZeroAddress();\nerror BurnedQueryForZeroAddress();\nerror AuxQueryForZeroAddress();\nerror MintToZeroAddress();\nerror MintZeroQuantity();\nerror OwnerIndexOutOfBounds();\nerror OwnerQueryForNonexistentToken();\nerror TokenIndexOutOfBounds();\nerror TransferCallerNotOwnerNorApproved();\nerror TransferFromIncorrectOwner();\nerror TransferToNonERC721ReceiverImplementer();\nerror TransferToZeroAddress();\nerror URIQueryForNonexistentToken();\n\n/**\n * @dev Implementation of https://eips.ethereum.org/EIPS/eip-721[ERC721] Non-Fungible Token Standard, including\n * the Metadata extension. Built to optimize for lower gas during batch mints.\n *\n * Assumes serials are sequentially minted starting at _startTokenId() (defaults to 0, e.g. 0, 1, 2, 3..).\n *\n * Assumes that an owner cannot have more than 2**64 - 1 (max value of uint64) of supply.\n *\n * Assumes that the maximum token id cannot exceed 2**256 - 1 (max value of uint256).\n */\ncontract ERC721A is Context, ERC165, IERC721, IERC721Metadata {\n    using Address for address;\n    using Strings for uint256;\n\n    // Compiler will pack this into a single 256bit word.\n    struct TokenOwnership {\n        // The address of the owner.\n        address addr;\n        // Keeps track of the start time of ownership with minimal overhead for tokenomics.\n        uint64 startTimestamp;\n        // Whether the token has been burned.\n        bool burned;\n    }\n\n    // Compiler will pack this into a single 256bit word.\n    struct AddressData {\n        // Realistically, 2**64-1 is more than enough.\n        uint64 balance;\n        // Keeps track of mint count with minimal overhead for tokenomics.\n        uint64 numberMinted;\n        // Keeps track of burn count with minimal overhead for tokenomics.\n        uint64 numberBurned;\n        // For miscellaneous variable(s) pertaining to the address\n        // (e.g. number of whitelist mint slots used).\n        // If there are multiple variables, please pack them into a uint64.\n        uint64 aux;\n    }\n\n    // The tokenId of the next token to be minted.\n    uint256 internal _currentIndex;\n\n    // The number of tokens burned.\n    uint256 internal _burnCounter;\n\n    // Token name\n    string private _name;\n\n    // Token symbol\n    string private _symbol;\n\n    // Mapping from token ID to ownership details\n    // An empty struct value does not necessarily mean the token is unowned. See ownershipOf implementation for details.\n    mapping(uint256 => TokenOwnership) internal _ownerships;\n\n    // Mapping owner address to address data\n    mapping(address => AddressData) private _addressData;\n\n    // Mapping from token ID to approved address\n    mapping(uint256 => address) private _tokenApprovals;\n\n    // Mapping from owner to operator approvals\n    mapping(address => mapping(address => bool)) private _operatorApprovals;\n\n    constructor(string memory name_, string memory symbol_) {\n        _name = name_;\n        _symbol = symbol_;\n        _currentIndex = _startTokenId();\n    }\n\n    /**\n     * To change the starting tokenId, please override this function.\n     */\n    function _startTokenId() internal view virtual returns (uint256) {\n        return 0;\n    }\n\n    /**\n     * @dev See {IERC721Enumerable-totalSupply}.\n     * @dev Burned tokens are calculated here, use _totalMinted() if you want to count just minted tokens.\n     */\n    function totalSupply() public view returns (uint256) {\n        // Counter underflow is impossible as _burnCounter cannot be incremented\n        // more than _currentIndex - _startTokenId() times\n        unchecked {\n            return _currentIndex - _burnCounter - _startTokenId();\n        }\n    }\n\n    /**\n     * Returns the total amount of tokens minted in the contract.\n     */\n    function _totalMinted() internal view returns (uint256) {\n        // Counter underflow is impossible as _currentIndex does not decrement,\n        // and it is initialized to _startTokenId()\n        unchecked {\n            return _currentIndex - _startTokenId();\n        }\n    }\n\n    /**\n     * @dev See {IERC165-supportsInterface}.\n     */\n    function supportsInterface(bytes4 interfaceId) public view virtual override(ERC165, IERC165) returns (bool) {\n        return\n            interfaceId == type(IERC721).interfaceId ||\n            interfaceId == type(IERC721Metadata).interfaceId ||\n            super.supportsInterface(interfaceId);\n    }\n\n    /**\n     * @dev See {IERC721-balanceOf}.\n     */\n    function balanceOf(address owner) public view override returns (uint256) {\n        if (owner == address(0)) revert BalanceQueryForZeroAddress();\n        return uint256(_addressData[owner].balance);\n    }\n\n    /**\n     * Returns the number of tokens minted by `owner`.\n     */\n    function _numberMinted(address owner) internal view returns (uint256) {\n        if (owner == address(0)) revert MintedQueryForZeroAddress();\n        return uint256(_addressData[owner].numberMinted);\n    }\n\n    /**\n     * Returns the number of tokens burned by or on behalf of `owner`.\n     */\n    function _numberBurned(address owner) internal view returns (uint256) {\n        if (owner == address(0)) revert BurnedQueryForZeroAddress();\n        return uint256(_addressData[owner].numberBurned);\n    }\n\n    /**\n     * Returns the auxillary data for `owner`. (e.g. number of whitelist mint slots used).\n     */\n    function _getAux(address owner) internal view returns (uint64) {\n        if (owner == address(0)) revert AuxQueryForZeroAddress();\n        return _addressData[owner].aux;\n    }\n\n    /**\n     * Sets the auxillary data for `owner`. (e.g. number of whitelist mint slots used).\n     * If there are multiple variables, please pack them into a uint64.\n     */\n    function _setAux(address owner, uint64 aux) internal {\n        if (owner == address(0)) revert AuxQueryForZeroAddress();\n        _addressData[owner].aux = aux;\n    }\n\n    /**\n     * Gas spent here starts off proportional to the maximum mint batch size.\n     * It gradually moves to O(1) as tokens get transferred around in the collection over time.\n     */\n    function ownershipOf(uint256 tokenId) internal view returns (TokenOwnership memory) {\n        uint256 curr = tokenId;\n\n        unchecked {\n            if (_startTokenId() <= curr && curr < _currentIndex) {\n                TokenOwnership memory ownership = _ownerships[curr];\n                if (!ownership.burned) {\n                    if (ownership.addr != address(0)) {\n                        return ownership;\n                    }\n                    // Invariant:\n                    // There will always be an ownership that has an address and is not burned\n                    // before an ownership that does not have an address and is not burned.\n                    // Hence, curr will not underflow.\n                    while (true) {\n                        curr--;\n                        ownership = _ownerships[curr];\n                        if (ownership.addr != address(0)) {\n                            return ownership;\n                        }\n                    }\n                }\n            }\n        }\n        revert OwnerQueryForNonexistentToken();\n    }\n\n    /**\n     * @dev See {IERC721-ownerOf}.\n     */\n    function ownerOf(uint256 tokenId) public view override returns (address) {\n        return ownershipOf(tokenId).addr;\n    }\n\n    /**\n     * @dev See {IERC721Metadata-name}.\n     */\n    function name() public view virtual override returns (string memory) {\n        return _name;\n    }\n\n    /**\n     * @dev See {IERC721Metadata-symbol}.\n     */\n    function symbol() public view virtual override returns (string memory) {\n        return _symbol;\n    }\n\n    /**\n     * @dev See {IERC721Metadata-tokenURI}.\n     */\n    function tokenURI(uint256 tokenId) public view virtual override returns (string memory) {\n        if (!_exists(tokenId)) revert URIQueryForNonexistentToken();\n\n        string memory baseURI = _baseURI();\n        return bytes(baseURI).length != 0 ? string(abi.encodePacked(baseURI, tokenId.toString())) : '';\n    }\n\n    /**\n     * @dev Base URI for computing {tokenURI}. If set, the resulting URI for each\n     * token will be the concatenation of the `baseURI` and the `tokenId`. Empty\n     * by default, can be overriden in child contracts.\n     */\n    function _baseURI() internal view virtual returns (string memory) {\n        return '';\n    }\n\n    /**\n     * @dev See {IERC721-approve}.\n     */\n    function approve(address to, uint256 tokenId) public override {\n        address owner = ERC721A.ownerOf(tokenId);\n        if (to == owner) revert ApprovalToCurrentOwner();\n\n        if (_msgSender() != owner && !isApprovedForAll(owner, _msgSender())) {\n            revert ApprovalCallerNotOwnerNorApproved();\n        }\n\n        _approve(to, tokenId, owner);\n    }\n\n    /**\n     * @dev See {IERC721-getApproved}.\n     */\n    function getApproved(uint256 tokenId) public view override returns (address) {\n        if (!_exists(tokenId)) revert ApprovalQueryForNonexistentToken();\n\n        return _tokenApprovals[tokenId];\n    }\n\n    /**\n     * @dev See {IERC721-setApprovalForAll}.\n     */\n    function setApprovalForAll(address operator, bool approved) public override {\n        if (operator == _msgSender()) revert ApproveToCaller();\n\n        _operatorApprovals[_msgSender()][operator] = approved;\n        emit ApprovalForAll(_msgSender(), operator, approved);\n    }\n\n    /**\n     * @dev See {IERC721-isApprovedForAll}.\n     */\n    function isApprovedForAll(address owner, address operator) public view virtual override returns (bool) {\n        return _operatorApprovals[owner][operator];\n    }\n\n    /**\n     * @dev See {IERC721-transferFrom}.\n     */\n    function transferFrom(\n        address from,\n        address to,\n        uint256 tokenId\n    ) public virtual override {\n        _transfer(from, to, tokenId);\n    }\n\n    /**\n     * @dev See {IERC721-safeTransferFrom}.\n     */\n    function safeTransferFrom(\n        address from,\n        address to,\n        uint256 tokenId\n    ) public virtual override {\n        safeTransferFrom(from, to, tokenId, '');\n    }\n\n    /**\n     * @dev See {IERC721-safeTransferFrom}.\n     */\n    function safeTransferFrom(\n        address from,\n        address to,\n        uint256 tokenId,\n        bytes memory _data\n    ) public virtual override {\n        _transfer(from, to, tokenId);\n        if (to.isContract() && !_checkContractOnERC721Received(from, to, tokenId, _data)) {\n            revert TransferToNonERC721ReceiverImplementer();\n        }\n    }\n\n    /**\n     * @dev Returns whether `tokenId` exists.\n     *\n     * Tokens can be managed by their owner or approved accounts via {approve} or {setApprovalForAll}.\n     *\n     * Tokens start existing when they are minted (`_mint`),\n     */\n    function _exists(uint256 tokenId) internal view returns (bool) {\n        return _startTokenId() <= tokenId && tokenId < _currentIndex &&\n            !_ownerships[tokenId].burned;\n    }\n\n    function _safeMint(address to, uint256 quantity) internal {\n        _safeMint(to, quantity, '');\n    }\n\n    /**\n     * @dev Safely mints `quantity` tokens and transfers them to `to`.\n     *\n     * Requirements:\n     *\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called for each safe transfer.\n     * - `quantity` must be greater than 0.\n     *\n     * Emits a {Transfer} event.\n     */\n    function _safeMint(\n        address to,\n        uint256 quantity,\n        bytes memory _data\n    ) internal {\n        _mint(to, quantity, _data, true);\n    }\n\n    /**\n     * @dev Mints `quantity` tokens and transfers them to `to`.\n     *\n     * Requirements:\n     *\n     * - `to` cannot be the zero address.\n     * - `quantity` must be greater than 0.\n     *\n     * Emits a {Transfer} event.\n     */\n    function _mint(\n        address to,\n        uint256 quantity,\n        bytes memory _data,\n        bool safe\n    ) internal {\n        uint256 startTokenId = _currentIndex;\n        if (to == address(0)) revert MintToZeroAddress();\n        if (quantity == 0) revert MintZeroQuantity();\n\n        _beforeTokenTransfers(address(0), to, startTokenId, quantity);\n\n        // Overflows are incredibly unrealistic.\n        // balance or numberMinted overflow if current value of either + quantity > 1.8e19 (2**64) - 1\n        // updatedIndex overflows if _currentIndex + quantity > 1.2e77 (2**256) - 1\n        unchecked {\n            _addressData[to].balance += uint64(quantity);\n            _addressData[to].numberMinted += uint64(quantity);\n\n            _ownerships[startTokenId].addr = to;\n            _ownerships[startTokenId].startTimestamp = uint64(block.timestamp);\n\n            uint256 updatedIndex = startTokenId;\n            uint256 end = updatedIndex + quantity;\n\n            if (safe && to.isContract()) {\n                do {\n                    emit Transfer(address(0), to, updatedIndex);\n                    if (!_checkContractOnERC721Received(address(0), to, updatedIndex++, _data)) {\n                        revert TransferToNonERC721ReceiverImplementer();\n                    }\n                } while (updatedIndex != end);\n                // Reentrancy protection\n                if (_currentIndex != startTokenId) revert();\n            } else {\n                do {\n                    emit Transfer(address(0), to, updatedIndex++);\n                } while (updatedIndex != end);\n            }\n            _currentIndex = updatedIndex;\n        }\n        _afterTokenTransfers(address(0), to, startTokenId, quantity);\n    }\n\n    /**\n     * @dev Transfers `tokenId` from `from` to `to`.\n     *\n     * Requirements:\n     *\n     * - `to` cannot be the zero address.\n     * - `tokenId` token must be owned by `from`.\n     *\n     * Emits a {Transfer} event.\n     */\n    function _transfer(\n        address from,\n        address to,\n        uint256 tokenId\n    ) private {\n        TokenOwnership memory prevOwnership = ownershipOf(tokenId);\n\n        bool isApprovedOrOwner = (_msgSender() == prevOwnership.addr ||\n            isApprovedForAll(prevOwnership.addr, _msgSender()) ||\n            getApproved(tokenId) == _msgSender());\n\n        if (!isApprovedOrOwner) revert TransferCallerNotOwnerNorApproved();\n        if (prevOwnership.addr != from) revert TransferFromIncorrectOwner();\n        if (to == address(0)) revert TransferToZeroAddress();\n\n        _beforeTokenTransfers(from, to, tokenId, 1);\n\n        // Clear approvals from the previous owner\n        _approve(address(0), tokenId, prevOwnership.addr);\n\n        // Underflow of the sender's balance is impossible because we check for\n        // ownership above and the recipient's balance can't realistically overflow.\n        // Counter overflow is incredibly unrealistic as tokenId would have to be 2**256.\n        unchecked {\n            _addressData[from].balance -= 1;\n            _addressData[to].balance += 1;\n\n            _ownerships[tokenId].addr = to;\n            _ownerships[tokenId].startTimestamp = uint64(block.timestamp);\n\n            // If the ownership slot of tokenId+1 is not explicitly set, that means the transfer initiator owns it.\n            // Set the slot of tokenId+1 explicitly in storage to maintain correctness for ownerOf(tokenId+1) calls.\n            uint256 nextTokenId = tokenId + 1;\n            if (_ownerships[nextTokenId].addr == address(0)) {\n                // This will suffice for checking _exists(nextTokenId),\n                // as a burned slot cannot contain the zero address.\n                if (nextTokenId < _currentIndex) {\n                    _ownerships[nextTokenId].addr = prevOwnership.addr;\n                    _ownerships[nextTokenId].startTimestamp = prevOwnership.startTimestamp;\n                }\n            }\n        }\n\n        emit Transfer(from, to, tokenId);\n        _afterTokenTransfers(from, to, tokenId, 1);\n    }\n\n    /**\n     * @dev Destroys `tokenId`.\n     * The approval is cleared when the token is burned.\n     *\n     * Requirements:\n     *\n     * - `tokenId` must exist.\n     *\n     * Emits a {Transfer} event.\n     */\n    function _burn(uint256 tokenId) internal virtual {\n        TokenOwnership memory prevOwnership = ownershipOf(tokenId);\n\n        _beforeTokenTransfers(prevOwnership.addr, address(0), tokenId, 1);\n\n        // Clear approvals from the previous owner\n        _approve(address(0), tokenId, prevOwnership.addr);\n\n        // Underflow of the sender's balance is impossible because we check for\n        // ownership above and the recipient's balance can't realistically overflow.\n        // Counter overflow is incredibly unrealistic as tokenId would have to be 2**256.\n        unchecked {\n            _addressData[prevOwnership.addr].balance -= 1;\n            _addressData[prevOwnership.addr].numberBurned += 1;\n\n            // Keep track of who burned the token, and the timestamp of burning.\n            _ownerships[tokenId].addr = prevOwnership.addr;\n            _ownerships[tokenId].startTimestamp = uint64(block.timestamp);\n            _ownerships[tokenId].burned = true;\n\n            // If the ownership slot of tokenId+1 is not explicitly set, that means the burn initiator owns it.\n            // Set the slot of tokenId+1 explicitly in storage to maintain correctness for ownerOf(tokenId+1) calls.\n            uint256 nextTokenId = tokenId + 1;\n            if (_ownerships[nextTokenId].addr == address(0)) {\n                // This will suffice for checking _exists(nextTokenId),\n                // as a burned slot cannot contain the zero address.\n                if (nextTokenId < _currentIndex) {\n                    _ownerships[nextTokenId].addr = prevOwnership.addr;\n                    _ownerships[nextTokenId].startTimestamp = prevOwnership.startTimestamp;\n                }\n            }\n        }\n\n        emit Transfer(prevOwnership.addr, address(0), tokenId);\n        _afterTokenTransfers(prevOwnership.addr, address(0), tokenId, 1);\n\n        // Overflow not possible, as _burnCounter cannot be exceed _currentIndex times.\n        unchecked {\n            _burnCounter++;\n        }\n    }\n\n    /**\n     * @dev Approve `to` to operate on `tokenId`\n     *\n     * Emits a {Approval} event.\n     */\n    function _approve(\n        address to,\n        uint256 tokenId,\n        address owner\n    ) private {\n        _tokenApprovals[tokenId] = to;\n        emit Approval(owner, to, tokenId);\n    }\n\n    /**\n     * @dev Internal function to invoke {IERC721Receiver-onERC721Received} on a target contract.\n     *\n     * @param from address representing the previous owner of the given token ID\n     * @param to target address that will receive the tokens\n     * @param tokenId uint256 ID of the token to be transferred\n     * @param _data bytes optional data to send along with the call\n     * @return bool whether the call correctly returned the expected magic value\n     */\n    function _checkContractOnERC721Received(\n        address from,\n        address to,\n        uint256 tokenId,\n        bytes memory _data\n    ) private returns (bool) {\n        try IERC721Receiver(to).onERC721Received(_msgSender(), from, tokenId, _data) returns (bytes4 retval) {\n            return retval == IERC721Receiver(to).onERC721Received.selector;\n        } catch (bytes memory reason) {\n            if (reason.length == 0) {\n                revert TransferToNonERC721ReceiverImplementer();\n            } else {\n                assembly {\n                    revert(add(32, reason), mload(reason))\n                }\n            }\n        }\n    }\n\n    /**\n     * @dev Hook that is called before a set of serially-ordered token ids are about to be transferred. This includes minting.\n     * And also called before burning one token.\n     *\n     * startTokenId - the first token id to be transferred\n     * quantity - the amount to be transferred\n     *\n     * Calling conditions:\n     *\n     * - When `from` and `to` are both non-zero, `from`'s `tokenId` will be\n     * transferred to `to`.\n     * - When `from` is zero, `tokenId` will be minted for `to`.\n     * - When `to` is zero, `tokenId` will be burned by `from`.\n     * - `from` and `to` are never both zero.\n     */\n    function _beforeTokenTransfers(\n        address from,\n        address to,\n        uint256 startTokenId,\n        uint256 quantity\n    ) internal virtual {}\n\n    /**\n     * @dev Hook that is called after a set of serially-ordered token ids have been transferred. This includes\n     * minting.\n     * And also called after one token has been burned.\n     *\n     * startTokenId - the first token id to be transferred\n     * quantity - the amount to be transferred\n     *\n     * Calling conditions:\n     *\n     * - When `from` and `to` are both non-zero, `from`'s `tokenId` has been\n     * transferred to `to`.\n     * - When `from` is zero, `tokenId` has been minted for `to`.\n     * - When `to` is zero, `tokenId` has been burned by `from`.\n     * - `from` and `to` are never both zero.\n     */\n    function _afterTokenTransfers(\n        address from,\n        address to,\n        uint256 startTokenId,\n        uint256 quantity\n    ) internal virtual {}\n}\n"
			},
			"@openzeppelin/contracts/utils/introspection/ERC165.sol": {
				"content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts v4.4.1 (utils/introspection/ERC165.sol)\n\npragma solidity ^0.8.0;\n\nimport \"./IERC165.sol\";\n\n/**\n * @dev Implementation of the {IERC165} interface.\n *\n * Contracts that want to implement ERC165 should inherit from this contract and override {supportsInterface} to check\n * for the additional interface id that will be supported. For example:\n *\n * ```solidity\n * function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\n *     return interfaceId == type(MyInterface).interfaceId || super.supportsInterface(interfaceId);\n * }\n * ```\n *\n * Alternatively, {ERC165Storage} provides an easier to use but more expensive implementation.\n */\nabstract contract ERC165 is IERC165 {\n    /**\n     * @dev See {IERC165-supportsInterface}.\n     */\n    function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\n        return interfaceId == type(IERC165).interfaceId;\n    }\n}\n"
			},
			"@openzeppelin/contracts/utils/Strings.sol": {
				"content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts v4.4.1 (utils/Strings.sol)\n\npragma solidity ^0.8.0;\n\n/**\n * @dev String operations.\n */\nlibrary Strings {\n    bytes16 private constant _HEX_SYMBOLS = \"0123456789abcdef\";\n\n    /**\n     * @dev Converts a `uint256` to its ASCII `string` decimal representation.\n     */\n    function toString(uint256 value) internal pure returns (string memory) {\n        // Inspired by OraclizeAPI's implementation - MIT licence\n        // https://github.com/oraclize/ethereum-api/blob/b42146b063c7d6ee1358846c198246239e9360e8/oraclizeAPI_0.4.25.sol\n\n        if (value == 0) {\n            return \"0\";\n        }\n        uint256 temp = value;\n        uint256 digits;\n        while (temp != 0) {\n            digits++;\n            temp /= 10;\n        }\n        bytes memory buffer = new bytes(digits);\n        while (value != 0) {\n            digits -= 1;\n            buffer[digits] = bytes1(uint8(48 + uint256(value % 10)));\n            value /= 10;\n        }\n        return string(buffer);\n    }\n\n    /**\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation.\n     */\n    function toHexString(uint256 value) internal pure returns (string memory) {\n        if (value == 0) {\n            return \"0x00\";\n        }\n        uint256 temp = value;\n        uint256 length = 0;\n        while (temp != 0) {\n            length++;\n            temp >>= 8;\n        }\n        return toHexString(value, length);\n    }\n\n    /**\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation with fixed length.\n     */\n    function toHexString(uint256 value, uint256 length) internal pure returns (string memory) {\n        bytes memory buffer = new bytes(2 * length + 2);\n        buffer[0] = \"0\";\n        buffer[1] = \"x\";\n        for (uint256 i = 2 * length + 1; i > 1; --i) {\n            buffer[i] = _HEX_SYMBOLS[value & 0xf];\n            value >>= 4;\n        }\n        require(value == 0, \"Strings: hex length insufficient\");\n        return string(buffer);\n    }\n}\n"
			},
			"@openzeppelin/contracts/utils/Context.sol": {
				"content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts v4.4.1 (utils/Context.sol)\n\npragma solidity ^0.8.0;\n\n/**\n * @dev Provides information about the current execution context, including the\n * sender of the transaction and its data. While these are generally available\n * via msg.sender and msg.data, they should not be accessed in such a direct\n * manner, since when dealing with meta-transactions the account sending and\n * paying for execution may not be the actual sender (as far as an application\n * is concerned).\n *\n * This contract is only required for intermediate, library-like contracts.\n */\nabstract contract Context {\n    function _msgSender() internal view virtual returns (address) {\n        return msg.sender;\n    }\n\n    function _msgData() internal view virtual returns (bytes calldata) {\n        return msg.data;\n    }\n}\n"
			},
			"@openzeppelin/contracts/utils/Address.sol": {
				"content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.5.0) (utils/Address.sol)\n\npragma solidity ^0.8.1;\n\n/**\n * @dev Collection of functions related to the address type\n */\nlibrary Address {\n    /**\n     * @dev Returns true if `account` is a contract.\n     *\n     * [IMPORTANT]\n     * ====\n     * It is unsafe to assume that an address for which this function returns\n     * false is an externally-owned account (EOA) and not a contract.\n     *\n     * Among others, `isContract` will return false for the following\n     * types of addresses:\n     *\n     *  - an externally-owned account\n     *  - a contract in construction\n     *  - an address where a contract will be created\n     *  - an address where a contract lived, but was destroyed\n     * ====\n     *\n     * [IMPORTANT]\n     * ====\n     * You shouldn't rely on `isContract` to protect against flash loan attacks!\n     *\n     * Preventing calls from contracts is highly discouraged. It breaks composability, breaks support for smart wallets\n     * like Gnosis Safe, and does not provide security since it can be circumvented by calling from a contract\n     * constructor.\n     * ====\n     */\n    function isContract(address account) internal view returns (bool) {\n        // This method relies on extcodesize/address.code.length, which returns 0\n        // for contracts in construction, since the code is only stored at the end\n        // of the constructor execution.\n\n        return account.code.length > 0;\n    }\n\n    /**\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\n     * `recipient`, forwarding all available gas and reverting on errors.\n     *\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\n     * imposed by `transfer`, making them unable to receive funds via\n     * `transfer`. {sendValue} removes this limitation.\n     *\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\n     *\n     * IMPORTANT: because control is transferred to `recipient`, care must be\n     * taken to not create reentrancy vulnerabilities. Consider using\n     * {ReentrancyGuard} or the\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\n     */\n    function sendValue(address payable recipient, uint256 amount) internal {\n        require(address(this).balance >= amount, \"Address: insufficient balance\");\n\n        (bool success, ) = recipient.call{value: amount}(\"\");\n        require(success, \"Address: unable to send value, recipient may have reverted\");\n    }\n\n    /**\n     * @dev Performs a Solidity function call using a low level `call`. A\n     * plain `call` is an unsafe replacement for a function call: use this\n     * function instead.\n     *\n     * If `target` reverts with a revert reason, it is bubbled up by this\n     * function (like regular Solidity function calls).\n     *\n     * Returns the raw returned data. To convert to the expected return value,\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\n     *\n     * Requirements:\n     *\n     * - `target` must be a contract.\n     * - calling `target` with `data` must not revert.\n     *\n     * _Available since v3.1._\n     */\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\n        return functionCall(target, data, \"Address: low-level call failed\");\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\n     * `errorMessage` as a fallback revert reason when `target` reverts.\n     *\n     * _Available since v3.1._\n     */\n    function functionCall(\n        address target,\n        bytes memory data,\n        string memory errorMessage\n    ) internal returns (bytes memory) {\n        return functionCallWithValue(target, data, 0, errorMessage);\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\n     * but also transferring `value` wei to `target`.\n     *\n     * Requirements:\n     *\n     * - the calling contract must have an ETH balance of at least `value`.\n     * - the called Solidity function must be `payable`.\n     *\n     * _Available since v3.1._\n     */\n    function functionCallWithValue(\n        address target,\n        bytes memory data,\n        uint256 value\n    ) internal returns (bytes memory) {\n        return functionCallWithValue(target, data, value, \"Address: low-level call with value failed\");\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\n     *\n     * _Available since v3.1._\n     */\n    function functionCallWithValue(\n        address target,\n        bytes memory data,\n        uint256 value,\n        string memory errorMessage\n    ) internal returns (bytes memory) {\n        require(address(this).balance >= value, \"Address: insufficient balance for call\");\n        require(isContract(target), \"Address: call to non-contract\");\n\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\n        return verifyCallResult(success, returndata, errorMessage);\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\n     * but performing a static call.\n     *\n     * _Available since v3.3._\n     */\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\n        return functionStaticCall(target, data, \"Address: low-level static call failed\");\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\n     * but performing a static call.\n     *\n     * _Available since v3.3._\n     */\n    function functionStaticCall(\n        address target,\n        bytes memory data,\n        string memory errorMessage\n    ) internal view returns (bytes memory) {\n        require(isContract(target), \"Address: static call to non-contract\");\n\n        (bool success, bytes memory returndata) = target.staticcall(data);\n        return verifyCallResult(success, returndata, errorMessage);\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\n     * but performing a delegate call.\n     *\n     * _Available since v3.4._\n     */\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\n        return functionDelegateCall(target, data, \"Address: low-level delegate call failed\");\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\n     * but performing a delegate call.\n     *\n     * _Available since v3.4._\n     */\n    function functionDelegateCall(\n        address target,\n        bytes memory data,\n        string memory errorMessage\n    ) internal returns (bytes memory) {\n        require(isContract(target), \"Address: delegate call to non-contract\");\n\n        (bool success, bytes memory returndata) = target.delegatecall(data);\n        return verifyCallResult(success, returndata, errorMessage);\n    }\n\n    /**\n     * @dev Tool to verifies that a low level call was successful, and revert if it wasn't, either by bubbling the\n     * revert reason using the provided one.\n     *\n     * _Available since v4.3._\n     */\n    function verifyCallResult(\n        bool success,\n        bytes memory returndata,\n        string memory errorMessage\n    ) internal pure returns (bytes memory) {\n        if (success) {\n            return returndata;\n        } else {\n            // Look for revert reason and bubble it up if present\n            if (returndata.length > 0) {\n                // The easiest way to bubble the revert reason is using memory via assembly\n\n                assembly {\n                    let returndata_size := mload(returndata)\n                    revert(add(32, returndata), returndata_size)\n                }\n            } else {\n                revert(errorMessage);\n            }\n        }\n    }\n}\n"
			},
			"@openzeppelin/contracts/token/ERC721/extensions/IERC721Enumerable.sol": {
				"content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.5.0) (token/ERC721/extensions/IERC721Enumerable.sol)\n\npragma solidity ^0.8.0;\n\nimport \"../IERC721.sol\";\n\n/**\n * @title ERC-721 Non-Fungible Token Standard, optional enumeration extension\n * @dev See https://eips.ethereum.org/EIPS/eip-721\n */\ninterface IERC721Enumerable is IERC721 {\n    /**\n     * @dev Returns the total amount of tokens stored by the contract.\n     */\n    function totalSupply() external view returns (uint256);\n\n    /**\n     * @dev Returns a token ID owned by `owner` at a given `index` of its token list.\n     * Use along with {balanceOf} to enumerate all of ``owner``'s tokens.\n     */\n    function tokenOfOwnerByIndex(address owner, uint256 index) external view returns (uint256);\n\n    /**\n     * @dev Returns a token ID at a given `index` of all the tokens stored by the contract.\n     * Use along with {totalSupply} to enumerate all tokens.\n     */\n    function tokenByIndex(uint256 index) external view returns (uint256);\n}\n"
			},
			"@openzeppelin/contracts/token/ERC721/extensions/IERC721Metadata.sol": {
				"content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts v4.4.1 (token/ERC721/extensions/IERC721Metadata.sol)\n\npragma solidity ^0.8.0;\n\nimport \"../IERC721.sol\";\n\n/**\n * @title ERC-721 Non-Fungible Token Standard, optional metadata extension\n * @dev See https://eips.ethereum.org/EIPS/eip-721\n */\ninterface IERC721Metadata is IERC721 {\n    /**\n     * @dev Returns the token collection name.\n     */\n    function name() external view returns (string memory);\n\n    /**\n     * @dev Returns the token collection symbol.\n     */\n    function symbol() external view returns (string memory);\n\n    /**\n     * @dev Returns the Uniform Resource Identifier (URI) for `tokenId` token.\n     */\n    function tokenURI(uint256 tokenId) external view returns (string memory);\n}\n"
			},
			"@openzeppelin/contracts/token/ERC721/IERC721Receiver.sol": {
				"content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts v4.4.1 (token/ERC721/IERC721Receiver.sol)\n\npragma solidity ^0.8.0;\n\n/**\n * @title ERC721 token receiver interface\n * @dev Interface for any contract that wants to support safeTransfers\n * from ERC721 asset contracts.\n */\ninterface IERC721Receiver {\n    /**\n     * @dev Whenever an {IERC721} `tokenId` token is transferred to this contract via {IERC721-safeTransferFrom}\n     * by `operator` from `from`, this function is called.\n     *\n     * It must return its Solidity selector to confirm the token transfer.\n     * If any other value is returned or the interface is not implemented by the recipient, the transfer will be reverted.\n     *\n     * The selector can be obtained in Solidity with `IERC721.onERC721Received.selector`.\n     */\n    function onERC721Received(\n        address operator,\n        address from,\n        uint256 tokenId,\n        bytes calldata data\n    ) external returns (bytes4);\n}\n"
			},
			"@openzeppelin/contracts/token/ERC721/IERC721.sol": {
				"content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts v4.4.1 (token/ERC721/IERC721.sol)\n\npragma solidity ^0.8.0;\n\nimport \"../../utils/introspection/IERC165.sol\";\n\n/**\n * @dev Required interface of an ERC721 compliant contract.\n */\ninterface IERC721 is IERC165 {\n    /**\n     * @dev Emitted when `tokenId` token is transferred from `from` to `to`.\n     */\n    event Transfer(address indexed from, address indexed to, uint256 indexed tokenId);\n\n    /**\n     * @dev Emitted when `owner` enables `approved` to manage the `tokenId` token.\n     */\n    event Approval(address indexed owner, address indexed approved, uint256 indexed tokenId);\n\n    /**\n     * @dev Emitted when `owner` enables or disables (`approved`) `operator` to manage all of its assets.\n     */\n    event ApprovalForAll(address indexed owner, address indexed operator, bool approved);\n\n    /**\n     * @dev Returns the number of tokens in ``owner``'s account.\n     */\n    function balanceOf(address owner) external view returns (uint256 balance);\n\n    /**\n     * @dev Returns the owner of the `tokenId` token.\n     *\n     * Requirements:\n     *\n     * - `tokenId` must exist.\n     */\n    function ownerOf(uint256 tokenId) external view returns (address owner);\n\n    /**\n     * @dev Safely transfers `tokenId` token from `from` to `to`, checking first that contract recipients\n     * are aware of the ERC721 protocol to prevent tokens from being forever locked.\n     *\n     * Requirements:\n     *\n     * - `from` cannot be the zero address.\n     * - `to` cannot be the zero address.\n     * - `tokenId` token must exist and be owned by `from`.\n     * - If the caller is not `from`, it must be have been allowed to move this token by either {approve} or {setApprovalForAll}.\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\n     *\n     * Emits a {Transfer} event.\n     */\n    function safeTransferFrom(\n        address from,\n        address to,\n        uint256 tokenId\n    ) external;\n\n    /**\n     * @dev Transfers `tokenId` token from `from` to `to`.\n     *\n     * WARNING: Usage of this method is discouraged, use {safeTransferFrom} whenever possible.\n     *\n     * Requirements:\n     *\n     * - `from` cannot be the zero address.\n     * - `to` cannot be the zero address.\n     * - `tokenId` token must be owned by `from`.\n     * - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}.\n     *\n     * Emits a {Transfer} event.\n     */\n    function transferFrom(\n        address from,\n        address to,\n        uint256 tokenId\n    ) external;\n\n    /**\n     * @dev Gives permission to `to` to transfer `tokenId` token to another account.\n     * The approval is cleared when the token is transferred.\n     *\n     * Only a single account can be approved at a time, so approving the zero address clears previous approvals.\n     *\n     * Requirements:\n     *\n     * - The caller must own the token or be an approved operator.\n     * - `tokenId` must exist.\n     *\n     * Emits an {Approval} event.\n     */\n    function approve(address to, uint256 tokenId) external;\n\n    /**\n     * @dev Returns the account approved for `tokenId` token.\n     *\n     * Requirements:\n     *\n     * - `tokenId` must exist.\n     */\n    function getApproved(uint256 tokenId) external view returns (address operator);\n\n    /**\n     * @dev Approve or remove `operator` as an operator for the caller.\n     * Operators can call {transferFrom} or {safeTransferFrom} for any token owned by the caller.\n     *\n     * Requirements:\n     *\n     * - The `operator` cannot be the caller.\n     *\n     * Emits an {ApprovalForAll} event.\n     */\n    function setApprovalForAll(address operator, bool _approved) external;\n\n    /**\n     * @dev Returns if the `operator` is allowed to manage all of the assets of `owner`.\n     *\n     * See {setApprovalForAll}\n     */\n    function isApprovedForAll(address owner, address operator) external view returns (bool);\n\n    /**\n     * @dev Safely transfers `tokenId` token from `from` to `to`.\n     *\n     * Requirements:\n     *\n     * - `from` cannot be the zero address.\n     * - `to` cannot be the zero address.\n     * - `tokenId` token must exist and be owned by `from`.\n     * - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}.\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\n     *\n     * Emits a {Transfer} event.\n     */\n    function safeTransferFrom(\n        address from,\n        address to,\n        uint256 tokenId,\n        bytes calldata data\n    ) external;\n}\n"
			},
			"@openzeppelin/contracts/utils/introspection/IERC165.sol": {
				"content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts v4.4.1 (utils/introspection/IERC165.sol)\n\npragma solidity ^0.8.0;\n\n/**\n * @dev Interface of the ERC165 standard, as defined in the\n * https://eips.ethereum.org/EIPS/eip-165[EIP].\n *\n * Implementers can declare support of contract interfaces, which can then be\n * queried by others ({ERC165Checker}).\n *\n * For an implementation, see {ERC165}.\n */\ninterface IERC165 {\n    /**\n     * @dev Returns true if this contract implements the interface defined by\n     * `interfaceId`. See the corresponding\n     * https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section]\n     * to learn more about how these ids are created.\n     *\n     * This function call must use less than 30 000 gas.\n     */\n    function supportsInterface(bytes4 interfaceId) external view returns (bool);\n}\n"
			}
		},
		"settings": {
			"optimizer": {
				"enabled": true,
				"runs": 200
			},
			"outputSelection": {
				"*": {
					"": [
						"ast"
					],
					"*": [
						"abi",
						"metadata",
						"devdoc",
						"userdoc",
						"evm.legacyAssembly",
						"evm.bytecode",
						"evm.deployedBytecode",
						"evm.methodIdentifiers",
						"evm.gasEstimates",
						"evm.assembly"
					]
				}
			}
		}
	},
	"output": {
		"contracts": {
			"@openzeppelin/contracts/access/Ownable.sol": {
				"Ownable": {
					"abi": [
						{
							"anonymous": false,
							"inputs": [
								{
									"indexed": true,
									"internalType": "address",
									"name": "previousOwner",
									"type": "address"
								},
								{
									"indexed": true,
									"internalType": "address",
									"name": "newOwner",
									"type": "address"
								}
							],
							"name": "OwnershipTransferred",
							"type": "event"
						},
						{
							"inputs": [],
							"name": "owner",
							"outputs": [
								{
									"internalType": "address",
									"name": "",
									"type": "address"
								}
							],
							"stateMutability": "view",
							"type": "function"
						},
						{
							"inputs": [],
							"name": "renounceOwnership",
							"outputs": [],
							"stateMutability": "nonpayable",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "address",
									"name": "newOwner",
									"type": "address"
								}
							],
							"name": "transferOwnership",
							"outputs": [],
							"stateMutability": "nonpayable",
							"type": "function"
						}
					],
					"devdoc": {
						"details": "Contract module which provides a basic access control mechanism, where there is an account (an owner) that can be granted exclusive access to specific functions. By default, the owner account will be the one that deploys the contract. This can later be changed with {transferOwnership}. This module is used through inheritance. It will make available the modifier `onlyOwner`, which can be applied to your functions to restrict their use to the owner.",
						"kind": "dev",
						"methods": {
							"constructor": {
								"details": "Initializes the contract setting the deployer as the initial owner."
							},
							"owner()": {
								"details": "Returns the address of the current owner."
							},
							"renounceOwnership()": {
								"details": "Leaves the contract without owner. It will not be possible to call `onlyOwner` functions anymore. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby removing any functionality that is only available to the owner."
							},
							"transferOwnership(address)": {
								"details": "Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner."
							}
						},
						"version": 1
					},
					"evm": {
						"assembly": "",
						"bytecode": {
							"functionDebugData": {},
							"generatedSources": [],
							"linkReferences": {},
							"object": "",
							"opcodes": "",
							"sourceMap": ""
						},
						"deployedBytecode": {
							"functionDebugData": {},
							"generatedSources": [],
							"immutableReferences": {},
							"linkReferences": {},
							"object": "",
							"opcodes": "",
							"sourceMap": ""
						},
						"gasEstimates": null,
						"legacyAssembly": null,
						"methodIdentifiers": {
							"owner()": "8da5cb5b",
							"renounceOwnership()": "715018a6",
							"transferOwnership(address)": "f2fde38b"
						}
					},
					"metadata": "{\"compiler\":{\"version\":\"0.8.9+commit.e5eed63a\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"details\":\"Contract module which provides a basic access control mechanism, where there is an account (an owner) that can be granted exclusive access to specific functions. By default, the owner account will be the one that deploys the contract. This can later be changed with {transferOwnership}. This module is used through inheritance. It will make available the modifier `onlyOwner`, which can be applied to your functions to restrict their use to the owner.\",\"kind\":\"dev\",\"methods\":{\"constructor\":{\"details\":\"Initializes the contract setting the deployer as the initial owner.\"},\"owner()\":{\"details\":\"Returns the address of the current owner.\"},\"renounceOwnership()\":{\"details\":\"Leaves the contract without owner. It will not be possible to call `onlyOwner` functions anymore. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby removing any functionality that is only available to the owner.\"},\"transferOwnership(address)\":{\"details\":\"Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner.\"}},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"@openzeppelin/contracts/access/Ownable.sol\":\"Ownable\"},\"evmVersion\":\"london\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\"},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts/access/Ownable.sol\":{\"keccak256\":\"0x24e0364e503a9bbde94c715d26573a76f14cd2a202d45f96f52134ab806b67b9\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://e12cbaa7378fd9b62280e4e1d164bedcb4399ce238f5f98fc0eefb7e50577981\",\"dweb:/ipfs/QmXRoFGUgfsaRkoPT5bxNMtSayKTQ8GZATLPXf69HcRA51\"]},\"@openzeppelin/contracts/utils/Context.sol\":{\"keccak256\":\"0xe2e337e6dde9ef6b680e07338c493ebea1b5fd09b43424112868e9cc1706bca7\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://6df0ddf21ce9f58271bdfaa85cde98b200ef242a05a3f85c2bc10a8294800a92\",\"dweb:/ipfs/QmRK2Y5Yc6BK7tGKkgsgn3aJEQGi5aakeSPZvS65PV8Xp3\"]}},\"version\":1}",
					"userdoc": {
						"kind": "user",
						"methods": {},
						"version": 1
					}
				}
			},
			"@openzeppelin/contracts/token/ERC721/IERC721.sol": {
				"IERC721": {
					"abi": [
						{
							"anonymous": false,
							"inputs": [
								{
									"indexed": true,
									"internalType": "address",
									"name": "owner",
									"type": "address"
								},
								{
									"indexed": true,
									"internalType": "address",
									"name": "approved",
									"type": "address"
								},
								{
									"indexed": true,
									"internalType": "uint256",
									"name": "tokenId",
									"type": "uint256"
								}
							],
							"name": "Approval",
							"type": "event"
						},
						{
							"anonymous": false,
							"inputs": [
								{
									"indexed": true,
									"internalType": "address",
									"name": "owner",
									"type": "address"
								},
								{
									"indexed": true,
									"internalType": "address",
									"name": "operator",
									"type": "address"
								},
								{
									"indexed": false,
									"internalType": "bool",
									"name": "approved",
									"type": "bool"
								}
							],
							"name": "ApprovalForAll",
							"type": "event"
						},
						{
							"anonymous": false,
							"inputs": [
								{
									"indexed": true,
									"internalType": "address",
									"name": "from",
									"type": "address"
								},
								{
									"indexed": true,
									"internalType": "address",
									"name": "to",
									"type": "address"
								},
								{
									"indexed": true,
									"internalType": "uint256",
									"name": "tokenId",
									"type": "uint256"
								}
							],
							"name": "Transfer",
							"type": "event"
						},
						{
							"inputs": [
								{
									"internalType": "address",
									"name": "to",
									"type": "address"
								},
								{
									"internalType": "uint256",
									"name": "tokenId",
									"type": "uint256"
								}
							],
							"name": "approve",
							"outputs": [],
							"stateMutability": "nonpayable",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "address",
									"name": "owner",
									"type": "address"
								}
							],
							"name": "balanceOf",
							"outputs": [
								{
									"internalType": "uint256",
									"name": "balance",
									"type": "uint256"
								}
							],
							"stateMutability": "view",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "uint256",
									"name": "tokenId",
									"type": "uint256"
								}
							],
							"name": "getApproved",
							"outputs": [
								{
									"internalType": "address",
									"name": "operator",
									"type": "address"
								}
							],
							"stateMutability": "view",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "address",
									"name": "owner",
									"type": "address"
								},
								{
									"internalType": "address",
									"name": "operator",
									"type": "address"
								}
							],
							"name": "isApprovedForAll",
							"outputs": [
								{
									"internalType": "bool",
									"name": "",
									"type": "bool"
								}
							],
							"stateMutability": "view",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "uint256",
									"name": "tokenId",
									"type": "uint256"
								}
							],
							"name": "ownerOf",
							"outputs": [
								{
									"internalType": "address",
									"name": "owner",
									"type": "address"
								}
							],
							"stateMutability": "view",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "address",
									"name": "from",
									"type": "address"
								},
								{
									"internalType": "address",
									"name": "to",
									"type": "address"
								},
								{
									"internalType": "uint256",
									"name": "tokenId",
									"type": "uint256"
								}
							],
							"name": "safeTransferFrom",
							"outputs": [],
							"stateMutability": "nonpayable",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "address",
									"name": "from",
									"type": "address"
								},
								{
									"internalType": "address",
									"name": "to",
									"type": "address"
								},
								{
									"internalType": "uint256",
									"name": "tokenId",
									"type": "uint256"
								},
								{
									"internalType": "bytes",
									"name": "data",
									"type": "bytes"
								}
							],
							"name": "safeTransferFrom",
							"outputs": [],
							"stateMutability": "nonpayable",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "address",
									"name": "operator",
									"type": "address"
								},
								{
									"internalType": "bool",
									"name": "_approved",
									"type": "bool"
								}
							],
							"name": "setApprovalForAll",
							"outputs": [],
							"stateMutability": "nonpayable",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "bytes4",
									"name": "interfaceId",
									"type": "bytes4"
								}
							],
							"name": "supportsInterface",
							"outputs": [
								{
									"internalType": "bool",
									"name": "",
									"type": "bool"
								}
							],
							"stateMutability": "view",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "address",
									"name": "from",
									"type": "address"
								},
								{
									"internalType": "address",
									"name": "to",
									"type": "address"
								},
								{
									"internalType": "uint256",
									"name": "tokenId",
									"type": "uint256"
								}
							],
							"name": "transferFrom",
							"outputs": [],
							"stateMutability": "nonpayable",
							"type": "function"
						}
					],
					"devdoc": {
						"details": "Required interface of an ERC721 compliant contract.",
						"events": {
							"Approval(address,address,uint256)": {
								"details": "Emitted when `owner` enables `approved` to manage the `tokenId` token."
							},
							"ApprovalForAll(address,address,bool)": {
								"details": "Emitted when `owner` enables or disables (`approved`) `operator` to manage all of its assets."
							},
							"Transfer(address,address,uint256)": {
								"details": "Emitted when `tokenId` token is transferred from `from` to `to`."
							}
						},
						"kind": "dev",
						"methods": {
							"approve(address,uint256)": {
								"details": "Gives permission to `to` to transfer `tokenId` token to another account. The approval is cleared when the token is transferred. Only a single account can be approved at a time, so approving the zero address clears previous approvals. Requirements: - The caller must own the token or be an approved operator. - `tokenId` must exist. Emits an {Approval} event."
							},
							"balanceOf(address)": {
								"details": "Returns the number of tokens in ``owner``'s account."
							},
							"getApproved(uint256)": {
								"details": "Returns the account approved for `tokenId` token. Requirements: - `tokenId` must exist."
							},
							"isApprovedForAll(address,address)": {
								"details": "Returns if the `operator` is allowed to manage all of the assets of `owner`. See {setApprovalForAll}"
							},
							"ownerOf(uint256)": {
								"details": "Returns the owner of the `tokenId` token. Requirements: - `tokenId` must exist."
							},
							"safeTransferFrom(address,address,uint256)": {
								"details": "Safely transfers `tokenId` token from `from` to `to`, checking first that contract recipients are aware of the ERC721 protocol to prevent tokens from being forever locked. Requirements: - `from` cannot be the zero address. - `to` cannot be the zero address. - `tokenId` token must exist and be owned by `from`. - If the caller is not `from`, it must be have been allowed to move this token by either {approve} or {setApprovalForAll}. - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer. Emits a {Transfer} event."
							},
							"safeTransferFrom(address,address,uint256,bytes)": {
								"details": "Safely transfers `tokenId` token from `from` to `to`. Requirements: - `from` cannot be the zero address. - `to` cannot be the zero address. - `tokenId` token must exist and be owned by `from`. - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}. - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer. Emits a {Transfer} event."
							},
							"setApprovalForAll(address,bool)": {
								"details": "Approve or remove `operator` as an operator for the caller. Operators can call {transferFrom} or {safeTransferFrom} for any token owned by the caller. Requirements: - The `operator` cannot be the caller. Emits an {ApprovalForAll} event."
							},
							"supportsInterface(bytes4)": {
								"details": "Returns true if this contract implements the interface defined by `interfaceId`. See the corresponding https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section] to learn more about how these ids are created. This function call must use less than 30 000 gas."
							},
							"transferFrom(address,address,uint256)": {
								"details": "Transfers `tokenId` token from `from` to `to`. WARNING: Usage of this method is discouraged, use {safeTransferFrom} whenever possible. Requirements: - `from` cannot be the zero address. - `to` cannot be the zero address. - `tokenId` token must be owned by `from`. - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}. Emits a {Transfer} event."
							}
						},
						"version": 1
					},
					"evm": {
						"assembly": "",
						"bytecode": {
							"functionDebugData": {},
							"generatedSources": [],
							"linkReferences": {},
							"object": "",
							"opcodes": "",
							"sourceMap": ""
						},
						"deployedBytecode": {
							"functionDebugData": {},
							"generatedSources": [],
							"immutableReferences": {},
							"linkReferences": {},
							"object": "",
							"opcodes": "",
							"sourceMap": ""
						},
						"gasEstimates": null,
						"legacyAssembly": null,
						"methodIdentifiers": {
							"approve(address,uint256)": "095ea7b3",
							"balanceOf(address)": "70a08231",
							"getApproved(uint256)": "081812fc",
							"isApprovedForAll(address,address)": "e985e9c5",
							"ownerOf(uint256)": "6352211e",
							"safeTransferFrom(address,address,uint256)": "42842e0e",
							"safeTransferFrom(address,address,uint256,bytes)": "b88d4fde",
							"setApprovalForAll(address,bool)": "a22cb465",
							"supportsInterface(bytes4)": "01ffc9a7",
							"transferFrom(address,address,uint256)": "23b872dd"
						}
					},
					"metadata": "{\"compiler\":{\"version\":\"0.8.9+commit.e5eed63a\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"approved\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"approved\",\"type\":\"bool\"}],\"name\":\"ApprovalForAll\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"balance\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"getApproved\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"}],\"name\":\"isApprovedForAll\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"ownerOf\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"safeTransferFrom\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"data\",\"type\":\"bytes\"}],\"name\":\"safeTransferFrom\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"_approved\",\"type\":\"bool\"}],\"name\":\"setApprovalForAll\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes4\",\"name\":\"interfaceId\",\"type\":\"bytes4\"}],\"name\":\"supportsInterface\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"details\":\"Required interface of an ERC721 compliant contract.\",\"events\":{\"Approval(address,address,uint256)\":{\"details\":\"Emitted when `owner` enables `approved` to manage the `tokenId` token.\"},\"ApprovalForAll(address,address,bool)\":{\"details\":\"Emitted when `owner` enables or disables (`approved`) `operator` to manage all of its assets.\"},\"Transfer(address,address,uint256)\":{\"details\":\"Emitted when `tokenId` token is transferred from `from` to `to`.\"}},\"kind\":\"dev\",\"methods\":{\"approve(address,uint256)\":{\"details\":\"Gives permission to `to` to transfer `tokenId` token to another account. The approval is cleared when the token is transferred. Only a single account can be approved at a time, so approving the zero address clears previous approvals. Requirements: - The caller must own the token or be an approved operator. - `tokenId` must exist. Emits an {Approval} event.\"},\"balanceOf(address)\":{\"details\":\"Returns the number of tokens in ``owner``'s account.\"},\"getApproved(uint256)\":{\"details\":\"Returns the account approved for `tokenId` token. Requirements: - `tokenId` must exist.\"},\"isApprovedForAll(address,address)\":{\"details\":\"Returns if the `operator` is allowed to manage all of the assets of `owner`. See {setApprovalForAll}\"},\"ownerOf(uint256)\":{\"details\":\"Returns the owner of the `tokenId` token. Requirements: - `tokenId` must exist.\"},\"safeTransferFrom(address,address,uint256)\":{\"details\":\"Safely transfers `tokenId` token from `from` to `to`, checking first that contract recipients are aware of the ERC721 protocol to prevent tokens from being forever locked. Requirements: - `from` cannot be the zero address. - `to` cannot be the zero address. - `tokenId` token must exist and be owned by `from`. - If the caller is not `from`, it must be have been allowed to move this token by either {approve} or {setApprovalForAll}. - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer. Emits a {Transfer} event.\"},\"safeTransferFrom(address,address,uint256,bytes)\":{\"details\":\"Safely transfers `tokenId` token from `from` to `to`. Requirements: - `from` cannot be the zero address. - `to` cannot be the zero address. - `tokenId` token must exist and be owned by `from`. - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}. - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer. Emits a {Transfer} event.\"},\"setApprovalForAll(address,bool)\":{\"details\":\"Approve or remove `operator` as an operator for the caller. Operators can call {transferFrom} or {safeTransferFrom} for any token owned by the caller. Requirements: - The `operator` cannot be the caller. Emits an {ApprovalForAll} event.\"},\"supportsInterface(bytes4)\":{\"details\":\"Returns true if this contract implements the interface defined by `interfaceId`. See the corresponding https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section] to learn more about how these ids are created. This function call must use less than 30 000 gas.\"},\"transferFrom(address,address,uint256)\":{\"details\":\"Transfers `tokenId` token from `from` to `to`. WARNING: Usage of this method is discouraged, use {safeTransferFrom} whenever possible. Requirements: - `from` cannot be the zero address. - `to` cannot be the zero address. - `tokenId` token must be owned by `from`. - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}. Emits a {Transfer} event.\"}},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"@openzeppelin/contracts/token/ERC721/IERC721.sol\":\"IERC721\"},\"evmVersion\":\"london\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\"},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts/token/ERC721/IERC721.sol\":{\"keccak256\":\"0x516a22876c1fab47f49b1bc22b4614491cd05338af8bd2e7b382da090a079990\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://a439187f7126d31add4557f82d8aed6be0162007cd7182c48fd934dbab8f3849\",\"dweb:/ipfs/QmRPLguRFvrRJS7r6F1bcLvsx6q1VrgjEpZafyeL8D7xZh\"]},\"@openzeppelin/contracts/utils/introspection/IERC165.sol\":{\"keccak256\":\"0x447a5f3ddc18419d41ff92b3773fb86471b1db25773e07f877f548918a185bf1\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://be161e54f24e5c6fae81a12db1a8ae87bc5ae1b0ddc805d82a1440a68455088f\",\"dweb:/ipfs/QmP7C3CHdY9urF4dEMb9wmsp1wMxHF6nhA2yQE5SKiPAdy\"]}},\"version\":1}",
					"userdoc": {
						"kind": "user",
						"methods": {},
						"version": 1
					}
				}
			},
			"@openzeppelin/contracts/token/ERC721/IERC721Receiver.sol": {
				"IERC721Receiver": {
					"abi": [
						{
							"inputs": [
								{
									"internalType": "address",
									"name": "operator",
									"type": "address"
								},
								{
									"internalType": "address",
									"name": "from",
									"type": "address"
								},
								{
									"internalType": "uint256",
									"name": "tokenId",
									"type": "uint256"
								},
								{
									"internalType": "bytes",
									"name": "data",
									"type": "bytes"
								}
							],
							"name": "onERC721Received",
							"outputs": [
								{
									"internalType": "bytes4",
									"name": "",
									"type": "bytes4"
								}
							],
							"stateMutability": "nonpayable",
							"type": "function"
						}
					],
					"devdoc": {
						"details": "Interface for any contract that wants to support safeTransfers from ERC721 asset contracts.",
						"kind": "dev",
						"methods": {
							"onERC721Received(address,address,uint256,bytes)": {
								"details": "Whenever an {IERC721} `tokenId` token is transferred to this contract via {IERC721-safeTransferFrom} by `operator` from `from`, this function is called. It must return its Solidity selector to confirm the token transfer. If any other value is returned or the interface is not implemented by the recipient, the transfer will be reverted. The selector can be obtained in Solidity with `IERC721.onERC721Received.selector`."
							}
						},
						"title": "ERC721 token receiver interface",
						"version": 1
					},
					"evm": {
						"assembly": "",
						"bytecode": {
							"functionDebugData": {},
							"generatedSources": [],
							"linkReferences": {},
							"object": "",
							"opcodes": "",
							"sourceMap": ""
						},
						"deployedBytecode": {
							"functionDebugData": {},
							"generatedSources": [],
							"immutableReferences": {},
							"linkReferences": {},
							"object": "",
							"opcodes": "",
							"sourceMap": ""
						},
						"gasEstimates": null,
						"legacyAssembly": null,
						"methodIdentifiers": {
							"onERC721Received(address,address,uint256,bytes)": "150b7a02"
						}
					},
					"metadata": "{\"compiler\":{\"version\":\"0.8.9+commit.e5eed63a\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"data\",\"type\":\"bytes\"}],\"name\":\"onERC721Received\",\"outputs\":[{\"internalType\":\"bytes4\",\"name\":\"\",\"type\":\"bytes4\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"details\":\"Interface for any contract that wants to support safeTransfers from ERC721 asset contracts.\",\"kind\":\"dev\",\"methods\":{\"onERC721Received(address,address,uint256,bytes)\":{\"details\":\"Whenever an {IERC721} `tokenId` token is transferred to this contract via {IERC721-safeTransferFrom} by `operator` from `from`, this function is called. It must return its Solidity selector to confirm the token transfer. If any other value is returned or the interface is not implemented by the recipient, the transfer will be reverted. The selector can be obtained in Solidity with `IERC721.onERC721Received.selector`.\"}},\"title\":\"ERC721 token receiver interface\",\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"@openzeppelin/contracts/token/ERC721/IERC721Receiver.sol\":\"IERC721Receiver\"},\"evmVersion\":\"london\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\"},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts/token/ERC721/IERC721Receiver.sol\":{\"keccak256\":\"0xd5fa74b4fb323776fa4a8158800fec9d5ac0fec0d6dd046dd93798632ada265f\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://33017a30a99cc5411a9e376622c31fc4a55cfc6a335e2f57f00cbf24a817ff3f\",\"dweb:/ipfs/QmWNQtWTPhA7Lo8nbxbc8KFMvZwbFYB8fSeEQ3vuapSV4a\"]}},\"version\":1}",
					"userdoc": {
						"kind": "user",
						"methods": {},
						"version": 1
					}
				}
			},
			"@openzeppelin/contracts/token/ERC721/extensions/IERC721Enumerable.sol": {
				"IERC721Enumerable": {
					"abi": [
						{
							"anonymous": false,
							"inputs": [
								{
									"indexed": true,
									"internalType": "address",
									"name": "owner",
									"type": "address"
								},
								{
									"indexed": true,
									"internalType": "address",
									"name": "approved",
									"type": "address"
								},
								{
									"indexed": true,
									"internalType": "uint256",
									"name": "tokenId",
									"type": "uint256"
								}
							],
							"name": "Approval",
							"type": "event"
						},
						{
							"anonymous": false,
							"inputs": [
								{
									"indexed": true,
									"internalType": "address",
									"name": "owner",
									"type": "address"
								},
								{
									"indexed": true,
									"internalType": "address",
									"name": "operator",
									"type": "address"
								},
								{
									"indexed": false,
									"internalType": "bool",
									"name": "approved",
									"type": "bool"
								}
							],
							"name": "ApprovalForAll",
							"type": "event"
						},
						{
							"anonymous": false,
							"inputs": [
								{
									"indexed": true,
									"internalType": "address",
									"name": "from",
									"type": "address"
								},
								{
									"indexed": true,
									"internalType": "address",
									"name": "to",
									"type": "address"
								},
								{
									"indexed": true,
									"internalType": "uint256",
									"name": "tokenId",
									"type": "uint256"
								}
							],
							"name": "Transfer",
							"type": "event"
						},
						{
							"inputs": [
								{
									"internalType": "address",
									"name": "to",
									"type": "address"
								},
								{
									"internalType": "uint256",
									"name": "tokenId",
									"type": "uint256"
								}
							],
							"name": "approve",
							"outputs": [],
							"stateMutability": "nonpayable",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "address",
									"name": "owner",
									"type": "address"
								}
							],
							"name": "balanceOf",
							"outputs": [
								{
									"internalType": "uint256",
									"name": "balance",
									"type": "uint256"
								}
							],
							"stateMutability": "view",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "uint256",
									"name": "tokenId",
									"type": "uint256"
								}
							],
							"name": "getApproved",
							"outputs": [
								{
									"internalType": "address",
									"name": "operator",
									"type": "address"
								}
							],
							"stateMutability": "view",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "address",
									"name": "owner",
									"type": "address"
								},
								{
									"internalType": "address",
									"name": "operator",
									"type": "address"
								}
							],
							"name": "isApprovedForAll",
							"outputs": [
								{
									"internalType": "bool",
									"name": "",
									"type": "bool"
								}
							],
							"stateMutability": "view",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "uint256",
									"name": "tokenId",
									"type": "uint256"
								}
							],
							"name": "ownerOf",
							"outputs": [
								{
									"internalType": "address",
									"name": "owner",
									"type": "address"
								}
							],
							"stateMutability": "view",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "address",
									"name": "from",
									"type": "address"
								},
								{
									"internalType": "address",
									"name": "to",
									"type": "address"
								},
								{
									"internalType": "uint256",
									"name": "tokenId",
									"type": "uint256"
								}
							],
							"name": "safeTransferFrom",
							"outputs": [],
							"stateMutability": "nonpayable",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "address",
									"name": "from",
									"type": "address"
								},
								{
									"internalType": "address",
									"name": "to",
									"type": "address"
								},
								{
									"internalType": "uint256",
									"name": "tokenId",
									"type": "uint256"
								},
								{
									"internalType": "bytes",
									"name": "data",
									"type": "bytes"
								}
							],
							"name": "safeTransferFrom",
							"outputs": [],
							"stateMutability": "nonpayable",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "address",
									"name": "operator",
									"type": "address"
								},
								{
									"internalType": "bool",
									"name": "_approved",
									"type": "bool"
								}
							],
							"name": "setApprovalForAll",
							"outputs": [],
							"stateMutability": "nonpayable",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "bytes4",
									"name": "interfaceId",
									"type": "bytes4"
								}
							],
							"name": "supportsInterface",
							"outputs": [
								{
									"internalType": "bool",
									"name": "",
									"type": "bool"
								}
							],
							"stateMutability": "view",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "uint256",
									"name": "index",
									"type": "uint256"
								}
							],
							"name": "tokenByIndex",
							"outputs": [
								{
									"internalType": "uint256",
									"name": "",
									"type": "uint256"
								}
							],
							"stateMutability": "view",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "address",
									"name": "owner",
									"type": "address"
								},
								{
									"internalType": "uint256",
									"name": "index",
									"type": "uint256"
								}
							],
							"name": "tokenOfOwnerByIndex",
							"outputs": [
								{
									"internalType": "uint256",
									"name": "",
									"type": "uint256"
								}
							],
							"stateMutability": "view",
							"type": "function"
						},
						{
							"inputs": [],
							"name": "totalSupply",
							"outputs": [
								{
									"internalType": "uint256",
									"name": "",
									"type": "uint256"
								}
							],
							"stateMutability": "view",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "address",
									"name": "from",
									"type": "address"
								},
								{
									"internalType": "address",
									"name": "to",
									"type": "address"
								},
								{
									"internalType": "uint256",
									"name": "tokenId",
									"type": "uint256"
								}
							],
							"name": "transferFrom",
							"outputs": [],
							"stateMutability": "nonpayable",
							"type": "function"
						}
					],
					"devdoc": {
						"details": "See https://eips.ethereum.org/EIPS/eip-721",
						"kind": "dev",
						"methods": {
							"approve(address,uint256)": {
								"details": "Gives permission to `to` to transfer `tokenId` token to another account. The approval is cleared when the token is transferred. Only a single account can be approved at a time, so approving the zero address clears previous approvals. Requirements: - The caller must own the token or be an approved operator. - `tokenId` must exist. Emits an {Approval} event."
							},
							"balanceOf(address)": {
								"details": "Returns the number of tokens in ``owner``'s account."
							},
							"getApproved(uint256)": {
								"details": "Returns the account approved for `tokenId` token. Requirements: - `tokenId` must exist."
							},
							"isApprovedForAll(address,address)": {
								"details": "Returns if the `operator` is allowed to manage all of the assets of `owner`. See {setApprovalForAll}"
							},
							"ownerOf(uint256)": {
								"details": "Returns the owner of the `tokenId` token. Requirements: - `tokenId` must exist."
							},
							"safeTransferFrom(address,address,uint256)": {
								"details": "Safely transfers `tokenId` token from `from` to `to`, checking first that contract recipients are aware of the ERC721 protocol to prevent tokens from being forever locked. Requirements: - `from` cannot be the zero address. - `to` cannot be the zero address. - `tokenId` token must exist and be owned by `from`. - If the caller is not `from`, it must be have been allowed to move this token by either {approve} or {setApprovalForAll}. - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer. Emits a {Transfer} event."
							},
							"safeTransferFrom(address,address,uint256,bytes)": {
								"details": "Safely transfers `tokenId` token from `from` to `to`. Requirements: - `from` cannot be the zero address. - `to` cannot be the zero address. - `tokenId` token must exist and be owned by `from`. - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}. - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer. Emits a {Transfer} event."
							},
							"setApprovalForAll(address,bool)": {
								"details": "Approve or remove `operator` as an operator for the caller. Operators can call {transferFrom} or {safeTransferFrom} for any token owned by the caller. Requirements: - The `operator` cannot be the caller. Emits an {ApprovalForAll} event."
							},
							"supportsInterface(bytes4)": {
								"details": "Returns true if this contract implements the interface defined by `interfaceId`. See the corresponding https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section] to learn more about how these ids are created. This function call must use less than 30 000 gas."
							},
							"tokenByIndex(uint256)": {
								"details": "Returns a token ID at a given `index` of all the tokens stored by the contract. Use along with {totalSupply} to enumerate all tokens."
							},
							"tokenOfOwnerByIndex(address,uint256)": {
								"details": "Returns a token ID owned by `owner` at a given `index` of its token list. Use along with {balanceOf} to enumerate all of ``owner``'s tokens."
							},
							"totalSupply()": {
								"details": "Returns the total amount of tokens stored by the contract."
							},
							"transferFrom(address,address,uint256)": {
								"details": "Transfers `tokenId` token from `from` to `to`. WARNING: Usage of this method is discouraged, use {safeTransferFrom} whenever possible. Requirements: - `from` cannot be the zero address. - `to` cannot be the zero address. - `tokenId` token must be owned by `from`. - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}. Emits a {Transfer} event."
							}
						},
						"title": "ERC-721 Non-Fungible Token Standard, optional enumeration extension",
						"version": 1
					},
					"evm": {
						"assembly": "",
						"bytecode": {
							"functionDebugData": {},
							"generatedSources": [],
							"linkReferences": {},
							"object": "",
							"opcodes": "",
							"sourceMap": ""
						},
						"deployedBytecode": {
							"functionDebugData": {},
							"generatedSources": [],
							"immutableReferences": {},
							"linkReferences": {},
							"object": "",
							"opcodes": "",
							"sourceMap": ""
						},
						"gasEstimates": null,
						"legacyAssembly": null,
						"methodIdentifiers": {
							"approve(address,uint256)": "095ea7b3",
							"balanceOf(address)": "70a08231",
							"getApproved(uint256)": "081812fc",
							"isApprovedForAll(address,address)": "e985e9c5",
							"ownerOf(uint256)": "6352211e",
							"safeTransferFrom(address,address,uint256)": "42842e0e",
							"safeTransferFrom(address,address,uint256,bytes)": "b88d4fde",
							"setApprovalForAll(address,bool)": "a22cb465",
							"supportsInterface(bytes4)": "01ffc9a7",
							"tokenByIndex(uint256)": "4f6ccce7",
							"tokenOfOwnerByIndex(address,uint256)": "2f745c59",
							"totalSupply()": "18160ddd",
							"transferFrom(address,address,uint256)": "23b872dd"
						}
					},
					"metadata": "{\"compiler\":{\"version\":\"0.8.9+commit.e5eed63a\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"approved\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"approved\",\"type\":\"bool\"}],\"name\":\"ApprovalForAll\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"balance\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"getApproved\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"}],\"name\":\"isApprovedForAll\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"ownerOf\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"safeTransferFrom\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"data\",\"type\":\"bytes\"}],\"name\":\"safeTransferFrom\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"_approved\",\"type\":\"bool\"}],\"name\":\"setApprovalForAll\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes4\",\"name\":\"interfaceId\",\"type\":\"bytes4\"}],\"name\":\"supportsInterface\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"index\",\"type\":\"uint256\"}],\"name\":\"tokenByIndex\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"index\",\"type\":\"uint256\"}],\"name\":\"tokenOfOwnerByIndex\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"details\":\"See https://eips.ethereum.org/EIPS/eip-721\",\"kind\":\"dev\",\"methods\":{\"approve(address,uint256)\":{\"details\":\"Gives permission to `to` to transfer `tokenId` token to another account. The approval is cleared when the token is transferred. Only a single account can be approved at a time, so approving the zero address clears previous approvals. Requirements: - The caller must own the token or be an approved operator. - `tokenId` must exist. Emits an {Approval} event.\"},\"balanceOf(address)\":{\"details\":\"Returns the number of tokens in ``owner``'s account.\"},\"getApproved(uint256)\":{\"details\":\"Returns the account approved for `tokenId` token. Requirements: - `tokenId` must exist.\"},\"isApprovedForAll(address,address)\":{\"details\":\"Returns if the `operator` is allowed to manage all of the assets of `owner`. See {setApprovalForAll}\"},\"ownerOf(uint256)\":{\"details\":\"Returns the owner of the `tokenId` token. Requirements: - `tokenId` must exist.\"},\"safeTransferFrom(address,address,uint256)\":{\"details\":\"Safely transfers `tokenId` token from `from` to `to`, checking first that contract recipients are aware of the ERC721 protocol to prevent tokens from being forever locked. Requirements: - `from` cannot be the zero address. - `to` cannot be the zero address. - `tokenId` token must exist and be owned by `from`. - If the caller is not `from`, it must be have been allowed to move this token by either {approve} or {setApprovalForAll}. - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer. Emits a {Transfer} event.\"},\"safeTransferFrom(address,address,uint256,bytes)\":{\"details\":\"Safely transfers `tokenId` token from `from` to `to`. Requirements: - `from` cannot be the zero address. - `to` cannot be the zero address. - `tokenId` token must exist and be owned by `from`. - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}. - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer. Emits a {Transfer} event.\"},\"setApprovalForAll(address,bool)\":{\"details\":\"Approve or remove `operator` as an operator for the caller. Operators can call {transferFrom} or {safeTransferFrom} for any token owned by the caller. Requirements: - The `operator` cannot be the caller. Emits an {ApprovalForAll} event.\"},\"supportsInterface(bytes4)\":{\"details\":\"Returns true if this contract implements the interface defined by `interfaceId`. See the corresponding https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section] to learn more about how these ids are created. This function call must use less than 30 000 gas.\"},\"tokenByIndex(uint256)\":{\"details\":\"Returns a token ID at a given `index` of all the tokens stored by the contract. Use along with {totalSupply} to enumerate all tokens.\"},\"tokenOfOwnerByIndex(address,uint256)\":{\"details\":\"Returns a token ID owned by `owner` at a given `index` of its token list. Use along with {balanceOf} to enumerate all of ``owner``'s tokens.\"},\"totalSupply()\":{\"details\":\"Returns the total amount of tokens stored by the contract.\"},\"transferFrom(address,address,uint256)\":{\"details\":\"Transfers `tokenId` token from `from` to `to`. WARNING: Usage of this method is discouraged, use {safeTransferFrom} whenever possible. Requirements: - `from` cannot be the zero address. - `to` cannot be the zero address. - `tokenId` token must be owned by `from`. - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}. Emits a {Transfer} event.\"}},\"title\":\"ERC-721 Non-Fungible Token Standard, optional enumeration extension\",\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"@openzeppelin/contracts/token/ERC721/extensions/IERC721Enumerable.sol\":\"IERC721Enumerable\"},\"evmVersion\":\"london\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\"},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts/token/ERC721/IERC721.sol\":{\"keccak256\":\"0x516a22876c1fab47f49b1bc22b4614491cd05338af8bd2e7b382da090a079990\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://a439187f7126d31add4557f82d8aed6be0162007cd7182c48fd934dbab8f3849\",\"dweb:/ipfs/QmRPLguRFvrRJS7r6F1bcLvsx6q1VrgjEpZafyeL8D7xZh\"]},\"@openzeppelin/contracts/token/ERC721/extensions/IERC721Enumerable.sol\":{\"keccak256\":\"0xd1556954440b31c97a142c6ba07d5cade45f96fafd52091d33a14ebe365aecbf\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://26fef835622b46a5ba08b3ef6b46a22e94b5f285d0f0fb66b703bd30217d2c34\",\"dweb:/ipfs/QmZ548qdwfL1qF7aXz3xh1GCdTiST81kGGuKRqVUfYmPZR\"]},\"@openzeppelin/contracts/utils/introspection/IERC165.sol\":{\"keccak256\":\"0x447a5f3ddc18419d41ff92b3773fb86471b1db25773e07f877f548918a185bf1\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://be161e54f24e5c6fae81a12db1a8ae87bc5ae1b0ddc805d82a1440a68455088f\",\"dweb:/ipfs/QmP7C3CHdY9urF4dEMb9wmsp1wMxHF6nhA2yQE5SKiPAdy\"]}},\"version\":1}",
					"userdoc": {
						"kind": "user",
						"methods": {},
						"version": 1
					}
				}
			},
			"@openzeppelin/contracts/token/ERC721/extensions/IERC721Metadata.sol": {
				"IERC721Metadata": {
					"abi": [
						{
							"anonymous": false,
							"inputs": [
								{
									"indexed": true,
									"internalType": "address",
									"name": "owner",
									"type": "address"
								},
								{
									"indexed": true,
									"internalType": "address",
									"name": "approved",
									"type": "address"
								},
								{
									"indexed": true,
									"internalType": "uint256",
									"name": "tokenId",
									"type": "uint256"
								}
							],
							"name": "Approval",
							"type": "event"
						},
						{
							"anonymous": false,
							"inputs": [
								{
									"indexed": true,
									"internalType": "address",
									"name": "owner",
									"type": "address"
								},
								{
									"indexed": true,
									"internalType": "address",
									"name": "operator",
									"type": "address"
								},
								{
									"indexed": false,
									"internalType": "bool",
									"name": "approved",
									"type": "bool"
								}
							],
							"name": "ApprovalForAll",
							"type": "event"
						},
						{
							"anonymous": false,
							"inputs": [
								{
									"indexed": true,
									"internalType": "address",
									"name": "from",
									"type": "address"
								},
								{
									"indexed": true,
									"internalType": "address",
									"name": "to",
									"type": "address"
								},
								{
									"indexed": true,
									"internalType": "uint256",
									"name": "tokenId",
									"type": "uint256"
								}
							],
							"name": "Transfer",
							"type": "event"
						},
						{
							"inputs": [
								{
									"internalType": "address",
									"name": "to",
									"type": "address"
								},
								{
									"internalType": "uint256",
									"name": "tokenId",
									"type": "uint256"
								}
							],
							"name": "approve",
							"outputs": [],
							"stateMutability": "nonpayable",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "address",
									"name": "owner",
									"type": "address"
								}
							],
							"name": "balanceOf",
							"outputs": [
								{
									"internalType": "uint256",
									"name": "balance",
									"type": "uint256"
								}
							],
							"stateMutability": "view",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "uint256",
									"name": "tokenId",
									"type": "uint256"
								}
							],
							"name": "getApproved",
							"outputs": [
								{
									"internalType": "address",
									"name": "operator",
									"type": "address"
								}
							],
							"stateMutability": "view",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "address",
									"name": "owner",
									"type": "address"
								},
								{
									"internalType": "address",
									"name": "operator",
									"type": "address"
								}
							],
							"name": "isApprovedForAll",
							"outputs": [
								{
									"internalType": "bool",
									"name": "",
									"type": "bool"
								}
							],
							"stateMutability": "view",
							"type": "function"
						},
						{
							"inputs": [],
							"name": "name",
							"outputs": [
								{
									"internalType": "string",
									"name": "",
									"type": "string"
								}
							],
							"stateMutability": "view",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "uint256",
									"name": "tokenId",
									"type": "uint256"
								}
							],
							"name": "ownerOf",
							"outputs": [
								{
									"internalType": "address",
									"name": "owner",
									"type": "address"
								}
							],
							"stateMutability": "view",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "address",
									"name": "from",
									"type": "address"
								},
								{
									"internalType": "address",
									"name": "to",
									"type": "address"
								},
								{
									"internalType": "uint256",
									"name": "tokenId",
									"type": "uint256"
								}
							],
							"name": "safeTransferFrom",
							"outputs": [],
							"stateMutability": "nonpayable",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "address",
									"name": "from",
									"type": "address"
								},
								{
									"internalType": "address",
									"name": "to",
									"type": "address"
								},
								{
									"internalType": "uint256",
									"name": "tokenId",
									"type": "uint256"
								},
								{
									"internalType": "bytes",
									"name": "data",
									"type": "bytes"
								}
							],
							"name": "safeTransferFrom",
							"outputs": [],
							"stateMutability": "nonpayable",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "address",
									"name": "operator",
									"type": "address"
								},
								{
									"internalType": "bool",
									"name": "_approved",
									"type": "bool"
								}
							],
							"name": "setApprovalForAll",
							"outputs": [],
							"stateMutability": "nonpayable",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "bytes4",
									"name": "interfaceId",
									"type": "bytes4"
								}
							],
							"name": "supportsInterface",
							"outputs": [
								{
									"internalType": "bool",
									"name": "",
									"type": "bool"
								}
							],
							"stateMutability": "view",
							"type": "function"
						},
						{
							"inputs": [],
							"name": "symbol",
							"outputs": [
								{
									"internalType": "string",
									"name": "",
									"type": "string"
								}
							],
							"stateMutability": "view",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "uint256",
									"name": "tokenId",
									"type": "uint256"
								}
							],
							"name": "tokenURI",
							"outputs": [
								{
									"internalType": "string",
									"name": "",
									"type": "string"
								}
							],
							"stateMutability": "view",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "address",
									"name": "from",
									"type": "address"
								},
								{
									"internalType": "address",
									"name": "to",
									"type": "address"
								},
								{
									"internalType": "uint256",
									"name": "tokenId",
									"type": "uint256"
								}
							],
							"name": "transferFrom",
							"outputs": [],
							"stateMutability": "nonpayable",
							"type": "function"
						}
					],
					"devdoc": {
						"details": "See https://eips.ethereum.org/EIPS/eip-721",
						"kind": "dev",
						"methods": {
							"approve(address,uint256)": {
								"details": "Gives permission to `to` to transfer `tokenId` token to another account. The approval is cleared when the token is transferred. Only a single account can be approved at a time, so approving the zero address clears previous approvals. Requirements: - The caller must own the token or be an approved operator. - `tokenId` must exist. Emits an {Approval} event."
							},
							"balanceOf(address)": {
								"details": "Returns the number of tokens in ``owner``'s account."
							},
							"getApproved(uint256)": {
								"details": "Returns the account approved for `tokenId` token. Requirements: - `tokenId` must exist."
							},
							"isApprovedForAll(address,address)": {
								"details": "Returns if the `operator` is allowed to manage all of the assets of `owner`. See {setApprovalForAll}"
							},
							"name()": {
								"details": "Returns the token collection name."
							},
							"ownerOf(uint256)": {
								"details": "Returns the owner of the `tokenId` token. Requirements: - `tokenId` must exist."
							},
							"safeTransferFrom(address,address,uint256)": {
								"details": "Safely transfers `tokenId` token from `from` to `to`, checking first that contract recipients are aware of the ERC721 protocol to prevent tokens from being forever locked. Requirements: - `from` cannot be the zero address. - `to` cannot be the zero address. - `tokenId` token must exist and be owned by `from`. - If the caller is not `from`, it must be have been allowed to move this token by either {approve} or {setApprovalForAll}. - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer. Emits a {Transfer} event."
							},
							"safeTransferFrom(address,address,uint256,bytes)": {
								"details": "Safely transfers `tokenId` token from `from` to `to`. Requirements: - `from` cannot be the zero address. - `to` cannot be the zero address. - `tokenId` token must exist and be owned by `from`. - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}. - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer. Emits a {Transfer} event."
							},
							"setApprovalForAll(address,bool)": {
								"details": "Approve or remove `operator` as an operator for the caller. Operators can call {transferFrom} or {safeTransferFrom} for any token owned by the caller. Requirements: - The `operator` cannot be the caller. Emits an {ApprovalForAll} event."
							},
							"supportsInterface(bytes4)": {
								"details": "Returns true if this contract implements the interface defined by `interfaceId`. See the corresponding https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section] to learn more about how these ids are created. This function call must use less than 30 000 gas."
							},
							"symbol()": {
								"details": "Returns the token collection symbol."
							},
							"tokenURI(uint256)": {
								"details": "Returns the Uniform Resource Identifier (URI) for `tokenId` token."
							},
							"transferFrom(address,address,uint256)": {
								"details": "Transfers `tokenId` token from `from` to `to`. WARNING: Usage of this method is discouraged, use {safeTransferFrom} whenever possible. Requirements: - `from` cannot be the zero address. - `to` cannot be the zero address. - `tokenId` token must be owned by `from`. - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}. Emits a {Transfer} event."
							}
						},
						"title": "ERC-721 Non-Fungible Token Standard, optional metadata extension",
						"version": 1
					},
					"evm": {
						"assembly": "",
						"bytecode": {
							"functionDebugData": {},
							"generatedSources": [],
							"linkReferences": {},
							"object": "",
							"opcodes": "",
							"sourceMap": ""
						},
						"deployedBytecode": {
							"functionDebugData": {},
							"generatedSources": [],
							"immutableReferences": {},
							"linkReferences": {},
							"object": "",
							"opcodes": "",
							"sourceMap": ""
						},
						"gasEstimates": null,
						"legacyAssembly": null,
						"methodIdentifiers": {
							"approve(address,uint256)": "095ea7b3",
							"balanceOf(address)": "70a08231",
							"getApproved(uint256)": "081812fc",
							"isApprovedForAll(address,address)": "e985e9c5",
							"name()": "06fdde03",
							"ownerOf(uint256)": "6352211e",
							"safeTransferFrom(address,address,uint256)": "42842e0e",
							"safeTransferFrom(address,address,uint256,bytes)": "b88d4fde",
							"setApprovalForAll(address,bool)": "a22cb465",
							"supportsInterface(bytes4)": "01ffc9a7",
							"symbol()": "95d89b41",
							"tokenURI(uint256)": "c87b56dd",
							"transferFrom(address,address,uint256)": "23b872dd"
						}
					},
					"metadata": "{\"compiler\":{\"version\":\"0.8.9+commit.e5eed63a\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"approved\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"approved\",\"type\":\"bool\"}],\"name\":\"ApprovalForAll\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"balance\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"getApproved\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"}],\"name\":\"isApprovedForAll\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"ownerOf\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"safeTransferFrom\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"data\",\"type\":\"bytes\"}],\"name\":\"safeTransferFrom\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"_approved\",\"type\":\"bool\"}],\"name\":\"setApprovalForAll\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes4\",\"name\":\"interfaceId\",\"type\":\"bytes4\"}],\"name\":\"supportsInterface\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"tokenURI\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"details\":\"See https://eips.ethereum.org/EIPS/eip-721\",\"kind\":\"dev\",\"methods\":{\"approve(address,uint256)\":{\"details\":\"Gives permission to `to` to transfer `tokenId` token to another account. The approval is cleared when the token is transferred. Only a single account can be approved at a time, so approving the zero address clears previous approvals. Requirements: - The caller must own the token or be an approved operator. - `tokenId` must exist. Emits an {Approval} event.\"},\"balanceOf(address)\":{\"details\":\"Returns the number of tokens in ``owner``'s account.\"},\"getApproved(uint256)\":{\"details\":\"Returns the account approved for `tokenId` token. Requirements: - `tokenId` must exist.\"},\"isApprovedForAll(address,address)\":{\"details\":\"Returns if the `operator` is allowed to manage all of the assets of `owner`. See {setApprovalForAll}\"},\"name()\":{\"details\":\"Returns the token collection name.\"},\"ownerOf(uint256)\":{\"details\":\"Returns the owner of the `tokenId` token. Requirements: - `tokenId` must exist.\"},\"safeTransferFrom(address,address,uint256)\":{\"details\":\"Safely transfers `tokenId` token from `from` to `to`, checking first that contract recipients are aware of the ERC721 protocol to prevent tokens from being forever locked. Requirements: - `from` cannot be the zero address. - `to` cannot be the zero address. - `tokenId` token must exist and be owned by `from`. - If the caller is not `from`, it must be have been allowed to move this token by either {approve} or {setApprovalForAll}. - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer. Emits a {Transfer} event.\"},\"safeTransferFrom(address,address,uint256,bytes)\":{\"details\":\"Safely transfers `tokenId` token from `from` to `to`. Requirements: - `from` cannot be the zero address. - `to` cannot be the zero address. - `tokenId` token must exist and be owned by `from`. - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}. - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer. Emits a {Transfer} event.\"},\"setApprovalForAll(address,bool)\":{\"details\":\"Approve or remove `operator` as an operator for the caller. Operators can call {transferFrom} or {safeTransferFrom} for any token owned by the caller. Requirements: - The `operator` cannot be the caller. Emits an {ApprovalForAll} event.\"},\"supportsInterface(bytes4)\":{\"details\":\"Returns true if this contract implements the interface defined by `interfaceId`. See the corresponding https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section] to learn more about how these ids are created. This function call must use less than 30 000 gas.\"},\"symbol()\":{\"details\":\"Returns the token collection symbol.\"},\"tokenURI(uint256)\":{\"details\":\"Returns the Uniform Resource Identifier (URI) for `tokenId` token.\"},\"transferFrom(address,address,uint256)\":{\"details\":\"Transfers `tokenId` token from `from` to `to`. WARNING: Usage of this method is discouraged, use {safeTransferFrom} whenever possible. Requirements: - `from` cannot be the zero address. - `to` cannot be the zero address. - `tokenId` token must be owned by `from`. - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}. Emits a {Transfer} event.\"}},\"title\":\"ERC-721 Non-Fungible Token Standard, optional metadata extension\",\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"@openzeppelin/contracts/token/ERC721/extensions/IERC721Metadata.sol\":\"IERC721Metadata\"},\"evmVersion\":\"london\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\"},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts/token/ERC721/IERC721.sol\":{\"keccak256\":\"0x516a22876c1fab47f49b1bc22b4614491cd05338af8bd2e7b382da090a079990\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://a439187f7126d31add4557f82d8aed6be0162007cd7182c48fd934dbab8f3849\",\"dweb:/ipfs/QmRPLguRFvrRJS7r6F1bcLvsx6q1VrgjEpZafyeL8D7xZh\"]},\"@openzeppelin/contracts/token/ERC721/extensions/IERC721Metadata.sol\":{\"keccak256\":\"0x75b829ff2f26c14355d1cba20e16fe7b29ca58eb5fef665ede48bc0f9c6c74b9\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://a0a107160525724f9e1bbbab031defc2f298296dd9e331f16a6f7130cec32146\",\"dweb:/ipfs/QmemujxSd7gX8A9M8UwmNbz4Ms3U9FG9QfudUgxwvTmPWf\"]},\"@openzeppelin/contracts/utils/introspection/IERC165.sol\":{\"keccak256\":\"0x447a5f3ddc18419d41ff92b3773fb86471b1db25773e07f877f548918a185bf1\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://be161e54f24e5c6fae81a12db1a8ae87bc5ae1b0ddc805d82a1440a68455088f\",\"dweb:/ipfs/QmP7C3CHdY9urF4dEMb9wmsp1wMxHF6nhA2yQE5SKiPAdy\"]}},\"version\":1}",
					"userdoc": {
						"kind": "user",
						"methods": {},
						"version": 1
					}
				}
			},
			"@openzeppelin/contracts/utils/Address.sol": {
				"Address": {
					"abi": [],
					"devdoc": {
						"details": "Collection of functions related to the address type",
						"kind": "dev",
						"methods": {},
						"version": 1
					},
					"evm": {
						"assembly": "    /* \"@openzeppelin/contracts/utils/Address.sol\":194:8255  library Address {... */\n  dataSize(sub_0)\n  dataOffset(sub_0)\n  0x0b\n  dup3\n  dup3\n  dup3\n  codecopy\n  dup1\n  mload\n  0x00\n  byte\n  0x73\n  eq\n  tag_1\n  jumpi\n  mstore(0x00, shl(0xe0, 0x4e487b71))\n  mstore(0x04, 0x00)\n  revert(0x00, 0x24)\ntag_1:\n  mstore(0x00, address)\n  0x73\n  dup2\n  mstore8\n  dup3\n  dup2\n  return\nstop\n\nsub_0: assembly {\n        /* \"@openzeppelin/contracts/utils/Address.sol\":194:8255  library Address {... */\n      eq(address, deployTimeAddress())\n      mstore(0x40, 0x80)\n      0x00\n      dup1\n      revert\n\n    auxdata: 0xa2646970667358221220fed1c670fb2d9c9b1a71294d887b0ea0e2654cb61478a99a9bbce60cd073300e64736f6c63430008090033\n}\n",
						"bytecode": {
							"functionDebugData": {},
							"generatedSources": [],
							"linkReferences": {},
							"object": "60566037600b82828239805160001a607314602a57634e487b7160e01b600052600060045260246000fd5b30600052607381538281f3fe73000000000000000000000000000000000000000030146080604052600080fdfea2646970667358221220fed1c670fb2d9c9b1a71294d887b0ea0e2654cb61478a99a9bbce60cd073300e64736f6c63430008090033",
							"opcodes": "PUSH1 0x56 PUSH1 0x37 PUSH1 0xB DUP3 DUP3 DUP3 CODECOPY DUP1 MLOAD PUSH1 0x0 BYTE PUSH1 0x73 EQ PUSH1 0x2A JUMPI PUSH4 0x4E487B71 PUSH1 0xE0 SHL PUSH1 0x0 MSTORE PUSH1 0x0 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH1 0x0 REVERT JUMPDEST ADDRESS PUSH1 0x0 MSTORE PUSH1 0x73 DUP2 MSTORE8 DUP3 DUP2 RETURN INVALID PUSH20 0x0 ADDRESS EQ PUSH1 0x80 PUSH1 0x40 MSTORE PUSH1 0x0 DUP1 REVERT INVALID LOG2 PUSH5 0x6970667358 0x22 SLT KECCAK256 INVALID 0xD1 0xC6 PUSH17 0xFB2D9C9B1A71294D887B0EA0E2654CB614 PUSH25 0xA99A9BBCE60CD073300E64736F6C6343000809003300000000 ",
							"sourceMap": "194:8061:5:-:0;;;;;;;;;;;;;;;-1:-1:-1;;;194:8061:5;;;;;;;;;;;;;;;;;"
						},
						"deployedBytecode": {
							"functionDebugData": {},
							"generatedSources": [],
							"immutableReferences": {},
							"linkReferences": {},
							"object": "73000000000000000000000000000000000000000030146080604052600080fdfea2646970667358221220fed1c670fb2d9c9b1a71294d887b0ea0e2654cb61478a99a9bbce60cd073300e64736f6c63430008090033",
							"opcodes": "PUSH20 0x0 ADDRESS EQ PUSH1 0x80 PUSH1 0x40 MSTORE PUSH1 0x0 DUP1 REVERT INVALID LOG2 PUSH5 0x6970667358 0x22 SLT KECCAK256 INVALID 0xD1 0xC6 PUSH17 0xFB2D9C9B1A71294D887B0EA0E2654CB614 PUSH25 0xA99A9BBCE60CD073300E64736F6C6343000809003300000000 ",
							"sourceMap": "194:8061:5:-:0;;;;;;;;"
						},
						"gasEstimates": {
							"creation": {
								"codeDepositCost": "17200",
								"executionCost": "103",
								"totalCost": "17303"
							},
							"internal": {
								"functionCall(address,bytes memory)": "infinite",
								"functionCall(address,bytes memory,string memory)": "infinite",
								"functionCallWithValue(address,bytes memory,uint256)": "infinite",
								"functionCallWithValue(address,bytes memory,uint256,string memory)": "infinite",
								"functionDelegateCall(address,bytes memory)": "infinite",
								"functionDelegateCall(address,bytes memory,string memory)": "infinite",
								"functionStaticCall(address,bytes memory)": "infinite",
								"functionStaticCall(address,bytes memory,string memory)": "infinite",
								"isContract(address)": "infinite",
								"sendValue(address payable,uint256)": "infinite",
								"verifyCallResult(bool,bytes memory,string memory)": "infinite"
							}
						},
						"legacyAssembly": {
							".code": [
								{
									"begin": 194,
									"end": 8255,
									"name": "PUSH #[$]",
									"source": 5,
									"value": "0000000000000000000000000000000000000000000000000000000000000000"
								},
								{
									"begin": 194,
									"end": 8255,
									"name": "PUSH [$]",
									"source": 5,
									"value": "0000000000000000000000000000000000000000000000000000000000000000"
								},
								{
									"begin": 194,
									"end": 8255,
									"name": "PUSH",
									"source": 5,
									"value": "B"
								},
								{
									"begin": 194,
									"end": 8255,
									"name": "DUP3",
									"source": 5
								},
								{
									"begin": 194,
									"end": 8255,
									"name": "DUP3",
									"source": 5
								},
								{
									"begin": 194,
									"end": 8255,
									"name": "DUP3",
									"source": 5
								},
								{
									"begin": 194,
									"end": 8255,
									"name": "CODECOPY",
									"source": 5
								},
								{
									"begin": 194,
									"end": 8255,
									"name": "DUP1",
									"source": 5
								},
								{
									"begin": 194,
									"end": 8255,
									"name": "MLOAD",
									"source": 5
								},
								{
									"begin": 194,
									"end": 8255,
									"name": "PUSH",
									"source": 5,
									"value": "0"
								},
								{
									"begin": 194,
									"end": 8255,
									"name": "BYTE",
									"source": 5
								},
								{
									"begin": 194,
									"end": 8255,
									"name": "PUSH",
									"source": 5,
									"value": "73"
								},
								{
									"begin": 194,
									"end": 8255,
									"name": "EQ",
									"source": 5
								},
								{
									"begin": 194,
									"end": 8255,
									"name": "PUSH [tag]",
									"source": 5,
									"value": "1"
								},
								{
									"begin": 194,
									"end": 8255,
									"name": "JUMPI",
									"source": 5
								},
								{
									"begin": -1,
									"end": -1,
									"name": "PUSH",
									"source": -1,
									"value": "4E487B71"
								},
								{
									"begin": -1,
									"end": -1,
									"name": "PUSH",
									"source": -1,
									"value": "E0"
								},
								{
									"begin": -1,
									"end": -1,
									"name": "SHL",
									"source": -1
								},
								{
									"begin": 194,
									"end": 8255,
									"name": "PUSH",
									"source": 5,
									"value": "0"
								},
								{
									"begin": 194,
									"end": 8255,
									"name": "MSTORE",
									"source": 5
								},
								{
									"begin": 194,
									"end": 8255,
									"name": "PUSH",
									"source": 5,
									"value": "0"
								},
								{
									"begin": 194,
									"end": 8255,
									"name": "PUSH",
									"source": 5,
									"value": "4"
								},
								{
									"begin": 194,
									"end": 8255,
									"name": "MSTORE",
									"source": 5
								},
								{
									"begin": 194,
									"end": 8255,
									"name": "PUSH",
									"source": 5,
									"value": "24"
								},
								{
									"begin": 194,
									"end": 8255,
									"name": "PUSH",
									"source": 5,
									"value": "0"
								},
								{
									"begin": 194,
									"end": 8255,
									"name": "REVERT",
									"source": 5
								},
								{
									"begin": 194,
									"end": 8255,
									"name": "tag",
									"source": 5,
									"value": "1"
								},
								{
									"begin": 194,
									"end": 8255,
									"name": "JUMPDEST",
									"source": 5
								},
								{
									"begin": 194,
									"end": 8255,
									"name": "ADDRESS",
									"source": 5
								},
								{
									"begin": 194,
									"end": 8255,
									"name": "PUSH",
									"source": 5,
									"value": "0"
								},
								{
									"begin": 194,
									"end": 8255,
									"name": "MSTORE",
									"source": 5
								},
								{
									"begin": 194,
									"end": 8255,
									"name": "PUSH",
									"source": 5,
									"value": "73"
								},
								{
									"begin": 194,
									"end": 8255,
									"name": "DUP2",
									"source": 5
								},
								{
									"begin": 194,
									"end": 8255,
									"name": "MSTORE8",
									"source": 5
								},
								{
									"begin": 194,
									"end": 8255,
									"name": "DUP3",
									"source": 5
								},
								{
									"begin": 194,
									"end": 8255,
									"name": "DUP2",
									"source": 5
								},
								{
									"begin": 194,
									"end": 8255,
									"name": "RETURN",
									"source": 5
								}
							],
							".data": {
								"0": {
									".auxdata": "a2646970667358221220fed1c670fb2d9c9b1a71294d887b0ea0e2654cb61478a99a9bbce60cd073300e64736f6c63430008090033",
									".code": [
										{
											"begin": 194,
											"end": 8255,
											"name": "PUSHDEPLOYADDRESS",
											"source": 5
										},
										{
											"begin": 194,
											"end": 8255,
											"name": "ADDRESS",
											"source": 5
										},
										{
											"begin": 194,
											"end": 8255,
											"name": "EQ",
											"source": 5
										},
										{
											"begin": 194,
											"end": 8255,
											"name": "PUSH",
											"source": 5,
											"value": "80"
										},
										{
											"begin": 194,
											"end": 8255,
											"name": "PUSH",
											"source": 5,
											"value": "40"
										},
										{
											"begin": 194,
											"end": 8255,
											"name": "MSTORE",
											"source": 5
										},
										{
											"begin": 194,
											"end": 8255,
											"name": "PUSH",
											"source": 5,
											"value": "0"
										},
										{
											"begin": 194,
											"end": 8255,
											"name": "DUP1",
											"source": 5
										},
										{
											"begin": 194,
											"end": 8255,
											"name": "REVERT",
											"source": 5
										}
									]
								}
							}
						},
						"methodIdentifiers": {}
					},
					"metadata": "{\"compiler\":{\"version\":\"0.8.9+commit.e5eed63a\"},\"language\":\"Solidity\",\"output\":{\"abi\":[],\"devdoc\":{\"details\":\"Collection of functions related to the address type\",\"kind\":\"dev\",\"methods\":{},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"@openzeppelin/contracts/utils/Address.sol\":\"Address\"},\"evmVersion\":\"london\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\"},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts/utils/Address.sol\":{\"keccak256\":\"0x2ccf9d2313a313d41a791505f2b5abfdc62191b5d4334f7f7a82691c088a1c87\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://b3a57d0854b2fdce6ebff933a48dca2445643d1eccfc27f00292e937f26c6a58\",\"dweb:/ipfs/QmW45rZooS9TqR4YXUbjRbtf2Bpb5ouSarBvfW1LdGprvV\"]}},\"version\":1}",
					"userdoc": {
						"kind": "user",
						"methods": {},
						"version": 1
					}
				}
			},
			"@openzeppelin/contracts/utils/Context.sol": {
				"Context": {
					"abi": [],
					"devdoc": {
						"details": "Provides information about the current execution context, including the sender of the transaction and its data. While these are generally available via msg.sender and msg.data, they should not be accessed in such a direct manner, since when dealing with meta-transactions the account sending and paying for execution may not be the actual sender (as far as an application is concerned). This contract is only required for intermediate, library-like contracts.",
						"kind": "dev",
						"methods": {},
						"version": 1
					},
					"evm": {
						"assembly": "",
						"bytecode": {
							"functionDebugData": {},
							"generatedSources": [],
							"linkReferences": {},
							"object": "",
							"opcodes": "",
							"sourceMap": ""
						},
						"deployedBytecode": {
							"functionDebugData": {},
							"generatedSources": [],
							"immutableReferences": {},
							"linkReferences": {},
							"object": "",
							"opcodes": "",
							"sourceMap": ""
						},
						"gasEstimates": null,
						"legacyAssembly": null,
						"methodIdentifiers": {}
					},
					"metadata": "{\"compiler\":{\"version\":\"0.8.9+commit.e5eed63a\"},\"language\":\"Solidity\",\"output\":{\"abi\":[],\"devdoc\":{\"details\":\"Provides information about the current execution context, including the sender of the transaction and its data. While these are generally available via msg.sender and msg.data, they should not be accessed in such a direct manner, since when dealing with meta-transactions the account sending and paying for execution may not be the actual sender (as far as an application is concerned). This contract is only required for intermediate, library-like contracts.\",\"kind\":\"dev\",\"methods\":{},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"@openzeppelin/contracts/utils/Context.sol\":\"Context\"},\"evmVersion\":\"london\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\"},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts/utils/Context.sol\":{\"keccak256\":\"0xe2e337e6dde9ef6b680e07338c493ebea1b5fd09b43424112868e9cc1706bca7\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://6df0ddf21ce9f58271bdfaa85cde98b200ef242a05a3f85c2bc10a8294800a92\",\"dweb:/ipfs/QmRK2Y5Yc6BK7tGKkgsgn3aJEQGi5aakeSPZvS65PV8Xp3\"]}},\"version\":1}",
					"userdoc": {
						"kind": "user",
						"methods": {},
						"version": 1
					}
				}
			},
			"@openzeppelin/contracts/utils/Strings.sol": {
				"Strings": {
					"abi": [],
					"devdoc": {
						"details": "String operations.",
						"kind": "dev",
						"methods": {},
						"version": 1
					},
					"evm": {
						"assembly": "    /* \"@openzeppelin/contracts/utils/Strings.sol\":146:2031  library Strings {... */\n  dataSize(sub_0)\n  dataOffset(sub_0)\n  0x0b\n  dup3\n  dup3\n  dup3\n  codecopy\n  dup1\n  mload\n  0x00\n  byte\n  0x73\n  eq\n  tag_1\n  jumpi\n  mstore(0x00, shl(0xe0, 0x4e487b71))\n  mstore(0x04, 0x00)\n  revert(0x00, 0x24)\ntag_1:\n  mstore(0x00, address)\n  0x73\n  dup2\n  mstore8\n  dup3\n  dup2\n  return\nstop\n\nsub_0: assembly {\n        /* \"@openzeppelin/contracts/utils/Strings.sol\":146:2031  library Strings {... */\n      eq(address, deployTimeAddress())\n      mstore(0x40, 0x80)\n      0x00\n      dup1\n      revert\n\n    auxdata: 0xa26469706673582212207d79c3bd3f2e4a821cd166ff9fd5d2386d377f37c10452a65f546756ebe5377364736f6c63430008090033\n}\n",
						"bytecode": {
							"functionDebugData": {},
							"generatedSources": [],
							"linkReferences": {},
							"object": "60566037600b82828239805160001a607314602a57634e487b7160e01b600052600060045260246000fd5b30600052607381538281f3fe73000000000000000000000000000000000000000030146080604052600080fdfea26469706673582212207d79c3bd3f2e4a821cd166ff9fd5d2386d377f37c10452a65f546756ebe5377364736f6c63430008090033",
							"opcodes": "PUSH1 0x56 PUSH1 0x37 PUSH1 0xB DUP3 DUP3 DUP3 CODECOPY DUP1 MLOAD PUSH1 0x0 BYTE PUSH1 0x73 EQ PUSH1 0x2A JUMPI PUSH4 0x4E487B71 PUSH1 0xE0 SHL PUSH1 0x0 MSTORE PUSH1 0x0 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH1 0x0 REVERT JUMPDEST ADDRESS PUSH1 0x0 MSTORE PUSH1 0x73 DUP2 MSTORE8 DUP3 DUP2 RETURN INVALID PUSH20 0x0 ADDRESS EQ PUSH1 0x80 PUSH1 0x40 MSTORE PUSH1 0x0 DUP1 REVERT INVALID LOG2 PUSH5 0x6970667358 0x22 SLT KECCAK256 PUSH30 0x79C3BD3F2E4A821CD166FF9FD5D2386D377F37C10452A65F546756EBE537 PUSH20 0x64736F6C63430008090033000000000000000000 ",
							"sourceMap": "146:1885:7:-:0;;;;;;;;;;;;;;;-1:-1:-1;;;146:1885:7;;;;;;;;;;;;;;;;;"
						},
						"deployedBytecode": {
							"functionDebugData": {},
							"generatedSources": [],
							"immutableReferences": {},
							"linkReferences": {},
							"object": "73000000000000000000000000000000000000000030146080604052600080fdfea26469706673582212207d79c3bd3f2e4a821cd166ff9fd5d2386d377f37c10452a65f546756ebe5377364736f6c63430008090033",
							"opcodes": "PUSH20 0x0 ADDRESS EQ PUSH1 0x80 PUSH1 0x40 MSTORE PUSH1 0x0 DUP1 REVERT INVALID LOG2 PUSH5 0x6970667358 0x22 SLT KECCAK256 PUSH30 0x79C3BD3F2E4A821CD166FF9FD5D2386D377F37C10452A65F546756EBE537 PUSH20 0x64736F6C63430008090033000000000000000000 ",
							"sourceMap": "146:1885:7:-:0;;;;;;;;"
						},
						"gasEstimates": {
							"creation": {
								"codeDepositCost": "17200",
								"executionCost": "103",
								"totalCost": "17303"
							},
							"internal": {
								"toHexString(uint256)": "infinite",
								"toHexString(uint256,uint256)": "infinite",
								"toString(uint256)": "infinite"
							}
						},
						"legacyAssembly": {
							".code": [
								{
									"begin": 146,
									"end": 2031,
									"name": "PUSH #[$]",
									"source": 7,
									"value": "0000000000000000000000000000000000000000000000000000000000000000"
								},
								{
									"begin": 146,
									"end": 2031,
									"name": "PUSH [$]",
									"source": 7,
									"value": "0000000000000000000000000000000000000000000000000000000000000000"
								},
								{
									"begin": 146,
									"end": 2031,
									"name": "PUSH",
									"source": 7,
									"value": "B"
								},
								{
									"begin": 146,
									"end": 2031,
									"name": "DUP3",
									"source": 7
								},
								{
									"begin": 146,
									"end": 2031,
									"name": "DUP3",
									"source": 7
								},
								{
									"begin": 146,
									"end": 2031,
									"name": "DUP3",
									"source": 7
								},
								{
									"begin": 146,
									"end": 2031,
									"name": "CODECOPY",
									"source": 7
								},
								{
									"begin": 146,
									"end": 2031,
									"name": "DUP1",
									"source": 7
								},
								{
									"begin": 146,
									"end": 2031,
									"name": "MLOAD",
									"source": 7
								},
								{
									"begin": 146,
									"end": 2031,
									"name": "PUSH",
									"source": 7,
									"value": "0"
								},
								{
									"begin": 146,
									"end": 2031,
									"name": "BYTE",
									"source": 7
								},
								{
									"begin": 146,
									"end": 2031,
									"name": "PUSH",
									"source": 7,
									"value": "73"
								},
								{
									"begin": 146,
									"end": 2031,
									"name": "EQ",
									"source": 7
								},
								{
									"begin": 146,
									"end": 2031,
									"name": "PUSH [tag]",
									"source": 7,
									"value": "1"
								},
								{
									"begin": 146,
									"end": 2031,
									"name": "JUMPI",
									"source": 7
								},
								{
									"begin": -1,
									"end": -1,
									"name": "PUSH",
									"source": -1,
									"value": "4E487B71"
								},
								{
									"begin": -1,
									"end": -1,
									"name": "PUSH",
									"source": -1,
									"value": "E0"
								},
								{
									"begin": -1,
									"end": -1,
									"name": "SHL",
									"source": -1
								},
								{
									"begin": 146,
									"end": 2031,
									"name": "PUSH",
									"source": 7,
									"value": "0"
								},
								{
									"begin": 146,
									"end": 2031,
									"name": "MSTORE",
									"source": 7
								},
								{
									"begin": 146,
									"end": 2031,
									"name": "PUSH",
									"source": 7,
									"value": "0"
								},
								{
									"begin": 146,
									"end": 2031,
									"name": "PUSH",
									"source": 7,
									"value": "4"
								},
								{
									"begin": 146,
									"end": 2031,
									"name": "MSTORE",
									"source": 7
								},
								{
									"begin": 146,
									"end": 2031,
									"name": "PUSH",
									"source": 7,
									"value": "24"
								},
								{
									"begin": 146,
									"end": 2031,
									"name": "PUSH",
									"source": 7,
									"value": "0"
								},
								{
									"begin": 146,
									"end": 2031,
									"name": "REVERT",
									"source": 7
								},
								{
									"begin": 146,
									"end": 2031,
									"name": "tag",
									"source": 7,
									"value": "1"
								},
								{
									"begin": 146,
									"end": 2031,
									"name": "JUMPDEST",
									"source": 7
								},
								{
									"begin": 146,
									"end": 2031,
									"name": "ADDRESS",
									"source": 7
								},
								{
									"begin": 146,
									"end": 2031,
									"name": "PUSH",
									"source": 7,
									"value": "0"
								},
								{
									"begin": 146,
									"end": 2031,
									"name": "MSTORE",
									"source": 7
								},
								{
									"begin": 146,
									"end": 2031,
									"name": "PUSH",
									"source": 7,
									"value": "73"
								},
								{
									"begin": 146,
									"end": 2031,
									"name": "DUP2",
									"source": 7
								},
								{
									"begin": 146,
									"end": 2031,
									"name": "MSTORE8",
									"source": 7
								},
								{
									"begin": 146,
									"end": 2031,
									"name": "DUP3",
									"source": 7
								},
								{
									"begin": 146,
									"end": 2031,
									"name": "DUP2",
									"source": 7
								},
								{
									"begin": 146,
									"end": 2031,
									"name": "RETURN",
									"source": 7
								}
							],
							".data": {
								"0": {
									".auxdata": "a26469706673582212207d79c3bd3f2e4a821cd166ff9fd5d2386d377f37c10452a65f546756ebe5377364736f6c63430008090033",
									".code": [
										{
											"begin": 146,
											"end": 2031,
											"name": "PUSHDEPLOYADDRESS",
											"source": 7
										},
										{
											"begin": 146,
											"end": 2031,
											"name": "ADDRESS",
											"source": 7
										},
										{
											"begin": 146,
											"end": 2031,
											"name": "EQ",
											"source": 7
										},
										{
											"begin": 146,
											"end": 2031,
											"name": "PUSH",
											"source": 7,
											"value": "80"
										},
										{
											"begin": 146,
											"end": 2031,
											"name": "PUSH",
											"source": 7,
											"value": "40"
										},
										{
											"begin": 146,
											"end": 2031,
											"name": "MSTORE",
											"source": 7
										},
										{
											"begin": 146,
											"end": 2031,
											"name": "PUSH",
											"source": 7,
											"value": "0"
										},
										{
											"begin": 146,
											"end": 2031,
											"name": "DUP1",
											"source": 7
										},
										{
											"begin": 146,
											"end": 2031,
											"name": "REVERT",
											"source": 7
										}
									]
								}
							}
						},
						"methodIdentifiers": {}
					},
					"metadata": "{\"compiler\":{\"version\":\"0.8.9+commit.e5eed63a\"},\"language\":\"Solidity\",\"output\":{\"abi\":[],\"devdoc\":{\"details\":\"String operations.\",\"kind\":\"dev\",\"methods\":{},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"@openzeppelin/contracts/utils/Strings.sol\":\"Strings\"},\"evmVersion\":\"london\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\"},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts/utils/Strings.sol\":{\"keccak256\":\"0x32c202bd28995dd20c4347b7c6467a6d3241c74c8ad3edcbb610cd9205916c45\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://8179c356adb19e70d6b31a1eedc8c5c7f0c00e669e2540f4099e3844c6074d30\",\"dweb:/ipfs/QmWFbivarEobbqhS1go64ootVuHfVohBseerYy9FTEd1W2\"]}},\"version\":1}",
					"userdoc": {
						"kind": "user",
						"methods": {},
						"version": 1
					}
				}
			},
			"@openzeppelin/contracts/utils/cryptography/MerkleProof.sol": {
				"MerkleProof": {
					"abi": [],
					"devdoc": {
						"details": "These functions deal with verification of Merkle Trees proofs. The proofs can be generated using the JavaScript library https://github.com/miguelmota/merkletreejs[merkletreejs]. Note: the hashing algorithm should be keccak256 and pair sorting should be enabled. See `test/utils/cryptography/MerkleProof.test.js` for some examples.",
						"kind": "dev",
						"methods": {},
						"version": 1
					},
					"evm": {
						"assembly": "    /* \"@openzeppelin/contracts/utils/cryptography/MerkleProof.sol\":508:2286  library MerkleProof {... */\n  dataSize(sub_0)\n  dataOffset(sub_0)\n  0x0b\n  dup3\n  dup3\n  dup3\n  codecopy\n  dup1\n  mload\n  0x00\n  byte\n  0x73\n  eq\n  tag_1\n  jumpi\n  mstore(0x00, shl(0xe0, 0x4e487b71))\n  mstore(0x04, 0x00)\n  revert(0x00, 0x24)\ntag_1:\n  mstore(0x00, address)\n  0x73\n  dup2\n  mstore8\n  dup3\n  dup2\n  return\nstop\n\nsub_0: assembly {\n        /* \"@openzeppelin/contracts/utils/cryptography/MerkleProof.sol\":508:2286  library MerkleProof {... */\n      eq(address, deployTimeAddress())\n      mstore(0x40, 0x80)\n      0x00\n      dup1\n      revert\n\n    auxdata: 0xa2646970667358221220999c9e8ba82a12a89e9c4f23d4a03bc3e48694e4384edcff3c0c6811252483e964736f6c63430008090033\n}\n",
						"bytecode": {
							"functionDebugData": {},
							"generatedSources": [],
							"linkReferences": {},
							"object": "60566037600b82828239805160001a607314602a57634e487b7160e01b600052600060045260246000fd5b30600052607381538281f3fe73000000000000000000000000000000000000000030146080604052600080fdfea2646970667358221220999c9e8ba82a12a89e9c4f23d4a03bc3e48694e4384edcff3c0c6811252483e964736f6c63430008090033",
							"opcodes": "PUSH1 0x56 PUSH1 0x37 PUSH1 0xB DUP3 DUP3 DUP3 CODECOPY DUP1 MLOAD PUSH1 0x0 BYTE PUSH1 0x73 EQ PUSH1 0x2A JUMPI PUSH4 0x4E487B71 PUSH1 0xE0 SHL PUSH1 0x0 MSTORE PUSH1 0x0 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH1 0x0 REVERT JUMPDEST ADDRESS PUSH1 0x0 MSTORE PUSH1 0x73 DUP2 MSTORE8 DUP3 DUP2 RETURN INVALID PUSH20 0x0 ADDRESS EQ PUSH1 0x80 PUSH1 0x40 MSTORE PUSH1 0x0 DUP1 REVERT INVALID LOG2 PUSH5 0x6970667358 0x22 SLT KECCAK256 SWAP10 SWAP13 SWAP15 DUP12 0xA8 0x2A SLT 0xA8 SWAP15 SWAP13 0x4F 0x23 0xD4 LOG0 EXTCODESIZE 0xC3 0xE4 DUP7 SWAP5 0xE4 CODESIZE 0x4E 0xDC SELFDESTRUCT EXTCODECOPY 0xC PUSH9 0x11252483E964736F6C PUSH4 0x43000809 STOP CALLER ",
							"sourceMap": "508:1778:8:-:0;;;;;;;;;;;;;;;-1:-1:-1;;;508:1778:8;;;;;;;;;;;;;;;;;"
						},
						"deployedBytecode": {
							"functionDebugData": {},
							"generatedSources": [],
							"immutableReferences": {},
							"linkReferences": {},
							"object": "73000000000000000000000000000000000000000030146080604052600080fdfea2646970667358221220999c9e8ba82a12a89e9c4f23d4a03bc3e48694e4384edcff3c0c6811252483e964736f6c63430008090033",
							"opcodes": "PUSH20 0x0 ADDRESS EQ PUSH1 0x80 PUSH1 0x40 MSTORE PUSH1 0x0 DUP1 REVERT INVALID LOG2 PUSH5 0x6970667358 0x22 SLT KECCAK256 SWAP10 SWAP13 SWAP15 DUP12 0xA8 0x2A SLT 0xA8 SWAP15 SWAP13 0x4F 0x23 0xD4 LOG0 EXTCODESIZE 0xC3 0xE4 DUP7 SWAP5 0xE4 CODESIZE 0x4E 0xDC SELFDESTRUCT EXTCODECOPY 0xC PUSH9 0x11252483E964736F6C PUSH4 0x43000809 STOP CALLER ",
							"sourceMap": "508:1778:8:-:0;;;;;;;;"
						},
						"gasEstimates": {
							"creation": {
								"codeDepositCost": "17200",
								"executionCost": "103",
								"totalCost": "17303"
							},
							"internal": {
								"_efficientHash(bytes32,bytes32)": "infinite",
								"processProof(bytes32[] memory,bytes32)": "infinite",
								"verify(bytes32[] memory,bytes32,bytes32)": "infinite"
							}
						},
						"legacyAssembly": {
							".code": [
								{
									"begin": 508,
									"end": 2286,
									"name": "PUSH #[$]",
									"source": 8,
									"value": "0000000000000000000000000000000000000000000000000000000000000000"
								},
								{
									"begin": 508,
									"end": 2286,
									"name": "PUSH [$]",
									"source": 8,
									"value": "0000000000000000000000000000000000000000000000000000000000000000"
								},
								{
									"begin": 508,
									"end": 2286,
									"name": "PUSH",
									"source": 8,
									"value": "B"
								},
								{
									"begin": 508,
									"end": 2286,
									"name": "DUP3",
									"source": 8
								},
								{
									"begin": 508,
									"end": 2286,
									"name": "DUP3",
									"source": 8
								},
								{
									"begin": 508,
									"end": 2286,
									"name": "DUP3",
									"source": 8
								},
								{
									"begin": 508,
									"end": 2286,
									"name": "CODECOPY",
									"source": 8
								},
								{
									"begin": 508,
									"end": 2286,
									"name": "DUP1",
									"source": 8
								},
								{
									"begin": 508,
									"end": 2286,
									"name": "MLOAD",
									"source": 8
								},
								{
									"begin": 508,
									"end": 2286,
									"name": "PUSH",
									"source": 8,
									"value": "0"
								},
								{
									"begin": 508,
									"end": 2286,
									"name": "BYTE",
									"source": 8
								},
								{
									"begin": 508,
									"end": 2286,
									"name": "PUSH",
									"source": 8,
									"value": "73"
								},
								{
									"begin": 508,
									"end": 2286,
									"name": "EQ",
									"source": 8
								},
								{
									"begin": 508,
									"end": 2286,
									"name": "PUSH [tag]",
									"source": 8,
									"value": "1"
								},
								{
									"begin": 508,
									"end": 2286,
									"name": "JUMPI",
									"source": 8
								},
								{
									"begin": -1,
									"end": -1,
									"name": "PUSH",
									"source": -1,
									"value": "4E487B71"
								},
								{
									"begin": -1,
									"end": -1,
									"name": "PUSH",
									"source": -1,
									"value": "E0"
								},
								{
									"begin": -1,
									"end": -1,
									"name": "SHL",
									"source": -1
								},
								{
									"begin": 508,
									"end": 2286,
									"name": "PUSH",
									"source": 8,
									"value": "0"
								},
								{
									"begin": 508,
									"end": 2286,
									"name": "MSTORE",
									"source": 8
								},
								{
									"begin": 508,
									"end": 2286,
									"name": "PUSH",
									"source": 8,
									"value": "0"
								},
								{
									"begin": 508,
									"end": 2286,
									"name": "PUSH",
									"source": 8,
									"value": "4"
								},
								{
									"begin": 508,
									"end": 2286,
									"name": "MSTORE",
									"source": 8
								},
								{
									"begin": 508,
									"end": 2286,
									"name": "PUSH",
									"source": 8,
									"value": "24"
								},
								{
									"begin": 508,
									"end": 2286,
									"name": "PUSH",
									"source": 8,
									"value": "0"
								},
								{
									"begin": 508,
									"end": 2286,
									"name": "REVERT",
									"source": 8
								},
								{
									"begin": 508,
									"end": 2286,
									"name": "tag",
									"source": 8,
									"value": "1"
								},
								{
									"begin": 508,
									"end": 2286,
									"name": "JUMPDEST",
									"source": 8
								},
								{
									"begin": 508,
									"end": 2286,
									"name": "ADDRESS",
									"source": 8
								},
								{
									"begin": 508,
									"end": 2286,
									"name": "PUSH",
									"source": 8,
									"value": "0"
								},
								{
									"begin": 508,
									"end": 2286,
									"name": "MSTORE",
									"source": 8
								},
								{
									"begin": 508,
									"end": 2286,
									"name": "PUSH",
									"source": 8,
									"value": "73"
								},
								{
									"begin": 508,
									"end": 2286,
									"name": "DUP2",
									"source": 8
								},
								{
									"begin": 508,
									"end": 2286,
									"name": "MSTORE8",
									"source": 8
								},
								{
									"begin": 508,
									"end": 2286,
									"name": "DUP3",
									"source": 8
								},
								{
									"begin": 508,
									"end": 2286,
									"name": "DUP2",
									"source": 8
								},
								{
									"begin": 508,
									"end": 2286,
									"name": "RETURN",
									"source": 8
								}
							],
							".data": {
								"0": {
									".auxdata": "a2646970667358221220999c9e8ba82a12a89e9c4f23d4a03bc3e48694e4384edcff3c0c6811252483e964736f6c63430008090033",
									".code": [
										{
											"begin": 508,
											"end": 2286,
											"name": "PUSHDEPLOYADDRESS",
											"source": 8
										},
										{
											"begin": 508,
											"end": 2286,
											"name": "ADDRESS",
											"source": 8
										},
										{
											"begin": 508,
											"end": 2286,
											"name": "EQ",
											"source": 8
										},
										{
											"begin": 508,
											"end": 2286,
											"name": "PUSH",
											"source": 8,
											"value": "80"
										},
										{
											"begin": 508,
											"end": 2286,
											"name": "PUSH",
											"source": 8,
											"value": "40"
										},
										{
											"begin": 508,
											"end": 2286,
											"name": "MSTORE",
											"source": 8
										},
										{
											"begin": 508,
											"end": 2286,
											"name": "PUSH",
											"source": 8,
											"value": "0"
										},
										{
											"begin": 508,
											"end": 2286,
											"name": "DUP1",
											"source": 8
										},
										{
											"begin": 508,
											"end": 2286,
											"name": "REVERT",
											"source": 8
										}
									]
								}
							}
						},
						"methodIdentifiers": {}
					},
					"metadata": "{\"compiler\":{\"version\":\"0.8.9+commit.e5eed63a\"},\"language\":\"Solidity\",\"output\":{\"abi\":[],\"devdoc\":{\"details\":\"These functions deal with verification of Merkle Trees proofs. The proofs can be generated using the JavaScript library https://github.com/miguelmota/merkletreejs[merkletreejs]. Note: the hashing algorithm should be keccak256 and pair sorting should be enabled. See `test/utils/cryptography/MerkleProof.test.js` for some examples.\",\"kind\":\"dev\",\"methods\":{},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"@openzeppelin/contracts/utils/cryptography/MerkleProof.sol\":\"MerkleProof\"},\"evmVersion\":\"london\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\"},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts/utils/cryptography/MerkleProof.sol\":{\"keccak256\":\"0xea64fbaccbf9d8c235cf6838240ddcebb97f9fc383660289e9dff32e4fb85f7a\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://1e8a1dd0eac2fa865dc9a052bee01eec31677d7bc01b5b5aa825d820f3f1b343\",\"dweb:/ipfs/QmR8WuNeoAvJhnL7msQfQwaZEkwVnNyNDUNBL3Y616ohYa\"]}},\"version\":1}",
					"userdoc": {
						"kind": "user",
						"methods": {},
						"version": 1
					}
				}
			},
			"@openzeppelin/contracts/utils/introspection/ERC165.sol": {
				"ERC165": {
					"abi": [
						{
							"inputs": [
								{
									"internalType": "bytes4",
									"name": "interfaceId",
									"type": "bytes4"
								}
							],
							"name": "supportsInterface",
							"outputs": [
								{
									"internalType": "bool",
									"name": "",
									"type": "bool"
								}
							],
							"stateMutability": "view",
							"type": "function"
						}
					],
					"devdoc": {
						"details": "Implementation of the {IERC165} interface. Contracts that want to implement ERC165 should inherit from this contract and override {supportsInterface} to check for the additional interface id that will be supported. For example: ```solidity function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {     return interfaceId == type(MyInterface).interfaceId || super.supportsInterface(interfaceId); } ``` Alternatively, {ERC165Storage} provides an easier to use but more expensive implementation.",
						"kind": "dev",
						"methods": {
							"supportsInterface(bytes4)": {
								"details": "See {IERC165-supportsInterface}."
							}
						},
						"version": 1
					},
					"evm": {
						"assembly": "",
						"bytecode": {
							"functionDebugData": {},
							"generatedSources": [],
							"linkReferences": {},
							"object": "",
							"opcodes": "",
							"sourceMap": ""
						},
						"deployedBytecode": {
							"functionDebugData": {},
							"generatedSources": [],
							"immutableReferences": {},
							"linkReferences": {},
							"object": "",
							"opcodes": "",
							"sourceMap": ""
						},
						"gasEstimates": null,
						"legacyAssembly": null,
						"methodIdentifiers": {
							"supportsInterface(bytes4)": "01ffc9a7"
						}
					},
					"metadata": "{\"compiler\":{\"version\":\"0.8.9+commit.e5eed63a\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"bytes4\",\"name\":\"interfaceId\",\"type\":\"bytes4\"}],\"name\":\"supportsInterface\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"}],\"devdoc\":{\"details\":\"Implementation of the {IERC165} interface. Contracts that want to implement ERC165 should inherit from this contract and override {supportsInterface} to check for the additional interface id that will be supported. For example: ```solidity function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {     return interfaceId == type(MyInterface).interfaceId || super.supportsInterface(interfaceId); } ``` Alternatively, {ERC165Storage} provides an easier to use but more expensive implementation.\",\"kind\":\"dev\",\"methods\":{\"supportsInterface(bytes4)\":{\"details\":\"See {IERC165-supportsInterface}.\"}},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"@openzeppelin/contracts/utils/introspection/ERC165.sol\":\"ERC165\"},\"evmVersion\":\"london\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\"},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts/utils/introspection/ERC165.sol\":{\"keccak256\":\"0xd10975de010d89fd1c78dc5e8a9a7e7f496198085c151648f20cba166b32582b\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://fb0048dee081f6fffa5f74afc3fb328483c2a30504e94a0ddd2a5114d731ec4d\",\"dweb:/ipfs/QmZptt1nmYoA5SgjwnSgWqgUSDgm4q52Yos3xhnMv3MV43\"]},\"@openzeppelin/contracts/utils/introspection/IERC165.sol\":{\"keccak256\":\"0x447a5f3ddc18419d41ff92b3773fb86471b1db25773e07f877f548918a185bf1\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://be161e54f24e5c6fae81a12db1a8ae87bc5ae1b0ddc805d82a1440a68455088f\",\"dweb:/ipfs/QmP7C3CHdY9urF4dEMb9wmsp1wMxHF6nhA2yQE5SKiPAdy\"]}},\"version\":1}",
					"userdoc": {
						"kind": "user",
						"methods": {},
						"version": 1
					}
				}
			},
			"@openzeppelin/contracts/utils/introspection/IERC165.sol": {
				"IERC165": {
					"abi": [
						{
							"inputs": [
								{
									"internalType": "bytes4",
									"name": "interfaceId",
									"type": "bytes4"
								}
							],
							"name": "supportsInterface",
							"outputs": [
								{
									"internalType": "bool",
									"name": "",
									"type": "bool"
								}
							],
							"stateMutability": "view",
							"type": "function"
						}
					],
					"devdoc": {
						"details": "Interface of the ERC165 standard, as defined in the https://eips.ethereum.org/EIPS/eip-165[EIP]. Implementers can declare support of contract interfaces, which can then be queried by others ({ERC165Checker}). For an implementation, see {ERC165}.",
						"kind": "dev",
						"methods": {
							"supportsInterface(bytes4)": {
								"details": "Returns true if this contract implements the interface defined by `interfaceId`. See the corresponding https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section] to learn more about how these ids are created. This function call must use less than 30 000 gas."
							}
						},
						"version": 1
					},
					"evm": {
						"assembly": "",
						"bytecode": {
							"functionDebugData": {},
							"generatedSources": [],
							"linkReferences": {},
							"object": "",
							"opcodes": "",
							"sourceMap": ""
						},
						"deployedBytecode": {
							"functionDebugData": {},
							"generatedSources": [],
							"immutableReferences": {},
							"linkReferences": {},
							"object": "",
							"opcodes": "",
							"sourceMap": ""
						},
						"gasEstimates": null,
						"legacyAssembly": null,
						"methodIdentifiers": {
							"supportsInterface(bytes4)": "01ffc9a7"
						}
					},
					"metadata": "{\"compiler\":{\"version\":\"0.8.9+commit.e5eed63a\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"bytes4\",\"name\":\"interfaceId\",\"type\":\"bytes4\"}],\"name\":\"supportsInterface\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"}],\"devdoc\":{\"details\":\"Interface of the ERC165 standard, as defined in the https://eips.ethereum.org/EIPS/eip-165[EIP]. Implementers can declare support of contract interfaces, which can then be queried by others ({ERC165Checker}). For an implementation, see {ERC165}.\",\"kind\":\"dev\",\"methods\":{\"supportsInterface(bytes4)\":{\"details\":\"Returns true if this contract implements the interface defined by `interfaceId`. See the corresponding https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section] to learn more about how these ids are created. This function call must use less than 30 000 gas.\"}},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"@openzeppelin/contracts/utils/introspection/IERC165.sol\":\"IERC165\"},\"evmVersion\":\"london\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\"},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts/utils/introspection/IERC165.sol\":{\"keccak256\":\"0x447a5f3ddc18419d41ff92b3773fb86471b1db25773e07f877f548918a185bf1\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://be161e54f24e5c6fae81a12db1a8ae87bc5ae1b0ddc805d82a1440a68455088f\",\"dweb:/ipfs/QmP7C3CHdY9urF4dEMb9wmsp1wMxHF6nhA2yQE5SKiPAdy\"]}},\"version\":1}",
					"userdoc": {
						"kind": "user",
						"methods": {},
						"version": 1
					}
				}
			},
			"contract/NewCryptoBullDogs.sol": {
				"CryptoBullDogsOfficial": {
					"abi": [
						{
							"inputs": [],
							"stateMutability": "nonpayable",
							"type": "constructor"
						},
						{
							"inputs": [],
							"name": "ApprovalCallerNotOwnerNorApproved",
							"type": "error"
						},
						{
							"inputs": [],
							"name": "ApprovalQueryForNonexistentToken",
							"type": "error"
						},
						{
							"inputs": [],
							"name": "ApprovalToCurrentOwner",
							"type": "error"
						},
						{
							"inputs": [],
							"name": "ApproveToCaller",
							"type": "error"
						},
						{
							"inputs": [],
							"name": "BalanceQueryForZeroAddress",
							"type": "error"
						},
						{
							"inputs": [],
							"name": "MintToZeroAddress",
							"type": "error"
						},
						{
							"inputs": [],
							"name": "MintZeroQuantity",
							"type": "error"
						},
						{
							"inputs": [],
							"name": "OwnerQueryForNonexistentToken",
							"type": "error"
						},
						{
							"inputs": [],
							"name": "TransferCallerNotOwnerNorApproved",
							"type": "error"
						},
						{
							"inputs": [],
							"name": "TransferFromIncorrectOwner",
							"type": "error"
						},
						{
							"inputs": [],
							"name": "TransferToNonERC721ReceiverImplementer",
							"type": "error"
						},
						{
							"inputs": [],
							"name": "TransferToZeroAddress",
							"type": "error"
						},
						{
							"anonymous": false,
							"inputs": [
								{
									"indexed": true,
									"internalType": "address",
									"name": "owner",
									"type": "address"
								},
								{
									"indexed": true,
									"internalType": "address",
									"name": "approved",
									"type": "address"
								},
								{
									"indexed": true,
									"internalType": "uint256",
									"name": "tokenId",
									"type": "uint256"
								}
							],
							"name": "Approval",
							"type": "event"
						},
						{
							"anonymous": false,
							"inputs": [
								{
									"indexed": true,
									"internalType": "address",
									"name": "owner",
									"type": "address"
								},
								{
									"indexed": true,
									"internalType": "address",
									"name": "operator",
									"type": "address"
								},
								{
									"indexed": false,
									"internalType": "bool",
									"name": "approved",
									"type": "bool"
								}
							],
							"name": "ApprovalForAll",
							"type": "event"
						},
						{
							"anonymous": false,
							"inputs": [
								{
									"indexed": true,
									"internalType": "address",
									"name": "previousOwner",
									"type": "address"
								},
								{
									"indexed": true,
									"internalType": "address",
									"name": "newOwner",
									"type": "address"
								}
							],
							"name": "OwnershipTransferred",
							"type": "event"
						},
						{
							"anonymous": false,
							"inputs": [
								{
									"indexed": true,
									"internalType": "address",
									"name": "from",
									"type": "address"
								},
								{
									"indexed": true,
									"internalType": "address",
									"name": "to",
									"type": "address"
								},
								{
									"indexed": true,
									"internalType": "uint256",
									"name": "tokenId",
									"type": "uint256"
								}
							],
							"name": "Transfer",
							"type": "event"
						},
						{
							"inputs": [],
							"name": "MAX_PUBLIC_MINT",
							"outputs": [
								{
									"internalType": "uint256",
									"name": "",
									"type": "uint256"
								}
							],
							"stateMutability": "view",
							"type": "function"
						},
						{
							"inputs": [],
							"name": "MAX_SUPPLY",
							"outputs": [
								{
									"internalType": "uint256",
									"name": "",
									"type": "uint256"
								}
							],
							"stateMutability": "view",
							"type": "function"
						},
						{
							"inputs": [],
							"name": "MAX_WHITELIST_MINT",
							"outputs": [
								{
									"internalType": "uint256",
									"name": "",
									"type": "uint256"
								}
							],
							"stateMutability": "view",
							"type": "function"
						},
						{
							"inputs": [],
							"name": "PUBLIC_SALE_PRICE",
							"outputs": [
								{
									"internalType": "uint256",
									"name": "",
									"type": "uint256"
								}
							],
							"stateMutability": "view",
							"type": "function"
						},
						{
							"inputs": [],
							"name": "WHITELIST_SALE_PRICE",
							"outputs": [
								{
									"internalType": "uint256",
									"name": "",
									"type": "uint256"
								}
							],
							"stateMutability": "view",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "address",
									"name": "to",
									"type": "address"
								},
								{
									"internalType": "uint256",
									"name": "tokenId",
									"type": "uint256"
								}
							],
							"name": "approve",
							"outputs": [],
							"stateMutability": "nonpayable",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "address",
									"name": "owner",
									"type": "address"
								}
							],
							"name": "balanceOf",
							"outputs": [
								{
									"internalType": "uint256",
									"name": "",
									"type": "uint256"
								}
							],
							"stateMutability": "view",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "uint256",
									"name": "tokenId",
									"type": "uint256"
								}
							],
							"name": "getApproved",
							"outputs": [
								{
									"internalType": "address",
									"name": "",
									"type": "address"
								}
							],
							"stateMutability": "view",
							"type": "function"
						},
						{
							"inputs": [],
							"name": "getMerkleRoot",
							"outputs": [
								{
									"internalType": "bytes32",
									"name": "",
									"type": "bytes32"
								}
							],
							"stateMutability": "view",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "address",
									"name": "owner",
									"type": "address"
								},
								{
									"internalType": "address",
									"name": "operator",
									"type": "address"
								}
							],
							"name": "isApprovedForAll",
							"outputs": [
								{
									"internalType": "bool",
									"name": "",
									"type": "bool"
								}
							],
							"stateMutability": "view",
							"type": "function"
						},
						{
							"inputs": [],
							"name": "isRevealed",
							"outputs": [
								{
									"internalType": "bool",
									"name": "",
									"type": "bool"
								}
							],
							"stateMutability": "view",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "uint256",
									"name": "_quantity",
									"type": "uint256"
								}
							],
							"name": "mint",
							"outputs": [],
							"stateMutability": "payable",
							"type": "function"
						},
						{
							"inputs": [],
							"name": "name",
							"outputs": [
								{
									"internalType": "string",
									"name": "",
									"type": "string"
								}
							],
							"stateMutability": "view",
							"type": "function"
						},
						{
							"inputs": [],
							"name": "owner",
							"outputs": [
								{
									"internalType": "address",
									"name": "",
									"type": "address"
								}
							],
							"stateMutability": "view",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "uint256",
									"name": "tokenId",
									"type": "uint256"
								}
							],
							"name": "ownerOf",
							"outputs": [
								{
									"internalType": "address",
									"name": "",
									"type": "address"
								}
							],
							"stateMutability": "view",
							"type": "function"
						},
						{
							"inputs": [],
							"name": "pause",
							"outputs": [
								{
									"internalType": "bool",
									"name": "",
									"type": "bool"
								}
							],
							"stateMutability": "view",
							"type": "function"
						},
						{
							"inputs": [],
							"name": "placeholderTokenUri",
							"outputs": [
								{
									"internalType": "string",
									"name": "",
									"type": "string"
								}
							],
							"stateMutability": "view",
							"type": "function"
						},
						{
							"inputs": [],
							"name": "publicSale",
							"outputs": [
								{
									"internalType": "bool",
									"name": "",
									"type": "bool"
								}
							],
							"stateMutability": "view",
							"type": "function"
						},
						{
							"inputs": [],
							"name": "renounceOwnership",
							"outputs": [],
							"stateMutability": "nonpayable",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "address",
									"name": "from",
									"type": "address"
								},
								{
									"internalType": "address",
									"name": "to",
									"type": "address"
								},
								{
									"internalType": "uint256",
									"name": "tokenId",
									"type": "uint256"
								}
							],
							"name": "safeTransferFrom",
							"outputs": [],
							"stateMutability": "nonpayable",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "address",
									"name": "from",
									"type": "address"
								},
								{
									"internalType": "address",
									"name": "to",
									"type": "address"
								},
								{
									"internalType": "uint256",
									"name": "tokenId",
									"type": "uint256"
								},
								{
									"internalType": "bytes",
									"name": "_data",
									"type": "bytes"
								}
							],
							"name": "safeTransferFrom",
							"outputs": [],
							"stateMutability": "nonpayable",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "address",
									"name": "operator",
									"type": "address"
								},
								{
									"internalType": "bool",
									"name": "approved",
									"type": "bool"
								}
							],
							"name": "setApprovalForAll",
							"outputs": [],
							"stateMutability": "nonpayable",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "bytes32",
									"name": "_merkleRoot",
									"type": "bytes32"
								}
							],
							"name": "setMerkleRoot",
							"outputs": [],
							"stateMutability": "nonpayable",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "string",
									"name": "_placeholderTokenUri",
									"type": "string"
								}
							],
							"name": "setPlaceHolderUri",
							"outputs": [],
							"stateMutability": "nonpayable",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "string",
									"name": "_baseTokenUri",
									"type": "string"
								}
							],
							"name": "setTokenUri",
							"outputs": [],
							"stateMutability": "nonpayable",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "bytes4",
									"name": "interfaceId",
									"type": "bytes4"
								}
							],
							"name": "supportsInterface",
							"outputs": [
								{
									"internalType": "bool",
									"name": "",
									"type": "bool"
								}
							],
							"stateMutability": "view",
							"type": "function"
						},
						{
							"inputs": [],
							"name": "symbol",
							"outputs": [
								{
									"internalType": "string",
									"name": "",
									"type": "string"
								}
							],
							"stateMutability": "view",
							"type": "function"
						},
						{
							"inputs": [],
							"name": "teamMint",
							"outputs": [],
							"stateMutability": "nonpayable",
							"type": "function"
						},
						{
							"inputs": [],
							"name": "teamMinted",
							"outputs": [
								{
									"internalType": "bool",
									"name": "",
									"type": "bool"
								}
							],
							"stateMutability": "view",
							"type": "function"
						},
						{
							"inputs": [],
							"name": "togglePause",
							"outputs": [],
							"stateMutability": "nonpayable",
							"type": "function"
						},
						{
							"inputs": [],
							"name": "togglePublicSale",
							"outputs": [],
							"stateMutability": "nonpayable",
							"type": "function"
						},
						{
							"inputs": [],
							"name": "toggleReveal",
							"outputs": [],
							"stateMutability": "nonpayable",
							"type": "function"
						},
						{
							"inputs": [],
							"name": "toggleWhiteListSale",
							"outputs": [],
							"stateMutability": "nonpayable",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "uint256",
									"name": "tokenId",
									"type": "uint256"
								}
							],
							"name": "tokenURI",
							"outputs": [
								{
									"internalType": "string",
									"name": "",
									"type": "string"
								}
							],
							"stateMutability": "view",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "address",
									"name": "",
									"type": "address"
								}
							],
							"name": "totalPublicMint",
							"outputs": [
								{
									"internalType": "uint256",
									"name": "",
									"type": "uint256"
								}
							],
							"stateMutability": "view",
							"type": "function"
						},
						{
							"inputs": [],
							"name": "totalSupply",
							"outputs": [
								{
									"internalType": "uint256",
									"name": "",
									"type": "uint256"
								}
							],
							"stateMutability": "view",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "address",
									"name": "",
									"type": "address"
								}
							],
							"name": "totalWhitelistMint",
							"outputs": [
								{
									"internalType": "uint256",
									"name": "",
									"type": "uint256"
								}
							],
							"stateMutability": "view",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "address",
									"name": "from",
									"type": "address"
								},
								{
									"internalType": "address",
									"name": "to",
									"type": "address"
								},
								{
									"internalType": "uint256",
									"name": "tokenId",
									"type": "uint256"
								}
							],
							"name": "transferFrom",
							"outputs": [],
							"stateMutability": "nonpayable",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "address",
									"name": "newOwner",
									"type": "address"
								}
							],
							"name": "transferOwnership",
							"outputs": [],
							"stateMutability": "nonpayable",
							"type": "function"
						},
						{
							"inputs": [],
							"name": "walletOf",
							"outputs": [
								{
									"internalType": "uint256[]",
									"name": "",
									"type": "uint256[]"
								}
							],
							"stateMutability": "view",
							"type": "function"
						},
						{
							"inputs": [],
							"name": "whiteListSale",
							"outputs": [
								{
									"internalType": "bool",
									"name": "",
									"type": "bool"
								}
							],
							"stateMutability": "view",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "bytes32[]",
									"name": "_merkleProof",
									"type": "bytes32[]"
								},
								{
									"internalType": "uint256",
									"name": "_quantity",
									"type": "uint256"
								}
							],
							"name": "whitelistMint",
							"outputs": [],
							"stateMutability": "payable",
							"type": "function"
						},
						{
							"inputs": [],
							"name": "withdraw",
							"outputs": [],
							"stateMutability": "nonpayable",
							"type": "function"
						}
					],
					"devdoc": {
						"kind": "dev",
						"methods": {
							"approve(address,uint256)": {
								"details": "See {IERC721-approve}."
							},
							"balanceOf(address)": {
								"details": "See {IERC721-balanceOf}."
							},
							"getApproved(uint256)": {
								"details": "See {IERC721-getApproved}."
							},
							"isApprovedForAll(address,address)": {
								"details": "See {IERC721-isApprovedForAll}."
							},
							"name()": {
								"details": "See {IERC721Metadata-name}."
							},
							"owner()": {
								"details": "Returns the address of the current owner."
							},
							"ownerOf(uint256)": {
								"details": "See {IERC721-ownerOf}."
							},
							"renounceOwnership()": {
								"details": "Leaves the contract without owner. It will not be possible to call `onlyOwner` functions anymore. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby removing any functionality that is only available to the owner."
							},
							"safeTransferFrom(address,address,uint256)": {
								"details": "See {IERC721-safeTransferFrom}."
							},
							"safeTransferFrom(address,address,uint256,bytes)": {
								"details": "See {IERC721-safeTransferFrom}."
							},
							"setApprovalForAll(address,bool)": {
								"details": "See {IERC721-setApprovalForAll}."
							},
							"supportsInterface(bytes4)": {
								"details": "See {IERC165-supportsInterface}."
							},
							"symbol()": {
								"details": "See {IERC721Metadata-symbol}."
							},
							"tokenURI(uint256)": {
								"details": "See {IERC721Metadata-tokenURI}."
							},
							"totalSupply()": {
								"details": "See {IERC721Enumerable-totalSupply}.Burned tokens are calculated here, use _totalMinted() if you want to count just minted tokens."
							},
							"transferFrom(address,address,uint256)": {
								"details": "See {IERC721-transferFrom}."
							},
							"transferOwnership(address)": {
								"details": "Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner."
							},
							"walletOf()": {
								"details": "walletOf() function shouldn't be called on-chain due to gas consumption"
							}
						},
						"version": 1
					},
					"evm": {
						"assembly": "    /* \"contract/NewCryptoBullDogs.sol\":220:5107  contract CryptoBullDogsOfficial is ERC721A, Ownable{... */\n  mstore(0x40, 0x80)\n    /* \"contract/NewCryptoBullDogs.sol\":1058:1121  constructor() ERC721A(\"CryptoBullDogs Official\", \"CBD\"){... */\n  callvalue\n  dup1\n  iszero\n  tag_1\n  jumpi\n  0x00\n  dup1\n  revert\ntag_1:\n  pop\n    /* \"erc721a/contracts/ERC721A.sol\":3600:3754  constructor(string memory name_, string memory symbol_) {... */\n  0x40\n  dup1\n  mload\n  dup1\n  dup3\n  add\n  dup3\n  mstore\n  0x17\n  dup2\n  mstore\n  0x43727970746f42756c6c446f6773204f6666696369616c000000000000000000\n  0x20\n  dup1\n  dup4\n  add\n  swap2\n  dup3\n  mstore\n  dup4\n  mload\n  dup1\n  dup6\n  add\n  swap1\n  swap5\n  mstore\n  0x03\n  dup5\n  mstore\n  shl(0xea, 0x10d091)\n  swap1\n  dup5\n  add\n  mstore\n    /* \"erc721a/contracts/ERC721A.sol\":3666:3679  _name = name_ */\n  dup2\n  mload\n    /* \"erc721a/contracts/ERC721A.sol\":3600:3754  constructor(string memory name_, string memory symbol_) {... */\n  swap2\n  swap3\n  swap2\n    /* \"erc721a/contracts/ERC721A.sol\":3666:3679  _name = name_ */\n  tag_6\n  swap2\n    /* \"erc721a/contracts/ERC721A.sol\":3666:3671  _name */\n  0x02\n  swap2\n    /* \"erc721a/contracts/ERC721A.sol\":3666:3679  _name = name_ */\n  tag_7\n  jump\t// in\ntag_6:\n  pop\n    /* \"erc721a/contracts/ERC721A.sol\":3689:3706  _symbol = symbol_ */\n  dup1\n  mload\n  tag_8\n  swap1\n    /* \"erc721a/contracts/ERC721A.sol\":3689:3696  _symbol */\n  0x03\n  swap1\n    /* \"erc721a/contracts/ERC721A.sol\":3689:3706  _symbol = symbol_ */\n  0x20\n  dup5\n  add\n  swap1\n  tag_7\n  jump\t// in\ntag_8:\n  pop\n  pop\n    /* \"erc721a/contracts/ERC721A.sol\":3902:3909  uint256 */\n  0x00\n    /* \"erc721a/contracts/ERC721A.sol\":3716:3747  _currentIndex = _startTokenId() */\n  dup1\n  sstore\n  pop\n    /* \"@openzeppelin/contracts/access/Ownable.sol\":921:953  _transferOwnership(_msgSender()) */\n  tag_12\n    /* \"@openzeppelin/contracts/utils/Context.sol\":719:729  msg.sender */\n  caller\n    /* \"@openzeppelin/contracts/access/Ownable.sol\":921:939  _transferOwnership */\n  tag_15\n    /* \"@openzeppelin/contracts/access/Ownable.sol\":921:953  _transferOwnership(_msgSender()) */\n  jump\t// in\ntag_12:\n    /* \"contract/NewCryptoBullDogs.sol\":220:5107  contract CryptoBullDogsOfficial is ERC721A, Ownable{... */\n  jump(tag_32)\n    /* \"@openzeppelin/contracts/access/Ownable.sol\":2270:2457  function _transferOwnership(address newOwner) internal virtual {... */\ntag_15:\n    /* \"@openzeppelin/contracts/access/Ownable.sol\":2362:2368  _owner */\n  0x08\n  dup1\n  sload\n  sub(shl(0xa0, 0x01), 0x01)\n    /* \"@openzeppelin/contracts/access/Ownable.sol\":2378:2395  _owner = newOwner */\n  dup4\n  dup2\n  and\n  not(sub(shl(0xa0, 0x01), 0x01))\n  dup4\n  and\n  dup2\n  or\n  swap1\n  swap4\n  sstore\n    /* \"@openzeppelin/contracts/access/Ownable.sol\":2410:2450  OwnershipTransferred(oldOwner, newOwner) */\n  mload(0x40)\n    /* \"@openzeppelin/contracts/access/Ownable.sol\":2362:2368  _owner */\n  swap2\n  and\n  swap2\n    /* \"@openzeppelin/contracts/access/Ownable.sol\":2378:2395  _owner = newOwner */\n  swap1\n    /* \"@openzeppelin/contracts/access/Ownable.sol\":2362:2368  _owner */\n  dup3\n  swap1\n    /* \"@openzeppelin/contracts/access/Ownable.sol\":2410:2450  OwnershipTransferred(oldOwner, newOwner) */\n  0x8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0\n  swap1\n    /* \"@openzeppelin/contracts/access/Ownable.sol\":2343:2359  address oldOwner */\n  0x00\n  swap1\n    /* \"@openzeppelin/contracts/access/Ownable.sol\":2410:2450  OwnershipTransferred(oldOwner, newOwner) */\n  log3\n    /* \"@openzeppelin/contracts/access/Ownable.sol\":2333:2457  {... */\n  pop\n    /* \"@openzeppelin/contracts/access/Ownable.sol\":2270:2457  function _transferOwnership(address newOwner) internal virtual {... */\n  pop\n  jump\t// out\n    /* \"contract/NewCryptoBullDogs.sol\":220:5107  contract CryptoBullDogsOfficial is ERC721A, Ownable{... */\ntag_7:\n  dup3\n  dup1\n  sload\n  tag_21\n  swap1\n  tag_22\n  jump\t// in\ntag_21:\n  swap1\n  0x00\n  mstore\n  keccak256(0x00, 0x20)\n  swap1\n  0x1f\n  add\n  0x20\n  swap1\n  div\n  dup2\n  add\n  swap3\n  dup3\n  tag_24\n  jumpi\n  0x00\n  dup6\n  sstore\n  jump(tag_27)\ntag_24:\n  dup3\n  0x1f\n  lt\n  tag_25\n  jumpi\n  dup1\n  mload\n  not(0xff)\n  and\n  dup4\n  dup1\n  add\n  or\n  dup6\n  sstore\n  jump(tag_27)\ntag_25:\n  dup3\n  dup1\n  add\n  0x01\n  add\n  dup6\n  sstore\n  dup3\n  iszero\n  tag_27\n  jumpi\n  swap2\n  dup3\n  add\ntag_26:\n  dup3\n  dup2\n  gt\n  iszero\n  tag_27\n  jumpi\n  dup3\n  mload\n  dup3\n  sstore\n  swap2\n  0x20\n  add\n  swap2\n  swap1\n  0x01\n  add\n  swap1\n  jump(tag_26)\ntag_27:\n  pop\n  tag_28\n  swap3\n  swap2\n  pop\n  tag_29\n  jump\t// in\ntag_28:\n  pop\n  swap1\n  jump\t// out\ntag_29:\ntag_30:\n  dup1\n  dup3\n  gt\n  iszero\n  tag_28\n  jumpi\n  0x00\n  dup2\n  sstore\n  0x01\n  add\n  jump(tag_30)\n    /* \"#utility.yul\":14:394   */\ntag_22:\n    /* \"#utility.yul\":93:94   */\n  0x01\n    /* \"#utility.yul\":89:101   */\n  dup2\n  dup2\n  shr\n  swap1\n    /* \"#utility.yul\":136:148   */\n  dup3\n  and\n  dup1\n    /* \"#utility.yul\":157:218   */\n  tag_34\n  jumpi\n    /* \"#utility.yul\":211:215   */\n  0x7f\n    /* \"#utility.yul\":203:209   */\n  dup3\n    /* \"#utility.yul\":199:216   */\n  and\n    /* \"#utility.yul\":189:216   */\n  swap2\n  pop\n    /* \"#utility.yul\":157:218   */\ntag_34:\n    /* \"#utility.yul\":264:266   */\n  0x20\n    /* \"#utility.yul\":256:262   */\n  dup3\n    /* \"#utility.yul\":253:267   */\n  lt\n    /* \"#utility.yul\":233:251   */\n  dup2\n    /* \"#utility.yul\":230:268   */\n  eq\n    /* \"#utility.yul\":227:388   */\n  iszero\n  tag_35\n  jumpi\n    /* \"#utility.yul\":310:320   */\n  0x4e487b71\n    /* \"#utility.yul\":305:308   */\n  0xe0\n    /* \"#utility.yul\":301:321   */\n  shl\n    /* \"#utility.yul\":298:299   */\n  0x00\n    /* \"#utility.yul\":291:322   */\n  mstore\n    /* \"#utility.yul\":345:349   */\n  0x22\n    /* \"#utility.yul\":342:343   */\n  0x04\n    /* \"#utility.yul\":335:350   */\n  mstore\n    /* \"#utility.yul\":373:377   */\n  0x24\n    /* \"#utility.yul\":370:371   */\n  0x00\n    /* \"#utility.yul\":363:378   */\n  revert\n    /* \"#utility.yul\":227:388   */\ntag_35:\n  pop\n    /* \"#utility.yul\":14:394   */\n  swap2\n  swap1\n  pop\n  jump\t// out\ntag_32:\n    /* \"contract/NewCryptoBullDogs.sol\":220:5107  contract CryptoBullDogsOfficial is ERC721A, Ownable{... */\n  dataSize(sub_0)\n  dup1\n  dataOffset(sub_0)\n  0x00\n  codecopy\n  0x00\n  return\nstop\n\nsub_0: assembly {\n        /* \"contract/NewCryptoBullDogs.sol\":220:5107  contract CryptoBullDogsOfficial is ERC721A, Ownable{... */\n      mstore(0x40, 0x80)\n      jumpi(tag_1, lt(calldatasize, 0x04))\n      shr(0xe0, calldataload(0x00))\n      dup1\n      0x70a08231\n      gt\n      tag_45\n      jumpi\n      dup1\n      0xb0962c53\n      gt\n      tag_46\n      jumpi\n      dup1\n      0xc4ae3168\n      gt\n      tag_47\n      jumpi\n      dup1\n      0xc4ae3168\n      eq\n      tag_39\n      jumpi\n      dup1\n      0xc87b56dd\n      eq\n      tag_40\n      jumpi\n      dup1\n      0xe222c7f9\n      eq\n      tag_41\n      jumpi\n      dup1\n      0xe8b5498d\n      eq\n      tag_42\n      jumpi\n      dup1\n      0xe985e9c5\n      eq\n      tag_43\n      jumpi\n      dup1\n      0xf2fde38b\n      eq\n      tag_44\n      jumpi\n      0x00\n      dup1\n      revert\n    tag_47:\n      dup1\n      0xb0962c53\n      eq\n      tag_34\n      jumpi\n      dup1\n      0xb88d4fde\n      eq\n      tag_35\n      jumpi\n      dup1\n      0xba7a86b8\n      eq\n      tag_36\n      jumpi\n      dup1\n      0xbc912e1a\n      eq\n      tag_37\n      jumpi\n      dup1\n      0xc08dfd3c\n      eq\n      tag_22\n      jumpi\n      0x00\n      dup1\n      revert\n    tag_46:\n      dup1\n      0x86a173ee\n      gt\n      tag_48\n      jumpi\n      dup1\n      0x86a173ee\n      eq\n      tag_28\n      jumpi\n      dup1\n      0x8bb64a8c\n      eq\n      tag_29\n      jumpi\n      dup1\n      0x8da5cb5b\n      eq\n      tag_30\n      jumpi\n      dup1\n      0x95d89b41\n      eq\n      tag_31\n      jumpi\n      dup1\n      0xa0712d68\n      eq\n      tag_32\n      jumpi\n      dup1\n      0xa22cb465\n      eq\n      tag_33\n      jumpi\n      0x00\n      dup1\n      revert\n    tag_48:\n      dup1\n      0x70a08231\n      eq\n      tag_23\n      jumpi\n      dup1\n      0x715018a6\n      eq\n      tag_24\n      jumpi\n      dup1\n      0x7cb64759\n      eq\n      tag_25\n      jumpi\n      dup1\n      0x83a974a2\n      eq\n      tag_26\n      jumpi\n      dup1\n      0x8456cb59\n      eq\n      tag_27\n      jumpi\n      0x00\n      dup1\n      revert\n    tag_45:\n      dup1\n      0x2904e6d9\n      gt\n      tag_49\n      jumpi\n      dup1\n      0x49590657\n      gt\n      tag_50\n      jumpi\n      dup1\n      0x49590657\n      eq\n      tag_17\n      jumpi\n      dup1\n      0x4cf5f7a4\n      eq\n      tag_18\n      jumpi\n      dup1\n      0x54214f69\n      eq\n      tag_19\n      jumpi\n      dup1\n      0x5b8ad429\n      eq\n      tag_20\n      jumpi\n      dup1\n      0x6352211e\n      eq\n      tag_21\n      jumpi\n      dup1\n      0x65f13097\n      eq\n      tag_22\n      jumpi\n      0x00\n      dup1\n      revert\n    tag_50:\n      dup1\n      0x2904e6d9\n      eq\n      tag_12\n      jumpi\n      dup1\n      0x32cb6b0c\n      eq\n      tag_13\n      jumpi\n      dup1\n      0x33bc1c5c\n      eq\n      tag_14\n      jumpi\n      dup1\n      0x3ccfd60b\n      eq\n      tag_15\n      jumpi\n      dup1\n      0x42842e0e\n      eq\n      tag_16\n      jumpi\n      0x00\n      dup1\n      revert\n    tag_49:\n      dup1\n      0x081812fc\n      gt\n      tag_51\n      jumpi\n      dup1\n      0x081812fc\n      eq\n      tag_7\n      jumpi\n      dup1\n      0x095ea7b3\n      eq\n      tag_8\n      jumpi\n      dup1\n      0x18160ddd\n      eq\n      tag_9\n      jumpi\n      dup1\n      0x1c16521c\n      eq\n      tag_10\n      jumpi\n      dup1\n      0x23b872dd\n      eq\n      tag_11\n      jumpi\n      0x00\n      dup1\n      revert\n    tag_51:\n      dup1\n      0x01ffc9a7\n      eq\n      tag_2\n      jumpi\n      dup1\n      0x0345e3cb\n      eq\n      tag_3\n      jumpi\n      dup1\n      0x0675b7c6\n      eq\n      tag_4\n      jumpi\n      dup1\n      0x06fdde03\n      eq\n      tag_5\n      jumpi\n      dup1\n      0x07e89ec0\n      eq\n      tag_6\n      jumpi\n    tag_1:\n      0x00\n      dup1\n      revert\n        /* \"erc721a/contracts/ERC721A.sol\":4843:5143  function supportsInterface(bytes4 interfaceId) public view virtual override(ERC165, IERC165) returns (bool) {... */\n    tag_2:\n      callvalue\n      dup1\n      iszero\n      tag_52\n      jumpi\n      0x00\n      dup1\n      revert\n    tag_52:\n      pop\n      tag_53\n      tag_54\n      calldatasize\n      0x04\n      tag_55\n      jump\t// in\n    tag_54:\n      tag_56\n      jump\t// in\n    tag_53:\n      mload(0x40)\n        /* \"#utility.yul\":565:579   */\n      swap1\n      iszero\n        /* \"#utility.yul\":558:580   */\n      iszero\n        /* \"#utility.yul\":540:581   */\n      dup2\n      mstore\n        /* \"#utility.yul\":528:530   */\n      0x20\n        /* \"#utility.yul\":513:531   */\n      add\n        /* \"erc721a/contracts/ERC721A.sol\":4843:5143  function supportsInterface(bytes4 interfaceId) public view virtual override(ERC165, IERC165) returns (bool) {... */\n    tag_57:\n      mload(0x40)\n      dup1\n      swap2\n      sub\n      swap1\n      return\n        /* \"contract/NewCryptoBullDogs.sol\":998:1051  mapping(address => uint256) public totalWhitelistMint */\n    tag_3:\n      callvalue\n      dup1\n      iszero\n      tag_59\n      jumpi\n      0x00\n      dup1\n      revert\n    tag_59:\n      pop\n      tag_60\n      tag_61\n      calldatasize\n      0x04\n      tag_62\n      jump\t// in\n    tag_61:\n      mstore(0x20, 0x0e)\n      0x00\n      swap1\n      dup2\n      mstore\n      0x40\n      swap1\n      keccak256\n      sload\n      dup2\n      jump\n    tag_60:\n      mload(0x40)\n        /* \"#utility.yul\":1107:1132   */\n      swap1\n      dup2\n      mstore\n        /* \"#utility.yul\":1095:1097   */\n      0x20\n        /* \"#utility.yul\":1080:1098   */\n      add\n        /* \"contract/NewCryptoBullDogs.sol\":998:1051  mapping(address => uint256) public totalWhitelistMint */\n      tag_57\n        /* \"#utility.yul\":961:1138   */\n      jump\n        /* \"contract/NewCryptoBullDogs.sol\":3975:4088  function setTokenUri(string memory _baseTokenUri) external onlyOwner{... */\n    tag_4:\n      callvalue\n      dup1\n      iszero\n      tag_66\n      jumpi\n      0x00\n      dup1\n      revert\n    tag_66:\n      pop\n      tag_67\n      tag_68\n      calldatasize\n      0x04\n      tag_69\n      jump\t// in\n    tag_68:\n      tag_70\n      jump\t// in\n    tag_67:\n      stop\n        /* \"erc721a/contracts/ERC721A.sol\":8139:8237  function name() public view virtual override returns (string memory) {... */\n    tag_5:\n      callvalue\n      dup1\n      iszero\n      tag_71\n      jumpi\n      0x00\n      dup1\n      revert\n    tag_71:\n      pop\n      tag_72\n      tag_73\n      jump\t// in\n    tag_72:\n      mload(0x40)\n      tag_57\n      swap2\n      swap1\n      tag_75\n      jump\t// in\n        /* \"contract/NewCryptoBullDogs.sol\":459:512  uint256 public constant PUBLIC_SALE_PRICE = .04 ether */\n    tag_6:\n      callvalue\n      dup1\n      iszero\n      tag_76\n      jumpi\n      0x00\n      dup1\n      revert\n    tag_76:\n      pop\n      tag_60\n        /* \"contract/NewCryptoBullDogs.sol\":503:512  .04 ether */\n      0x8e1bc9bf040000\n        /* \"contract/NewCryptoBullDogs.sol\":459:512  uint256 public constant PUBLIC_SALE_PRICE = .04 ether */\n      dup2\n      jump\n        /* \"erc721a/contracts/ERC721A.sol\":9595:9795  function getApproved(uint256 tokenId) public view override returns (address) {... */\n    tag_7:\n      callvalue\n      dup1\n      iszero\n      tag_80\n      jumpi\n      0x00\n      dup1\n      revert\n    tag_80:\n      pop\n      tag_81\n      tag_82\n      calldatasize\n      0x04\n      tag_83\n      jump\t// in\n    tag_82:\n      tag_84\n      jump\t// in\n    tag_81:\n      mload(0x40)\n      sub(shl(0xa0, 0x01), 0x01)\n        /* \"#utility.yul\":3545:3577   */\n      swap1\n      swap2\n      and\n        /* \"#utility.yul\":3527:3578   */\n      dup2\n      mstore\n        /* \"#utility.yul\":3515:3517   */\n      0x20\n        /* \"#utility.yul\":3500:3518   */\n      add\n        /* \"erc721a/contracts/ERC721A.sol\":9595:9795  function getApproved(uint256 tokenId) public view override returns (address) {... */\n      tag_57\n        /* \"#utility.yul\":3381:3584   */\n      jump\n        /* \"erc721a/contracts/ERC721A.sol\":9172:9534  function approve(address to, uint256 tokenId) public override {... */\n    tag_8:\n      callvalue\n      dup1\n      iszero\n      tag_87\n      jumpi\n      0x00\n      dup1\n      revert\n    tag_87:\n      pop\n      tag_67\n      tag_89\n      calldatasize\n      0x04\n      tag_90\n      jump\t// in\n    tag_89:\n      tag_91\n      jump\t// in\n        /* \"erc721a/contracts/ERC721A.sol\":4114:4411  function totalSupply() public view returns (uint256) {... */\n    tag_9:\n      callvalue\n      dup1\n      iszero\n      tag_92\n      jumpi\n      0x00\n      dup1\n      revert\n    tag_92:\n      pop\n        /* \"erc721a/contracts/ERC721A.sol\":4364:4376  _burnCounter */\n      sload(0x01)\n        /* \"erc721a/contracts/ERC721A.sol\":4158:4165  uint256 */\n      0x00\n        /* \"erc721a/contracts/ERC721A.sol\":4348:4361  _currentIndex */\n      sload\n        /* \"erc721a/contracts/ERC721A.sol\":4348:4376  _currentIndex - _burnCounter */\n      sub\n        /* \"erc721a/contracts/ERC721A.sol\":4114:4411  function totalSupply() public view returns (uint256) {... */\n      jump(tag_60)\n        /* \"contract/NewCryptoBullDogs.sol\":942:992  mapping(address => uint256) public totalPublicMint */\n    tag_10:\n      callvalue\n      dup1\n      iszero\n      tag_96\n      jumpi\n      0x00\n      dup1\n      revert\n    tag_96:\n      pop\n      tag_60\n      tag_98\n      calldatasize\n      0x04\n      tag_62\n      jump\t// in\n    tag_98:\n      mstore(0x20, 0x0d)\n      0x00\n      swap1\n      dup2\n      mstore\n      0x40\n      swap1\n      keccak256\n      sload\n      dup2\n      jump\n        /* \"erc721a/contracts/ERC721A.sol\":10426:10590  function transferFrom(... */\n    tag_11:\n      callvalue\n      dup1\n      iszero\n      tag_101\n      jumpi\n      0x00\n      dup1\n      revert\n    tag_101:\n      pop\n      tag_67\n      tag_103\n      calldatasize\n      0x04\n      tag_104\n      jump\t// in\n    tag_103:\n      tag_105\n      jump\t// in\n        /* \"contract/NewCryptoBullDogs.sol\":1816:2674  function whitelistMint(bytes32[] memory _merkleProof, uint256 _quantity) external payable callerIsUser{... */\n    tag_12:\n      tag_67\n      tag_107\n      calldatasize\n      0x04\n      tag_108\n      jump\t// in\n    tag_107:\n      tag_109\n      jump\t// in\n        /* \"contract/NewCryptoBullDogs.sol\":309:350  uint256 public constant MAX_SUPPLY = 2222 */\n    tag_13:\n      callvalue\n      dup1\n      iszero\n      tag_110\n      jumpi\n      0x00\n      dup1\n      revert\n    tag_110:\n      pop\n      tag_60\n        /* \"contract/NewCryptoBullDogs.sol\":346:350  2222 */\n      0x08ae\n        /* \"contract/NewCryptoBullDogs.sol\":309:350  uint256 public constant MAX_SUPPLY = 2222 */\n      dup2\n      jump\n        /* \"contract/NewCryptoBullDogs.sol\":798:820  bool public publicSale */\n    tag_14:\n      callvalue\n      dup1\n      iszero\n      tag_114\n      jumpi\n      0x00\n      dup1\n      revert\n    tag_114:\n      pop\n      sload(0x0b)\n      tag_53\n      swap1\n      0x0100\n      swap1\n      div\n      0xff\n      and\n      dup2\n      jump\n        /* \"contract/NewCryptoBullDogs.sol\":4806:5105  function withdraw() external onlyOwner{... */\n    tag_15:\n      callvalue\n      dup1\n      iszero\n      tag_118\n      jumpi\n      0x00\n      dup1\n      revert\n    tag_118:\n      pop\n      tag_67\n      tag_120\n      jump\t// in\n        /* \"erc721a/contracts/ERC721A.sol\":10656:10835  function safeTransferFrom(... */\n    tag_16:\n      callvalue\n      dup1\n      iszero\n      tag_121\n      jumpi\n      0x00\n      dup1\n      revert\n    tag_121:\n      pop\n      tag_67\n      tag_123\n      calldatasize\n      0x04\n      tag_104\n      jump\t// in\n    tag_123:\n      tag_124\n      jump\t// in\n        /* \"contract/NewCryptoBullDogs.sol\":4348:4438  function getMerkleRoot() external view returns (bytes32){... */\n    tag_17:\n      callvalue\n      dup1\n      iszero\n      tag_125\n      jumpi\n      0x00\n      dup1\n      revert\n    tag_125:\n      pop\n        /* \"contract/NewCryptoBullDogs.sol\":4421:4431  merkleRoot */\n      sload(0x0c)\n        /* \"contract/NewCryptoBullDogs.sol\":4348:4438  function getMerkleRoot() external view returns (bytes32){... */\n      jump(tag_60)\n        /* \"contract/NewCryptoBullDogs.sol\":615:650  string public   placeholderTokenUri */\n    tag_18:\n      callvalue\n      dup1\n      iszero\n      tag_130\n      jumpi\n      0x00\n      dup1\n      revert\n    tag_130:\n      pop\n      tag_72\n      tag_132\n      jump\t// in\n        /* \"contract/NewCryptoBullDogs.sol\":770:792  bool public isRevealed */\n    tag_19:\n      callvalue\n      dup1\n      iszero\n      tag_134\n      jumpi\n      0x00\n      dup1\n      revert\n    tag_134:\n      pop\n      sload(0x0b)\n      tag_53\n      swap1\n      0xff\n      and\n      dup2\n      jump\n        /* \"contract/NewCryptoBullDogs.sol\":4717:4800  function toggleReveal() external onlyOwner{... */\n    tag_20:\n      callvalue\n      dup1\n      iszero\n      tag_138\n      jumpi\n      0x00\n      dup1\n      revert\n    tag_138:\n      pop\n      tag_67\n      tag_140\n      jump\t// in\n        /* \"erc721a/contracts/ERC721A.sol\":7955:8077  function ownerOf(uint256 tokenId) public view override returns (address) {... */\n    tag_21:\n      callvalue\n      dup1\n      iszero\n      tag_141\n      jumpi\n      0x00\n      dup1\n      revert\n    tag_141:\n      pop\n      tag_81\n      tag_143\n      calldatasize\n      0x04\n      tag_83\n      jump\t// in\n    tag_143:\n      tag_144\n      jump\t// in\n        /* \"contract/NewCryptoBullDogs.sol\":356:400  uint256 public constant MAX_PUBLIC_MINT = 10 */\n    tag_22:\n      callvalue\n      dup1\n      iszero\n      tag_146\n      jumpi\n      0x00\n      dup1\n      revert\n    tag_146:\n      pop\n      tag_60\n        /* \"contract/NewCryptoBullDogs.sol\":398:400  10 */\n      0x0a\n        /* \"contract/NewCryptoBullDogs.sol\":356:400  uint256 public constant MAX_PUBLIC_MINT = 10 */\n      dup2\n      jump\n        /* \"erc721a/contracts/ERC721A.sol\":5202:5405  function balanceOf(address owner) public view override returns (uint256) {... */\n    tag_23:\n      callvalue\n      dup1\n      iszero\n      tag_150\n      jumpi\n      0x00\n      dup1\n      revert\n    tag_150:\n      pop\n      tag_60\n      tag_152\n      calldatasize\n      0x04\n      tag_62\n      jump\t// in\n    tag_152:\n      tag_153\n      jump\t// in\n        /* \"@openzeppelin/contracts/access/Ownable.sol\":1668:1769  function renounceOwnership() public virtual onlyOwner {... */\n    tag_24:\n      callvalue\n      dup1\n      iszero\n      tag_155\n      jumpi\n      0x00\n      dup1\n      revert\n    tag_155:\n      pop\n      tag_67\n      tag_157\n      jump\t// in\n        /* \"contract/NewCryptoBullDogs.sol\":4239:4342  function setMerkleRoot(bytes32 _merkleRoot) external onlyOwner{... */\n    tag_25:\n      callvalue\n      dup1\n      iszero\n      tag_158\n      jumpi\n      0x00\n      dup1\n      revert\n    tag_158:\n      pop\n      tag_67\n      tag_160\n      calldatasize\n      0x04\n      tag_83\n      jump\t// in\n    tag_160:\n      tag_162\n      jump\t// in\n        /* \"contract/NewCryptoBullDogs.sol\":3571:3969  function walletOf() external view returns(uint256[] memory){... */\n    tag_26:\n      callvalue\n      dup1\n      iszero\n      tag_163\n      jumpi\n      0x00\n      dup1\n      revert\n    tag_163:\n      pop\n      tag_164\n      tag_165\n      jump\t// in\n    tag_164:\n      mload(0x40)\n      tag_57\n      swap2\n      swap1\n      tag_167\n      jump\t// in\n        /* \"contract/NewCryptoBullDogs.sol\":857:874  bool public pause */\n    tag_27:\n      callvalue\n      dup1\n      iszero\n      tag_168\n      jumpi\n      0x00\n      dup1\n      revert\n    tag_168:\n      pop\n      sload(0x0b)\n      tag_53\n      swap1\n      0x01000000\n      swap1\n      div\n      0xff\n      and\n      dup2\n      jump\n        /* \"contract/NewCryptoBullDogs.sol\":826:851  bool public whiteListSale */\n    tag_28:\n      callvalue\n      dup1\n      iszero\n      tag_172\n      jumpi\n      0x00\n      dup1\n      revert\n    tag_172:\n      pop\n      sload(0x0b)\n      tag_53\n      swap1\n      0x010000\n      swap1\n      div\n      0xff\n      and\n      dup2\n      jump\n        /* \"contract/NewCryptoBullDogs.sol\":4522:4618  function toggleWhiteListSale() external onlyOwner{... */\n    tag_29:\n      callvalue\n      dup1\n      iszero\n      tag_176\n      jumpi\n      0x00\n      dup1\n      revert\n    tag_176:\n      pop\n      tag_67\n      tag_178\n      jump\t// in\n        /* \"@openzeppelin/contracts/access/Ownable.sol\":1036:1121  function owner() public view virtual returns (address) {... */\n    tag_30:\n      callvalue\n      dup1\n      iszero\n      tag_179\n      jumpi\n      0x00\n      dup1\n      revert\n    tag_179:\n      pop\n        /* \"@openzeppelin/contracts/access/Ownable.sol\":1108:1114  _owner */\n      and(sub(shl(0xa0, 0x01), 0x01), sload(0x08))\n        /* \"@openzeppelin/contracts/access/Ownable.sol\":1036:1121  function owner() public view virtual returns (address) {... */\n      jump(tag_81)\n        /* \"erc721a/contracts/ERC721A.sol\":8301:8403  function symbol() public view virtual override returns (string memory) {... */\n    tag_31:\n      callvalue\n      dup1\n      iszero\n      tag_183\n      jumpi\n      0x00\n      dup1\n      revert\n    tag_183:\n      pop\n      tag_72\n      tag_185\n      jump\t// in\n        /* \"contract/NewCryptoBullDogs.sol\":1269:1810  function mint(uint256 _quantity) external payable callerIsUser{... */\n    tag_32:\n      tag_67\n      tag_188\n      calldatasize\n      0x04\n      tag_83\n      jump\t// in\n    tag_188:\n      tag_189\n      jump\t// in\n        /* \"erc721a/contracts/ERC721A.sol\":9862:10136  function setApprovalForAll(address operator, bool approved) public override {... */\n    tag_33:\n      callvalue\n      dup1\n      iszero\n      tag_190\n      jumpi\n      0x00\n      dup1\n      revert\n    tag_190:\n      pop\n      tag_67\n      tag_192\n      calldatasize\n      0x04\n      tag_193\n      jump\t// in\n    tag_192:\n      tag_194\n      jump\t// in\n        /* \"contract/NewCryptoBullDogs.sol\":4093:4233  function setPlaceHolderUri(string memory _placeholderTokenUri) external onlyOwner{... */\n    tag_34:\n      callvalue\n      dup1\n      iszero\n      tag_195\n      jumpi\n      0x00\n      dup1\n      revert\n    tag_195:\n      pop\n      tag_67\n      tag_197\n      calldatasize\n      0x04\n      tag_69\n      jump\t// in\n    tag_197:\n      tag_198\n      jump\t// in\n        /* \"erc721a/contracts/ERC721A.sol\":10901:11260  function safeTransferFrom(... */\n    tag_35:\n      callvalue\n      dup1\n      iszero\n      tag_199\n      jumpi\n      0x00\n      dup1\n      revert\n    tag_199:\n      pop\n      tag_67\n      tag_201\n      calldatasize\n      0x04\n      tag_202\n      jump\t// in\n    tag_201:\n      tag_203\n      jump\t// in\n        /* \"contract/NewCryptoBullDogs.sol\":2680:2859  function teamMint() external onlyOwner{... */\n    tag_36:\n      callvalue\n      dup1\n      iszero\n      tag_204\n      jumpi\n      0x00\n      dup1\n      revert\n    tag_204:\n      pop\n      tag_67\n      tag_206\n      jump\t// in\n        /* \"contract/NewCryptoBullDogs.sol\":518:574  uint256 public constant WHITELIST_SALE_PRICE = .03 ether */\n    tag_37:\n      callvalue\n      dup1\n      iszero\n      tag_207\n      jumpi\n      0x00\n      dup1\n      revert\n    tag_207:\n      pop\n      tag_60\n        /* \"contract/NewCryptoBullDogs.sol\":565:574  .03 ether */\n      0x6a94d74f430000\n        /* \"contract/NewCryptoBullDogs.sol\":518:574  uint256 public constant WHITELIST_SALE_PRICE = .03 ether */\n      dup2\n      jump\n        /* \"contract/NewCryptoBullDogs.sol\":4444:4516  function togglePause() external onlyOwner{... */\n    tag_39:\n      callvalue\n      dup1\n      iszero\n      tag_215\n      jumpi\n      0x00\n      dup1\n      revert\n    tag_215:\n      pop\n      tag_67\n      tag_217\n      jump\t// in\n        /* \"contract/NewCryptoBullDogs.sol\":3017:3480  function tokenURI(uint256 tokenId) public view virtual override returns (string memory) {... */\n    tag_40:\n      callvalue\n      dup1\n      iszero\n      tag_218\n      jumpi\n      0x00\n      dup1\n      revert\n    tag_218:\n      pop\n      tag_72\n      tag_220\n      calldatasize\n      0x04\n      tag_83\n      jump\t// in\n    tag_220:\n      tag_221\n      jump\t// in\n        /* \"contract/NewCryptoBullDogs.sol\":4624:4711  function togglePublicSale() external onlyOwner{... */\n    tag_41:\n      callvalue\n      dup1\n      iszero\n      tag_223\n      jumpi\n      0x00\n      dup1\n      revert\n    tag_223:\n      pop\n      tag_67\n      tag_225\n      jump\t// in\n        /* \"contract/NewCryptoBullDogs.sol\":880:902  bool public teamMinted */\n    tag_42:\n      callvalue\n      dup1\n      iszero\n      tag_226\n      jumpi\n      0x00\n      dup1\n      revert\n    tag_226:\n      pop\n      sload(0x0b)\n      tag_53\n      swap1\n      0x0100000000\n      swap1\n      div\n      0xff\n      and\n      dup2\n      jump\n        /* \"erc721a/contracts/ERC721A.sol\":10202:10364  function isApprovedForAll(address owner, address operator) public view virtual override returns (bool) {... */\n    tag_43:\n      callvalue\n      dup1\n      iszero\n      tag_230\n      jumpi\n      0x00\n      dup1\n      revert\n    tag_230:\n      pop\n      tag_53\n      tag_232\n      calldatasize\n      0x04\n      tag_233\n      jump\t// in\n    tag_232:\n      sub(shl(0xa0, 0x01), 0x01)\n        /* \"erc721a/contracts/ERC721A.sol\":10322:10347  _operatorApprovals[owner] */\n      swap2\n      dup3\n      and\n        /* \"erc721a/contracts/ERC721A.sol\":10299:10303  bool */\n      0x00\n        /* \"erc721a/contracts/ERC721A.sol\":10322:10347  _operatorApprovals[owner] */\n      swap1\n      dup2\n      mstore\n        /* \"erc721a/contracts/ERC721A.sol\":10322:10340  _operatorApprovals */\n      0x07\n        /* \"erc721a/contracts/ERC721A.sol\":10322:10347  _operatorApprovals[owner] */\n      0x20\n      swap1\n      dup2\n      mstore\n      0x40\n      dup1\n      dup4\n      keccak256\n        /* \"erc721a/contracts/ERC721A.sol\":10322:10357  _operatorApprovals[owner][operator] */\n      swap4\n      swap1\n      swap5\n      and\n      dup3\n      mstore\n      swap2\n      swap1\n      swap2\n      mstore\n      keccak256\n      sload\n      0xff\n      and\n      swap1\n        /* \"erc721a/contracts/ERC721A.sol\":10202:10364  function isApprovedForAll(address owner, address operator) public view virtual override returns (bool) {... */\n      jump\n        /* \"@openzeppelin/contracts/access/Ownable.sol\":1918:2116  function transferOwnership(address newOwner) public virtual onlyOwner {... */\n    tag_44:\n      callvalue\n      dup1\n      iszero\n      tag_236\n      jumpi\n      0x00\n      dup1\n      revert\n    tag_236:\n      pop\n      tag_67\n      tag_238\n      calldatasize\n      0x04\n      tag_62\n      jump\t// in\n    tag_238:\n      tag_239\n      jump\t// in\n        /* \"erc721a/contracts/ERC721A.sol\":4843:5143  function supportsInterface(bytes4 interfaceId) public view virtual override(ERC165, IERC165) returns (bool) {... */\n    tag_56:\n        /* \"erc721a/contracts/ERC721A.sol\":4945:4949  bool */\n      0x00\n      not(sub(shl(0xe0, 0x01), 0x01))\n        /* \"erc721a/contracts/ERC721A.sol\":4980:5020  interfaceId == type(IERC721).interfaceId */\n      dup3\n      and\n      shl(0xe0, 0x80ac58cd)\n      eq\n      dup1\n        /* \"erc721a/contracts/ERC721A.sol\":4980:5084  interfaceId == type(IERC721).interfaceId ||... */\n      tag_241\n      jumpi\n      pop\n      not(sub(shl(0xe0, 0x01), 0x01))\n        /* \"erc721a/contracts/ERC721A.sol\":5036:5084  interfaceId == type(IERC721Metadata).interfaceId */\n      dup3\n      and\n      shl(0xe0, 0x5b5e139f)\n      eq\n        /* \"erc721a/contracts/ERC721A.sol\":4980:5084  interfaceId == type(IERC721).interfaceId ||... */\n    tag_241:\n        /* \"erc721a/contracts/ERC721A.sol\":4980:5136  interfaceId == type(IERC721).interfaceId ||... */\n      dup1\n      tag_243\n      jumpi\n      pop\n      shl(0xe0, 0x01ffc9a7)\n      not(sub(shl(0xe0, 0x01), 0x01))\n        /* \"@openzeppelin/contracts/utils/introspection/ERC165.sol\":937:977  interfaceId == type(IERC165).interfaceId */\n      dup4\n      and\n      eq\n        /* \"erc721a/contracts/ERC721A.sol\":5100:5136  super.supportsInterface(interfaceId) */\n    tag_243:\n        /* \"erc721a/contracts/ERC721A.sol\":4961:5136  return... */\n      swap3\n        /* \"erc721a/contracts/ERC721A.sol\":4843:5143  function supportsInterface(bytes4 interfaceId) public view virtual override(ERC165, IERC165) returns (bool) {... */\n      swap2\n      pop\n      pop\n      jump\t// out\n        /* \"contract/NewCryptoBullDogs.sol\":3975:4088  function setTokenUri(string memory _baseTokenUri) external onlyOwner{... */\n    tag_70:\n        /* \"@openzeppelin/contracts/access/Ownable.sol\":1108:1114  _owner */\n      and(sub(shl(0xa0, 0x01), 0x01), sload(0x08))\n        /* \"@openzeppelin/contracts/utils/Context.sol\":719:729  msg.sender */\n      caller\n        /* \"@openzeppelin/contracts/access/Ownable.sol\":1248:1271  owner() == _msgSender() */\n      eq\n        /* \"@openzeppelin/contracts/access/Ownable.sol\":1240:1308  require(owner() == _msgSender(), \"Ownable: caller is not the owner\") */\n      tag_249\n      jumpi\n      mload(0x40)\n      shl(0xe5, 0x461bcd)\n      dup2\n      mstore\n      0x04\n      add\n      tag_250\n      swap1\n      tag_251\n      jump\t// in\n    tag_250:\n      mload(0x40)\n      dup1\n      swap2\n      sub\n      swap1\n      revert\n    tag_249:\n        /* \"contract/NewCryptoBullDogs.sol\":4053:4081  baseTokenUri = _baseTokenUri */\n      dup1\n      mload\n      tag_253\n      swap1\n        /* \"contract/NewCryptoBullDogs.sol\":4053:4065  baseTokenUri */\n      0x09\n      swap1\n        /* \"contract/NewCryptoBullDogs.sol\":4053:4081  baseTokenUri = _baseTokenUri */\n      0x20\n      dup5\n      add\n      swap1\n      tag_254\n      jump\t// in\n    tag_253:\n      pop\n        /* \"contract/NewCryptoBullDogs.sol\":3975:4088  function setTokenUri(string memory _baseTokenUri) external onlyOwner{... */\n      pop\n      jump\t// out\n        /* \"erc721a/contracts/ERC721A.sol\":8139:8237  function name() public view virtual override returns (string memory) {... */\n    tag_73:\n        /* \"erc721a/contracts/ERC721A.sol\":8193:8206  string memory */\n      0x60\n        /* \"erc721a/contracts/ERC721A.sol\":8225:8230  _name */\n      0x02\n        /* \"erc721a/contracts/ERC721A.sol\":8218:8230  return _name */\n      dup1\n      sload\n      tag_256\n      swap1\n      tag_257\n      jump\t// in\n    tag_256:\n      dup1\n      0x1f\n      add\n      0x20\n      dup1\n      swap2\n      div\n      mul\n      0x20\n      add\n      mload(0x40)\n      swap1\n      dup2\n      add\n      0x40\n      mstore\n      dup1\n      swap3\n      swap2\n      swap1\n      dup2\n      dup2\n      mstore\n      0x20\n      add\n      dup3\n      dup1\n      sload\n      tag_258\n      swap1\n      tag_257\n      jump\t// in\n    tag_258:\n      dup1\n      iszero\n      tag_259\n      jumpi\n      dup1\n      0x1f\n      lt\n      tag_260\n      jumpi\n      0x0100\n      dup1\n      dup4\n      sload\n      div\n      mul\n      dup4\n      mstore\n      swap2\n      0x20\n      add\n      swap2\n      jump(tag_259)\n    tag_260:\n      dup3\n      add\n      swap2\n      swap1\n      0x00\n      mstore\n      keccak256(0x00, 0x20)\n      swap1\n    tag_261:\n      dup2\n      sload\n      dup2\n      mstore\n      swap1\n      0x01\n      add\n      swap1\n      0x20\n      add\n      dup1\n      dup4\n      gt\n      tag_261\n      jumpi\n      dup3\n      swap1\n      sub\n      0x1f\n      and\n      dup3\n      add\n      swap2\n    tag_259:\n      pop\n      pop\n      pop\n      pop\n      pop\n      swap1\n      pop\n        /* \"erc721a/contracts/ERC721A.sol\":8139:8237  function name() public view virtual override returns (string memory) {... */\n      swap1\n      jump\t// out\n        /* \"erc721a/contracts/ERC721A.sol\":9595:9795  function getApproved(uint256 tokenId) public view override returns (address) {... */\n    tag_84:\n        /* \"erc721a/contracts/ERC721A.sol\":9663:9670  address */\n      0x00\n        /* \"erc721a/contracts/ERC721A.sol\":9687:9703  _exists(tokenId) */\n      tag_263\n        /* \"erc721a/contracts/ERC721A.sol\":9695:9702  tokenId */\n      dup3\n        /* \"erc721a/contracts/ERC721A.sol\":9687:9694  _exists */\n      tag_264\n        /* \"erc721a/contracts/ERC721A.sol\":9687:9703  _exists(tokenId) */\n      jump\t// in\n    tag_263:\n        /* \"erc721a/contracts/ERC721A.sol\":9682:9746  if (!_exists(tokenId)) revert ApprovalQueryForNonexistentToken() */\n      tag_265\n      jumpi\n        /* \"erc721a/contracts/ERC721A.sol\":9712:9746  ApprovalQueryForNonexistentToken() */\n      mload(0x40)\n      shl(0xe2, 0x33d1c039)\n      dup2\n      mstore\n      0x04\n      add\n      mload(0x40)\n      dup1\n      swap2\n      sub\n      swap1\n      revert\n        /* \"erc721a/contracts/ERC721A.sol\":9682:9746  if (!_exists(tokenId)) revert ApprovalQueryForNonexistentToken() */\n    tag_265:\n      pop\n        /* \"erc721a/contracts/ERC721A.sol\":9764:9788  _tokenApprovals[tokenId] */\n      0x00\n      swap1\n      dup2\n      mstore\n        /* \"erc721a/contracts/ERC721A.sol\":9764:9779  _tokenApprovals */\n      0x06\n        /* \"erc721a/contracts/ERC721A.sol\":9764:9788  _tokenApprovals[tokenId] */\n      0x20\n      mstore\n      0x40\n      swap1\n      keccak256\n      sload\n      sub(shl(0xa0, 0x01), 0x01)\n      and\n      swap1\n        /* \"erc721a/contracts/ERC721A.sol\":9595:9795  function getApproved(uint256 tokenId) public view override returns (address) {... */\n      jump\t// out\n        /* \"erc721a/contracts/ERC721A.sol\":9172:9534  function approve(address to, uint256 tokenId) public override {... */\n    tag_91:\n        /* \"erc721a/contracts/ERC721A.sol\":9244:9257  address owner */\n      0x00\n        /* \"erc721a/contracts/ERC721A.sol\":9260:9284  ERC721A.ownerOf(tokenId) */\n      tag_267\n        /* \"erc721a/contracts/ERC721A.sol\":9276:9283  tokenId */\n      dup3\n        /* \"erc721a/contracts/ERC721A.sol\":9260:9275  ERC721A.ownerOf */\n      tag_144\n        /* \"erc721a/contracts/ERC721A.sol\":9260:9284  ERC721A.ownerOf(tokenId) */\n      jump\t// in\n    tag_267:\n        /* \"erc721a/contracts/ERC721A.sol\":9244:9284  address owner = ERC721A.ownerOf(tokenId) */\n      swap1\n      pop\n        /* \"erc721a/contracts/ERC721A.sol\":9304:9309  owner */\n      dup1\n      sub(shl(0xa0, 0x01), 0x01)\n        /* \"erc721a/contracts/ERC721A.sol\":9298:9309  to == owner */\n      and\n        /* \"erc721a/contracts/ERC721A.sol\":9298:9300  to */\n      dup4\n      sub(shl(0xa0, 0x01), 0x01)\n        /* \"erc721a/contracts/ERC721A.sol\":9298:9309  to == owner */\n      and\n      eq\n        /* \"erc721a/contracts/ERC721A.sol\":9294:9342  if (to == owner) revert ApprovalToCurrentOwner() */\n      iszero\n      tag_268\n      jumpi\n        /* \"erc721a/contracts/ERC721A.sol\":9318:9342  ApprovalToCurrentOwner() */\n      mload(0x40)\n      shl(0xe2, 0x250fdee3)\n      dup2\n      mstore\n      0x04\n      add\n      mload(0x40)\n      dup1\n      swap2\n      sub\n      swap1\n      revert\n        /* \"erc721a/contracts/ERC721A.sol\":9294:9342  if (to == owner) revert ApprovalToCurrentOwner() */\n    tag_268:\n        /* \"@openzeppelin/contracts/utils/Context.sol\":719:729  msg.sender */\n      caller\n      sub(shl(0xa0, 0x01), 0x01)\n        /* \"erc721a/contracts/ERC721A.sol\":9357:9378  _msgSender() != owner */\n      dup3\n      and\n      eq\n      dup1\n      iszero\n      swap1\n        /* \"erc721a/contracts/ERC721A.sol\":9357:9420  _msgSender() != owner && !isApprovedForAll(owner, _msgSender()) */\n      tag_270\n      jumpi\n      pop\n        /* \"erc721a/contracts/ERC721A.sol\":9383:9420  isApprovedForAll(owner, _msgSender()) */\n      tag_271\n        /* \"erc721a/contracts/ERC721A.sol\":9400:9405  owner */\n      dup2\n        /* \"@openzeppelin/contracts/utils/Context.sol\":719:729  msg.sender */\n      caller\n        /* \"erc721a/contracts/ERC721A.sol\":10202:10364  function isApprovedForAll(address owner, address operator) public view virtual override returns (bool) {... */\n      tag_232\n      jump\t// in\n        /* \"erc721a/contracts/ERC721A.sol\":9383:9420  isApprovedForAll(owner, _msgSender()) */\n    tag_271:\n        /* \"erc721a/contracts/ERC721A.sol\":9382:9420  !isApprovedForAll(owner, _msgSender()) */\n      iszero\n        /* \"erc721a/contracts/ERC721A.sol\":9357:9420  _msgSender() != owner && !isApprovedForAll(owner, _msgSender()) */\n    tag_270:\n        /* \"erc721a/contracts/ERC721A.sol\":9353:9489  if (_msgSender() != owner && !isApprovedForAll(owner, _msgSender())) {... */\n      iszero\n      tag_273\n      jumpi\n        /* \"erc721a/contracts/ERC721A.sol\":9443:9478  ApprovalCallerNotOwnerNorApproved() */\n      mload(0x40)\n      shl(0xe1, 0x67d9dca1)\n      dup2\n      mstore\n      0x04\n      add\n      mload(0x40)\n      dup1\n      swap2\n      sub\n      swap1\n      revert\n        /* \"erc721a/contracts/ERC721A.sol\":9353:9489  if (_msgSender() != owner && !isApprovedForAll(owner, _msgSender())) {... */\n    tag_273:\n        /* \"erc721a/contracts/ERC721A.sol\":9499:9527  _approve(to, tokenId, owner) */\n      tag_274\n        /* \"erc721a/contracts/ERC721A.sol\":9508:9510  to */\n      dup4\n        /* \"erc721a/contracts/ERC721A.sol\":9512:9519  tokenId */\n      dup4\n        /* \"erc721a/contracts/ERC721A.sol\":9521:9526  owner */\n      dup4\n        /* \"erc721a/contracts/ERC721A.sol\":9499:9507  _approve */\n      tag_275\n        /* \"erc721a/contracts/ERC721A.sol\":9499:9527  _approve(to, tokenId, owner) */\n      jump\t// in\n    tag_274:\n        /* \"erc721a/contracts/ERC721A.sol\":9234:9534  {... */\n      pop\n        /* \"erc721a/contracts/ERC721A.sol\":9172:9534  function approve(address to, uint256 tokenId) public override {... */\n      pop\n      pop\n      jump\t// out\n        /* \"erc721a/contracts/ERC721A.sol\":10426:10590  function transferFrom(... */\n    tag_105:\n        /* \"erc721a/contracts/ERC721A.sol\":10555:10583  _transfer(from, to, tokenId) */\n      tag_274\n        /* \"erc721a/contracts/ERC721A.sol\":10565:10569  from */\n      dup4\n        /* \"erc721a/contracts/ERC721A.sol\":10571:10573  to */\n      dup4\n        /* \"erc721a/contracts/ERC721A.sol\":10575:10582  tokenId */\n      dup4\n        /* \"erc721a/contracts/ERC721A.sol\":10555:10564  _transfer */\n      tag_281\n        /* \"erc721a/contracts/ERC721A.sol\":10555:10583  _transfer(from, to, tokenId) */\n      jump\t// in\n        /* \"contract/NewCryptoBullDogs.sol\":1816:2674  function whitelistMint(bytes32[] memory _merkleProof, uint256 _quantity) external payable callerIsUser{... */\n    tag_109:\n        /* \"contract/NewCryptoBullDogs.sol\":1169:1178  tx.origin */\n      origin\n        /* \"contract/NewCryptoBullDogs.sol\":1182:1192  msg.sender */\n      caller\n        /* \"contract/NewCryptoBullDogs.sol\":1169:1192  tx.origin == msg.sender */\n      eq\n        /* \"contract/NewCryptoBullDogs.sol\":1161:1245  require(tx.origin == msg.sender, \"CryptoBullDogs :: Cannot be called by a contract\") */\n      tag_283\n      jumpi\n      mload(0x40)\n      shl(0xe5, 0x461bcd)\n      dup2\n      mstore\n      0x04\n      add\n      tag_250\n      swap1\n      tag_285\n      jump\t// in\n    tag_283:\n        /* \"contract/NewCryptoBullDogs.sol\":1936:1949  whiteListSale */\n      sload(0x0b)\n      0x010000\n      swap1\n      div\n      0xff\n      and\n        /* \"contract/NewCryptoBullDogs.sol\":1928:1991  require(whiteListSale, \"CryptoBullDogs :: Minting is on Pause\") */\n      tag_287\n      jumpi\n      mload(0x40)\n      shl(0xe5, 0x461bcd)\n      dup2\n      mstore\n        /* \"#utility.yul\":8860:8862   */\n      0x20\n        /* \"contract/NewCryptoBullDogs.sol\":1928:1991  require(whiteListSale, \"CryptoBullDogs :: Minting is on Pause\") */\n      0x04\n      dup3\n      add\n        /* \"#utility.yul\":8842:8863   */\n      mstore\n        /* \"#utility.yul\":8899:8901   */\n      0x25\n        /* \"#utility.yul\":8879:8897   */\n      0x24\n      dup3\n      add\n        /* \"#utility.yul\":8872:8902   */\n      mstore\n        /* \"#utility.yul\":8938:8972   */\n      0x43727970746f42756c6c446f6773203a3a204d696e74696e67206973206f6e20\n        /* \"#utility.yul\":8918:8936   */\n      0x44\n      dup3\n      add\n        /* \"#utility.yul\":8911:8973   */\n      mstore\n      shl(0xd8, 0x5061757365)\n        /* \"#utility.yul\":8989:9007   */\n      0x64\n      dup3\n      add\n        /* \"#utility.yul\":8982:9017   */\n      mstore\n        /* \"#utility.yul\":9034:9053   */\n      0x84\n      add\n        /* \"contract/NewCryptoBullDogs.sol\":1928:1991  require(whiteListSale, \"CryptoBullDogs :: Minting is on Pause\") */\n      tag_250\n        /* \"#utility.yul\":8658:9059   */\n      jump\n        /* \"contract/NewCryptoBullDogs.sol\":1928:1991  require(whiteListSale, \"CryptoBullDogs :: Minting is on Pause\") */\n    tag_287:\n        /* \"contract/NewCryptoBullDogs.sol\":346:350  2222 */\n      0x08ae\n        /* \"contract/NewCryptoBullDogs.sol\":2026:2035  _quantity */\n      dup2\n        /* \"contract/NewCryptoBullDogs.sol\":2010:2023  totalSupply() */\n      tag_290\n        /* \"erc721a/contracts/ERC721A.sol\":4364:4376  _burnCounter */\n      sload(0x01)\n        /* \"erc721a/contracts/ERC721A.sol\":4158:4165  uint256 */\n      0x00\n        /* \"erc721a/contracts/ERC721A.sol\":4348:4361  _currentIndex */\n      sload\n        /* \"erc721a/contracts/ERC721A.sol\":4348:4376  _currentIndex - _burnCounter */\n      sub\n      swap1\n        /* \"erc721a/contracts/ERC721A.sol\":4114:4411  function totalSupply() public view returns (uint256) {... */\n      jump\n        /* \"contract/NewCryptoBullDogs.sol\":2010:2023  totalSupply() */\n    tag_290:\n        /* \"contract/NewCryptoBullDogs.sol\":2010:2035  totalSupply() + _quantity */\n      tag_291\n      swap2\n      swap1\n      tag_292\n      jump\t// in\n    tag_291:\n        /* \"contract/NewCryptoBullDogs.sol\":2009:2050  (totalSupply() + _quantity) <= MAX_SUPPLY */\n      gt\n      iszero\n        /* \"contract/NewCryptoBullDogs.sol\":2001:2102  require((totalSupply() + _quantity) <= MAX_SUPPLY, \"CryptoBullDogs :: Cannot mint beyond max supply\") */\n      tag_293\n      jumpi\n      mload(0x40)\n      shl(0xe5, 0x461bcd)\n      dup2\n      mstore\n        /* \"#utility.yul\":9531:9533   */\n      0x20\n        /* \"contract/NewCryptoBullDogs.sol\":2001:2102  require((totalSupply() + _quantity) <= MAX_SUPPLY, \"CryptoBullDogs :: Cannot mint beyond max supply\") */\n      0x04\n      dup3\n      add\n        /* \"#utility.yul\":9513:9534   */\n      mstore\n        /* \"#utility.yul\":9570:9572   */\n      0x2f\n        /* \"#utility.yul\":9550:9568   */\n      0x24\n      dup3\n      add\n        /* \"#utility.yul\":9543:9573   */\n      mstore\n        /* \"#utility.yul\":9609:9643   */\n      0x43727970746f42756c6c446f6773203a3a2043616e6e6f74206d696e74206265\n        /* \"#utility.yul\":9589:9607   */\n      0x44\n      dup3\n      add\n        /* \"#utility.yul\":9582:9644   */\n      mstore\n      shl(0x88, 0x796f6e64206d617820737570706c79)\n        /* \"#utility.yul\":9660:9678   */\n      0x64\n      dup3\n      add\n        /* \"#utility.yul\":9653:9698   */\n      mstore\n        /* \"#utility.yul\":9715:9734   */\n      0x84\n      add\n        /* \"contract/NewCryptoBullDogs.sol\":2001:2102  require((totalSupply() + _quantity) <= MAX_SUPPLY, \"CryptoBullDogs :: Cannot mint beyond max supply\") */\n      tag_250\n        /* \"#utility.yul\":9329:9740   */\n      jump\n        /* \"contract/NewCryptoBullDogs.sol\":2001:2102  require((totalSupply() + _quantity) <= MAX_SUPPLY, \"CryptoBullDogs :: Cannot mint beyond max supply\") */\n    tag_293:\n        /* \"contract/NewCryptoBullDogs.sol\":2140:2150  msg.sender */\n      caller\n        /* \"contract/NewCryptoBullDogs.sol\":2121:2151  totalWhitelistMint[msg.sender] */\n      0x00\n      swap1\n      dup2\n      mstore\n        /* \"contract/NewCryptoBullDogs.sol\":2121:2139  totalWhitelistMint */\n      0x0e\n        /* \"contract/NewCryptoBullDogs.sol\":2121:2151  totalWhitelistMint[msg.sender] */\n      0x20\n      mstore\n      0x40\n      swap1\n      keccak256\n      sload\n        /* \"contract/NewCryptoBullDogs.sol\":451:453  10 */\n      0x0a\n      swap1\n        /* \"contract/NewCryptoBullDogs.sol\":2121:2163  totalWhitelistMint[msg.sender] + _quantity */\n      tag_296\n      swap1\n        /* \"contract/NewCryptoBullDogs.sol\":2154:2163  _quantity */\n      dup4\n      swap1\n        /* \"contract/NewCryptoBullDogs.sol\":2121:2163  totalWhitelistMint[msg.sender] + _quantity */\n      tag_292\n      jump\t// in\n    tag_296:\n        /* \"contract/NewCryptoBullDogs.sol\":2120:2187  (totalWhitelistMint[msg.sender] + _quantity)  <= MAX_WHITELIST_MINT */\n      gt\n      iszero\n        /* \"contract/NewCryptoBullDogs.sol\":2112:2247  require((totalWhitelistMint[msg.sender] + _quantity)  <= MAX_WHITELIST_MINT, \"CryptoBullDogs:: Cannot mint beyond whitelist max mint!\") */\n      tag_297\n      jumpi\n      mload(0x40)\n      shl(0xe5, 0x461bcd)\n      dup2\n      mstore\n        /* \"#utility.yul\":9947:9949   */\n      0x20\n        /* \"contract/NewCryptoBullDogs.sol\":2112:2247  require((totalWhitelistMint[msg.sender] + _quantity)  <= MAX_WHITELIST_MINT, \"CryptoBullDogs:: Cannot mint beyond whitelist max mint!\") */\n      0x04\n      dup3\n      add\n        /* \"#utility.yul\":9929:9950   */\n      mstore\n        /* \"#utility.yul\":9986:9988   */\n      0x37\n        /* \"#utility.yul\":9966:9984   */\n      0x24\n      dup3\n      add\n        /* \"#utility.yul\":9959:9989   */\n      mstore\n        /* \"#utility.yul\":10025:10059   */\n      0x43727970746f42756c6c446f67733a3a2043616e6e6f74206d696e7420626579\n        /* \"#utility.yul\":10005:10023   */\n      0x44\n      dup3\n      add\n        /* \"#utility.yul\":9998:10060   */\n      mstore\n        /* \"#utility.yul\":10096:10121   */\n      0x6f6e642077686974656c697374206d6178206d696e7421000000000000000000\n        /* \"#utility.yul\":10076:10094   */\n      0x64\n      dup3\n      add\n        /* \"#utility.yul\":10069:10122   */\n      mstore\n        /* \"#utility.yul\":10139:10158   */\n      0x84\n      add\n        /* \"contract/NewCryptoBullDogs.sol\":2112:2247  require((totalWhitelistMint[msg.sender] + _quantity)  <= MAX_WHITELIST_MINT, \"CryptoBullDogs:: Cannot mint beyond whitelist max mint!\") */\n      tag_250\n        /* \"#utility.yul\":9745:10164   */\n      jump\n        /* \"contract/NewCryptoBullDogs.sol\":2112:2247  require((totalWhitelistMint[msg.sender] + _quantity)  <= MAX_WHITELIST_MINT, \"CryptoBullDogs:: Cannot mint beyond whitelist max mint!\") */\n    tag_297:\n        /* \"contract/NewCryptoBullDogs.sol\":2279:2311  WHITELIST_SALE_PRICE * _quantity */\n      tag_300\n        /* \"contract/NewCryptoBullDogs.sol\":2302:2311  _quantity */\n      dup2\n        /* \"contract/NewCryptoBullDogs.sol\":565:574  .03 ether */\n      0x6a94d74f430000\n        /* \"contract/NewCryptoBullDogs.sol\":2279:2311  WHITELIST_SALE_PRICE * _quantity */\n      tag_301\n      jump\t// in\n    tag_300:\n        /* \"contract/NewCryptoBullDogs.sol\":2265:2274  msg.value */\n      callvalue\n        /* \"contract/NewCryptoBullDogs.sol\":2265:2312  msg.value >= (WHITELIST_SALE_PRICE * _quantity) */\n      lt\n      iszero\n        /* \"contract/NewCryptoBullDogs.sol\":2257:2361  require(msg.value >= (WHITELIST_SALE_PRICE * _quantity), \"CryptoBullDogs :: Payment is below the price\") */\n      tag_302\n      jumpi\n      mload(0x40)\n      shl(0xe5, 0x461bcd)\n      dup2\n      mstore\n        /* \"#utility.yul\":10544:10546   */\n      0x20\n        /* \"contract/NewCryptoBullDogs.sol\":2257:2361  require(msg.value >= (WHITELIST_SALE_PRICE * _quantity), \"CryptoBullDogs :: Payment is below the price\") */\n      0x04\n      dup3\n      add\n        /* \"#utility.yul\":10526:10547   */\n      mstore\n        /* \"#utility.yul\":10583:10585   */\n      0x2c\n        /* \"#utility.yul\":10563:10581   */\n      0x24\n      dup3\n      add\n        /* \"#utility.yul\":10556:10586   */\n      mstore\n        /* \"#utility.yul\":10622:10656   */\n      0x43727970746f42756c6c446f6773203a3a205061796d656e742069732062656c\n        /* \"#utility.yul\":10602:10620   */\n      0x44\n      dup3\n      add\n        /* \"#utility.yul\":10595:10657   */\n      mstore\n      shl(0xa0, 0x6f7720746865207072696365)\n        /* \"#utility.yul\":10673:10691   */\n      0x64\n      dup3\n      add\n        /* \"#utility.yul\":10666:10708   */\n      mstore\n        /* \"#utility.yul\":10725:10744   */\n      0x84\n      add\n        /* \"contract/NewCryptoBullDogs.sol\":2257:2361  require(msg.value >= (WHITELIST_SALE_PRICE * _quantity), \"CryptoBullDogs :: Payment is below the price\") */\n      tag_250\n        /* \"#utility.yul\":10342:10750   */\n      jump\n        /* \"contract/NewCryptoBullDogs.sol\":2257:2361  require(msg.value >= (WHITELIST_SALE_PRICE * _quantity), \"CryptoBullDogs :: Payment is below the price\") */\n    tag_302:\n        /* \"contract/NewCryptoBullDogs.sol\":2425:2453  abi.encodePacked(msg.sender) */\n      mload(0x40)\n      not(0xffffffffffffffffffffffff)\n        /* \"contract/NewCryptoBullDogs.sol\":2442:2452  msg.sender */\n      caller\n        /* \"#utility.yul\":10904:10906   */\n      0x60\n        /* \"#utility.yul\":10900:10915   */\n      shl\n        /* \"#utility.yul\":10896:10949   */\n      and\n        /* \"contract/NewCryptoBullDogs.sol\":2425:2453  abi.encodePacked(msg.sender) */\n      0x20\n      dup3\n      add\n        /* \"#utility.yul\":10884:10950   */\n      mstore\n        /* \"contract/NewCryptoBullDogs.sol\":2398:2412  bytes32 sender */\n      0x00\n      swap1\n        /* \"#utility.yul\":10966:10978   */\n      0x34\n      add\n        /* \"contract/NewCryptoBullDogs.sol\":2425:2453  abi.encodePacked(msg.sender) */\n      mload(0x40)\n      0x20\n      dup2\n      dup4\n      sub\n      sub\n      dup2\n      mstore\n      swap1\n      0x40\n      mstore\n        /* \"contract/NewCryptoBullDogs.sol\":2415:2454  keccak256(abi.encodePacked(msg.sender)) */\n      dup1\n      mload\n      swap1\n      0x20\n      add\n      keccak256\n        /* \"contract/NewCryptoBullDogs.sol\":2398:2454  bytes32 sender = keccak256(abi.encodePacked(msg.sender)) */\n      swap1\n      pop\n        /* \"contract/NewCryptoBullDogs.sol\":2472:2524  MerkleProof.verify(_merkleProof, merkleRoot, sender) */\n      tag_307\n        /* \"contract/NewCryptoBullDogs.sol\":2491:2503  _merkleProof */\n      dup4\n        /* \"contract/NewCryptoBullDogs.sol\":2505:2515  merkleRoot */\n      sload(0x0c)\n        /* \"contract/NewCryptoBullDogs.sol\":2517:2523  sender */\n      dup4\n        /* \"contract/NewCryptoBullDogs.sol\":2472:2490  MerkleProof.verify */\n      tag_308\n        /* \"contract/NewCryptoBullDogs.sol\":2472:2524  MerkleProof.verify(_merkleProof, merkleRoot, sender) */\n      jump\t// in\n    tag_307:\n        /* \"contract/NewCryptoBullDogs.sol\":2464:2570  require(MerkleProof.verify(_merkleProof, merkleRoot, sender), \"CryptoBullDogs :: You are not whitelisted\") */\n      tag_309\n      jumpi\n      mload(0x40)\n      shl(0xe5, 0x461bcd)\n      dup2\n      mstore\n        /* \"#utility.yul\":11191:11193   */\n      0x20\n        /* \"contract/NewCryptoBullDogs.sol\":2464:2570  require(MerkleProof.verify(_merkleProof, merkleRoot, sender), \"CryptoBullDogs :: You are not whitelisted\") */\n      0x04\n      dup3\n      add\n        /* \"#utility.yul\":11173:11194   */\n      mstore\n        /* \"#utility.yul\":11230:11232   */\n      0x29\n        /* \"#utility.yul\":11210:11228   */\n      0x24\n      dup3\n      add\n        /* \"#utility.yul\":11203:11233   */\n      mstore\n        /* \"#utility.yul\":11269:11303   */\n      0x43727970746f42756c6c446f6773203a3a20596f7520617265206e6f74207768\n        /* \"#utility.yul\":11249:11267   */\n      0x44\n      dup3\n      add\n        /* \"#utility.yul\":11242:11304   */\n      mstore\n      shl(0xba, 0x1a5d195b1a5cdd1959)\n        /* \"#utility.yul\":11320:11338   */\n      0x64\n      dup3\n      add\n        /* \"#utility.yul\":11313:11352   */\n      mstore\n        /* \"#utility.yul\":11369:11388   */\n      0x84\n      add\n        /* \"contract/NewCryptoBullDogs.sol\":2464:2570  require(MerkleProof.verify(_merkleProof, merkleRoot, sender), \"CryptoBullDogs :: You are not whitelisted\") */\n      tag_250\n        /* \"#utility.yul\":10989:11394   */\n      jump\n        /* \"contract/NewCryptoBullDogs.sol\":2464:2570  require(MerkleProof.verify(_merkleProof, merkleRoot, sender), \"CryptoBullDogs :: You are not whitelisted\") */\n    tag_309:\n        /* \"contract/NewCryptoBullDogs.sol\":2600:2610  msg.sender */\n      caller\n        /* \"contract/NewCryptoBullDogs.sol\":2581:2611  totalWhitelistMint[msg.sender] */\n      0x00\n      swap1\n      dup2\n      mstore\n        /* \"contract/NewCryptoBullDogs.sol\":2581:2599  totalWhitelistMint */\n      0x0e\n        /* \"contract/NewCryptoBullDogs.sol\":2581:2611  totalWhitelistMint[msg.sender] */\n      0x20\n      mstore\n      0x40\n      dup2\n      keccak256\n        /* \"contract/NewCryptoBullDogs.sol\":2581:2624  totalWhitelistMint[msg.sender] += _quantity */\n      dup1\n      sload\n        /* \"contract/NewCryptoBullDogs.sol\":2615:2624  _quantity */\n      dup5\n      swap3\n        /* \"contract/NewCryptoBullDogs.sol\":2581:2611  totalWhitelistMint[msg.sender] */\n      swap1\n        /* \"contract/NewCryptoBullDogs.sol\":2581:2624  totalWhitelistMint[msg.sender] += _quantity */\n      tag_312\n      swap1\n        /* \"contract/NewCryptoBullDogs.sol\":2615:2624  _quantity */\n      dup5\n      swap1\n        /* \"contract/NewCryptoBullDogs.sol\":2581:2624  totalWhitelistMint[msg.sender] += _quantity */\n      tag_292\n      jump\t// in\n    tag_312:\n      swap1\n      swap2\n      sstore\n      pop\n        /* \"contract/NewCryptoBullDogs.sol\":2634:2666  _safeMint(msg.sender, _quantity) */\n      tag_274\n      swap1\n      pop\n        /* \"contract/NewCryptoBullDogs.sol\":2644:2654  msg.sender */\n      caller\n        /* \"contract/NewCryptoBullDogs.sol\":2656:2665  _quantity */\n      dup4\n        /* \"contract/NewCryptoBullDogs.sol\":2634:2643  _safeMint */\n      tag_314\n        /* \"contract/NewCryptoBullDogs.sol\":2634:2666  _safeMint(msg.sender, _quantity) */\n      jump\t// in\n        /* \"contract/NewCryptoBullDogs.sol\":4806:5105  function withdraw() external onlyOwner{... */\n    tag_120:\n        /* \"@openzeppelin/contracts/access/Ownable.sol\":1108:1114  _owner */\n      and(sub(shl(0xa0, 0x01), 0x01), sload(0x08))\n        /* \"@openzeppelin/contracts/utils/Context.sol\":719:729  msg.sender */\n      caller\n        /* \"@openzeppelin/contracts/access/Ownable.sol\":1248:1271  owner() == _msgSender() */\n      eq\n        /* \"@openzeppelin/contracts/access/Ownable.sol\":1240:1308  require(owner() == _msgSender(), \"Ownable: caller is not the owner\") */\n      tag_318\n      jumpi\n      mload(0x40)\n      shl(0xe5, 0x461bcd)\n      dup2\n      mstore\n      0x04\n      add\n      tag_250\n      swap1\n      tag_251\n      jump\t// in\n    tag_318:\n        /* \"contract/NewCryptoBullDogs.sol\":4889:4914  uint256 withdrawAmount_35 */\n      0x00\n        /* \"contract/NewCryptoBullDogs.sol\":4943:4946  100 */\n      0x64\n        /* \"contract/NewCryptoBullDogs.sol\":4917:4942  address(this).balance * 3 */\n      tag_321\n        /* \"contract/NewCryptoBullDogs.sol\":4917:4938  address(this).balance */\n      selfbalance\n        /* \"contract/NewCryptoBullDogs.sol\":4941:4942  3 */\n      0x03\n        /* \"contract/NewCryptoBullDogs.sol\":4917:4942  address(this).balance * 3 */\n      tag_301\n      jump\t// in\n    tag_321:\n        /* \"contract/NewCryptoBullDogs.sol\":4917:4946  address(this).balance * 3/100 */\n      tag_322\n      swap2\n      swap1\n      tag_323\n      jump\t// in\n    tag_322:\n        /* \"contract/NewCryptoBullDogs.sol\":4956:5035  payable(0x90EE4b80C3b15b8b83510BE8Fcf2BCeD69a4c9DB).transfer(withdrawAmount_35) */\n      mload(0x40)\n        /* \"contract/NewCryptoBullDogs.sol\":4889:4946  uint256 withdrawAmount_35 = address(this).balance * 3/100 */\n      swap1\n      swap2\n      pop\n        /* \"contract/NewCryptoBullDogs.sol\":4964:5006  0x90EE4b80C3b15b8b83510BE8Fcf2BCeD69a4c9DB */\n      0x90ee4b80c3b15b8b83510be8fcf2bced69a4c9db\n      swap1\n        /* \"contract/NewCryptoBullDogs.sol\":4956:5035  payable(0x90EE4b80C3b15b8b83510BE8Fcf2BCeD69a4c9DB).transfer(withdrawAmount_35) */\n      dup3\n      iszero\n      0x08fc\n      mul\n      swap1\n        /* \"contract/NewCryptoBullDogs.sol\":4889:4946  uint256 withdrawAmount_35 = address(this).balance * 3/100 */\n      dup4\n      swap1\n        /* \"contract/NewCryptoBullDogs.sol\":4956:5035  payable(0x90EE4b80C3b15b8b83510BE8Fcf2BCeD69a4c9DB).transfer(withdrawAmount_35) */\n      0x00\n      dup2\n      dup2\n      dup2\n        /* \"contract/NewCryptoBullDogs.sol\":4889:4946  uint256 withdrawAmount_35 = address(this).balance * 3/100 */\n      dup6\n        /* \"contract/NewCryptoBullDogs.sol\":4964:5006  0x90EE4b80C3b15b8b83510BE8Fcf2BCeD69a4c9DB */\n      dup9\n        /* \"contract/NewCryptoBullDogs.sol\":4956:5035  payable(0x90EE4b80C3b15b8b83510BE8Fcf2BCeD69a4c9DB).transfer(withdrawAmount_35) */\n      dup9\n      call\n      swap4\n      pop\n      pop\n      pop\n      pop\n      iszero\n      dup1\n      iszero\n      tag_325\n      jumpi\n      returndatasize\n      0x00\n      dup1\n      returndatacopy\n      revert(0x00, returndatasize)\n    tag_325:\n      pop\n        /* \"contract/NewCryptoBullDogs.sol\":5047:5098  payable(msg.sender).transfer(address(this).balance) */\n      mload(0x40)\n        /* \"contract/NewCryptoBullDogs.sol\":5055:5065  msg.sender */\n      caller\n      swap1\n        /* \"contract/NewCryptoBullDogs.sol\":5076:5097  address(this).balance */\n      selfbalance\n        /* \"contract/NewCryptoBullDogs.sol\":5047:5098  payable(msg.sender).transfer(address(this).balance) */\n      dup1\n      iszero\n      0x08fc\n      mul\n      swap2\n      0x00\n      dup2\n      dup2\n      dup2\n        /* \"contract/NewCryptoBullDogs.sol\":5076:5097  address(this).balance */\n      dup6\n        /* \"contract/NewCryptoBullDogs.sol\":5055:5065  msg.sender */\n      dup9\n        /* \"contract/NewCryptoBullDogs.sol\":5047:5098  payable(msg.sender).transfer(address(this).balance) */\n      dup9\n      call\n      swap4\n      pop\n      pop\n      pop\n      pop\n      iszero\n      dup1\n      iszero\n      tag_253\n      jumpi\n      returndatasize\n      0x00\n      dup1\n      returndatacopy\n      revert(0x00, returndatasize)\n        /* \"erc721a/contracts/ERC721A.sol\":10656:10835  function safeTransferFrom(... */\n    tag_124:\n        /* \"erc721a/contracts/ERC721A.sol\":10789:10828  safeTransferFrom(from, to, tokenId, '') */\n      tag_274\n        /* \"erc721a/contracts/ERC721A.sol\":10806:10810  from */\n      dup4\n        /* \"erc721a/contracts/ERC721A.sol\":10812:10814  to */\n      dup4\n        /* \"erc721a/contracts/ERC721A.sol\":10816:10823  tokenId */\n      dup4\n        /* \"erc721a/contracts/ERC721A.sol\":10789:10828  safeTransferFrom(from, to, tokenId, '') */\n      mload(0x40)\n      dup1\n      0x20\n      add\n      0x40\n      mstore\n      dup1\n      0x00\n      dup2\n      mstore\n      pop\n        /* \"erc721a/contracts/ERC721A.sol\":10789:10805  safeTransferFrom */\n      tag_203\n        /* \"erc721a/contracts/ERC721A.sol\":10789:10828  safeTransferFrom(from, to, tokenId, '') */\n      jump\t// in\n        /* \"contract/NewCryptoBullDogs.sol\":615:650  string public   placeholderTokenUri */\n    tag_132:\n      0x0a\n      dup1\n      sload\n      tag_331\n      swap1\n      tag_257\n      jump\t// in\n    tag_331:\n      dup1\n      0x1f\n      add\n      0x20\n      dup1\n      swap2\n      div\n      mul\n      0x20\n      add\n      mload(0x40)\n      swap1\n      dup2\n      add\n      0x40\n      mstore\n      dup1\n      swap3\n      swap2\n      swap1\n      dup2\n      dup2\n      mstore\n      0x20\n      add\n      dup3\n      dup1\n      sload\n      tag_332\n      swap1\n      tag_257\n      jump\t// in\n    tag_332:\n      dup1\n      iszero\n      tag_333\n      jumpi\n      dup1\n      0x1f\n      lt\n      tag_334\n      jumpi\n      0x0100\n      dup1\n      dup4\n      sload\n      div\n      mul\n      dup4\n      mstore\n      swap2\n      0x20\n      add\n      swap2\n      jump(tag_333)\n    tag_334:\n      dup3\n      add\n      swap2\n      swap1\n      0x00\n      mstore\n      keccak256(0x00, 0x20)\n      swap1\n    tag_335:\n      dup2\n      sload\n      dup2\n      mstore\n      swap1\n      0x01\n      add\n      swap1\n      0x20\n      add\n      dup1\n      dup4\n      gt\n      tag_335\n      jumpi\n      dup3\n      swap1\n      sub\n      0x1f\n      and\n      dup3\n      add\n      swap2\n    tag_333:\n      pop\n      pop\n      pop\n      pop\n      pop\n      dup2\n      jump\t// out\n        /* \"contract/NewCryptoBullDogs.sol\":4717:4800  function toggleReveal() external onlyOwner{... */\n    tag_140:\n        /* \"@openzeppelin/contracts/access/Ownable.sol\":1108:1114  _owner */\n      and(sub(shl(0xa0, 0x01), 0x01), sload(0x08))\n        /* \"@openzeppelin/contracts/utils/Context.sol\":719:729  msg.sender */\n      caller\n        /* \"@openzeppelin/contracts/access/Ownable.sol\":1248:1271  owner() == _msgSender() */\n      eq\n        /* \"@openzeppelin/contracts/access/Ownable.sol\":1240:1308  require(owner() == _msgSender(), \"Ownable: caller is not the owner\") */\n      tag_339\n      jumpi\n      mload(0x40)\n      shl(0xe5, 0x461bcd)\n      dup2\n      mstore\n      0x04\n      add\n      tag_250\n      swap1\n      tag_251\n      jump\t// in\n    tag_339:\n        /* \"contract/NewCryptoBullDogs.sol\":4783:4793  isRevealed */\n      0x0b\n      dup1\n      sload\n      not(0xff)\n        /* \"contract/NewCryptoBullDogs.sol\":4769:4793  isRevealed = !isRevealed */\n      dup2\n      and\n        /* \"contract/NewCryptoBullDogs.sol\":4783:4793  isRevealed */\n      0xff\n      swap1\n      swap2\n      and\n        /* \"contract/NewCryptoBullDogs.sol\":4782:4793  !isRevealed */\n      iszero\n        /* \"contract/NewCryptoBullDogs.sol\":4769:4793  isRevealed = !isRevealed */\n      or\n      swap1\n      sstore\n        /* \"contract/NewCryptoBullDogs.sol\":4717:4800  function toggleReveal() external onlyOwner{... */\n      jump\t// out\n        /* \"erc721a/contracts/ERC721A.sol\":7955:8077  function ownerOf(uint256 tokenId) public view override returns (address) {... */\n    tag_144:\n        /* \"erc721a/contracts/ERC721A.sol\":8019:8026  address */\n      0x00\n        /* \"erc721a/contracts/ERC721A.sol\":8045:8065  ownershipOf(tokenId) */\n      tag_343\n        /* \"erc721a/contracts/ERC721A.sol\":8057:8064  tokenId */\n      dup3\n        /* \"erc721a/contracts/ERC721A.sol\":8045:8056  ownershipOf */\n      tag_344\n        /* \"erc721a/contracts/ERC721A.sol\":8045:8065  ownershipOf(tokenId) */\n      jump\t// in\n    tag_343:\n        /* \"erc721a/contracts/ERC721A.sol\":8045:8070  ownershipOf(tokenId).addr */\n      mload\n      swap3\n        /* \"erc721a/contracts/ERC721A.sol\":7955:8077  function ownerOf(uint256 tokenId) public view override returns (address) {... */\n      swap2\n      pop\n      pop\n      jump\t// out\n        /* \"erc721a/contracts/ERC721A.sol\":5202:5405  function balanceOf(address owner) public view override returns (uint256) {... */\n    tag_153:\n        /* \"erc721a/contracts/ERC721A.sol\":5266:5273  uint256 */\n      0x00\n      sub(shl(0xa0, 0x01), 0x01)\n        /* \"erc721a/contracts/ERC721A.sol\":5289:5308  owner == address(0) */\n      dup3\n      and\n        /* \"erc721a/contracts/ERC721A.sol\":5285:5345  if (owner == address(0)) revert BalanceQueryForZeroAddress() */\n      tag_346\n      jumpi\n        /* \"erc721a/contracts/ERC721A.sol\":5317:5345  BalanceQueryForZeroAddress() */\n      mload(0x40)\n      shl(0xe2, 0x23d3ad81)\n      dup2\n      mstore\n      0x04\n      add\n      mload(0x40)\n      dup1\n      swap2\n      sub\n      swap1\n      revert\n        /* \"erc721a/contracts/ERC721A.sol\":5285:5345  if (owner == address(0)) revert BalanceQueryForZeroAddress() */\n    tag_346:\n      pop\n      sub(shl(0xa0, 0x01), 0x01)\n        /* \"erc721a/contracts/ERC721A.sol\":5370:5389  _addressData[owner] */\n      and\n      0x00\n      swap1\n      dup2\n      mstore\n        /* \"erc721a/contracts/ERC721A.sol\":5370:5382  _addressData */\n      0x05\n        /* \"erc721a/contracts/ERC721A.sol\":5370:5389  _addressData[owner] */\n      0x20\n      mstore\n      0x40\n      swap1\n      keccak256\n        /* \"erc721a/contracts/ERC721A.sol\":5370:5397  _addressData[owner].balance */\n      sload\n      sub(shl(0x40, 0x01), 0x01)\n      and\n      swap1\n        /* \"erc721a/contracts/ERC721A.sol\":5202:5405  function balanceOf(address owner) public view override returns (uint256) {... */\n      jump\t// out\n        /* \"@openzeppelin/contracts/access/Ownable.sol\":1668:1769  function renounceOwnership() public virtual onlyOwner {... */\n    tag_157:\n        /* \"@openzeppelin/contracts/access/Ownable.sol\":1108:1114  _owner */\n      and(sub(shl(0xa0, 0x01), 0x01), sload(0x08))\n        /* \"@openzeppelin/contracts/utils/Context.sol\":719:729  msg.sender */\n      caller\n        /* \"@openzeppelin/contracts/access/Ownable.sol\":1248:1271  owner() == _msgSender() */\n      eq\n        /* \"@openzeppelin/contracts/access/Ownable.sol\":1240:1308  require(owner() == _msgSender(), \"Ownable: caller is not the owner\") */\n      tag_350\n      jumpi\n      mload(0x40)\n      shl(0xe5, 0x461bcd)\n      dup2\n      mstore\n      0x04\n      add\n      tag_250\n      swap1\n      tag_251\n      jump\t// in\n    tag_350:\n        /* \"@openzeppelin/contracts/access/Ownable.sol\":1732:1762  _transferOwnership(address(0)) */\n      tag_353\n        /* \"@openzeppelin/contracts/access/Ownable.sol\":1759:1760  0 */\n      0x00\n        /* \"@openzeppelin/contracts/access/Ownable.sol\":1732:1750  _transferOwnership */\n      tag_354\n        /* \"@openzeppelin/contracts/access/Ownable.sol\":1732:1762  _transferOwnership(address(0)) */\n      jump\t// in\n    tag_353:\n        /* \"@openzeppelin/contracts/access/Ownable.sol\":1668:1769  function renounceOwnership() public virtual onlyOwner {... */\n      jump\t// out\n        /* \"contract/NewCryptoBullDogs.sol\":4239:4342  function setMerkleRoot(bytes32 _merkleRoot) external onlyOwner{... */\n    tag_162:\n        /* \"@openzeppelin/contracts/access/Ownable.sol\":1108:1114  _owner */\n      and(sub(shl(0xa0, 0x01), 0x01), sload(0x08))\n        /* \"@openzeppelin/contracts/utils/Context.sol\":719:729  msg.sender */\n      caller\n        /* \"@openzeppelin/contracts/access/Ownable.sol\":1248:1271  owner() == _msgSender() */\n      eq\n        /* \"@openzeppelin/contracts/access/Ownable.sol\":1240:1308  require(owner() == _msgSender(), \"Ownable: caller is not the owner\") */\n      tag_358\n      jumpi\n      mload(0x40)\n      shl(0xe5, 0x461bcd)\n      dup2\n      mstore\n      0x04\n      add\n      tag_250\n      swap1\n      tag_251\n      jump\t// in\n    tag_358:\n        /* \"contract/NewCryptoBullDogs.sol\":4311:4321  merkleRoot */\n      0x0c\n        /* \"contract/NewCryptoBullDogs.sol\":4311:4335  merkleRoot = _merkleRoot */\n      sstore\n        /* \"contract/NewCryptoBullDogs.sol\":4239:4342  function setMerkleRoot(bytes32 _merkleRoot) external onlyOwner{... */\n      jump\t// out\n        /* \"contract/NewCryptoBullDogs.sol\":3571:3969  function walletOf() external view returns(uint256[] memory){... */\n    tag_165:\n        /* \"contract/NewCryptoBullDogs.sol\":3613:3629  uint256[] memory */\n      0x60\n        /* \"contract/NewCryptoBullDogs.sol\":3657:3667  msg.sender */\n      caller\n        /* \"contract/NewCryptoBullDogs.sol\":3640:3654  address _owner */\n      0x00\n        /* \"contract/NewCryptoBullDogs.sol\":3704:3721  balanceOf(_owner) */\n      tag_362\n        /* \"contract/NewCryptoBullDogs.sol\":3657:3667  msg.sender */\n      dup3\n        /* \"contract/NewCryptoBullDogs.sol\":3704:3713  balanceOf */\n      tag_153\n        /* \"contract/NewCryptoBullDogs.sol\":3704:3721  balanceOf(_owner) */\n      jump\t// in\n    tag_362:\n        /* \"contract/NewCryptoBullDogs.sol\":3677:3721  uint256 numberOfOwnedNFT = balanceOf(_owner) */\n      swap1\n      pop\n        /* \"contract/NewCryptoBullDogs.sol\":3731:3756  uint256[] memory ownerIds */\n      0x00\n        /* \"contract/NewCryptoBullDogs.sol\":3773:3789  numberOfOwnedNFT */\n      dup2\n      sub(shl(0x40, 0x01), 0x01)\n        /* \"contract/NewCryptoBullDogs.sol\":3759:3790  new uint256[](numberOfOwnedNFT) */\n      dup2\n      gt\n      iszero\n      tag_364\n      jumpi\n      tag_364\n      tag_365\n      jump\t// in\n    tag_364:\n      mload(0x40)\n      swap1\n      dup1\n      dup3\n      mstore\n      dup1\n      0x20\n      mul\n      0x20\n      add\n      dup3\n      add\n      0x40\n      mstore\n      dup1\n      iszero\n      tag_366\n      jumpi\n      dup2\n      0x20\n      add\n      0x20\n      dup3\n      mul\n      dup1\n      calldatasize\n      dup4\n      calldatacopy\n      add\n      swap1\n      pop\n    tag_366:\n      pop\n        /* \"contract/NewCryptoBullDogs.sol\":3731:3790  uint256[] memory ownerIds = new uint256[](numberOfOwnedNFT) */\n      swap1\n      pop\n        /* \"contract/NewCryptoBullDogs.sol\":3805:3818  uint256 index */\n      0x00\n        /* \"contract/NewCryptoBullDogs.sol\":3801:3937  for(uint256 index = 0; index < numberOfOwnedNFT; index++){... */\n    tag_367:\n        /* \"contract/NewCryptoBullDogs.sol\":3832:3848  numberOfOwnedNFT */\n      dup3\n        /* \"contract/NewCryptoBullDogs.sol\":3824:3829  index */\n      dup2\n        /* \"contract/NewCryptoBullDogs.sol\":3824:3848  index < numberOfOwnedNFT */\n      lt\n        /* \"contract/NewCryptoBullDogs.sol\":3801:3937  for(uint256 index = 0; index < numberOfOwnedNFT; index++){... */\n      iszero\n      tag_368\n      jumpi\n        /* \"contract/NewCryptoBullDogs.sol\":3850:3857  index++ */\n      dup1\n      tag_370\n      dup2\n      tag_371\n      jump\t// in\n    tag_370:\n      swap2\n      pop\n      pop\n        /* \"contract/NewCryptoBullDogs.sol\":3801:3937  for(uint256 index = 0; index < numberOfOwnedNFT; index++){... */\n      jump(tag_367)\n    tag_368:\n      pop\n        /* \"contract/NewCryptoBullDogs.sol\":3954:3962  ownerIds */\n      swap4\n        /* \"contract/NewCryptoBullDogs.sol\":3571:3969  function walletOf() external view returns(uint256[] memory){... */\n      swap3\n      pop\n      pop\n      pop\n      jump\t// out\n        /* \"contract/NewCryptoBullDogs.sol\":4522:4618  function toggleWhiteListSale() external onlyOwner{... */\n    tag_178:\n        /* \"@openzeppelin/contracts/access/Ownable.sol\":1108:1114  _owner */\n      and(sub(shl(0xa0, 0x01), 0x01), sload(0x08))\n        /* \"@openzeppelin/contracts/utils/Context.sol\":719:729  msg.sender */\n      caller\n        /* \"@openzeppelin/contracts/access/Ownable.sol\":1248:1271  owner() == _msgSender() */\n      eq\n        /* \"@openzeppelin/contracts/access/Ownable.sol\":1240:1308  require(owner() == _msgSender(), \"Ownable: caller is not the owner\") */\n      tag_375\n      jumpi\n      mload(0x40)\n      shl(0xe5, 0x461bcd)\n      dup2\n      mstore\n      0x04\n      add\n      tag_250\n      swap1\n      tag_251\n      jump\t// in\n    tag_375:\n        /* \"contract/NewCryptoBullDogs.sol\":4598:4611  whiteListSale */\n      0x0b\n      dup1\n      sload\n      not(0xff0000)\n        /* \"contract/NewCryptoBullDogs.sol\":4581:4611  whiteListSale = !whiteListSale */\n      dup2\n      and\n        /* \"contract/NewCryptoBullDogs.sol\":4598:4611  whiteListSale */\n      0x010000\n      swap2\n      dup3\n      swap1\n      div\n      0xff\n      and\n        /* \"contract/NewCryptoBullDogs.sol\":4597:4611  !whiteListSale */\n      iszero\n        /* \"contract/NewCryptoBullDogs.sol\":4581:4611  whiteListSale = !whiteListSale */\n      swap1\n      swap2\n      mul\n      or\n      swap1\n      sstore\n        /* \"contract/NewCryptoBullDogs.sol\":4522:4618  function toggleWhiteListSale() external onlyOwner{... */\n      jump\t// out\n        /* \"erc721a/contracts/ERC721A.sol\":8301:8403  function symbol() public view virtual override returns (string memory) {... */\n    tag_185:\n        /* \"erc721a/contracts/ERC721A.sol\":8357:8370  string memory */\n      0x60\n        /* \"erc721a/contracts/ERC721A.sol\":8389:8396  _symbol */\n      0x03\n        /* \"erc721a/contracts/ERC721A.sol\":8382:8396  return _symbol */\n      dup1\n      sload\n      tag_256\n      swap1\n      tag_257\n      jump\t// in\n        /* \"contract/NewCryptoBullDogs.sol\":1269:1810  function mint(uint256 _quantity) external payable callerIsUser{... */\n    tag_189:\n        /* \"contract/NewCryptoBullDogs.sol\":1169:1178  tx.origin */\n      origin\n        /* \"contract/NewCryptoBullDogs.sol\":1182:1192  msg.sender */\n      caller\n        /* \"contract/NewCryptoBullDogs.sol\":1169:1192  tx.origin == msg.sender */\n      eq\n        /* \"contract/NewCryptoBullDogs.sol\":1161:1245  require(tx.origin == msg.sender, \"CryptoBullDogs :: Cannot be called by a contract\") */\n      tag_386\n      jumpi\n      mload(0x40)\n      shl(0xe5, 0x461bcd)\n      dup2\n      mstore\n      0x04\n      add\n      tag_250\n      swap1\n      tag_285\n      jump\t// in\n    tag_386:\n        /* \"contract/NewCryptoBullDogs.sol\":1349:1359  publicSale */\n      sload(0x0b)\n      0x0100\n      swap1\n      div\n      0xff\n      and\n        /* \"contract/NewCryptoBullDogs.sol\":1341:1397  require(publicSale, \"CryptoBullDogs :: Not Yet Active.\") */\n      tag_389\n      jumpi\n      mload(0x40)\n      shl(0xe5, 0x461bcd)\n      dup2\n      mstore\n        /* \"#utility.yul\":11998:12000   */\n      0x20\n        /* \"contract/NewCryptoBullDogs.sol\":1341:1397  require(publicSale, \"CryptoBullDogs :: Not Yet Active.\") */\n      0x04\n      dup3\n      add\n        /* \"#utility.yul\":11980:12001   */\n      mstore\n        /* \"#utility.yul\":12037:12039   */\n      0x21\n        /* \"#utility.yul\":12017:12035   */\n      0x24\n      dup3\n      add\n        /* \"#utility.yul\":12010:12040   */\n      mstore\n        /* \"#utility.yul\":12076:12110   */\n      0x43727970746f42756c6c446f6773203a3a204e6f742059657420416374697665\n        /* \"#utility.yul\":12056:12074   */\n      0x44\n      dup3\n      add\n        /* \"#utility.yul\":12049:12111   */\n      mstore\n      shl(0xf9, 0x17)\n        /* \"#utility.yul\":12127:12145   */\n      0x64\n      dup3\n      add\n        /* \"#utility.yul\":12120:12151   */\n      mstore\n        /* \"#utility.yul\":12168:12187   */\n      0x84\n      add\n        /* \"contract/NewCryptoBullDogs.sol\":1341:1397  require(publicSale, \"CryptoBullDogs :: Not Yet Active.\") */\n      tag_250\n        /* \"#utility.yul\":11796:12193   */\n      jump\n        /* \"contract/NewCryptoBullDogs.sol\":1341:1397  require(publicSale, \"CryptoBullDogs :: Not Yet Active.\") */\n    tag_389:\n        /* \"contract/NewCryptoBullDogs.sol\":346:350  2222 */\n      0x08ae\n        /* \"contract/NewCryptoBullDogs.sol\":1432:1441  _quantity */\n      dup2\n        /* \"contract/NewCryptoBullDogs.sol\":1416:1429  totalSupply() */\n      tag_392\n        /* \"erc721a/contracts/ERC721A.sol\":4364:4376  _burnCounter */\n      sload(0x01)\n        /* \"erc721a/contracts/ERC721A.sol\":4158:4165  uint256 */\n      0x00\n        /* \"erc721a/contracts/ERC721A.sol\":4348:4361  _currentIndex */\n      sload\n        /* \"erc721a/contracts/ERC721A.sol\":4348:4376  _currentIndex - _burnCounter */\n      sub\n      swap1\n        /* \"erc721a/contracts/ERC721A.sol\":4114:4411  function totalSupply() public view returns (uint256) {... */\n      jump\n        /* \"contract/NewCryptoBullDogs.sol\":1416:1429  totalSupply() */\n    tag_392:\n        /* \"contract/NewCryptoBullDogs.sol\":1416:1441  totalSupply() + _quantity */\n      tag_393\n      swap2\n      swap1\n      tag_292\n      jump\t// in\n    tag_393:\n        /* \"contract/NewCryptoBullDogs.sol\":1415:1456  (totalSupply() + _quantity) <= MAX_SUPPLY */\n      gt\n      iszero\n        /* \"contract/NewCryptoBullDogs.sol\":1407:1496  require((totalSupply() + _quantity) <= MAX_SUPPLY, \"CryptoBullDogs :: Beyond Max Supply\") */\n      tag_394\n      jumpi\n      mload(0x40)\n      shl(0xe5, 0x461bcd)\n      dup2\n      mstore\n        /* \"#utility.yul\":12400:12402   */\n      0x20\n        /* \"contract/NewCryptoBullDogs.sol\":1407:1496  require((totalSupply() + _quantity) <= MAX_SUPPLY, \"CryptoBullDogs :: Beyond Max Supply\") */\n      0x04\n      dup3\n      add\n        /* \"#utility.yul\":12382:12403   */\n      mstore\n        /* \"#utility.yul\":12439:12441   */\n      0x23\n        /* \"#utility.yul\":12419:12437   */\n      0x24\n      dup3\n      add\n        /* \"#utility.yul\":12412:12442   */\n      mstore\n        /* \"#utility.yul\":12478:12512   */\n      0x43727970746f42756c6c446f6773203a3a204265796f6e64204d617820537570\n        /* \"#utility.yul\":12458:12476   */\n      0x44\n      dup3\n      add\n        /* \"#utility.yul\":12451:12513   */\n      mstore\n      shl(0xe8, 0x706c79)\n        /* \"#utility.yul\":12529:12547   */\n      0x64\n      dup3\n      add\n        /* \"#utility.yul\":12522:12555   */\n      mstore\n        /* \"#utility.yul\":12572:12591   */\n      0x84\n      add\n        /* \"contract/NewCryptoBullDogs.sol\":1407:1496  require((totalSupply() + _quantity) <= MAX_SUPPLY, \"CryptoBullDogs :: Beyond Max Supply\") */\n      tag_250\n        /* \"#utility.yul\":12198:12597   */\n      jump\n        /* \"contract/NewCryptoBullDogs.sol\":1407:1496  require((totalSupply() + _quantity) <= MAX_SUPPLY, \"CryptoBullDogs :: Beyond Max Supply\") */\n    tag_394:\n        /* \"contract/NewCryptoBullDogs.sol\":1531:1541  msg.sender */\n      caller\n        /* \"contract/NewCryptoBullDogs.sol\":1515:1542  totalPublicMint[msg.sender] */\n      0x00\n      swap1\n      dup2\n      mstore\n        /* \"contract/NewCryptoBullDogs.sol\":1515:1530  totalPublicMint */\n      0x0d\n        /* \"contract/NewCryptoBullDogs.sol\":1515:1542  totalPublicMint[msg.sender] */\n      0x20\n      mstore\n      0x40\n      swap1\n      keccak256\n      sload\n        /* \"contract/NewCryptoBullDogs.sol\":398:400  10 */\n      0x0a\n      swap1\n        /* \"contract/NewCryptoBullDogs.sol\":1515:1553  totalPublicMint[msg.sender] +_quantity */\n      tag_397\n      swap1\n        /* \"contract/NewCryptoBullDogs.sol\":1544:1553  _quantity */\n      dup4\n      swap1\n        /* \"contract/NewCryptoBullDogs.sol\":1515:1553  totalPublicMint[msg.sender] +_quantity */\n      tag_292\n      jump\t// in\n    tag_397:\n        /* \"contract/NewCryptoBullDogs.sol\":1514:1573  (totalPublicMint[msg.sender] +_quantity) <= MAX_PUBLIC_MINT */\n      gt\n      iszero\n        /* \"contract/NewCryptoBullDogs.sol\":1506:1619  require((totalPublicMint[msg.sender] +_quantity) <= MAX_PUBLIC_MINT, \"CryptoBullDogs :: Already minted 3 times!\") */\n      tag_398\n      jumpi\n      mload(0x40)\n      shl(0xe5, 0x461bcd)\n      dup2\n      mstore\n        /* \"#utility.yul\":12804:12806   */\n      0x20\n        /* \"contract/NewCryptoBullDogs.sol\":1506:1619  require((totalPublicMint[msg.sender] +_quantity) <= MAX_PUBLIC_MINT, \"CryptoBullDogs :: Already minted 3 times!\") */\n      0x04\n      dup3\n      add\n        /* \"#utility.yul\":12786:12807   */\n      mstore\n        /* \"#utility.yul\":12843:12845   */\n      0x29\n        /* \"#utility.yul\":12823:12841   */\n      0x24\n      dup3\n      add\n        /* \"#utility.yul\":12816:12846   */\n      mstore\n        /* \"#utility.yul\":12882:12916   */\n      0x43727970746f42756c6c446f6773203a3a20416c7265616479206d696e746564\n        /* \"#utility.yul\":12862:12880   */\n      0x44\n      dup3\n      add\n        /* \"#utility.yul\":12855:12917   */\n      mstore\n      shl(0xb8, 0x20332074696d657321)\n        /* \"#utility.yul\":12933:12951   */\n      0x64\n      dup3\n      add\n        /* \"#utility.yul\":12926:12965   */\n      mstore\n        /* \"#utility.yul\":12982:13001   */\n      0x84\n      add\n        /* \"contract/NewCryptoBullDogs.sol\":1506:1619  require((totalPublicMint[msg.sender] +_quantity) <= MAX_PUBLIC_MINT, \"CryptoBullDogs :: Already minted 3 times!\") */\n      tag_250\n        /* \"#utility.yul\":12602:13007   */\n      jump\n        /* \"contract/NewCryptoBullDogs.sol\":1506:1619  require((totalPublicMint[msg.sender] +_quantity) <= MAX_PUBLIC_MINT, \"CryptoBullDogs :: Already minted 3 times!\") */\n    tag_398:\n        /* \"contract/NewCryptoBullDogs.sol\":1651:1680  PUBLIC_SALE_PRICE * _quantity */\n      tag_401\n        /* \"contract/NewCryptoBullDogs.sol\":1671:1680  _quantity */\n      dup2\n        /* \"contract/NewCryptoBullDogs.sol\":503:512  .04 ether */\n      0x8e1bc9bf040000\n        /* \"contract/NewCryptoBullDogs.sol\":1651:1680  PUBLIC_SALE_PRICE * _quantity */\n      tag_301\n      jump\t// in\n    tag_401:\n        /* \"contract/NewCryptoBullDogs.sol\":1637:1646  msg.value */\n      callvalue\n        /* \"contract/NewCryptoBullDogs.sol\":1637:1681  msg.value >= (PUBLIC_SALE_PRICE * _quantity) */\n      lt\n      iszero\n        /* \"contract/NewCryptoBullDogs.sol\":1629:1710  require(msg.value >= (PUBLIC_SALE_PRICE * _quantity), \"CryptoBullDogs :: Below \") */\n      tag_402\n      jumpi\n      mload(0x40)\n      shl(0xe5, 0x461bcd)\n      dup2\n      mstore\n        /* \"#utility.yul\":13214:13216   */\n      0x20\n        /* \"contract/NewCryptoBullDogs.sol\":1629:1710  require(msg.value >= (PUBLIC_SALE_PRICE * _quantity), \"CryptoBullDogs :: Below \") */\n      0x04\n      dup3\n      add\n        /* \"#utility.yul\":13196:13217   */\n      mstore\n        /* \"#utility.yul\":13253:13255   */\n      0x18\n        /* \"#utility.yul\":13233:13251   */\n      0x24\n      dup3\n      add\n        /* \"#utility.yul\":13226:13256   */\n      mstore\n        /* \"#utility.yul\":13292:13318   */\n      0x43727970746f42756c6c446f6773203a3a2042656c6f77200000000000000000\n        /* \"#utility.yul\":13272:13290   */\n      0x44\n      dup3\n      add\n        /* \"#utility.yul\":13265:13319   */\n      mstore\n        /* \"#utility.yul\":13336:13354   */\n      0x64\n      add\n        /* \"contract/NewCryptoBullDogs.sol\":1629:1710  require(msg.value >= (PUBLIC_SALE_PRICE * _quantity), \"CryptoBullDogs :: Below \") */\n      tag_250\n        /* \"#utility.yul\":13012:13360   */\n      jump\n        /* \"contract/NewCryptoBullDogs.sol\":1629:1710  require(msg.value >= (PUBLIC_SALE_PRICE * _quantity), \"CryptoBullDogs :: Below \") */\n    tag_402:\n        /* \"contract/NewCryptoBullDogs.sol\":1737:1747  msg.sender */\n      caller\n        /* \"contract/NewCryptoBullDogs.sol\":1721:1748  totalPublicMint[msg.sender] */\n      0x00\n      swap1\n      dup2\n      mstore\n        /* \"contract/NewCryptoBullDogs.sol\":1721:1736  totalPublicMint */\n      0x0d\n        /* \"contract/NewCryptoBullDogs.sol\":1721:1748  totalPublicMint[msg.sender] */\n      0x20\n      mstore\n      0x40\n      dup2\n      keccak256\n        /* \"contract/NewCryptoBullDogs.sol\":1721:1761  totalPublicMint[msg.sender] += _quantity */\n      dup1\n      sload\n        /* \"contract/NewCryptoBullDogs.sol\":1752:1761  _quantity */\n      dup4\n      swap3\n        /* \"contract/NewCryptoBullDogs.sol\":1721:1748  totalPublicMint[msg.sender] */\n      swap1\n        /* \"contract/NewCryptoBullDogs.sol\":1721:1761  totalPublicMint[msg.sender] += _quantity */\n      tag_405\n      swap1\n        /* \"contract/NewCryptoBullDogs.sol\":1752:1761  _quantity */\n      dup5\n      swap1\n        /* \"contract/NewCryptoBullDogs.sol\":1721:1761  totalPublicMint[msg.sender] += _quantity */\n      tag_292\n      jump\t// in\n    tag_405:\n      swap1\n      swap2\n      sstore\n      pop\n        /* \"contract/NewCryptoBullDogs.sol\":1771:1803  _safeMint(msg.sender, _quantity) */\n      tag_406\n      swap1\n      pop\n        /* \"contract/NewCryptoBullDogs.sol\":1781:1791  msg.sender */\n      caller\n        /* \"contract/NewCryptoBullDogs.sol\":1793:1802  _quantity */\n      dup3\n        /* \"contract/NewCryptoBullDogs.sol\":1771:1780  _safeMint */\n      tag_314\n        /* \"contract/NewCryptoBullDogs.sol\":1771:1803  _safeMint(msg.sender, _quantity) */\n      jump\t// in\n    tag_406:\n        /* \"contract/NewCryptoBullDogs.sol\":1269:1810  function mint(uint256 _quantity) external payable callerIsUser{... */\n      pop\n      jump\t// out\n        /* \"erc721a/contracts/ERC721A.sol\":9862:10136  function setApprovalForAll(address operator, bool approved) public override {... */\n    tag_194:\n      sub(shl(0xa0, 0x01), 0x01)\n        /* \"erc721a/contracts/ERC721A.sol\":9952:9976  operator == _msgSender() */\n      dup3\n      and\n        /* \"@openzeppelin/contracts/utils/Context.sol\":719:729  msg.sender */\n      caller\n        /* \"erc721a/contracts/ERC721A.sol\":9952:9976  operator == _msgSender() */\n      eq\n        /* \"erc721a/contracts/ERC721A.sol\":9948:10002  if (operator == _msgSender()) revert ApproveToCaller() */\n      iszero\n      tag_409\n      jumpi\n        /* \"erc721a/contracts/ERC721A.sol\":9985:10002  ApproveToCaller() */\n      mload(0x40)\n      shl(0xe0, 0xb06307db)\n      dup2\n      mstore\n      0x04\n      add\n      mload(0x40)\n      dup1\n      swap2\n      sub\n      swap1\n      revert\n        /* \"erc721a/contracts/ERC721A.sol\":9948:10002  if (operator == _msgSender()) revert ApproveToCaller() */\n    tag_409:\n        /* \"@openzeppelin/contracts/utils/Context.sol\":719:729  msg.sender */\n      caller\n        /* \"erc721a/contracts/ERC721A.sol\":10013:10045  _operatorApprovals[_msgSender()] */\n      0x00\n      dup2\n      dup2\n      mstore\n        /* \"erc721a/contracts/ERC721A.sol\":10013:10031  _operatorApprovals */\n      0x07\n        /* \"erc721a/contracts/ERC721A.sol\":10013:10045  _operatorApprovals[_msgSender()] */\n      0x20\n      swap1\n      dup2\n      mstore\n      0x40\n      dup1\n      dup4\n      keccak256\n      sub(shl(0xa0, 0x01), 0x01)\n        /* \"erc721a/contracts/ERC721A.sol\":10013:10055  _operatorApprovals[_msgSender()][operator] */\n      dup8\n      and\n      dup1\n      dup6\n      mstore\n      swap1\n      dup4\n      mstore\n      swap3\n      dup2\n      swap1\n      keccak256\n        /* \"erc721a/contracts/ERC721A.sol\":10013:10066  _operatorApprovals[_msgSender()][operator] = approved */\n      dup1\n      sload\n      not(0xff)\n      and\n      dup7\n      iszero\n      iszero\n      swap1\n      dup2\n      or\n      swap1\n      swap2\n      sstore\n        /* \"erc721a/contracts/ERC721A.sol\":10081:10129  ApprovalForAll(_msgSender(), operator, approved) */\n      swap1\n      mload\n        /* \"#utility.yul\":540:581   */\n      swap1\n      dup2\n      mstore\n        /* \"erc721a/contracts/ERC721A.sol\":10013:10055  _operatorApprovals[_msgSender()][operator] */\n      swap2\n      swap3\n        /* \"@openzeppelin/contracts/utils/Context.sol\":719:729  msg.sender */\n      swap2\n        /* \"erc721a/contracts/ERC721A.sol\":10081:10129  ApprovalForAll(_msgSender(), operator, approved) */\n      0x17307eab39ab6107e8899845ad3d59bd9653f200f220920489ca2b5937696c31\n      swap2\n        /* \"#utility.yul\":513:531   */\n      add\n        /* \"erc721a/contracts/ERC721A.sol\":10081:10129  ApprovalForAll(_msgSender(), operator, approved) */\n      mload(0x40)\n      dup1\n      swap2\n      sub\n      swap1\n      log3\n        /* \"erc721a/contracts/ERC721A.sol\":9862:10136  function setApprovalForAll(address operator, bool approved) public override {... */\n      pop\n      pop\n      jump\t// out\n        /* \"contract/NewCryptoBullDogs.sol\":4093:4233  function setPlaceHolderUri(string memory _placeholderTokenUri) external onlyOwner{... */\n    tag_198:\n        /* \"@openzeppelin/contracts/access/Ownable.sol\":1108:1114  _owner */\n      and(sub(shl(0xa0, 0x01), 0x01), sload(0x08))\n        /* \"@openzeppelin/contracts/utils/Context.sol\":719:729  msg.sender */\n      caller\n        /* \"@openzeppelin/contracts/access/Ownable.sol\":1248:1271  owner() == _msgSender() */\n      eq\n        /* \"@openzeppelin/contracts/access/Ownable.sol\":1240:1308  require(owner() == _msgSender(), \"Ownable: caller is not the owner\") */\n      tag_416\n      jumpi\n      mload(0x40)\n      shl(0xe5, 0x461bcd)\n      dup2\n      mstore\n      0x04\n      add\n      tag_250\n      swap1\n      tag_251\n      jump\t// in\n    tag_416:\n        /* \"contract/NewCryptoBullDogs.sol\":4184:4226  placeholderTokenUri = _placeholderTokenUri */\n      dup1\n      mload\n      tag_253\n      swap1\n        /* \"contract/NewCryptoBullDogs.sol\":4184:4203  placeholderTokenUri */\n      0x0a\n      swap1\n        /* \"contract/NewCryptoBullDogs.sol\":4184:4226  placeholderTokenUri = _placeholderTokenUri */\n      0x20\n      dup5\n      add\n      swap1\n      tag_254\n      jump\t// in\n        /* \"erc721a/contracts/ERC721A.sol\":10901:11260  function safeTransferFrom(... */\n    tag_203:\n        /* \"erc721a/contracts/ERC721A.sol\":11062:11090  _transfer(from, to, tokenId) */\n      tag_421\n        /* \"erc721a/contracts/ERC721A.sol\":11072:11076  from */\n      dup5\n        /* \"erc721a/contracts/ERC721A.sol\":11078:11080  to */\n      dup5\n        /* \"erc721a/contracts/ERC721A.sol\":11082:11089  tokenId */\n      dup5\n        /* \"erc721a/contracts/ERC721A.sol\":11062:11071  _transfer */\n      tag_281\n        /* \"erc721a/contracts/ERC721A.sol\":11062:11090  _transfer(from, to, tokenId) */\n      jump\t// in\n    tag_421:\n      sub(shl(0xa0, 0x01), 0x01)\n        /* \"erc721a/contracts/ERC721A.sol\":11104:11117  to.isContract */\n      dup4\n      and\n        /* \"@openzeppelin/contracts/utils/Address.sol\":1465:1484  account.code.length */\n      extcodesize\n        /* \"@openzeppelin/contracts/utils/Address.sol\":1465:1488  account.code.length > 0 */\n      iszero\n      iszero\n        /* \"erc721a/contracts/ERC721A.sol\":11104:11180  to.isContract() && !_checkContractOnERC721Received(from, to, tokenId, _data) */\n      dup1\n      iszero\n      tag_424\n      jumpi\n      pop\n        /* \"erc721a/contracts/ERC721A.sol\":11124:11180  _checkContractOnERC721Received(from, to, tokenId, _data) */\n      tag_425\n        /* \"erc721a/contracts/ERC721A.sol\":11155:11159  from */\n      dup5\n        /* \"erc721a/contracts/ERC721A.sol\":11161:11163  to */\n      dup5\n        /* \"erc721a/contracts/ERC721A.sol\":11165:11172  tokenId */\n      dup5\n        /* \"erc721a/contracts/ERC721A.sol\":11174:11179  _data */\n      dup5\n        /* \"erc721a/contracts/ERC721A.sol\":11124:11154  _checkContractOnERC721Received */\n      tag_426\n        /* \"erc721a/contracts/ERC721A.sol\":11124:11180  _checkContractOnERC721Received(from, to, tokenId, _data) */\n      jump\t// in\n    tag_425:\n        /* \"erc721a/contracts/ERC721A.sol\":11123:11180  !_checkContractOnERC721Received(from, to, tokenId, _data) */\n      iszero\n        /* \"erc721a/contracts/ERC721A.sol\":11104:11180  to.isContract() && !_checkContractOnERC721Received(from, to, tokenId, _data) */\n    tag_424:\n        /* \"erc721a/contracts/ERC721A.sol\":11100:11254  if (to.isContract() && !_checkContractOnERC721Received(from, to, tokenId, _data)) {... */\n      iszero\n      tag_427\n      jumpi\n        /* \"erc721a/contracts/ERC721A.sol\":11203:11243  TransferToNonERC721ReceiverImplementer() */\n      mload(0x40)\n      shl(0xe1, 0x68d2bf6b)\n      dup2\n      mstore\n      0x04\n      add\n      mload(0x40)\n      dup1\n      swap2\n      sub\n      swap1\n      revert\n        /* \"erc721a/contracts/ERC721A.sol\":11100:11254  if (to.isContract() && !_checkContractOnERC721Received(from, to, tokenId, _data)) {... */\n    tag_427:\n        /* \"erc721a/contracts/ERC721A.sol\":10901:11260  function safeTransferFrom(... */\n      pop\n      pop\n      pop\n      pop\n      jump\t// out\n        /* \"contract/NewCryptoBullDogs.sol\":2680:2859  function teamMint() external onlyOwner{... */\n    tag_206:\n        /* \"@openzeppelin/contracts/access/Ownable.sol\":1108:1114  _owner */\n      and(sub(shl(0xa0, 0x01), 0x01), sload(0x08))\n        /* \"@openzeppelin/contracts/utils/Context.sol\":719:729  msg.sender */\n      caller\n        /* \"@openzeppelin/contracts/access/Ownable.sol\":1248:1271  owner() == _msgSender() */\n      eq\n        /* \"@openzeppelin/contracts/access/Ownable.sol\":1240:1308  require(owner() == _msgSender(), \"Ownable: caller is not the owner\") */\n      tag_431\n      jumpi\n      mload(0x40)\n      shl(0xe5, 0x461bcd)\n      dup2\n      mstore\n      0x04\n      add\n      tag_250\n      swap1\n      tag_251\n      jump\t// in\n    tag_431:\n        /* \"contract/NewCryptoBullDogs.sol\":2737:2747  teamMinted */\n      sload(0x0b)\n      0x0100000000\n      swap1\n      div\n      0xff\n      and\n        /* \"contract/NewCryptoBullDogs.sol\":2736:2747  !teamMinted */\n      iszero\n        /* \"contract/NewCryptoBullDogs.sol\":2728:2789  require(!teamMinted, \"CryptoBullDogs :: Team already minted\") */\n      tag_434\n      jumpi\n      mload(0x40)\n      shl(0xe5, 0x461bcd)\n      dup2\n      mstore\n        /* \"#utility.yul\":13567:13569   */\n      0x20\n        /* \"contract/NewCryptoBullDogs.sol\":2728:2789  require(!teamMinted, \"CryptoBullDogs :: Team already minted\") */\n      0x04\n      dup3\n      add\n        /* \"#utility.yul\":13549:13570   */\n      mstore\n        /* \"#utility.yul\":13606:13608   */\n      0x25\n        /* \"#utility.yul\":13586:13604   */\n      0x24\n      dup3\n      add\n        /* \"#utility.yul\":13579:13609   */\n      mstore\n        /* \"#utility.yul\":13645:13679   */\n      0x43727970746f42756c6c446f6773203a3a205465616d20616c7265616479206d\n        /* \"#utility.yul\":13625:13643   */\n      0x44\n      dup3\n      add\n        /* \"#utility.yul\":13618:13680   */\n      mstore\n      shl(0xda, 0x1a5b9d1959)\n        /* \"#utility.yul\":13696:13714   */\n      0x64\n      dup3\n      add\n        /* \"#utility.yul\":13689:13724   */\n      mstore\n        /* \"#utility.yul\":13741:13760   */\n      0x84\n      add\n        /* \"contract/NewCryptoBullDogs.sol\":2728:2789  require(!teamMinted, \"CryptoBullDogs :: Team already minted\") */\n      tag_250\n        /* \"#utility.yul\":13365:13766   */\n      jump\n        /* \"contract/NewCryptoBullDogs.sol\":2728:2789  require(!teamMinted, \"CryptoBullDogs :: Team already minted\") */\n    tag_434:\n        /* \"contract/NewCryptoBullDogs.sol\":2799:2809  teamMinted */\n      0x0b\n        /* \"contract/NewCryptoBullDogs.sol\":2799:2816  teamMinted = true */\n      dup1\n      sload\n      not(0xff00000000)\n      and\n      0x0100000000\n      or\n      swap1\n      sstore\n        /* \"contract/NewCryptoBullDogs.sol\":2826:2852  _safeMint(msg.sender, 620) */\n      tag_353\n        /* \"contract/NewCryptoBullDogs.sol\":2836:2846  msg.sender */\n      caller\n        /* \"contract/NewCryptoBullDogs.sol\":2848:2851  620 */\n      0x026c\n        /* \"contract/NewCryptoBullDogs.sol\":2826:2835  _safeMint */\n      tag_314\n        /* \"contract/NewCryptoBullDogs.sol\":2826:2852  _safeMint(msg.sender, 620) */\n      jump\t// in\n        /* \"contract/NewCryptoBullDogs.sol\":4444:4516  function togglePause() external onlyOwner{... */\n    tag_217:\n        /* \"@openzeppelin/contracts/access/Ownable.sol\":1108:1114  _owner */\n      and(sub(shl(0xa0, 0x01), 0x01), sload(0x08))\n        /* \"@openzeppelin/contracts/utils/Context.sol\":719:729  msg.sender */\n      caller\n        /* \"@openzeppelin/contracts/access/Ownable.sol\":1248:1271  owner() == _msgSender() */\n      eq\n        /* \"@openzeppelin/contracts/access/Ownable.sol\":1240:1308  require(owner() == _msgSender(), \"Ownable: caller is not the owner\") */\n      tag_441\n      jumpi\n      mload(0x40)\n      shl(0xe5, 0x461bcd)\n      dup2\n      mstore\n      0x04\n      add\n      tag_250\n      swap1\n      tag_251\n      jump\t// in\n    tag_441:\n        /* \"contract/NewCryptoBullDogs.sol\":4504:4509  pause */\n      0x0b\n      dup1\n      sload\n      not(0xff000000)\n        /* \"contract/NewCryptoBullDogs.sol\":4495:4509  pause = !pause */\n      dup2\n      and\n        /* \"contract/NewCryptoBullDogs.sol\":4504:4509  pause */\n      0x01000000\n      swap2\n      dup3\n      swap1\n      div\n      0xff\n      and\n        /* \"contract/NewCryptoBullDogs.sol\":4503:4509  !pause */\n      iszero\n        /* \"contract/NewCryptoBullDogs.sol\":4495:4509  pause = !pause */\n      swap1\n      swap2\n      mul\n      or\n      swap1\n      sstore\n        /* \"contract/NewCryptoBullDogs.sol\":4444:4516  function togglePause() external onlyOwner{... */\n      jump\t// out\n        /* \"contract/NewCryptoBullDogs.sol\":3017:3480  function tokenURI(uint256 tokenId) public view virtual override returns (string memory) {... */\n    tag_221:\n        /* \"contract/NewCryptoBullDogs.sol\":3090:3103  string memory */\n      0x60\n        /* \"contract/NewCryptoBullDogs.sol\":3123:3139  _exists(tokenId) */\n      tag_445\n        /* \"contract/NewCryptoBullDogs.sol\":3131:3138  tokenId */\n      dup3\n        /* \"contract/NewCryptoBullDogs.sol\":3123:3130  _exists */\n      tag_264\n        /* \"contract/NewCryptoBullDogs.sol\":3123:3139  _exists(tokenId) */\n      jump\t// in\n    tag_445:\n        /* \"contract/NewCryptoBullDogs.sol\":3115:3191  require(_exists(tokenId), \"ERC721Metadata: URI query for nonexistent token\") */\n      tag_446\n      jumpi\n      mload(0x40)\n      shl(0xe5, 0x461bcd)\n      dup2\n      mstore\n        /* \"#utility.yul\":13973:13975   */\n      0x20\n        /* \"contract/NewCryptoBullDogs.sol\":3115:3191  require(_exists(tokenId), \"ERC721Metadata: URI query for nonexistent token\") */\n      0x04\n      dup3\n      add\n        /* \"#utility.yul\":13955:13976   */\n      mstore\n        /* \"#utility.yul\":14012:14014   */\n      0x2f\n        /* \"#utility.yul\":13992:14010   */\n      0x24\n      dup3\n      add\n        /* \"#utility.yul\":13985:14015   */\n      mstore\n        /* \"#utility.yul\":14051:14085   */\n      0x4552433732314d657461646174613a2055524920717565727920666f72206e6f\n        /* \"#utility.yul\":14031:14049   */\n      0x44\n      dup3\n      add\n        /* \"#utility.yul\":14024:14086   */\n      mstore\n      shl(0x89, 0x3732bc34b9ba32b73a103a37b5b2b7)\n        /* \"#utility.yul\":14102:14120   */\n      0x64\n      dup3\n      add\n        /* \"#utility.yul\":14095:14140   */\n      mstore\n        /* \"#utility.yul\":14157:14176   */\n      0x84\n      add\n        /* \"contract/NewCryptoBullDogs.sol\":3115:3191  require(_exists(tokenId), \"ERC721Metadata: URI query for nonexistent token\") */\n      tag_250\n        /* \"#utility.yul\":13771:14182   */\n      jump\n        /* \"contract/NewCryptoBullDogs.sol\":3115:3191  require(_exists(tokenId), \"ERC721Metadata: URI query for nonexistent token\") */\n    tag_446:\n        /* \"contract/NewCryptoBullDogs.sol\":3202:3216  uint256 trueId */\n      0x00\n        /* \"contract/NewCryptoBullDogs.sol\":3219:3230  tokenId + 1 */\n      tag_449\n        /* \"contract/NewCryptoBullDogs.sol\":3219:3226  tokenId */\n      dup4\n        /* \"contract/NewCryptoBullDogs.sol\":3229:3230  1 */\n      0x01\n        /* \"contract/NewCryptoBullDogs.sol\":3219:3230  tokenId + 1 */\n      tag_292\n      jump\t// in\n    tag_449:\n        /* \"contract/NewCryptoBullDogs.sol\":3245:3255  isRevealed */\n      sload(0x0b)\n        /* \"contract/NewCryptoBullDogs.sol\":3202:3230  uint256 trueId = tokenId + 1 */\n      swap1\n      swap2\n      pop\n        /* \"contract/NewCryptoBullDogs.sol\":3245:3255  isRevealed */\n      0xff\n      and\n        /* \"contract/NewCryptoBullDogs.sol\":3241:3307  if(!isRevealed){... */\n      tag_450\n      jumpi\n        /* \"contract/NewCryptoBullDogs.sol\":3277:3296  placeholderTokenUri */\n      0x0a\n        /* \"contract/NewCryptoBullDogs.sol\":3270:3296  return placeholderTokenUri */\n      dup1\n      sload\n      tag_451\n      swap1\n      tag_257\n      jump\t// in\n    tag_451:\n      dup1\n      0x1f\n      add\n      0x20\n      dup1\n      swap2\n      div\n      mul\n      0x20\n      add\n      mload(0x40)\n      swap1\n      dup2\n      add\n      0x40\n      mstore\n      dup1\n      swap3\n      swap2\n      swap1\n      dup2\n      dup2\n      mstore\n      0x20\n      add\n      dup3\n      dup1\n      sload\n      tag_452\n      swap1\n      tag_257\n      jump\t// in\n    tag_452:\n      dup1\n      iszero\n      tag_453\n      jumpi\n      dup1\n      0x1f\n      lt\n      tag_454\n      jumpi\n      0x0100\n      dup1\n      dup4\n      sload\n      div\n      mul\n      dup4\n      mstore\n      swap2\n      0x20\n      add\n      swap2\n      jump(tag_453)\n    tag_454:\n      dup3\n      add\n      swap2\n      swap1\n      0x00\n      mstore\n      keccak256(0x00, 0x20)\n      swap1\n    tag_455:\n      dup2\n      sload\n      dup2\n      mstore\n      swap1\n      0x01\n      add\n      swap1\n      0x20\n      add\n      dup1\n      dup4\n      gt\n      tag_455\n      jumpi\n      dup3\n      swap1\n      sub\n      0x1f\n      and\n      dup3\n      add\n      swap2\n    tag_453:\n      pop\n      pop\n      pop\n      pop\n      pop\n      swap2\n      pop\n      pop\n        /* \"contract/NewCryptoBullDogs.sol\":3017:3480  function tokenURI(uint256 tokenId) public view virtual override returns (string memory) {... */\n      swap2\n      swap1\n      pop\n      jump\t// out\n        /* \"contract/NewCryptoBullDogs.sol\":3241:3307  if(!isRevealed){... */\n    tag_450:\n        /* \"contract/NewCryptoBullDogs.sol\":3398:3399  0 */\n      0x00\n        /* \"contract/NewCryptoBullDogs.sol\":3375:3387  baseTokenUri */\n      0x09\n        /* \"contract/NewCryptoBullDogs.sol\":3369:3395  bytes(baseTokenUri).length */\n      dup1\n      sload\n      tag_456\n      swap1\n      tag_257\n      jump\t// in\n    tag_456:\n      swap1\n      pop\n        /* \"contract/NewCryptoBullDogs.sol\":3369:3399  bytes(baseTokenUri).length > 0 */\n      gt\n        /* \"contract/NewCryptoBullDogs.sol\":3369:3473  bytes(baseTokenUri).length > 0 ? string(abi.encodePacked(baseTokenUri, trueId.toString(), \".json\")) : \"\" */\n      tag_457\n      jumpi\n      mload(0x40)\n      dup1\n      0x20\n      add\n      0x40\n      mstore\n      dup1\n      0x00\n      dup2\n      mstore\n      pop\n      jump(tag_458)\n    tag_457:\n        /* \"contract/NewCryptoBullDogs.sol\":3426:3438  baseTokenUri */\n      0x09\n        /* \"contract/NewCryptoBullDogs.sol\":3440:3457  trueId.toString() */\n      tag_459\n        /* \"contract/NewCryptoBullDogs.sol\":3440:3446  trueId */\n      dup3\n        /* \"contract/NewCryptoBullDogs.sol\":3440:3455  trueId.toString */\n      tag_460\n        /* \"contract/NewCryptoBullDogs.sol\":3440:3457  trueId.toString() */\n      jump\t// in\n    tag_459:\n        /* \"contract/NewCryptoBullDogs.sol\":3409:3467  abi.encodePacked(baseTokenUri, trueId.toString(), \".json\") */\n      add(0x20, mload(0x40))\n      tag_461\n      swap3\n      swap2\n      swap1\n      tag_462\n      jump\t// in\n    tag_461:\n      mload(0x40)\n      0x20\n      dup2\n      dup4\n      sub\n      sub\n      dup2\n      mstore\n      swap1\n      0x40\n      mstore\n        /* \"contract/NewCryptoBullDogs.sol\":3369:3473  bytes(baseTokenUri).length > 0 ? string(abi.encodePacked(baseTokenUri, trueId.toString(), \".json\")) : \"\" */\n    tag_458:\n        /* \"contract/NewCryptoBullDogs.sol\":3362:3473  return bytes(baseTokenUri).length > 0 ? string(abi.encodePacked(baseTokenUri, trueId.toString(), \".json\")) : \"\" */\n      swap4\n        /* \"contract/NewCryptoBullDogs.sol\":3017:3480  function tokenURI(uint256 tokenId) public view virtual override returns (string memory) {... */\n      swap3\n      pop\n      pop\n      pop\n      jump\t// out\n        /* \"contract/NewCryptoBullDogs.sol\":4624:4711  function togglePublicSale() external onlyOwner{... */\n    tag_225:\n        /* \"@openzeppelin/contracts/access/Ownable.sol\":1108:1114  _owner */\n      and(sub(shl(0xa0, 0x01), 0x01), sload(0x08))\n        /* \"@openzeppelin/contracts/utils/Context.sol\":719:729  msg.sender */\n      caller\n        /* \"@openzeppelin/contracts/access/Ownable.sol\":1248:1271  owner() == _msgSender() */\n      eq\n        /* \"@openzeppelin/contracts/access/Ownable.sol\":1240:1308  require(owner() == _msgSender(), \"Ownable: caller is not the owner\") */\n      tag_466\n      jumpi\n      mload(0x40)\n      shl(0xe5, 0x461bcd)\n      dup2\n      mstore\n      0x04\n      add\n      tag_250\n      swap1\n      tag_251\n      jump\t// in\n    tag_466:\n        /* \"contract/NewCryptoBullDogs.sol\":4694:4704  publicSale */\n      0x0b\n      dup1\n      sload\n      not(0xff00)\n        /* \"contract/NewCryptoBullDogs.sol\":4680:4704  publicSale = !publicSale */\n      dup2\n      and\n        /* \"contract/NewCryptoBullDogs.sol\":4694:4704  publicSale */\n      0x0100\n      swap2\n      dup3\n      swap1\n      div\n      0xff\n      and\n        /* \"contract/NewCryptoBullDogs.sol\":4693:4704  !publicSale */\n      iszero\n        /* \"contract/NewCryptoBullDogs.sol\":4680:4704  publicSale = !publicSale */\n      swap1\n      swap2\n      mul\n      or\n      swap1\n      sstore\n        /* \"contract/NewCryptoBullDogs.sol\":4624:4711  function togglePublicSale() external onlyOwner{... */\n      jump\t// out\n        /* \"@openzeppelin/contracts/access/Ownable.sol\":1918:2116  function transferOwnership(address newOwner) public virtual onlyOwner {... */\n    tag_239:\n        /* \"@openzeppelin/contracts/access/Ownable.sol\":1108:1114  _owner */\n      and(sub(shl(0xa0, 0x01), 0x01), sload(0x08))\n        /* \"@openzeppelin/contracts/utils/Context.sol\":719:729  msg.sender */\n      caller\n        /* \"@openzeppelin/contracts/access/Ownable.sol\":1248:1271  owner() == _msgSender() */\n      eq\n        /* \"@openzeppelin/contracts/access/Ownable.sol\":1240:1308  require(owner() == _msgSender(), \"Ownable: caller is not the owner\") */\n      tag_473\n      jumpi\n      mload(0x40)\n      shl(0xe5, 0x461bcd)\n      dup2\n      mstore\n      0x04\n      add\n      tag_250\n      swap1\n      tag_251\n      jump\t// in\n    tag_473:\n      sub(shl(0xa0, 0x01), 0x01)\n        /* \"@openzeppelin/contracts/access/Ownable.sol\":2006:2028  newOwner != address(0) */\n      dup2\n      and\n        /* \"@openzeppelin/contracts/access/Ownable.sol\":1998:2071  require(newOwner != address(0), \"Ownable: new owner is the zero address\") */\n      tag_476\n      jumpi\n      mload(0x40)\n      shl(0xe5, 0x461bcd)\n      dup2\n      mstore\n        /* \"#utility.yul\":16129:16131   */\n      0x20\n        /* \"@openzeppelin/contracts/access/Ownable.sol\":1998:2071  require(newOwner != address(0), \"Ownable: new owner is the zero address\") */\n      0x04\n      dup3\n      add\n        /* \"#utility.yul\":16111:16132   */\n      mstore\n        /* \"#utility.yul\":16168:16170   */\n      0x26\n        /* \"#utility.yul\":16148:16166   */\n      0x24\n      dup3\n      add\n        /* \"#utility.yul\":16141:16171   */\n      mstore\n        /* \"#utility.yul\":16207:16241   */\n      0x4f776e61626c653a206e6577206f776e657220697320746865207a65726f2061\n        /* \"#utility.yul\":16187:16205   */\n      0x44\n      dup3\n      add\n        /* \"#utility.yul\":16180:16242   */\n      mstore\n      shl(0xd0, 0x646472657373)\n        /* \"#utility.yul\":16258:16276   */\n      0x64\n      dup3\n      add\n        /* \"#utility.yul\":16251:16287   */\n      mstore\n        /* \"#utility.yul\":16304:16323   */\n      0x84\n      add\n        /* \"@openzeppelin/contracts/access/Ownable.sol\":1998:2071  require(newOwner != address(0), \"Ownable: new owner is the zero address\") */\n      tag_250\n        /* \"#utility.yul\":15927:16329   */\n      jump\n        /* \"@openzeppelin/contracts/access/Ownable.sol\":1998:2071  require(newOwner != address(0), \"Ownable: new owner is the zero address\") */\n    tag_476:\n        /* \"@openzeppelin/contracts/access/Ownable.sol\":2081:2109  _transferOwnership(newOwner) */\n      tag_406\n        /* \"@openzeppelin/contracts/access/Ownable.sol\":2100:2108  newOwner */\n      dup2\n        /* \"@openzeppelin/contracts/access/Ownable.sol\":2081:2099  _transferOwnership */\n      tag_354\n        /* \"@openzeppelin/contracts/access/Ownable.sol\":2081:2109  _transferOwnership(newOwner) */\n      jump\t// in\n        /* \"erc721a/contracts/ERC721A.sol\":11506:11690  function _exists(uint256 tokenId) internal view returns (bool) {... */\n    tag_264:\n        /* \"erc721a/contracts/ERC721A.sol\":11563:11567  bool */\n      0x00\n        /* \"erc721a/contracts/ERC721A.sol\":11626:11639  _currentIndex */\n      dup1\n      sload\n        /* \"erc721a/contracts/ERC721A.sol\":11616:11623  tokenId */\n      dup3\n        /* \"erc721a/contracts/ERC721A.sol\":11616:11639  tokenId < _currentIndex */\n      lt\n        /* \"erc721a/contracts/ERC721A.sol\":11586:11683  _startTokenId() <= tokenId && tokenId < _currentIndex &&... */\n      dup1\n      iszero\n      tag_243\n      jumpi\n      pop\n      pop\n        /* \"erc721a/contracts/ERC721A.sol\":11656:11676  _ownerships[tokenId] */\n      0x00\n      swap1\n      dup2\n      mstore\n        /* \"erc721a/contracts/ERC721A.sol\":11656:11667  _ownerships */\n      0x04\n        /* \"erc721a/contracts/ERC721A.sol\":11656:11676  _ownerships[tokenId] */\n      0x20\n      mstore\n      0x40\n      swap1\n      keccak256\n        /* \"erc721a/contracts/ERC721A.sol\":11656:11683  _ownerships[tokenId].burned */\n      sload\n      shl(0xe0, 0x01)\n      swap1\n      div\n      0xff\n      and\n        /* \"erc721a/contracts/ERC721A.sol\":11655:11683  !_ownerships[tokenId].burned */\n      iszero\n      swap1\n        /* \"erc721a/contracts/ERC721A.sol\":11506:11690  function _exists(uint256 tokenId) internal view returns (bool) {... */\n      jump\t// out\n        /* \"erc721a/contracts/ERC721A.sol\":18922:19111  function _approve(... */\n    tag_275:\n        /* \"erc721a/contracts/ERC721A.sol\":19032:19056  _tokenApprovals[tokenId] */\n      0x00\n      dup3\n      dup2\n      mstore\n        /* \"erc721a/contracts/ERC721A.sol\":19032:19047  _tokenApprovals */\n      0x06\n        /* \"erc721a/contracts/ERC721A.sol\":19032:19056  _tokenApprovals[tokenId] */\n      0x20\n      mstore\n      0x40\n      dup1\n      dup3\n      keccak256\n        /* \"erc721a/contracts/ERC721A.sol\":19032:19061  _tokenApprovals[tokenId] = to */\n      dup1\n      sload\n      not(sub(shl(0xa0, 0x01), 0x01))\n      and\n      sub(shl(0xa0, 0x01), 0x01)\n      dup8\n      dup2\n      and\n      swap2\n      dup3\n      or\n      swap1\n      swap3\n      sstore\n        /* \"erc721a/contracts/ERC721A.sol\":19076:19104  Approval(owner, to, tokenId) */\n      swap2\n      mload\n        /* \"erc721a/contracts/ERC721A.sol\":19032:19056  _tokenApprovals[tokenId] */\n      dup6\n      swap4\n        /* \"erc721a/contracts/ERC721A.sol\":19076:19104  Approval(owner, to, tokenId) */\n      swap2\n      dup6\n      and\n      swap2\n      0x8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b925\n      swap2\n      log4\n        /* \"erc721a/contracts/ERC721A.sol\":18922:19111  function _approve(... */\n      pop\n      pop\n      pop\n      jump\t// out\n        /* \"erc721a/contracts/ERC721A.sol\":14528:16595  function _transfer(... */\n    tag_281:\n        /* \"erc721a/contracts/ERC721A.sol\":14638:14673  TokenOwnership memory prevOwnership */\n      0x00\n        /* \"erc721a/contracts/ERC721A.sol\":14676:14696  ownershipOf(tokenId) */\n      tag_489\n        /* \"erc721a/contracts/ERC721A.sol\":14688:14695  tokenId */\n      dup3\n        /* \"erc721a/contracts/ERC721A.sol\":14676:14687  ownershipOf */\n      tag_344\n        /* \"erc721a/contracts/ERC721A.sol\":14676:14696  ownershipOf(tokenId) */\n      jump\t// in\n    tag_489:\n        /* \"erc721a/contracts/ERC721A.sol\":14749:14767  prevOwnership.addr */\n      dup1\n      mload\n        /* \"erc721a/contracts/ERC721A.sol\":14638:14696  TokenOwnership memory prevOwnership = ownershipOf(tokenId) */\n      swap1\n      swap2\n      pop\n        /* \"erc721a/contracts/ERC721A.sol\":14707:14729  bool isApprovedOrOwner */\n      0x00\n      swap1\n      sub(shl(0xa0, 0x01), 0x01)\n        /* \"erc721a/contracts/ERC721A.sol\":14733:14767  _msgSender() == prevOwnership.addr */\n      and\n        /* \"@openzeppelin/contracts/utils/Context.sol\":719:729  msg.sender */\n      caller\n      sub(shl(0xa0, 0x01), 0x01)\n        /* \"erc721a/contracts/ERC721A.sol\":14733:14767  _msgSender() == prevOwnership.addr */\n      and\n      eq\n        /* \"erc721a/contracts/ERC721A.sol\":14733:14833  _msgSender() == prevOwnership.addr ||... */\n      dup1\n      tag_492\n      jumpi\n      pop\n        /* \"erc721a/contracts/ERC721A.sol\":14800:14818  prevOwnership.addr */\n      dup2\n      mload\n        /* \"erc721a/contracts/ERC721A.sol\":14783:14833  isApprovedForAll(prevOwnership.addr, _msgSender()) */\n      tag_492\n      swap1\n        /* \"@openzeppelin/contracts/utils/Context.sol\":719:729  msg.sender */\n      caller\n        /* \"erc721a/contracts/ERC721A.sol\":10202:10364  function isApprovedForAll(address owner, address operator) public view virtual override returns (bool) {... */\n      tag_232\n      jump\t// in\n        /* \"erc721a/contracts/ERC721A.sol\":14783:14833  isApprovedForAll(prevOwnership.addr, _msgSender()) */\n    tag_492:\n        /* \"erc721a/contracts/ERC721A.sol\":14733:14885  _msgSender() == prevOwnership.addr ||... */\n      dup1\n      tag_494\n      jumpi\n      pop\n        /* \"@openzeppelin/contracts/utils/Context.sol\":719:729  msg.sender */\n      caller\n        /* \"erc721a/contracts/ERC721A.sol\":14849:14869  getApproved(tokenId) */\n      tag_496\n        /* \"erc721a/contracts/ERC721A.sol\":14861:14868  tokenId */\n      dup5\n        /* \"erc721a/contracts/ERC721A.sol\":14849:14860  getApproved */\n      tag_84\n        /* \"erc721a/contracts/ERC721A.sol\":14849:14869  getApproved(tokenId) */\n      jump\t// in\n    tag_496:\n      sub(shl(0xa0, 0x01), 0x01)\n        /* \"erc721a/contracts/ERC721A.sol\":14849:14885  getApproved(tokenId) == _msgSender() */\n      and\n      eq\n        /* \"erc721a/contracts/ERC721A.sol\":14733:14885  _msgSender() == prevOwnership.addr ||... */\n    tag_494:\n        /* \"erc721a/contracts/ERC721A.sol\":14707:14886  bool isApprovedOrOwner = (_msgSender() == prevOwnership.addr ||... */\n      swap1\n      pop\n        /* \"erc721a/contracts/ERC721A.sol\":14902:14919  isApprovedOrOwner */\n      dup1\n        /* \"erc721a/contracts/ERC721A.sol\":14897:14963  if (!isApprovedOrOwner) revert TransferCallerNotOwnerNorApproved() */\n      tag_497\n      jumpi\n        /* \"erc721a/contracts/ERC721A.sol\":14928:14963  TransferCallerNotOwnerNorApproved() */\n      mload(0x40)\n      shl(0xe1, 0x2ce44b5f)\n      dup2\n      mstore\n      0x04\n      add\n      mload(0x40)\n      dup1\n      swap2\n      sub\n      swap1\n      revert\n        /* \"erc721a/contracts/ERC721A.sol\":14897:14963  if (!isApprovedOrOwner) revert TransferCallerNotOwnerNorApproved() */\n    tag_497:\n        /* \"erc721a/contracts/ERC721A.sol\":14999:15003  from */\n      dup5\n      sub(shl(0xa0, 0x01), 0x01)\n        /* \"erc721a/contracts/ERC721A.sol\":14977:15003  prevOwnership.addr != from */\n      and\n        /* \"erc721a/contracts/ERC721A.sol\":14977:14990  prevOwnership */\n      dup3\n        /* \"erc721a/contracts/ERC721A.sol\":14977:14995  prevOwnership.addr */\n      0x00\n      add\n      mload\n      sub(shl(0xa0, 0x01), 0x01)\n        /* \"erc721a/contracts/ERC721A.sol\":14977:15003  prevOwnership.addr != from */\n      and\n      eq\n        /* \"erc721a/contracts/ERC721A.sol\":14973:15040  if (prevOwnership.addr != from) revert TransferFromIncorrectOwner() */\n      tag_498\n      jumpi\n        /* \"erc721a/contracts/ERC721A.sol\":15012:15040  TransferFromIncorrectOwner() */\n      mload(0x40)\n      shl(0xe8, 0xa11481)\n      dup2\n      mstore\n      0x04\n      add\n      mload(0x40)\n      dup1\n      swap2\n      sub\n      swap1\n      revert\n        /* \"erc721a/contracts/ERC721A.sol\":14973:15040  if (prevOwnership.addr != from) revert TransferFromIncorrectOwner() */\n    tag_498:\n      sub(shl(0xa0, 0x01), 0x01)\n        /* \"erc721a/contracts/ERC721A.sol\":15054:15070  to == address(0) */\n      dup5\n      and\n        /* \"erc721a/contracts/ERC721A.sol\":15050:15102  if (to == address(0)) revert TransferToZeroAddress() */\n      tag_499\n      jumpi\n        /* \"erc721a/contracts/ERC721A.sol\":15079:15102  TransferToZeroAddress() */\n      mload(0x40)\n      shl(0xe2, 0x3a954ecd)\n      dup2\n      mstore\n      0x04\n      add\n      mload(0x40)\n      dup1\n      swap2\n      sub\n      swap1\n      revert\n        /* \"erc721a/contracts/ERC721A.sol\":15050:15102  if (to == address(0)) revert TransferToZeroAddress() */\n    tag_499:\n        /* \"erc721a/contracts/ERC721A.sol\":15218:15267  _approve(address(0), tokenId, prevOwnership.addr) */\n      tag_502\n        /* \"erc721a/contracts/ERC721A.sol\":15235:15236  0 */\n      0x00\n        /* \"erc721a/contracts/ERC721A.sol\":15239:15246  tokenId */\n      dup5\n        /* \"erc721a/contracts/ERC721A.sol\":15248:15261  prevOwnership */\n      dup5\n        /* \"erc721a/contracts/ERC721A.sol\":15248:15266  prevOwnership.addr */\n      0x00\n      add\n      mload\n        /* \"erc721a/contracts/ERC721A.sol\":15218:15226  _approve */\n      tag_275\n        /* \"erc721a/contracts/ERC721A.sol\":15218:15267  _approve(address(0), tokenId, prevOwnership.addr) */\n      jump\t// in\n    tag_502:\n      sub(shl(0xa0, 0x01), 0x01)\n        /* \"erc721a/contracts/ERC721A.sol\":15557:15575  _addressData[from] */\n      dup6\n      dup2\n      and\n      0x00\n      swap1\n      dup2\n      mstore\n        /* \"erc721a/contracts/ERC721A.sol\":15557:15569  _addressData */\n      0x05\n        /* \"erc721a/contracts/ERC721A.sol\":15557:15575  _addressData[from] */\n      0x20\n      swap1\n      dup2\n      mstore\n      0x40\n      dup1\n      dup4\n      keccak256\n        /* \"erc721a/contracts/ERC721A.sol\":15557:15588  _addressData[from].balance -= 1 */\n      dup1\n      sload\n      not(0xffffffffffffffff)\n      dup1\n      dup3\n      and\n      sub(shl(0x40, 0x01), 0x01)\n      swap3\n      dup4\n      and\n      not(0x00)\n      add\n      dup4\n      and\n      or\n      swap1\n      swap3\n      sstore\n        /* \"erc721a/contracts/ERC721A.sol\":15602:15618  _addressData[to] */\n      dup10\n      dup7\n      and\n      dup1\n      dup7\n      mstore\n      dup4\n      dup7\n      keccak256\n        /* \"erc721a/contracts/ERC721A.sol\":15602:15631  _addressData[to].balance += 1 */\n      dup1\n      sload\n      swap4\n      dup5\n      and\n      swap4\n      dup4\n      and\n      0x01\n      swap1\n      dup2\n      add\n      dup5\n      and\n      swap5\n      swap1\n      swap5\n      or\n      swap1\n      sstore\n        /* \"erc721a/contracts/ERC721A.sol\":15646:15666  _ownerships[tokenId] */\n      dup10\n      dup7\n      mstore\n        /* \"erc721a/contracts/ERC721A.sol\":15646:15657  _ownerships */\n      0x04\n        /* \"erc721a/contracts/ERC721A.sol\":15646:15666  _ownerships[tokenId] */\n      swap1\n      swap5\n      mstore\n      dup3\n      dup6\n      keccak256\n        /* \"erc721a/contracts/ERC721A.sol\":15646:15676  _ownerships[tokenId].addr = to */\n      dup1\n      sload\n      not(sub(shl(0xe0, 0x01), 0x01))\n        /* \"erc721a/contracts/ERC721A.sol\":15690:15751  _ownerships[tokenId].startTimestamp = uint64(block.timestamp) */\n      and\n      swap1\n      swap5\n      or\n      shl(0xa0, 0x01)\n        /* \"erc721a/contracts/ERC721A.sol\":15735:15750  block.timestamp */\n      timestamp\n        /* \"erc721a/contracts/ERC721A.sol\":15690:15751  _ownerships[tokenId].startTimestamp = uint64(block.timestamp) */\n      swap1\n      swap3\n      and\n      swap2\n      swap1\n      swap2\n      mul\n      or\n      swap1\n      swap3\n      sstore\n        /* \"erc721a/contracts/ERC721A.sol\":16021:16032  tokenId + 1 */\n      swap1\n      dup7\n      add\n        /* \"erc721a/contracts/ERC721A.sol\":16050:16074  _ownerships[nextTokenId] */\n      dup1\n      dup4\n      mstore\n      swap2\n      keccak256\n        /* \"erc721a/contracts/ERC721A.sol\":16050:16079  _ownerships[nextTokenId].addr */\n      sload\n        /* \"erc721a/contracts/ERC721A.sol\":16021:16032  tokenId + 1 */\n      swap1\n      swap2\n        /* \"erc721a/contracts/ERC721A.sol\":16050:16079  _ownerships[nextTokenId].addr */\n      and\n        /* \"erc721a/contracts/ERC721A.sol\":16046:16484  if (_ownerships[nextTokenId].addr == address(0)) {... */\n      tag_504\n      jumpi\n        /* \"erc721a/contracts/ERC721A.sol\":16272:16285  _currentIndex */\n      sload(0x00)\n        /* \"erc721a/contracts/ERC721A.sol\":16258:16269  nextTokenId */\n      dup2\n        /* \"erc721a/contracts/ERC721A.sol\":16258:16285  nextTokenId < _currentIndex */\n      lt\n        /* \"erc721a/contracts/ERC721A.sol\":16254:16470  if (nextTokenId < _currentIndex) {... */\n      iszero\n      tag_504\n      jumpi\n        /* \"erc721a/contracts/ERC721A.sol\":16341:16359  prevOwnership.addr */\n      dup3\n      mload\n      0x00\n        /* \"erc721a/contracts/ERC721A.sol\":16309:16333  _ownerships[nextTokenId] */\n      dup3\n      dup2\n      mstore\n        /* \"erc721a/contracts/ERC721A.sol\":16309:16320  _ownerships */\n      0x04\n        /* \"erc721a/contracts/ERC721A.sol\":16309:16333  _ownerships[nextTokenId] */\n      0x20\n      swap1\n      dup2\n      mstore\n      0x40\n      swap1\n      swap2\n      keccak256\n        /* \"erc721a/contracts/ERC721A.sol\":16309:16359  _ownerships[nextTokenId].addr = prevOwnership.addr */\n      dup1\n      sload\n        /* \"erc721a/contracts/ERC721A.sol\":16423:16451  prevOwnership.startTimestamp */\n      swap2\n      dup7\n      add\n      mload\n      sub(shl(0x40, 0x01), 0x01)\n        /* \"erc721a/contracts/ERC721A.sol\":16381:16451  _ownerships[nextTokenId].startTimestamp = prevOwnership.startTimestamp */\n      and\n      shl(0xa0, 0x01)\n      mul\n      not(sub(shl(0xe0, 0x01), 0x01))\n      swap1\n      swap3\n      and\n      sub(shl(0xa0, 0x01), 0x01)\n        /* \"erc721a/contracts/ERC721A.sol\":16309:16359  _ownerships[nextTokenId].addr = prevOwnership.addr */\n      swap1\n      swap4\n      and\n        /* \"erc721a/contracts/ERC721A.sol\":16381:16451  _ownerships[nextTokenId].startTimestamp = prevOwnership.startTimestamp */\n      swap3\n      swap1\n      swap3\n      or\n      or\n      swap1\n      sstore\n        /* \"erc721a/contracts/ERC721A.sol\":16254:16470  if (nextTokenId < _currentIndex) {... */\n    tag_504:\n        /* \"erc721a/contracts/ERC721A.sol\":15533:16494  unchecked {... */\n      pop\n        /* \"erc721a/contracts/ERC721A.sol\":16528:16535  tokenId */\n      dup3\n        /* \"erc721a/contracts/ERC721A.sol\":16524:16526  to */\n      dup5\n      sub(shl(0xa0, 0x01), 0x01)\n        /* \"erc721a/contracts/ERC721A.sol\":16509:16536  Transfer(from, to, tokenId) */\n      and\n        /* \"erc721a/contracts/ERC721A.sol\":16518:16522  from */\n      dup7\n      sub(shl(0xa0, 0x01), 0x01)\n        /* \"erc721a/contracts/ERC721A.sol\":16509:16536  Transfer(from, to, tokenId) */\n      and\n      0xddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef\n      mload(0x40)\n      mload(0x40)\n      dup1\n      swap2\n      sub\n      swap1\n      log4\n        /* \"erc721a/contracts/ERC721A.sol\":16546:16588  _afterTokenTransfers(from, to, tokenId, 1) */\n    tag_505:\n        /* \"erc721a/contracts/ERC721A.sol\":14628:16595  {... */\n      pop\n      pop\n        /* \"erc721a/contracts/ERC721A.sol\":14528:16595  function _transfer(... */\n      pop\n      pop\n      pop\n      jump\t// out\n        /* \"@openzeppelin/contracts/utils/cryptography/MerkleProof.sol\":862:1046  function verify(... */\n    tag_308:\n        /* \"@openzeppelin/contracts/utils/cryptography/MerkleProof.sol\":983:987  bool */\n      0x00\n        /* \"@openzeppelin/contracts/utils/cryptography/MerkleProof.sol\":1035:1039  root */\n      dup3\n        /* \"@openzeppelin/contracts/utils/cryptography/MerkleProof.sol\":1006:1031  processProof(proof, leaf) */\n      tag_508\n        /* \"@openzeppelin/contracts/utils/cryptography/MerkleProof.sol\":1019:1024  proof */\n      dup6\n        /* \"@openzeppelin/contracts/utils/cryptography/MerkleProof.sol\":1026:1030  leaf */\n      dup5\n        /* \"@openzeppelin/contracts/utils/cryptography/MerkleProof.sol\":1006:1018  processProof */\n      tag_509\n        /* \"@openzeppelin/contracts/utils/cryptography/MerkleProof.sol\":1006:1031  processProof(proof, leaf) */\n      jump\t// in\n    tag_508:\n        /* \"@openzeppelin/contracts/utils/cryptography/MerkleProof.sol\":1006:1039  processProof(proof, leaf) == root */\n      eq\n      swap5\n        /* \"@openzeppelin/contracts/utils/cryptography/MerkleProof.sol\":862:1046  function verify(... */\n      swap4\n      pop\n      pop\n      pop\n      pop\n      jump\t// out\n        /* \"erc721a/contracts/ERC721A.sol\":11696:11798  function _safeMint(address to, uint256 quantity) internal {... */\n    tag_314:\n        /* \"erc721a/contracts/ERC721A.sol\":11764:11791  _safeMint(to, quantity, '') */\n      tag_253\n        /* \"erc721a/contracts/ERC721A.sol\":11774:11776  to */\n      dup3\n        /* \"erc721a/contracts/ERC721A.sol\":11778:11786  quantity */\n      dup3\n        /* \"erc721a/contracts/ERC721A.sol\":11764:11791  _safeMint(to, quantity, '') */\n      mload(0x40)\n      dup1\n      0x20\n      add\n      0x40\n      mstore\n      dup1\n      0x00\n      dup2\n      mstore\n      pop\n        /* \"erc721a/contracts/ERC721A.sol\":11764:11773  _safeMint */\n      tag_512\n        /* \"erc721a/contracts/ERC721A.sol\":11764:11791  _safeMint(to, quantity, '') */\n      jump\t// in\n        /* \"erc721a/contracts/ERC721A.sol\":6815:7898  function ownershipOf(uint256 tokenId) internal view returns (TokenOwnership memory) {... */\n    tag_344:\n      0x40\n      dup1\n      mload\n      0x60\n      dup2\n      add\n      dup3\n      mstore\n      0x00\n      dup1\n      dup3\n      mstore\n      0x20\n      dup3\n      add\n      dup2\n      swap1\n      mstore\n      swap2\n      dup2\n      add\n      swap2\n      swap1\n      swap2\n      mstore\n        /* \"erc721a/contracts/ERC721A.sol\":6924:6931  tokenId */\n      dup2\n        /* \"erc721a/contracts/ERC721A.sol\":7004:7017  _currentIndex */\n      sload(0x00)\n        /* \"erc721a/contracts/ERC721A.sol\":6997:7001  curr */\n      dup2\n        /* \"erc721a/contracts/ERC721A.sol\":6997:7017  curr < _currentIndex */\n      lt\n        /* \"erc721a/contracts/ERC721A.sol\":6966:7834  if (_startTokenId() <= curr && curr < _currentIndex) {... */\n      iszero\n      tag_518\n      jumpi\n        /* \"erc721a/contracts/ERC721A.sol\":7037:7068  TokenOwnership memory ownership */\n      0x00\n        /* \"erc721a/contracts/ERC721A.sol\":7071:7088  _ownerships[curr] */\n      dup2\n      dup2\n      mstore\n        /* \"erc721a/contracts/ERC721A.sol\":7071:7082  _ownerships */\n      0x04\n        /* \"erc721a/contracts/ERC721A.sol\":7071:7088  _ownerships[curr] */\n      0x20\n      swap1\n      dup2\n      mstore\n      0x40\n      swap2\n      dup3\n      swap1\n      keccak256\n        /* \"erc721a/contracts/ERC721A.sol\":7037:7088  TokenOwnership memory ownership = _ownerships[curr] */\n      dup3\n      mload\n      0x60\n      dup2\n      add\n      dup5\n      mstore\n      swap1\n      sload\n      sub(shl(0xa0, 0x01), 0x01)\n      dup2\n      and\n      dup3\n      mstore\n      shl(0xa0, 0x01)\n      dup2\n      div\n      sub(shl(0x40, 0x01), 0x01)\n      and\n      swap3\n      dup3\n      add\n      swap3\n      swap1\n      swap3\n      mstore\n      shl(0xe0, 0x01)\n      swap1\n      swap2\n      div\n      0xff\n      and\n      iszero\n      iszero\n      swap2\n      dup2\n      add\n      dup3\n      swap1\n      mstore\n      swap1\n        /* \"erc721a/contracts/ERC721A.sol\":7106:7820  if (!ownership.burned) {... */\n      tag_522\n      jumpi\n        /* \"erc721a/contracts/ERC721A.sol\":7155:7169  ownership.addr */\n      dup1\n      mload\n      sub(shl(0xa0, 0x01), 0x01)\n        /* \"erc721a/contracts/ERC721A.sol\":7155:7183  ownership.addr != address(0) */\n      and\n      iszero\n        /* \"erc721a/contracts/ERC721A.sol\":7151:7250  if (ownership.addr != address(0)) {... */\n      tag_520\n      jumpi\n        /* \"erc721a/contracts/ERC721A.sol\":7218:7227  ownership */\n      swap4\n        /* \"erc721a/contracts/ERC721A.sol\":6815:7898  function ownershipOf(uint256 tokenId) internal view returns (TokenOwnership memory) {... */\n      swap3\n      pop\n      pop\n      pop\n      jump\t// out\n        /* \"erc721a/contracts/ERC721A.sol\":7151:7250  if (ownership.addr != address(0)) {... */\n    tag_520:\n      pop\n      not(0x00)\n        /* \"erc721a/contracts/ERC721A.sol\":7586:7592  curr-- */\n      add\n        /* \"erc721a/contracts/ERC721A.sol\":7630:7647  _ownerships[curr] */\n      0x00\n      dup2\n      dup2\n      mstore\n        /* \"erc721a/contracts/ERC721A.sol\":7630:7641  _ownerships */\n      0x04\n        /* \"erc721a/contracts/ERC721A.sol\":7630:7647  _ownerships[curr] */\n      0x20\n      swap1\n      dup2\n      mstore\n      0x40\n      swap2\n      dup3\n      swap1\n      keccak256\n        /* \"erc721a/contracts/ERC721A.sol\":7618:7647  ownership = _ownerships[curr] */\n      dup3\n      mload\n      0x60\n      dup2\n      add\n      dup5\n      mstore\n      swap1\n      sload\n      sub(shl(0xa0, 0x01), 0x01)\n      dup2\n      and\n      dup1\n      dup4\n      mstore\n      shl(0xa0, 0x01)\n      dup3\n      div\n      sub(shl(0x40, 0x01), 0x01)\n      and\n      swap4\n      dup4\n      add\n      swap4\n      swap1\n      swap4\n      mstore\n      shl(0xe0, 0x01)\n      swap1\n      div\n      0xff\n      and\n      iszero\n      iszero\n      swap3\n      dup2\n      add\n      swap3\n      swap1\n      swap3\n      mstore\n        /* \"erc721a/contracts/ERC721A.sol\":7677:7705  ownership.addr != address(0) */\n      iszero\n        /* \"erc721a/contracts/ERC721A.sol\":7673:7780  if (ownership.addr != address(0)) {... */\n      tag_523\n      jumpi\n        /* \"erc721a/contracts/ERC721A.sol\":7744:7753  ownership */\n      swap4\n        /* \"erc721a/contracts/ERC721A.sol\":6815:7898  function ownershipOf(uint256 tokenId) internal view returns (TokenOwnership memory) {... */\n      swap3\n      pop\n      pop\n      pop\n      jump\t// out\n        /* \"erc721a/contracts/ERC721A.sol\":7673:7780  if (ownership.addr != address(0)) {... */\n    tag_523:\n        /* \"erc721a/contracts/ERC721A.sol\":7547:7802  while (true) {... */\n      jump(tag_520)\n    tag_522:\n        /* \"erc721a/contracts/ERC721A.sol\":7019:7834  {... */\n      pop\n        /* \"erc721a/contracts/ERC721A.sol\":6966:7834  if (_startTokenId() <= curr && curr < _currentIndex) {... */\n    tag_518:\n        /* \"erc721a/contracts/ERC721A.sol\":7860:7891  OwnerQueryForNonexistentToken() */\n      mload(0x40)\n      shl(0xe1, 0x6f96cda1)\n      dup2\n      mstore\n      0x04\n      add\n      mload(0x40)\n      dup1\n      swap2\n      sub\n      swap1\n      revert\n        /* \"@openzeppelin/contracts/access/Ownable.sol\":2270:2457  function _transferOwnership(address newOwner) internal virtual {... */\n    tag_354:\n        /* \"@openzeppelin/contracts/access/Ownable.sol\":2362:2368  _owner */\n      0x08\n      dup1\n      sload\n      sub(shl(0xa0, 0x01), 0x01)\n        /* \"@openzeppelin/contracts/access/Ownable.sol\":2378:2395  _owner = newOwner */\n      dup4\n      dup2\n      and\n      not(sub(shl(0xa0, 0x01), 0x01))\n      dup4\n      and\n      dup2\n      or\n      swap1\n      swap4\n      sstore\n        /* \"@openzeppelin/contracts/access/Ownable.sol\":2410:2450  OwnershipTransferred(oldOwner, newOwner) */\n      mload(0x40)\n        /* \"@openzeppelin/contracts/access/Ownable.sol\":2362:2368  _owner */\n      swap2\n      and\n      swap2\n        /* \"@openzeppelin/contracts/access/Ownable.sol\":2378:2395  _owner = newOwner */\n      swap1\n        /* \"@openzeppelin/contracts/access/Ownable.sol\":2362:2368  _owner */\n      dup3\n      swap1\n        /* \"@openzeppelin/contracts/access/Ownable.sol\":2410:2450  OwnershipTransferred(oldOwner, newOwner) */\n      0x8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0\n      swap1\n        /* \"@openzeppelin/contracts/access/Ownable.sol\":2343:2359  address oldOwner */\n      0x00\n      swap1\n        /* \"@openzeppelin/contracts/access/Ownable.sol\":2410:2450  OwnershipTransferred(oldOwner, newOwner) */\n      log3\n        /* \"@openzeppelin/contracts/access/Ownable.sol\":2333:2457  {... */\n      pop\n        /* \"@openzeppelin/contracts/access/Ownable.sol\":2270:2457  function _transferOwnership(address newOwner) internal virtual {... */\n      pop\n      jump\t// out\n        /* \"erc721a/contracts/ERC721A.sol\":19592:20242  function _checkContractOnERC721Received(... */\n    tag_426:\n        /* \"erc721a/contracts/ERC721A.sol\":19770:19842  IERC721Receiver(to).onERC721Received(_msgSender(), from, tokenId, _data) */\n      mload(0x40)\n      shl(0xe1, 0x0a85bd01)\n      dup2\n      mstore\n        /* \"erc721a/contracts/ERC721A.sol\":19750:19754  bool */\n      0x00\n      swap1\n      sub(shl(0xa0, 0x01), 0x01)\n        /* \"erc721a/contracts/ERC721A.sol\":19770:19806  IERC721Receiver(to).onERC721Received */\n      dup6\n      and\n      swap1\n      0x150b7a02\n      swap1\n        /* \"erc721a/contracts/ERC721A.sol\":19770:19842  IERC721Receiver(to).onERC721Received(_msgSender(), from, tokenId, _data) */\n      tag_528\n      swap1\n        /* \"@openzeppelin/contracts/utils/Context.sol\":719:729  msg.sender */\n      caller\n      swap1\n        /* \"erc721a/contracts/ERC721A.sol\":19821:19825  from */\n      dup10\n      swap1\n        /* \"erc721a/contracts/ERC721A.sol\":19827:19834  tokenId */\n      dup9\n      swap1\n        /* \"erc721a/contracts/ERC721A.sol\":19836:19841  _data */\n      dup9\n      swap1\n        /* \"erc721a/contracts/ERC721A.sol\":19770:19842  IERC721Receiver(to).onERC721Received(_msgSender(), from, tokenId, _data) */\n      0x04\n      add\n      tag_529\n      jump\t// in\n    tag_528:\n      0x20\n      mload(0x40)\n      dup1\n      dup4\n      sub\n      dup2\n      0x00\n      dup8\n      dup1\n      extcodesize\n      iszero\n      dup1\n      iszero\n      tag_530\n      jumpi\n      0x00\n      dup1\n      revert\n    tag_530:\n      pop\n      gas\n      call\n      swap3\n      pop\n      pop\n      pop\n      dup1\n      iszero\n      tag_531\n      jumpi\n      pop\n      0x40\n      dup1\n      mload\n      0x1f\n      returndatasize\n      swap1\n      dup2\n      add\n      not(0x1f)\n      and\n      dup3\n      add\n      swap1\n      swap3\n      mstore\n      tag_532\n      swap2\n      dup2\n      add\n      swap1\n      tag_533\n      jump\t// in\n    tag_532:\n      0x01\n    tag_531:\n        /* \"erc721a/contracts/ERC721A.sol\":19766:20236  try IERC721Receiver(to).onERC721Received(_msgSender(), from, tokenId, _data) returns (bytes4 retval) {... */\n      tag_534\n      jumpi\n      returndatasize\n      dup1\n      dup1\n      iszero\n      tag_539\n      jumpi\n      mload(0x40)\n      swap2\n      pop\n      and(add(returndatasize, 0x3f), not(0x1f))\n      dup3\n      add\n      0x40\n      mstore\n      returndatasize\n      dup3\n      mstore\n      returndatasize\n      0x00\n      0x20\n      dup5\n      add\n      returndatacopy\n      jump(tag_538)\n    tag_539:\n      0x60\n      swap2\n      pop\n    tag_538:\n      pop\n        /* \"erc721a/contracts/ERC721A.sol\":20001:20014  reason.length */\n      dup1\n      mload\n        /* \"erc721a/contracts/ERC721A.sol\":19997:20226  if (reason.length == 0) {... */\n      tag_540\n      jumpi\n        /* \"erc721a/contracts/ERC721A.sol\":20046:20086  TransferToNonERC721ReceiverImplementer() */\n      mload(0x40)\n      shl(0xe1, 0x68d2bf6b)\n      dup2\n      mstore\n      0x04\n      add\n      mload(0x40)\n      dup1\n      swap2\n      sub\n      swap1\n      revert\n        /* \"erc721a/contracts/ERC721A.sol\":19997:20226  if (reason.length == 0) {... */\n    tag_540:\n        /* \"erc721a/contracts/ERC721A.sol\":20186:20192  reason */\n      dup1\n        /* \"erc721a/contracts/ERC721A.sol\":20180:20193  mload(reason) */\n      mload\n        /* \"erc721a/contracts/ERC721A.sol\":20171:20177  reason */\n      dup2\n        /* \"erc721a/contracts/ERC721A.sol\":20167:20169  32 */\n      0x20\n        /* \"erc721a/contracts/ERC721A.sol\":20163:20178  add(32, reason) */\n      add\n        /* \"erc721a/contracts/ERC721A.sol\":20156:20194  revert(add(32, reason), mload(reason)) */\n      revert\n        /* \"erc721a/contracts/ERC721A.sol\":19766:20236  try IERC721Receiver(to).onERC721Received(_msgSender(), from, tokenId, _data) returns (bytes4 retval) {... */\n    tag_534:\n      not(sub(shl(0xe0, 0x01), 0x01))\n        /* \"erc721a/contracts/ERC721A.sol\":19888:19943  retval == IERC721Receiver(to).onERC721Received.selector */\n      and\n      shl(0xe1, 0x0a85bd01)\n      eq\n      swap1\n      pop\n        /* \"erc721a/contracts/ERC721A.sol\":19766:20236  try IERC721Receiver(to).onERC721Received(_msgSender(), from, tokenId, _data) returns (bytes4 retval) {... */\n    tag_542:\n        /* \"erc721a/contracts/ERC721A.sol\":19592:20242  function _checkContractOnERC721Received(... */\n      swap5\n      swap4\n      pop\n      pop\n      pop\n      pop\n      jump\t// out\n        /* \"@openzeppelin/contracts/utils/Strings.sol\":328:1031  function toString(uint256 value) internal pure returns (string memory) {... */\n    tag_460:\n        /* \"@openzeppelin/contracts/utils/Strings.sol\":384:397  string memory */\n      0x60\n        /* \"@openzeppelin/contracts/utils/Strings.sol\":601:611  value == 0 */\n      dup2\n        /* \"@openzeppelin/contracts/utils/Strings.sol\":597:648  if (value == 0) {... */\n      tag_544\n      jumpi\n      pop\n      pop\n        /* \"@openzeppelin/contracts/utils/Strings.sol\":627:637  return \"0\" */\n      0x40\n      dup1\n      mload\n      dup1\n      dup3\n      add\n      swap1\n      swap2\n      mstore\n      0x01\n      dup2\n      mstore\n      shl(0xfc, 0x03)\n      0x20\n      dup3\n      add\n      mstore\n      swap1\n        /* \"@openzeppelin/contracts/utils/Strings.sol\":328:1031  function toString(uint256 value) internal pure returns (string memory) {... */\n      jump\t// out\n        /* \"@openzeppelin/contracts/utils/Strings.sol\":597:648  if (value == 0) {... */\n    tag_544:\n        /* \"@openzeppelin/contracts/utils/Strings.sol\":672:677  value */\n      dup2\n        /* \"@openzeppelin/contracts/utils/Strings.sol\":657:669  uint256 temp */\n      0x00\n        /* \"@openzeppelin/contracts/utils/Strings.sol\":711:786  while (temp != 0) {... */\n    tag_545:\n        /* \"@openzeppelin/contracts/utils/Strings.sol\":718:727  temp != 0 */\n      dup2\n      iszero\n        /* \"@openzeppelin/contracts/utils/Strings.sol\":711:786  while (temp != 0) {... */\n      tag_546\n      jumpi\n        /* \"@openzeppelin/contracts/utils/Strings.sol\":743:751  digits++ */\n      dup1\n      tag_547\n      dup2\n      tag_371\n      jump\t// in\n    tag_547:\n      swap2\n      pop\n        /* \"@openzeppelin/contracts/utils/Strings.sol\":765:775  temp /= 10 */\n      tag_548\n      swap1\n      pop\n        /* \"@openzeppelin/contracts/utils/Strings.sol\":773:775  10 */\n      0x0a\n        /* \"@openzeppelin/contracts/utils/Strings.sol\":765:775  temp /= 10 */\n      dup4\n      tag_323\n      jump\t// in\n    tag_548:\n      swap2\n      pop\n        /* \"@openzeppelin/contracts/utils/Strings.sol\":711:786  while (temp != 0) {... */\n      jump(tag_545)\n    tag_546:\n        /* \"@openzeppelin/contracts/utils/Strings.sol\":795:814  bytes memory buffer */\n      0x00\n        /* \"@openzeppelin/contracts/utils/Strings.sol\":827:833  digits */\n      dup2\n      sub(shl(0x40, 0x01), 0x01)\n        /* \"@openzeppelin/contracts/utils/Strings.sol\":817:834  new bytes(digits) */\n      dup2\n      gt\n      iszero\n      tag_550\n      jumpi\n      tag_550\n      tag_365\n      jump\t// in\n    tag_550:\n      mload(0x40)\n      swap1\n      dup1\n      dup3\n      mstore\n      dup1\n      0x1f\n      add\n      not(0x1f)\n      and\n      0x20\n      add\n      dup3\n      add\n      0x40\n      mstore\n      dup1\n      iszero\n      tag_551\n      jumpi\n      0x20\n      dup3\n      add\n      dup2\n      dup1\n      calldatasize\n      dup4\n      calldatacopy\n      add\n      swap1\n      pop\n    tag_551:\n      pop\n        /* \"@openzeppelin/contracts/utils/Strings.sol\":795:834  bytes memory buffer = new bytes(digits) */\n      swap1\n      pop\n        /* \"@openzeppelin/contracts/utils/Strings.sol\":844:994  while (value != 0) {... */\n    tag_552:\n        /* \"@openzeppelin/contracts/utils/Strings.sol\":851:861  value != 0 */\n      dup5\n      iszero\n        /* \"@openzeppelin/contracts/utils/Strings.sol\":844:994  while (value != 0) {... */\n      tag_542\n      jumpi\n        /* \"@openzeppelin/contracts/utils/Strings.sol\":877:888  digits -= 1 */\n      tag_554\n        /* \"@openzeppelin/contracts/utils/Strings.sol\":887:888  1 */\n      0x01\n        /* \"@openzeppelin/contracts/utils/Strings.sol\":877:888  digits -= 1 */\n      dup4\n      tag_555\n      jump\t// in\n    tag_554:\n      swap2\n      pop\n        /* \"@openzeppelin/contracts/utils/Strings.sol\":945:955  value % 10 */\n      tag_556\n        /* \"@openzeppelin/contracts/utils/Strings.sol\":953:955  10 */\n      0x0a\n        /* \"@openzeppelin/contracts/utils/Strings.sol\":945:950  value */\n      dup7\n        /* \"@openzeppelin/contracts/utils/Strings.sol\":945:955  value % 10 */\n      tag_557\n      jump\t// in\n    tag_556:\n        /* \"@openzeppelin/contracts/utils/Strings.sol\":932:956  48 + uint256(value % 10) */\n      tag_558\n      swap1\n        /* \"@openzeppelin/contracts/utils/Strings.sol\":932:934  48 */\n      0x30\n        /* \"@openzeppelin/contracts/utils/Strings.sol\":932:956  48 + uint256(value % 10) */\n      tag_292\n      jump\t// in\n    tag_558:\n        /* \"@openzeppelin/contracts/utils/Strings.sol\":919:958  bytes1(uint8(48 + uint256(value % 10))) */\n      0xf8\n      shl\n        /* \"@openzeppelin/contracts/utils/Strings.sol\":902:908  buffer */\n      dup2\n        /* \"@openzeppelin/contracts/utils/Strings.sol\":909:915  digits */\n      dup4\n        /* \"@openzeppelin/contracts/utils/Strings.sol\":902:916  buffer[digits] */\n      dup2\n      mload\n      dup2\n      lt\n      tag_560\n      jumpi\n      tag_560\n      tag_561\n      jump\t// in\n    tag_560:\n      0x20\n      add\n      add\n        /* \"@openzeppelin/contracts/utils/Strings.sol\":902:958  buffer[digits] = bytes1(uint8(48 + uint256(value % 10))) */\n      swap1\n      not(sub(shl(0xf8, 0x01), 0x01))\n      and\n      swap1\n      dup2\n      0x00\n      byte\n      swap1\n      mstore8\n      pop\n        /* \"@openzeppelin/contracts/utils/Strings.sol\":972:983  value /= 10 */\n      tag_562\n        /* \"@openzeppelin/contracts/utils/Strings.sol\":981:983  10 */\n      0x0a\n        /* \"@openzeppelin/contracts/utils/Strings.sol\":972:983  value /= 10 */\n      dup7\n      tag_323\n      jump\t// in\n    tag_562:\n      swap5\n      pop\n        /* \"@openzeppelin/contracts/utils/Strings.sol\":844:994  while (value != 0) {... */\n      jump(tag_552)\n        /* \"@openzeppelin/contracts/utils/cryptography/MerkleProof.sol\":1398:2060  function processProof(bytes32[] memory proof, bytes32 leaf) internal pure returns (bytes32) {... */\n    tag_509:\n        /* \"@openzeppelin/contracts/utils/cryptography/MerkleProof.sol\":1481:1488  bytes32 */\n      0x00\n        /* \"@openzeppelin/contracts/utils/cryptography/MerkleProof.sol\":1523:1527  leaf */\n      dup2\n        /* \"@openzeppelin/contracts/utils/cryptography/MerkleProof.sol\":1481:1488  bytes32 */\n      dup2\n        /* \"@openzeppelin/contracts/utils/cryptography/MerkleProof.sol\":1537:2025  for (uint256 i = 0; i < proof.length; i++) {... */\n    tag_566:\n        /* \"@openzeppelin/contracts/utils/cryptography/MerkleProof.sol\":1561:1566  proof */\n      dup5\n        /* \"@openzeppelin/contracts/utils/cryptography/MerkleProof.sol\":1561:1573  proof.length */\n      mload\n        /* \"@openzeppelin/contracts/utils/cryptography/MerkleProof.sol\":1557:1558  i */\n      dup2\n        /* \"@openzeppelin/contracts/utils/cryptography/MerkleProof.sol\":1557:1573  i < proof.length */\n      lt\n        /* \"@openzeppelin/contracts/utils/cryptography/MerkleProof.sol\":1537:2025  for (uint256 i = 0; i < proof.length; i++) {... */\n      iszero\n      tag_368\n      jumpi\n        /* \"@openzeppelin/contracts/utils/cryptography/MerkleProof.sol\":1594:1614  bytes32 proofElement */\n      0x00\n        /* \"@openzeppelin/contracts/utils/cryptography/MerkleProof.sol\":1617:1622  proof */\n      dup6\n        /* \"@openzeppelin/contracts/utils/cryptography/MerkleProof.sol\":1623:1624  i */\n      dup3\n        /* \"@openzeppelin/contracts/utils/cryptography/MerkleProof.sol\":1617:1625  proof[i] */\n      dup2\n      mload\n      dup2\n      lt\n      tag_570\n      jumpi\n      tag_570\n      tag_561\n      jump\t// in\n    tag_570:\n      0x20\n      mul\n      0x20\n      add\n      add\n      mload\n        /* \"@openzeppelin/contracts/utils/cryptography/MerkleProof.sol\":1594:1625  bytes32 proofElement = proof[i] */\n      swap1\n      pop\n        /* \"@openzeppelin/contracts/utils/cryptography/MerkleProof.sol\":1659:1671  proofElement */\n      dup1\n        /* \"@openzeppelin/contracts/utils/cryptography/MerkleProof.sol\":1643:1655  computedHash */\n      dup4\n        /* \"@openzeppelin/contracts/utils/cryptography/MerkleProof.sol\":1643:1671  computedHash <= proofElement */\n      gt\n        /* \"@openzeppelin/contracts/utils/cryptography/MerkleProof.sol\":1639:2015  if (computedHash <= proofElement) {... */\n      tag_571\n      jumpi\n        /* \"@openzeppelin/contracts/utils/cryptography/MerkleProof.sol\":2134:2147  bytes32 value */\n      0x00\n        /* \"@openzeppelin/contracts/utils/cryptography/MerkleProof.sol\":2182:2197  mstore(0x00, a) */\n      dup4\n      dup2\n      mstore\n        /* \"@openzeppelin/contracts/utils/cryptography/MerkleProof.sol\":2217:2221  0x20 */\n      0x20\n        /* \"@openzeppelin/contracts/utils/cryptography/MerkleProof.sol\":2210:2225  mstore(0x20, b) */\n      dup3\n      swap1\n      mstore\n        /* \"@openzeppelin/contracts/utils/cryptography/MerkleProof.sol\":2263:2267  0x40 */\n      0x40\n        /* \"@openzeppelin/contracts/utils/cryptography/MerkleProof.sol\":2247:2268  keccak256(0x00, 0x40) */\n      swap1\n      keccak256\n        /* \"@openzeppelin/contracts/utils/cryptography/MerkleProof.sol\":1769:1826  computedHash = _efficientHash(computedHash, proofElement) */\n      swap3\n      pop\n        /* \"@openzeppelin/contracts/utils/cryptography/MerkleProof.sol\":1639:2015  if (computedHash <= proofElement) {... */\n      jump(tag_574)\n    tag_571:\n        /* \"@openzeppelin/contracts/utils/cryptography/MerkleProof.sol\":2134:2147  bytes32 value */\n      0x00\n        /* \"@openzeppelin/contracts/utils/cryptography/MerkleProof.sol\":2182:2197  mstore(0x00, a) */\n      dup2\n      dup2\n      mstore\n        /* \"@openzeppelin/contracts/utils/cryptography/MerkleProof.sol\":2217:2221  0x20 */\n      0x20\n        /* \"@openzeppelin/contracts/utils/cryptography/MerkleProof.sol\":2210:2225  mstore(0x20, b) */\n      dup5\n      swap1\n      mstore\n        /* \"@openzeppelin/contracts/utils/cryptography/MerkleProof.sol\":2263:2267  0x40 */\n      0x40\n        /* \"@openzeppelin/contracts/utils/cryptography/MerkleProof.sol\":2247:2268  keccak256(0x00, 0x40) */\n      swap1\n      keccak256\n        /* \"@openzeppelin/contracts/utils/cryptography/MerkleProof.sol\":1943:2000  computedHash = _efficientHash(proofElement, computedHash) */\n      swap3\n      pop\n        /* \"@openzeppelin/contracts/utils/cryptography/MerkleProof.sol\":1639:2015  if (computedHash <= proofElement) {... */\n    tag_574:\n      pop\n        /* \"@openzeppelin/contracts/utils/cryptography/MerkleProof.sol\":1575:1578  i++ */\n      dup1\n      tag_576\n      dup2\n      tag_371\n      jump\t// in\n    tag_576:\n      swap2\n      pop\n      pop\n        /* \"@openzeppelin/contracts/utils/cryptography/MerkleProof.sol\":1537:2025  for (uint256 i = 0; i < proof.length; i++) {... */\n      jump(tag_566)\n        /* \"erc721a/contracts/ERC721A.sol\":12149:12306  function _safeMint(... */\n    tag_512:\n        /* \"erc721a/contracts/ERC721A.sol\":12267:12299  _mint(to, quantity, _data, true) */\n      tag_274\n        /* \"erc721a/contracts/ERC721A.sol\":12273:12275  to */\n      dup4\n        /* \"erc721a/contracts/ERC721A.sol\":12277:12285  quantity */\n      dup4\n        /* \"erc721a/contracts/ERC721A.sol\":12287:12292  _data */\n      dup4\n        /* \"erc721a/contracts/ERC721A.sol\":12294:12298  true */\n      0x01\n        /* \"erc721a/contracts/ERC721A.sol\":12686:12706  uint256 startTokenId */\n      0x00\n        /* \"erc721a/contracts/ERC721A.sol\":12709:12722  _currentIndex */\n      sload\n      sub(shl(0xa0, 0x01), 0x01)\n        /* \"erc721a/contracts/ERC721A.sol\":12736:12752  to == address(0) */\n      dup6\n      and\n        /* \"erc721a/contracts/ERC721A.sol\":12732:12780  if (to == address(0)) revert MintToZeroAddress() */\n      tag_582\n      jumpi\n        /* \"erc721a/contracts/ERC721A.sol\":12761:12780  MintToZeroAddress() */\n      mload(0x40)\n      shl(0xe8, 0x2e0763)\n      dup2\n      mstore\n      0x04\n      add\n      mload(0x40)\n      dup1\n      swap2\n      sub\n      swap1\n      revert\n        /* \"erc721a/contracts/ERC721A.sol\":12732:12780  if (to == address(0)) revert MintToZeroAddress() */\n    tag_582:\n        /* \"erc721a/contracts/ERC721A.sol\":12794:12807  quantity == 0 */\n      dup4\n        /* \"erc721a/contracts/ERC721A.sol\":12790:12834  if (quantity == 0) revert MintZeroQuantity() */\n      tag_583\n      jumpi\n        /* \"erc721a/contracts/ERC721A.sol\":12816:12834  MintZeroQuantity() */\n      mload(0x40)\n      shl(0xe0, 0xb562e8dd)\n      dup2\n      mstore\n      0x04\n      add\n      mload(0x40)\n      dup1\n      swap2\n      sub\n      swap1\n      revert\n        /* \"erc721a/contracts/ERC721A.sol\":12790:12834  if (quantity == 0) revert MintZeroQuantity() */\n    tag_583:\n      sub(shl(0xa0, 0x01), 0x01)\n        /* \"erc721a/contracts/ERC721A.sol\":13177:13193  _addressData[to] */\n      dup6\n      and\n      0x00\n      dup2\n      dup2\n      mstore\n        /* \"erc721a/contracts/ERC721A.sol\":13177:13189  _addressData */\n      0x05\n        /* \"erc721a/contracts/ERC721A.sol\":13177:13193  _addressData[to] */\n      0x20\n      swap1\n      dup2\n      mstore\n      0x40\n      dup1\n      dup4\n      keccak256\n        /* \"erc721a/contracts/ERC721A.sol\":13177:13221  _addressData[to].balance += uint64(quantity) */\n      dup1\n      sload\n      not(0xffffffffffffffffffffffffffffffff)\n        /* \"erc721a/contracts/ERC721A.sol\":13235:13284  _addressData[to].numberMinted += uint64(quantity) */\n      dup2\n      and\n      sub(shl(0x40, 0x01), 0x01)\n        /* \"erc721a/contracts/ERC721A.sol\":13177:13221  _addressData[to].balance += uint64(quantity) */\n      dup1\n      dup4\n      and\n      dup13\n      add\n      dup2\n      and\n        /* \"erc721a/contracts/ERC721A.sol\":13235:13284  _addressData[to].numberMinted += uint64(quantity) */\n      swap2\n      dup3\n      or\n      0x010000000000000000\n      not(0xffffffffffffffff)\n        /* \"erc721a/contracts/ERC721A.sol\":13177:13221  _addressData[to].balance += uint64(quantity) */\n      swap1\n      swap5\n      and\n      swap1\n      swap3\n      or\n        /* \"erc721a/contracts/ERC721A.sol\":13235:13284  _addressData[to].numberMinted += uint64(quantity) */\n      dup4\n      swap1\n      div\n      dup2\n      and\n      dup13\n      add\n      dup2\n      and\n      swap1\n      swap3\n      mul\n      or\n      swap1\n      swap2\n      sstore\n        /* \"erc721a/contracts/ERC721A.sol\":13299:13324  _ownerships[startTokenId] */\n      dup6\n      dup5\n      mstore\n        /* \"erc721a/contracts/ERC721A.sol\":13299:13310  _ownerships */\n      0x04\n        /* \"erc721a/contracts/ERC721A.sol\":13299:13324  _ownerships[startTokenId] */\n      swap1\n      swap3\n      mstore\n      swap1\n      swap2\n      keccak256\n        /* \"erc721a/contracts/ERC721A.sol\":13299:13334  _ownerships[startTokenId].addr = to */\n      dup1\n      sload\n      not(sub(shl(0xe0, 0x01), 0x01))\n        /* \"erc721a/contracts/ERC721A.sol\":13348:13414  _ownerships[startTokenId].startTimestamp = uint64(block.timestamp) */\n      and\n      swap1\n      swap3\n      or\n      shl(0xa0, 0x01)\n        /* \"erc721a/contracts/ERC721A.sol\":13398:13413  block.timestamp */\n      timestamp\n        /* \"erc721a/contracts/ERC721A.sol\":13348:13414  _ownerships[startTokenId].startTimestamp = uint64(block.timestamp) */\n      swap1\n      swap3\n      and\n      swap2\n      swap1\n      swap2\n      mul\n      or\n      swap1\n      sstore\n        /* \"erc721a/contracts/ERC721A.sol\":13299:13324  _ownerships[startTokenId] */\n      dup1\n        /* \"erc721a/contracts/ERC721A.sol\":13492:13515  updatedIndex + quantity */\n      dup1\n      dup6\n      add\n        /* \"erc721a/contracts/ERC721A.sol\":13534:13538  safe */\n      dup4\n        /* \"erc721a/contracts/ERC721A.sol\":13534:13557  safe && to.isContract() */\n      dup1\n      iszero\n      tag_586\n      jumpi\n      pop\n      sub(shl(0xa0, 0x01), 0x01)\n        /* \"erc721a/contracts/ERC721A.sol\":13542:13555  to.isContract */\n      dup8\n      and\n        /* \"@openzeppelin/contracts/utils/Address.sol\":1465:1484  account.code.length */\n      extcodesize\n        /* \"@openzeppelin/contracts/utils/Address.sol\":1465:1488  account.code.length > 0 */\n      iszero\n      iszero\n        /* \"erc721a/contracts/ERC721A.sol\":13542:13557  to.isContract() */\n    tag_586:\n        /* \"erc721a/contracts/ERC721A.sol\":13530:14158  if (safe && to.isContract()) {... */\n      iszero\n      tag_587\n      jumpi\n        /* \"erc721a/contracts/ERC721A.sol\":13577:13886  do {... */\n    tag_588:\n        /* \"erc721a/contracts/ERC721A.sol\":13607:13645  Transfer(address(0), to, updatedIndex) */\n      mload(0x40)\n        /* \"erc721a/contracts/ERC721A.sol\":13632:13644  updatedIndex */\n      dup3\n      swap1\n      sub(shl(0xa0, 0x01), 0x01)\n        /* \"erc721a/contracts/ERC721A.sol\":13607:13645  Transfer(address(0), to, updatedIndex) */\n      dup10\n      and\n      swap1\n        /* \"erc721a/contracts/ERC721A.sol\":13624:13625  0 */\n      0x00\n      swap1\n        /* \"erc721a/contracts/ERC721A.sol\":13607:13645  Transfer(address(0), to, updatedIndex) */\n      0xddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef\n      swap1\n        /* \"erc721a/contracts/ERC721A.sol\":13624:13625  0 */\n      dup3\n      swap1\n        /* \"erc721a/contracts/ERC721A.sol\":13607:13645  Transfer(address(0), to, updatedIndex) */\n      log4\n        /* \"erc721a/contracts/ERC721A.sol\":13672:13741  _checkContractOnERC721Received(address(0), to, updatedIndex++, _data) */\n      tag_591\n        /* \"erc721a/contracts/ERC721A.sol\":13711:13712  0 */\n      0x00\n        /* \"erc721a/contracts/ERC721A.sol\":13715:13717  to */\n      dup9\n        /* \"erc721a/contracts/ERC721A.sol\":13719:13733  updatedIndex++ */\n      dup5\n      dup1\n      0x01\n      add\n      swap6\n      pop\n        /* \"erc721a/contracts/ERC721A.sol\":13735:13740  _data */\n      dup9\n        /* \"erc721a/contracts/ERC721A.sol\":13672:13702  _checkContractOnERC721Received */\n      tag_426\n        /* \"erc721a/contracts/ERC721A.sol\":13672:13741  _checkContractOnERC721Received(address(0), to, updatedIndex++, _data) */\n      jump\t// in\n    tag_591:\n        /* \"erc721a/contracts/ERC721A.sol\":13667:13839  if (!_checkContractOnERC721Received(address(0), to, updatedIndex++, _data)) {... */\n      tag_592\n      jumpi\n        /* \"erc721a/contracts/ERC721A.sol\":13776:13816  TransferToNonERC721ReceiverImplementer() */\n      mload(0x40)\n      shl(0xe1, 0x68d2bf6b)\n      dup2\n      mstore\n      0x04\n      add\n      mload(0x40)\n      dup1\n      swap2\n      sub\n      swap1\n      revert\n        /* \"erc721a/contracts/ERC721A.sol\":13667:13839  if (!_checkContractOnERC721Received(address(0), to, updatedIndex++, _data)) {... */\n    tag_592:\n        /* \"erc721a/contracts/ERC721A.sol\":13881:13884  end */\n      dup1\n        /* \"erc721a/contracts/ERC721A.sol\":13865:13877  updatedIndex */\n      dup3\n        /* \"erc721a/contracts/ERC721A.sol\":13865:13884  updatedIndex != end */\n      eq\n      iszero\n        /* \"erc721a/contracts/ERC721A.sol\":13577:13886  do {... */\n      tag_588\n      jumpi\n        /* \"erc721a/contracts/ERC721A.sol\":13965:13977  startTokenId */\n      dup3\n        /* \"erc721a/contracts/ERC721A.sol\":13948:13961  _currentIndex */\n      sload(0x00)\n        /* \"erc721a/contracts/ERC721A.sol\":13948:13977  _currentIndex != startTokenId */\n      eq\n        /* \"erc721a/contracts/ERC721A.sol\":13944:13987  if (_currentIndex != startTokenId) revert() */\n      tag_593\n      jumpi\n        /* \"erc721a/contracts/ERC721A.sol\":13979:13987  revert() */\n      0x00\n      dup1\n      revert\n        /* \"erc721a/contracts/ERC721A.sol\":13944:13987  if (_currentIndex != startTokenId) revert() */\n    tag_593:\n        /* \"erc721a/contracts/ERC721A.sol\":13530:14158  if (safe && to.isContract()) {... */\n      jump(tag_594)\n    tag_587:\n        /* \"erc721a/contracts/ERC721A.sol\":14026:14144  do {... */\n    tag_595:\n        /* \"erc721a/contracts/ERC721A.sol\":14056:14096  Transfer(address(0), to, updatedIndex++) */\n      mload(0x40)\n        /* \"erc721a/contracts/ERC721A.sol\":14081:14095  updatedIndex++ */\n      0x01\n      dup4\n      add\n      swap3\n      swap1\n      sub(shl(0xa0, 0x01), 0x01)\n        /* \"erc721a/contracts/ERC721A.sol\":14056:14096  Transfer(address(0), to, updatedIndex++) */\n      dup10\n      and\n      swap1\n        /* \"erc721a/contracts/ERC721A.sol\":14073:14074  0 */\n      0x00\n      swap1\n        /* \"erc721a/contracts/ERC721A.sol\":14056:14096  Transfer(address(0), to, updatedIndex++) */\n      0xddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef\n      swap1\n        /* \"erc721a/contracts/ERC721A.sol\":14073:14074  0 */\n      dup3\n      swap1\n        /* \"erc721a/contracts/ERC721A.sol\":14056:14096  Transfer(address(0), to, updatedIndex++) */\n      log4\n        /* \"erc721a/contracts/ERC721A.sol\":14139:14142  end */\n      dup1\n        /* \"erc721a/contracts/ERC721A.sol\":14123:14135  updatedIndex */\n      dup3\n        /* \"erc721a/contracts/ERC721A.sol\":14123:14142  updatedIndex != end */\n      eq\n      iszero\n        /* \"erc721a/contracts/ERC721A.sol\":14026:14144  do {... */\n      tag_595\n      jumpi\n        /* \"erc721a/contracts/ERC721A.sol\":13530:14158  if (safe && to.isContract()) {... */\n    tag_594:\n      pop\n        /* \"erc721a/contracts/ERC721A.sol\":14171:14184  _currentIndex */\n      0x00\n        /* \"erc721a/contracts/ERC721A.sol\":14171:14199  _currentIndex = updatedIndex */\n      sstore\n        /* \"erc721a/contracts/ERC721A.sol\":14219:14279  _afterTokenTransfers(address(0), to, startTokenId, quantity) */\n      tag_505\n        /* \"erc721a/contracts/ERC721A.sol\":10901:11260  function safeTransferFrom(... */\n      jump\n    tag_254:\n      dup3\n      dup1\n      sload\n      tag_599\n      swap1\n      tag_257\n      jump\t// in\n    tag_599:\n      swap1\n      0x00\n      mstore\n      keccak256(0x00, 0x20)\n      swap1\n      0x1f\n      add\n      0x20\n      swap1\n      div\n      dup2\n      add\n      swap3\n      dup3\n      tag_601\n      jumpi\n      0x00\n      dup6\n      sstore\n      jump(tag_604)\n    tag_601:\n      dup3\n      0x1f\n      lt\n      tag_602\n      jumpi\n      dup1\n      mload\n      not(0xff)\n      and\n      dup4\n      dup1\n      add\n      or\n      dup6\n      sstore\n      jump(tag_604)\n    tag_602:\n      dup3\n      dup1\n      add\n      0x01\n      add\n      dup6\n      sstore\n      dup3\n      iszero\n      tag_604\n      jumpi\n      swap2\n      dup3\n      add\n    tag_603:\n      dup3\n      dup2\n      gt\n      iszero\n      tag_604\n      jumpi\n      dup3\n      mload\n      dup3\n      sstore\n      swap2\n      0x20\n      add\n      swap2\n      swap1\n      0x01\n      add\n      swap1\n      jump(tag_603)\n    tag_604:\n      pop\n      tag_605\n      swap3\n      swap2\n      pop\n      tag_606\n      jump\t// in\n    tag_605:\n      pop\n      swap1\n      jump\t// out\n    tag_606:\n    tag_607:\n      dup1\n      dup3\n      gt\n      iszero\n      tag_605\n      jumpi\n      0x00\n      dup2\n      sstore\n      0x01\n      add\n      jump(tag_607)\n        /* \"#utility.yul\":14:145   */\n    tag_609:\n      not(sub(shl(0xe0, 0x01), 0x01))\n        /* \"#utility.yul\":88:120   */\n      dup2\n      and\n        /* \"#utility.yul\":78:121   */\n      dup2\n      eq\n        /* \"#utility.yul\":68:139   */\n      tag_406\n      jumpi\n        /* \"#utility.yul\":135:136   */\n      0x00\n        /* \"#utility.yul\":132:133   */\n      dup1\n        /* \"#utility.yul\":125:137   */\n      revert\n        /* \"#utility.yul\":150:395   */\n    tag_55:\n        /* \"#utility.yul\":208:214   */\n      0x00\n        /* \"#utility.yul\":261:263   */\n      0x20\n        /* \"#utility.yul\":249:258   */\n      dup3\n        /* \"#utility.yul\":240:247   */\n      dup5\n        /* \"#utility.yul\":236:259   */\n      sub\n        /* \"#utility.yul\":232:264   */\n      slt\n        /* \"#utility.yul\":229:281   */\n      iszero\n      tag_624\n      jumpi\n        /* \"#utility.yul\":277:278   */\n      0x00\n        /* \"#utility.yul\":274:275   */\n      dup1\n        /* \"#utility.yul\":267:279   */\n      revert\n        /* \"#utility.yul\":229:281   */\n    tag_624:\n        /* \"#utility.yul\":316:325   */\n      dup2\n        /* \"#utility.yul\":303:326   */\n      calldataload\n        /* \"#utility.yul\":335:365   */\n      tag_458\n        /* \"#utility.yul\":359:364   */\n      dup2\n        /* \"#utility.yul\":335:365   */\n      tag_609\n      jump\t// in\n        /* \"#utility.yul\":592:765   */\n    tag_610:\n        /* \"#utility.yul\":660:680   */\n      dup1\n      calldataload\n      sub(shl(0xa0, 0x01), 0x01)\n        /* \"#utility.yul\":709:740   */\n      dup2\n      and\n        /* \"#utility.yul\":699:741   */\n      dup2\n      eq\n        /* \"#utility.yul\":689:759   */\n      tag_628\n      jumpi\n        /* \"#utility.yul\":755:756   */\n      0x00\n        /* \"#utility.yul\":752:753   */\n      dup1\n        /* \"#utility.yul\":745:757   */\n      revert\n        /* \"#utility.yul\":689:759   */\n    tag_628:\n        /* \"#utility.yul\":592:765   */\n      swap2\n      swap1\n      pop\n      jump\t// out\n        /* \"#utility.yul\":770:956   */\n    tag_62:\n        /* \"#utility.yul\":829:835   */\n      0x00\n        /* \"#utility.yul\":882:884   */\n      0x20\n        /* \"#utility.yul\":870:879   */\n      dup3\n        /* \"#utility.yul\":861:868   */\n      dup5\n        /* \"#utility.yul\":857:880   */\n      sub\n        /* \"#utility.yul\":853:885   */\n      slt\n        /* \"#utility.yul\":850:902   */\n      iszero\n      tag_630\n      jumpi\n        /* \"#utility.yul\":898:899   */\n      0x00\n        /* \"#utility.yul\":895:896   */\n      dup1\n        /* \"#utility.yul\":888:900   */\n      revert\n        /* \"#utility.yul\":850:902   */\n    tag_630:\n        /* \"#utility.yul\":921:950   */\n      tag_458\n        /* \"#utility.yul\":940:949   */\n      dup3\n        /* \"#utility.yul\":921:950   */\n      tag_610\n      jump\t// in\n        /* \"#utility.yul\":1143:1270   */\n    tag_365:\n        /* \"#utility.yul\":1204:1214   */\n      0x4e487b71\n        /* \"#utility.yul\":1199:1202   */\n      0xe0\n        /* \"#utility.yul\":1195:1215   */\n      shl\n        /* \"#utility.yul\":1192:1193   */\n      0x00\n        /* \"#utility.yul\":1185:1216   */\n      mstore\n        /* \"#utility.yul\":1235:1239   */\n      0x41\n        /* \"#utility.yul\":1232:1233   */\n      0x04\n        /* \"#utility.yul\":1225:1240   */\n      mstore\n        /* \"#utility.yul\":1259:1263   */\n      0x24\n        /* \"#utility.yul\":1256:1257   */\n      0x00\n        /* \"#utility.yul\":1249:1264   */\n      revert\n        /* \"#utility.yul\":1275:1550   */\n    tag_611:\n        /* \"#utility.yul\":1346:1348   */\n      0x40\n        /* \"#utility.yul\":1340:1349   */\n      mload\n        /* \"#utility.yul\":1411:1413   */\n      0x1f\n        /* \"#utility.yul\":1392:1405   */\n      dup3\n      add\n      not(0x1f)\n        /* \"#utility.yul\":1388:1415   */\n      and\n        /* \"#utility.yul\":1376:1416   */\n      dup2\n      add\n      sub(shl(0x40, 0x01), 0x01)\n        /* \"#utility.yul\":1431:1465   */\n      dup2\n      gt\n        /* \"#utility.yul\":1467:1489   */\n      dup3\n      dup3\n      lt\n        /* \"#utility.yul\":1428:1490   */\n      or\n        /* \"#utility.yul\":1425:1513   */\n      iszero\n      tag_636\n      jumpi\n        /* \"#utility.yul\":1493:1511   */\n      tag_636\n      tag_365\n      jump\t// in\n    tag_636:\n        /* \"#utility.yul\":1529:1531   */\n      0x40\n        /* \"#utility.yul\":1522:1544   */\n      mstore\n        /* \"#utility.yul\":1275:1550   */\n      swap2\n      swap1\n      pop\n      jump\t// out\n        /* \"#utility.yul\":1555:1962   */\n    tag_612:\n        /* \"#utility.yul\":1620:1625   */\n      0x00\n      sub(shl(0x40, 0x01), 0x01)\n        /* \"#utility.yul\":1646:1652   */\n      dup4\n        /* \"#utility.yul\":1643:1673   */\n      gt\n        /* \"#utility.yul\":1640:1696   */\n      iszero\n      tag_639\n      jumpi\n        /* \"#utility.yul\":1676:1694   */\n      tag_639\n      tag_365\n      jump\t// in\n    tag_639:\n        /* \"#utility.yul\":1714:1771   */\n      tag_640\n        /* \"#utility.yul\":1759:1761   */\n      0x1f\n        /* \"#utility.yul\":1738:1753   */\n      dup5\n      add\n      not(0x1f)\n        /* \"#utility.yul\":1734:1763   */\n      and\n        /* \"#utility.yul\":1765:1769   */\n      0x20\n        /* \"#utility.yul\":1730:1770   */\n      add\n        /* \"#utility.yul\":1714:1771   */\n      tag_611\n      jump\t// in\n    tag_640:\n        /* \"#utility.yul\":1705:1771   */\n      swap1\n      pop\n        /* \"#utility.yul\":1794:1800   */\n      dup3\n        /* \"#utility.yul\":1787:1792   */\n      dup2\n        /* \"#utility.yul\":1780:1801   */\n      mstore\n        /* \"#utility.yul\":1834:1837   */\n      dup4\n        /* \"#utility.yul\":1825:1831   */\n      dup4\n        /* \"#utility.yul\":1820:1823   */\n      dup4\n        /* \"#utility.yul\":1816:1832   */\n      add\n        /* \"#utility.yul\":1813:1838   */\n      gt\n        /* \"#utility.yul\":1810:1855   */\n      iszero\n      tag_641\n      jumpi\n        /* \"#utility.yul\":1851:1852   */\n      0x00\n        /* \"#utility.yul\":1848:1849   */\n      dup1\n        /* \"#utility.yul\":1841:1853   */\n      revert\n        /* \"#utility.yul\":1810:1855   */\n    tag_641:\n        /* \"#utility.yul\":1900:1906   */\n      dup3\n        /* \"#utility.yul\":1895:1898   */\n      dup3\n        /* \"#utility.yul\":1888:1892   */\n      0x20\n        /* \"#utility.yul\":1881:1886   */\n      dup4\n        /* \"#utility.yul\":1877:1893   */\n      add\n        /* \"#utility.yul\":1864:1907   */\n      calldatacopy\n        /* \"#utility.yul\":1954:1955   */\n      0x00\n        /* \"#utility.yul\":1947:1951   */\n      0x20\n        /* \"#utility.yul\":1938:1944   */\n      dup5\n        /* \"#utility.yul\":1931:1936   */\n      dup4\n        /* \"#utility.yul\":1927:1945   */\n      add\n        /* \"#utility.yul\":1923:1952   */\n      add\n        /* \"#utility.yul\":1916:1956   */\n      mstore\n        /* \"#utility.yul\":1555:1962   */\n      swap4\n      swap3\n      pop\n      pop\n      pop\n      jump\t// out\n        /* \"#utility.yul\":1967:2418   */\n    tag_69:\n        /* \"#utility.yul\":2036:2042   */\n      0x00\n        /* \"#utility.yul\":2089:2091   */\n      0x20\n        /* \"#utility.yul\":2077:2086   */\n      dup3\n        /* \"#utility.yul\":2068:2075   */\n      dup5\n        /* \"#utility.yul\":2064:2087   */\n      sub\n        /* \"#utility.yul\":2060:2092   */\n      slt\n        /* \"#utility.yul\":2057:2109   */\n      iszero\n      tag_643\n      jumpi\n        /* \"#utility.yul\":2105:2106   */\n      0x00\n        /* \"#utility.yul\":2102:2103   */\n      dup1\n        /* \"#utility.yul\":2095:2107   */\n      revert\n        /* \"#utility.yul\":2057:2109   */\n    tag_643:\n        /* \"#utility.yul\":2145:2154   */\n      dup2\n        /* \"#utility.yul\":2132:2155   */\n      calldataload\n      sub(shl(0x40, 0x01), 0x01)\n        /* \"#utility.yul\":2170:2176   */\n      dup2\n        /* \"#utility.yul\":2167:2197   */\n      gt\n        /* \"#utility.yul\":2164:2214   */\n      iszero\n      tag_644\n      jumpi\n        /* \"#utility.yul\":2210:2211   */\n      0x00\n        /* \"#utility.yul\":2207:2208   */\n      dup1\n        /* \"#utility.yul\":2200:2212   */\n      revert\n        /* \"#utility.yul\":2164:2214   */\n    tag_644:\n        /* \"#utility.yul\":2233:2255   */\n      dup3\n      add\n        /* \"#utility.yul\":2286:2290   */\n      0x1f\n        /* \"#utility.yul\":2278:2291   */\n      dup2\n      add\n        /* \"#utility.yul\":2274:2301   */\n      dup5\n      sgt\n        /* \"#utility.yul\":2264:2319   */\n      tag_645\n      jumpi\n        /* \"#utility.yul\":2315:2316   */\n      0x00\n        /* \"#utility.yul\":2312:2313   */\n      dup1\n        /* \"#utility.yul\":2305:2317   */\n      revert\n        /* \"#utility.yul\":2264:2319   */\n    tag_645:\n        /* \"#utility.yul\":2338:2412   */\n      tag_542\n        /* \"#utility.yul\":2404:2411   */\n      dup5\n        /* \"#utility.yul\":2399:2401   */\n      dup3\n        /* \"#utility.yul\":2386:2402   */\n      calldataload\n        /* \"#utility.yul\":2381:2383   */\n      0x20\n        /* \"#utility.yul\":2377:2379   */\n      dup5\n        /* \"#utility.yul\":2373:2384   */\n      add\n        /* \"#utility.yul\":2338:2412   */\n      tag_612\n      jump\t// in\n        /* \"#utility.yul\":2423:2681   */\n    tag_613:\n        /* \"#utility.yul\":2495:2496   */\n      0x00\n        /* \"#utility.yul\":2505:2618   */\n    tag_648:\n        /* \"#utility.yul\":2519:2525   */\n      dup4\n        /* \"#utility.yul\":2516:2517   */\n      dup2\n        /* \"#utility.yul\":2513:2526   */\n      lt\n        /* \"#utility.yul\":2505:2618   */\n      iszero\n      tag_650\n      jumpi\n        /* \"#utility.yul\":2595:2606   */\n      dup2\n      dup2\n      add\n        /* \"#utility.yul\":2589:2607   */\n      mload\n        /* \"#utility.yul\":2576:2587   */\n      dup4\n      dup3\n      add\n        /* \"#utility.yul\":2569:2608   */\n      mstore\n        /* \"#utility.yul\":2541:2543   */\n      0x20\n        /* \"#utility.yul\":2534:2544   */\n      add\n        /* \"#utility.yul\":2505:2618   */\n      jump(tag_648)\n    tag_650:\n        /* \"#utility.yul\":2636:2642   */\n      dup4\n        /* \"#utility.yul\":2633:2634   */\n      dup2\n        /* \"#utility.yul\":2630:2643   */\n      gt\n        /* \"#utility.yul\":2627:2675   */\n      iszero\n      tag_427\n      jumpi\n      pop\n      pop\n        /* \"#utility.yul\":2671:2672   */\n      0x00\n        /* \"#utility.yul\":2653:2669   */\n      swap2\n      add\n        /* \"#utility.yul\":2646:2673   */\n      mstore\n        /* \"#utility.yul\":2423:2681   */\n      jump\t// out\n        /* \"#utility.yul\":2686:2955   */\n    tag_614:\n        /* \"#utility.yul\":2739:2742   */\n      0x00\n        /* \"#utility.yul\":2777:2782   */\n      dup2\n        /* \"#utility.yul\":2771:2783   */\n      mload\n        /* \"#utility.yul\":2804:2810   */\n      dup1\n        /* \"#utility.yul\":2799:2802   */\n      dup5\n        /* \"#utility.yul\":2792:2811   */\n      mstore\n        /* \"#utility.yul\":2820:2883   */\n      tag_653\n        /* \"#utility.yul\":2876:2882   */\n      dup2\n        /* \"#utility.yul\":2869:2873   */\n      0x20\n        /* \"#utility.yul\":2864:2867   */\n      dup7\n        /* \"#utility.yul\":2860:2874   */\n      add\n        /* \"#utility.yul\":2853:2857   */\n      0x20\n        /* \"#utility.yul\":2846:2851   */\n      dup7\n        /* \"#utility.yul\":2842:2858   */\n      add\n        /* \"#utility.yul\":2820:2883   */\n      tag_613\n      jump\t// in\n    tag_653:\n        /* \"#utility.yul\":2937:2939   */\n      0x1f\n        /* \"#utility.yul\":2916:2931   */\n      add\n      not(0x1f)\n        /* \"#utility.yul\":2912:2941   */\n      and\n        /* \"#utility.yul\":2903:2942   */\n      swap3\n      swap1\n      swap3\n      add\n        /* \"#utility.yul\":2944:2948   */\n      0x20\n        /* \"#utility.yul\":2899:2949   */\n      add\n      swap3\n        /* \"#utility.yul\":2686:2955   */\n      swap2\n      pop\n      pop\n      jump\t// out\n        /* \"#utility.yul\":2960:3191   */\n    tag_75:\n        /* \"#utility.yul\":3109:3111   */\n      0x20\n        /* \"#utility.yul\":3098:3107   */\n      dup2\n        /* \"#utility.yul\":3091:3112   */\n      mstore\n        /* \"#utility.yul\":3072:3076   */\n      0x00\n        /* \"#utility.yul\":3129:3185   */\n      tag_458\n        /* \"#utility.yul\":3181:3183   */\n      0x20\n        /* \"#utility.yul\":3170:3179   */\n      dup4\n        /* \"#utility.yul\":3166:3184   */\n      add\n        /* \"#utility.yul\":3158:3164   */\n      dup5\n        /* \"#utility.yul\":3129:3185   */\n      tag_614\n      jump\t// in\n        /* \"#utility.yul\":3196:3376   */\n    tag_83:\n        /* \"#utility.yul\":3255:3261   */\n      0x00\n        /* \"#utility.yul\":3308:3310   */\n      0x20\n        /* \"#utility.yul\":3296:3305   */\n      dup3\n        /* \"#utility.yul\":3287:3294   */\n      dup5\n        /* \"#utility.yul\":3283:3306   */\n      sub\n        /* \"#utility.yul\":3279:3311   */\n      slt\n        /* \"#utility.yul\":3276:3328   */\n      iszero\n      tag_657\n      jumpi\n        /* \"#utility.yul\":3324:3325   */\n      0x00\n        /* \"#utility.yul\":3321:3322   */\n      dup1\n        /* \"#utility.yul\":3314:3326   */\n      revert\n        /* \"#utility.yul\":3276:3328   */\n    tag_657:\n      pop\n        /* \"#utility.yul\":3347:3370   */\n      calldataload\n      swap2\n        /* \"#utility.yul\":3196:3376   */\n      swap1\n      pop\n      jump\t// out\n        /* \"#utility.yul\":3589:3843   */\n    tag_90:\n        /* \"#utility.yul\":3657:3663   */\n      0x00\n        /* \"#utility.yul\":3665:3671   */\n      dup1\n        /* \"#utility.yul\":3718:3720   */\n      0x40\n        /* \"#utility.yul\":3706:3715   */\n      dup4\n        /* \"#utility.yul\":3697:3704   */\n      dup6\n        /* \"#utility.yul\":3693:3716   */\n      sub\n        /* \"#utility.yul\":3689:3721   */\n      slt\n        /* \"#utility.yul\":3686:3738   */\n      iszero\n      tag_660\n      jumpi\n        /* \"#utility.yul\":3734:3735   */\n      0x00\n        /* \"#utility.yul\":3731:3732   */\n      dup1\n        /* \"#utility.yul\":3724:3736   */\n      revert\n        /* \"#utility.yul\":3686:3738   */\n    tag_660:\n        /* \"#utility.yul\":3757:3786   */\n      tag_661\n        /* \"#utility.yul\":3776:3785   */\n      dup4\n        /* \"#utility.yul\":3757:3786   */\n      tag_610\n      jump\t// in\n    tag_661:\n        /* \"#utility.yul\":3747:3786   */\n      swap5\n        /* \"#utility.yul\":3833:3835   */\n      0x20\n        /* \"#utility.yul\":3818:3836   */\n      swap4\n      swap1\n      swap4\n      add\n        /* \"#utility.yul\":3805:3837   */\n      calldataload\n      swap4\n      pop\n      pop\n      pop\n        /* \"#utility.yul\":3589:3843   */\n      jump\t// out\n        /* \"#utility.yul\":3848:4176   */\n    tag_104:\n        /* \"#utility.yul\":3925:3931   */\n      0x00\n        /* \"#utility.yul\":3933:3939   */\n      dup1\n        /* \"#utility.yul\":3941:3947   */\n      0x00\n        /* \"#utility.yul\":3994:3996   */\n      0x60\n        /* \"#utility.yul\":3982:3991   */\n      dup5\n        /* \"#utility.yul\":3973:3980   */\n      dup7\n        /* \"#utility.yul\":3969:3992   */\n      sub\n        /* \"#utility.yul\":3965:3997   */\n      slt\n        /* \"#utility.yul\":3962:4014   */\n      iszero\n      tag_663\n      jumpi\n        /* \"#utility.yul\":4010:4011   */\n      0x00\n        /* \"#utility.yul\":4007:4008   */\n      dup1\n        /* \"#utility.yul\":4000:4012   */\n      revert\n        /* \"#utility.yul\":3962:4014   */\n    tag_663:\n        /* \"#utility.yul\":4033:4062   */\n      tag_664\n        /* \"#utility.yul\":4052:4061   */\n      dup5\n        /* \"#utility.yul\":4033:4062   */\n      tag_610\n      jump\t// in\n    tag_664:\n        /* \"#utility.yul\":4023:4062   */\n      swap3\n      pop\n        /* \"#utility.yul\":4081:4119   */\n      tag_665\n        /* \"#utility.yul\":4115:4117   */\n      0x20\n        /* \"#utility.yul\":4104:4113   */\n      dup6\n        /* \"#utility.yul\":4100:4118   */\n      add\n        /* \"#utility.yul\":4081:4119   */\n      tag_610\n      jump\t// in\n    tag_665:\n        /* \"#utility.yul\":4071:4119   */\n      swap2\n      pop\n        /* \"#utility.yul\":4166:4168   */\n      0x40\n        /* \"#utility.yul\":4155:4164   */\n      dup5\n        /* \"#utility.yul\":4151:4169   */\n      add\n        /* \"#utility.yul\":4138:4170   */\n      calldataload\n        /* \"#utility.yul\":4128:4170   */\n      swap1\n      pop\n        /* \"#utility.yul\":3848:4176   */\n      swap3\n      pop\n      swap3\n      pop\n      swap3\n      jump\t// out\n        /* \"#utility.yul\":4181:5197   */\n    tag_108:\n        /* \"#utility.yul\":4274:4280   */\n      0x00\n        /* \"#utility.yul\":4282:4288   */\n      dup1\n        /* \"#utility.yul\":4335:4337   */\n      0x40\n        /* \"#utility.yul\":4323:4332   */\n      dup4\n        /* \"#utility.yul\":4314:4321   */\n      dup6\n        /* \"#utility.yul\":4310:4333   */\n      sub\n        /* \"#utility.yul\":4306:4338   */\n      slt\n        /* \"#utility.yul\":4303:4355   */\n      iszero\n      tag_667\n      jumpi\n        /* \"#utility.yul\":4351:4352   */\n      0x00\n        /* \"#utility.yul\":4348:4349   */\n      dup1\n        /* \"#utility.yul\":4341:4353   */\n      revert\n        /* \"#utility.yul\":4303:4355   */\n    tag_667:\n        /* \"#utility.yul\":4391:4400   */\n      dup3\n        /* \"#utility.yul\":4378:4401   */\n      calldataload\n      sub(shl(0x40, 0x01), 0x01)\n        /* \"#utility.yul\":4461:4463   */\n      dup1\n        /* \"#utility.yul\":4453:4459   */\n      dup3\n        /* \"#utility.yul\":4450:4464   */\n      gt\n        /* \"#utility.yul\":4447:4481   */\n      iszero\n      tag_668\n      jumpi\n        /* \"#utility.yul\":4477:4478   */\n      0x00\n        /* \"#utility.yul\":4474:4475   */\n      dup1\n        /* \"#utility.yul\":4467:4479   */\n      revert\n        /* \"#utility.yul\":4447:4481   */\n    tag_668:\n        /* \"#utility.yul\":4515:4521   */\n      dup2\n        /* \"#utility.yul\":4504:4513   */\n      dup6\n        /* \"#utility.yul\":4500:4522   */\n      add\n        /* \"#utility.yul\":4490:4522   */\n      swap2\n      pop\n        /* \"#utility.yul\":4560:4567   */\n      dup6\n        /* \"#utility.yul\":4553:4557   */\n      0x1f\n        /* \"#utility.yul\":4549:4551   */\n      dup4\n        /* \"#utility.yul\":4545:4558   */\n      add\n        /* \"#utility.yul\":4541:4568   */\n      slt\n        /* \"#utility.yul\":4531:4586   */\n      tag_669\n      jumpi\n        /* \"#utility.yul\":4582:4583   */\n      0x00\n        /* \"#utility.yul\":4579:4580   */\n      dup1\n        /* \"#utility.yul\":4572:4584   */\n      revert\n        /* \"#utility.yul\":4531:4586   */\n    tag_669:\n        /* \"#utility.yul\":4618:4620   */\n      dup2\n        /* \"#utility.yul\":4605:4621   */\n      calldataload\n        /* \"#utility.yul\":4640:4644   */\n      0x20\n        /* \"#utility.yul\":4663:4665   */\n      dup3\n        /* \"#utility.yul\":4659:4661   */\n      dup3\n        /* \"#utility.yul\":4656:4666   */\n      gt\n        /* \"#utility.yul\":4653:4689   */\n      iszero\n      tag_671\n      jumpi\n        /* \"#utility.yul\":4669:4687   */\n      tag_671\n      tag_365\n      jump\t// in\n    tag_671:\n        /* \"#utility.yul\":4715:4717   */\n      dup2\n        /* \"#utility.yul\":4712:4713   */\n      0x05\n        /* \"#utility.yul\":4708:4718   */\n      shl\n        /* \"#utility.yul\":4698:4718   */\n      swap3\n      pop\n        /* \"#utility.yul\":4738:4766   */\n      tag_672\n        /* \"#utility.yul\":4762:4764   */\n      dup2\n        /* \"#utility.yul\":4758:4760   */\n      dup5\n        /* \"#utility.yul\":4754:4765   */\n      add\n        /* \"#utility.yul\":4738:4766   */\n      tag_611\n      jump\t// in\n    tag_672:\n        /* \"#utility.yul\":4800:4815   */\n      dup3\n      dup2\n      mstore\n        /* \"#utility.yul\":4870:4881   */\n      swap3\n      dup5\n      add\n        /* \"#utility.yul\":4866:4886   */\n      dup2\n      add\n      swap3\n        /* \"#utility.yul\":4831:4843   */\n      dup2\n      dup2\n      add\n      swap1\n        /* \"#utility.yul\":4898:4917   */\n      dup10\n      dup6\n      gt\n        /* \"#utility.yul\":4895:4934   */\n      iszero\n      tag_673\n      jumpi\n        /* \"#utility.yul\":4930:4931   */\n      0x00\n        /* \"#utility.yul\":4927:4928   */\n      dup1\n        /* \"#utility.yul\":4920:4932   */\n      revert\n        /* \"#utility.yul\":4895:4934   */\n    tag_673:\n        /* \"#utility.yul\":4954:4965   */\n      swap5\n      dup3\n      add\n      swap5\n        /* \"#utility.yul\":4974:5116   */\n    tag_674:\n        /* \"#utility.yul\":4990:4996   */\n      dup5\n        /* \"#utility.yul\":4985:4988   */\n      dup7\n        /* \"#utility.yul\":4982:4997   */\n      lt\n        /* \"#utility.yul\":4974:5116   */\n      iszero\n      tag_676\n      jumpi\n        /* \"#utility.yul\":5056:5073   */\n      dup6\n      calldataload\n        /* \"#utility.yul\":5044:5074   */\n      dup3\n      mstore\n        /* \"#utility.yul\":5007:5019   */\n      swap5\n      dup3\n      add\n      swap5\n        /* \"#utility.yul\":5094:5106   */\n      swap1\n      dup3\n      add\n      swap1\n        /* \"#utility.yul\":4974:5116   */\n      jump(tag_674)\n    tag_676:\n        /* \"#utility.yul\":5135:5140   */\n      swap10\n        /* \"#utility.yul\":5172:5190   */\n      swap8\n      swap1\n      swap2\n      add\n        /* \"#utility.yul\":5159:5191   */\n      calldataload\n      swap8\n      pop\n      pop\n      pop\n      pop\n      pop\n      pop\n      pop\n        /* \"#utility.yul\":4181:5197   */\n      jump\t// out\n        /* \"#utility.yul\":5569:6201   */\n    tag_167:\n        /* \"#utility.yul\":5740:5742   */\n      0x20\n        /* \"#utility.yul\":5792:5813   */\n      dup1\n      dup3\n      mstore\n        /* \"#utility.yul\":5862:5875   */\n      dup3\n      mload\n        /* \"#utility.yul\":5765:5783   */\n      dup3\n      dup3\n      add\n        /* \"#utility.yul\":5884:5906   */\n      dup2\n      swap1\n      mstore\n        /* \"#utility.yul\":5711:5715   */\n      0x00\n      swap2\n        /* \"#utility.yul\":5740:5742   */\n      swap1\n        /* \"#utility.yul\":5963:5978   */\n      dup5\n      dup3\n      add\n      swap1\n        /* \"#utility.yul\":5937:5939   */\n      0x40\n        /* \"#utility.yul\":5922:5940   */\n      dup6\n      add\n      swap1\n        /* \"#utility.yul\":5711:5715   */\n      dup5\n        /* \"#utility.yul\":6006:6175   */\n    tag_681:\n        /* \"#utility.yul\":6020:6026   */\n      dup2\n        /* \"#utility.yul\":6017:6018   */\n      dup2\n        /* \"#utility.yul\":6014:6027   */\n      lt\n        /* \"#utility.yul\":6006:6175   */\n      iszero\n      tag_683\n      jumpi\n        /* \"#utility.yul\":6081:6094   */\n      dup4\n      mload\n        /* \"#utility.yul\":6069:6095   */\n      dup4\n      mstore\n        /* \"#utility.yul\":6150:6165   */\n      swap3\n      dup5\n      add\n      swap3\n        /* \"#utility.yul\":6115:6127   */\n      swap2\n      dup5\n      add\n      swap2\n        /* \"#utility.yul\":6042:6043   */\n      0x01\n        /* \"#utility.yul\":6035:6044   */\n      add\n        /* \"#utility.yul\":6006:6175   */\n      jump(tag_681)\n    tag_683:\n      pop\n        /* \"#utility.yul\":6192:6195   */\n      swap1\n      swap7\n        /* \"#utility.yul\":5569:6201   */\n      swap6\n      pop\n      pop\n      pop\n      pop\n      pop\n      pop\n      jump\t// out\n        /* \"#utility.yul\":6206:6553   */\n    tag_193:\n        /* \"#utility.yul\":6271:6277   */\n      0x00\n        /* \"#utility.yul\":6279:6285   */\n      dup1\n        /* \"#utility.yul\":6332:6334   */\n      0x40\n        /* \"#utility.yul\":6320:6329   */\n      dup4\n        /* \"#utility.yul\":6311:6318   */\n      dup6\n        /* \"#utility.yul\":6307:6330   */\n      sub\n        /* \"#utility.yul\":6303:6335   */\n      slt\n        /* \"#utility.yul\":6300:6352   */\n      iszero\n      tag_685\n      jumpi\n        /* \"#utility.yul\":6348:6349   */\n      0x00\n        /* \"#utility.yul\":6345:6346   */\n      dup1\n        /* \"#utility.yul\":6338:6350   */\n      revert\n        /* \"#utility.yul\":6300:6352   */\n    tag_685:\n        /* \"#utility.yul\":6371:6400   */\n      tag_686\n        /* \"#utility.yul\":6390:6399   */\n      dup4\n        /* \"#utility.yul\":6371:6400   */\n      tag_610\n      jump\t// in\n    tag_686:\n        /* \"#utility.yul\":6361:6400   */\n      swap2\n      pop\n        /* \"#utility.yul\":6450:6452   */\n      0x20\n        /* \"#utility.yul\":6439:6448   */\n      dup4\n        /* \"#utility.yul\":6435:6453   */\n      add\n        /* \"#utility.yul\":6422:6454   */\n      calldataload\n        /* \"#utility.yul\":6497:6502   */\n      dup1\n        /* \"#utility.yul\":6490:6503   */\n      iszero\n        /* \"#utility.yul\":6483:6504   */\n      iszero\n        /* \"#utility.yul\":6476:6481   */\n      dup2\n        /* \"#utility.yul\":6473:6505   */\n      eq\n        /* \"#utility.yul\":6463:6523   */\n      tag_687\n      jumpi\n        /* \"#utility.yul\":6519:6520   */\n      0x00\n        /* \"#utility.yul\":6516:6517   */\n      dup1\n        /* \"#utility.yul\":6509:6521   */\n      revert\n        /* \"#utility.yul\":6463:6523   */\n    tag_687:\n        /* \"#utility.yul\":6542:6547   */\n      dup1\n        /* \"#utility.yul\":6532:6547   */\n      swap2\n      pop\n      pop\n        /* \"#utility.yul\":6206:6553   */\n      swap3\n      pop\n      swap3\n      swap1\n      pop\n      jump\t// out\n        /* \"#utility.yul\":6558:7225   */\n    tag_202:\n        /* \"#utility.yul\":6653:6659   */\n      0x00\n        /* \"#utility.yul\":6661:6667   */\n      dup1\n        /* \"#utility.yul\":6669:6675   */\n      0x00\n        /* \"#utility.yul\":6677:6683   */\n      dup1\n        /* \"#utility.yul\":6730:6733   */\n      0x80\n        /* \"#utility.yul\":6718:6727   */\n      dup6\n        /* \"#utility.yul\":6709:6716   */\n      dup8\n        /* \"#utility.yul\":6705:6728   */\n      sub\n        /* \"#utility.yul\":6701:6734   */\n      slt\n        /* \"#utility.yul\":6698:6751   */\n      iszero\n      tag_689\n      jumpi\n        /* \"#utility.yul\":6747:6748   */\n      0x00\n        /* \"#utility.yul\":6744:6745   */\n      dup1\n        /* \"#utility.yul\":6737:6749   */\n      revert\n        /* \"#utility.yul\":6698:6751   */\n    tag_689:\n        /* \"#utility.yul\":6770:6799   */\n      tag_690\n        /* \"#utility.yul\":6789:6798   */\n      dup6\n        /* \"#utility.yul\":6770:6799   */\n      tag_610\n      jump\t// in\n    tag_690:\n        /* \"#utility.yul\":6760:6799   */\n      swap4\n      pop\n        /* \"#utility.yul\":6818:6856   */\n      tag_691\n        /* \"#utility.yul\":6852:6854   */\n      0x20\n        /* \"#utility.yul\":6841:6850   */\n      dup7\n        /* \"#utility.yul\":6837:6855   */\n      add\n        /* \"#utility.yul\":6818:6856   */\n      tag_610\n      jump\t// in\n    tag_691:\n        /* \"#utility.yul\":6808:6856   */\n      swap3\n      pop\n        /* \"#utility.yul\":6903:6905   */\n      0x40\n        /* \"#utility.yul\":6892:6901   */\n      dup6\n        /* \"#utility.yul\":6888:6906   */\n      add\n        /* \"#utility.yul\":6875:6907   */\n      calldataload\n        /* \"#utility.yul\":6865:6907   */\n      swap2\n      pop\n        /* \"#utility.yul\":6958:6960   */\n      0x60\n        /* \"#utility.yul\":6947:6956   */\n      dup6\n        /* \"#utility.yul\":6943:6961   */\n      add\n        /* \"#utility.yul\":6930:6962   */\n      calldataload\n      sub(shl(0x40, 0x01), 0x01)\n        /* \"#utility.yul\":6977:6983   */\n      dup2\n        /* \"#utility.yul\":6974:7004   */\n      gt\n        /* \"#utility.yul\":6971:7021   */\n      iszero\n      tag_692\n      jumpi\n        /* \"#utility.yul\":7017:7018   */\n      0x00\n        /* \"#utility.yul\":7014:7015   */\n      dup1\n        /* \"#utility.yul\":7007:7019   */\n      revert\n        /* \"#utility.yul\":6971:7021   */\n    tag_692:\n        /* \"#utility.yul\":7040:7062   */\n      dup6\n      add\n        /* \"#utility.yul\":7093:7097   */\n      0x1f\n        /* \"#utility.yul\":7085:7098   */\n      dup2\n      add\n        /* \"#utility.yul\":7081:7108   */\n      dup8\n      sgt\n        /* \"#utility.yul\":7071:7126   */\n      tag_693\n      jumpi\n        /* \"#utility.yul\":7122:7123   */\n      0x00\n        /* \"#utility.yul\":7119:7120   */\n      dup1\n        /* \"#utility.yul\":7112:7124   */\n      revert\n        /* \"#utility.yul\":7071:7126   */\n    tag_693:\n        /* \"#utility.yul\":7145:7219   */\n      tag_694\n        /* \"#utility.yul\":7211:7218   */\n      dup8\n        /* \"#utility.yul\":7206:7208   */\n      dup3\n        /* \"#utility.yul\":7193:7209   */\n      calldataload\n        /* \"#utility.yul\":7188:7190   */\n      0x20\n        /* \"#utility.yul\":7184:7186   */\n      dup5\n        /* \"#utility.yul\":7180:7191   */\n      add\n        /* \"#utility.yul\":7145:7219   */\n      tag_612\n      jump\t// in\n    tag_694:\n        /* \"#utility.yul\":7135:7219   */\n      swap2\n      pop\n      pop\n        /* \"#utility.yul\":6558:7225   */\n      swap3\n      swap6\n      swap2\n      swap5\n      pop\n      swap3\n      pop\n      jump\t// out\n        /* \"#utility.yul\":7230:7490   */\n    tag_233:\n        /* \"#utility.yul\":7298:7304   */\n      0x00\n        /* \"#utility.yul\":7306:7312   */\n      dup1\n        /* \"#utility.yul\":7359:7361   */\n      0x40\n        /* \"#utility.yul\":7347:7356   */\n      dup4\n        /* \"#utility.yul\":7338:7345   */\n      dup6\n        /* \"#utility.yul\":7334:7357   */\n      sub\n        /* \"#utility.yul\":7330:7362   */\n      slt\n        /* \"#utility.yul\":7327:7379   */\n      iszero\n      tag_696\n      jumpi\n        /* \"#utility.yul\":7375:7376   */\n      0x00\n        /* \"#utility.yul\":7372:7373   */\n      dup1\n        /* \"#utility.yul\":7365:7377   */\n      revert\n        /* \"#utility.yul\":7327:7379   */\n    tag_696:\n        /* \"#utility.yul\":7398:7427   */\n      tag_697\n        /* \"#utility.yul\":7417:7426   */\n      dup4\n        /* \"#utility.yul\":7398:7427   */\n      tag_610\n      jump\t// in\n    tag_697:\n        /* \"#utility.yul\":7388:7427   */\n      swap2\n      pop\n        /* \"#utility.yul\":7446:7484   */\n      tag_698\n        /* \"#utility.yul\":7480:7482   */\n      0x20\n        /* \"#utility.yul\":7469:7478   */\n      dup5\n        /* \"#utility.yul\":7465:7483   */\n      add\n        /* \"#utility.yul\":7446:7484   */\n      tag_610\n      jump\t// in\n    tag_698:\n        /* \"#utility.yul\":7436:7484   */\n      swap1\n      pop\n        /* \"#utility.yul\":7230:7490   */\n      swap3\n      pop\n      swap3\n      swap1\n      pop\n      jump\t// out\n        /* \"#utility.yul\":7495:7851   */\n    tag_251:\n        /* \"#utility.yul\":7697:7699   */\n      0x20\n        /* \"#utility.yul\":7679:7700   */\n      dup1\n      dup3\n      mstore\n        /* \"#utility.yul\":7716:7734   */\n      dup2\n      dup2\n      add\n        /* \"#utility.yul\":7709:7739   */\n      mstore\n        /* \"#utility.yul\":7775:7809   */\n      0x4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e6572\n        /* \"#utility.yul\":7770:7772   */\n      0x40\n        /* \"#utility.yul\":7755:7773   */\n      dup3\n      add\n        /* \"#utility.yul\":7748:7810   */\n      mstore\n        /* \"#utility.yul\":7842:7844   */\n      0x60\n        /* \"#utility.yul\":7827:7845   */\n      add\n      swap1\n        /* \"#utility.yul\":7495:7851   */\n      jump\t// out\n        /* \"#utility.yul\":7856:8236   */\n    tag_257:\n        /* \"#utility.yul\":7935:7936   */\n      0x01\n        /* \"#utility.yul\":7931:7943   */\n      dup2\n      dup2\n      shr\n      swap1\n        /* \"#utility.yul\":7978:7990   */\n      dup3\n      and\n      dup1\n        /* \"#utility.yul\":7999:8060   */\n      tag_701\n      jumpi\n        /* \"#utility.yul\":8053:8057   */\n      0x7f\n        /* \"#utility.yul\":8045:8051   */\n      dup3\n        /* \"#utility.yul\":8041:8058   */\n      and\n        /* \"#utility.yul\":8031:8058   */\n      swap2\n      pop\n        /* \"#utility.yul\":7999:8060   */\n    tag_701:\n        /* \"#utility.yul\":8106:8108   */\n      0x20\n        /* \"#utility.yul\":8098:8104   */\n      dup3\n        /* \"#utility.yul\":8095:8109   */\n      lt\n        /* \"#utility.yul\":8075:8093   */\n      dup2\n        /* \"#utility.yul\":8072:8110   */\n      eq\n        /* \"#utility.yul\":8069:8230   */\n      iszero\n      tag_702\n      jumpi\n        /* \"#utility.yul\":8152:8162   */\n      0x4e487b71\n        /* \"#utility.yul\":8147:8150   */\n      0xe0\n        /* \"#utility.yul\":8143:8163   */\n      shl\n        /* \"#utility.yul\":8140:8141   */\n      0x00\n        /* \"#utility.yul\":8133:8164   */\n      mstore\n        /* \"#utility.yul\":8187:8191   */\n      0x22\n        /* \"#utility.yul\":8184:8185   */\n      0x04\n        /* \"#utility.yul\":8177:8192   */\n      mstore\n        /* \"#utility.yul\":8215:8219   */\n      0x24\n        /* \"#utility.yul\":8212:8213   */\n      0x00\n        /* \"#utility.yul\":8205:8220   */\n      revert\n        /* \"#utility.yul\":8069:8230   */\n    tag_702:\n      pop\n        /* \"#utility.yul\":7856:8236   */\n      swap2\n      swap1\n      pop\n      jump\t// out\n        /* \"#utility.yul\":8241:8653   */\n    tag_285:\n        /* \"#utility.yul\":8443:8445   */\n      0x20\n        /* \"#utility.yul\":8425:8446   */\n      dup1\n      dup3\n      mstore\n        /* \"#utility.yul\":8482:8484   */\n      0x30\n        /* \"#utility.yul\":8462:8480   */\n      swap1\n      dup3\n      add\n        /* \"#utility.yul\":8455:8485   */\n      mstore\n        /* \"#utility.yul\":8521:8555   */\n      0x43727970746f42756c6c446f6773203a3a2043616e6e6f742062652063616c6c\n        /* \"#utility.yul\":8516:8518   */\n      0x40\n        /* \"#utility.yul\":8501:8519   */\n      dup3\n      add\n        /* \"#utility.yul\":8494:8556   */\n      mstore\n      shl(0x82, 0x195908189e48184818dbdb9d1c9858dd)\n        /* \"#utility.yul\":8587:8589   */\n      0x60\n        /* \"#utility.yul\":8572:8590   */\n      dup3\n      add\n        /* \"#utility.yul\":8565:8611   */\n      mstore\n        /* \"#utility.yul\":8643:8646   */\n      0x80\n        /* \"#utility.yul\":8628:8647   */\n      add\n      swap1\n        /* \"#utility.yul\":8241:8653   */\n      jump\t// out\n        /* \"#utility.yul\":9064:9191   */\n    tag_615:\n        /* \"#utility.yul\":9125:9135   */\n      0x4e487b71\n        /* \"#utility.yul\":9120:9123   */\n      0xe0\n        /* \"#utility.yul\":9116:9136   */\n      shl\n        /* \"#utility.yul\":9113:9114   */\n      0x00\n        /* \"#utility.yul\":9106:9137   */\n      mstore\n        /* \"#utility.yul\":9156:9160   */\n      0x11\n        /* \"#utility.yul\":9153:9154   */\n      0x04\n        /* \"#utility.yul\":9146:9161   */\n      mstore\n        /* \"#utility.yul\":9180:9184   */\n      0x24\n        /* \"#utility.yul\":9177:9178   */\n      0x00\n        /* \"#utility.yul\":9170:9185   */\n      revert\n        /* \"#utility.yul\":9196:9324   */\n    tag_292:\n        /* \"#utility.yul\":9236:9239   */\n      0x00\n        /* \"#utility.yul\":9267:9268   */\n      dup3\n        /* \"#utility.yul\":9263:9269   */\n      not\n        /* \"#utility.yul\":9260:9261   */\n      dup3\n        /* \"#utility.yul\":9257:9270   */\n      gt\n        /* \"#utility.yul\":9254:9293   */\n      iszero\n      tag_708\n      jumpi\n        /* \"#utility.yul\":9273:9291   */\n      tag_708\n      tag_615\n      jump\t// in\n    tag_708:\n      pop\n        /* \"#utility.yul\":9309:9318   */\n      add\n      swap1\n        /* \"#utility.yul\":9196:9324   */\n      jump\t// out\n        /* \"#utility.yul\":10169:10337   */\n    tag_301:\n        /* \"#utility.yul\":10209:10216   */\n      0x00\n        /* \"#utility.yul\":10275:10276   */\n      dup2\n        /* \"#utility.yul\":10271:10272   */\n      0x00\n        /* \"#utility.yul\":10267:10273   */\n      not\n        /* \"#utility.yul\":10263:10277   */\n      div\n        /* \"#utility.yul\":10260:10261   */\n      dup4\n        /* \"#utility.yul\":10257:10278   */\n      gt\n        /* \"#utility.yul\":10252:10253   */\n      dup3\n        /* \"#utility.yul\":10245:10254   */\n      iszero\n        /* \"#utility.yul\":10238:10255   */\n      iszero\n        /* \"#utility.yul\":10234:10279   */\n      and\n        /* \"#utility.yul\":10231:10302   */\n      iszero\n      tag_713\n      jumpi\n        /* \"#utility.yul\":10282:10300   */\n      tag_713\n      tag_615\n      jump\t// in\n    tag_713:\n      pop\n        /* \"#utility.yul\":10322:10331   */\n      mul\n      swap1\n        /* \"#utility.yul\":10169:10337   */\n      jump\t// out\n        /* \"#utility.yul\":11399:11526   */\n    tag_616:\n        /* \"#utility.yul\":11460:11470   */\n      0x4e487b71\n        /* \"#utility.yul\":11455:11458   */\n      0xe0\n        /* \"#utility.yul\":11451:11471   */\n      shl\n        /* \"#utility.yul\":11448:11449   */\n      0x00\n        /* \"#utility.yul\":11441:11472   */\n      mstore\n        /* \"#utility.yul\":11491:11495   */\n      0x12\n        /* \"#utility.yul\":11488:11489   */\n      0x04\n        /* \"#utility.yul\":11481:11496   */\n      mstore\n        /* \"#utility.yul\":11515:11519   */\n      0x24\n        /* \"#utility.yul\":11512:11513   */\n      0x00\n        /* \"#utility.yul\":11505:11520   */\n      revert\n        /* \"#utility.yul\":11531:11651   */\n    tag_323:\n        /* \"#utility.yul\":11571:11572   */\n      0x00\n        /* \"#utility.yul\":11597:11598   */\n      dup3\n        /* \"#utility.yul\":11587:11622   */\n      tag_720\n      jumpi\n        /* \"#utility.yul\":11602:11620   */\n      tag_720\n      tag_616\n      jump\t// in\n    tag_720:\n      pop\n        /* \"#utility.yul\":11636:11645   */\n      div\n      swap1\n        /* \"#utility.yul\":11531:11651   */\n      jump\t// out\n        /* \"#utility.yul\":11656:11791   */\n    tag_371:\n        /* \"#utility.yul\":11695:11698   */\n      0x00\n      not(0x00)\n        /* \"#utility.yul\":11716:11733   */\n      dup3\n      eq\n        /* \"#utility.yul\":11713:11756   */\n      iszero\n      tag_723\n      jumpi\n        /* \"#utility.yul\":11736:11754   */\n      tag_723\n      tag_615\n      jump\t// in\n    tag_723:\n      pop\n        /* \"#utility.yul\":11783:11784   */\n      0x01\n        /* \"#utility.yul\":11772:11785   */\n      add\n      swap1\n        /* \"#utility.yul\":11656:11791   */\n      jump\t// out\n        /* \"#utility.yul\":14313:14498   */\n    tag_618:\n        /* \"#utility.yul\":14355:14358   */\n      0x00\n        /* \"#utility.yul\":14393:14398   */\n      dup2\n        /* \"#utility.yul\":14387:14399   */\n      mload\n        /* \"#utility.yul\":14408:14460   */\n      tag_732\n        /* \"#utility.yul\":14453:14459   */\n      dup2\n        /* \"#utility.yul\":14448:14451   */\n      dup6\n        /* \"#utility.yul\":14441:14445   */\n      0x20\n        /* \"#utility.yul\":14434:14439   */\n      dup7\n        /* \"#utility.yul\":14430:14446   */\n      add\n        /* \"#utility.yul\":14408:14460   */\n      tag_613\n      jump\t// in\n    tag_732:\n        /* \"#utility.yul\":14476:14492   */\n      swap3\n      swap1\n      swap3\n      add\n      swap3\n        /* \"#utility.yul\":14313:14498   */\n      swap2\n      pop\n      pop\n      jump\t// out\n        /* \"#utility.yul\":14621:15922   */\n    tag_462:\n        /* \"#utility.yul\":14898:14901   */\n      0x00\n        /* \"#utility.yul\":14927:14928   */\n      dup1\n        /* \"#utility.yul\":14960:14966   */\n      dup5\n        /* \"#utility.yul\":14954:14967   */\n      sload\n        /* \"#utility.yul\":14990:14993   */\n      dup2\n        /* \"#utility.yul\":15012:15013   */\n      0x01\n        /* \"#utility.yul\":15040:15049   */\n      dup3\n        /* \"#utility.yul\":15036:15038   */\n      dup2\n        /* \"#utility.yul\":15032:15050   */\n      shr\n        /* \"#utility.yul\":15022:15050   */\n      swap2\n      pop\n        /* \"#utility.yul\":15100:15102   */\n      dup1\n        /* \"#utility.yul\":15089:15098   */\n      dup4\n        /* \"#utility.yul\":15085:15103   */\n      and\n        /* \"#utility.yul\":15122:15140   */\n      dup1\n        /* \"#utility.yul\":15112:15173   */\n      tag_735\n      jumpi\n        /* \"#utility.yul\":15166:15170   */\n      0x7f\n        /* \"#utility.yul\":15158:15164   */\n      dup4\n        /* \"#utility.yul\":15154:15171   */\n      and\n        /* \"#utility.yul\":15144:15171   */\n      swap3\n      pop\n        /* \"#utility.yul\":15112:15173   */\n    tag_735:\n        /* \"#utility.yul\":15192:15194   */\n      0x20\n        /* \"#utility.yul\":15240:15242   */\n      dup1\n        /* \"#utility.yul\":15232:15238   */\n      dup5\n        /* \"#utility.yul\":15229:15243   */\n      lt\n        /* \"#utility.yul\":15209:15227   */\n      dup3\n        /* \"#utility.yul\":15206:15244   */\n      eq\n        /* \"#utility.yul\":15203:15368   */\n      iszero\n      tag_736\n      jumpi\n      shl(0xe0, 0x4e487b71)\n        /* \"#utility.yul\":15267:15300   */\n      dup7\n      mstore\n        /* \"#utility.yul\":15323:15327   */\n      0x22\n        /* \"#utility.yul\":15320:15321   */\n      0x04\n        /* \"#utility.yul\":15313:15328   */\n      mstore\n        /* \"#utility.yul\":15353:15357   */\n      0x24\n        /* \"#utility.yul\":15274:15277   */\n      dup7\n        /* \"#utility.yul\":15341:15358   */\n      revert\n        /* \"#utility.yul\":15203:15368   */\n    tag_736:\n        /* \"#utility.yul\":15384:15402   */\n      dup2\n        /* \"#utility.yul\":15411:15515   */\n      dup1\n      iszero\n      tag_738\n      jumpi\n        /* \"#utility.yul\":15529:15530   */\n      0x01\n        /* \"#utility.yul\":15524:15844   */\n      dup2\n      eq\n      tag_739\n      jumpi\n        /* \"#utility.yul\":15377:15844   */\n      jump(tag_737)\n        /* \"#utility.yul\":15411:15515   */\n    tag_738:\n      not(0xff)\n        /* \"#utility.yul\":15444:15468   */\n      dup7\n      and\n        /* \"#utility.yul\":15432:15469   */\n      dup10\n      mstore\n        /* \"#utility.yul\":15489:15505   */\n      dup5\n      dup10\n      add\n      swap7\n      pop\n        /* \"#utility.yul\":15411:15515   */\n      jump(tag_737)\n        /* \"#utility.yul\":15524:15844   */\n    tag_739:\n        /* \"#utility.yul\":14260:14261   */\n      0x00\n        /* \"#utility.yul\":14253:14267   */\n      dup12\n      dup2\n      mstore\n        /* \"#utility.yul\":14297:14301   */\n      0x20\n        /* \"#utility.yul\":14284:14302   */\n      swap1\n      keccak256\n        /* \"#utility.yul\":15619:15620   */\n      0x00\n        /* \"#utility.yul\":15633:15798   */\n    tag_741:\n        /* \"#utility.yul\":15647:15653   */\n      dup7\n        /* \"#utility.yul\":15644:15645   */\n      dup2\n        /* \"#utility.yul\":15641:15654   */\n      lt\n        /* \"#utility.yul\":15633:15798   */\n      iszero\n      tag_743\n      jumpi\n        /* \"#utility.yul\":15725:15739   */\n      dup2\n      sload\n        /* \"#utility.yul\":15712:15723   */\n      dup12\n      dup3\n      add\n        /* \"#utility.yul\":15705:15740   */\n      mstore\n        /* \"#utility.yul\":15768:15784   */\n      swap1\n      dup6\n      add\n      swap1\n        /* \"#utility.yul\":15662:15672   */\n      dup4\n      add\n        /* \"#utility.yul\":15633:15798   */\n      jump(tag_741)\n    tag_743:\n        /* \"#utility.yul\":15637:15640   */\n      pop\n      pop\n        /* \"#utility.yul\":15827:15833   */\n      dup5\n        /* \"#utility.yul\":15822:15825   */\n      dup10\n        /* \"#utility.yul\":15818:15834   */\n      add\n        /* \"#utility.yul\":15811:15834   */\n      swap7\n      pop\n        /* \"#utility.yul\":15377:15844   */\n    tag_737:\n      pop\n      pop\n      pop\n      pop\n      pop\n      pop\n        /* \"#utility.yul\":15860:15916   */\n      tag_744\n        /* \"#utility.yul\":15885:15915   */\n      tag_745\n        /* \"#utility.yul\":15911:15914   */\n      dup3\n        /* \"#utility.yul\":15903:15909   */\n      dup7\n        /* \"#utility.yul\":15885:15915   */\n      tag_618\n      jump\t// in\n    tag_745:\n      shl(0xd9, 0x173539b7b7)\n        /* \"#utility.yul\":14563:14583   */\n      dup2\n      mstore\n        /* \"#utility.yul\":14608:14609   */\n      0x05\n        /* \"#utility.yul\":14599:14610   */\n      add\n      swap1\n        /* \"#utility.yul\":14503:14616   */\n      jump\n        /* \"#utility.yul\":15860:15916   */\n    tag_744:\n        /* \"#utility.yul\":15853:15916   */\n      swap6\n        /* \"#utility.yul\":14621:15922   */\n      swap5\n      pop\n      pop\n      pop\n      pop\n      pop\n      jump\t// out\n        /* \"#utility.yul\":16334:16834   */\n    tag_529:\n      sub(shl(0xa0, 0x01), 0x01)\n        /* \"#utility.yul\":16603:16618   */\n      dup6\n      dup2\n      and\n        /* \"#utility.yul\":16585:16619   */\n      dup3\n      mstore\n        /* \"#utility.yul\":16655:16670   */\n      dup5\n      and\n        /* \"#utility.yul\":16650:16652   */\n      0x20\n        /* \"#utility.yul\":16635:16653   */\n      dup3\n      add\n        /* \"#utility.yul\":16628:16671   */\n      mstore\n        /* \"#utility.yul\":16702:16704   */\n      0x40\n        /* \"#utility.yul\":16687:16705   */\n      dup2\n      add\n        /* \"#utility.yul\":16680:16714   */\n      dup4\n      swap1\n      mstore\n        /* \"#utility.yul\":16750:16753   */\n      0x80\n        /* \"#utility.yul\":16745:16747   */\n      0x60\n        /* \"#utility.yul\":16730:16748   */\n      dup3\n      add\n        /* \"#utility.yul\":16723:16754   */\n      dup2\n      swap1\n      mstore\n        /* \"#utility.yul\":16528:16532   */\n      0x00\n      swap1\n        /* \"#utility.yul\":16771:16828   */\n      tag_748\n      swap1\n        /* \"#utility.yul\":16808:16827   */\n      dup4\n      add\n        /* \"#utility.yul\":16800:16806   */\n      dup5\n        /* \"#utility.yul\":16771:16828   */\n      tag_614\n      jump\t// in\n    tag_748:\n        /* \"#utility.yul\":16763:16828   */\n      swap7\n        /* \"#utility.yul\":16334:16834   */\n      swap6\n      pop\n      pop\n      pop\n      pop\n      pop\n      pop\n      jump\t// out\n        /* \"#utility.yul\":16839:17088   */\n    tag_533:\n        /* \"#utility.yul\":16908:16914   */\n      0x00\n        /* \"#utility.yul\":16961:16963   */\n      0x20\n        /* \"#utility.yul\":16949:16958   */\n      dup3\n        /* \"#utility.yul\":16940:16947   */\n      dup5\n        /* \"#utility.yul\":16936:16959   */\n      sub\n        /* \"#utility.yul\":16932:16964   */\n      slt\n        /* \"#utility.yul\":16929:16981   */\n      iszero\n      tag_750\n      jumpi\n        /* \"#utility.yul\":16977:16978   */\n      0x00\n        /* \"#utility.yul\":16974:16975   */\n      dup1\n        /* \"#utility.yul\":16967:16979   */\n      revert\n        /* \"#utility.yul\":16929:16981   */\n    tag_750:\n        /* \"#utility.yul\":17009:17018   */\n      dup2\n        /* \"#utility.yul\":17003:17019   */\n      mload\n        /* \"#utility.yul\":17028:17058   */\n      tag_458\n        /* \"#utility.yul\":17052:17057   */\n      dup2\n        /* \"#utility.yul\":17028:17058   */\n      tag_609\n      jump\t// in\n        /* \"#utility.yul\":17093:17218   */\n    tag_555:\n        /* \"#utility.yul\":17133:17137   */\n      0x00\n        /* \"#utility.yul\":17161:17162   */\n      dup3\n        /* \"#utility.yul\":17158:17159   */\n      dup3\n        /* \"#utility.yul\":17155:17163   */\n      lt\n        /* \"#utility.yul\":17152:17186   */\n      iszero\n      tag_754\n      jumpi\n        /* \"#utility.yul\":17166:17184   */\n      tag_754\n      tag_615\n      jump\t// in\n    tag_754:\n      pop\n        /* \"#utility.yul\":17203:17212   */\n      sub\n      swap1\n        /* \"#utility.yul\":17093:17218   */\n      jump\t// out\n        /* \"#utility.yul\":17223:17335   */\n    tag_557:\n        /* \"#utility.yul\":17255:17256   */\n      0x00\n        /* \"#utility.yul\":17281:17282   */\n      dup3\n        /* \"#utility.yul\":17271:17306   */\n      tag_757\n      jumpi\n        /* \"#utility.yul\":17286:17304   */\n      tag_757\n      tag_616\n      jump\t// in\n    tag_757:\n      pop\n        /* \"#utility.yul\":17320:17329   */\n      mod\n      swap1\n        /* \"#utility.yul\":17223:17335   */\n      jump\t// out\n        /* \"#utility.yul\":17340:17467   */\n    tag_561:\n        /* \"#utility.yul\":17401:17411   */\n      0x4e487b71\n        /* \"#utility.yul\":17396:17399   */\n      0xe0\n        /* \"#utility.yul\":17392:17412   */\n      shl\n        /* \"#utility.yul\":17389:17390   */\n      0x00\n        /* \"#utility.yul\":17382:17413   */\n      mstore\n        /* \"#utility.yul\":17432:17436   */\n      0x32\n        /* \"#utility.yul\":17429:17430   */\n      0x04\n        /* \"#utility.yul\":17422:17437   */\n      mstore\n        /* \"#utility.yul\":17456:17460   */\n      0x24\n        /* \"#utility.yul\":17453:17454   */\n      0x00\n        /* \"#utility.yul\":17446:17461   */\n      revert\n\n    auxdata: 0xa2646970667358221220ccc0d679003696c9c6598f4d7991d88fc211f107d0883f5ac5ce95e85145f5b164736f6c63430008090033\n}\n",
						"bytecode": {
							"functionDebugData": {
								"@_1004": {
									"entryPoint": null,
									"id": 1004,
									"parameterSlots": 0,
									"returnSlots": 0
								},
								"@_1540": {
									"entryPoint": null,
									"id": 1540,
									"parameterSlots": 2,
									"returnSlots": 0
								},
								"@_23": {
									"entryPoint": null,
									"id": 23,
									"parameterSlots": 0,
									"returnSlots": 0
								},
								"@_msgSender_603": {
									"entryPoint": null,
									"id": 603,
									"parameterSlots": 0,
									"returnSlots": 1
								},
								"@_startTokenId_1549": {
									"entryPoint": null,
									"id": 1549,
									"parameterSlots": 0,
									"returnSlots": 1
								},
								"@_transferOwnership_103": {
									"entryPoint": 160,
									"id": 103,
									"parameterSlots": 1,
									"returnSlots": 0
								},
								"extract_byte_array_length": {
									"entryPoint": 408,
									"id": null,
									"parameterSlots": 1,
									"returnSlots": 1
								}
							},
							"generatedSources": [
								{
									"ast": {
										"nodeType": "YulBlock",
										"src": "0:396:13",
										"statements": [
											{
												"nodeType": "YulBlock",
												"src": "6:3:13",
												"statements": []
											},
											{
												"body": {
													"nodeType": "YulBlock",
													"src": "69:325:13",
													"statements": [
														{
															"nodeType": "YulAssignment",
															"src": "79:22:13",
															"value": {
																"arguments": [
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "93:1:13",
																		"type": "",
																		"value": "1"
																	},
																	{
																		"name": "data",
																		"nodeType": "YulIdentifier",
																		"src": "96:4:13"
																	}
																],
																"functionName": {
																	"name": "shr",
																	"nodeType": "YulIdentifier",
																	"src": "89:3:13"
																},
																"nodeType": "YulFunctionCall",
																"src": "89:12:13"
															},
															"variableNames": [
																{
																	"name": "length",
																	"nodeType": "YulIdentifier",
																	"src": "79:6:13"
																}
															]
														},
														{
															"nodeType": "YulVariableDeclaration",
															"src": "110:38:13",
															"value": {
																"arguments": [
																	{
																		"name": "data",
																		"nodeType": "YulIdentifier",
																		"src": "140:4:13"
																	},
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "146:1:13",
																		"type": "",
																		"value": "1"
																	}
																],
																"functionName": {
																	"name": "and",
																	"nodeType": "YulIdentifier",
																	"src": "136:3:13"
																},
																"nodeType": "YulFunctionCall",
																"src": "136:12:13"
															},
															"variables": [
																{
																	"name": "outOfPlaceEncoding",
																	"nodeType": "YulTypedName",
																	"src": "114:18:13",
																	"type": ""
																}
															]
														},
														{
															"body": {
																"nodeType": "YulBlock",
																"src": "187:31:13",
																"statements": [
																	{
																		"nodeType": "YulAssignment",
																		"src": "189:27:13",
																		"value": {
																			"arguments": [
																				{
																					"name": "length",
																					"nodeType": "YulIdentifier",
																					"src": "203:6:13"
																				},
																				{
																					"kind": "number",
																					"nodeType": "YulLiteral",
																					"src": "211:4:13",
																					"type": "",
																					"value": "0x7f"
																				}
																			],
																			"functionName": {
																				"name": "and",
																				"nodeType": "YulIdentifier",
																				"src": "199:3:13"
																			},
																			"nodeType": "YulFunctionCall",
																			"src": "199:17:13"
																		},
																		"variableNames": [
																			{
																				"name": "length",
																				"nodeType": "YulIdentifier",
																				"src": "189:6:13"
																			}
																		]
																	}
																]
															},
															"condition": {
																"arguments": [
																	{
																		"name": "outOfPlaceEncoding",
																		"nodeType": "YulIdentifier",
																		"src": "167:18:13"
																	}
																],
																"functionName": {
																	"name": "iszero",
																	"nodeType": "YulIdentifier",
																	"src": "160:6:13"
																},
																"nodeType": "YulFunctionCall",
																"src": "160:26:13"
															},
															"nodeType": "YulIf",
															"src": "157:61:13"
														},
														{
															"body": {
																"nodeType": "YulBlock",
																"src": "277:111:13",
																"statements": [
																	{
																		"expression": {
																			"arguments": [
																				{
																					"kind": "number",
																					"nodeType": "YulLiteral",
																					"src": "298:1:13",
																					"type": "",
																					"value": "0"
																				},
																				{
																					"arguments": [
																						{
																							"kind": "number",
																							"nodeType": "YulLiteral",
																							"src": "305:3:13",
																							"type": "",
																							"value": "224"
																						},
																						{
																							"kind": "number",
																							"nodeType": "YulLiteral",
																							"src": "310:10:13",
																							"type": "",
																							"value": "0x4e487b71"
																						}
																					],
																					"functionName": {
																						"name": "shl",
																						"nodeType": "YulIdentifier",
																						"src": "301:3:13"
																					},
																					"nodeType": "YulFunctionCall",
																					"src": "301:20:13"
																				}
																			],
																			"functionName": {
																				"name": "mstore",
																				"nodeType": "YulIdentifier",
																				"src": "291:6:13"
																			},
																			"nodeType": "YulFunctionCall",
																			"src": "291:31:13"
																		},
																		"nodeType": "YulExpressionStatement",
																		"src": "291:31:13"
																	},
																	{
																		"expression": {
																			"arguments": [
																				{
																					"kind": "number",
																					"nodeType": "YulLiteral",
																					"src": "342:1:13",
																					"type": "",
																					"value": "4"
																				},
																				{
																					"kind": "number",
																					"nodeType": "YulLiteral",
																					"src": "345:4:13",
																					"type": "",
																					"value": "0x22"
																				}
																			],
																			"functionName": {
																				"name": "mstore",
																				"nodeType": "YulIdentifier",
																				"src": "335:6:13"
																			},
																			"nodeType": "YulFunctionCall",
																			"src": "335:15:13"
																		},
																		"nodeType": "YulExpressionStatement",
																		"src": "335:15:13"
																	},
																	{
																		"expression": {
																			"arguments": [
																				{
																					"kind": "number",
																					"nodeType": "YulLiteral",
																					"src": "370:1:13",
																					"type": "",
																					"value": "0"
																				},
																				{
																					"kind": "number",
																					"nodeType": "YulLiteral",
																					"src": "373:4:13",
																					"type": "",
																					"value": "0x24"
																				}
																			],
																			"functionName": {
																				"name": "revert",
																				"nodeType": "YulIdentifier",
																				"src": "363:6:13"
																			},
																			"nodeType": "YulFunctionCall",
																			"src": "363:15:13"
																		},
																		"nodeType": "YulExpressionStatement",
																		"src": "363:15:13"
																	}
																]
															},
															"condition": {
																"arguments": [
																	{
																		"name": "outOfPlaceEncoding",
																		"nodeType": "YulIdentifier",
																		"src": "233:18:13"
																	},
																	{
																		"arguments": [
																			{
																				"name": "length",
																				"nodeType": "YulIdentifier",
																				"src": "256:6:13"
																			},
																			{
																				"kind": "number",
																				"nodeType": "YulLiteral",
																				"src": "264:2:13",
																				"type": "",
																				"value": "32"
																			}
																		],
																		"functionName": {
																			"name": "lt",
																			"nodeType": "YulIdentifier",
																			"src": "253:2:13"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "253:14:13"
																	}
																],
																"functionName": {
																	"name": "eq",
																	"nodeType": "YulIdentifier",
																	"src": "230:2:13"
																},
																"nodeType": "YulFunctionCall",
																"src": "230:38:13"
															},
															"nodeType": "YulIf",
															"src": "227:161:13"
														}
													]
												},
												"name": "extract_byte_array_length",
												"nodeType": "YulFunctionDefinition",
												"parameters": [
													{
														"name": "data",
														"nodeType": "YulTypedName",
														"src": "49:4:13",
														"type": ""
													}
												],
												"returnVariables": [
													{
														"name": "length",
														"nodeType": "YulTypedName",
														"src": "58:6:13",
														"type": ""
													}
												],
												"src": "14:380:13"
											}
										]
									},
									"contents": "{\n    { }\n    function extract_byte_array_length(data) -> length\n    {\n        length := shr(1, data)\n        let outOfPlaceEncoding := and(data, 1)\n        if iszero(outOfPlaceEncoding) { length := and(length, 0x7f) }\n        if eq(outOfPlaceEncoding, lt(length, 32))\n        {\n            mstore(0, shl(224, 0x4e487b71))\n            mstore(4, 0x22)\n            revert(0, 0x24)\n        }\n    }\n}",
									"id": 13,
									"language": "Yul",
									"name": "#utility.yul"
								}
							],
							"linkReferences": {},
							"object": "60806040523480156200001157600080fd5b50604080518082018252601781527f43727970746f42756c6c446f6773204f6666696369616c00000000000000000060208083019182528351808501909452600384526210d09160ea1b9084015281519192916200007291600291620000f2565b50805162000088906003906020840190620000f2565b505060008055506200009a33620000a0565b620001d5565b600880546001600160a01b038381166001600160a01b0319831681179093556040519116919082907f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e090600090a35050565b828054620001009062000198565b90600052602060002090601f0160209004810192826200012457600085556200016f565b82601f106200013f57805160ff19168380011785556200016f565b828001600101855582156200016f579182015b828111156200016f57825182559160200191906001019062000152565b506200017d92915062000181565b5090565b5b808211156200017d576000815560010162000182565b600181811c90821680620001ad57607f821691505b60208210811415620001cf57634e487b7160e01b600052602260045260246000fd5b50919050565b61262580620001e56000396000f3fe60806040526004361061025c5760003560e01c806370a0823111610144578063b0962c53116100b6578063c4ae31681161007a578063c4ae31681461069c578063c87b56dd146106b1578063e222c7f9146106d1578063e8b5498d146106e6578063e985e9c514610708578063f2fde38b1461075157600080fd5b8063b0962c531461062c578063b88d4fde1461064c578063ba7a86b81461066c578063bc912e1a14610681578063c08dfd3c146104e457600080fd5b806386a173ee1161010857806386a173ee146105915780638bb64a8c146105b15780638da5cb5b146105c657806395d89b41146105e4578063a0712d68146105f9578063a22cb4651461060c57600080fd5b806370a08231146104f9578063715018a6146105195780637cb647591461052e57806383a974a21461054e5780638456cb591461057057600080fd5b80632904e6d9116101dd57806349590657116101a1578063495906571461046b5780634cf5f7a41461048057806354214f69146104955780635b8ad429146104af5780636352211e146104c457806365f13097146104e457600080fd5b80632904e6d9146103ee57806332cb6b0c1461040157806333bc1c5c146104175780633ccfd60b1461043657806342842e0e1461044b57600080fd5b8063081812fc11610224578063081812fc14610330578063095ea7b31461036857806318160ddd146103885780631c16521c146103a157806323b872dd146103ce57600080fd5b806301ffc9a7146102615780630345e3cb146102965780630675b7c6146102d157806306fdde03146102f357806307e89ec014610315575b600080fd5b34801561026d57600080fd5b5061028161027c366004611f2f565b610771565b60405190151581526020015b60405180910390f35b3480156102a257600080fd5b506102c36102b1366004611f68565b600e6020526000908152604090205481565b60405190815260200161028d565b3480156102dd57600080fd5b506102f16102ec366004612020565b6107c3565b005b3480156102ff57600080fd5b5061030861080d565b60405161028d91906120c0565b34801561032157600080fd5b506102c3668e1bc9bf04000081565b34801561033c57600080fd5b5061035061034b3660046120d3565b61089f565b6040516001600160a01b03909116815260200161028d565b34801561037457600080fd5b506102f16103833660046120ec565b6108e3565b34801561039457600080fd5b50600154600054036102c3565b3480156103ad57600080fd5b506102c36103bc366004611f68565b600d6020526000908152604090205481565b3480156103da57600080fd5b506102f16103e9366004612116565b610971565b6102f16103fc366004612152565b61097c565b34801561040d57600080fd5b506102c36108ae81565b34801561042357600080fd5b50600b5461028190610100900460ff1681565b34801561044257600080fd5b506102f1610c5c565b34801561045757600080fd5b506102f1610466366004612116565b610d10565b34801561047757600080fd5b50600c546102c3565b34801561048c57600080fd5b50610308610d2b565b3480156104a157600080fd5b50600b546102819060ff1681565b3480156104bb57600080fd5b506102f1610db9565b3480156104d057600080fd5b506103506104df3660046120d3565b610df7565b3480156104f057600080fd5b506102c3600a81565b34801561050557600080fd5b506102c3610514366004611f68565b610e09565b34801561052557600080fd5b506102f1610e57565b34801561053a57600080fd5b506102f16105493660046120d3565b610e8d565b34801561055a57600080fd5b50610563610ebc565b60405161028d91906121fd565b34801561057c57600080fd5b50600b54610281906301000000900460ff1681565b34801561059d57600080fd5b50600b546102819062010000900460ff1681565b3480156105bd57600080fd5b506102f1610f37565b3480156105d257600080fd5b506008546001600160a01b0316610350565b3480156105f057600080fd5b50610308610f80565b6102f16106073660046120d3565b610f8f565b34801561061857600080fd5b506102f1610627366004612241565b611194565b34801561063857600080fd5b506102f1610647366004612020565b61122a565b34801561065857600080fd5b506102f161066736600461227d565b611267565b34801561067857600080fd5b506102f16112b8565b34801561068d57600080fd5b506102c3666a94d74f43000081565b3480156106a857600080fd5b506102f161136c565b3480156106bd57600080fd5b506103086106cc3660046120d3565b6113b7565b3480156106dd57600080fd5b506102f1611531565b3480156106f257600080fd5b50600b5461028190640100000000900460ff1681565b34801561071457600080fd5b506102816107233660046122f8565b6001600160a01b03918216600090815260076020908152604080832093909416825291909152205460ff1690565b34801561075d57600080fd5b506102f161076c366004611f68565b611578565b60006001600160e01b031982166380ac58cd60e01b14806107a257506001600160e01b03198216635b5e139f60e01b145b806107bd57506301ffc9a760e01b6001600160e01b03198316145b92915050565b6008546001600160a01b031633146107f65760405162461bcd60e51b81526004016107ed9061232b565b60405180910390fd5b8051610809906009906020840190611e80565b5050565b60606002805461081c90612360565b80601f016020809104026020016040519081016040528092919081815260200182805461084890612360565b80156108955780601f1061086a57610100808354040283529160200191610895565b820191906000526020600020905b81548152906001019060200180831161087857829003601f168201915b5050505050905090565b60006108aa82611610565b6108c7576040516333d1c03960e21b815260040160405180910390fd5b506000908152600660205260409020546001600160a01b031690565b60006108ee82610df7565b9050806001600160a01b0316836001600160a01b031614156109235760405163250fdee360e21b815260040160405180910390fd5b336001600160a01b0382161480159061094357506109418133610723565b155b15610961576040516367d9dca160e11b815260040160405180910390fd5b61096c83838361163b565b505050565b61096c838383611697565b32331461099b5760405162461bcd60e51b81526004016107ed9061239b565b600b5462010000900460ff16610a015760405162461bcd60e51b815260206004820152602560248201527f43727970746f42756c6c446f6773203a3a204d696e74696e67206973206f6e20604482015264506175736560d81b60648201526084016107ed565b6108ae81610a126001546000540390565b610a1c9190612401565b1115610a825760405162461bcd60e51b815260206004820152602f60248201527f43727970746f42756c6c446f6773203a3a2043616e6e6f74206d696e7420626560448201526e796f6e64206d617820737570706c7960881b60648201526084016107ed565b336000908152600e6020526040902054600a90610aa0908390612401565b1115610b145760405162461bcd60e51b815260206004820152603760248201527f43727970746f42756c6c446f67733a3a2043616e6e6f74206d696e742062657960448201527f6f6e642077686974656c697374206d6178206d696e742100000000000000000060648201526084016107ed565b610b2581666a94d74f430000612419565b341015610b895760405162461bcd60e51b815260206004820152602c60248201527f43727970746f42756c6c446f6773203a3a205061796d656e742069732062656c60448201526b6f772074686520707269636560a01b60648201526084016107ed565b6040516bffffffffffffffffffffffff193360601b166020820152600090603401604051602081830303815290604052805190602001209050610bcf83600c54836118ab565b610c2d5760405162461bcd60e51b815260206004820152602960248201527f43727970746f42756c6c446f6773203a3a20596f7520617265206e6f742077686044820152681a5d195b1a5cdd195960ba1b60648201526084016107ed565b336000908152600e602052604081208054849290610c4c908490612401565b9091555061096c905033836118c1565b6008546001600160a01b03163314610c865760405162461bcd60e51b81526004016107ed9061232b565b60006064610c95476003612419565b610c9f919061244e565b6040519091507390ee4b80c3b15b8b83510be8fcf2bced69a4c9db9082156108fc029083906000818181858888f19350505050158015610ce3573d6000803e3d6000fd5b5060405133904780156108fc02916000818181858888f19350505050158015610809573d6000803e3d6000fd5b61096c83838360405180602001604052806000815250611267565b600a8054610d3890612360565b80601f0160208091040260200160405190810160405280929190818152602001828054610d6490612360565b8015610db15780601f10610d8657610100808354040283529160200191610db1565b820191906000526020600020905b815481529060010190602001808311610d9457829003601f168201915b505050505081565b6008546001600160a01b03163314610de35760405162461bcd60e51b81526004016107ed9061232b565b600b805460ff19811660ff90911615179055565b6000610e02826118db565b5192915050565b60006001600160a01b038216610e32576040516323d3ad8160e21b815260040160405180910390fd5b506001600160a01b03166000908152600560205260409020546001600160401b031690565b6008546001600160a01b03163314610e815760405162461bcd60e51b81526004016107ed9061232b565b610e8b60006119f5565b565b6008546001600160a01b03163314610eb75760405162461bcd60e51b81526004016107ed9061232b565b600c55565b6060336000610eca82610e09565b90506000816001600160401b03811115610ee657610ee6611f83565b604051908082528060200260200182016040528015610f0f578160200160208202803683370190505b50905060005b82811015610f2f5780610f2781612462565b915050610f15565b509392505050565b6008546001600160a01b03163314610f615760405162461bcd60e51b81526004016107ed9061232b565b600b805462ff0000198116620100009182900460ff1615909102179055565b60606003805461081c90612360565b323314610fae5760405162461bcd60e51b81526004016107ed9061239b565b600b54610100900460ff1661100f5760405162461bcd60e51b815260206004820152602160248201527f43727970746f42756c6c446f6773203a3a204e6f7420596574204163746976656044820152601760f91b60648201526084016107ed565b6108ae816110206001546000540390565b61102a9190612401565b11156110845760405162461bcd60e51b815260206004820152602360248201527f43727970746f42756c6c446f6773203a3a204265796f6e64204d617820537570604482015262706c7960e81b60648201526084016107ed565b336000908152600d6020526040902054600a906110a2908390612401565b11156111025760405162461bcd60e51b815260206004820152602960248201527f43727970746f42756c6c446f6773203a3a20416c7265616479206d696e74656460448201526820332074696d65732160b81b60648201526084016107ed565b61111381668e1bc9bf040000612419565b3410156111625760405162461bcd60e51b815260206004820152601860248201527f43727970746f42756c6c446f6773203a3a2042656c6f7720000000000000000060448201526064016107ed565b336000908152600d602052604081208054839290611181908490612401565b90915550611191905033826118c1565b50565b6001600160a01b0382163314156111be5760405163b06307db60e01b815260040160405180910390fd5b3360008181526007602090815260408083206001600160a01b03871680855290835292819020805460ff191686151590811790915590519081529192917f17307eab39ab6107e8899845ad3d59bd9653f200f220920489ca2b5937696c31910160405180910390a35050565b6008546001600160a01b031633146112545760405162461bcd60e51b81526004016107ed9061232b565b805161080990600a906020840190611e80565b611272848484611697565b6001600160a01b0383163b15158015611294575061129284848484611a47565b155b156112b2576040516368d2bf6b60e11b815260040160405180910390fd5b50505050565b6008546001600160a01b031633146112e25760405162461bcd60e51b81526004016107ed9061232b565b600b54640100000000900460ff161561134b5760405162461bcd60e51b815260206004820152602560248201527f43727970746f42756c6c446f6773203a3a205465616d20616c7265616479206d6044820152641a5b9d195960da1b60648201526084016107ed565b600b805464ff000000001916640100000000179055610e8b3361026c6118c1565b6008546001600160a01b031633146113965760405162461bcd60e51b81526004016107ed9061232b565b600b805463ff00000019811663010000009182900460ff1615909102179055565b60606113c282611610565b6114265760405162461bcd60e51b815260206004820152602f60248201527f4552433732314d657461646174613a2055524920717565727920666f72206e6f60448201526e3732bc34b9ba32b73a103a37b5b2b760891b60648201526084016107ed565b6000611433836001612401565b600b5490915060ff166114d357600a805461144d90612360565b80601f016020809104026020016040519081016040528092919081815260200182805461147990612360565b80156114c65780601f1061149b576101008083540402835291602001916114c6565b820191906000526020600020905b8154815290600101906020018083116114a957829003601f168201915b5050505050915050919050565b6000600980546114e290612360565b9050116114fe576040518060200160405280600081525061152a565b600961150982611b3f565b60405160200161151a929190612499565b6040516020818303038152906040525b9392505050565b6008546001600160a01b0316331461155b5760405162461bcd60e51b81526004016107ed9061232b565b600b805461ff001981166101009182900460ff1615909102179055565b6008546001600160a01b031633146115a25760405162461bcd60e51b81526004016107ed9061232b565b6001600160a01b0381166116075760405162461bcd60e51b815260206004820152602660248201527f4f776e61626c653a206e6577206f776e657220697320746865207a65726f206160448201526564647265737360d01b60648201526084016107ed565b611191816119f5565b60008054821080156107bd575050600090815260046020526040902054600160e01b900460ff161590565b60008281526006602052604080822080546001600160a01b0319166001600160a01b0387811691821790925591518593918516917f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b92591a4505050565b60006116a2826118db565b80519091506000906001600160a01b0316336001600160a01b031614806116d0575081516116d09033610723565b806116eb5750336116e08461089f565b6001600160a01b0316145b90508061170b57604051632ce44b5f60e11b815260040160405180910390fd5b846001600160a01b031682600001516001600160a01b0316146117405760405162a1148160e81b815260040160405180910390fd5b6001600160a01b03841661176757604051633a954ecd60e21b815260040160405180910390fd5b611777600084846000015161163b565b6001600160a01b038581166000908152600560209081526040808320805467ffffffffffffffff198082166001600160401b0392831660001901831617909255898616808652838620805493841693831660019081018416949094179055898652600490945282852080546001600160e01b031916909417600160a01b4290921691909102179092559086018083529120549091166118615760005481101561186157825160008281526004602090815260409091208054918601516001600160401b0316600160a01b026001600160e01b03199092166001600160a01b03909316929092171790555b5082846001600160a01b0316866001600160a01b03167fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef60405160405180910390a45b5050505050565b6000826118b88584611c3c565b14949350505050565b610809828260405180602001604052806000815250611ca8565b6040805160608101825260008082526020820181905291810191909152816000548110156119dc57600081815260046020908152604091829020825160608101845290546001600160a01b0381168252600160a01b81046001600160401b031692820192909252600160e01b90910460ff161515918101829052906119da5780516001600160a01b031615611971579392505050565b5060001901600081815260046020908152604091829020825160608101845290546001600160a01b038116808352600160a01b82046001600160401b031693830193909352600160e01b900460ff16151592810192909252156119d5579392505050565b611971565b505b604051636f96cda160e11b815260040160405180910390fd5b600880546001600160a01b038381166001600160a01b0319831681179093556040519116919082907f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e090600090a35050565b604051630a85bd0160e11b81526000906001600160a01b0385169063150b7a0290611a7c903390899088908890600401612554565b602060405180830381600087803b158015611a9657600080fd5b505af1925050508015611ac6575060408051601f3d908101601f19168201909252611ac391810190612591565b60015b611b21573d808015611af4576040519150601f19603f3d011682016040523d82523d6000602084013e611af9565b606091505b508051611b19576040516368d2bf6b60e11b815260040160405180910390fd5b805181602001fd5b6001600160e01b031916630a85bd0160e11b1490505b949350505050565b606081611b635750506040805180820190915260018152600360fc1b602082015290565b8160005b8115611b8d5780611b7781612462565b9150611b869050600a8361244e565b9150611b67565b6000816001600160401b03811115611ba757611ba7611f83565b6040519080825280601f01601f191660200182016040528015611bd1576020820181803683370190505b5090505b8415611b3757611be66001836125ae565b9150611bf3600a866125c5565b611bfe906030612401565b60f81b818381518110611c1357611c136125d9565b60200101906001600160f81b031916908160001a905350611c35600a8661244e565b9450611bd5565b600081815b8451811015610f2f576000858281518110611c5e57611c5e6125d9565b60200260200101519050808311611c845760008381526020829052604090209250611c95565b600081815260208490526040902092505b5080611ca081612462565b915050611c41565b61096c83838360016000546001600160a01b038516611cd957604051622e076360e81b815260040160405180910390fd5b83611cf75760405163b562e8dd60e01b815260040160405180910390fd5b6001600160a01b038516600081815260056020908152604080832080546fffffffffffffffffffffffffffffffff1981166001600160401b038083168c0181169182176801000000000000000067ffffffffffffffff1990941690921783900481168c01811690920217909155858452600490925290912080546001600160e01b031916909217600160a01b429092169190910217905580808501838015611da857506001600160a01b0387163b15155b15611e31575b60405182906001600160a01b038916906000907fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef908290a4611df96000888480600101955088611a47565b611e16576040516368d2bf6b60e11b815260040160405180910390fd5b80821415611dae578260005414611e2c57600080fd5b611e77565b5b6040516001830192906001600160a01b038916906000907fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef908290a480821415611e32575b506000556118a4565b828054611e8c90612360565b90600052602060002090601f016020900481019282611eae5760008555611ef4565b82601f10611ec757805160ff1916838001178555611ef4565b82800160010185558215611ef4579182015b82811115611ef4578251825591602001919060010190611ed9565b50611f00929150611f04565b5090565b5b80821115611f005760008155600101611f05565b6001600160e01b03198116811461119157600080fd5b600060208284031215611f4157600080fd5b813561152a81611f19565b80356001600160a01b0381168114611f6357600080fd5b919050565b600060208284031215611f7a57600080fd5b61152a82611f4c565b634e487b7160e01b600052604160045260246000fd5b604051601f8201601f191681016001600160401b0381118282101715611fc157611fc1611f83565b604052919050565b60006001600160401b03831115611fe257611fe2611f83565b611ff5601f8401601f1916602001611f99565b905082815283838301111561200957600080fd5b828260208301376000602084830101529392505050565b60006020828403121561203257600080fd5b81356001600160401b0381111561204857600080fd5b8201601f8101841361205957600080fd5b611b3784823560208401611fc9565b60005b8381101561208357818101518382015260200161206b565b838111156112b25750506000910152565b600081518084526120ac816020860160208601612068565b601f01601f19169290920160200192915050565b60208152600061152a6020830184612094565b6000602082840312156120e557600080fd5b5035919050565b600080604083850312156120ff57600080fd5b61210883611f4c565b946020939093013593505050565b60008060006060848603121561212b57600080fd5b61213484611f4c565b925061214260208501611f4c565b9150604084013590509250925092565b6000806040838503121561216557600080fd5b82356001600160401b038082111561217c57600080fd5b818501915085601f83011261219057600080fd5b81356020828211156121a4576121a4611f83565b8160051b92506121b5818401611f99565b82815292840181019281810190898511156121cf57600080fd5b948201945b848610156121ed578535825294820194908201906121d4565b9997909101359750505050505050565b6020808252825182820181905260009190848201906040850190845b8181101561223557835183529284019291840191600101612219565b50909695505050505050565b6000806040838503121561225457600080fd5b61225d83611f4c565b91506020830135801515811461227257600080fd5b809150509250929050565b6000806000806080858703121561229357600080fd5b61229c85611f4c565b93506122aa60208601611f4c565b92506040850135915060608501356001600160401b038111156122cc57600080fd5b8501601f810187136122dd57600080fd5b6122ec87823560208401611fc9565b91505092959194509250565b6000806040838503121561230b57600080fd5b61231483611f4c565b915061232260208401611f4c565b90509250929050565b6020808252818101527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e6572604082015260600190565b600181811c9082168061237457607f821691505b6020821081141561239557634e487b7160e01b600052602260045260246000fd5b50919050565b60208082526030908201527f43727970746f42756c6c446f6773203a3a2043616e6e6f742062652063616c6c60408201526f195908189e48184818dbdb9d1c9858dd60821b606082015260800190565b634e487b7160e01b600052601160045260246000fd5b60008219821115612414576124146123eb565b500190565b6000816000190483118215151615612433576124336123eb565b500290565b634e487b7160e01b600052601260045260246000fd5b60008261245d5761245d612438565b500490565b6000600019821415612476576124766123eb565b5060010190565b6000815161248f818560208601612068565b9290920192915050565b600080845481600182811c9150808316806124b557607f831692505b60208084108214156124d557634e487b7160e01b86526022600452602486fd5b8180156124e957600181146124fa57612527565b60ff19861689528489019650612527565b60008b81526020902060005b8681101561251f5781548b820152908501908301612506565b505084890196505b50505050505061254b61253a828661247d565b64173539b7b760d91b815260050190565b95945050505050565b6001600160a01b038581168252841660208201526040810183905260806060820181905260009061258790830184612094565b9695505050505050565b6000602082840312156125a357600080fd5b815161152a81611f19565b6000828210156125c0576125c06123eb565b500390565b6000826125d4576125d4612438565b500690565b634e487b7160e01b600052603260045260246000fdfea2646970667358221220ccc0d679003696c9c6598f4d7991d88fc211f107d0883f5ac5ce95e85145f5b164736f6c63430008090033",
							"opcodes": "PUSH1 0x80 PUSH1 0x40 MSTORE CALLVALUE DUP1 ISZERO PUSH3 0x11 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH1 0x40 DUP1 MLOAD DUP1 DUP3 ADD DUP3 MSTORE PUSH1 0x17 DUP2 MSTORE PUSH32 0x43727970746F42756C6C446F6773204F6666696369616C000000000000000000 PUSH1 0x20 DUP1 DUP4 ADD SWAP2 DUP3 MSTORE DUP4 MLOAD DUP1 DUP6 ADD SWAP1 SWAP5 MSTORE PUSH1 0x3 DUP5 MSTORE PUSH3 0x10D091 PUSH1 0xEA SHL SWAP1 DUP5 ADD MSTORE DUP2 MLOAD SWAP2 SWAP3 SWAP2 PUSH3 0x72 SWAP2 PUSH1 0x2 SWAP2 PUSH3 0xF2 JUMP JUMPDEST POP DUP1 MLOAD PUSH3 0x88 SWAP1 PUSH1 0x3 SWAP1 PUSH1 0x20 DUP5 ADD SWAP1 PUSH3 0xF2 JUMP JUMPDEST POP POP PUSH1 0x0 DUP1 SSTORE POP PUSH3 0x9A CALLER PUSH3 0xA0 JUMP JUMPDEST PUSH3 0x1D5 JUMP JUMPDEST PUSH1 0x8 DUP1 SLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP4 DUP2 AND PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB NOT DUP4 AND DUP2 OR SWAP1 SWAP4 SSTORE PUSH1 0x40 MLOAD SWAP2 AND SWAP2 SWAP1 DUP3 SWAP1 PUSH32 0x8BE0079C531659141344CD1FD0A4F28419497F9722A3DAAFE3B4186F6B6457E0 SWAP1 PUSH1 0x0 SWAP1 LOG3 POP POP JUMP JUMPDEST DUP3 DUP1 SLOAD PUSH3 0x100 SWAP1 PUSH3 0x198 JUMP JUMPDEST SWAP1 PUSH1 0x0 MSTORE PUSH1 0x20 PUSH1 0x0 KECCAK256 SWAP1 PUSH1 0x1F ADD PUSH1 0x20 SWAP1 DIV DUP2 ADD SWAP3 DUP3 PUSH3 0x124 JUMPI PUSH1 0x0 DUP6 SSTORE PUSH3 0x16F JUMP JUMPDEST DUP3 PUSH1 0x1F LT PUSH3 0x13F JUMPI DUP1 MLOAD PUSH1 0xFF NOT AND DUP4 DUP1 ADD OR DUP6 SSTORE PUSH3 0x16F JUMP JUMPDEST DUP3 DUP1 ADD PUSH1 0x1 ADD DUP6 SSTORE DUP3 ISZERO PUSH3 0x16F JUMPI SWAP2 DUP3 ADD JUMPDEST DUP3 DUP2 GT ISZERO PUSH3 0x16F JUMPI DUP3 MLOAD DUP3 SSTORE SWAP2 PUSH1 0x20 ADD SWAP2 SWAP1 PUSH1 0x1 ADD SWAP1 PUSH3 0x152 JUMP JUMPDEST POP PUSH3 0x17D SWAP3 SWAP2 POP PUSH3 0x181 JUMP JUMPDEST POP SWAP1 JUMP JUMPDEST JUMPDEST DUP1 DUP3 GT ISZERO PUSH3 0x17D JUMPI PUSH1 0x0 DUP2 SSTORE PUSH1 0x1 ADD PUSH3 0x182 JUMP JUMPDEST PUSH1 0x1 DUP2 DUP2 SHR SWAP1 DUP3 AND DUP1 PUSH3 0x1AD JUMPI PUSH1 0x7F DUP3 AND SWAP2 POP JUMPDEST PUSH1 0x20 DUP3 LT DUP2 EQ ISZERO PUSH3 0x1CF JUMPI PUSH4 0x4E487B71 PUSH1 0xE0 SHL PUSH1 0x0 MSTORE PUSH1 0x22 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH1 0x0 REVERT JUMPDEST POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH2 0x2625 DUP1 PUSH3 0x1E5 PUSH1 0x0 CODECOPY PUSH1 0x0 RETURN INVALID PUSH1 0x80 PUSH1 0x40 MSTORE PUSH1 0x4 CALLDATASIZE LT PUSH2 0x25C JUMPI PUSH1 0x0 CALLDATALOAD PUSH1 0xE0 SHR DUP1 PUSH4 0x70A08231 GT PUSH2 0x144 JUMPI DUP1 PUSH4 0xB0962C53 GT PUSH2 0xB6 JUMPI DUP1 PUSH4 0xC4AE3168 GT PUSH2 0x7A JUMPI DUP1 PUSH4 0xC4AE3168 EQ PUSH2 0x69C JUMPI DUP1 PUSH4 0xC87B56DD EQ PUSH2 0x6B1 JUMPI DUP1 PUSH4 0xE222C7F9 EQ PUSH2 0x6D1 JUMPI DUP1 PUSH4 0xE8B5498D EQ PUSH2 0x6E6 JUMPI DUP1 PUSH4 0xE985E9C5 EQ PUSH2 0x708 JUMPI DUP1 PUSH4 0xF2FDE38B EQ PUSH2 0x751 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP1 PUSH4 0xB0962C53 EQ PUSH2 0x62C JUMPI DUP1 PUSH4 0xB88D4FDE EQ PUSH2 0x64C JUMPI DUP1 PUSH4 0xBA7A86B8 EQ PUSH2 0x66C JUMPI DUP1 PUSH4 0xBC912E1A EQ PUSH2 0x681 JUMPI DUP1 PUSH4 0xC08DFD3C EQ PUSH2 0x4E4 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP1 PUSH4 0x86A173EE GT PUSH2 0x108 JUMPI DUP1 PUSH4 0x86A173EE EQ PUSH2 0x591 JUMPI DUP1 PUSH4 0x8BB64A8C EQ PUSH2 0x5B1 JUMPI DUP1 PUSH4 0x8DA5CB5B EQ PUSH2 0x5C6 JUMPI DUP1 PUSH4 0x95D89B41 EQ PUSH2 0x5E4 JUMPI DUP1 PUSH4 0xA0712D68 EQ PUSH2 0x5F9 JUMPI DUP1 PUSH4 0xA22CB465 EQ PUSH2 0x60C JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP1 PUSH4 0x70A08231 EQ PUSH2 0x4F9 JUMPI DUP1 PUSH4 0x715018A6 EQ PUSH2 0x519 JUMPI DUP1 PUSH4 0x7CB64759 EQ PUSH2 0x52E JUMPI DUP1 PUSH4 0x83A974A2 EQ PUSH2 0x54E JUMPI DUP1 PUSH4 0x8456CB59 EQ PUSH2 0x570 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP1 PUSH4 0x2904E6D9 GT PUSH2 0x1DD JUMPI DUP1 PUSH4 0x49590657 GT PUSH2 0x1A1 JUMPI DUP1 PUSH4 0x49590657 EQ PUSH2 0x46B JUMPI DUP1 PUSH4 0x4CF5F7A4 EQ PUSH2 0x480 JUMPI DUP1 PUSH4 0x54214F69 EQ PUSH2 0x495 JUMPI DUP1 PUSH4 0x5B8AD429 EQ PUSH2 0x4AF JUMPI DUP1 PUSH4 0x6352211E EQ PUSH2 0x4C4 JUMPI DUP1 PUSH4 0x65F13097 EQ PUSH2 0x4E4 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP1 PUSH4 0x2904E6D9 EQ PUSH2 0x3EE JUMPI DUP1 PUSH4 0x32CB6B0C EQ PUSH2 0x401 JUMPI DUP1 PUSH4 0x33BC1C5C EQ PUSH2 0x417 JUMPI DUP1 PUSH4 0x3CCFD60B EQ PUSH2 0x436 JUMPI DUP1 PUSH4 0x42842E0E EQ PUSH2 0x44B JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP1 PUSH4 0x81812FC GT PUSH2 0x224 JUMPI DUP1 PUSH4 0x81812FC EQ PUSH2 0x330 JUMPI DUP1 PUSH4 0x95EA7B3 EQ PUSH2 0x368 JUMPI DUP1 PUSH4 0x18160DDD EQ PUSH2 0x388 JUMPI DUP1 PUSH4 0x1C16521C EQ PUSH2 0x3A1 JUMPI DUP1 PUSH4 0x23B872DD EQ PUSH2 0x3CE JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP1 PUSH4 0x1FFC9A7 EQ PUSH2 0x261 JUMPI DUP1 PUSH4 0x345E3CB EQ PUSH2 0x296 JUMPI DUP1 PUSH4 0x675B7C6 EQ PUSH2 0x2D1 JUMPI DUP1 PUSH4 0x6FDDE03 EQ PUSH2 0x2F3 JUMPI DUP1 PUSH4 0x7E89EC0 EQ PUSH2 0x315 JUMPI JUMPDEST PUSH1 0x0 DUP1 REVERT JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x26D JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x281 PUSH2 0x27C CALLDATASIZE PUSH1 0x4 PUSH2 0x1F2F JUMP JUMPDEST PUSH2 0x771 JUMP JUMPDEST PUSH1 0x40 MLOAD SWAP1 ISZERO ISZERO DUP2 MSTORE PUSH1 0x20 ADD JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x2A2 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x2C3 PUSH2 0x2B1 CALLDATASIZE PUSH1 0x4 PUSH2 0x1F68 JUMP JUMPDEST PUSH1 0xE PUSH1 0x20 MSTORE PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0x40 SWAP1 KECCAK256 SLOAD DUP2 JUMP JUMPDEST PUSH1 0x40 MLOAD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH2 0x28D JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x2DD JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x2F1 PUSH2 0x2EC CALLDATASIZE PUSH1 0x4 PUSH2 0x2020 JUMP JUMPDEST PUSH2 0x7C3 JUMP JUMPDEST STOP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x2FF JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x308 PUSH2 0x80D JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH2 0x28D SWAP2 SWAP1 PUSH2 0x20C0 JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x321 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x2C3 PUSH7 0x8E1BC9BF040000 DUP2 JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x33C JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x350 PUSH2 0x34B CALLDATASIZE PUSH1 0x4 PUSH2 0x20D3 JUMP JUMPDEST PUSH2 0x89F JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB SWAP1 SWAP2 AND DUP2 MSTORE PUSH1 0x20 ADD PUSH2 0x28D JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x374 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x2F1 PUSH2 0x383 CALLDATASIZE PUSH1 0x4 PUSH2 0x20EC JUMP JUMPDEST PUSH2 0x8E3 JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x394 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH1 0x1 SLOAD PUSH1 0x0 SLOAD SUB PUSH2 0x2C3 JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x3AD JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x2C3 PUSH2 0x3BC CALLDATASIZE PUSH1 0x4 PUSH2 0x1F68 JUMP JUMPDEST PUSH1 0xD PUSH1 0x20 MSTORE PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0x40 SWAP1 KECCAK256 SLOAD DUP2 JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x3DA JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x2F1 PUSH2 0x3E9 CALLDATASIZE PUSH1 0x4 PUSH2 0x2116 JUMP JUMPDEST PUSH2 0x971 JUMP JUMPDEST PUSH2 0x2F1 PUSH2 0x3FC CALLDATASIZE PUSH1 0x4 PUSH2 0x2152 JUMP JUMPDEST PUSH2 0x97C JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x40D JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x2C3 PUSH2 0x8AE DUP2 JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x423 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH1 0xB SLOAD PUSH2 0x281 SWAP1 PUSH2 0x100 SWAP1 DIV PUSH1 0xFF AND DUP2 JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x442 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x2F1 PUSH2 0xC5C JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x457 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x2F1 PUSH2 0x466 CALLDATASIZE PUSH1 0x4 PUSH2 0x2116 JUMP JUMPDEST PUSH2 0xD10 JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x477 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH1 0xC SLOAD PUSH2 0x2C3 JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x48C JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x308 PUSH2 0xD2B JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x4A1 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH1 0xB SLOAD PUSH2 0x281 SWAP1 PUSH1 0xFF AND DUP2 JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x4BB JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x2F1 PUSH2 0xDB9 JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x4D0 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x350 PUSH2 0x4DF CALLDATASIZE PUSH1 0x4 PUSH2 0x20D3 JUMP JUMPDEST PUSH2 0xDF7 JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x4F0 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x2C3 PUSH1 0xA DUP2 JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x505 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x2C3 PUSH2 0x514 CALLDATASIZE PUSH1 0x4 PUSH2 0x1F68 JUMP JUMPDEST PUSH2 0xE09 JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x525 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x2F1 PUSH2 0xE57 JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x53A JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x2F1 PUSH2 0x549 CALLDATASIZE PUSH1 0x4 PUSH2 0x20D3 JUMP JUMPDEST PUSH2 0xE8D JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x55A JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x563 PUSH2 0xEBC JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH2 0x28D SWAP2 SWAP1 PUSH2 0x21FD JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x57C JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH1 0xB SLOAD PUSH2 0x281 SWAP1 PUSH4 0x1000000 SWAP1 DIV PUSH1 0xFF AND DUP2 JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x59D JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH1 0xB SLOAD PUSH2 0x281 SWAP1 PUSH3 0x10000 SWAP1 DIV PUSH1 0xFF AND DUP2 JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x5BD JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x2F1 PUSH2 0xF37 JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x5D2 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH1 0x8 SLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND PUSH2 0x350 JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x5F0 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x308 PUSH2 0xF80 JUMP JUMPDEST PUSH2 0x2F1 PUSH2 0x607 CALLDATASIZE PUSH1 0x4 PUSH2 0x20D3 JUMP JUMPDEST PUSH2 0xF8F JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x618 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x2F1 PUSH2 0x627 CALLDATASIZE PUSH1 0x4 PUSH2 0x2241 JUMP JUMPDEST PUSH2 0x1194 JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x638 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x2F1 PUSH2 0x647 CALLDATASIZE PUSH1 0x4 PUSH2 0x2020 JUMP JUMPDEST PUSH2 0x122A JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x658 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x2F1 PUSH2 0x667 CALLDATASIZE PUSH1 0x4 PUSH2 0x227D JUMP JUMPDEST PUSH2 0x1267 JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x678 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x2F1 PUSH2 0x12B8 JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x68D JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x2C3 PUSH7 0x6A94D74F430000 DUP2 JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x6A8 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x2F1 PUSH2 0x136C JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x6BD JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x308 PUSH2 0x6CC CALLDATASIZE PUSH1 0x4 PUSH2 0x20D3 JUMP JUMPDEST PUSH2 0x13B7 JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x6DD JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x2F1 PUSH2 0x1531 JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x6F2 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH1 0xB SLOAD PUSH2 0x281 SWAP1 PUSH5 0x100000000 SWAP1 DIV PUSH1 0xFF AND DUP2 JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x714 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x281 PUSH2 0x723 CALLDATASIZE PUSH1 0x4 PUSH2 0x22F8 JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB SWAP2 DUP3 AND PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0x7 PUSH1 0x20 SWAP1 DUP2 MSTORE PUSH1 0x40 DUP1 DUP4 KECCAK256 SWAP4 SWAP1 SWAP5 AND DUP3 MSTORE SWAP2 SWAP1 SWAP2 MSTORE KECCAK256 SLOAD PUSH1 0xFF AND SWAP1 JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x75D JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x2F1 PUSH2 0x76C CALLDATASIZE PUSH1 0x4 PUSH2 0x1F68 JUMP JUMPDEST PUSH2 0x1578 JUMP JUMPDEST PUSH1 0x0 PUSH1 0x1 PUSH1 0x1 PUSH1 0xE0 SHL SUB NOT DUP3 AND PUSH4 0x80AC58CD PUSH1 0xE0 SHL EQ DUP1 PUSH2 0x7A2 JUMPI POP PUSH1 0x1 PUSH1 0x1 PUSH1 0xE0 SHL SUB NOT DUP3 AND PUSH4 0x5B5E139F PUSH1 0xE0 SHL EQ JUMPDEST DUP1 PUSH2 0x7BD JUMPI POP PUSH4 0x1FFC9A7 PUSH1 0xE0 SHL PUSH1 0x1 PUSH1 0x1 PUSH1 0xE0 SHL SUB NOT DUP4 AND EQ JUMPDEST SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x8 SLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND CALLER EQ PUSH2 0x7F6 JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x7ED SWAP1 PUSH2 0x232B JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST DUP1 MLOAD PUSH2 0x809 SWAP1 PUSH1 0x9 SWAP1 PUSH1 0x20 DUP5 ADD SWAP1 PUSH2 0x1E80 JUMP JUMPDEST POP POP JUMP JUMPDEST PUSH1 0x60 PUSH1 0x2 DUP1 SLOAD PUSH2 0x81C SWAP1 PUSH2 0x2360 JUMP JUMPDEST DUP1 PUSH1 0x1F ADD PUSH1 0x20 DUP1 SWAP2 DIV MUL PUSH1 0x20 ADD PUSH1 0x40 MLOAD SWAP1 DUP2 ADD PUSH1 0x40 MSTORE DUP1 SWAP3 SWAP2 SWAP1 DUP2 DUP2 MSTORE PUSH1 0x20 ADD DUP3 DUP1 SLOAD PUSH2 0x848 SWAP1 PUSH2 0x2360 JUMP JUMPDEST DUP1 ISZERO PUSH2 0x895 JUMPI DUP1 PUSH1 0x1F LT PUSH2 0x86A JUMPI PUSH2 0x100 DUP1 DUP4 SLOAD DIV MUL DUP4 MSTORE SWAP2 PUSH1 0x20 ADD SWAP2 PUSH2 0x895 JUMP JUMPDEST DUP3 ADD SWAP2 SWAP1 PUSH1 0x0 MSTORE PUSH1 0x20 PUSH1 0x0 KECCAK256 SWAP1 JUMPDEST DUP2 SLOAD DUP2 MSTORE SWAP1 PUSH1 0x1 ADD SWAP1 PUSH1 0x20 ADD DUP1 DUP4 GT PUSH2 0x878 JUMPI DUP3 SWAP1 SUB PUSH1 0x1F AND DUP3 ADD SWAP2 JUMPDEST POP POP POP POP POP SWAP1 POP SWAP1 JUMP JUMPDEST PUSH1 0x0 PUSH2 0x8AA DUP3 PUSH2 0x1610 JUMP JUMPDEST PUSH2 0x8C7 JUMPI PUSH1 0x40 MLOAD PUSH4 0x33D1C039 PUSH1 0xE2 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST POP PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0x6 PUSH1 0x20 MSTORE PUSH1 0x40 SWAP1 KECCAK256 SLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND SWAP1 JUMP JUMPDEST PUSH1 0x0 PUSH2 0x8EE DUP3 PUSH2 0xDF7 JUMP JUMPDEST SWAP1 POP DUP1 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND DUP4 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND EQ ISZERO PUSH2 0x923 JUMPI PUSH1 0x40 MLOAD PUSH4 0x250FDEE3 PUSH1 0xE2 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST CALLER PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP3 AND EQ DUP1 ISZERO SWAP1 PUSH2 0x943 JUMPI POP PUSH2 0x941 DUP2 CALLER PUSH2 0x723 JUMP JUMPDEST ISZERO JUMPDEST ISZERO PUSH2 0x961 JUMPI PUSH1 0x40 MLOAD PUSH4 0x67D9DCA1 PUSH1 0xE1 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST PUSH2 0x96C DUP4 DUP4 DUP4 PUSH2 0x163B JUMP JUMPDEST POP POP POP JUMP JUMPDEST PUSH2 0x96C DUP4 DUP4 DUP4 PUSH2 0x1697 JUMP JUMPDEST ORIGIN CALLER EQ PUSH2 0x99B JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x7ED SWAP1 PUSH2 0x239B JUMP JUMPDEST PUSH1 0xB SLOAD PUSH3 0x10000 SWAP1 DIV PUSH1 0xFF AND PUSH2 0xA01 JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x25 PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x43727970746F42756C6C446F6773203A3A204D696E74696E67206973206F6E20 PUSH1 0x44 DUP3 ADD MSTORE PUSH5 0x5061757365 PUSH1 0xD8 SHL PUSH1 0x64 DUP3 ADD MSTORE PUSH1 0x84 ADD PUSH2 0x7ED JUMP JUMPDEST PUSH2 0x8AE DUP2 PUSH2 0xA12 PUSH1 0x1 SLOAD PUSH1 0x0 SLOAD SUB SWAP1 JUMP JUMPDEST PUSH2 0xA1C SWAP2 SWAP1 PUSH2 0x2401 JUMP JUMPDEST GT ISZERO PUSH2 0xA82 JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x2F PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x43727970746F42756C6C446F6773203A3A2043616E6E6F74206D696E74206265 PUSH1 0x44 DUP3 ADD MSTORE PUSH15 0x796F6E64206D617820737570706C79 PUSH1 0x88 SHL PUSH1 0x64 DUP3 ADD MSTORE PUSH1 0x84 ADD PUSH2 0x7ED JUMP JUMPDEST CALLER PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0xE PUSH1 0x20 MSTORE PUSH1 0x40 SWAP1 KECCAK256 SLOAD PUSH1 0xA SWAP1 PUSH2 0xAA0 SWAP1 DUP4 SWAP1 PUSH2 0x2401 JUMP JUMPDEST GT ISZERO PUSH2 0xB14 JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x37 PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x43727970746F42756C6C446F67733A3A2043616E6E6F74206D696E7420626579 PUSH1 0x44 DUP3 ADD MSTORE PUSH32 0x6F6E642077686974656C697374206D6178206D696E7421000000000000000000 PUSH1 0x64 DUP3 ADD MSTORE PUSH1 0x84 ADD PUSH2 0x7ED JUMP JUMPDEST PUSH2 0xB25 DUP2 PUSH7 0x6A94D74F430000 PUSH2 0x2419 JUMP JUMPDEST CALLVALUE LT ISZERO PUSH2 0xB89 JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x2C PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x43727970746F42756C6C446F6773203A3A205061796D656E742069732062656C PUSH1 0x44 DUP3 ADD MSTORE PUSH12 0x6F7720746865207072696365 PUSH1 0xA0 SHL PUSH1 0x64 DUP3 ADD MSTORE PUSH1 0x84 ADD PUSH2 0x7ED JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH12 0xFFFFFFFFFFFFFFFFFFFFFFFF NOT CALLER PUSH1 0x60 SHL AND PUSH1 0x20 DUP3 ADD MSTORE PUSH1 0x0 SWAP1 PUSH1 0x34 ADD PUSH1 0x40 MLOAD PUSH1 0x20 DUP2 DUP4 SUB SUB DUP2 MSTORE SWAP1 PUSH1 0x40 MSTORE DUP1 MLOAD SWAP1 PUSH1 0x20 ADD KECCAK256 SWAP1 POP PUSH2 0xBCF DUP4 PUSH1 0xC SLOAD DUP4 PUSH2 0x18AB JUMP JUMPDEST PUSH2 0xC2D JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x29 PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x43727970746F42756C6C446F6773203A3A20596F7520617265206E6F74207768 PUSH1 0x44 DUP3 ADD MSTORE PUSH9 0x1A5D195B1A5CDD1959 PUSH1 0xBA SHL PUSH1 0x64 DUP3 ADD MSTORE PUSH1 0x84 ADD PUSH2 0x7ED JUMP JUMPDEST CALLER PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0xE PUSH1 0x20 MSTORE PUSH1 0x40 DUP2 KECCAK256 DUP1 SLOAD DUP5 SWAP3 SWAP1 PUSH2 0xC4C SWAP1 DUP5 SWAP1 PUSH2 0x2401 JUMP JUMPDEST SWAP1 SWAP2 SSTORE POP PUSH2 0x96C SWAP1 POP CALLER DUP4 PUSH2 0x18C1 JUMP JUMPDEST PUSH1 0x8 SLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND CALLER EQ PUSH2 0xC86 JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x7ED SWAP1 PUSH2 0x232B JUMP JUMPDEST PUSH1 0x0 PUSH1 0x64 PUSH2 0xC95 SELFBALANCE PUSH1 0x3 PUSH2 0x2419 JUMP JUMPDEST PUSH2 0xC9F SWAP2 SWAP1 PUSH2 0x244E JUMP JUMPDEST PUSH1 0x40 MLOAD SWAP1 SWAP2 POP PUSH20 0x90EE4B80C3B15B8B83510BE8FCF2BCED69A4C9DB SWAP1 DUP3 ISZERO PUSH2 0x8FC MUL SWAP1 DUP4 SWAP1 PUSH1 0x0 DUP2 DUP2 DUP2 DUP6 DUP9 DUP9 CALL SWAP4 POP POP POP POP ISZERO DUP1 ISZERO PUSH2 0xCE3 JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP PUSH1 0x40 MLOAD CALLER SWAP1 SELFBALANCE DUP1 ISZERO PUSH2 0x8FC MUL SWAP2 PUSH1 0x0 DUP2 DUP2 DUP2 DUP6 DUP9 DUP9 CALL SWAP4 POP POP POP POP ISZERO DUP1 ISZERO PUSH2 0x809 JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST PUSH2 0x96C DUP4 DUP4 DUP4 PUSH1 0x40 MLOAD DUP1 PUSH1 0x20 ADD PUSH1 0x40 MSTORE DUP1 PUSH1 0x0 DUP2 MSTORE POP PUSH2 0x1267 JUMP JUMPDEST PUSH1 0xA DUP1 SLOAD PUSH2 0xD38 SWAP1 PUSH2 0x2360 JUMP JUMPDEST DUP1 PUSH1 0x1F ADD PUSH1 0x20 DUP1 SWAP2 DIV MUL PUSH1 0x20 ADD PUSH1 0x40 MLOAD SWAP1 DUP2 ADD PUSH1 0x40 MSTORE DUP1 SWAP3 SWAP2 SWAP1 DUP2 DUP2 MSTORE PUSH1 0x20 ADD DUP3 DUP1 SLOAD PUSH2 0xD64 SWAP1 PUSH2 0x2360 JUMP JUMPDEST DUP1 ISZERO PUSH2 0xDB1 JUMPI DUP1 PUSH1 0x1F LT PUSH2 0xD86 JUMPI PUSH2 0x100 DUP1 DUP4 SLOAD DIV MUL DUP4 MSTORE SWAP2 PUSH1 0x20 ADD SWAP2 PUSH2 0xDB1 JUMP JUMPDEST DUP3 ADD SWAP2 SWAP1 PUSH1 0x0 MSTORE PUSH1 0x20 PUSH1 0x0 KECCAK256 SWAP1 JUMPDEST DUP2 SLOAD DUP2 MSTORE SWAP1 PUSH1 0x1 ADD SWAP1 PUSH1 0x20 ADD DUP1 DUP4 GT PUSH2 0xD94 JUMPI DUP3 SWAP1 SUB PUSH1 0x1F AND DUP3 ADD SWAP2 JUMPDEST POP POP POP POP POP DUP2 JUMP JUMPDEST PUSH1 0x8 SLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND CALLER EQ PUSH2 0xDE3 JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x7ED SWAP1 PUSH2 0x232B JUMP JUMPDEST PUSH1 0xB DUP1 SLOAD PUSH1 0xFF NOT DUP2 AND PUSH1 0xFF SWAP1 SWAP2 AND ISZERO OR SWAP1 SSTORE JUMP JUMPDEST PUSH1 0x0 PUSH2 0xE02 DUP3 PUSH2 0x18DB JUMP JUMPDEST MLOAD SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP3 AND PUSH2 0xE32 JUMPI PUSH1 0x40 MLOAD PUSH4 0x23D3AD81 PUSH1 0xE2 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST POP PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0x5 PUSH1 0x20 MSTORE PUSH1 0x40 SWAP1 KECCAK256 SLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0x40 SHL SUB AND SWAP1 JUMP JUMPDEST PUSH1 0x8 SLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND CALLER EQ PUSH2 0xE81 JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x7ED SWAP1 PUSH2 0x232B JUMP JUMPDEST PUSH2 0xE8B PUSH1 0x0 PUSH2 0x19F5 JUMP JUMPDEST JUMP JUMPDEST PUSH1 0x8 SLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND CALLER EQ PUSH2 0xEB7 JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x7ED SWAP1 PUSH2 0x232B JUMP JUMPDEST PUSH1 0xC SSTORE JUMP JUMPDEST PUSH1 0x60 CALLER PUSH1 0x0 PUSH2 0xECA DUP3 PUSH2 0xE09 JUMP JUMPDEST SWAP1 POP PUSH1 0x0 DUP2 PUSH1 0x1 PUSH1 0x1 PUSH1 0x40 SHL SUB DUP2 GT ISZERO PUSH2 0xEE6 JUMPI PUSH2 0xEE6 PUSH2 0x1F83 JUMP JUMPDEST PUSH1 0x40 MLOAD SWAP1 DUP1 DUP3 MSTORE DUP1 PUSH1 0x20 MUL PUSH1 0x20 ADD DUP3 ADD PUSH1 0x40 MSTORE DUP1 ISZERO PUSH2 0xF0F JUMPI DUP2 PUSH1 0x20 ADD PUSH1 0x20 DUP3 MUL DUP1 CALLDATASIZE DUP4 CALLDATACOPY ADD SWAP1 POP JUMPDEST POP SWAP1 POP PUSH1 0x0 JUMPDEST DUP3 DUP2 LT ISZERO PUSH2 0xF2F JUMPI DUP1 PUSH2 0xF27 DUP2 PUSH2 0x2462 JUMP JUMPDEST SWAP2 POP POP PUSH2 0xF15 JUMP JUMPDEST POP SWAP4 SWAP3 POP POP POP JUMP JUMPDEST PUSH1 0x8 SLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND CALLER EQ PUSH2 0xF61 JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x7ED SWAP1 PUSH2 0x232B JUMP JUMPDEST PUSH1 0xB DUP1 SLOAD PUSH3 0xFF0000 NOT DUP2 AND PUSH3 0x10000 SWAP2 DUP3 SWAP1 DIV PUSH1 0xFF AND ISZERO SWAP1 SWAP2 MUL OR SWAP1 SSTORE JUMP JUMPDEST PUSH1 0x60 PUSH1 0x3 DUP1 SLOAD PUSH2 0x81C SWAP1 PUSH2 0x2360 JUMP JUMPDEST ORIGIN CALLER EQ PUSH2 0xFAE JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x7ED SWAP1 PUSH2 0x239B JUMP JUMPDEST PUSH1 0xB SLOAD PUSH2 0x100 SWAP1 DIV PUSH1 0xFF AND PUSH2 0x100F JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x21 PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x43727970746F42756C6C446F6773203A3A204E6F742059657420416374697665 PUSH1 0x44 DUP3 ADD MSTORE PUSH1 0x17 PUSH1 0xF9 SHL PUSH1 0x64 DUP3 ADD MSTORE PUSH1 0x84 ADD PUSH2 0x7ED JUMP JUMPDEST PUSH2 0x8AE DUP2 PUSH2 0x1020 PUSH1 0x1 SLOAD PUSH1 0x0 SLOAD SUB SWAP1 JUMP JUMPDEST PUSH2 0x102A SWAP2 SWAP1 PUSH2 0x2401 JUMP JUMPDEST GT ISZERO PUSH2 0x1084 JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x23 PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x43727970746F42756C6C446F6773203A3A204265796F6E64204D617820537570 PUSH1 0x44 DUP3 ADD MSTORE PUSH3 0x706C79 PUSH1 0xE8 SHL PUSH1 0x64 DUP3 ADD MSTORE PUSH1 0x84 ADD PUSH2 0x7ED JUMP JUMPDEST CALLER PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0xD PUSH1 0x20 MSTORE PUSH1 0x40 SWAP1 KECCAK256 SLOAD PUSH1 0xA SWAP1 PUSH2 0x10A2 SWAP1 DUP4 SWAP1 PUSH2 0x2401 JUMP JUMPDEST GT ISZERO PUSH2 0x1102 JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x29 PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x43727970746F42756C6C446F6773203A3A20416C7265616479206D696E746564 PUSH1 0x44 DUP3 ADD MSTORE PUSH9 0x20332074696D657321 PUSH1 0xB8 SHL PUSH1 0x64 DUP3 ADD MSTORE PUSH1 0x84 ADD PUSH2 0x7ED JUMP JUMPDEST PUSH2 0x1113 DUP2 PUSH7 0x8E1BC9BF040000 PUSH2 0x2419 JUMP JUMPDEST CALLVALUE LT ISZERO PUSH2 0x1162 JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x18 PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x43727970746F42756C6C446F6773203A3A2042656C6F77200000000000000000 PUSH1 0x44 DUP3 ADD MSTORE PUSH1 0x64 ADD PUSH2 0x7ED JUMP JUMPDEST CALLER PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0xD PUSH1 0x20 MSTORE PUSH1 0x40 DUP2 KECCAK256 DUP1 SLOAD DUP4 SWAP3 SWAP1 PUSH2 0x1181 SWAP1 DUP5 SWAP1 PUSH2 0x2401 JUMP JUMPDEST SWAP1 SWAP2 SSTORE POP PUSH2 0x1191 SWAP1 POP CALLER DUP3 PUSH2 0x18C1 JUMP JUMPDEST POP JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP3 AND CALLER EQ ISZERO PUSH2 0x11BE JUMPI PUSH1 0x40 MLOAD PUSH4 0xB06307DB PUSH1 0xE0 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST CALLER PUSH1 0x0 DUP2 DUP2 MSTORE PUSH1 0x7 PUSH1 0x20 SWAP1 DUP2 MSTORE PUSH1 0x40 DUP1 DUP4 KECCAK256 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP8 AND DUP1 DUP6 MSTORE SWAP1 DUP4 MSTORE SWAP3 DUP2 SWAP1 KECCAK256 DUP1 SLOAD PUSH1 0xFF NOT AND DUP7 ISZERO ISZERO SWAP1 DUP2 OR SWAP1 SWAP2 SSTORE SWAP1 MLOAD SWAP1 DUP2 MSTORE SWAP2 SWAP3 SWAP2 PUSH32 0x17307EAB39AB6107E8899845AD3D59BD9653F200F220920489CA2B5937696C31 SWAP2 ADD PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 LOG3 POP POP JUMP JUMPDEST PUSH1 0x8 SLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND CALLER EQ PUSH2 0x1254 JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x7ED SWAP1 PUSH2 0x232B JUMP JUMPDEST DUP1 MLOAD PUSH2 0x809 SWAP1 PUSH1 0xA SWAP1 PUSH1 0x20 DUP5 ADD SWAP1 PUSH2 0x1E80 JUMP JUMPDEST PUSH2 0x1272 DUP5 DUP5 DUP5 PUSH2 0x1697 JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP4 AND EXTCODESIZE ISZERO ISZERO DUP1 ISZERO PUSH2 0x1294 JUMPI POP PUSH2 0x1292 DUP5 DUP5 DUP5 DUP5 PUSH2 0x1A47 JUMP JUMPDEST ISZERO JUMPDEST ISZERO PUSH2 0x12B2 JUMPI PUSH1 0x40 MLOAD PUSH4 0x68D2BF6B PUSH1 0xE1 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST POP POP POP POP JUMP JUMPDEST PUSH1 0x8 SLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND CALLER EQ PUSH2 0x12E2 JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x7ED SWAP1 PUSH2 0x232B JUMP JUMPDEST PUSH1 0xB SLOAD PUSH5 0x100000000 SWAP1 DIV PUSH1 0xFF AND ISZERO PUSH2 0x134B JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x25 PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x43727970746F42756C6C446F6773203A3A205465616D20616C7265616479206D PUSH1 0x44 DUP3 ADD MSTORE PUSH5 0x1A5B9D1959 PUSH1 0xDA SHL PUSH1 0x64 DUP3 ADD MSTORE PUSH1 0x84 ADD PUSH2 0x7ED JUMP JUMPDEST PUSH1 0xB DUP1 SLOAD PUSH5 0xFF00000000 NOT AND PUSH5 0x100000000 OR SWAP1 SSTORE PUSH2 0xE8B CALLER PUSH2 0x26C PUSH2 0x18C1 JUMP JUMPDEST PUSH1 0x8 SLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND CALLER EQ PUSH2 0x1396 JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x7ED SWAP1 PUSH2 0x232B JUMP JUMPDEST PUSH1 0xB DUP1 SLOAD PUSH4 0xFF000000 NOT DUP2 AND PUSH4 0x1000000 SWAP2 DUP3 SWAP1 DIV PUSH1 0xFF AND ISZERO SWAP1 SWAP2 MUL OR SWAP1 SSTORE JUMP JUMPDEST PUSH1 0x60 PUSH2 0x13C2 DUP3 PUSH2 0x1610 JUMP JUMPDEST PUSH2 0x1426 JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x2F PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x4552433732314D657461646174613A2055524920717565727920666F72206E6F PUSH1 0x44 DUP3 ADD MSTORE PUSH15 0x3732BC34B9BA32B73A103A37B5B2B7 PUSH1 0x89 SHL PUSH1 0x64 DUP3 ADD MSTORE PUSH1 0x84 ADD PUSH2 0x7ED JUMP JUMPDEST PUSH1 0x0 PUSH2 0x1433 DUP4 PUSH1 0x1 PUSH2 0x2401 JUMP JUMPDEST PUSH1 0xB SLOAD SWAP1 SWAP2 POP PUSH1 0xFF AND PUSH2 0x14D3 JUMPI PUSH1 0xA DUP1 SLOAD PUSH2 0x144D SWAP1 PUSH2 0x2360 JUMP JUMPDEST DUP1 PUSH1 0x1F ADD PUSH1 0x20 DUP1 SWAP2 DIV MUL PUSH1 0x20 ADD PUSH1 0x40 MLOAD SWAP1 DUP2 ADD PUSH1 0x40 MSTORE DUP1 SWAP3 SWAP2 SWAP1 DUP2 DUP2 MSTORE PUSH1 0x20 ADD DUP3 DUP1 SLOAD PUSH2 0x1479 SWAP1 PUSH2 0x2360 JUMP JUMPDEST DUP1 ISZERO PUSH2 0x14C6 JUMPI DUP1 PUSH1 0x1F LT PUSH2 0x149B JUMPI PUSH2 0x100 DUP1 DUP4 SLOAD DIV MUL DUP4 MSTORE SWAP2 PUSH1 0x20 ADD SWAP2 PUSH2 0x14C6 JUMP JUMPDEST DUP3 ADD SWAP2 SWAP1 PUSH1 0x0 MSTORE PUSH1 0x20 PUSH1 0x0 KECCAK256 SWAP1 JUMPDEST DUP2 SLOAD DUP2 MSTORE SWAP1 PUSH1 0x1 ADD SWAP1 PUSH1 0x20 ADD DUP1 DUP4 GT PUSH2 0x14A9 JUMPI DUP3 SWAP1 SUB PUSH1 0x1F AND DUP3 ADD SWAP2 JUMPDEST POP POP POP POP POP SWAP2 POP POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x9 DUP1 SLOAD PUSH2 0x14E2 SWAP1 PUSH2 0x2360 JUMP JUMPDEST SWAP1 POP GT PUSH2 0x14FE JUMPI PUSH1 0x40 MLOAD DUP1 PUSH1 0x20 ADD PUSH1 0x40 MSTORE DUP1 PUSH1 0x0 DUP2 MSTORE POP PUSH2 0x152A JUMP JUMPDEST PUSH1 0x9 PUSH2 0x1509 DUP3 PUSH2 0x1B3F JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH1 0x20 ADD PUSH2 0x151A SWAP3 SWAP2 SWAP1 PUSH2 0x2499 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH1 0x20 DUP2 DUP4 SUB SUB DUP2 MSTORE SWAP1 PUSH1 0x40 MSTORE JUMPDEST SWAP4 SWAP3 POP POP POP JUMP JUMPDEST PUSH1 0x8 SLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND CALLER EQ PUSH2 0x155B JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x7ED SWAP1 PUSH2 0x232B JUMP JUMPDEST PUSH1 0xB DUP1 SLOAD PUSH2 0xFF00 NOT DUP2 AND PUSH2 0x100 SWAP2 DUP3 SWAP1 DIV PUSH1 0xFF AND ISZERO SWAP1 SWAP2 MUL OR SWAP1 SSTORE JUMP JUMPDEST PUSH1 0x8 SLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND CALLER EQ PUSH2 0x15A2 JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x7ED SWAP1 PUSH2 0x232B JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP2 AND PUSH2 0x1607 JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x26 PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x4F776E61626C653A206E6577206F776E657220697320746865207A65726F2061 PUSH1 0x44 DUP3 ADD MSTORE PUSH6 0x646472657373 PUSH1 0xD0 SHL PUSH1 0x64 DUP3 ADD MSTORE PUSH1 0x84 ADD PUSH2 0x7ED JUMP JUMPDEST PUSH2 0x1191 DUP2 PUSH2 0x19F5 JUMP JUMPDEST PUSH1 0x0 DUP1 SLOAD DUP3 LT DUP1 ISZERO PUSH2 0x7BD JUMPI POP POP PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0x4 PUSH1 0x20 MSTORE PUSH1 0x40 SWAP1 KECCAK256 SLOAD PUSH1 0x1 PUSH1 0xE0 SHL SWAP1 DIV PUSH1 0xFF AND ISZERO SWAP1 JUMP JUMPDEST PUSH1 0x0 DUP3 DUP2 MSTORE PUSH1 0x6 PUSH1 0x20 MSTORE PUSH1 0x40 DUP1 DUP3 KECCAK256 DUP1 SLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB NOT AND PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP8 DUP2 AND SWAP2 DUP3 OR SWAP1 SWAP3 SSTORE SWAP2 MLOAD DUP6 SWAP4 SWAP2 DUP6 AND SWAP2 PUSH32 0x8C5BE1E5EBEC7D5BD14F71427D1E84F3DD0314C0F7B2291E5B200AC8C7C3B925 SWAP2 LOG4 POP POP POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x16A2 DUP3 PUSH2 0x18DB JUMP JUMPDEST DUP1 MLOAD SWAP1 SWAP2 POP PUSH1 0x0 SWAP1 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND CALLER PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND EQ DUP1 PUSH2 0x16D0 JUMPI POP DUP2 MLOAD PUSH2 0x16D0 SWAP1 CALLER PUSH2 0x723 JUMP JUMPDEST DUP1 PUSH2 0x16EB JUMPI POP CALLER PUSH2 0x16E0 DUP5 PUSH2 0x89F JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND EQ JUMPDEST SWAP1 POP DUP1 PUSH2 0x170B JUMPI PUSH1 0x40 MLOAD PUSH4 0x2CE44B5F PUSH1 0xE1 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST DUP5 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND DUP3 PUSH1 0x0 ADD MLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND EQ PUSH2 0x1740 JUMPI PUSH1 0x40 MLOAD PUSH3 0xA11481 PUSH1 0xE8 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP5 AND PUSH2 0x1767 JUMPI PUSH1 0x40 MLOAD PUSH4 0x3A954ECD PUSH1 0xE2 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST PUSH2 0x1777 PUSH1 0x0 DUP5 DUP5 PUSH1 0x0 ADD MLOAD PUSH2 0x163B JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP6 DUP2 AND PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0x5 PUSH1 0x20 SWAP1 DUP2 MSTORE PUSH1 0x40 DUP1 DUP4 KECCAK256 DUP1 SLOAD PUSH8 0xFFFFFFFFFFFFFFFF NOT DUP1 DUP3 AND PUSH1 0x1 PUSH1 0x1 PUSH1 0x40 SHL SUB SWAP3 DUP4 AND PUSH1 0x0 NOT ADD DUP4 AND OR SWAP1 SWAP3 SSTORE DUP10 DUP7 AND DUP1 DUP7 MSTORE DUP4 DUP7 KECCAK256 DUP1 SLOAD SWAP4 DUP5 AND SWAP4 DUP4 AND PUSH1 0x1 SWAP1 DUP2 ADD DUP5 AND SWAP5 SWAP1 SWAP5 OR SWAP1 SSTORE DUP10 DUP7 MSTORE PUSH1 0x4 SWAP1 SWAP5 MSTORE DUP3 DUP6 KECCAK256 DUP1 SLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xE0 SHL SUB NOT AND SWAP1 SWAP5 OR PUSH1 0x1 PUSH1 0xA0 SHL TIMESTAMP SWAP1 SWAP3 AND SWAP2 SWAP1 SWAP2 MUL OR SWAP1 SWAP3 SSTORE SWAP1 DUP7 ADD DUP1 DUP4 MSTORE SWAP2 KECCAK256 SLOAD SWAP1 SWAP2 AND PUSH2 0x1861 JUMPI PUSH1 0x0 SLOAD DUP2 LT ISZERO PUSH2 0x1861 JUMPI DUP3 MLOAD PUSH1 0x0 DUP3 DUP2 MSTORE PUSH1 0x4 PUSH1 0x20 SWAP1 DUP2 MSTORE PUSH1 0x40 SWAP1 SWAP2 KECCAK256 DUP1 SLOAD SWAP2 DUP7 ADD MLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0x40 SHL SUB AND PUSH1 0x1 PUSH1 0xA0 SHL MUL PUSH1 0x1 PUSH1 0x1 PUSH1 0xE0 SHL SUB NOT SWAP1 SWAP3 AND PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB SWAP1 SWAP4 AND SWAP3 SWAP1 SWAP3 OR OR SWAP1 SSTORE JUMPDEST POP DUP3 DUP5 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND DUP7 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND PUSH32 0xDDF252AD1BE2C89B69C2B068FC378DAA952BA7F163C4A11628F55A4DF523B3EF PUSH1 0x40 MLOAD PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 LOG4 JUMPDEST POP POP POP POP POP JUMP JUMPDEST PUSH1 0x0 DUP3 PUSH2 0x18B8 DUP6 DUP5 PUSH2 0x1C3C JUMP JUMPDEST EQ SWAP5 SWAP4 POP POP POP POP JUMP JUMPDEST PUSH2 0x809 DUP3 DUP3 PUSH1 0x40 MLOAD DUP1 PUSH1 0x20 ADD PUSH1 0x40 MSTORE DUP1 PUSH1 0x0 DUP2 MSTORE POP PUSH2 0x1CA8 JUMP JUMPDEST PUSH1 0x40 DUP1 MLOAD PUSH1 0x60 DUP2 ADD DUP3 MSTORE PUSH1 0x0 DUP1 DUP3 MSTORE PUSH1 0x20 DUP3 ADD DUP2 SWAP1 MSTORE SWAP2 DUP2 ADD SWAP2 SWAP1 SWAP2 MSTORE DUP2 PUSH1 0x0 SLOAD DUP2 LT ISZERO PUSH2 0x19DC JUMPI PUSH1 0x0 DUP2 DUP2 MSTORE PUSH1 0x4 PUSH1 0x20 SWAP1 DUP2 MSTORE PUSH1 0x40 SWAP2 DUP3 SWAP1 KECCAK256 DUP3 MLOAD PUSH1 0x60 DUP2 ADD DUP5 MSTORE SWAP1 SLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP2 AND DUP3 MSTORE PUSH1 0x1 PUSH1 0xA0 SHL DUP2 DIV PUSH1 0x1 PUSH1 0x1 PUSH1 0x40 SHL SUB AND SWAP3 DUP3 ADD SWAP3 SWAP1 SWAP3 MSTORE PUSH1 0x1 PUSH1 0xE0 SHL SWAP1 SWAP2 DIV PUSH1 0xFF AND ISZERO ISZERO SWAP2 DUP2 ADD DUP3 SWAP1 MSTORE SWAP1 PUSH2 0x19DA JUMPI DUP1 MLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND ISZERO PUSH2 0x1971 JUMPI SWAP4 SWAP3 POP POP POP JUMP JUMPDEST POP PUSH1 0x0 NOT ADD PUSH1 0x0 DUP2 DUP2 MSTORE PUSH1 0x4 PUSH1 0x20 SWAP1 DUP2 MSTORE PUSH1 0x40 SWAP2 DUP3 SWAP1 KECCAK256 DUP3 MLOAD PUSH1 0x60 DUP2 ADD DUP5 MSTORE SWAP1 SLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP2 AND DUP1 DUP4 MSTORE PUSH1 0x1 PUSH1 0xA0 SHL DUP3 DIV PUSH1 0x1 PUSH1 0x1 PUSH1 0x40 SHL SUB AND SWAP4 DUP4 ADD SWAP4 SWAP1 SWAP4 MSTORE PUSH1 0x1 PUSH1 0xE0 SHL SWAP1 DIV PUSH1 0xFF AND ISZERO ISZERO SWAP3 DUP2 ADD SWAP3 SWAP1 SWAP3 MSTORE ISZERO PUSH2 0x19D5 JUMPI SWAP4 SWAP3 POP POP POP JUMP JUMPDEST PUSH2 0x1971 JUMP JUMPDEST POP JUMPDEST PUSH1 0x40 MLOAD PUSH4 0x6F96CDA1 PUSH1 0xE1 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST PUSH1 0x8 DUP1 SLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP4 DUP2 AND PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB NOT DUP4 AND DUP2 OR SWAP1 SWAP4 SSTORE PUSH1 0x40 MLOAD SWAP2 AND SWAP2 SWAP1 DUP3 SWAP1 PUSH32 0x8BE0079C531659141344CD1FD0A4F28419497F9722A3DAAFE3B4186F6B6457E0 SWAP1 PUSH1 0x0 SWAP1 LOG3 POP POP JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH4 0xA85BD01 PUSH1 0xE1 SHL DUP2 MSTORE PUSH1 0x0 SWAP1 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP6 AND SWAP1 PUSH4 0x150B7A02 SWAP1 PUSH2 0x1A7C SWAP1 CALLER SWAP1 DUP10 SWAP1 DUP9 SWAP1 DUP9 SWAP1 PUSH1 0x4 ADD PUSH2 0x2554 JUMP JUMPDEST PUSH1 0x20 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 PUSH1 0x0 DUP8 DUP1 EXTCODESIZE ISZERO DUP1 ISZERO PUSH2 0x1A96 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP GAS CALL SWAP3 POP POP POP DUP1 ISZERO PUSH2 0x1AC6 JUMPI POP PUSH1 0x40 DUP1 MLOAD PUSH1 0x1F RETURNDATASIZE SWAP1 DUP2 ADD PUSH1 0x1F NOT AND DUP3 ADD SWAP1 SWAP3 MSTORE PUSH2 0x1AC3 SWAP2 DUP2 ADD SWAP1 PUSH2 0x2591 JUMP JUMPDEST PUSH1 0x1 JUMPDEST PUSH2 0x1B21 JUMPI RETURNDATASIZE DUP1 DUP1 ISZERO PUSH2 0x1AF4 JUMPI PUSH1 0x40 MLOAD SWAP2 POP PUSH1 0x1F NOT PUSH1 0x3F RETURNDATASIZE ADD AND DUP3 ADD PUSH1 0x40 MSTORE RETURNDATASIZE DUP3 MSTORE RETURNDATASIZE PUSH1 0x0 PUSH1 0x20 DUP5 ADD RETURNDATACOPY PUSH2 0x1AF9 JUMP JUMPDEST PUSH1 0x60 SWAP2 POP JUMPDEST POP DUP1 MLOAD PUSH2 0x1B19 JUMPI PUSH1 0x40 MLOAD PUSH4 0x68D2BF6B PUSH1 0xE1 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST DUP1 MLOAD DUP2 PUSH1 0x20 ADD REVERT JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xE0 SHL SUB NOT AND PUSH4 0xA85BD01 PUSH1 0xE1 SHL EQ SWAP1 POP JUMPDEST SWAP5 SWAP4 POP POP POP POP JUMP JUMPDEST PUSH1 0x60 DUP2 PUSH2 0x1B63 JUMPI POP POP PUSH1 0x40 DUP1 MLOAD DUP1 DUP3 ADD SWAP1 SWAP2 MSTORE PUSH1 0x1 DUP2 MSTORE PUSH1 0x3 PUSH1 0xFC SHL PUSH1 0x20 DUP3 ADD MSTORE SWAP1 JUMP JUMPDEST DUP2 PUSH1 0x0 JUMPDEST DUP2 ISZERO PUSH2 0x1B8D JUMPI DUP1 PUSH2 0x1B77 DUP2 PUSH2 0x2462 JUMP JUMPDEST SWAP2 POP PUSH2 0x1B86 SWAP1 POP PUSH1 0xA DUP4 PUSH2 0x244E JUMP JUMPDEST SWAP2 POP PUSH2 0x1B67 JUMP JUMPDEST PUSH1 0x0 DUP2 PUSH1 0x1 PUSH1 0x1 PUSH1 0x40 SHL SUB DUP2 GT ISZERO PUSH2 0x1BA7 JUMPI PUSH2 0x1BA7 PUSH2 0x1F83 JUMP JUMPDEST PUSH1 0x40 MLOAD SWAP1 DUP1 DUP3 MSTORE DUP1 PUSH1 0x1F ADD PUSH1 0x1F NOT AND PUSH1 0x20 ADD DUP3 ADD PUSH1 0x40 MSTORE DUP1 ISZERO PUSH2 0x1BD1 JUMPI PUSH1 0x20 DUP3 ADD DUP2 DUP1 CALLDATASIZE DUP4 CALLDATACOPY ADD SWAP1 POP JUMPDEST POP SWAP1 POP JUMPDEST DUP5 ISZERO PUSH2 0x1B37 JUMPI PUSH2 0x1BE6 PUSH1 0x1 DUP4 PUSH2 0x25AE JUMP JUMPDEST SWAP2 POP PUSH2 0x1BF3 PUSH1 0xA DUP7 PUSH2 0x25C5 JUMP JUMPDEST PUSH2 0x1BFE SWAP1 PUSH1 0x30 PUSH2 0x2401 JUMP JUMPDEST PUSH1 0xF8 SHL DUP2 DUP4 DUP2 MLOAD DUP2 LT PUSH2 0x1C13 JUMPI PUSH2 0x1C13 PUSH2 0x25D9 JUMP JUMPDEST PUSH1 0x20 ADD ADD SWAP1 PUSH1 0x1 PUSH1 0x1 PUSH1 0xF8 SHL SUB NOT AND SWAP1 DUP2 PUSH1 0x0 BYTE SWAP1 MSTORE8 POP PUSH2 0x1C35 PUSH1 0xA DUP7 PUSH2 0x244E JUMP JUMPDEST SWAP5 POP PUSH2 0x1BD5 JUMP JUMPDEST PUSH1 0x0 DUP2 DUP2 JUMPDEST DUP5 MLOAD DUP2 LT ISZERO PUSH2 0xF2F JUMPI PUSH1 0x0 DUP6 DUP3 DUP2 MLOAD DUP2 LT PUSH2 0x1C5E JUMPI PUSH2 0x1C5E PUSH2 0x25D9 JUMP JUMPDEST PUSH1 0x20 MUL PUSH1 0x20 ADD ADD MLOAD SWAP1 POP DUP1 DUP4 GT PUSH2 0x1C84 JUMPI PUSH1 0x0 DUP4 DUP2 MSTORE PUSH1 0x20 DUP3 SWAP1 MSTORE PUSH1 0x40 SWAP1 KECCAK256 SWAP3 POP PUSH2 0x1C95 JUMP JUMPDEST PUSH1 0x0 DUP2 DUP2 MSTORE PUSH1 0x20 DUP5 SWAP1 MSTORE PUSH1 0x40 SWAP1 KECCAK256 SWAP3 POP JUMPDEST POP DUP1 PUSH2 0x1CA0 DUP2 PUSH2 0x2462 JUMP JUMPDEST SWAP2 POP POP PUSH2 0x1C41 JUMP JUMPDEST PUSH2 0x96C DUP4 DUP4 DUP4 PUSH1 0x1 PUSH1 0x0 SLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP6 AND PUSH2 0x1CD9 JUMPI PUSH1 0x40 MLOAD PUSH3 0x2E0763 PUSH1 0xE8 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST DUP4 PUSH2 0x1CF7 JUMPI PUSH1 0x40 MLOAD PUSH4 0xB562E8DD PUSH1 0xE0 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP6 AND PUSH1 0x0 DUP2 DUP2 MSTORE PUSH1 0x5 PUSH1 0x20 SWAP1 DUP2 MSTORE PUSH1 0x40 DUP1 DUP4 KECCAK256 DUP1 SLOAD PUSH16 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF NOT DUP2 AND PUSH1 0x1 PUSH1 0x1 PUSH1 0x40 SHL SUB DUP1 DUP4 AND DUP13 ADD DUP2 AND SWAP2 DUP3 OR PUSH9 0x10000000000000000 PUSH8 0xFFFFFFFFFFFFFFFF NOT SWAP1 SWAP5 AND SWAP1 SWAP3 OR DUP4 SWAP1 DIV DUP2 AND DUP13 ADD DUP2 AND SWAP1 SWAP3 MUL OR SWAP1 SWAP2 SSTORE DUP6 DUP5 MSTORE PUSH1 0x4 SWAP1 SWAP3 MSTORE SWAP1 SWAP2 KECCAK256 DUP1 SLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xE0 SHL SUB NOT AND SWAP1 SWAP3 OR PUSH1 0x1 PUSH1 0xA0 SHL TIMESTAMP SWAP1 SWAP3 AND SWAP2 SWAP1 SWAP2 MUL OR SWAP1 SSTORE DUP1 DUP1 DUP6 ADD DUP4 DUP1 ISZERO PUSH2 0x1DA8 JUMPI POP PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP8 AND EXTCODESIZE ISZERO ISZERO JUMPDEST ISZERO PUSH2 0x1E31 JUMPI JUMPDEST PUSH1 0x40 MLOAD DUP3 SWAP1 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP10 AND SWAP1 PUSH1 0x0 SWAP1 PUSH32 0xDDF252AD1BE2C89B69C2B068FC378DAA952BA7F163C4A11628F55A4DF523B3EF SWAP1 DUP3 SWAP1 LOG4 PUSH2 0x1DF9 PUSH1 0x0 DUP9 DUP5 DUP1 PUSH1 0x1 ADD SWAP6 POP DUP9 PUSH2 0x1A47 JUMP JUMPDEST PUSH2 0x1E16 JUMPI PUSH1 0x40 MLOAD PUSH4 0x68D2BF6B PUSH1 0xE1 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST DUP1 DUP3 EQ ISZERO PUSH2 0x1DAE JUMPI DUP3 PUSH1 0x0 SLOAD EQ PUSH2 0x1E2C JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH2 0x1E77 JUMP JUMPDEST JUMPDEST PUSH1 0x40 MLOAD PUSH1 0x1 DUP4 ADD SWAP3 SWAP1 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP10 AND SWAP1 PUSH1 0x0 SWAP1 PUSH32 0xDDF252AD1BE2C89B69C2B068FC378DAA952BA7F163C4A11628F55A4DF523B3EF SWAP1 DUP3 SWAP1 LOG4 DUP1 DUP3 EQ ISZERO PUSH2 0x1E32 JUMPI JUMPDEST POP PUSH1 0x0 SSTORE PUSH2 0x18A4 JUMP JUMPDEST DUP3 DUP1 SLOAD PUSH2 0x1E8C SWAP1 PUSH2 0x2360 JUMP JUMPDEST SWAP1 PUSH1 0x0 MSTORE PUSH1 0x20 PUSH1 0x0 KECCAK256 SWAP1 PUSH1 0x1F ADD PUSH1 0x20 SWAP1 DIV DUP2 ADD SWAP3 DUP3 PUSH2 0x1EAE JUMPI PUSH1 0x0 DUP6 SSTORE PUSH2 0x1EF4 JUMP JUMPDEST DUP3 PUSH1 0x1F LT PUSH2 0x1EC7 JUMPI DUP1 MLOAD PUSH1 0xFF NOT AND DUP4 DUP1 ADD OR DUP6 SSTORE PUSH2 0x1EF4 JUMP JUMPDEST DUP3 DUP1 ADD PUSH1 0x1 ADD DUP6 SSTORE DUP3 ISZERO PUSH2 0x1EF4 JUMPI SWAP2 DUP3 ADD JUMPDEST DUP3 DUP2 GT ISZERO PUSH2 0x1EF4 JUMPI DUP3 MLOAD DUP3 SSTORE SWAP2 PUSH1 0x20 ADD SWAP2 SWAP1 PUSH1 0x1 ADD SWAP1 PUSH2 0x1ED9 JUMP JUMPDEST POP PUSH2 0x1F00 SWAP3 SWAP2 POP PUSH2 0x1F04 JUMP JUMPDEST POP SWAP1 JUMP JUMPDEST JUMPDEST DUP1 DUP3 GT ISZERO PUSH2 0x1F00 JUMPI PUSH1 0x0 DUP2 SSTORE PUSH1 0x1 ADD PUSH2 0x1F05 JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xE0 SHL SUB NOT DUP2 AND DUP2 EQ PUSH2 0x1191 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 DUP5 SUB SLT ISZERO PUSH2 0x1F41 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP2 CALLDATALOAD PUSH2 0x152A DUP2 PUSH2 0x1F19 JUMP JUMPDEST DUP1 CALLDATALOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP2 AND DUP2 EQ PUSH2 0x1F63 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 DUP5 SUB SLT ISZERO PUSH2 0x1F7A JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH2 0x152A DUP3 PUSH2 0x1F4C JUMP JUMPDEST PUSH4 0x4E487B71 PUSH1 0xE0 SHL PUSH1 0x0 MSTORE PUSH1 0x41 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH1 0x0 REVERT JUMPDEST PUSH1 0x40 MLOAD PUSH1 0x1F DUP3 ADD PUSH1 0x1F NOT AND DUP2 ADD PUSH1 0x1 PUSH1 0x1 PUSH1 0x40 SHL SUB DUP2 GT DUP3 DUP3 LT OR ISZERO PUSH2 0x1FC1 JUMPI PUSH2 0x1FC1 PUSH2 0x1F83 JUMP JUMPDEST PUSH1 0x40 MSTORE SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x1 PUSH1 0x1 PUSH1 0x40 SHL SUB DUP4 GT ISZERO PUSH2 0x1FE2 JUMPI PUSH2 0x1FE2 PUSH2 0x1F83 JUMP JUMPDEST PUSH2 0x1FF5 PUSH1 0x1F DUP5 ADD PUSH1 0x1F NOT AND PUSH1 0x20 ADD PUSH2 0x1F99 JUMP JUMPDEST SWAP1 POP DUP3 DUP2 MSTORE DUP4 DUP4 DUP4 ADD GT ISZERO PUSH2 0x2009 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP3 DUP3 PUSH1 0x20 DUP4 ADD CALLDATACOPY PUSH1 0x0 PUSH1 0x20 DUP5 DUP4 ADD ADD MSTORE SWAP4 SWAP3 POP POP POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 DUP5 SUB SLT ISZERO PUSH2 0x2032 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP2 CALLDATALOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0x40 SHL SUB DUP2 GT ISZERO PUSH2 0x2048 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP3 ADD PUSH1 0x1F DUP2 ADD DUP5 SGT PUSH2 0x2059 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH2 0x1B37 DUP5 DUP3 CALLDATALOAD PUSH1 0x20 DUP5 ADD PUSH2 0x1FC9 JUMP JUMPDEST PUSH1 0x0 JUMPDEST DUP4 DUP2 LT ISZERO PUSH2 0x2083 JUMPI DUP2 DUP2 ADD MLOAD DUP4 DUP3 ADD MSTORE PUSH1 0x20 ADD PUSH2 0x206B JUMP JUMPDEST DUP4 DUP2 GT ISZERO PUSH2 0x12B2 JUMPI POP POP PUSH1 0x0 SWAP2 ADD MSTORE JUMP JUMPDEST PUSH1 0x0 DUP2 MLOAD DUP1 DUP5 MSTORE PUSH2 0x20AC DUP2 PUSH1 0x20 DUP7 ADD PUSH1 0x20 DUP7 ADD PUSH2 0x2068 JUMP JUMPDEST PUSH1 0x1F ADD PUSH1 0x1F NOT AND SWAP3 SWAP1 SWAP3 ADD PUSH1 0x20 ADD SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x20 DUP2 MSTORE PUSH1 0x0 PUSH2 0x152A PUSH1 0x20 DUP4 ADD DUP5 PUSH2 0x2094 JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 DUP5 SUB SLT ISZERO PUSH2 0x20E5 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP CALLDATALOAD SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x40 DUP4 DUP6 SUB SLT ISZERO PUSH2 0x20FF JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH2 0x2108 DUP4 PUSH2 0x1F4C JUMP JUMPDEST SWAP5 PUSH1 0x20 SWAP4 SWAP1 SWAP4 ADD CALLDATALOAD SWAP4 POP POP POP JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x0 PUSH1 0x60 DUP5 DUP7 SUB SLT ISZERO PUSH2 0x212B JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH2 0x2134 DUP5 PUSH2 0x1F4C JUMP JUMPDEST SWAP3 POP PUSH2 0x2142 PUSH1 0x20 DUP6 ADD PUSH2 0x1F4C JUMP JUMPDEST SWAP2 POP PUSH1 0x40 DUP5 ADD CALLDATALOAD SWAP1 POP SWAP3 POP SWAP3 POP SWAP3 JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x40 DUP4 DUP6 SUB SLT ISZERO PUSH2 0x2165 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP3 CALLDATALOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0x40 SHL SUB DUP1 DUP3 GT ISZERO PUSH2 0x217C JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP2 DUP6 ADD SWAP2 POP DUP6 PUSH1 0x1F DUP4 ADD SLT PUSH2 0x2190 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP2 CALLDATALOAD PUSH1 0x20 DUP3 DUP3 GT ISZERO PUSH2 0x21A4 JUMPI PUSH2 0x21A4 PUSH2 0x1F83 JUMP JUMPDEST DUP2 PUSH1 0x5 SHL SWAP3 POP PUSH2 0x21B5 DUP2 DUP5 ADD PUSH2 0x1F99 JUMP JUMPDEST DUP3 DUP2 MSTORE SWAP3 DUP5 ADD DUP2 ADD SWAP3 DUP2 DUP2 ADD SWAP1 DUP10 DUP6 GT ISZERO PUSH2 0x21CF JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST SWAP5 DUP3 ADD SWAP5 JUMPDEST DUP5 DUP7 LT ISZERO PUSH2 0x21ED JUMPI DUP6 CALLDATALOAD DUP3 MSTORE SWAP5 DUP3 ADD SWAP5 SWAP1 DUP3 ADD SWAP1 PUSH2 0x21D4 JUMP JUMPDEST SWAP10 SWAP8 SWAP1 SWAP2 ADD CALLDATALOAD SWAP8 POP POP POP POP POP POP POP JUMP JUMPDEST PUSH1 0x20 DUP1 DUP3 MSTORE DUP3 MLOAD DUP3 DUP3 ADD DUP2 SWAP1 MSTORE PUSH1 0x0 SWAP2 SWAP1 DUP5 DUP3 ADD SWAP1 PUSH1 0x40 DUP6 ADD SWAP1 DUP5 JUMPDEST DUP2 DUP2 LT ISZERO PUSH2 0x2235 JUMPI DUP4 MLOAD DUP4 MSTORE SWAP3 DUP5 ADD SWAP3 SWAP2 DUP5 ADD SWAP2 PUSH1 0x1 ADD PUSH2 0x2219 JUMP JUMPDEST POP SWAP1 SWAP7 SWAP6 POP POP POP POP POP POP JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x40 DUP4 DUP6 SUB SLT ISZERO PUSH2 0x2254 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH2 0x225D DUP4 PUSH2 0x1F4C JUMP JUMPDEST SWAP2 POP PUSH1 0x20 DUP4 ADD CALLDATALOAD DUP1 ISZERO ISZERO DUP2 EQ PUSH2 0x2272 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP1 SWAP2 POP POP SWAP3 POP SWAP3 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x0 DUP1 PUSH1 0x80 DUP6 DUP8 SUB SLT ISZERO PUSH2 0x2293 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH2 0x229C DUP6 PUSH2 0x1F4C JUMP JUMPDEST SWAP4 POP PUSH2 0x22AA PUSH1 0x20 DUP7 ADD PUSH2 0x1F4C JUMP JUMPDEST SWAP3 POP PUSH1 0x40 DUP6 ADD CALLDATALOAD SWAP2 POP PUSH1 0x60 DUP6 ADD CALLDATALOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0x40 SHL SUB DUP2 GT ISZERO PUSH2 0x22CC JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP6 ADD PUSH1 0x1F DUP2 ADD DUP8 SGT PUSH2 0x22DD JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH2 0x22EC DUP8 DUP3 CALLDATALOAD PUSH1 0x20 DUP5 ADD PUSH2 0x1FC9 JUMP JUMPDEST SWAP2 POP POP SWAP3 SWAP6 SWAP2 SWAP5 POP SWAP3 POP JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x40 DUP4 DUP6 SUB SLT ISZERO PUSH2 0x230B JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH2 0x2314 DUP4 PUSH2 0x1F4C JUMP JUMPDEST SWAP2 POP PUSH2 0x2322 PUSH1 0x20 DUP5 ADD PUSH2 0x1F4C JUMP JUMPDEST SWAP1 POP SWAP3 POP SWAP3 SWAP1 POP JUMP JUMPDEST PUSH1 0x20 DUP1 DUP3 MSTORE DUP2 DUP2 ADD MSTORE PUSH32 0x4F776E61626C653A2063616C6C6572206973206E6F7420746865206F776E6572 PUSH1 0x40 DUP3 ADD MSTORE PUSH1 0x60 ADD SWAP1 JUMP JUMPDEST PUSH1 0x1 DUP2 DUP2 SHR SWAP1 DUP3 AND DUP1 PUSH2 0x2374 JUMPI PUSH1 0x7F DUP3 AND SWAP2 POP JUMPDEST PUSH1 0x20 DUP3 LT DUP2 EQ ISZERO PUSH2 0x2395 JUMPI PUSH4 0x4E487B71 PUSH1 0xE0 SHL PUSH1 0x0 MSTORE PUSH1 0x22 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH1 0x0 REVERT JUMPDEST POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x20 DUP1 DUP3 MSTORE PUSH1 0x30 SWAP1 DUP3 ADD MSTORE PUSH32 0x43727970746F42756C6C446F6773203A3A2043616E6E6F742062652063616C6C PUSH1 0x40 DUP3 ADD MSTORE PUSH16 0x195908189E48184818DBDB9D1C9858DD PUSH1 0x82 SHL PUSH1 0x60 DUP3 ADD MSTORE PUSH1 0x80 ADD SWAP1 JUMP JUMPDEST PUSH4 0x4E487B71 PUSH1 0xE0 SHL PUSH1 0x0 MSTORE PUSH1 0x11 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH1 0x0 REVERT JUMPDEST PUSH1 0x0 DUP3 NOT DUP3 GT ISZERO PUSH2 0x2414 JUMPI PUSH2 0x2414 PUSH2 0x23EB JUMP JUMPDEST POP ADD SWAP1 JUMP JUMPDEST PUSH1 0x0 DUP2 PUSH1 0x0 NOT DIV DUP4 GT DUP3 ISZERO ISZERO AND ISZERO PUSH2 0x2433 JUMPI PUSH2 0x2433 PUSH2 0x23EB JUMP JUMPDEST POP MUL SWAP1 JUMP JUMPDEST PUSH4 0x4E487B71 PUSH1 0xE0 SHL PUSH1 0x0 MSTORE PUSH1 0x12 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH1 0x0 REVERT JUMPDEST PUSH1 0x0 DUP3 PUSH2 0x245D JUMPI PUSH2 0x245D PUSH2 0x2438 JUMP JUMPDEST POP DIV SWAP1 JUMP JUMPDEST PUSH1 0x0 PUSH1 0x0 NOT DUP3 EQ ISZERO PUSH2 0x2476 JUMPI PUSH2 0x2476 PUSH2 0x23EB JUMP JUMPDEST POP PUSH1 0x1 ADD SWAP1 JUMP JUMPDEST PUSH1 0x0 DUP2 MLOAD PUSH2 0x248F DUP2 DUP6 PUSH1 0x20 DUP7 ADD PUSH2 0x2068 JUMP JUMPDEST SWAP3 SWAP1 SWAP3 ADD SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 DUP1 DUP5 SLOAD DUP2 PUSH1 0x1 DUP3 DUP2 SHR SWAP2 POP DUP1 DUP4 AND DUP1 PUSH2 0x24B5 JUMPI PUSH1 0x7F DUP4 AND SWAP3 POP JUMPDEST PUSH1 0x20 DUP1 DUP5 LT DUP3 EQ ISZERO PUSH2 0x24D5 JUMPI PUSH4 0x4E487B71 PUSH1 0xE0 SHL DUP7 MSTORE PUSH1 0x22 PUSH1 0x4 MSTORE PUSH1 0x24 DUP7 REVERT JUMPDEST DUP2 DUP1 ISZERO PUSH2 0x24E9 JUMPI PUSH1 0x1 DUP2 EQ PUSH2 0x24FA JUMPI PUSH2 0x2527 JUMP JUMPDEST PUSH1 0xFF NOT DUP7 AND DUP10 MSTORE DUP5 DUP10 ADD SWAP7 POP PUSH2 0x2527 JUMP JUMPDEST PUSH1 0x0 DUP12 DUP2 MSTORE PUSH1 0x20 SWAP1 KECCAK256 PUSH1 0x0 JUMPDEST DUP7 DUP2 LT ISZERO PUSH2 0x251F JUMPI DUP2 SLOAD DUP12 DUP3 ADD MSTORE SWAP1 DUP6 ADD SWAP1 DUP4 ADD PUSH2 0x2506 JUMP JUMPDEST POP POP DUP5 DUP10 ADD SWAP7 POP JUMPDEST POP POP POP POP POP POP PUSH2 0x254B PUSH2 0x253A DUP3 DUP7 PUSH2 0x247D JUMP JUMPDEST PUSH5 0x173539B7B7 PUSH1 0xD9 SHL DUP2 MSTORE PUSH1 0x5 ADD SWAP1 JUMP JUMPDEST SWAP6 SWAP5 POP POP POP POP POP JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP6 DUP2 AND DUP3 MSTORE DUP5 AND PUSH1 0x20 DUP3 ADD MSTORE PUSH1 0x40 DUP2 ADD DUP4 SWAP1 MSTORE PUSH1 0x80 PUSH1 0x60 DUP3 ADD DUP2 SWAP1 MSTORE PUSH1 0x0 SWAP1 PUSH2 0x2587 SWAP1 DUP4 ADD DUP5 PUSH2 0x2094 JUMP JUMPDEST SWAP7 SWAP6 POP POP POP POP POP POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 DUP5 SUB SLT ISZERO PUSH2 0x25A3 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP2 MLOAD PUSH2 0x152A DUP2 PUSH2 0x1F19 JUMP JUMPDEST PUSH1 0x0 DUP3 DUP3 LT ISZERO PUSH2 0x25C0 JUMPI PUSH2 0x25C0 PUSH2 0x23EB JUMP JUMPDEST POP SUB SWAP1 JUMP JUMPDEST PUSH1 0x0 DUP3 PUSH2 0x25D4 JUMPI PUSH2 0x25D4 PUSH2 0x2438 JUMP JUMPDEST POP MOD SWAP1 JUMP JUMPDEST PUSH4 0x4E487B71 PUSH1 0xE0 SHL PUSH1 0x0 MSTORE PUSH1 0x32 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH1 0x0 REVERT INVALID LOG2 PUSH5 0x6970667358 0x22 SLT KECCAK256 0xCC 0xC0 0xD6 PUSH26 0x3696C9C6598F4D7991D88FC211F107D0883F5AC5CE95E85145 CREATE2 0xB1 PUSH5 0x736F6C6343 STOP ADDMOD MULMOD STOP CALLER ",
							"sourceMap": "220:4887:11:-:0;;;1058:63;;;;;;;;;-1:-1:-1;3600:154:12;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;-1:-1:-1;;;3600:154:12;;;;3666:13;;3600:154;;;3666:13;;:5;;:13;:::i;:::-;-1:-1:-1;3689:17:12;;;;:7;;:17;;;;;:::i;:::-;-1:-1:-1;;3902:7:12;3716:31;;-1:-1:-1;921:32:0;719:10:6;921:18:0;:32::i;:::-;220:4887:11;;2270:187:0;2362:6;;;-1:-1:-1;;;;;2378:17:0;;;-1:-1:-1;;;;;;2378:17:0;;;;;;;2410:40;;2362:6;;;2378:17;2362:6;;2410:40;;2343:16;;2410:40;2333:124;2270:187;:::o;220:4887:11:-;;;;;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;-1:-1:-1;220:4887:11;;;-1:-1:-1;220:4887:11;:::i;:::-;;;:::o;:::-;;;;;;;;;;;;;;;14:380:13;93:1;89:12;;;;136;;;157:61;;211:4;203:6;199:17;189:27;;157:61;264:2;256:6;253:14;233:18;230:38;227:161;;;310:10;305:3;301:20;298:1;291:31;345:4;342:1;335:15;373:4;370:1;363:15;227:161;;14:380;;;:::o;:::-;220:4887:11;;;;;;"
						},
						"deployedBytecode": {
							"functionDebugData": {
								"@MAX_PUBLIC_MINT_963": {
									"entryPoint": null,
									"id": 963,
									"parameterSlots": 0,
									"returnSlots": 0
								},
								"@MAX_SUPPLY_960": {
									"entryPoint": null,
									"id": 960,
									"parameterSlots": 0,
									"returnSlots": 0
								},
								"@MAX_WHITELIST_MINT_966": {
									"entryPoint": null,
									"id": 966,
									"parameterSlots": 0,
									"returnSlots": 0
								},
								"@PUBLIC_SALE_PRICE_969": {
									"entryPoint": null,
									"id": 969,
									"parameterSlots": 0,
									"returnSlots": 0
								},
								"@WHITELIST_SALE_PRICE_972": {
									"entryPoint": null,
									"id": 972,
									"parameterSlots": 0,
									"returnSlots": 0
								},
								"@_afterTokenTransfers_2728": {
									"entryPoint": null,
									"id": 2728,
									"parameterSlots": 4,
									"returnSlots": 0
								},
								"@_approve_2647": {
									"entryPoint": 5691,
									"id": 2647,
									"parameterSlots": 3,
									"returnSlots": 0
								},
								"@_beforeTokenTransfers_2715": {
									"entryPoint": null,
									"id": 2715,
									"parameterSlots": 4,
									"returnSlots": 0
								},
								"@_checkContractOnERC721Received_2702": {
									"entryPoint": 6727,
									"id": 2702,
									"parameterSlots": 4,
									"returnSlots": 1
								},
								"@_efficientHash_908": {
									"entryPoint": null,
									"id": 908,
									"parameterSlots": 2,
									"returnSlots": 1
								},
								"@_exists_2118": {
									"entryPoint": 5648,
									"id": 2118,
									"parameterSlots": 1,
									"returnSlots": 1
								},
								"@_mint_2317": {
									"entryPoint": null,
									"id": 2317,
									"parameterSlots": 4,
									"returnSlots": 0
								},
								"@_msgSender_603": {
									"entryPoint": null,
									"id": 603,
									"parameterSlots": 0,
									"returnSlots": 1
								},
								"@_safeMint_2132": {
									"entryPoint": 6337,
									"id": 2132,
									"parameterSlots": 2,
									"returnSlots": 0
								},
								"@_safeMint_2150": {
									"entryPoint": 7336,
									"id": 2150,
									"parameterSlots": 3,
									"returnSlots": 0
								},
								"@_startTokenId_1549": {
									"entryPoint": null,
									"id": 1549,
									"parameterSlots": 0,
									"returnSlots": 1
								},
								"@_transferOwnership_103": {
									"entryPoint": 6645,
									"id": 103,
									"parameterSlots": 1,
									"returnSlots": 0
								},
								"@_transfer_2483": {
									"entryPoint": 5783,
									"id": 2483,
									"parameterSlots": 3,
									"returnSlots": 0
								},
								"@approve_1947": {
									"entryPoint": 2275,
									"id": 1947,
									"parameterSlots": 2,
									"returnSlots": 0
								},
								"@balanceOf_1636": {
									"entryPoint": 3593,
									"id": 1636,
									"parameterSlots": 1,
									"returnSlots": 1
								},
								"@getApproved_1969": {
									"entryPoint": 2207,
									"id": 1969,
									"parameterSlots": 1,
									"returnSlots": 1
								},
								"@getMerkleRoot_1330": {
									"entryPoint": null,
									"id": 1330,
									"parameterSlots": 0,
									"returnSlots": 1
								},
								"@isApprovedForAll_2021": {
									"entryPoint": null,
									"id": 2021,
									"parameterSlots": 2,
									"returnSlots": 1
								},
								"@isContract_314": {
									"entryPoint": null,
									"id": 314,
									"parameterSlots": 1,
									"returnSlots": 1
								},
								"@isRevealed_978": {
									"entryPoint": null,
									"id": 978,
									"parameterSlots": 0,
									"returnSlots": 0
								},
								"@mint_1078": {
									"entryPoint": 3983,
									"id": 1078,
									"parameterSlots": 1,
									"returnSlots": 0
								},
								"@name_1839": {
									"entryPoint": 2061,
									"id": 1839,
									"parameterSlots": 0,
									"returnSlots": 1
								},
								"@ownerOf_1829": {
									"entryPoint": 3575,
									"id": 1829,
									"parameterSlots": 1,
									"returnSlots": 1
								},
								"@owner_32": {
									"entryPoint": null,
									"id": 32,
									"parameterSlots": 0,
									"returnSlots": 1
								},
								"@ownershipOf_1814": {
									"entryPoint": 6363,
									"id": 1814,
									"parameterSlots": 1,
									"returnSlots": 1
								},
								"@pause_984": {
									"entryPoint": null,
									"id": 984,
									"parameterSlots": 0,
									"returnSlots": 0
								},
								"@placeholderTokenUri_976": {
									"entryPoint": 3371,
									"id": 976,
									"parameterSlots": 0,
									"returnSlots": 0
								},
								"@processProof_897": {
									"entryPoint": 7228,
									"id": 897,
									"parameterSlots": 2,
									"returnSlots": 1
								},
								"@publicSale_980": {
									"entryPoint": null,
									"id": 980,
									"parameterSlots": 0,
									"returnSlots": 0
								},
								"@renounceOwnership_60": {
									"entryPoint": 3671,
									"id": 60,
									"parameterSlots": 0,
									"returnSlots": 0
								},
								"@safeTransferFrom_2058": {
									"entryPoint": 3344,
									"id": 2058,
									"parameterSlots": 3,
									"returnSlots": 0
								},
								"@safeTransferFrom_2094": {
									"entryPoint": 4711,
									"id": 2094,
									"parameterSlots": 4,
									"returnSlots": 0
								},
								"@setApprovalForAll_2003": {
									"entryPoint": 4500,
									"id": 2003,
									"parameterSlots": 2,
									"returnSlots": 0
								},
								"@setMerkleRoot_1322": {
									"entryPoint": 3725,
									"id": 1322,
									"parameterSlots": 1,
									"returnSlots": 0
								},
								"@setPlaceHolderUri_1310": {
									"entryPoint": 4650,
									"id": 1310,
									"parameterSlots": 1,
									"returnSlots": 0
								},
								"@setTokenUri_1298": {
									"entryPoint": 1987,
									"id": 1298,
									"parameterSlots": 1,
									"returnSlots": 0
								},
								"@supportsInterface_1608": {
									"entryPoint": 1905,
									"id": 1608,
									"parameterSlots": 1,
									"returnSlots": 1
								},
								"@supportsInterface_932": {
									"entryPoint": null,
									"id": 932,
									"parameterSlots": 1,
									"returnSlots": 1
								},
								"@symbol_1849": {
									"entryPoint": 3968,
									"id": 1849,
									"parameterSlots": 0,
									"returnSlots": 1
								},
								"@teamMint_1184": {
									"entryPoint": 4792,
									"id": 1184,
									"parameterSlots": 0,
									"returnSlots": 0
								},
								"@teamMinted_986": {
									"entryPoint": null,
									"id": 986,
									"parameterSlots": 0,
									"returnSlots": 0
								},
								"@toString_698": {
									"entryPoint": 6975,
									"id": 698,
									"parameterSlots": 1,
									"returnSlots": 1
								},
								"@togglePause_1341": {
									"entryPoint": 4972,
									"id": 1341,
									"parameterSlots": 0,
									"returnSlots": 0
								},
								"@togglePublicSale_1363": {
									"entryPoint": 5425,
									"id": 1363,
									"parameterSlots": 0,
									"returnSlots": 0
								},
								"@toggleReveal_1374": {
									"entryPoint": 3513,
									"id": 1374,
									"parameterSlots": 0,
									"returnSlots": 0
								},
								"@toggleWhiteListSale_1352": {
									"entryPoint": 3895,
									"id": 1352,
									"parameterSlots": 0,
									"returnSlots": 0
								},
								"@tokenURI_1242": {
									"entryPoint": 5047,
									"id": 1242,
									"parameterSlots": 1,
									"returnSlots": 1
								},
								"@totalPublicMint_992": {
									"entryPoint": null,
									"id": 992,
									"parameterSlots": 0,
									"returnSlots": 0
								},
								"@totalSupply_1564": {
									"entryPoint": null,
									"id": 1564,
									"parameterSlots": 0,
									"returnSlots": 1
								},
								"@totalWhitelistMint_996": {
									"entryPoint": null,
									"id": 996,
									"parameterSlots": 0,
									"returnSlots": 0
								},
								"@transferFrom_2039": {
									"entryPoint": 2417,
									"id": 2039,
									"parameterSlots": 3,
									"returnSlots": 0
								},
								"@transferOwnership_83": {
									"entryPoint": 5496,
									"id": 83,
									"parameterSlots": 1,
									"returnSlots": 0
								},
								"@verify_840": {
									"entryPoint": 6315,
									"id": 840,
									"parameterSlots": 3,
									"returnSlots": 1
								},
								"@walletOf_1286": {
									"entryPoint": 3772,
									"id": 1286,
									"parameterSlots": 0,
									"returnSlots": 1
								},
								"@whiteListSale_982": {
									"entryPoint": null,
									"id": 982,
									"parameterSlots": 0,
									"returnSlots": 0
								},
								"@whitelistMint_1162": {
									"entryPoint": 2428,
									"id": 1162,
									"parameterSlots": 2,
									"returnSlots": 0
								},
								"@withdraw_1413": {
									"entryPoint": 3164,
									"id": 1413,
									"parameterSlots": 0,
									"returnSlots": 0
								},
								"abi_decode_address": {
									"entryPoint": 8012,
									"id": null,
									"parameterSlots": 1,
									"returnSlots": 1
								},
								"abi_decode_available_length_string": {
									"entryPoint": 8137,
									"id": null,
									"parameterSlots": 3,
									"returnSlots": 1
								},
								"abi_decode_tuple_t_address": {
									"entryPoint": 8040,
									"id": null,
									"parameterSlots": 2,
									"returnSlots": 1
								},
								"abi_decode_tuple_t_addresst_address": {
									"entryPoint": 8952,
									"id": null,
									"parameterSlots": 2,
									"returnSlots": 2
								},
								"abi_decode_tuple_t_addresst_addresst_uint256": {
									"entryPoint": 8470,
									"id": null,
									"parameterSlots": 2,
									"returnSlots": 3
								},
								"abi_decode_tuple_t_addresst_addresst_uint256t_bytes_memory_ptr": {
									"entryPoint": 8829,
									"id": null,
									"parameterSlots": 2,
									"returnSlots": 4
								},
								"abi_decode_tuple_t_addresst_bool": {
									"entryPoint": 8769,
									"id": null,
									"parameterSlots": 2,
									"returnSlots": 2
								},
								"abi_decode_tuple_t_addresst_uint256": {
									"entryPoint": 8428,
									"id": null,
									"parameterSlots": 2,
									"returnSlots": 2
								},
								"abi_decode_tuple_t_array$_t_bytes32_$dyn_memory_ptrt_uint256": {
									"entryPoint": 8530,
									"id": null,
									"parameterSlots": 2,
									"returnSlots": 2
								},
								"abi_decode_tuple_t_bytes32": {
									"entryPoint": null,
									"id": null,
									"parameterSlots": 2,
									"returnSlots": 1
								},
								"abi_decode_tuple_t_bytes4": {
									"entryPoint": 7983,
									"id": null,
									"parameterSlots": 2,
									"returnSlots": 1
								},
								"abi_decode_tuple_t_bytes4_fromMemory": {
									"entryPoint": 9617,
									"id": null,
									"parameterSlots": 2,
									"returnSlots": 1
								},
								"abi_decode_tuple_t_string_memory_ptr": {
									"entryPoint": 8224,
									"id": null,
									"parameterSlots": 2,
									"returnSlots": 1
								},
								"abi_decode_tuple_t_uint256": {
									"entryPoint": 8403,
									"id": null,
									"parameterSlots": 2,
									"returnSlots": 1
								},
								"abi_encode_string": {
									"entryPoint": 9341,
									"id": null,
									"parameterSlots": 2,
									"returnSlots": 1
								},
								"abi_encode_string_memory_ptr": {
									"entryPoint": 8340,
									"id": null,
									"parameterSlots": 2,
									"returnSlots": 1
								},
								"abi_encode_stringliteral": {
									"entryPoint": null,
									"id": null,
									"parameterSlots": 1,
									"returnSlots": 1
								},
								"abi_encode_tuple_packed_t_address__to_t_address__nonPadded_inplace_fromStack_reversed": {
									"entryPoint": null,
									"id": null,
									"parameterSlots": 2,
									"returnSlots": 1
								},
								"abi_encode_tuple_packed_t_string_storage_t_string_memory_ptr_t_stringliteral_94311adc0a0cd4e10be11b23bd4316b8cffa4adf693e8f96f5c075aa439a7972__to_t_string_memory_ptr_t_string_memory_ptr_t_string_memory_ptr__nonPadded_inplace_fromStack_reversed": {
									"entryPoint": 9369,
									"id": null,
									"parameterSlots": 3,
									"returnSlots": 1
								},
								"abi_encode_tuple_t_address__to_t_address__fromStack_reversed": {
									"entryPoint": null,
									"id": null,
									"parameterSlots": 2,
									"returnSlots": 1
								},
								"abi_encode_tuple_t_address_t_address_t_uint256_t_bytes_memory_ptr__to_t_address_t_address_t_uint256_t_bytes_memory_ptr__fromStack_reversed": {
									"entryPoint": 9556,
									"id": null,
									"parameterSlots": 5,
									"returnSlots": 1
								},
								"abi_encode_tuple_t_array$_t_uint256_$dyn_memory_ptr__to_t_array$_t_uint256_$dyn_memory_ptr__fromStack_reversed": {
									"entryPoint": 8701,
									"id": null,
									"parameterSlots": 2,
									"returnSlots": 1
								},
								"abi_encode_tuple_t_bool__to_t_bool__fromStack_reversed": {
									"entryPoint": null,
									"id": null,
									"parameterSlots": 2,
									"returnSlots": 1
								},
								"abi_encode_tuple_t_bytes32__to_t_bytes32__fromStack_reversed": {
									"entryPoint": null,
									"id": null,
									"parameterSlots": 2,
									"returnSlots": 1
								},
								"abi_encode_tuple_t_string_memory_ptr__to_t_string_memory_ptr__fromStack_reversed": {
									"entryPoint": 8384,
									"id": null,
									"parameterSlots": 2,
									"returnSlots": 1
								},
								"abi_encode_tuple_t_stringliteral_0b39a6345f34c8d3711dfee0a8d6f2ec7300f78ff8b109391ba42a768c3501b2__to_t_string_memory_ptr__fromStack_reversed": {
									"entryPoint": 9115,
									"id": null,
									"parameterSlots": 1,
									"returnSlots": 1
								},
								"abi_encode_tuple_t_stringliteral_245f15ff17f551913a7a18385165551503906a406f905ac1c2437281a7cd0cfe__to_t_string_memory_ptr__fromStack_reversed": {
									"entryPoint": null,
									"id": null,
									"parameterSlots": 1,
									"returnSlots": 1
								},
								"abi_encode_tuple_t_stringliteral_3f5ae172148f1a839b485a0b667d45729d23a3f71a8af08708a3cd4714b3609f__to_t_string_memory_ptr__fromStack_reversed": {
									"entryPoint": null,
									"id": null,
									"parameterSlots": 1,
									"returnSlots": 1
								},
								"abi_encode_tuple_t_stringliteral_4564d982d90210332958c1167d5b8793ec62b7f630d1d2edde455ef94ad8862d__to_t_string_memory_ptr__fromStack_reversed": {
									"entryPoint": null,
									"id": null,
									"parameterSlots": 1,
									"returnSlots": 1
								},
								"abi_encode_tuple_t_stringliteral_8b1a1b9660295b67e7b14793b8c2bd996c6eeb2d2db0f052d14c8cdc22873a9a__to_t_string_memory_ptr__fromStack_reversed": {
									"entryPoint": null,
									"id": null,
									"parameterSlots": 1,
									"returnSlots": 1
								},
								"abi_encode_tuple_t_stringliteral_9924ebdf1add33d25d4ef888e16131f0a5687b0580a36c21b5c301a6c462effe__to_t_string_memory_ptr__fromStack_reversed": {
									"entryPoint": 9003,
									"id": null,
									"parameterSlots": 1,
									"returnSlots": 1
								},
								"abi_encode_tuple_t_stringliteral_a2d45c0fba603d40d82d590051761ca952d1ab9d78cca6d0d464d7b6e961a9cb__to_t_string_memory_ptr__fromStack_reversed": {
									"entryPoint": null,
									"id": null,
									"parameterSlots": 1,
									"returnSlots": 1
								},
								"abi_encode_tuple_t_stringliteral_a7784544cb8b9a65a2b0965c3345ca15fb09d360c00de0cc8d856dad61d1ba77__to_t_string_memory_ptr__fromStack_reversed": {
									"entryPoint": null,
									"id": null,
									"parameterSlots": 1,
									"returnSlots": 1
								},
								"abi_encode_tuple_t_stringliteral_aea8008bf26276581196d49f4534f22b2d7f0710e7141375c13ff69906fe5f3c__to_t_string_memory_ptr__fromStack_reversed": {
									"entryPoint": null,
									"id": null,
									"parameterSlots": 1,
									"returnSlots": 1
								},
								"abi_encode_tuple_t_stringliteral_b6c181b21e441452ee7d7a7c60b6959a4f4ea0ea4d2d03845776065ae0fba129__to_t_string_memory_ptr__fromStack_reversed": {
									"entryPoint": null,
									"id": null,
									"parameterSlots": 1,
									"returnSlots": 1
								},
								"abi_encode_tuple_t_stringliteral_c20fc45585ea982635c0eaea27752aa72d9d12c67d0eca0ac62441a0fcd497bc__to_t_string_memory_ptr__fromStack_reversed": {
									"entryPoint": null,
									"id": null,
									"parameterSlots": 1,
									"returnSlots": 1
								},
								"abi_encode_tuple_t_stringliteral_c23275b1ed5ed81046546b0000675842efe31b6ede5f5a7e9e64b1e87538c27b__to_t_string_memory_ptr__fromStack_reversed": {
									"entryPoint": null,
									"id": null,
									"parameterSlots": 1,
									"returnSlots": 1
								},
								"abi_encode_tuple_t_stringliteral_d50224ebe3461b0a303d65927b666a283fb32c6ac10a95714d9f0a81b05788d6__to_t_string_memory_ptr__fromStack_reversed": {
									"entryPoint": null,
									"id": null,
									"parameterSlots": 1,
									"returnSlots": 1
								},
								"abi_encode_tuple_t_stringliteral_d9829f603a2b359b234b0a0f735ae7dd63ba4e2bffa17e8480bd5f19fbc111cd__to_t_string_memory_ptr__fromStack_reversed": {
									"entryPoint": null,
									"id": null,
									"parameterSlots": 1,
									"returnSlots": 1
								},
								"abi_encode_tuple_t_uint256__to_t_uint256__fromStack_reversed": {
									"entryPoint": null,
									"id": null,
									"parameterSlots": 2,
									"returnSlots": 1
								},
								"allocate_memory": {
									"entryPoint": 8089,
									"id": null,
									"parameterSlots": 1,
									"returnSlots": 1
								},
								"array_dataslot_string_storage": {
									"entryPoint": null,
									"id": null,
									"parameterSlots": 1,
									"returnSlots": 1
								},
								"checked_add_t_uint256": {
									"entryPoint": 9217,
									"id": null,
									"parameterSlots": 2,
									"returnSlots": 1
								},
								"checked_div_t_uint256": {
									"entryPoint": 9294,
									"id": null,
									"parameterSlots": 2,
									"returnSlots": 1
								},
								"checked_mul_t_uint256": {
									"entryPoint": 9241,
									"id": null,
									"parameterSlots": 2,
									"returnSlots": 1
								},
								"checked_sub_t_uint256": {
									"entryPoint": 9646,
									"id": null,
									"parameterSlots": 2,
									"returnSlots": 1
								},
								"copy_memory_to_memory": {
									"entryPoint": 8296,
									"id": null,
									"parameterSlots": 3,
									"returnSlots": 0
								},
								"extract_byte_array_length": {
									"entryPoint": 9056,
									"id": null,
									"parameterSlots": 1,
									"returnSlots": 1
								},
								"increment_t_uint256": {
									"entryPoint": 9314,
									"id": null,
									"parameterSlots": 1,
									"returnSlots": 1
								},
								"mod_t_uint256": {
									"entryPoint": 9669,
									"id": null,
									"parameterSlots": 2,
									"returnSlots": 1
								},
								"panic_error_0x11": {
									"entryPoint": 9195,
									"id": null,
									"parameterSlots": 0,
									"returnSlots": 0
								},
								"panic_error_0x12": {
									"entryPoint": 9272,
									"id": null,
									"parameterSlots": 0,
									"returnSlots": 0
								},
								"panic_error_0x32": {
									"entryPoint": 9689,
									"id": null,
									"parameterSlots": 0,
									"returnSlots": 0
								},
								"panic_error_0x41": {
									"entryPoint": 8067,
									"id": null,
									"parameterSlots": 0,
									"returnSlots": 0
								},
								"validator_revert_bytes4": {
									"entryPoint": 7961,
									"id": null,
									"parameterSlots": 1,
									"returnSlots": 0
								}
							},
							"generatedSources": [
								{
									"ast": {
										"nodeType": "YulBlock",
										"src": "0:17469:13",
										"statements": [
											{
												"nodeType": "YulBlock",
												"src": "6:3:13",
												"statements": []
											},
											{
												"body": {
													"nodeType": "YulBlock",
													"src": "58:87:13",
													"statements": [
														{
															"body": {
																"nodeType": "YulBlock",
																"src": "123:16:13",
																"statements": [
																	{
																		"expression": {
																			"arguments": [
																				{
																					"kind": "number",
																					"nodeType": "YulLiteral",
																					"src": "132:1:13",
																					"type": "",
																					"value": "0"
																				},
																				{
																					"kind": "number",
																					"nodeType": "YulLiteral",
																					"src": "135:1:13",
																					"type": "",
																					"value": "0"
																				}
																			],
																			"functionName": {
																				"name": "revert",
																				"nodeType": "YulIdentifier",
																				"src": "125:6:13"
																			},
																			"nodeType": "YulFunctionCall",
																			"src": "125:12:13"
																		},
																		"nodeType": "YulExpressionStatement",
																		"src": "125:12:13"
																	}
																]
															},
															"condition": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"name": "value",
																				"nodeType": "YulIdentifier",
																				"src": "81:5:13"
																			},
																			{
																				"arguments": [
																					{
																						"name": "value",
																						"nodeType": "YulIdentifier",
																						"src": "92:5:13"
																					},
																					{
																						"arguments": [
																							{
																								"kind": "number",
																								"nodeType": "YulLiteral",
																								"src": "103:3:13",
																								"type": "",
																								"value": "224"
																							},
																							{
																								"kind": "number",
																								"nodeType": "YulLiteral",
																								"src": "108:10:13",
																								"type": "",
																								"value": "0xffffffff"
																							}
																						],
																						"functionName": {
																							"name": "shl",
																							"nodeType": "YulIdentifier",
																							"src": "99:3:13"
																						},
																						"nodeType": "YulFunctionCall",
																						"src": "99:20:13"
																					}
																				],
																				"functionName": {
																					"name": "and",
																					"nodeType": "YulIdentifier",
																					"src": "88:3:13"
																				},
																				"nodeType": "YulFunctionCall",
																				"src": "88:32:13"
																			}
																		],
																		"functionName": {
																			"name": "eq",
																			"nodeType": "YulIdentifier",
																			"src": "78:2:13"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "78:43:13"
																	}
																],
																"functionName": {
																	"name": "iszero",
																	"nodeType": "YulIdentifier",
																	"src": "71:6:13"
																},
																"nodeType": "YulFunctionCall",
																"src": "71:51:13"
															},
															"nodeType": "YulIf",
															"src": "68:71:13"
														}
													]
												},
												"name": "validator_revert_bytes4",
												"nodeType": "YulFunctionDefinition",
												"parameters": [
													{
														"name": "value",
														"nodeType": "YulTypedName",
														"src": "47:5:13",
														"type": ""
													}
												],
												"src": "14:131:13"
											},
											{
												"body": {
													"nodeType": "YulBlock",
													"src": "219:176:13",
													"statements": [
														{
															"body": {
																"nodeType": "YulBlock",
																"src": "265:16:13",
																"statements": [
																	{
																		"expression": {
																			"arguments": [
																				{
																					"kind": "number",
																					"nodeType": "YulLiteral",
																					"src": "274:1:13",
																					"type": "",
																					"value": "0"
																				},
																				{
																					"kind": "number",
																					"nodeType": "YulLiteral",
																					"src": "277:1:13",
																					"type": "",
																					"value": "0"
																				}
																			],
																			"functionName": {
																				"name": "revert",
																				"nodeType": "YulIdentifier",
																				"src": "267:6:13"
																			},
																			"nodeType": "YulFunctionCall",
																			"src": "267:12:13"
																		},
																		"nodeType": "YulExpressionStatement",
																		"src": "267:12:13"
																	}
																]
															},
															"condition": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"name": "dataEnd",
																				"nodeType": "YulIdentifier",
																				"src": "240:7:13"
																			},
																			{
																				"name": "headStart",
																				"nodeType": "YulIdentifier",
																				"src": "249:9:13"
																			}
																		],
																		"functionName": {
																			"name": "sub",
																			"nodeType": "YulIdentifier",
																			"src": "236:3:13"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "236:23:13"
																	},
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "261:2:13",
																		"type": "",
																		"value": "32"
																	}
																],
																"functionName": {
																	"name": "slt",
																	"nodeType": "YulIdentifier",
																	"src": "232:3:13"
																},
																"nodeType": "YulFunctionCall",
																"src": "232:32:13"
															},
															"nodeType": "YulIf",
															"src": "229:52:13"
														},
														{
															"nodeType": "YulVariableDeclaration",
															"src": "290:36:13",
															"value": {
																"arguments": [
																	{
																		"name": "headStart",
																		"nodeType": "YulIdentifier",
																		"src": "316:9:13"
																	}
																],
																"functionName": {
																	"name": "calldataload",
																	"nodeType": "YulIdentifier",
																	"src": "303:12:13"
																},
																"nodeType": "YulFunctionCall",
																"src": "303:23:13"
															},
															"variables": [
																{
																	"name": "value",
																	"nodeType": "YulTypedName",
																	"src": "294:5:13",
																	"type": ""
																}
															]
														},
														{
															"expression": {
																"arguments": [
																	{
																		"name": "value",
																		"nodeType": "YulIdentifier",
																		"src": "359:5:13"
																	}
																],
																"functionName": {
																	"name": "validator_revert_bytes4",
																	"nodeType": "YulIdentifier",
																	"src": "335:23:13"
																},
																"nodeType": "YulFunctionCall",
																"src": "335:30:13"
															},
															"nodeType": "YulExpressionStatement",
															"src": "335:30:13"
														},
														{
															"nodeType": "YulAssignment",
															"src": "374:15:13",
															"value": {
																"name": "value",
																"nodeType": "YulIdentifier",
																"src": "384:5:13"
															},
															"variableNames": [
																{
																	"name": "value0",
																	"nodeType": "YulIdentifier",
																	"src": "374:6:13"
																}
															]
														}
													]
												},
												"name": "abi_decode_tuple_t_bytes4",
												"nodeType": "YulFunctionDefinition",
												"parameters": [
													{
														"name": "headStart",
														"nodeType": "YulTypedName",
														"src": "185:9:13",
														"type": ""
													},
													{
														"name": "dataEnd",
														"nodeType": "YulTypedName",
														"src": "196:7:13",
														"type": ""
													}
												],
												"returnVariables": [
													{
														"name": "value0",
														"nodeType": "YulTypedName",
														"src": "208:6:13",
														"type": ""
													}
												],
												"src": "150:245:13"
											},
											{
												"body": {
													"nodeType": "YulBlock",
													"src": "495:92:13",
													"statements": [
														{
															"nodeType": "YulAssignment",
															"src": "505:26:13",
															"value": {
																"arguments": [
																	{
																		"name": "headStart",
																		"nodeType": "YulIdentifier",
																		"src": "517:9:13"
																	},
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "528:2:13",
																		"type": "",
																		"value": "32"
																	}
																],
																"functionName": {
																	"name": "add",
																	"nodeType": "YulIdentifier",
																	"src": "513:3:13"
																},
																"nodeType": "YulFunctionCall",
																"src": "513:18:13"
															},
															"variableNames": [
																{
																	"name": "tail",
																	"nodeType": "YulIdentifier",
																	"src": "505:4:13"
																}
															]
														},
														{
															"expression": {
																"arguments": [
																	{
																		"name": "headStart",
																		"nodeType": "YulIdentifier",
																		"src": "547:9:13"
																	},
																	{
																		"arguments": [
																			{
																				"arguments": [
																					{
																						"name": "value0",
																						"nodeType": "YulIdentifier",
																						"src": "572:6:13"
																					}
																				],
																				"functionName": {
																					"name": "iszero",
																					"nodeType": "YulIdentifier",
																					"src": "565:6:13"
																				},
																				"nodeType": "YulFunctionCall",
																				"src": "565:14:13"
																			}
																		],
																		"functionName": {
																			"name": "iszero",
																			"nodeType": "YulIdentifier",
																			"src": "558:6:13"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "558:22:13"
																	}
																],
																"functionName": {
																	"name": "mstore",
																	"nodeType": "YulIdentifier",
																	"src": "540:6:13"
																},
																"nodeType": "YulFunctionCall",
																"src": "540:41:13"
															},
															"nodeType": "YulExpressionStatement",
															"src": "540:41:13"
														}
													]
												},
												"name": "abi_encode_tuple_t_bool__to_t_bool__fromStack_reversed",
												"nodeType": "YulFunctionDefinition",
												"parameters": [
													{
														"name": "headStart",
														"nodeType": "YulTypedName",
														"src": "464:9:13",
														"type": ""
													},
													{
														"name": "value0",
														"nodeType": "YulTypedName",
														"src": "475:6:13",
														"type": ""
													}
												],
												"returnVariables": [
													{
														"name": "tail",
														"nodeType": "YulTypedName",
														"src": "486:4:13",
														"type": ""
													}
												],
												"src": "400:187:13"
											},
											{
												"body": {
													"nodeType": "YulBlock",
													"src": "641:124:13",
													"statements": [
														{
															"nodeType": "YulAssignment",
															"src": "651:29:13",
															"value": {
																"arguments": [
																	{
																		"name": "offset",
																		"nodeType": "YulIdentifier",
																		"src": "673:6:13"
																	}
																],
																"functionName": {
																	"name": "calldataload",
																	"nodeType": "YulIdentifier",
																	"src": "660:12:13"
																},
																"nodeType": "YulFunctionCall",
																"src": "660:20:13"
															},
															"variableNames": [
																{
																	"name": "value",
																	"nodeType": "YulIdentifier",
																	"src": "651:5:13"
																}
															]
														},
														{
															"body": {
																"nodeType": "YulBlock",
																"src": "743:16:13",
																"statements": [
																	{
																		"expression": {
																			"arguments": [
																				{
																					"kind": "number",
																					"nodeType": "YulLiteral",
																					"src": "752:1:13",
																					"type": "",
																					"value": "0"
																				},
																				{
																					"kind": "number",
																					"nodeType": "YulLiteral",
																					"src": "755:1:13",
																					"type": "",
																					"value": "0"
																				}
																			],
																			"functionName": {
																				"name": "revert",
																				"nodeType": "YulIdentifier",
																				"src": "745:6:13"
																			},
																			"nodeType": "YulFunctionCall",
																			"src": "745:12:13"
																		},
																		"nodeType": "YulExpressionStatement",
																		"src": "745:12:13"
																	}
																]
															},
															"condition": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"name": "value",
																				"nodeType": "YulIdentifier",
																				"src": "702:5:13"
																			},
																			{
																				"arguments": [
																					{
																						"name": "value",
																						"nodeType": "YulIdentifier",
																						"src": "713:5:13"
																					},
																					{
																						"arguments": [
																							{
																								"arguments": [
																									{
																										"kind": "number",
																										"nodeType": "YulLiteral",
																										"src": "728:3:13",
																										"type": "",
																										"value": "160"
																									},
																									{
																										"kind": "number",
																										"nodeType": "YulLiteral",
																										"src": "733:1:13",
																										"type": "",
																										"value": "1"
																									}
																								],
																								"functionName": {
																									"name": "shl",
																									"nodeType": "YulIdentifier",
																									"src": "724:3:13"
																								},
																								"nodeType": "YulFunctionCall",
																								"src": "724:11:13"
																							},
																							{
																								"kind": "number",
																								"nodeType": "YulLiteral",
																								"src": "737:1:13",
																								"type": "",
																								"value": "1"
																							}
																						],
																						"functionName": {
																							"name": "sub",
																							"nodeType": "YulIdentifier",
																							"src": "720:3:13"
																						},
																						"nodeType": "YulFunctionCall",
																						"src": "720:19:13"
																					}
																				],
																				"functionName": {
																					"name": "and",
																					"nodeType": "YulIdentifier",
																					"src": "709:3:13"
																				},
																				"nodeType": "YulFunctionCall",
																				"src": "709:31:13"
																			}
																		],
																		"functionName": {
																			"name": "eq",
																			"nodeType": "YulIdentifier",
																			"src": "699:2:13"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "699:42:13"
																	}
																],
																"functionName": {
																	"name": "iszero",
																	"nodeType": "YulIdentifier",
																	"src": "692:6:13"
																},
																"nodeType": "YulFunctionCall",
																"src": "692:50:13"
															},
															"nodeType": "YulIf",
															"src": "689:70:13"
														}
													]
												},
												"name": "abi_decode_address",
												"nodeType": "YulFunctionDefinition",
												"parameters": [
													{
														"name": "offset",
														"nodeType": "YulTypedName",
														"src": "620:6:13",
														"type": ""
													}
												],
												"returnVariables": [
													{
														"name": "value",
														"nodeType": "YulTypedName",
														"src": "631:5:13",
														"type": ""
													}
												],
												"src": "592:173:13"
											},
											{
												"body": {
													"nodeType": "YulBlock",
													"src": "840:116:13",
													"statements": [
														{
															"body": {
																"nodeType": "YulBlock",
																"src": "886:16:13",
																"statements": [
																	{
																		"expression": {
																			"arguments": [
																				{
																					"kind": "number",
																					"nodeType": "YulLiteral",
																					"src": "895:1:13",
																					"type": "",
																					"value": "0"
																				},
																				{
																					"kind": "number",
																					"nodeType": "YulLiteral",
																					"src": "898:1:13",
																					"type": "",
																					"value": "0"
																				}
																			],
																			"functionName": {
																				"name": "revert",
																				"nodeType": "YulIdentifier",
																				"src": "888:6:13"
																			},
																			"nodeType": "YulFunctionCall",
																			"src": "888:12:13"
																		},
																		"nodeType": "YulExpressionStatement",
																		"src": "888:12:13"
																	}
																]
															},
															"condition": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"name": "dataEnd",
																				"nodeType": "YulIdentifier",
																				"src": "861:7:13"
																			},
																			{
																				"name": "headStart",
																				"nodeType": "YulIdentifier",
																				"src": "870:9:13"
																			}
																		],
																		"functionName": {
																			"name": "sub",
																			"nodeType": "YulIdentifier",
																			"src": "857:3:13"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "857:23:13"
																	},
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "882:2:13",
																		"type": "",
																		"value": "32"
																	}
																],
																"functionName": {
																	"name": "slt",
																	"nodeType": "YulIdentifier",
																	"src": "853:3:13"
																},
																"nodeType": "YulFunctionCall",
																"src": "853:32:13"
															},
															"nodeType": "YulIf",
															"src": "850:52:13"
														},
														{
															"nodeType": "YulAssignment",
															"src": "911:39:13",
															"value": {
																"arguments": [
																	{
																		"name": "headStart",
																		"nodeType": "YulIdentifier",
																		"src": "940:9:13"
																	}
																],
																"functionName": {
																	"name": "abi_decode_address",
																	"nodeType": "YulIdentifier",
																	"src": "921:18:13"
																},
																"nodeType": "YulFunctionCall",
																"src": "921:29:13"
															},
															"variableNames": [
																{
																	"name": "value0",
																	"nodeType": "YulIdentifier",
																	"src": "911:6:13"
																}
															]
														}
													]
												},
												"name": "abi_decode_tuple_t_address",
												"nodeType": "YulFunctionDefinition",
												"parameters": [
													{
														"name": "headStart",
														"nodeType": "YulTypedName",
														"src": "806:9:13",
														"type": ""
													},
													{
														"name": "dataEnd",
														"nodeType": "YulTypedName",
														"src": "817:7:13",
														"type": ""
													}
												],
												"returnVariables": [
													{
														"name": "value0",
														"nodeType": "YulTypedName",
														"src": "829:6:13",
														"type": ""
													}
												],
												"src": "770:186:13"
											},
											{
												"body": {
													"nodeType": "YulBlock",
													"src": "1062:76:13",
													"statements": [
														{
															"nodeType": "YulAssignment",
															"src": "1072:26:13",
															"value": {
																"arguments": [
																	{
																		"name": "headStart",
																		"nodeType": "YulIdentifier",
																		"src": "1084:9:13"
																	},
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "1095:2:13",
																		"type": "",
																		"value": "32"
																	}
																],
																"functionName": {
																	"name": "add",
																	"nodeType": "YulIdentifier",
																	"src": "1080:3:13"
																},
																"nodeType": "YulFunctionCall",
																"src": "1080:18:13"
															},
															"variableNames": [
																{
																	"name": "tail",
																	"nodeType": "YulIdentifier",
																	"src": "1072:4:13"
																}
															]
														},
														{
															"expression": {
																"arguments": [
																	{
																		"name": "headStart",
																		"nodeType": "YulIdentifier",
																		"src": "1114:9:13"
																	},
																	{
																		"name": "value0",
																		"nodeType": "YulIdentifier",
																		"src": "1125:6:13"
																	}
																],
																"functionName": {
																	"name": "mstore",
																	"nodeType": "YulIdentifier",
																	"src": "1107:6:13"
																},
																"nodeType": "YulFunctionCall",
																"src": "1107:25:13"
															},
															"nodeType": "YulExpressionStatement",
															"src": "1107:25:13"
														}
													]
												},
												"name": "abi_encode_tuple_t_uint256__to_t_uint256__fromStack_reversed",
												"nodeType": "YulFunctionDefinition",
												"parameters": [
													{
														"name": "headStart",
														"nodeType": "YulTypedName",
														"src": "1031:9:13",
														"type": ""
													},
													{
														"name": "value0",
														"nodeType": "YulTypedName",
														"src": "1042:6:13",
														"type": ""
													}
												],
												"returnVariables": [
													{
														"name": "tail",
														"nodeType": "YulTypedName",
														"src": "1053:4:13",
														"type": ""
													}
												],
												"src": "961:177:13"
											},
											{
												"body": {
													"nodeType": "YulBlock",
													"src": "1175:95:13",
													"statements": [
														{
															"expression": {
																"arguments": [
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "1192:1:13",
																		"type": "",
																		"value": "0"
																	},
																	{
																		"arguments": [
																			{
																				"kind": "number",
																				"nodeType": "YulLiteral",
																				"src": "1199:3:13",
																				"type": "",
																				"value": "224"
																			},
																			{
																				"kind": "number",
																				"nodeType": "YulLiteral",
																				"src": "1204:10:13",
																				"type": "",
																				"value": "0x4e487b71"
																			}
																		],
																		"functionName": {
																			"name": "shl",
																			"nodeType": "YulIdentifier",
																			"src": "1195:3:13"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "1195:20:13"
																	}
																],
																"functionName": {
																	"name": "mstore",
																	"nodeType": "YulIdentifier",
																	"src": "1185:6:13"
																},
																"nodeType": "YulFunctionCall",
																"src": "1185:31:13"
															},
															"nodeType": "YulExpressionStatement",
															"src": "1185:31:13"
														},
														{
															"expression": {
																"arguments": [
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "1232:1:13",
																		"type": "",
																		"value": "4"
																	},
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "1235:4:13",
																		"type": "",
																		"value": "0x41"
																	}
																],
																"functionName": {
																	"name": "mstore",
																	"nodeType": "YulIdentifier",
																	"src": "1225:6:13"
																},
																"nodeType": "YulFunctionCall",
																"src": "1225:15:13"
															},
															"nodeType": "YulExpressionStatement",
															"src": "1225:15:13"
														},
														{
															"expression": {
																"arguments": [
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "1256:1:13",
																		"type": "",
																		"value": "0"
																	},
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "1259:4:13",
																		"type": "",
																		"value": "0x24"
																	}
																],
																"functionName": {
																	"name": "revert",
																	"nodeType": "YulIdentifier",
																	"src": "1249:6:13"
																},
																"nodeType": "YulFunctionCall",
																"src": "1249:15:13"
															},
															"nodeType": "YulExpressionStatement",
															"src": "1249:15:13"
														}
													]
												},
												"name": "panic_error_0x41",
												"nodeType": "YulFunctionDefinition",
												"src": "1143:127:13"
											},
											{
												"body": {
													"nodeType": "YulBlock",
													"src": "1320:230:13",
													"statements": [
														{
															"nodeType": "YulAssignment",
															"src": "1330:19:13",
															"value": {
																"arguments": [
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "1346:2:13",
																		"type": "",
																		"value": "64"
																	}
																],
																"functionName": {
																	"name": "mload",
																	"nodeType": "YulIdentifier",
																	"src": "1340:5:13"
																},
																"nodeType": "YulFunctionCall",
																"src": "1340:9:13"
															},
															"variableNames": [
																{
																	"name": "memPtr",
																	"nodeType": "YulIdentifier",
																	"src": "1330:6:13"
																}
															]
														},
														{
															"nodeType": "YulVariableDeclaration",
															"src": "1358:58:13",
															"value": {
																"arguments": [
																	{
																		"name": "memPtr",
																		"nodeType": "YulIdentifier",
																		"src": "1380:6:13"
																	},
																	{
																		"arguments": [
																			{
																				"arguments": [
																					{
																						"name": "size",
																						"nodeType": "YulIdentifier",
																						"src": "1396:4:13"
																					},
																					{
																						"kind": "number",
																						"nodeType": "YulLiteral",
																						"src": "1402:2:13",
																						"type": "",
																						"value": "31"
																					}
																				],
																				"functionName": {
																					"name": "add",
																					"nodeType": "YulIdentifier",
																					"src": "1392:3:13"
																				},
																				"nodeType": "YulFunctionCall",
																				"src": "1392:13:13"
																			},
																			{
																				"arguments": [
																					{
																						"kind": "number",
																						"nodeType": "YulLiteral",
																						"src": "1411:2:13",
																						"type": "",
																						"value": "31"
																					}
																				],
																				"functionName": {
																					"name": "not",
																					"nodeType": "YulIdentifier",
																					"src": "1407:3:13"
																				},
																				"nodeType": "YulFunctionCall",
																				"src": "1407:7:13"
																			}
																		],
																		"functionName": {
																			"name": "and",
																			"nodeType": "YulIdentifier",
																			"src": "1388:3:13"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "1388:27:13"
																	}
																],
																"functionName": {
																	"name": "add",
																	"nodeType": "YulIdentifier",
																	"src": "1376:3:13"
																},
																"nodeType": "YulFunctionCall",
																"src": "1376:40:13"
															},
															"variables": [
																{
																	"name": "newFreePtr",
																	"nodeType": "YulTypedName",
																	"src": "1362:10:13",
																	"type": ""
																}
															]
														},
														{
															"body": {
																"nodeType": "YulBlock",
																"src": "1491:22:13",
																"statements": [
																	{
																		"expression": {
																			"arguments": [],
																			"functionName": {
																				"name": "panic_error_0x41",
																				"nodeType": "YulIdentifier",
																				"src": "1493:16:13"
																			},
																			"nodeType": "YulFunctionCall",
																			"src": "1493:18:13"
																		},
																		"nodeType": "YulExpressionStatement",
																		"src": "1493:18:13"
																	}
																]
															},
															"condition": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"name": "newFreePtr",
																				"nodeType": "YulIdentifier",
																				"src": "1434:10:13"
																			},
																			{
																				"kind": "number",
																				"nodeType": "YulLiteral",
																				"src": "1446:18:13",
																				"type": "",
																				"value": "0xffffffffffffffff"
																			}
																		],
																		"functionName": {
																			"name": "gt",
																			"nodeType": "YulIdentifier",
																			"src": "1431:2:13"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "1431:34:13"
																	},
																	{
																		"arguments": [
																			{
																				"name": "newFreePtr",
																				"nodeType": "YulIdentifier",
																				"src": "1470:10:13"
																			},
																			{
																				"name": "memPtr",
																				"nodeType": "YulIdentifier",
																				"src": "1482:6:13"
																			}
																		],
																		"functionName": {
																			"name": "lt",
																			"nodeType": "YulIdentifier",
																			"src": "1467:2:13"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "1467:22:13"
																	}
																],
																"functionName": {
																	"name": "or",
																	"nodeType": "YulIdentifier",
																	"src": "1428:2:13"
																},
																"nodeType": "YulFunctionCall",
																"src": "1428:62:13"
															},
															"nodeType": "YulIf",
															"src": "1425:88:13"
														},
														{
															"expression": {
																"arguments": [
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "1529:2:13",
																		"type": "",
																		"value": "64"
																	},
																	{
																		"name": "newFreePtr",
																		"nodeType": "YulIdentifier",
																		"src": "1533:10:13"
																	}
																],
																"functionName": {
																	"name": "mstore",
																	"nodeType": "YulIdentifier",
																	"src": "1522:6:13"
																},
																"nodeType": "YulFunctionCall",
																"src": "1522:22:13"
															},
															"nodeType": "YulExpressionStatement",
															"src": "1522:22:13"
														}
													]
												},
												"name": "allocate_memory",
												"nodeType": "YulFunctionDefinition",
												"parameters": [
													{
														"name": "size",
														"nodeType": "YulTypedName",
														"src": "1300:4:13",
														"type": ""
													}
												],
												"returnVariables": [
													{
														"name": "memPtr",
														"nodeType": "YulTypedName",
														"src": "1309:6:13",
														"type": ""
													}
												],
												"src": "1275:275:13"
											},
											{
												"body": {
													"nodeType": "YulBlock",
													"src": "1630:332:13",
													"statements": [
														{
															"body": {
																"nodeType": "YulBlock",
																"src": "1674:22:13",
																"statements": [
																	{
																		"expression": {
																			"arguments": [],
																			"functionName": {
																				"name": "panic_error_0x41",
																				"nodeType": "YulIdentifier",
																				"src": "1676:16:13"
																			},
																			"nodeType": "YulFunctionCall",
																			"src": "1676:18:13"
																		},
																		"nodeType": "YulExpressionStatement",
																		"src": "1676:18:13"
																	}
																]
															},
															"condition": {
																"arguments": [
																	{
																		"name": "length",
																		"nodeType": "YulIdentifier",
																		"src": "1646:6:13"
																	},
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "1654:18:13",
																		"type": "",
																		"value": "0xffffffffffffffff"
																	}
																],
																"functionName": {
																	"name": "gt",
																	"nodeType": "YulIdentifier",
																	"src": "1643:2:13"
																},
																"nodeType": "YulFunctionCall",
																"src": "1643:30:13"
															},
															"nodeType": "YulIf",
															"src": "1640:56:13"
														},
														{
															"nodeType": "YulAssignment",
															"src": "1705:66:13",
															"value": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"arguments": [
																					{
																						"arguments": [
																							{
																								"name": "length",
																								"nodeType": "YulIdentifier",
																								"src": "1742:6:13"
																							},
																							{
																								"kind": "number",
																								"nodeType": "YulLiteral",
																								"src": "1750:2:13",
																								"type": "",
																								"value": "31"
																							}
																						],
																						"functionName": {
																							"name": "add",
																							"nodeType": "YulIdentifier",
																							"src": "1738:3:13"
																						},
																						"nodeType": "YulFunctionCall",
																						"src": "1738:15:13"
																					},
																					{
																						"arguments": [
																							{
																								"kind": "number",
																								"nodeType": "YulLiteral",
																								"src": "1759:2:13",
																								"type": "",
																								"value": "31"
																							}
																						],
																						"functionName": {
																							"name": "not",
																							"nodeType": "YulIdentifier",
																							"src": "1755:3:13"
																						},
																						"nodeType": "YulFunctionCall",
																						"src": "1755:7:13"
																					}
																				],
																				"functionName": {
																					"name": "and",
																					"nodeType": "YulIdentifier",
																					"src": "1734:3:13"
																				},
																				"nodeType": "YulFunctionCall",
																				"src": "1734:29:13"
																			},
																			{
																				"kind": "number",
																				"nodeType": "YulLiteral",
																				"src": "1765:4:13",
																				"type": "",
																				"value": "0x20"
																			}
																		],
																		"functionName": {
																			"name": "add",
																			"nodeType": "YulIdentifier",
																			"src": "1730:3:13"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "1730:40:13"
																	}
																],
																"functionName": {
																	"name": "allocate_memory",
																	"nodeType": "YulIdentifier",
																	"src": "1714:15:13"
																},
																"nodeType": "YulFunctionCall",
																"src": "1714:57:13"
															},
															"variableNames": [
																{
																	"name": "array",
																	"nodeType": "YulIdentifier",
																	"src": "1705:5:13"
																}
															]
														},
														{
															"expression": {
																"arguments": [
																	{
																		"name": "array",
																		"nodeType": "YulIdentifier",
																		"src": "1787:5:13"
																	},
																	{
																		"name": "length",
																		"nodeType": "YulIdentifier",
																		"src": "1794:6:13"
																	}
																],
																"functionName": {
																	"name": "mstore",
																	"nodeType": "YulIdentifier",
																	"src": "1780:6:13"
																},
																"nodeType": "YulFunctionCall",
																"src": "1780:21:13"
															},
															"nodeType": "YulExpressionStatement",
															"src": "1780:21:13"
														},
														{
															"body": {
																"nodeType": "YulBlock",
																"src": "1839:16:13",
																"statements": [
																	{
																		"expression": {
																			"arguments": [
																				{
																					"kind": "number",
																					"nodeType": "YulLiteral",
																					"src": "1848:1:13",
																					"type": "",
																					"value": "0"
																				},
																				{
																					"kind": "number",
																					"nodeType": "YulLiteral",
																					"src": "1851:1:13",
																					"type": "",
																					"value": "0"
																				}
																			],
																			"functionName": {
																				"name": "revert",
																				"nodeType": "YulIdentifier",
																				"src": "1841:6:13"
																			},
																			"nodeType": "YulFunctionCall",
																			"src": "1841:12:13"
																		},
																		"nodeType": "YulExpressionStatement",
																		"src": "1841:12:13"
																	}
																]
															},
															"condition": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"name": "src",
																				"nodeType": "YulIdentifier",
																				"src": "1820:3:13"
																			},
																			{
																				"name": "length",
																				"nodeType": "YulIdentifier",
																				"src": "1825:6:13"
																			}
																		],
																		"functionName": {
																			"name": "add",
																			"nodeType": "YulIdentifier",
																			"src": "1816:3:13"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "1816:16:13"
																	},
																	{
																		"name": "end",
																		"nodeType": "YulIdentifier",
																		"src": "1834:3:13"
																	}
																],
																"functionName": {
																	"name": "gt",
																	"nodeType": "YulIdentifier",
																	"src": "1813:2:13"
																},
																"nodeType": "YulFunctionCall",
																"src": "1813:25:13"
															},
															"nodeType": "YulIf",
															"src": "1810:45:13"
														},
														{
															"expression": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"name": "array",
																				"nodeType": "YulIdentifier",
																				"src": "1881:5:13"
																			},
																			{
																				"kind": "number",
																				"nodeType": "YulLiteral",
																				"src": "1888:4:13",
																				"type": "",
																				"value": "0x20"
																			}
																		],
																		"functionName": {
																			"name": "add",
																			"nodeType": "YulIdentifier",
																			"src": "1877:3:13"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "1877:16:13"
																	},
																	{
																		"name": "src",
																		"nodeType": "YulIdentifier",
																		"src": "1895:3:13"
																	},
																	{
																		"name": "length",
																		"nodeType": "YulIdentifier",
																		"src": "1900:6:13"
																	}
																],
																"functionName": {
																	"name": "calldatacopy",
																	"nodeType": "YulIdentifier",
																	"src": "1864:12:13"
																},
																"nodeType": "YulFunctionCall",
																"src": "1864:43:13"
															},
															"nodeType": "YulExpressionStatement",
															"src": "1864:43:13"
														},
														{
															"expression": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"arguments": [
																					{
																						"name": "array",
																						"nodeType": "YulIdentifier",
																						"src": "1931:5:13"
																					},
																					{
																						"name": "length",
																						"nodeType": "YulIdentifier",
																						"src": "1938:6:13"
																					}
																				],
																				"functionName": {
																					"name": "add",
																					"nodeType": "YulIdentifier",
																					"src": "1927:3:13"
																				},
																				"nodeType": "YulFunctionCall",
																				"src": "1927:18:13"
																			},
																			{
																				"kind": "number",
																				"nodeType": "YulLiteral",
																				"src": "1947:4:13",
																				"type": "",
																				"value": "0x20"
																			}
																		],
																		"functionName": {
																			"name": "add",
																			"nodeType": "YulIdentifier",
																			"src": "1923:3:13"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "1923:29:13"
																	},
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "1954:1:13",
																		"type": "",
																		"value": "0"
																	}
																],
																"functionName": {
																	"name": "mstore",
																	"nodeType": "YulIdentifier",
																	"src": "1916:6:13"
																},
																"nodeType": "YulFunctionCall",
																"src": "1916:40:13"
															},
															"nodeType": "YulExpressionStatement",
															"src": "1916:40:13"
														}
													]
												},
												"name": "abi_decode_available_length_string",
												"nodeType": "YulFunctionDefinition",
												"parameters": [
													{
														"name": "src",
														"nodeType": "YulTypedName",
														"src": "1599:3:13",
														"type": ""
													},
													{
														"name": "length",
														"nodeType": "YulTypedName",
														"src": "1604:6:13",
														"type": ""
													},
													{
														"name": "end",
														"nodeType": "YulTypedName",
														"src": "1612:3:13",
														"type": ""
													}
												],
												"returnVariables": [
													{
														"name": "array",
														"nodeType": "YulTypedName",
														"src": "1620:5:13",
														"type": ""
													}
												],
												"src": "1555:407:13"
											},
											{
												"body": {
													"nodeType": "YulBlock",
													"src": "2047:371:13",
													"statements": [
														{
															"body": {
																"nodeType": "YulBlock",
																"src": "2093:16:13",
																"statements": [
																	{
																		"expression": {
																			"arguments": [
																				{
																					"kind": "number",
																					"nodeType": "YulLiteral",
																					"src": "2102:1:13",
																					"type": "",
																					"value": "0"
																				},
																				{
																					"kind": "number",
																					"nodeType": "YulLiteral",
																					"src": "2105:1:13",
																					"type": "",
																					"value": "0"
																				}
																			],
																			"functionName": {
																				"name": "revert",
																				"nodeType": "YulIdentifier",
																				"src": "2095:6:13"
																			},
																			"nodeType": "YulFunctionCall",
																			"src": "2095:12:13"
																		},
																		"nodeType": "YulExpressionStatement",
																		"src": "2095:12:13"
																	}
																]
															},
															"condition": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"name": "dataEnd",
																				"nodeType": "YulIdentifier",
																				"src": "2068:7:13"
																			},
																			{
																				"name": "headStart",
																				"nodeType": "YulIdentifier",
																				"src": "2077:9:13"
																			}
																		],
																		"functionName": {
																			"name": "sub",
																			"nodeType": "YulIdentifier",
																			"src": "2064:3:13"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "2064:23:13"
																	},
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "2089:2:13",
																		"type": "",
																		"value": "32"
																	}
																],
																"functionName": {
																	"name": "slt",
																	"nodeType": "YulIdentifier",
																	"src": "2060:3:13"
																},
																"nodeType": "YulFunctionCall",
																"src": "2060:32:13"
															},
															"nodeType": "YulIf",
															"src": "2057:52:13"
														},
														{
															"nodeType": "YulVariableDeclaration",
															"src": "2118:37:13",
															"value": {
																"arguments": [
																	{
																		"name": "headStart",
																		"nodeType": "YulIdentifier",
																		"src": "2145:9:13"
																	}
																],
																"functionName": {
																	"name": "calldataload",
																	"nodeType": "YulIdentifier",
																	"src": "2132:12:13"
																},
																"nodeType": "YulFunctionCall",
																"src": "2132:23:13"
															},
															"variables": [
																{
																	"name": "offset",
																	"nodeType": "YulTypedName",
																	"src": "2122:6:13",
																	"type": ""
																}
															]
														},
														{
															"body": {
																"nodeType": "YulBlock",
																"src": "2198:16:13",
																"statements": [
																	{
																		"expression": {
																			"arguments": [
																				{
																					"kind": "number",
																					"nodeType": "YulLiteral",
																					"src": "2207:1:13",
																					"type": "",
																					"value": "0"
																				},
																				{
																					"kind": "number",
																					"nodeType": "YulLiteral",
																					"src": "2210:1:13",
																					"type": "",
																					"value": "0"
																				}
																			],
																			"functionName": {
																				"name": "revert",
																				"nodeType": "YulIdentifier",
																				"src": "2200:6:13"
																			},
																			"nodeType": "YulFunctionCall",
																			"src": "2200:12:13"
																		},
																		"nodeType": "YulExpressionStatement",
																		"src": "2200:12:13"
																	}
																]
															},
															"condition": {
																"arguments": [
																	{
																		"name": "offset",
																		"nodeType": "YulIdentifier",
																		"src": "2170:6:13"
																	},
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "2178:18:13",
																		"type": "",
																		"value": "0xffffffffffffffff"
																	}
																],
																"functionName": {
																	"name": "gt",
																	"nodeType": "YulIdentifier",
																	"src": "2167:2:13"
																},
																"nodeType": "YulFunctionCall",
																"src": "2167:30:13"
															},
															"nodeType": "YulIf",
															"src": "2164:50:13"
														},
														{
															"nodeType": "YulVariableDeclaration",
															"src": "2223:32:13",
															"value": {
																"arguments": [
																	{
																		"name": "headStart",
																		"nodeType": "YulIdentifier",
																		"src": "2237:9:13"
																	},
																	{
																		"name": "offset",
																		"nodeType": "YulIdentifier",
																		"src": "2248:6:13"
																	}
																],
																"functionName": {
																	"name": "add",
																	"nodeType": "YulIdentifier",
																	"src": "2233:3:13"
																},
																"nodeType": "YulFunctionCall",
																"src": "2233:22:13"
															},
															"variables": [
																{
																	"name": "_1",
																	"nodeType": "YulTypedName",
																	"src": "2227:2:13",
																	"type": ""
																}
															]
														},
														{
															"body": {
																"nodeType": "YulBlock",
																"src": "2303:16:13",
																"statements": [
																	{
																		"expression": {
																			"arguments": [
																				{
																					"kind": "number",
																					"nodeType": "YulLiteral",
																					"src": "2312:1:13",
																					"type": "",
																					"value": "0"
																				},
																				{
																					"kind": "number",
																					"nodeType": "YulLiteral",
																					"src": "2315:1:13",
																					"type": "",
																					"value": "0"
																				}
																			],
																			"functionName": {
																				"name": "revert",
																				"nodeType": "YulIdentifier",
																				"src": "2305:6:13"
																			},
																			"nodeType": "YulFunctionCall",
																			"src": "2305:12:13"
																		},
																		"nodeType": "YulExpressionStatement",
																		"src": "2305:12:13"
																	}
																]
															},
															"condition": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"arguments": [
																					{
																						"name": "_1",
																						"nodeType": "YulIdentifier",
																						"src": "2282:2:13"
																					},
																					{
																						"kind": "number",
																						"nodeType": "YulLiteral",
																						"src": "2286:4:13",
																						"type": "",
																						"value": "0x1f"
																					}
																				],
																				"functionName": {
																					"name": "add",
																					"nodeType": "YulIdentifier",
																					"src": "2278:3:13"
																				},
																				"nodeType": "YulFunctionCall",
																				"src": "2278:13:13"
																			},
																			{
																				"name": "dataEnd",
																				"nodeType": "YulIdentifier",
																				"src": "2293:7:13"
																			}
																		],
																		"functionName": {
																			"name": "slt",
																			"nodeType": "YulIdentifier",
																			"src": "2274:3:13"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "2274:27:13"
																	}
																],
																"functionName": {
																	"name": "iszero",
																	"nodeType": "YulIdentifier",
																	"src": "2267:6:13"
																},
																"nodeType": "YulFunctionCall",
																"src": "2267:35:13"
															},
															"nodeType": "YulIf",
															"src": "2264:55:13"
														},
														{
															"nodeType": "YulAssignment",
															"src": "2328:84:13",
															"value": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"name": "_1",
																				"nodeType": "YulIdentifier",
																				"src": "2377:2:13"
																			},
																			{
																				"kind": "number",
																				"nodeType": "YulLiteral",
																				"src": "2381:2:13",
																				"type": "",
																				"value": "32"
																			}
																		],
																		"functionName": {
																			"name": "add",
																			"nodeType": "YulIdentifier",
																			"src": "2373:3:13"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "2373:11:13"
																	},
																	{
																		"arguments": [
																			{
																				"name": "_1",
																				"nodeType": "YulIdentifier",
																				"src": "2399:2:13"
																			}
																		],
																		"functionName": {
																			"name": "calldataload",
																			"nodeType": "YulIdentifier",
																			"src": "2386:12:13"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "2386:16:13"
																	},
																	{
																		"name": "dataEnd",
																		"nodeType": "YulIdentifier",
																		"src": "2404:7:13"
																	}
																],
																"functionName": {
																	"name": "abi_decode_available_length_string",
																	"nodeType": "YulIdentifier",
																	"src": "2338:34:13"
																},
																"nodeType": "YulFunctionCall",
																"src": "2338:74:13"
															},
															"variableNames": [
																{
																	"name": "value0",
																	"nodeType": "YulIdentifier",
																	"src": "2328:6:13"
																}
															]
														}
													]
												},
												"name": "abi_decode_tuple_t_string_memory_ptr",
												"nodeType": "YulFunctionDefinition",
												"parameters": [
													{
														"name": "headStart",
														"nodeType": "YulTypedName",
														"src": "2013:9:13",
														"type": ""
													},
													{
														"name": "dataEnd",
														"nodeType": "YulTypedName",
														"src": "2024:7:13",
														"type": ""
													}
												],
												"returnVariables": [
													{
														"name": "value0",
														"nodeType": "YulTypedName",
														"src": "2036:6:13",
														"type": ""
													}
												],
												"src": "1967:451:13"
											},
											{
												"body": {
													"nodeType": "YulBlock",
													"src": "2476:205:13",
													"statements": [
														{
															"nodeType": "YulVariableDeclaration",
															"src": "2486:10:13",
															"value": {
																"kind": "number",
																"nodeType": "YulLiteral",
																"src": "2495:1:13",
																"type": "",
																"value": "0"
															},
															"variables": [
																{
																	"name": "i",
																	"nodeType": "YulTypedName",
																	"src": "2490:1:13",
																	"type": ""
																}
															]
														},
														{
															"body": {
																"nodeType": "YulBlock",
																"src": "2555:63:13",
																"statements": [
																	{
																		"expression": {
																			"arguments": [
																				{
																					"arguments": [
																						{
																							"name": "dst",
																							"nodeType": "YulIdentifier",
																							"src": "2580:3:13"
																						},
																						{
																							"name": "i",
																							"nodeType": "YulIdentifier",
																							"src": "2585:1:13"
																						}
																					],
																					"functionName": {
																						"name": "add",
																						"nodeType": "YulIdentifier",
																						"src": "2576:3:13"
																					},
																					"nodeType": "YulFunctionCall",
																					"src": "2576:11:13"
																				},
																				{
																					"arguments": [
																						{
																							"arguments": [
																								{
																									"name": "src",
																									"nodeType": "YulIdentifier",
																									"src": "2599:3:13"
																								},
																								{
																									"name": "i",
																									"nodeType": "YulIdentifier",
																									"src": "2604:1:13"
																								}
																							],
																							"functionName": {
																								"name": "add",
																								"nodeType": "YulIdentifier",
																								"src": "2595:3:13"
																							},
																							"nodeType": "YulFunctionCall",
																							"src": "2595:11:13"
																						}
																					],
																					"functionName": {
																						"name": "mload",
																						"nodeType": "YulIdentifier",
																						"src": "2589:5:13"
																					},
																					"nodeType": "YulFunctionCall",
																					"src": "2589:18:13"
																				}
																			],
																			"functionName": {
																				"name": "mstore",
																				"nodeType": "YulIdentifier",
																				"src": "2569:6:13"
																			},
																			"nodeType": "YulFunctionCall",
																			"src": "2569:39:13"
																		},
																		"nodeType": "YulExpressionStatement",
																		"src": "2569:39:13"
																	}
																]
															},
															"condition": {
																"arguments": [
																	{
																		"name": "i",
																		"nodeType": "YulIdentifier",
																		"src": "2516:1:13"
																	},
																	{
																		"name": "length",
																		"nodeType": "YulIdentifier",
																		"src": "2519:6:13"
																	}
																],
																"functionName": {
																	"name": "lt",
																	"nodeType": "YulIdentifier",
																	"src": "2513:2:13"
																},
																"nodeType": "YulFunctionCall",
																"src": "2513:13:13"
															},
															"nodeType": "YulForLoop",
															"post": {
																"nodeType": "YulBlock",
																"src": "2527:19:13",
																"statements": [
																	{
																		"nodeType": "YulAssignment",
																		"src": "2529:15:13",
																		"value": {
																			"arguments": [
																				{
																					"name": "i",
																					"nodeType": "YulIdentifier",
																					"src": "2538:1:13"
																				},
																				{
																					"kind": "number",
																					"nodeType": "YulLiteral",
																					"src": "2541:2:13",
																					"type": "",
																					"value": "32"
																				}
																			],
																			"functionName": {
																				"name": "add",
																				"nodeType": "YulIdentifier",
																				"src": "2534:3:13"
																			},
																			"nodeType": "YulFunctionCall",
																			"src": "2534:10:13"
																		},
																		"variableNames": [
																			{
																				"name": "i",
																				"nodeType": "YulIdentifier",
																				"src": "2529:1:13"
																			}
																		]
																	}
																]
															},
															"pre": {
																"nodeType": "YulBlock",
																"src": "2509:3:13",
																"statements": []
															},
															"src": "2505:113:13"
														},
														{
															"body": {
																"nodeType": "YulBlock",
																"src": "2644:31:13",
																"statements": [
																	{
																		"expression": {
																			"arguments": [
																				{
																					"arguments": [
																						{
																							"name": "dst",
																							"nodeType": "YulIdentifier",
																							"src": "2657:3:13"
																						},
																						{
																							"name": "length",
																							"nodeType": "YulIdentifier",
																							"src": "2662:6:13"
																						}
																					],
																					"functionName": {
																						"name": "add",
																						"nodeType": "YulIdentifier",
																						"src": "2653:3:13"
																					},
																					"nodeType": "YulFunctionCall",
																					"src": "2653:16:13"
																				},
																				{
																					"kind": "number",
																					"nodeType": "YulLiteral",
																					"src": "2671:1:13",
																					"type": "",
																					"value": "0"
																				}
																			],
																			"functionName": {
																				"name": "mstore",
																				"nodeType": "YulIdentifier",
																				"src": "2646:6:13"
																			},
																			"nodeType": "YulFunctionCall",
																			"src": "2646:27:13"
																		},
																		"nodeType": "YulExpressionStatement",
																		"src": "2646:27:13"
																	}
																]
															},
															"condition": {
																"arguments": [
																	{
																		"name": "i",
																		"nodeType": "YulIdentifier",
																		"src": "2633:1:13"
																	},
																	{
																		"name": "length",
																		"nodeType": "YulIdentifier",
																		"src": "2636:6:13"
																	}
																],
																"functionName": {
																	"name": "gt",
																	"nodeType": "YulIdentifier",
																	"src": "2630:2:13"
																},
																"nodeType": "YulFunctionCall",
																"src": "2630:13:13"
															},
															"nodeType": "YulIf",
															"src": "2627:48:13"
														}
													]
												},
												"name": "copy_memory_to_memory",
												"nodeType": "YulFunctionDefinition",
												"parameters": [
													{
														"name": "src",
														"nodeType": "YulTypedName",
														"src": "2454:3:13",
														"type": ""
													},
													{
														"name": "dst",
														"nodeType": "YulTypedName",
														"src": "2459:3:13",
														"type": ""
													},
													{
														"name": "length",
														"nodeType": "YulTypedName",
														"src": "2464:6:13",
														"type": ""
													}
												],
												"src": "2423:258:13"
											},
											{
												"body": {
													"nodeType": "YulBlock",
													"src": "2747:208:13",
													"statements": [
														{
															"nodeType": "YulVariableDeclaration",
															"src": "2757:26:13",
															"value": {
																"arguments": [
																	{
																		"name": "value",
																		"nodeType": "YulIdentifier",
																		"src": "2777:5:13"
																	}
																],
																"functionName": {
																	"name": "mload",
																	"nodeType": "YulIdentifier",
																	"src": "2771:5:13"
																},
																"nodeType": "YulFunctionCall",
																"src": "2771:12:13"
															},
															"variables": [
																{
																	"name": "length",
																	"nodeType": "YulTypedName",
																	"src": "2761:6:13",
																	"type": ""
																}
															]
														},
														{
															"expression": {
																"arguments": [
																	{
																		"name": "pos",
																		"nodeType": "YulIdentifier",
																		"src": "2799:3:13"
																	},
																	{
																		"name": "length",
																		"nodeType": "YulIdentifier",
																		"src": "2804:6:13"
																	}
																],
																"functionName": {
																	"name": "mstore",
																	"nodeType": "YulIdentifier",
																	"src": "2792:6:13"
																},
																"nodeType": "YulFunctionCall",
																"src": "2792:19:13"
															},
															"nodeType": "YulExpressionStatement",
															"src": "2792:19:13"
														},
														{
															"expression": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"name": "value",
																				"nodeType": "YulIdentifier",
																				"src": "2846:5:13"
																			},
																			{
																				"kind": "number",
																				"nodeType": "YulLiteral",
																				"src": "2853:4:13",
																				"type": "",
																				"value": "0x20"
																			}
																		],
																		"functionName": {
																			"name": "add",
																			"nodeType": "YulIdentifier",
																			"src": "2842:3:13"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "2842:16:13"
																	},
																	{
																		"arguments": [
																			{
																				"name": "pos",
																				"nodeType": "YulIdentifier",
																				"src": "2864:3:13"
																			},
																			{
																				"kind": "number",
																				"nodeType": "YulLiteral",
																				"src": "2869:4:13",
																				"type": "",
																				"value": "0x20"
																			}
																		],
																		"functionName": {
																			"name": "add",
																			"nodeType": "YulIdentifier",
																			"src": "2860:3:13"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "2860:14:13"
																	},
																	{
																		"name": "length",
																		"nodeType": "YulIdentifier",
																		"src": "2876:6:13"
																	}
																],
																"functionName": {
																	"name": "copy_memory_to_memory",
																	"nodeType": "YulIdentifier",
																	"src": "2820:21:13"
																},
																"nodeType": "YulFunctionCall",
																"src": "2820:63:13"
															},
															"nodeType": "YulExpressionStatement",
															"src": "2820:63:13"
														},
														{
															"nodeType": "YulAssignment",
															"src": "2892:57:13",
															"value": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"name": "pos",
																				"nodeType": "YulIdentifier",
																				"src": "2907:3:13"
																			},
																			{
																				"arguments": [
																					{
																						"arguments": [
																							{
																								"name": "length",
																								"nodeType": "YulIdentifier",
																								"src": "2920:6:13"
																							},
																							{
																								"kind": "number",
																								"nodeType": "YulLiteral",
																								"src": "2928:2:13",
																								"type": "",
																								"value": "31"
																							}
																						],
																						"functionName": {
																							"name": "add",
																							"nodeType": "YulIdentifier",
																							"src": "2916:3:13"
																						},
																						"nodeType": "YulFunctionCall",
																						"src": "2916:15:13"
																					},
																					{
																						"arguments": [
																							{
																								"kind": "number",
																								"nodeType": "YulLiteral",
																								"src": "2937:2:13",
																								"type": "",
																								"value": "31"
																							}
																						],
																						"functionName": {
																							"name": "not",
																							"nodeType": "YulIdentifier",
																							"src": "2933:3:13"
																						},
																						"nodeType": "YulFunctionCall",
																						"src": "2933:7:13"
																					}
																				],
																				"functionName": {
																					"name": "and",
																					"nodeType": "YulIdentifier",
																					"src": "2912:3:13"
																				},
																				"nodeType": "YulFunctionCall",
																				"src": "2912:29:13"
																			}
																		],
																		"functionName": {
																			"name": "add",
																			"nodeType": "YulIdentifier",
																			"src": "2903:3:13"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "2903:39:13"
																	},
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "2944:4:13",
																		"type": "",
																		"value": "0x20"
																	}
																],
																"functionName": {
																	"name": "add",
																	"nodeType": "YulIdentifier",
																	"src": "2899:3:13"
																},
																"nodeType": "YulFunctionCall",
																"src": "2899:50:13"
															},
															"variableNames": [
																{
																	"name": "end",
																	"nodeType": "YulIdentifier",
																	"src": "2892:3:13"
																}
															]
														}
													]
												},
												"name": "abi_encode_string_memory_ptr",
												"nodeType": "YulFunctionDefinition",
												"parameters": [
													{
														"name": "value",
														"nodeType": "YulTypedName",
														"src": "2724:5:13",
														"type": ""
													},
													{
														"name": "pos",
														"nodeType": "YulTypedName",
														"src": "2731:3:13",
														"type": ""
													}
												],
												"returnVariables": [
													{
														"name": "end",
														"nodeType": "YulTypedName",
														"src": "2739:3:13",
														"type": ""
													}
												],
												"src": "2686:269:13"
											},
											{
												"body": {
													"nodeType": "YulBlock",
													"src": "3081:110:13",
													"statements": [
														{
															"expression": {
																"arguments": [
																	{
																		"name": "headStart",
																		"nodeType": "YulIdentifier",
																		"src": "3098:9:13"
																	},
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "3109:2:13",
																		"type": "",
																		"value": "32"
																	}
																],
																"functionName": {
																	"name": "mstore",
																	"nodeType": "YulIdentifier",
																	"src": "3091:6:13"
																},
																"nodeType": "YulFunctionCall",
																"src": "3091:21:13"
															},
															"nodeType": "YulExpressionStatement",
															"src": "3091:21:13"
														},
														{
															"nodeType": "YulAssignment",
															"src": "3121:64:13",
															"value": {
																"arguments": [
																	{
																		"name": "value0",
																		"nodeType": "YulIdentifier",
																		"src": "3158:6:13"
																	},
																	{
																		"arguments": [
																			{
																				"name": "headStart",
																				"nodeType": "YulIdentifier",
																				"src": "3170:9:13"
																			},
																			{
																				"kind": "number",
																				"nodeType": "YulLiteral",
																				"src": "3181:2:13",
																				"type": "",
																				"value": "32"
																			}
																		],
																		"functionName": {
																			"name": "add",
																			"nodeType": "YulIdentifier",
																			"src": "3166:3:13"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "3166:18:13"
																	}
																],
																"functionName": {
																	"name": "abi_encode_string_memory_ptr",
																	"nodeType": "YulIdentifier",
																	"src": "3129:28:13"
																},
																"nodeType": "YulFunctionCall",
																"src": "3129:56:13"
															},
															"variableNames": [
																{
																	"name": "tail",
																	"nodeType": "YulIdentifier",
																	"src": "3121:4:13"
																}
															]
														}
													]
												},
												"name": "abi_encode_tuple_t_string_memory_ptr__to_t_string_memory_ptr__fromStack_reversed",
												"nodeType": "YulFunctionDefinition",
												"parameters": [
													{
														"name": "headStart",
														"nodeType": "YulTypedName",
														"src": "3050:9:13",
														"type": ""
													},
													{
														"name": "value0",
														"nodeType": "YulTypedName",
														"src": "3061:6:13",
														"type": ""
													}
												],
												"returnVariables": [
													{
														"name": "tail",
														"nodeType": "YulTypedName",
														"src": "3072:4:13",
														"type": ""
													}
												],
												"src": "2960:231:13"
											},
											{
												"body": {
													"nodeType": "YulBlock",
													"src": "3266:110:13",
													"statements": [
														{
															"body": {
																"nodeType": "YulBlock",
																"src": "3312:16:13",
																"statements": [
																	{
																		"expression": {
																			"arguments": [
																				{
																					"kind": "number",
																					"nodeType": "YulLiteral",
																					"src": "3321:1:13",
																					"type": "",
																					"value": "0"
																				},
																				{
																					"kind": "number",
																					"nodeType": "YulLiteral",
																					"src": "3324:1:13",
																					"type": "",
																					"value": "0"
																				}
																			],
																			"functionName": {
																				"name": "revert",
																				"nodeType": "YulIdentifier",
																				"src": "3314:6:13"
																			},
																			"nodeType": "YulFunctionCall",
																			"src": "3314:12:13"
																		},
																		"nodeType": "YulExpressionStatement",
																		"src": "3314:12:13"
																	}
																]
															},
															"condition": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"name": "dataEnd",
																				"nodeType": "YulIdentifier",
																				"src": "3287:7:13"
																			},
																			{
																				"name": "headStart",
																				"nodeType": "YulIdentifier",
																				"src": "3296:9:13"
																			}
																		],
																		"functionName": {
																			"name": "sub",
																			"nodeType": "YulIdentifier",
																			"src": "3283:3:13"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "3283:23:13"
																	},
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "3308:2:13",
																		"type": "",
																		"value": "32"
																	}
																],
																"functionName": {
																	"name": "slt",
																	"nodeType": "YulIdentifier",
																	"src": "3279:3:13"
																},
																"nodeType": "YulFunctionCall",
																"src": "3279:32:13"
															},
															"nodeType": "YulIf",
															"src": "3276:52:13"
														},
														{
															"nodeType": "YulAssignment",
															"src": "3337:33:13",
															"value": {
																"arguments": [
																	{
																		"name": "headStart",
																		"nodeType": "YulIdentifier",
																		"src": "3360:9:13"
																	}
																],
																"functionName": {
																	"name": "calldataload",
																	"nodeType": "YulIdentifier",
																	"src": "3347:12:13"
																},
																"nodeType": "YulFunctionCall",
																"src": "3347:23:13"
															},
															"variableNames": [
																{
																	"name": "value0",
																	"nodeType": "YulIdentifier",
																	"src": "3337:6:13"
																}
															]
														}
													]
												},
												"name": "abi_decode_tuple_t_uint256",
												"nodeType": "YulFunctionDefinition",
												"parameters": [
													{
														"name": "headStart",
														"nodeType": "YulTypedName",
														"src": "3232:9:13",
														"type": ""
													},
													{
														"name": "dataEnd",
														"nodeType": "YulTypedName",
														"src": "3243:7:13",
														"type": ""
													}
												],
												"returnVariables": [
													{
														"name": "value0",
														"nodeType": "YulTypedName",
														"src": "3255:6:13",
														"type": ""
													}
												],
												"src": "3196:180:13"
											},
											{
												"body": {
													"nodeType": "YulBlock",
													"src": "3482:102:13",
													"statements": [
														{
															"nodeType": "YulAssignment",
															"src": "3492:26:13",
															"value": {
																"arguments": [
																	{
																		"name": "headStart",
																		"nodeType": "YulIdentifier",
																		"src": "3504:9:13"
																	},
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "3515:2:13",
																		"type": "",
																		"value": "32"
																	}
																],
																"functionName": {
																	"name": "add",
																	"nodeType": "YulIdentifier",
																	"src": "3500:3:13"
																},
																"nodeType": "YulFunctionCall",
																"src": "3500:18:13"
															},
															"variableNames": [
																{
																	"name": "tail",
																	"nodeType": "YulIdentifier",
																	"src": "3492:4:13"
																}
															]
														},
														{
															"expression": {
																"arguments": [
																	{
																		"name": "headStart",
																		"nodeType": "YulIdentifier",
																		"src": "3534:9:13"
																	},
																	{
																		"arguments": [
																			{
																				"name": "value0",
																				"nodeType": "YulIdentifier",
																				"src": "3549:6:13"
																			},
																			{
																				"arguments": [
																					{
																						"arguments": [
																							{
																								"kind": "number",
																								"nodeType": "YulLiteral",
																								"src": "3565:3:13",
																								"type": "",
																								"value": "160"
																							},
																							{
																								"kind": "number",
																								"nodeType": "YulLiteral",
																								"src": "3570:1:13",
																								"type": "",
																								"value": "1"
																							}
																						],
																						"functionName": {
																							"name": "shl",
																							"nodeType": "YulIdentifier",
																							"src": "3561:3:13"
																						},
																						"nodeType": "YulFunctionCall",
																						"src": "3561:11:13"
																					},
																					{
																						"kind": "number",
																						"nodeType": "YulLiteral",
																						"src": "3574:1:13",
																						"type": "",
																						"value": "1"
																					}
																				],
																				"functionName": {
																					"name": "sub",
																					"nodeType": "YulIdentifier",
																					"src": "3557:3:13"
																				},
																				"nodeType": "YulFunctionCall",
																				"src": "3557:19:13"
																			}
																		],
																		"functionName": {
																			"name": "and",
																			"nodeType": "YulIdentifier",
																			"src": "3545:3:13"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "3545:32:13"
																	}
																],
																"functionName": {
																	"name": "mstore",
																	"nodeType": "YulIdentifier",
																	"src": "3527:6:13"
																},
																"nodeType": "YulFunctionCall",
																"src": "3527:51:13"
															},
															"nodeType": "YulExpressionStatement",
															"src": "3527:51:13"
														}
													]
												},
												"name": "abi_encode_tuple_t_address__to_t_address__fromStack_reversed",
												"nodeType": "YulFunctionDefinition",
												"parameters": [
													{
														"name": "headStart",
														"nodeType": "YulTypedName",
														"src": "3451:9:13",
														"type": ""
													},
													{
														"name": "value0",
														"nodeType": "YulTypedName",
														"src": "3462:6:13",
														"type": ""
													}
												],
												"returnVariables": [
													{
														"name": "tail",
														"nodeType": "YulTypedName",
														"src": "3473:4:13",
														"type": ""
													}
												],
												"src": "3381:203:13"
											},
											{
												"body": {
													"nodeType": "YulBlock",
													"src": "3676:167:13",
													"statements": [
														{
															"body": {
																"nodeType": "YulBlock",
																"src": "3722:16:13",
																"statements": [
																	{
																		"expression": {
																			"arguments": [
																				{
																					"kind": "number",
																					"nodeType": "YulLiteral",
																					"src": "3731:1:13",
																					"type": "",
																					"value": "0"
																				},
																				{
																					"kind": "number",
																					"nodeType": "YulLiteral",
																					"src": "3734:1:13",
																					"type": "",
																					"value": "0"
																				}
																			],
																			"functionName": {
																				"name": "revert",
																				"nodeType": "YulIdentifier",
																				"src": "3724:6:13"
																			},
																			"nodeType": "YulFunctionCall",
																			"src": "3724:12:13"
																		},
																		"nodeType": "YulExpressionStatement",
																		"src": "3724:12:13"
																	}
																]
															},
															"condition": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"name": "dataEnd",
																				"nodeType": "YulIdentifier",
																				"src": "3697:7:13"
																			},
																			{
																				"name": "headStart",
																				"nodeType": "YulIdentifier",
																				"src": "3706:9:13"
																			}
																		],
																		"functionName": {
																			"name": "sub",
																			"nodeType": "YulIdentifier",
																			"src": "3693:3:13"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "3693:23:13"
																	},
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "3718:2:13",
																		"type": "",
																		"value": "64"
																	}
																],
																"functionName": {
																	"name": "slt",
																	"nodeType": "YulIdentifier",
																	"src": "3689:3:13"
																},
																"nodeType": "YulFunctionCall",
																"src": "3689:32:13"
															},
															"nodeType": "YulIf",
															"src": "3686:52:13"
														},
														{
															"nodeType": "YulAssignment",
															"src": "3747:39:13",
															"value": {
																"arguments": [
																	{
																		"name": "headStart",
																		"nodeType": "YulIdentifier",
																		"src": "3776:9:13"
																	}
																],
																"functionName": {
																	"name": "abi_decode_address",
																	"nodeType": "YulIdentifier",
																	"src": "3757:18:13"
																},
																"nodeType": "YulFunctionCall",
																"src": "3757:29:13"
															},
															"variableNames": [
																{
																	"name": "value0",
																	"nodeType": "YulIdentifier",
																	"src": "3747:6:13"
																}
															]
														},
														{
															"nodeType": "YulAssignment",
															"src": "3795:42:13",
															"value": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"name": "headStart",
																				"nodeType": "YulIdentifier",
																				"src": "3822:9:13"
																			},
																			{
																				"kind": "number",
																				"nodeType": "YulLiteral",
																				"src": "3833:2:13",
																				"type": "",
																				"value": "32"
																			}
																		],
																		"functionName": {
																			"name": "add",
																			"nodeType": "YulIdentifier",
																			"src": "3818:3:13"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "3818:18:13"
																	}
																],
																"functionName": {
																	"name": "calldataload",
																	"nodeType": "YulIdentifier",
																	"src": "3805:12:13"
																},
																"nodeType": "YulFunctionCall",
																"src": "3805:32:13"
															},
															"variableNames": [
																{
																	"name": "value1",
																	"nodeType": "YulIdentifier",
																	"src": "3795:6:13"
																}
															]
														}
													]
												},
												"name": "abi_decode_tuple_t_addresst_uint256",
												"nodeType": "YulFunctionDefinition",
												"parameters": [
													{
														"name": "headStart",
														"nodeType": "YulTypedName",
														"src": "3634:9:13",
														"type": ""
													},
													{
														"name": "dataEnd",
														"nodeType": "YulTypedName",
														"src": "3645:7:13",
														"type": ""
													}
												],
												"returnVariables": [
													{
														"name": "value0",
														"nodeType": "YulTypedName",
														"src": "3657:6:13",
														"type": ""
													},
													{
														"name": "value1",
														"nodeType": "YulTypedName",
														"src": "3665:6:13",
														"type": ""
													}
												],
												"src": "3589:254:13"
											},
											{
												"body": {
													"nodeType": "YulBlock",
													"src": "3952:224:13",
													"statements": [
														{
															"body": {
																"nodeType": "YulBlock",
																"src": "3998:16:13",
																"statements": [
																	{
																		"expression": {
																			"arguments": [
																				{
																					"kind": "number",
																					"nodeType": "YulLiteral",
																					"src": "4007:1:13",
																					"type": "",
																					"value": "0"
																				},
																				{
																					"kind": "number",
																					"nodeType": "YulLiteral",
																					"src": "4010:1:13",
																					"type": "",
																					"value": "0"
																				}
																			],
																			"functionName": {
																				"name": "revert",
																				"nodeType": "YulIdentifier",
																				"src": "4000:6:13"
																			},
																			"nodeType": "YulFunctionCall",
																			"src": "4000:12:13"
																		},
																		"nodeType": "YulExpressionStatement",
																		"src": "4000:12:13"
																	}
																]
															},
															"condition": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"name": "dataEnd",
																				"nodeType": "YulIdentifier",
																				"src": "3973:7:13"
																			},
																			{
																				"name": "headStart",
																				"nodeType": "YulIdentifier",
																				"src": "3982:9:13"
																			}
																		],
																		"functionName": {
																			"name": "sub",
																			"nodeType": "YulIdentifier",
																			"src": "3969:3:13"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "3969:23:13"
																	},
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "3994:2:13",
																		"type": "",
																		"value": "96"
																	}
																],
																"functionName": {
																	"name": "slt",
																	"nodeType": "YulIdentifier",
																	"src": "3965:3:13"
																},
																"nodeType": "YulFunctionCall",
																"src": "3965:32:13"
															},
															"nodeType": "YulIf",
															"src": "3962:52:13"
														},
														{
															"nodeType": "YulAssignment",
															"src": "4023:39:13",
															"value": {
																"arguments": [
																	{
																		"name": "headStart",
																		"nodeType": "YulIdentifier",
																		"src": "4052:9:13"
																	}
																],
																"functionName": {
																	"name": "abi_decode_address",
																	"nodeType": "YulIdentifier",
																	"src": "4033:18:13"
																},
																"nodeType": "YulFunctionCall",
																"src": "4033:29:13"
															},
															"variableNames": [
																{
																	"name": "value0",
																	"nodeType": "YulIdentifier",
																	"src": "4023:6:13"
																}
															]
														},
														{
															"nodeType": "YulAssignment",
															"src": "4071:48:13",
															"value": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"name": "headStart",
																				"nodeType": "YulIdentifier",
																				"src": "4104:9:13"
																			},
																			{
																				"kind": "number",
																				"nodeType": "YulLiteral",
																				"src": "4115:2:13",
																				"type": "",
																				"value": "32"
																			}
																		],
																		"functionName": {
																			"name": "add",
																			"nodeType": "YulIdentifier",
																			"src": "4100:3:13"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "4100:18:13"
																	}
																],
																"functionName": {
																	"name": "abi_decode_address",
																	"nodeType": "YulIdentifier",
																	"src": "4081:18:13"
																},
																"nodeType": "YulFunctionCall",
																"src": "4081:38:13"
															},
															"variableNames": [
																{
																	"name": "value1",
																	"nodeType": "YulIdentifier",
																	"src": "4071:6:13"
																}
															]
														},
														{
															"nodeType": "YulAssignment",
															"src": "4128:42:13",
															"value": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"name": "headStart",
																				"nodeType": "YulIdentifier",
																				"src": "4155:9:13"
																			},
																			{
																				"kind": "number",
																				"nodeType": "YulLiteral",
																				"src": "4166:2:13",
																				"type": "",
																				"value": "64"
																			}
																		],
																		"functionName": {
																			"name": "add",
																			"nodeType": "YulIdentifier",
																			"src": "4151:3:13"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "4151:18:13"
																	}
																],
																"functionName": {
																	"name": "calldataload",
																	"nodeType": "YulIdentifier",
																	"src": "4138:12:13"
																},
																"nodeType": "YulFunctionCall",
																"src": "4138:32:13"
															},
															"variableNames": [
																{
																	"name": "value2",
																	"nodeType": "YulIdentifier",
																	"src": "4128:6:13"
																}
															]
														}
													]
												},
												"name": "abi_decode_tuple_t_addresst_addresst_uint256",
												"nodeType": "YulFunctionDefinition",
												"parameters": [
													{
														"name": "headStart",
														"nodeType": "YulTypedName",
														"src": "3902:9:13",
														"type": ""
													},
													{
														"name": "dataEnd",
														"nodeType": "YulTypedName",
														"src": "3913:7:13",
														"type": ""
													}
												],
												"returnVariables": [
													{
														"name": "value0",
														"nodeType": "YulTypedName",
														"src": "3925:6:13",
														"type": ""
													},
													{
														"name": "value1",
														"nodeType": "YulTypedName",
														"src": "3933:6:13",
														"type": ""
													},
													{
														"name": "value2",
														"nodeType": "YulTypedName",
														"src": "3941:6:13",
														"type": ""
													}
												],
												"src": "3848:328:13"
											},
											{
												"body": {
													"nodeType": "YulBlock",
													"src": "4293:904:13",
													"statements": [
														{
															"body": {
																"nodeType": "YulBlock",
																"src": "4339:16:13",
																"statements": [
																	{
																		"expression": {
																			"arguments": [
																				{
																					"kind": "number",
																					"nodeType": "YulLiteral",
																					"src": "4348:1:13",
																					"type": "",
																					"value": "0"
																				},
																				{
																					"kind": "number",
																					"nodeType": "YulLiteral",
																					"src": "4351:1:13",
																					"type": "",
																					"value": "0"
																				}
																			],
																			"functionName": {
																				"name": "revert",
																				"nodeType": "YulIdentifier",
																				"src": "4341:6:13"
																			},
																			"nodeType": "YulFunctionCall",
																			"src": "4341:12:13"
																		},
																		"nodeType": "YulExpressionStatement",
																		"src": "4341:12:13"
																	}
																]
															},
															"condition": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"name": "dataEnd",
																				"nodeType": "YulIdentifier",
																				"src": "4314:7:13"
																			},
																			{
																				"name": "headStart",
																				"nodeType": "YulIdentifier",
																				"src": "4323:9:13"
																			}
																		],
																		"functionName": {
																			"name": "sub",
																			"nodeType": "YulIdentifier",
																			"src": "4310:3:13"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "4310:23:13"
																	},
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "4335:2:13",
																		"type": "",
																		"value": "64"
																	}
																],
																"functionName": {
																	"name": "slt",
																	"nodeType": "YulIdentifier",
																	"src": "4306:3:13"
																},
																"nodeType": "YulFunctionCall",
																"src": "4306:32:13"
															},
															"nodeType": "YulIf",
															"src": "4303:52:13"
														},
														{
															"nodeType": "YulVariableDeclaration",
															"src": "4364:37:13",
															"value": {
																"arguments": [
																	{
																		"name": "headStart",
																		"nodeType": "YulIdentifier",
																		"src": "4391:9:13"
																	}
																],
																"functionName": {
																	"name": "calldataload",
																	"nodeType": "YulIdentifier",
																	"src": "4378:12:13"
																},
																"nodeType": "YulFunctionCall",
																"src": "4378:23:13"
															},
															"variables": [
																{
																	"name": "offset",
																	"nodeType": "YulTypedName",
																	"src": "4368:6:13",
																	"type": ""
																}
															]
														},
														{
															"nodeType": "YulVariableDeclaration",
															"src": "4410:28:13",
															"value": {
																"kind": "number",
																"nodeType": "YulLiteral",
																"src": "4420:18:13",
																"type": "",
																"value": "0xffffffffffffffff"
															},
															"variables": [
																{
																	"name": "_1",
																	"nodeType": "YulTypedName",
																	"src": "4414:2:13",
																	"type": ""
																}
															]
														},
														{
															"body": {
																"nodeType": "YulBlock",
																"src": "4465:16:13",
																"statements": [
																	{
																		"expression": {
																			"arguments": [
																				{
																					"kind": "number",
																					"nodeType": "YulLiteral",
																					"src": "4474:1:13",
																					"type": "",
																					"value": "0"
																				},
																				{
																					"kind": "number",
																					"nodeType": "YulLiteral",
																					"src": "4477:1:13",
																					"type": "",
																					"value": "0"
																				}
																			],
																			"functionName": {
																				"name": "revert",
																				"nodeType": "YulIdentifier",
																				"src": "4467:6:13"
																			},
																			"nodeType": "YulFunctionCall",
																			"src": "4467:12:13"
																		},
																		"nodeType": "YulExpressionStatement",
																		"src": "4467:12:13"
																	}
																]
															},
															"condition": {
																"arguments": [
																	{
																		"name": "offset",
																		"nodeType": "YulIdentifier",
																		"src": "4453:6:13"
																	},
																	{
																		"name": "_1",
																		"nodeType": "YulIdentifier",
																		"src": "4461:2:13"
																	}
																],
																"functionName": {
																	"name": "gt",
																	"nodeType": "YulIdentifier",
																	"src": "4450:2:13"
																},
																"nodeType": "YulFunctionCall",
																"src": "4450:14:13"
															},
															"nodeType": "YulIf",
															"src": "4447:34:13"
														},
														{
															"nodeType": "YulVariableDeclaration",
															"src": "4490:32:13",
															"value": {
																"arguments": [
																	{
																		"name": "headStart",
																		"nodeType": "YulIdentifier",
																		"src": "4504:9:13"
																	},
																	{
																		"name": "offset",
																		"nodeType": "YulIdentifier",
																		"src": "4515:6:13"
																	}
																],
																"functionName": {
																	"name": "add",
																	"nodeType": "YulIdentifier",
																	"src": "4500:3:13"
																},
																"nodeType": "YulFunctionCall",
																"src": "4500:22:13"
															},
															"variables": [
																{
																	"name": "_2",
																	"nodeType": "YulTypedName",
																	"src": "4494:2:13",
																	"type": ""
																}
															]
														},
														{
															"body": {
																"nodeType": "YulBlock",
																"src": "4570:16:13",
																"statements": [
																	{
																		"expression": {
																			"arguments": [
																				{
																					"kind": "number",
																					"nodeType": "YulLiteral",
																					"src": "4579:1:13",
																					"type": "",
																					"value": "0"
																				},
																				{
																					"kind": "number",
																					"nodeType": "YulLiteral",
																					"src": "4582:1:13",
																					"type": "",
																					"value": "0"
																				}
																			],
																			"functionName": {
																				"name": "revert",
																				"nodeType": "YulIdentifier",
																				"src": "4572:6:13"
																			},
																			"nodeType": "YulFunctionCall",
																			"src": "4572:12:13"
																		},
																		"nodeType": "YulExpressionStatement",
																		"src": "4572:12:13"
																	}
																]
															},
															"condition": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"arguments": [
																					{
																						"name": "_2",
																						"nodeType": "YulIdentifier",
																						"src": "4549:2:13"
																					},
																					{
																						"kind": "number",
																						"nodeType": "YulLiteral",
																						"src": "4553:4:13",
																						"type": "",
																						"value": "0x1f"
																					}
																				],
																				"functionName": {
																					"name": "add",
																					"nodeType": "YulIdentifier",
																					"src": "4545:3:13"
																				},
																				"nodeType": "YulFunctionCall",
																				"src": "4545:13:13"
																			},
																			{
																				"name": "dataEnd",
																				"nodeType": "YulIdentifier",
																				"src": "4560:7:13"
																			}
																		],
																		"functionName": {
																			"name": "slt",
																			"nodeType": "YulIdentifier",
																			"src": "4541:3:13"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "4541:27:13"
																	}
																],
																"functionName": {
																	"name": "iszero",
																	"nodeType": "YulIdentifier",
																	"src": "4534:6:13"
																},
																"nodeType": "YulFunctionCall",
																"src": "4534:35:13"
															},
															"nodeType": "YulIf",
															"src": "4531:55:13"
														},
														{
															"nodeType": "YulVariableDeclaration",
															"src": "4595:26:13",
															"value": {
																"arguments": [
																	{
																		"name": "_2",
																		"nodeType": "YulIdentifier",
																		"src": "4618:2:13"
																	}
																],
																"functionName": {
																	"name": "calldataload",
																	"nodeType": "YulIdentifier",
																	"src": "4605:12:13"
																},
																"nodeType": "YulFunctionCall",
																"src": "4605:16:13"
															},
															"variables": [
																{
																	"name": "_3",
																	"nodeType": "YulTypedName",
																	"src": "4599:2:13",
																	"type": ""
																}
															]
														},
														{
															"nodeType": "YulVariableDeclaration",
															"src": "4630:14:13",
															"value": {
																"kind": "number",
																"nodeType": "YulLiteral",
																"src": "4640:4:13",
																"type": "",
																"value": "0x20"
															},
															"variables": [
																{
																	"name": "_4",
																	"nodeType": "YulTypedName",
																	"src": "4634:2:13",
																	"type": ""
																}
															]
														},
														{
															"body": {
																"nodeType": "YulBlock",
																"src": "4667:22:13",
																"statements": [
																	{
																		"expression": {
																			"arguments": [],
																			"functionName": {
																				"name": "panic_error_0x41",
																				"nodeType": "YulIdentifier",
																				"src": "4669:16:13"
																			},
																			"nodeType": "YulFunctionCall",
																			"src": "4669:18:13"
																		},
																		"nodeType": "YulExpressionStatement",
																		"src": "4669:18:13"
																	}
																]
															},
															"condition": {
																"arguments": [
																	{
																		"name": "_3",
																		"nodeType": "YulIdentifier",
																		"src": "4659:2:13"
																	},
																	{
																		"name": "_1",
																		"nodeType": "YulIdentifier",
																		"src": "4663:2:13"
																	}
																],
																"functionName": {
																	"name": "gt",
																	"nodeType": "YulIdentifier",
																	"src": "4656:2:13"
																},
																"nodeType": "YulFunctionCall",
																"src": "4656:10:13"
															},
															"nodeType": "YulIf",
															"src": "4653:36:13"
														},
														{
															"nodeType": "YulVariableDeclaration",
															"src": "4698:20:13",
															"value": {
																"arguments": [
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "4712:1:13",
																		"type": "",
																		"value": "5"
																	},
																	{
																		"name": "_3",
																		"nodeType": "YulIdentifier",
																		"src": "4715:2:13"
																	}
																],
																"functionName": {
																	"name": "shl",
																	"nodeType": "YulIdentifier",
																	"src": "4708:3:13"
																},
																"nodeType": "YulFunctionCall",
																"src": "4708:10:13"
															},
															"variables": [
																{
																	"name": "_5",
																	"nodeType": "YulTypedName",
																	"src": "4702:2:13",
																	"type": ""
																}
															]
														},
														{
															"nodeType": "YulVariableDeclaration",
															"src": "4727:39:13",
															"value": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"name": "_5",
																				"nodeType": "YulIdentifier",
																				"src": "4758:2:13"
																			},
																			{
																				"name": "_4",
																				"nodeType": "YulIdentifier",
																				"src": "4762:2:13"
																			}
																		],
																		"functionName": {
																			"name": "add",
																			"nodeType": "YulIdentifier",
																			"src": "4754:3:13"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "4754:11:13"
																	}
																],
																"functionName": {
																	"name": "allocate_memory",
																	"nodeType": "YulIdentifier",
																	"src": "4738:15:13"
																},
																"nodeType": "YulFunctionCall",
																"src": "4738:28:13"
															},
															"variables": [
																{
																	"name": "dst",
																	"nodeType": "YulTypedName",
																	"src": "4731:3:13",
																	"type": ""
																}
															]
														},
														{
															"nodeType": "YulVariableDeclaration",
															"src": "4775:16:13",
															"value": {
																"name": "dst",
																"nodeType": "YulIdentifier",
																"src": "4788:3:13"
															},
															"variables": [
																{
																	"name": "dst_1",
																	"nodeType": "YulTypedName",
																	"src": "4779:5:13",
																	"type": ""
																}
															]
														},
														{
															"expression": {
																"arguments": [
																	{
																		"name": "dst",
																		"nodeType": "YulIdentifier",
																		"src": "4807:3:13"
																	},
																	{
																		"name": "_3",
																		"nodeType": "YulIdentifier",
																		"src": "4812:2:13"
																	}
																],
																"functionName": {
																	"name": "mstore",
																	"nodeType": "YulIdentifier",
																	"src": "4800:6:13"
																},
																"nodeType": "YulFunctionCall",
																"src": "4800:15:13"
															},
															"nodeType": "YulExpressionStatement",
															"src": "4800:15:13"
														},
														{
															"nodeType": "YulAssignment",
															"src": "4824:19:13",
															"value": {
																"arguments": [
																	{
																		"name": "dst",
																		"nodeType": "YulIdentifier",
																		"src": "4835:3:13"
																	},
																	{
																		"name": "_4",
																		"nodeType": "YulIdentifier",
																		"src": "4840:2:13"
																	}
																],
																"functionName": {
																	"name": "add",
																	"nodeType": "YulIdentifier",
																	"src": "4831:3:13"
																},
																"nodeType": "YulFunctionCall",
																"src": "4831:12:13"
															},
															"variableNames": [
																{
																	"name": "dst",
																	"nodeType": "YulIdentifier",
																	"src": "4824:3:13"
																}
															]
														},
														{
															"nodeType": "YulVariableDeclaration",
															"src": "4852:34:13",
															"value": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"name": "_2",
																				"nodeType": "YulIdentifier",
																				"src": "4874:2:13"
																			},
																			{
																				"name": "_5",
																				"nodeType": "YulIdentifier",
																				"src": "4878:2:13"
																			}
																		],
																		"functionName": {
																			"name": "add",
																			"nodeType": "YulIdentifier",
																			"src": "4870:3:13"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "4870:11:13"
																	},
																	{
																		"name": "_4",
																		"nodeType": "YulIdentifier",
																		"src": "4883:2:13"
																	}
																],
																"functionName": {
																	"name": "add",
																	"nodeType": "YulIdentifier",
																	"src": "4866:3:13"
																},
																"nodeType": "YulFunctionCall",
																"src": "4866:20:13"
															},
															"variables": [
																{
																	"name": "srcEnd",
																	"nodeType": "YulTypedName",
																	"src": "4856:6:13",
																	"type": ""
																}
															]
														},
														{
															"body": {
																"nodeType": "YulBlock",
																"src": "4918:16:13",
																"statements": [
																	{
																		"expression": {
																			"arguments": [
																				{
																					"kind": "number",
																					"nodeType": "YulLiteral",
																					"src": "4927:1:13",
																					"type": "",
																					"value": "0"
																				},
																				{
																					"kind": "number",
																					"nodeType": "YulLiteral",
																					"src": "4930:1:13",
																					"type": "",
																					"value": "0"
																				}
																			],
																			"functionName": {
																				"name": "revert",
																				"nodeType": "YulIdentifier",
																				"src": "4920:6:13"
																			},
																			"nodeType": "YulFunctionCall",
																			"src": "4920:12:13"
																		},
																		"nodeType": "YulExpressionStatement",
																		"src": "4920:12:13"
																	}
																]
															},
															"condition": {
																"arguments": [
																	{
																		"name": "srcEnd",
																		"nodeType": "YulIdentifier",
																		"src": "4901:6:13"
																	},
																	{
																		"name": "dataEnd",
																		"nodeType": "YulIdentifier",
																		"src": "4909:7:13"
																	}
																],
																"functionName": {
																	"name": "gt",
																	"nodeType": "YulIdentifier",
																	"src": "4898:2:13"
																},
																"nodeType": "YulFunctionCall",
																"src": "4898:19:13"
															},
															"nodeType": "YulIf",
															"src": "4895:39:13"
														},
														{
															"nodeType": "YulVariableDeclaration",
															"src": "4943:22:13",
															"value": {
																"arguments": [
																	{
																		"name": "_2",
																		"nodeType": "YulIdentifier",
																		"src": "4958:2:13"
																	},
																	{
																		"name": "_4",
																		"nodeType": "YulIdentifier",
																		"src": "4962:2:13"
																	}
																],
																"functionName": {
																	"name": "add",
																	"nodeType": "YulIdentifier",
																	"src": "4954:3:13"
																},
																"nodeType": "YulFunctionCall",
																"src": "4954:11:13"
															},
															"variables": [
																{
																	"name": "src",
																	"nodeType": "YulTypedName",
																	"src": "4947:3:13",
																	"type": ""
																}
															]
														},
														{
															"body": {
																"nodeType": "YulBlock",
																"src": "5030:86:13",
																"statements": [
																	{
																		"expression": {
																			"arguments": [
																				{
																					"name": "dst",
																					"nodeType": "YulIdentifier",
																					"src": "5051:3:13"
																				},
																				{
																					"arguments": [
																						{
																							"name": "src",
																							"nodeType": "YulIdentifier",
																							"src": "5069:3:13"
																						}
																					],
																					"functionName": {
																						"name": "calldataload",
																						"nodeType": "YulIdentifier",
																						"src": "5056:12:13"
																					},
																					"nodeType": "YulFunctionCall",
																					"src": "5056:17:13"
																				}
																			],
																			"functionName": {
																				"name": "mstore",
																				"nodeType": "YulIdentifier",
																				"src": "5044:6:13"
																			},
																			"nodeType": "YulFunctionCall",
																			"src": "5044:30:13"
																		},
																		"nodeType": "YulExpressionStatement",
																		"src": "5044:30:13"
																	},
																	{
																		"nodeType": "YulAssignment",
																		"src": "5087:19:13",
																		"value": {
																			"arguments": [
																				{
																					"name": "dst",
																					"nodeType": "YulIdentifier",
																					"src": "5098:3:13"
																				},
																				{
																					"name": "_4",
																					"nodeType": "YulIdentifier",
																					"src": "5103:2:13"
																				}
																			],
																			"functionName": {
																				"name": "add",
																				"nodeType": "YulIdentifier",
																				"src": "5094:3:13"
																			},
																			"nodeType": "YulFunctionCall",
																			"src": "5094:12:13"
																		},
																		"variableNames": [
																			{
																				"name": "dst",
																				"nodeType": "YulIdentifier",
																				"src": "5087:3:13"
																			}
																		]
																	}
																]
															},
															"condition": {
																"arguments": [
																	{
																		"name": "src",
																		"nodeType": "YulIdentifier",
																		"src": "4985:3:13"
																	},
																	{
																		"name": "srcEnd",
																		"nodeType": "YulIdentifier",
																		"src": "4990:6:13"
																	}
																],
																"functionName": {
																	"name": "lt",
																	"nodeType": "YulIdentifier",
																	"src": "4982:2:13"
																},
																"nodeType": "YulFunctionCall",
																"src": "4982:15:13"
															},
															"nodeType": "YulForLoop",
															"post": {
																"nodeType": "YulBlock",
																"src": "4998:23:13",
																"statements": [
																	{
																		"nodeType": "YulAssignment",
																		"src": "5000:19:13",
																		"value": {
																			"arguments": [
																				{
																					"name": "src",
																					"nodeType": "YulIdentifier",
																					"src": "5011:3:13"
																				},
																				{
																					"name": "_4",
																					"nodeType": "YulIdentifier",
																					"src": "5016:2:13"
																				}
																			],
																			"functionName": {
																				"name": "add",
																				"nodeType": "YulIdentifier",
																				"src": "5007:3:13"
																			},
																			"nodeType": "YulFunctionCall",
																			"src": "5007:12:13"
																		},
																		"variableNames": [
																			{
																				"name": "src",
																				"nodeType": "YulIdentifier",
																				"src": "5000:3:13"
																			}
																		]
																	}
																]
															},
															"pre": {
																"nodeType": "YulBlock",
																"src": "4978:3:13",
																"statements": []
															},
															"src": "4974:142:13"
														},
														{
															"nodeType": "YulAssignment",
															"src": "5125:15:13",
															"value": {
																"name": "dst_1",
																"nodeType": "YulIdentifier",
																"src": "5135:5:13"
															},
															"variableNames": [
																{
																	"name": "value0",
																	"nodeType": "YulIdentifier",
																	"src": "5125:6:13"
																}
															]
														},
														{
															"nodeType": "YulAssignment",
															"src": "5149:42:13",
															"value": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"name": "headStart",
																				"nodeType": "YulIdentifier",
																				"src": "5176:9:13"
																			},
																			{
																				"name": "_4",
																				"nodeType": "YulIdentifier",
																				"src": "5187:2:13"
																			}
																		],
																		"functionName": {
																			"name": "add",
																			"nodeType": "YulIdentifier",
																			"src": "5172:3:13"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "5172:18:13"
																	}
																],
																"functionName": {
																	"name": "calldataload",
																	"nodeType": "YulIdentifier",
																	"src": "5159:12:13"
																},
																"nodeType": "YulFunctionCall",
																"src": "5159:32:13"
															},
															"variableNames": [
																{
																	"name": "value1",
																	"nodeType": "YulIdentifier",
																	"src": "5149:6:13"
																}
															]
														}
													]
												},
												"name": "abi_decode_tuple_t_array$_t_bytes32_$dyn_memory_ptrt_uint256",
												"nodeType": "YulFunctionDefinition",
												"parameters": [
													{
														"name": "headStart",
														"nodeType": "YulTypedName",
														"src": "4251:9:13",
														"type": ""
													},
													{
														"name": "dataEnd",
														"nodeType": "YulTypedName",
														"src": "4262:7:13",
														"type": ""
													}
												],
												"returnVariables": [
													{
														"name": "value0",
														"nodeType": "YulTypedName",
														"src": "4274:6:13",
														"type": ""
													},
													{
														"name": "value1",
														"nodeType": "YulTypedName",
														"src": "4282:6:13",
														"type": ""
													}
												],
												"src": "4181:1016:13"
											},
											{
												"body": {
													"nodeType": "YulBlock",
													"src": "5303:76:13",
													"statements": [
														{
															"nodeType": "YulAssignment",
															"src": "5313:26:13",
															"value": {
																"arguments": [
																	{
																		"name": "headStart",
																		"nodeType": "YulIdentifier",
																		"src": "5325:9:13"
																	},
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "5336:2:13",
																		"type": "",
																		"value": "32"
																	}
																],
																"functionName": {
																	"name": "add",
																	"nodeType": "YulIdentifier",
																	"src": "5321:3:13"
																},
																"nodeType": "YulFunctionCall",
																"src": "5321:18:13"
															},
															"variableNames": [
																{
																	"name": "tail",
																	"nodeType": "YulIdentifier",
																	"src": "5313:4:13"
																}
															]
														},
														{
															"expression": {
																"arguments": [
																	{
																		"name": "headStart",
																		"nodeType": "YulIdentifier",
																		"src": "5355:9:13"
																	},
																	{
																		"name": "value0",
																		"nodeType": "YulIdentifier",
																		"src": "5366:6:13"
																	}
																],
																"functionName": {
																	"name": "mstore",
																	"nodeType": "YulIdentifier",
																	"src": "5348:6:13"
																},
																"nodeType": "YulFunctionCall",
																"src": "5348:25:13"
															},
															"nodeType": "YulExpressionStatement",
															"src": "5348:25:13"
														}
													]
												},
												"name": "abi_encode_tuple_t_bytes32__to_t_bytes32__fromStack_reversed",
												"nodeType": "YulFunctionDefinition",
												"parameters": [
													{
														"name": "headStart",
														"nodeType": "YulTypedName",
														"src": "5272:9:13",
														"type": ""
													},
													{
														"name": "value0",
														"nodeType": "YulTypedName",
														"src": "5283:6:13",
														"type": ""
													}
												],
												"returnVariables": [
													{
														"name": "tail",
														"nodeType": "YulTypedName",
														"src": "5294:4:13",
														"type": ""
													}
												],
												"src": "5202:177:13"
											},
											{
												"body": {
													"nodeType": "YulBlock",
													"src": "5454:110:13",
													"statements": [
														{
															"body": {
																"nodeType": "YulBlock",
																"src": "5500:16:13",
																"statements": [
																	{
																		"expression": {
																			"arguments": [
																				{
																					"kind": "number",
																					"nodeType": "YulLiteral",
																					"src": "5509:1:13",
																					"type": "",
																					"value": "0"
																				},
																				{
																					"kind": "number",
																					"nodeType": "YulLiteral",
																					"src": "5512:1:13",
																					"type": "",
																					"value": "0"
																				}
																			],
																			"functionName": {
																				"name": "revert",
																				"nodeType": "YulIdentifier",
																				"src": "5502:6:13"
																			},
																			"nodeType": "YulFunctionCall",
																			"src": "5502:12:13"
																		},
																		"nodeType": "YulExpressionStatement",
																		"src": "5502:12:13"
																	}
																]
															},
															"condition": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"name": "dataEnd",
																				"nodeType": "YulIdentifier",
																				"src": "5475:7:13"
																			},
																			{
																				"name": "headStart",
																				"nodeType": "YulIdentifier",
																				"src": "5484:9:13"
																			}
																		],
																		"functionName": {
																			"name": "sub",
																			"nodeType": "YulIdentifier",
																			"src": "5471:3:13"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "5471:23:13"
																	},
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "5496:2:13",
																		"type": "",
																		"value": "32"
																	}
																],
																"functionName": {
																	"name": "slt",
																	"nodeType": "YulIdentifier",
																	"src": "5467:3:13"
																},
																"nodeType": "YulFunctionCall",
																"src": "5467:32:13"
															},
															"nodeType": "YulIf",
															"src": "5464:52:13"
														},
														{
															"nodeType": "YulAssignment",
															"src": "5525:33:13",
															"value": {
																"arguments": [
																	{
																		"name": "headStart",
																		"nodeType": "YulIdentifier",
																		"src": "5548:9:13"
																	}
																],
																"functionName": {
																	"name": "calldataload",
																	"nodeType": "YulIdentifier",
																	"src": "5535:12:13"
																},
																"nodeType": "YulFunctionCall",
																"src": "5535:23:13"
															},
															"variableNames": [
																{
																	"name": "value0",
																	"nodeType": "YulIdentifier",
																	"src": "5525:6:13"
																}
															]
														}
													]
												},
												"name": "abi_decode_tuple_t_bytes32",
												"nodeType": "YulFunctionDefinition",
												"parameters": [
													{
														"name": "headStart",
														"nodeType": "YulTypedName",
														"src": "5420:9:13",
														"type": ""
													},
													{
														"name": "dataEnd",
														"nodeType": "YulTypedName",
														"src": "5431:7:13",
														"type": ""
													}
												],
												"returnVariables": [
													{
														"name": "value0",
														"nodeType": "YulTypedName",
														"src": "5443:6:13",
														"type": ""
													}
												],
												"src": "5384:180:13"
											},
											{
												"body": {
													"nodeType": "YulBlock",
													"src": "5720:481:13",
													"statements": [
														{
															"nodeType": "YulVariableDeclaration",
															"src": "5730:12:13",
															"value": {
																"kind": "number",
																"nodeType": "YulLiteral",
																"src": "5740:2:13",
																"type": "",
																"value": "32"
															},
															"variables": [
																{
																	"name": "_1",
																	"nodeType": "YulTypedName",
																	"src": "5734:2:13",
																	"type": ""
																}
															]
														},
														{
															"nodeType": "YulVariableDeclaration",
															"src": "5751:32:13",
															"value": {
																"arguments": [
																	{
																		"name": "headStart",
																		"nodeType": "YulIdentifier",
																		"src": "5769:9:13"
																	},
																	{
																		"name": "_1",
																		"nodeType": "YulIdentifier",
																		"src": "5780:2:13"
																	}
																],
																"functionName": {
																	"name": "add",
																	"nodeType": "YulIdentifier",
																	"src": "5765:3:13"
																},
																"nodeType": "YulFunctionCall",
																"src": "5765:18:13"
															},
															"variables": [
																{
																	"name": "tail_1",
																	"nodeType": "YulTypedName",
																	"src": "5755:6:13",
																	"type": ""
																}
															]
														},
														{
															"expression": {
																"arguments": [
																	{
																		"name": "headStart",
																		"nodeType": "YulIdentifier",
																		"src": "5799:9:13"
																	},
																	{
																		"name": "_1",
																		"nodeType": "YulIdentifier",
																		"src": "5810:2:13"
																	}
																],
																"functionName": {
																	"name": "mstore",
																	"nodeType": "YulIdentifier",
																	"src": "5792:6:13"
																},
																"nodeType": "YulFunctionCall",
																"src": "5792:21:13"
															},
															"nodeType": "YulExpressionStatement",
															"src": "5792:21:13"
														},
														{
															"nodeType": "YulVariableDeclaration",
															"src": "5822:17:13",
															"value": {
																"name": "tail_1",
																"nodeType": "YulIdentifier",
																"src": "5833:6:13"
															},
															"variables": [
																{
																	"name": "pos",
																	"nodeType": "YulTypedName",
																	"src": "5826:3:13",
																	"type": ""
																}
															]
														},
														{
															"nodeType": "YulVariableDeclaration",
															"src": "5848:27:13",
															"value": {
																"arguments": [
																	{
																		"name": "value0",
																		"nodeType": "YulIdentifier",
																		"src": "5868:6:13"
																	}
																],
																"functionName": {
																	"name": "mload",
																	"nodeType": "YulIdentifier",
																	"src": "5862:5:13"
																},
																"nodeType": "YulFunctionCall",
																"src": "5862:13:13"
															},
															"variables": [
																{
																	"name": "length",
																	"nodeType": "YulTypedName",
																	"src": "5852:6:13",
																	"type": ""
																}
															]
														},
														{
															"expression": {
																"arguments": [
																	{
																		"name": "tail_1",
																		"nodeType": "YulIdentifier",
																		"src": "5891:6:13"
																	},
																	{
																		"name": "length",
																		"nodeType": "YulIdentifier",
																		"src": "5899:6:13"
																	}
																],
																"functionName": {
																	"name": "mstore",
																	"nodeType": "YulIdentifier",
																	"src": "5884:6:13"
																},
																"nodeType": "YulFunctionCall",
																"src": "5884:22:13"
															},
															"nodeType": "YulExpressionStatement",
															"src": "5884:22:13"
														},
														{
															"nodeType": "YulAssignment",
															"src": "5915:25:13",
															"value": {
																"arguments": [
																	{
																		"name": "headStart",
																		"nodeType": "YulIdentifier",
																		"src": "5926:9:13"
																	},
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "5937:2:13",
																		"type": "",
																		"value": "64"
																	}
																],
																"functionName": {
																	"name": "add",
																	"nodeType": "YulIdentifier",
																	"src": "5922:3:13"
																},
																"nodeType": "YulFunctionCall",
																"src": "5922:18:13"
															},
															"variableNames": [
																{
																	"name": "pos",
																	"nodeType": "YulIdentifier",
																	"src": "5915:3:13"
																}
															]
														},
														{
															"nodeType": "YulVariableDeclaration",
															"src": "5949:29:13",
															"value": {
																"arguments": [
																	{
																		"name": "value0",
																		"nodeType": "YulIdentifier",
																		"src": "5967:6:13"
																	},
																	{
																		"name": "_1",
																		"nodeType": "YulIdentifier",
																		"src": "5975:2:13"
																	}
																],
																"functionName": {
																	"name": "add",
																	"nodeType": "YulIdentifier",
																	"src": "5963:3:13"
																},
																"nodeType": "YulFunctionCall",
																"src": "5963:15:13"
															},
															"variables": [
																{
																	"name": "srcPtr",
																	"nodeType": "YulTypedName",
																	"src": "5953:6:13",
																	"type": ""
																}
															]
														},
														{
															"nodeType": "YulVariableDeclaration",
															"src": "5987:10:13",
															"value": {
																"kind": "number",
																"nodeType": "YulLiteral",
																"src": "5996:1:13",
																"type": "",
																"value": "0"
															},
															"variables": [
																{
																	"name": "i",
																	"nodeType": "YulTypedName",
																	"src": "5991:1:13",
																	"type": ""
																}
															]
														},
														{
															"body": {
																"nodeType": "YulBlock",
																"src": "6055:120:13",
																"statements": [
																	{
																		"expression": {
																			"arguments": [
																				{
																					"name": "pos",
																					"nodeType": "YulIdentifier",
																					"src": "6076:3:13"
																				},
																				{
																					"arguments": [
																						{
																							"name": "srcPtr",
																							"nodeType": "YulIdentifier",
																							"src": "6087:6:13"
																						}
																					],
																					"functionName": {
																						"name": "mload",
																						"nodeType": "YulIdentifier",
																						"src": "6081:5:13"
																					},
																					"nodeType": "YulFunctionCall",
																					"src": "6081:13:13"
																				}
																			],
																			"functionName": {
																				"name": "mstore",
																				"nodeType": "YulIdentifier",
																				"src": "6069:6:13"
																			},
																			"nodeType": "YulFunctionCall",
																			"src": "6069:26:13"
																		},
																		"nodeType": "YulExpressionStatement",
																		"src": "6069:26:13"
																	},
																	{
																		"nodeType": "YulAssignment",
																		"src": "6108:19:13",
																		"value": {
																			"arguments": [
																				{
																					"name": "pos",
																					"nodeType": "YulIdentifier",
																					"src": "6119:3:13"
																				},
																				{
																					"name": "_1",
																					"nodeType": "YulIdentifier",
																					"src": "6124:2:13"
																				}
																			],
																			"functionName": {
																				"name": "add",
																				"nodeType": "YulIdentifier",
																				"src": "6115:3:13"
																			},
																			"nodeType": "YulFunctionCall",
																			"src": "6115:12:13"
																		},
																		"variableNames": [
																			{
																				"name": "pos",
																				"nodeType": "YulIdentifier",
																				"src": "6108:3:13"
																			}
																		]
																	},
																	{
																		"nodeType": "YulAssignment",
																		"src": "6140:25:13",
																		"value": {
																			"arguments": [
																				{
																					"name": "srcPtr",
																					"nodeType": "YulIdentifier",
																					"src": "6154:6:13"
																				},
																				{
																					"name": "_1",
																					"nodeType": "YulIdentifier",
																					"src": "6162:2:13"
																				}
																			],
																			"functionName": {
																				"name": "add",
																				"nodeType": "YulIdentifier",
																				"src": "6150:3:13"
																			},
																			"nodeType": "YulFunctionCall",
																			"src": "6150:15:13"
																		},
																		"variableNames": [
																			{
																				"name": "srcPtr",
																				"nodeType": "YulIdentifier",
																				"src": "6140:6:13"
																			}
																		]
																	}
																]
															},
															"condition": {
																"arguments": [
																	{
																		"name": "i",
																		"nodeType": "YulIdentifier",
																		"src": "6017:1:13"
																	},
																	{
																		"name": "length",
																		"nodeType": "YulIdentifier",
																		"src": "6020:6:13"
																	}
																],
																"functionName": {
																	"name": "lt",
																	"nodeType": "YulIdentifier",
																	"src": "6014:2:13"
																},
																"nodeType": "YulFunctionCall",
																"src": "6014:13:13"
															},
															"nodeType": "YulForLoop",
															"post": {
																"nodeType": "YulBlock",
																"src": "6028:18:13",
																"statements": [
																	{
																		"nodeType": "YulAssignment",
																		"src": "6030:14:13",
																		"value": {
																			"arguments": [
																				{
																					"name": "i",
																					"nodeType": "YulIdentifier",
																					"src": "6039:1:13"
																				},
																				{
																					"kind": "number",
																					"nodeType": "YulLiteral",
																					"src": "6042:1:13",
																					"type": "",
																					"value": "1"
																				}
																			],
																			"functionName": {
																				"name": "add",
																				"nodeType": "YulIdentifier",
																				"src": "6035:3:13"
																			},
																			"nodeType": "YulFunctionCall",
																			"src": "6035:9:13"
																		},
																		"variableNames": [
																			{
																				"name": "i",
																				"nodeType": "YulIdentifier",
																				"src": "6030:1:13"
																			}
																		]
																	}
																]
															},
															"pre": {
																"nodeType": "YulBlock",
																"src": "6010:3:13",
																"statements": []
															},
															"src": "6006:169:13"
														},
														{
															"nodeType": "YulAssignment",
															"src": "6184:11:13",
															"value": {
																"name": "pos",
																"nodeType": "YulIdentifier",
																"src": "6192:3:13"
															},
															"variableNames": [
																{
																	"name": "tail",
																	"nodeType": "YulIdentifier",
																	"src": "6184:4:13"
																}
															]
														}
													]
												},
												"name": "abi_encode_tuple_t_array$_t_uint256_$dyn_memory_ptr__to_t_array$_t_uint256_$dyn_memory_ptr__fromStack_reversed",
												"nodeType": "YulFunctionDefinition",
												"parameters": [
													{
														"name": "headStart",
														"nodeType": "YulTypedName",
														"src": "5689:9:13",
														"type": ""
													},
													{
														"name": "value0",
														"nodeType": "YulTypedName",
														"src": "5700:6:13",
														"type": ""
													}
												],
												"returnVariables": [
													{
														"name": "tail",
														"nodeType": "YulTypedName",
														"src": "5711:4:13",
														"type": ""
													}
												],
												"src": "5569:632:13"
											},
											{
												"body": {
													"nodeType": "YulBlock",
													"src": "6290:263:13",
													"statements": [
														{
															"body": {
																"nodeType": "YulBlock",
																"src": "6336:16:13",
																"statements": [
																	{
																		"expression": {
																			"arguments": [
																				{
																					"kind": "number",
																					"nodeType": "YulLiteral",
																					"src": "6345:1:13",
																					"type": "",
																					"value": "0"
																				},
																				{
																					"kind": "number",
																					"nodeType": "YulLiteral",
																					"src": "6348:1:13",
																					"type": "",
																					"value": "0"
																				}
																			],
																			"functionName": {
																				"name": "revert",
																				"nodeType": "YulIdentifier",
																				"src": "6338:6:13"
																			},
																			"nodeType": "YulFunctionCall",
																			"src": "6338:12:13"
																		},
																		"nodeType": "YulExpressionStatement",
																		"src": "6338:12:13"
																	}
																]
															},
															"condition": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"name": "dataEnd",
																				"nodeType": "YulIdentifier",
																				"src": "6311:7:13"
																			},
																			{
																				"name": "headStart",
																				"nodeType": "YulIdentifier",
																				"src": "6320:9:13"
																			}
																		],
																		"functionName": {
																			"name": "sub",
																			"nodeType": "YulIdentifier",
																			"src": "6307:3:13"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "6307:23:13"
																	},
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "6332:2:13",
																		"type": "",
																		"value": "64"
																	}
																],
																"functionName": {
																	"name": "slt",
																	"nodeType": "YulIdentifier",
																	"src": "6303:3:13"
																},
																"nodeType": "YulFunctionCall",
																"src": "6303:32:13"
															},
															"nodeType": "YulIf",
															"src": "6300:52:13"
														},
														{
															"nodeType": "YulAssignment",
															"src": "6361:39:13",
															"value": {
																"arguments": [
																	{
																		"name": "headStart",
																		"nodeType": "YulIdentifier",
																		"src": "6390:9:13"
																	}
																],
																"functionName": {
																	"name": "abi_decode_address",
																	"nodeType": "YulIdentifier",
																	"src": "6371:18:13"
																},
																"nodeType": "YulFunctionCall",
																"src": "6371:29:13"
															},
															"variableNames": [
																{
																	"name": "value0",
																	"nodeType": "YulIdentifier",
																	"src": "6361:6:13"
																}
															]
														},
														{
															"nodeType": "YulVariableDeclaration",
															"src": "6409:45:13",
															"value": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"name": "headStart",
																				"nodeType": "YulIdentifier",
																				"src": "6439:9:13"
																			},
																			{
																				"kind": "number",
																				"nodeType": "YulLiteral",
																				"src": "6450:2:13",
																				"type": "",
																				"value": "32"
																			}
																		],
																		"functionName": {
																			"name": "add",
																			"nodeType": "YulIdentifier",
																			"src": "6435:3:13"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "6435:18:13"
																	}
																],
																"functionName": {
																	"name": "calldataload",
																	"nodeType": "YulIdentifier",
																	"src": "6422:12:13"
																},
																"nodeType": "YulFunctionCall",
																"src": "6422:32:13"
															},
															"variables": [
																{
																	"name": "value",
																	"nodeType": "YulTypedName",
																	"src": "6413:5:13",
																	"type": ""
																}
															]
														},
														{
															"body": {
																"nodeType": "YulBlock",
																"src": "6507:16:13",
																"statements": [
																	{
																		"expression": {
																			"arguments": [
																				{
																					"kind": "number",
																					"nodeType": "YulLiteral",
																					"src": "6516:1:13",
																					"type": "",
																					"value": "0"
																				},
																				{
																					"kind": "number",
																					"nodeType": "YulLiteral",
																					"src": "6519:1:13",
																					"type": "",
																					"value": "0"
																				}
																			],
																			"functionName": {
																				"name": "revert",
																				"nodeType": "YulIdentifier",
																				"src": "6509:6:13"
																			},
																			"nodeType": "YulFunctionCall",
																			"src": "6509:12:13"
																		},
																		"nodeType": "YulExpressionStatement",
																		"src": "6509:12:13"
																	}
																]
															},
															"condition": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"name": "value",
																				"nodeType": "YulIdentifier",
																				"src": "6476:5:13"
																			},
																			{
																				"arguments": [
																					{
																						"arguments": [
																							{
																								"name": "value",
																								"nodeType": "YulIdentifier",
																								"src": "6497:5:13"
																							}
																						],
																						"functionName": {
																							"name": "iszero",
																							"nodeType": "YulIdentifier",
																							"src": "6490:6:13"
																						},
																						"nodeType": "YulFunctionCall",
																						"src": "6490:13:13"
																					}
																				],
																				"functionName": {
																					"name": "iszero",
																					"nodeType": "YulIdentifier",
																					"src": "6483:6:13"
																				},
																				"nodeType": "YulFunctionCall",
																				"src": "6483:21:13"
																			}
																		],
																		"functionName": {
																			"name": "eq",
																			"nodeType": "YulIdentifier",
																			"src": "6473:2:13"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "6473:32:13"
																	}
																],
																"functionName": {
																	"name": "iszero",
																	"nodeType": "YulIdentifier",
																	"src": "6466:6:13"
																},
																"nodeType": "YulFunctionCall",
																"src": "6466:40:13"
															},
															"nodeType": "YulIf",
															"src": "6463:60:13"
														},
														{
															"nodeType": "YulAssignment",
															"src": "6532:15:13",
															"value": {
																"name": "value",
																"nodeType": "YulIdentifier",
																"src": "6542:5:13"
															},
															"variableNames": [
																{
																	"name": "value1",
																	"nodeType": "YulIdentifier",
																	"src": "6532:6:13"
																}
															]
														}
													]
												},
												"name": "abi_decode_tuple_t_addresst_bool",
												"nodeType": "YulFunctionDefinition",
												"parameters": [
													{
														"name": "headStart",
														"nodeType": "YulTypedName",
														"src": "6248:9:13",
														"type": ""
													},
													{
														"name": "dataEnd",
														"nodeType": "YulTypedName",
														"src": "6259:7:13",
														"type": ""
													}
												],
												"returnVariables": [
													{
														"name": "value0",
														"nodeType": "YulTypedName",
														"src": "6271:6:13",
														"type": ""
													},
													{
														"name": "value1",
														"nodeType": "YulTypedName",
														"src": "6279:6:13",
														"type": ""
													}
												],
												"src": "6206:347:13"
											},
											{
												"body": {
													"nodeType": "YulBlock",
													"src": "6688:537:13",
													"statements": [
														{
															"body": {
																"nodeType": "YulBlock",
																"src": "6735:16:13",
																"statements": [
																	{
																		"expression": {
																			"arguments": [
																				{
																					"kind": "number",
																					"nodeType": "YulLiteral",
																					"src": "6744:1:13",
																					"type": "",
																					"value": "0"
																				},
																				{
																					"kind": "number",
																					"nodeType": "YulLiteral",
																					"src": "6747:1:13",
																					"type": "",
																					"value": "0"
																				}
																			],
																			"functionName": {
																				"name": "revert",
																				"nodeType": "YulIdentifier",
																				"src": "6737:6:13"
																			},
																			"nodeType": "YulFunctionCall",
																			"src": "6737:12:13"
																		},
																		"nodeType": "YulExpressionStatement",
																		"src": "6737:12:13"
																	}
																]
															},
															"condition": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"name": "dataEnd",
																				"nodeType": "YulIdentifier",
																				"src": "6709:7:13"
																			},
																			{
																				"name": "headStart",
																				"nodeType": "YulIdentifier",
																				"src": "6718:9:13"
																			}
																		],
																		"functionName": {
																			"name": "sub",
																			"nodeType": "YulIdentifier",
																			"src": "6705:3:13"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "6705:23:13"
																	},
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "6730:3:13",
																		"type": "",
																		"value": "128"
																	}
																],
																"functionName": {
																	"name": "slt",
																	"nodeType": "YulIdentifier",
																	"src": "6701:3:13"
																},
																"nodeType": "YulFunctionCall",
																"src": "6701:33:13"
															},
															"nodeType": "YulIf",
															"src": "6698:53:13"
														},
														{
															"nodeType": "YulAssignment",
															"src": "6760:39:13",
															"value": {
																"arguments": [
																	{
																		"name": "headStart",
																		"nodeType": "YulIdentifier",
																		"src": "6789:9:13"
																	}
																],
																"functionName": {
																	"name": "abi_decode_address",
																	"nodeType": "YulIdentifier",
																	"src": "6770:18:13"
																},
																"nodeType": "YulFunctionCall",
																"src": "6770:29:13"
															},
															"variableNames": [
																{
																	"name": "value0",
																	"nodeType": "YulIdentifier",
																	"src": "6760:6:13"
																}
															]
														},
														{
															"nodeType": "YulAssignment",
															"src": "6808:48:13",
															"value": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"name": "headStart",
																				"nodeType": "YulIdentifier",
																				"src": "6841:9:13"
																			},
																			{
																				"kind": "number",
																				"nodeType": "YulLiteral",
																				"src": "6852:2:13",
																				"type": "",
																				"value": "32"
																			}
																		],
																		"functionName": {
																			"name": "add",
																			"nodeType": "YulIdentifier",
																			"src": "6837:3:13"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "6837:18:13"
																	}
																],
																"functionName": {
																	"name": "abi_decode_address",
																	"nodeType": "YulIdentifier",
																	"src": "6818:18:13"
																},
																"nodeType": "YulFunctionCall",
																"src": "6818:38:13"
															},
															"variableNames": [
																{
																	"name": "value1",
																	"nodeType": "YulIdentifier",
																	"src": "6808:6:13"
																}
															]
														},
														{
															"nodeType": "YulAssignment",
															"src": "6865:42:13",
															"value": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"name": "headStart",
																				"nodeType": "YulIdentifier",
																				"src": "6892:9:13"
																			},
																			{
																				"kind": "number",
																				"nodeType": "YulLiteral",
																				"src": "6903:2:13",
																				"type": "",
																				"value": "64"
																			}
																		],
																		"functionName": {
																			"name": "add",
																			"nodeType": "YulIdentifier",
																			"src": "6888:3:13"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "6888:18:13"
																	}
																],
																"functionName": {
																	"name": "calldataload",
																	"nodeType": "YulIdentifier",
																	"src": "6875:12:13"
																},
																"nodeType": "YulFunctionCall",
																"src": "6875:32:13"
															},
															"variableNames": [
																{
																	"name": "value2",
																	"nodeType": "YulIdentifier",
																	"src": "6865:6:13"
																}
															]
														},
														{
															"nodeType": "YulVariableDeclaration",
															"src": "6916:46:13",
															"value": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"name": "headStart",
																				"nodeType": "YulIdentifier",
																				"src": "6947:9:13"
																			},
																			{
																				"kind": "number",
																				"nodeType": "YulLiteral",
																				"src": "6958:2:13",
																				"type": "",
																				"value": "96"
																			}
																		],
																		"functionName": {
																			"name": "add",
																			"nodeType": "YulIdentifier",
																			"src": "6943:3:13"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "6943:18:13"
																	}
																],
																"functionName": {
																	"name": "calldataload",
																	"nodeType": "YulIdentifier",
																	"src": "6930:12:13"
																},
																"nodeType": "YulFunctionCall",
																"src": "6930:32:13"
															},
															"variables": [
																{
																	"name": "offset",
																	"nodeType": "YulTypedName",
																	"src": "6920:6:13",
																	"type": ""
																}
															]
														},
														{
															"body": {
																"nodeType": "YulBlock",
																"src": "7005:16:13",
																"statements": [
																	{
																		"expression": {
																			"arguments": [
																				{
																					"kind": "number",
																					"nodeType": "YulLiteral",
																					"src": "7014:1:13",
																					"type": "",
																					"value": "0"
																				},
																				{
																					"kind": "number",
																					"nodeType": "YulLiteral",
																					"src": "7017:1:13",
																					"type": "",
																					"value": "0"
																				}
																			],
																			"functionName": {
																				"name": "revert",
																				"nodeType": "YulIdentifier",
																				"src": "7007:6:13"
																			},
																			"nodeType": "YulFunctionCall",
																			"src": "7007:12:13"
																		},
																		"nodeType": "YulExpressionStatement",
																		"src": "7007:12:13"
																	}
																]
															},
															"condition": {
																"arguments": [
																	{
																		"name": "offset",
																		"nodeType": "YulIdentifier",
																		"src": "6977:6:13"
																	},
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "6985:18:13",
																		"type": "",
																		"value": "0xffffffffffffffff"
																	}
																],
																"functionName": {
																	"name": "gt",
																	"nodeType": "YulIdentifier",
																	"src": "6974:2:13"
																},
																"nodeType": "YulFunctionCall",
																"src": "6974:30:13"
															},
															"nodeType": "YulIf",
															"src": "6971:50:13"
														},
														{
															"nodeType": "YulVariableDeclaration",
															"src": "7030:32:13",
															"value": {
																"arguments": [
																	{
																		"name": "headStart",
																		"nodeType": "YulIdentifier",
																		"src": "7044:9:13"
																	},
																	{
																		"name": "offset",
																		"nodeType": "YulIdentifier",
																		"src": "7055:6:13"
																	}
																],
																"functionName": {
																	"name": "add",
																	"nodeType": "YulIdentifier",
																	"src": "7040:3:13"
																},
																"nodeType": "YulFunctionCall",
																"src": "7040:22:13"
															},
															"variables": [
																{
																	"name": "_1",
																	"nodeType": "YulTypedName",
																	"src": "7034:2:13",
																	"type": ""
																}
															]
														},
														{
															"body": {
																"nodeType": "YulBlock",
																"src": "7110:16:13",
																"statements": [
																	{
																		"expression": {
																			"arguments": [
																				{
																					"kind": "number",
																					"nodeType": "YulLiteral",
																					"src": "7119:1:13",
																					"type": "",
																					"value": "0"
																				},
																				{
																					"kind": "number",
																					"nodeType": "YulLiteral",
																					"src": "7122:1:13",
																					"type": "",
																					"value": "0"
																				}
																			],
																			"functionName": {
																				"name": "revert",
																				"nodeType": "YulIdentifier",
																				"src": "7112:6:13"
																			},
																			"nodeType": "YulFunctionCall",
																			"src": "7112:12:13"
																		},
																		"nodeType": "YulExpressionStatement",
																		"src": "7112:12:13"
																	}
																]
															},
															"condition": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"arguments": [
																					{
																						"name": "_1",
																						"nodeType": "YulIdentifier",
																						"src": "7089:2:13"
																					},
																					{
																						"kind": "number",
																						"nodeType": "YulLiteral",
																						"src": "7093:4:13",
																						"type": "",
																						"value": "0x1f"
																					}
																				],
																				"functionName": {
																					"name": "add",
																					"nodeType": "YulIdentifier",
																					"src": "7085:3:13"
																				},
																				"nodeType": "YulFunctionCall",
																				"src": "7085:13:13"
																			},
																			{
																				"name": "dataEnd",
																				"nodeType": "YulIdentifier",
																				"src": "7100:7:13"
																			}
																		],
																		"functionName": {
																			"name": "slt",
																			"nodeType": "YulIdentifier",
																			"src": "7081:3:13"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "7081:27:13"
																	}
																],
																"functionName": {
																	"name": "iszero",
																	"nodeType": "YulIdentifier",
																	"src": "7074:6:13"
																},
																"nodeType": "YulFunctionCall",
																"src": "7074:35:13"
															},
															"nodeType": "YulIf",
															"src": "7071:55:13"
														},
														{
															"nodeType": "YulAssignment",
															"src": "7135:84:13",
															"value": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"name": "_1",
																				"nodeType": "YulIdentifier",
																				"src": "7184:2:13"
																			},
																			{
																				"kind": "number",
																				"nodeType": "YulLiteral",
																				"src": "7188:2:13",
																				"type": "",
																				"value": "32"
																			}
																		],
																		"functionName": {
																			"name": "add",
																			"nodeType": "YulIdentifier",
																			"src": "7180:3:13"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "7180:11:13"
																	},
																	{
																		"arguments": [
																			{
																				"name": "_1",
																				"nodeType": "YulIdentifier",
																				"src": "7206:2:13"
																			}
																		],
																		"functionName": {
																			"name": "calldataload",
																			"nodeType": "YulIdentifier",
																			"src": "7193:12:13"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "7193:16:13"
																	},
																	{
																		"name": "dataEnd",
																		"nodeType": "YulIdentifier",
																		"src": "7211:7:13"
																	}
																],
																"functionName": {
																	"name": "abi_decode_available_length_string",
																	"nodeType": "YulIdentifier",
																	"src": "7145:34:13"
																},
																"nodeType": "YulFunctionCall",
																"src": "7145:74:13"
															},
															"variableNames": [
																{
																	"name": "value3",
																	"nodeType": "YulIdentifier",
																	"src": "7135:6:13"
																}
															]
														}
													]
												},
												"name": "abi_decode_tuple_t_addresst_addresst_uint256t_bytes_memory_ptr",
												"nodeType": "YulFunctionDefinition",
												"parameters": [
													{
														"name": "headStart",
														"nodeType": "YulTypedName",
														"src": "6630:9:13",
														"type": ""
													},
													{
														"name": "dataEnd",
														"nodeType": "YulTypedName",
														"src": "6641:7:13",
														"type": ""
													}
												],
												"returnVariables": [
													{
														"name": "value0",
														"nodeType": "YulTypedName",
														"src": "6653:6:13",
														"type": ""
													},
													{
														"name": "value1",
														"nodeType": "YulTypedName",
														"src": "6661:6:13",
														"type": ""
													},
													{
														"name": "value2",
														"nodeType": "YulTypedName",
														"src": "6669:6:13",
														"type": ""
													},
													{
														"name": "value3",
														"nodeType": "YulTypedName",
														"src": "6677:6:13",
														"type": ""
													}
												],
												"src": "6558:667:13"
											},
											{
												"body": {
													"nodeType": "YulBlock",
													"src": "7317:173:13",
													"statements": [
														{
															"body": {
																"nodeType": "YulBlock",
																"src": "7363:16:13",
																"statements": [
																	{
																		"expression": {
																			"arguments": [
																				{
																					"kind": "number",
																					"nodeType": "YulLiteral",
																					"src": "7372:1:13",
																					"type": "",
																					"value": "0"
																				},
																				{
																					"kind": "number",
																					"nodeType": "YulLiteral",
																					"src": "7375:1:13",
																					"type": "",
																					"value": "0"
																				}
																			],
																			"functionName": {
																				"name": "revert",
																				"nodeType": "YulIdentifier",
																				"src": "7365:6:13"
																			},
																			"nodeType": "YulFunctionCall",
																			"src": "7365:12:13"
																		},
																		"nodeType": "YulExpressionStatement",
																		"src": "7365:12:13"
																	}
																]
															},
															"condition": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"name": "dataEnd",
																				"nodeType": "YulIdentifier",
																				"src": "7338:7:13"
																			},
																			{
																				"name": "headStart",
																				"nodeType": "YulIdentifier",
																				"src": "7347:9:13"
																			}
																		],
																		"functionName": {
																			"name": "sub",
																			"nodeType": "YulIdentifier",
																			"src": "7334:3:13"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "7334:23:13"
																	},
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "7359:2:13",
																		"type": "",
																		"value": "64"
																	}
																],
																"functionName": {
																	"name": "slt",
																	"nodeType": "YulIdentifier",
																	"src": "7330:3:13"
																},
																"nodeType": "YulFunctionCall",
																"src": "7330:32:13"
															},
															"nodeType": "YulIf",
															"src": "7327:52:13"
														},
														{
															"nodeType": "YulAssignment",
															"src": "7388:39:13",
															"value": {
																"arguments": [
																	{
																		"name": "headStart",
																		"nodeType": "YulIdentifier",
																		"src": "7417:9:13"
																	}
																],
																"functionName": {
																	"name": "abi_decode_address",
																	"nodeType": "YulIdentifier",
																	"src": "7398:18:13"
																},
																"nodeType": "YulFunctionCall",
																"src": "7398:29:13"
															},
															"variableNames": [
																{
																	"name": "value0",
																	"nodeType": "YulIdentifier",
																	"src": "7388:6:13"
																}
															]
														},
														{
															"nodeType": "YulAssignment",
															"src": "7436:48:13",
															"value": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"name": "headStart",
																				"nodeType": "YulIdentifier",
																				"src": "7469:9:13"
																			},
																			{
																				"kind": "number",
																				"nodeType": "YulLiteral",
																				"src": "7480:2:13",
																				"type": "",
																				"value": "32"
																			}
																		],
																		"functionName": {
																			"name": "add",
																			"nodeType": "YulIdentifier",
																			"src": "7465:3:13"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "7465:18:13"
																	}
																],
																"functionName": {
																	"name": "abi_decode_address",
																	"nodeType": "YulIdentifier",
																	"src": "7446:18:13"
																},
																"nodeType": "YulFunctionCall",
																"src": "7446:38:13"
															},
															"variableNames": [
																{
																	"name": "value1",
																	"nodeType": "YulIdentifier",
																	"src": "7436:6:13"
																}
															]
														}
													]
												},
												"name": "abi_decode_tuple_t_addresst_address",
												"nodeType": "YulFunctionDefinition",
												"parameters": [
													{
														"name": "headStart",
														"nodeType": "YulTypedName",
														"src": "7275:9:13",
														"type": ""
													},
													{
														"name": "dataEnd",
														"nodeType": "YulTypedName",
														"src": "7286:7:13",
														"type": ""
													}
												],
												"returnVariables": [
													{
														"name": "value0",
														"nodeType": "YulTypedName",
														"src": "7298:6:13",
														"type": ""
													},
													{
														"name": "value1",
														"nodeType": "YulTypedName",
														"src": "7306:6:13",
														"type": ""
													}
												],
												"src": "7230:260:13"
											},
											{
												"body": {
													"nodeType": "YulBlock",
													"src": "7669:182:13",
													"statements": [
														{
															"expression": {
																"arguments": [
																	{
																		"name": "headStart",
																		"nodeType": "YulIdentifier",
																		"src": "7686:9:13"
																	},
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "7697:2:13",
																		"type": "",
																		"value": "32"
																	}
																],
																"functionName": {
																	"name": "mstore",
																	"nodeType": "YulIdentifier",
																	"src": "7679:6:13"
																},
																"nodeType": "YulFunctionCall",
																"src": "7679:21:13"
															},
															"nodeType": "YulExpressionStatement",
															"src": "7679:21:13"
														},
														{
															"expression": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"name": "headStart",
																				"nodeType": "YulIdentifier",
																				"src": "7720:9:13"
																			},
																			{
																				"kind": "number",
																				"nodeType": "YulLiteral",
																				"src": "7731:2:13",
																				"type": "",
																				"value": "32"
																			}
																		],
																		"functionName": {
																			"name": "add",
																			"nodeType": "YulIdentifier",
																			"src": "7716:3:13"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "7716:18:13"
																	},
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "7736:2:13",
																		"type": "",
																		"value": "32"
																	}
																],
																"functionName": {
																	"name": "mstore",
																	"nodeType": "YulIdentifier",
																	"src": "7709:6:13"
																},
																"nodeType": "YulFunctionCall",
																"src": "7709:30:13"
															},
															"nodeType": "YulExpressionStatement",
															"src": "7709:30:13"
														},
														{
															"expression": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"name": "headStart",
																				"nodeType": "YulIdentifier",
																				"src": "7759:9:13"
																			},
																			{
																				"kind": "number",
																				"nodeType": "YulLiteral",
																				"src": "7770:2:13",
																				"type": "",
																				"value": "64"
																			}
																		],
																		"functionName": {
																			"name": "add",
																			"nodeType": "YulIdentifier",
																			"src": "7755:3:13"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "7755:18:13"
																	},
																	{
																		"hexValue": "4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e6572",
																		"kind": "string",
																		"nodeType": "YulLiteral",
																		"src": "7775:34:13",
																		"type": "",
																		"value": "Ownable: caller is not the owner"
																	}
																],
																"functionName": {
																	"name": "mstore",
																	"nodeType": "YulIdentifier",
																	"src": "7748:6:13"
																},
																"nodeType": "YulFunctionCall",
																"src": "7748:62:13"
															},
															"nodeType": "YulExpressionStatement",
															"src": "7748:62:13"
														},
														{
															"nodeType": "YulAssignment",
															"src": "7819:26:13",
															"value": {
																"arguments": [
																	{
																		"name": "headStart",
																		"nodeType": "YulIdentifier",
																		"src": "7831:9:13"
																	},
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "7842:2:13",
																		"type": "",
																		"value": "96"
																	}
																],
																"functionName": {
																	"name": "add",
																	"nodeType": "YulIdentifier",
																	"src": "7827:3:13"
																},
																"nodeType": "YulFunctionCall",
																"src": "7827:18:13"
															},
															"variableNames": [
																{
																	"name": "tail",
																	"nodeType": "YulIdentifier",
																	"src": "7819:4:13"
																}
															]
														}
													]
												},
												"name": "abi_encode_tuple_t_stringliteral_9924ebdf1add33d25d4ef888e16131f0a5687b0580a36c21b5c301a6c462effe__to_t_string_memory_ptr__fromStack_reversed",
												"nodeType": "YulFunctionDefinition",
												"parameters": [
													{
														"name": "headStart",
														"nodeType": "YulTypedName",
														"src": "7646:9:13",
														"type": ""
													}
												],
												"returnVariables": [
													{
														"name": "tail",
														"nodeType": "YulTypedName",
														"src": "7660:4:13",
														"type": ""
													}
												],
												"src": "7495:356:13"
											},
											{
												"body": {
													"nodeType": "YulBlock",
													"src": "7911:325:13",
													"statements": [
														{
															"nodeType": "YulAssignment",
															"src": "7921:22:13",
															"value": {
																"arguments": [
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "7935:1:13",
																		"type": "",
																		"value": "1"
																	},
																	{
																		"name": "data",
																		"nodeType": "YulIdentifier",
																		"src": "7938:4:13"
																	}
																],
																"functionName": {
																	"name": "shr",
																	"nodeType": "YulIdentifier",
																	"src": "7931:3:13"
																},
																"nodeType": "YulFunctionCall",
																"src": "7931:12:13"
															},
															"variableNames": [
																{
																	"name": "length",
																	"nodeType": "YulIdentifier",
																	"src": "7921:6:13"
																}
															]
														},
														{
															"nodeType": "YulVariableDeclaration",
															"src": "7952:38:13",
															"value": {
																"arguments": [
																	{
																		"name": "data",
																		"nodeType": "YulIdentifier",
																		"src": "7982:4:13"
																	},
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "7988:1:13",
																		"type": "",
																		"value": "1"
																	}
																],
																"functionName": {
																	"name": "and",
																	"nodeType": "YulIdentifier",
																	"src": "7978:3:13"
																},
																"nodeType": "YulFunctionCall",
																"src": "7978:12:13"
															},
															"variables": [
																{
																	"name": "outOfPlaceEncoding",
																	"nodeType": "YulTypedName",
																	"src": "7956:18:13",
																	"type": ""
																}
															]
														},
														{
															"body": {
																"nodeType": "YulBlock",
																"src": "8029:31:13",
																"statements": [
																	{
																		"nodeType": "YulAssignment",
																		"src": "8031:27:13",
																		"value": {
																			"arguments": [
																				{
																					"name": "length",
																					"nodeType": "YulIdentifier",
																					"src": "8045:6:13"
																				},
																				{
																					"kind": "number",
																					"nodeType": "YulLiteral",
																					"src": "8053:4:13",
																					"type": "",
																					"value": "0x7f"
																				}
																			],
																			"functionName": {
																				"name": "and",
																				"nodeType": "YulIdentifier",
																				"src": "8041:3:13"
																			},
																			"nodeType": "YulFunctionCall",
																			"src": "8041:17:13"
																		},
																		"variableNames": [
																			{
																				"name": "length",
																				"nodeType": "YulIdentifier",
																				"src": "8031:6:13"
																			}
																		]
																	}
																]
															},
															"condition": {
																"arguments": [
																	{
																		"name": "outOfPlaceEncoding",
																		"nodeType": "YulIdentifier",
																		"src": "8009:18:13"
																	}
																],
																"functionName": {
																	"name": "iszero",
																	"nodeType": "YulIdentifier",
																	"src": "8002:6:13"
																},
																"nodeType": "YulFunctionCall",
																"src": "8002:26:13"
															},
															"nodeType": "YulIf",
															"src": "7999:61:13"
														},
														{
															"body": {
																"nodeType": "YulBlock",
																"src": "8119:111:13",
																"statements": [
																	{
																		"expression": {
																			"arguments": [
																				{
																					"kind": "number",
																					"nodeType": "YulLiteral",
																					"src": "8140:1:13",
																					"type": "",
																					"value": "0"
																				},
																				{
																					"arguments": [
																						{
																							"kind": "number",
																							"nodeType": "YulLiteral",
																							"src": "8147:3:13",
																							"type": "",
																							"value": "224"
																						},
																						{
																							"kind": "number",
																							"nodeType": "YulLiteral",
																							"src": "8152:10:13",
																							"type": "",
																							"value": "0x4e487b71"
																						}
																					],
																					"functionName": {
																						"name": "shl",
																						"nodeType": "YulIdentifier",
																						"src": "8143:3:13"
																					},
																					"nodeType": "YulFunctionCall",
																					"src": "8143:20:13"
																				}
																			],
																			"functionName": {
																				"name": "mstore",
																				"nodeType": "YulIdentifier",
																				"src": "8133:6:13"
																			},
																			"nodeType": "YulFunctionCall",
																			"src": "8133:31:13"
																		},
																		"nodeType": "YulExpressionStatement",
																		"src": "8133:31:13"
																	},
																	{
																		"expression": {
																			"arguments": [
																				{
																					"kind": "number",
																					"nodeType": "YulLiteral",
																					"src": "8184:1:13",
																					"type": "",
																					"value": "4"
																				},
																				{
																					"kind": "number",
																					"nodeType": "YulLiteral",
																					"src": "8187:4:13",
																					"type": "",
																					"value": "0x22"
																				}
																			],
																			"functionName": {
																				"name": "mstore",
																				"nodeType": "YulIdentifier",
																				"src": "8177:6:13"
																			},
																			"nodeType": "YulFunctionCall",
																			"src": "8177:15:13"
																		},
																		"nodeType": "YulExpressionStatement",
																		"src": "8177:15:13"
																	},
																	{
																		"expression": {
																			"arguments": [
																				{
																					"kind": "number",
																					"nodeType": "YulLiteral",
																					"src": "8212:1:13",
																					"type": "",
																					"value": "0"
																				},
																				{
																					"kind": "number",
																					"nodeType": "YulLiteral",
																					"src": "8215:4:13",
																					"type": "",
																					"value": "0x24"
																				}
																			],
																			"functionName": {
																				"name": "revert",
																				"nodeType": "YulIdentifier",
																				"src": "8205:6:13"
																			},
																			"nodeType": "YulFunctionCall",
																			"src": "8205:15:13"
																		},
																		"nodeType": "YulExpressionStatement",
																		"src": "8205:15:13"
																	}
																]
															},
															"condition": {
																"arguments": [
																	{
																		"name": "outOfPlaceEncoding",
																		"nodeType": "YulIdentifier",
																		"src": "8075:18:13"
																	},
																	{
																		"arguments": [
																			{
																				"name": "length",
																				"nodeType": "YulIdentifier",
																				"src": "8098:6:13"
																			},
																			{
																				"kind": "number",
																				"nodeType": "YulLiteral",
																				"src": "8106:2:13",
																				"type": "",
																				"value": "32"
																			}
																		],
																		"functionName": {
																			"name": "lt",
																			"nodeType": "YulIdentifier",
																			"src": "8095:2:13"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "8095:14:13"
																	}
																],
																"functionName": {
																	"name": "eq",
																	"nodeType": "YulIdentifier",
																	"src": "8072:2:13"
																},
																"nodeType": "YulFunctionCall",
																"src": "8072:38:13"
															},
															"nodeType": "YulIf",
															"src": "8069:161:13"
														}
													]
												},
												"name": "extract_byte_array_length",
												"nodeType": "YulFunctionDefinition",
												"parameters": [
													{
														"name": "data",
														"nodeType": "YulTypedName",
														"src": "7891:4:13",
														"type": ""
													}
												],
												"returnVariables": [
													{
														"name": "length",
														"nodeType": "YulTypedName",
														"src": "7900:6:13",
														"type": ""
													}
												],
												"src": "7856:380:13"
											},
											{
												"body": {
													"nodeType": "YulBlock",
													"src": "8415:238:13",
													"statements": [
														{
															"expression": {
																"arguments": [
																	{
																		"name": "headStart",
																		"nodeType": "YulIdentifier",
																		"src": "8432:9:13"
																	},
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "8443:2:13",
																		"type": "",
																		"value": "32"
																	}
																],
																"functionName": {
																	"name": "mstore",
																	"nodeType": "YulIdentifier",
																	"src": "8425:6:13"
																},
																"nodeType": "YulFunctionCall",
																"src": "8425:21:13"
															},
															"nodeType": "YulExpressionStatement",
															"src": "8425:21:13"
														},
														{
															"expression": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"name": "headStart",
																				"nodeType": "YulIdentifier",
																				"src": "8466:9:13"
																			},
																			{
																				"kind": "number",
																				"nodeType": "YulLiteral",
																				"src": "8477:2:13",
																				"type": "",
																				"value": "32"
																			}
																		],
																		"functionName": {
																			"name": "add",
																			"nodeType": "YulIdentifier",
																			"src": "8462:3:13"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "8462:18:13"
																	},
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "8482:2:13",
																		"type": "",
																		"value": "48"
																	}
																],
																"functionName": {
																	"name": "mstore",
																	"nodeType": "YulIdentifier",
																	"src": "8455:6:13"
																},
																"nodeType": "YulFunctionCall",
																"src": "8455:30:13"
															},
															"nodeType": "YulExpressionStatement",
															"src": "8455:30:13"
														},
														{
															"expression": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"name": "headStart",
																				"nodeType": "YulIdentifier",
																				"src": "8505:9:13"
																			},
																			{
																				"kind": "number",
																				"nodeType": "YulLiteral",
																				"src": "8516:2:13",
																				"type": "",
																				"value": "64"
																			}
																		],
																		"functionName": {
																			"name": "add",
																			"nodeType": "YulIdentifier",
																			"src": "8501:3:13"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "8501:18:13"
																	},
																	{
																		"hexValue": "43727970746f42756c6c446f6773203a3a2043616e6e6f742062652063616c6c",
																		"kind": "string",
																		"nodeType": "YulLiteral",
																		"src": "8521:34:13",
																		"type": "",
																		"value": "CryptoBullDogs :: Cannot be call"
																	}
																],
																"functionName": {
																	"name": "mstore",
																	"nodeType": "YulIdentifier",
																	"src": "8494:6:13"
																},
																"nodeType": "YulFunctionCall",
																"src": "8494:62:13"
															},
															"nodeType": "YulExpressionStatement",
															"src": "8494:62:13"
														},
														{
															"expression": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"name": "headStart",
																				"nodeType": "YulIdentifier",
																				"src": "8576:9:13"
																			},
																			{
																				"kind": "number",
																				"nodeType": "YulLiteral",
																				"src": "8587:2:13",
																				"type": "",
																				"value": "96"
																			}
																		],
																		"functionName": {
																			"name": "add",
																			"nodeType": "YulIdentifier",
																			"src": "8572:3:13"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "8572:18:13"
																	},
																	{
																		"hexValue": "6564206279206120636f6e7472616374",
																		"kind": "string",
																		"nodeType": "YulLiteral",
																		"src": "8592:18:13",
																		"type": "",
																		"value": "ed by a contract"
																	}
																],
																"functionName": {
																	"name": "mstore",
																	"nodeType": "YulIdentifier",
																	"src": "8565:6:13"
																},
																"nodeType": "YulFunctionCall",
																"src": "8565:46:13"
															},
															"nodeType": "YulExpressionStatement",
															"src": "8565:46:13"
														},
														{
															"nodeType": "YulAssignment",
															"src": "8620:27:13",
															"value": {
																"arguments": [
																	{
																		"name": "headStart",
																		"nodeType": "YulIdentifier",
																		"src": "8632:9:13"
																	},
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "8643:3:13",
																		"type": "",
																		"value": "128"
																	}
																],
																"functionName": {
																	"name": "add",
																	"nodeType": "YulIdentifier",
																	"src": "8628:3:13"
																},
																"nodeType": "YulFunctionCall",
																"src": "8628:19:13"
															},
															"variableNames": [
																{
																	"name": "tail",
																	"nodeType": "YulIdentifier",
																	"src": "8620:4:13"
																}
															]
														}
													]
												},
												"name": "abi_encode_tuple_t_stringliteral_0b39a6345f34c8d3711dfee0a8d6f2ec7300f78ff8b109391ba42a768c3501b2__to_t_string_memory_ptr__fromStack_reversed",
												"nodeType": "YulFunctionDefinition",
												"parameters": [
													{
														"name": "headStart",
														"nodeType": "YulTypedName",
														"src": "8392:9:13",
														"type": ""
													}
												],
												"returnVariables": [
													{
														"name": "tail",
														"nodeType": "YulTypedName",
														"src": "8406:4:13",
														"type": ""
													}
												],
												"src": "8241:412:13"
											},
											{
												"body": {
													"nodeType": "YulBlock",
													"src": "8832:227:13",
													"statements": [
														{
															"expression": {
																"arguments": [
																	{
																		"name": "headStart",
																		"nodeType": "YulIdentifier",
																		"src": "8849:9:13"
																	},
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "8860:2:13",
																		"type": "",
																		"value": "32"
																	}
																],
																"functionName": {
																	"name": "mstore",
																	"nodeType": "YulIdentifier",
																	"src": "8842:6:13"
																},
																"nodeType": "YulFunctionCall",
																"src": "8842:21:13"
															},
															"nodeType": "YulExpressionStatement",
															"src": "8842:21:13"
														},
														{
															"expression": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"name": "headStart",
																				"nodeType": "YulIdentifier",
																				"src": "8883:9:13"
																			},
																			{
																				"kind": "number",
																				"nodeType": "YulLiteral",
																				"src": "8894:2:13",
																				"type": "",
																				"value": "32"
																			}
																		],
																		"functionName": {
																			"name": "add",
																			"nodeType": "YulIdentifier",
																			"src": "8879:3:13"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "8879:18:13"
																	},
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "8899:2:13",
																		"type": "",
																		"value": "37"
																	}
																],
																"functionName": {
																	"name": "mstore",
																	"nodeType": "YulIdentifier",
																	"src": "8872:6:13"
																},
																"nodeType": "YulFunctionCall",
																"src": "8872:30:13"
															},
															"nodeType": "YulExpressionStatement",
															"src": "8872:30:13"
														},
														{
															"expression": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"name": "headStart",
																				"nodeType": "YulIdentifier",
																				"src": "8922:9:13"
																			},
																			{
																				"kind": "number",
																				"nodeType": "YulLiteral",
																				"src": "8933:2:13",
																				"type": "",
																				"value": "64"
																			}
																		],
																		"functionName": {
																			"name": "add",
																			"nodeType": "YulIdentifier",
																			"src": "8918:3:13"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "8918:18:13"
																	},
																	{
																		"hexValue": "43727970746f42756c6c446f6773203a3a204d696e74696e67206973206f6e20",
																		"kind": "string",
																		"nodeType": "YulLiteral",
																		"src": "8938:34:13",
																		"type": "",
																		"value": "CryptoBullDogs :: Minting is on "
																	}
																],
																"functionName": {
																	"name": "mstore",
																	"nodeType": "YulIdentifier",
																	"src": "8911:6:13"
																},
																"nodeType": "YulFunctionCall",
																"src": "8911:62:13"
															},
															"nodeType": "YulExpressionStatement",
															"src": "8911:62:13"
														},
														{
															"expression": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"name": "headStart",
																				"nodeType": "YulIdentifier",
																				"src": "8993:9:13"
																			},
																			{
																				"kind": "number",
																				"nodeType": "YulLiteral",
																				"src": "9004:2:13",
																				"type": "",
																				"value": "96"
																			}
																		],
																		"functionName": {
																			"name": "add",
																			"nodeType": "YulIdentifier",
																			"src": "8989:3:13"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "8989:18:13"
																	},
																	{
																		"hexValue": "5061757365",
																		"kind": "string",
																		"nodeType": "YulLiteral",
																		"src": "9009:7:13",
																		"type": "",
																		"value": "Pause"
																	}
																],
																"functionName": {
																	"name": "mstore",
																	"nodeType": "YulIdentifier",
																	"src": "8982:6:13"
																},
																"nodeType": "YulFunctionCall",
																"src": "8982:35:13"
															},
															"nodeType": "YulExpressionStatement",
															"src": "8982:35:13"
														},
														{
															"nodeType": "YulAssignment",
															"src": "9026:27:13",
															"value": {
																"arguments": [
																	{
																		"name": "headStart",
																		"nodeType": "YulIdentifier",
																		"src": "9038:9:13"
																	},
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "9049:3:13",
																		"type": "",
																		"value": "128"
																	}
																],
																"functionName": {
																	"name": "add",
																	"nodeType": "YulIdentifier",
																	"src": "9034:3:13"
																},
																"nodeType": "YulFunctionCall",
																"src": "9034:19:13"
															},
															"variableNames": [
																{
																	"name": "tail",
																	"nodeType": "YulIdentifier",
																	"src": "9026:4:13"
																}
															]
														}
													]
												},
												"name": "abi_encode_tuple_t_stringliteral_c20fc45585ea982635c0eaea27752aa72d9d12c67d0eca0ac62441a0fcd497bc__to_t_string_memory_ptr__fromStack_reversed",
												"nodeType": "YulFunctionDefinition",
												"parameters": [
													{
														"name": "headStart",
														"nodeType": "YulTypedName",
														"src": "8809:9:13",
														"type": ""
													}
												],
												"returnVariables": [
													{
														"name": "tail",
														"nodeType": "YulTypedName",
														"src": "8823:4:13",
														"type": ""
													}
												],
												"src": "8658:401:13"
											},
											{
												"body": {
													"nodeType": "YulBlock",
													"src": "9096:95:13",
													"statements": [
														{
															"expression": {
																"arguments": [
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "9113:1:13",
																		"type": "",
																		"value": "0"
																	},
																	{
																		"arguments": [
																			{
																				"kind": "number",
																				"nodeType": "YulLiteral",
																				"src": "9120:3:13",
																				"type": "",
																				"value": "224"
																			},
																			{
																				"kind": "number",
																				"nodeType": "YulLiteral",
																				"src": "9125:10:13",
																				"type": "",
																				"value": "0x4e487b71"
																			}
																		],
																		"functionName": {
																			"name": "shl",
																			"nodeType": "YulIdentifier",
																			"src": "9116:3:13"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "9116:20:13"
																	}
																],
																"functionName": {
																	"name": "mstore",
																	"nodeType": "YulIdentifier",
																	"src": "9106:6:13"
																},
																"nodeType": "YulFunctionCall",
																"src": "9106:31:13"
															},
															"nodeType": "YulExpressionStatement",
															"src": "9106:31:13"
														},
														{
															"expression": {
																"arguments": [
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "9153:1:13",
																		"type": "",
																		"value": "4"
																	},
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "9156:4:13",
																		"type": "",
																		"value": "0x11"
																	}
																],
																"functionName": {
																	"name": "mstore",
																	"nodeType": "YulIdentifier",
																	"src": "9146:6:13"
																},
																"nodeType": "YulFunctionCall",
																"src": "9146:15:13"
															},
															"nodeType": "YulExpressionStatement",
															"src": "9146:15:13"
														},
														{
															"expression": {
																"arguments": [
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "9177:1:13",
																		"type": "",
																		"value": "0"
																	},
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "9180:4:13",
																		"type": "",
																		"value": "0x24"
																	}
																],
																"functionName": {
																	"name": "revert",
																	"nodeType": "YulIdentifier",
																	"src": "9170:6:13"
																},
																"nodeType": "YulFunctionCall",
																"src": "9170:15:13"
															},
															"nodeType": "YulExpressionStatement",
															"src": "9170:15:13"
														}
													]
												},
												"name": "panic_error_0x11",
												"nodeType": "YulFunctionDefinition",
												"src": "9064:127:13"
											},
											{
												"body": {
													"nodeType": "YulBlock",
													"src": "9244:80:13",
													"statements": [
														{
															"body": {
																"nodeType": "YulBlock",
																"src": "9271:22:13",
																"statements": [
																	{
																		"expression": {
																			"arguments": [],
																			"functionName": {
																				"name": "panic_error_0x11",
																				"nodeType": "YulIdentifier",
																				"src": "9273:16:13"
																			},
																			"nodeType": "YulFunctionCall",
																			"src": "9273:18:13"
																		},
																		"nodeType": "YulExpressionStatement",
																		"src": "9273:18:13"
																	}
																]
															},
															"condition": {
																"arguments": [
																	{
																		"name": "x",
																		"nodeType": "YulIdentifier",
																		"src": "9260:1:13"
																	},
																	{
																		"arguments": [
																			{
																				"name": "y",
																				"nodeType": "YulIdentifier",
																				"src": "9267:1:13"
																			}
																		],
																		"functionName": {
																			"name": "not",
																			"nodeType": "YulIdentifier",
																			"src": "9263:3:13"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "9263:6:13"
																	}
																],
																"functionName": {
																	"name": "gt",
																	"nodeType": "YulIdentifier",
																	"src": "9257:2:13"
																},
																"nodeType": "YulFunctionCall",
																"src": "9257:13:13"
															},
															"nodeType": "YulIf",
															"src": "9254:39:13"
														},
														{
															"nodeType": "YulAssignment",
															"src": "9302:16:13",
															"value": {
																"arguments": [
																	{
																		"name": "x",
																		"nodeType": "YulIdentifier",
																		"src": "9313:1:13"
																	},
																	{
																		"name": "y",
																		"nodeType": "YulIdentifier",
																		"src": "9316:1:13"
																	}
																],
																"functionName": {
																	"name": "add",
																	"nodeType": "YulIdentifier",
																	"src": "9309:3:13"
																},
																"nodeType": "YulFunctionCall",
																"src": "9309:9:13"
															},
															"variableNames": [
																{
																	"name": "sum",
																	"nodeType": "YulIdentifier",
																	"src": "9302:3:13"
																}
															]
														}
													]
												},
												"name": "checked_add_t_uint256",
												"nodeType": "YulFunctionDefinition",
												"parameters": [
													{
														"name": "x",
														"nodeType": "YulTypedName",
														"src": "9227:1:13",
														"type": ""
													},
													{
														"name": "y",
														"nodeType": "YulTypedName",
														"src": "9230:1:13",
														"type": ""
													}
												],
												"returnVariables": [
													{
														"name": "sum",
														"nodeType": "YulTypedName",
														"src": "9236:3:13",
														"type": ""
													}
												],
												"src": "9196:128:13"
											},
											{
												"body": {
													"nodeType": "YulBlock",
													"src": "9503:237:13",
													"statements": [
														{
															"expression": {
																"arguments": [
																	{
																		"name": "headStart",
																		"nodeType": "YulIdentifier",
																		"src": "9520:9:13"
																	},
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "9531:2:13",
																		"type": "",
																		"value": "32"
																	}
																],
																"functionName": {
																	"name": "mstore",
																	"nodeType": "YulIdentifier",
																	"src": "9513:6:13"
																},
																"nodeType": "YulFunctionCall",
																"src": "9513:21:13"
															},
															"nodeType": "YulExpressionStatement",
															"src": "9513:21:13"
														},
														{
															"expression": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"name": "headStart",
																				"nodeType": "YulIdentifier",
																				"src": "9554:9:13"
																			},
																			{
																				"kind": "number",
																				"nodeType": "YulLiteral",
																				"src": "9565:2:13",
																				"type": "",
																				"value": "32"
																			}
																		],
																		"functionName": {
																			"name": "add",
																			"nodeType": "YulIdentifier",
																			"src": "9550:3:13"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "9550:18:13"
																	},
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "9570:2:13",
																		"type": "",
																		"value": "47"
																	}
																],
																"functionName": {
																	"name": "mstore",
																	"nodeType": "YulIdentifier",
																	"src": "9543:6:13"
																},
																"nodeType": "YulFunctionCall",
																"src": "9543:30:13"
															},
															"nodeType": "YulExpressionStatement",
															"src": "9543:30:13"
														},
														{
															"expression": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"name": "headStart",
																				"nodeType": "YulIdentifier",
																				"src": "9593:9:13"
																			},
																			{
																				"kind": "number",
																				"nodeType": "YulLiteral",
																				"src": "9604:2:13",
																				"type": "",
																				"value": "64"
																			}
																		],
																		"functionName": {
																			"name": "add",
																			"nodeType": "YulIdentifier",
																			"src": "9589:3:13"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "9589:18:13"
																	},
																	{
																		"hexValue": "43727970746f42756c6c446f6773203a3a2043616e6e6f74206d696e74206265",
																		"kind": "string",
																		"nodeType": "YulLiteral",
																		"src": "9609:34:13",
																		"type": "",
																		"value": "CryptoBullDogs :: Cannot mint be"
																	}
																],
																"functionName": {
																	"name": "mstore",
																	"nodeType": "YulIdentifier",
																	"src": "9582:6:13"
																},
																"nodeType": "YulFunctionCall",
																"src": "9582:62:13"
															},
															"nodeType": "YulExpressionStatement",
															"src": "9582:62:13"
														},
														{
															"expression": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"name": "headStart",
																				"nodeType": "YulIdentifier",
																				"src": "9664:9:13"
																			},
																			{
																				"kind": "number",
																				"nodeType": "YulLiteral",
																				"src": "9675:2:13",
																				"type": "",
																				"value": "96"
																			}
																		],
																		"functionName": {
																			"name": "add",
																			"nodeType": "YulIdentifier",
																			"src": "9660:3:13"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "9660:18:13"
																	},
																	{
																		"hexValue": "796f6e64206d617820737570706c79",
																		"kind": "string",
																		"nodeType": "YulLiteral",
																		"src": "9680:17:13",
																		"type": "",
																		"value": "yond max supply"
																	}
																],
																"functionName": {
																	"name": "mstore",
																	"nodeType": "YulIdentifier",
																	"src": "9653:6:13"
																},
																"nodeType": "YulFunctionCall",
																"src": "9653:45:13"
															},
															"nodeType": "YulExpressionStatement",
															"src": "9653:45:13"
														},
														{
															"nodeType": "YulAssignment",
															"src": "9707:27:13",
															"value": {
																"arguments": [
																	{
																		"name": "headStart",
																		"nodeType": "YulIdentifier",
																		"src": "9719:9:13"
																	},
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "9730:3:13",
																		"type": "",
																		"value": "128"
																	}
																],
																"functionName": {
																	"name": "add",
																	"nodeType": "YulIdentifier",
																	"src": "9715:3:13"
																},
																"nodeType": "YulFunctionCall",
																"src": "9715:19:13"
															},
															"variableNames": [
																{
																	"name": "tail",
																	"nodeType": "YulIdentifier",
																	"src": "9707:4:13"
																}
															]
														}
													]
												},
												"name": "abi_encode_tuple_t_stringliteral_c23275b1ed5ed81046546b0000675842efe31b6ede5f5a7e9e64b1e87538c27b__to_t_string_memory_ptr__fromStack_reversed",
												"nodeType": "YulFunctionDefinition",
												"parameters": [
													{
														"name": "headStart",
														"nodeType": "YulTypedName",
														"src": "9480:9:13",
														"type": ""
													}
												],
												"returnVariables": [
													{
														"name": "tail",
														"nodeType": "YulTypedName",
														"src": "9494:4:13",
														"type": ""
													}
												],
												"src": "9329:411:13"
											},
											{
												"body": {
													"nodeType": "YulBlock",
													"src": "9919:245:13",
													"statements": [
														{
															"expression": {
																"arguments": [
																	{
																		"name": "headStart",
																		"nodeType": "YulIdentifier",
																		"src": "9936:9:13"
																	},
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "9947:2:13",
																		"type": "",
																		"value": "32"
																	}
																],
																"functionName": {
																	"name": "mstore",
																	"nodeType": "YulIdentifier",
																	"src": "9929:6:13"
																},
																"nodeType": "YulFunctionCall",
																"src": "9929:21:13"
															},
															"nodeType": "YulExpressionStatement",
															"src": "9929:21:13"
														},
														{
															"expression": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"name": "headStart",
																				"nodeType": "YulIdentifier",
																				"src": "9970:9:13"
																			},
																			{
																				"kind": "number",
																				"nodeType": "YulLiteral",
																				"src": "9981:2:13",
																				"type": "",
																				"value": "32"
																			}
																		],
																		"functionName": {
																			"name": "add",
																			"nodeType": "YulIdentifier",
																			"src": "9966:3:13"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "9966:18:13"
																	},
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "9986:2:13",
																		"type": "",
																		"value": "55"
																	}
																],
																"functionName": {
																	"name": "mstore",
																	"nodeType": "YulIdentifier",
																	"src": "9959:6:13"
																},
																"nodeType": "YulFunctionCall",
																"src": "9959:30:13"
															},
															"nodeType": "YulExpressionStatement",
															"src": "9959:30:13"
														},
														{
															"expression": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"name": "headStart",
																				"nodeType": "YulIdentifier",
																				"src": "10009:9:13"
																			},
																			{
																				"kind": "number",
																				"nodeType": "YulLiteral",
																				"src": "10020:2:13",
																				"type": "",
																				"value": "64"
																			}
																		],
																		"functionName": {
																			"name": "add",
																			"nodeType": "YulIdentifier",
																			"src": "10005:3:13"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "10005:18:13"
																	},
																	{
																		"hexValue": "43727970746f42756c6c446f67733a3a2043616e6e6f74206d696e7420626579",
																		"kind": "string",
																		"nodeType": "YulLiteral",
																		"src": "10025:34:13",
																		"type": "",
																		"value": "CryptoBullDogs:: Cannot mint bey"
																	}
																],
																"functionName": {
																	"name": "mstore",
																	"nodeType": "YulIdentifier",
																	"src": "9998:6:13"
																},
																"nodeType": "YulFunctionCall",
																"src": "9998:62:13"
															},
															"nodeType": "YulExpressionStatement",
															"src": "9998:62:13"
														},
														{
															"expression": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"name": "headStart",
																				"nodeType": "YulIdentifier",
																				"src": "10080:9:13"
																			},
																			{
																				"kind": "number",
																				"nodeType": "YulLiteral",
																				"src": "10091:2:13",
																				"type": "",
																				"value": "96"
																			}
																		],
																		"functionName": {
																			"name": "add",
																			"nodeType": "YulIdentifier",
																			"src": "10076:3:13"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "10076:18:13"
																	},
																	{
																		"hexValue": "6f6e642077686974656c697374206d6178206d696e7421",
																		"kind": "string",
																		"nodeType": "YulLiteral",
																		"src": "10096:25:13",
																		"type": "",
																		"value": "ond whitelist max mint!"
																	}
																],
																"functionName": {
																	"name": "mstore",
																	"nodeType": "YulIdentifier",
																	"src": "10069:6:13"
																},
																"nodeType": "YulFunctionCall",
																"src": "10069:53:13"
															},
															"nodeType": "YulExpressionStatement",
															"src": "10069:53:13"
														},
														{
															"nodeType": "YulAssignment",
															"src": "10131:27:13",
															"value": {
																"arguments": [
																	{
																		"name": "headStart",
																		"nodeType": "YulIdentifier",
																		"src": "10143:9:13"
																	},
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "10154:3:13",
																		"type": "",
																		"value": "128"
																	}
																],
																"functionName": {
																	"name": "add",
																	"nodeType": "YulIdentifier",
																	"src": "10139:3:13"
																},
																"nodeType": "YulFunctionCall",
																"src": "10139:19:13"
															},
															"variableNames": [
																{
																	"name": "tail",
																	"nodeType": "YulIdentifier",
																	"src": "10131:4:13"
																}
															]
														}
													]
												},
												"name": "abi_encode_tuple_t_stringliteral_a7784544cb8b9a65a2b0965c3345ca15fb09d360c00de0cc8d856dad61d1ba77__to_t_string_memory_ptr__fromStack_reversed",
												"nodeType": "YulFunctionDefinition",
												"parameters": [
													{
														"name": "headStart",
														"nodeType": "YulTypedName",
														"src": "9896:9:13",
														"type": ""
													}
												],
												"returnVariables": [
													{
														"name": "tail",
														"nodeType": "YulTypedName",
														"src": "9910:4:13",
														"type": ""
													}
												],
												"src": "9745:419:13"
											},
											{
												"body": {
													"nodeType": "YulBlock",
													"src": "10221:116:13",
													"statements": [
														{
															"body": {
																"nodeType": "YulBlock",
																"src": "10280:22:13",
																"statements": [
																	{
																		"expression": {
																			"arguments": [],
																			"functionName": {
																				"name": "panic_error_0x11",
																				"nodeType": "YulIdentifier",
																				"src": "10282:16:13"
																			},
																			"nodeType": "YulFunctionCall",
																			"src": "10282:18:13"
																		},
																		"nodeType": "YulExpressionStatement",
																		"src": "10282:18:13"
																	}
																]
															},
															"condition": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"arguments": [
																					{
																						"name": "x",
																						"nodeType": "YulIdentifier",
																						"src": "10252:1:13"
																					}
																				],
																				"functionName": {
																					"name": "iszero",
																					"nodeType": "YulIdentifier",
																					"src": "10245:6:13"
																				},
																				"nodeType": "YulFunctionCall",
																				"src": "10245:9:13"
																			}
																		],
																		"functionName": {
																			"name": "iszero",
																			"nodeType": "YulIdentifier",
																			"src": "10238:6:13"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "10238:17:13"
																	},
																	{
																		"arguments": [
																			{
																				"name": "y",
																				"nodeType": "YulIdentifier",
																				"src": "10260:1:13"
																			},
																			{
																				"arguments": [
																					{
																						"arguments": [
																							{
																								"kind": "number",
																								"nodeType": "YulLiteral",
																								"src": "10271:1:13",
																								"type": "",
																								"value": "0"
																							}
																						],
																						"functionName": {
																							"name": "not",
																							"nodeType": "YulIdentifier",
																							"src": "10267:3:13"
																						},
																						"nodeType": "YulFunctionCall",
																						"src": "10267:6:13"
																					},
																					{
																						"name": "x",
																						"nodeType": "YulIdentifier",
																						"src": "10275:1:13"
																					}
																				],
																				"functionName": {
																					"name": "div",
																					"nodeType": "YulIdentifier",
																					"src": "10263:3:13"
																				},
																				"nodeType": "YulFunctionCall",
																				"src": "10263:14:13"
																			}
																		],
																		"functionName": {
																			"name": "gt",
																			"nodeType": "YulIdentifier",
																			"src": "10257:2:13"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "10257:21:13"
																	}
																],
																"functionName": {
																	"name": "and",
																	"nodeType": "YulIdentifier",
																	"src": "10234:3:13"
																},
																"nodeType": "YulFunctionCall",
																"src": "10234:45:13"
															},
															"nodeType": "YulIf",
															"src": "10231:71:13"
														},
														{
															"nodeType": "YulAssignment",
															"src": "10311:20:13",
															"value": {
																"arguments": [
																	{
																		"name": "x",
																		"nodeType": "YulIdentifier",
																		"src": "10326:1:13"
																	},
																	{
																		"name": "y",
																		"nodeType": "YulIdentifier",
																		"src": "10329:1:13"
																	}
																],
																"functionName": {
																	"name": "mul",
																	"nodeType": "YulIdentifier",
																	"src": "10322:3:13"
																},
																"nodeType": "YulFunctionCall",
																"src": "10322:9:13"
															},
															"variableNames": [
																{
																	"name": "product",
																	"nodeType": "YulIdentifier",
																	"src": "10311:7:13"
																}
															]
														}
													]
												},
												"name": "checked_mul_t_uint256",
												"nodeType": "YulFunctionDefinition",
												"parameters": [
													{
														"name": "x",
														"nodeType": "YulTypedName",
														"src": "10200:1:13",
														"type": ""
													},
													{
														"name": "y",
														"nodeType": "YulTypedName",
														"src": "10203:1:13",
														"type": ""
													}
												],
												"returnVariables": [
													{
														"name": "product",
														"nodeType": "YulTypedName",
														"src": "10209:7:13",
														"type": ""
													}
												],
												"src": "10169:168:13"
											},
											{
												"body": {
													"nodeType": "YulBlock",
													"src": "10516:234:13",
													"statements": [
														{
															"expression": {
																"arguments": [
																	{
																		"name": "headStart",
																		"nodeType": "YulIdentifier",
																		"src": "10533:9:13"
																	},
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "10544:2:13",
																		"type": "",
																		"value": "32"
																	}
																],
																"functionName": {
																	"name": "mstore",
																	"nodeType": "YulIdentifier",
																	"src": "10526:6:13"
																},
																"nodeType": "YulFunctionCall",
																"src": "10526:21:13"
															},
															"nodeType": "YulExpressionStatement",
															"src": "10526:21:13"
														},
														{
															"expression": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"name": "headStart",
																				"nodeType": "YulIdentifier",
																				"src": "10567:9:13"
																			},
																			{
																				"kind": "number",
																				"nodeType": "YulLiteral",
																				"src": "10578:2:13",
																				"type": "",
																				"value": "32"
																			}
																		],
																		"functionName": {
																			"name": "add",
																			"nodeType": "YulIdentifier",
																			"src": "10563:3:13"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "10563:18:13"
																	},
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "10583:2:13",
																		"type": "",
																		"value": "44"
																	}
																],
																"functionName": {
																	"name": "mstore",
																	"nodeType": "YulIdentifier",
																	"src": "10556:6:13"
																},
																"nodeType": "YulFunctionCall",
																"src": "10556:30:13"
															},
															"nodeType": "YulExpressionStatement",
															"src": "10556:30:13"
														},
														{
															"expression": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"name": "headStart",
																				"nodeType": "YulIdentifier",
																				"src": "10606:9:13"
																			},
																			{
																				"kind": "number",
																				"nodeType": "YulLiteral",
																				"src": "10617:2:13",
																				"type": "",
																				"value": "64"
																			}
																		],
																		"functionName": {
																			"name": "add",
																			"nodeType": "YulIdentifier",
																			"src": "10602:3:13"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "10602:18:13"
																	},
																	{
																		"hexValue": "43727970746f42756c6c446f6773203a3a205061796d656e742069732062656c",
																		"kind": "string",
																		"nodeType": "YulLiteral",
																		"src": "10622:34:13",
																		"type": "",
																		"value": "CryptoBullDogs :: Payment is bel"
																	}
																],
																"functionName": {
																	"name": "mstore",
																	"nodeType": "YulIdentifier",
																	"src": "10595:6:13"
																},
																"nodeType": "YulFunctionCall",
																"src": "10595:62:13"
															},
															"nodeType": "YulExpressionStatement",
															"src": "10595:62:13"
														},
														{
															"expression": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"name": "headStart",
																				"nodeType": "YulIdentifier",
																				"src": "10677:9:13"
																			},
																			{
																				"kind": "number",
																				"nodeType": "YulLiteral",
																				"src": "10688:2:13",
																				"type": "",
																				"value": "96"
																			}
																		],
																		"functionName": {
																			"name": "add",
																			"nodeType": "YulIdentifier",
																			"src": "10673:3:13"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "10673:18:13"
																	},
																	{
																		"hexValue": "6f7720746865207072696365",
																		"kind": "string",
																		"nodeType": "YulLiteral",
																		"src": "10693:14:13",
																		"type": "",
																		"value": "ow the price"
																	}
																],
																"functionName": {
																	"name": "mstore",
																	"nodeType": "YulIdentifier",
																	"src": "10666:6:13"
																},
																"nodeType": "YulFunctionCall",
																"src": "10666:42:13"
															},
															"nodeType": "YulExpressionStatement",
															"src": "10666:42:13"
														},
														{
															"nodeType": "YulAssignment",
															"src": "10717:27:13",
															"value": {
																"arguments": [
																	{
																		"name": "headStart",
																		"nodeType": "YulIdentifier",
																		"src": "10729:9:13"
																	},
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "10740:3:13",
																		"type": "",
																		"value": "128"
																	}
																],
																"functionName": {
																	"name": "add",
																	"nodeType": "YulIdentifier",
																	"src": "10725:3:13"
																},
																"nodeType": "YulFunctionCall",
																"src": "10725:19:13"
															},
															"variableNames": [
																{
																	"name": "tail",
																	"nodeType": "YulIdentifier",
																	"src": "10717:4:13"
																}
															]
														}
													]
												},
												"name": "abi_encode_tuple_t_stringliteral_3f5ae172148f1a839b485a0b667d45729d23a3f71a8af08708a3cd4714b3609f__to_t_string_memory_ptr__fromStack_reversed",
												"nodeType": "YulFunctionDefinition",
												"parameters": [
													{
														"name": "headStart",
														"nodeType": "YulTypedName",
														"src": "10493:9:13",
														"type": ""
													}
												],
												"returnVariables": [
													{
														"name": "tail",
														"nodeType": "YulTypedName",
														"src": "10507:4:13",
														"type": ""
													}
												],
												"src": "10342:408:13"
											},
											{
												"body": {
													"nodeType": "YulBlock",
													"src": "10874:110:13",
													"statements": [
														{
															"expression": {
																"arguments": [
																	{
																		"name": "pos",
																		"nodeType": "YulIdentifier",
																		"src": "10891:3:13"
																	},
																	{
																		"arguments": [
																			{
																				"arguments": [
																					{
																						"kind": "number",
																						"nodeType": "YulLiteral",
																						"src": "10904:2:13",
																						"type": "",
																						"value": "96"
																					},
																					{
																						"name": "value0",
																						"nodeType": "YulIdentifier",
																						"src": "10908:6:13"
																					}
																				],
																				"functionName": {
																					"name": "shl",
																					"nodeType": "YulIdentifier",
																					"src": "10900:3:13"
																				},
																				"nodeType": "YulFunctionCall",
																				"src": "10900:15:13"
																			},
																			{
																				"arguments": [
																					{
																						"kind": "number",
																						"nodeType": "YulLiteral",
																						"src": "10921:26:13",
																						"type": "",
																						"value": "0xffffffffffffffffffffffff"
																					}
																				],
																				"functionName": {
																					"name": "not",
																					"nodeType": "YulIdentifier",
																					"src": "10917:3:13"
																				},
																				"nodeType": "YulFunctionCall",
																				"src": "10917:31:13"
																			}
																		],
																		"functionName": {
																			"name": "and",
																			"nodeType": "YulIdentifier",
																			"src": "10896:3:13"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "10896:53:13"
																	}
																],
																"functionName": {
																	"name": "mstore",
																	"nodeType": "YulIdentifier",
																	"src": "10884:6:13"
																},
																"nodeType": "YulFunctionCall",
																"src": "10884:66:13"
															},
															"nodeType": "YulExpressionStatement",
															"src": "10884:66:13"
														},
														{
															"nodeType": "YulAssignment",
															"src": "10959:19:13",
															"value": {
																"arguments": [
																	{
																		"name": "pos",
																		"nodeType": "YulIdentifier",
																		"src": "10970:3:13"
																	},
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "10975:2:13",
																		"type": "",
																		"value": "20"
																	}
																],
																"functionName": {
																	"name": "add",
																	"nodeType": "YulIdentifier",
																	"src": "10966:3:13"
																},
																"nodeType": "YulFunctionCall",
																"src": "10966:12:13"
															},
															"variableNames": [
																{
																	"name": "end",
																	"nodeType": "YulIdentifier",
																	"src": "10959:3:13"
																}
															]
														}
													]
												},
												"name": "abi_encode_tuple_packed_t_address__to_t_address__nonPadded_inplace_fromStack_reversed",
												"nodeType": "YulFunctionDefinition",
												"parameters": [
													{
														"name": "pos",
														"nodeType": "YulTypedName",
														"src": "10850:3:13",
														"type": ""
													},
													{
														"name": "value0",
														"nodeType": "YulTypedName",
														"src": "10855:6:13",
														"type": ""
													}
												],
												"returnVariables": [
													{
														"name": "end",
														"nodeType": "YulTypedName",
														"src": "10866:3:13",
														"type": ""
													}
												],
												"src": "10755:229:13"
											},
											{
												"body": {
													"nodeType": "YulBlock",
													"src": "11163:231:13",
													"statements": [
														{
															"expression": {
																"arguments": [
																	{
																		"name": "headStart",
																		"nodeType": "YulIdentifier",
																		"src": "11180:9:13"
																	},
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "11191:2:13",
																		"type": "",
																		"value": "32"
																	}
																],
																"functionName": {
																	"name": "mstore",
																	"nodeType": "YulIdentifier",
																	"src": "11173:6:13"
																},
																"nodeType": "YulFunctionCall",
																"src": "11173:21:13"
															},
															"nodeType": "YulExpressionStatement",
															"src": "11173:21:13"
														},
														{
															"expression": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"name": "headStart",
																				"nodeType": "YulIdentifier",
																				"src": "11214:9:13"
																			},
																			{
																				"kind": "number",
																				"nodeType": "YulLiteral",
																				"src": "11225:2:13",
																				"type": "",
																				"value": "32"
																			}
																		],
																		"functionName": {
																			"name": "add",
																			"nodeType": "YulIdentifier",
																			"src": "11210:3:13"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "11210:18:13"
																	},
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "11230:2:13",
																		"type": "",
																		"value": "41"
																	}
																],
																"functionName": {
																	"name": "mstore",
																	"nodeType": "YulIdentifier",
																	"src": "11203:6:13"
																},
																"nodeType": "YulFunctionCall",
																"src": "11203:30:13"
															},
															"nodeType": "YulExpressionStatement",
															"src": "11203:30:13"
														},
														{
															"expression": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"name": "headStart",
																				"nodeType": "YulIdentifier",
																				"src": "11253:9:13"
																			},
																			{
																				"kind": "number",
																				"nodeType": "YulLiteral",
																				"src": "11264:2:13",
																				"type": "",
																				"value": "64"
																			}
																		],
																		"functionName": {
																			"name": "add",
																			"nodeType": "YulIdentifier",
																			"src": "11249:3:13"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "11249:18:13"
																	},
																	{
																		"hexValue": "43727970746f42756c6c446f6773203a3a20596f7520617265206e6f74207768",
																		"kind": "string",
																		"nodeType": "YulLiteral",
																		"src": "11269:34:13",
																		"type": "",
																		"value": "CryptoBullDogs :: You are not wh"
																	}
																],
																"functionName": {
																	"name": "mstore",
																	"nodeType": "YulIdentifier",
																	"src": "11242:6:13"
																},
																"nodeType": "YulFunctionCall",
																"src": "11242:62:13"
															},
															"nodeType": "YulExpressionStatement",
															"src": "11242:62:13"
														},
														{
															"expression": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"name": "headStart",
																				"nodeType": "YulIdentifier",
																				"src": "11324:9:13"
																			},
																			{
																				"kind": "number",
																				"nodeType": "YulLiteral",
																				"src": "11335:2:13",
																				"type": "",
																				"value": "96"
																			}
																		],
																		"functionName": {
																			"name": "add",
																			"nodeType": "YulIdentifier",
																			"src": "11320:3:13"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "11320:18:13"
																	},
																	{
																		"hexValue": "6974656c6973746564",
																		"kind": "string",
																		"nodeType": "YulLiteral",
																		"src": "11340:11:13",
																		"type": "",
																		"value": "itelisted"
																	}
																],
																"functionName": {
																	"name": "mstore",
																	"nodeType": "YulIdentifier",
																	"src": "11313:6:13"
																},
																"nodeType": "YulFunctionCall",
																"src": "11313:39:13"
															},
															"nodeType": "YulExpressionStatement",
															"src": "11313:39:13"
														},
														{
															"nodeType": "YulAssignment",
															"src": "11361:27:13",
															"value": {
																"arguments": [
																	{
																		"name": "headStart",
																		"nodeType": "YulIdentifier",
																		"src": "11373:9:13"
																	},
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "11384:3:13",
																		"type": "",
																		"value": "128"
																	}
																],
																"functionName": {
																	"name": "add",
																	"nodeType": "YulIdentifier",
																	"src": "11369:3:13"
																},
																"nodeType": "YulFunctionCall",
																"src": "11369:19:13"
															},
															"variableNames": [
																{
																	"name": "tail",
																	"nodeType": "YulIdentifier",
																	"src": "11361:4:13"
																}
															]
														}
													]
												},
												"name": "abi_encode_tuple_t_stringliteral_d9829f603a2b359b234b0a0f735ae7dd63ba4e2bffa17e8480bd5f19fbc111cd__to_t_string_memory_ptr__fromStack_reversed",
												"nodeType": "YulFunctionDefinition",
												"parameters": [
													{
														"name": "headStart",
														"nodeType": "YulTypedName",
														"src": "11140:9:13",
														"type": ""
													}
												],
												"returnVariables": [
													{
														"name": "tail",
														"nodeType": "YulTypedName",
														"src": "11154:4:13",
														"type": ""
													}
												],
												"src": "10989:405:13"
											},
											{
												"body": {
													"nodeType": "YulBlock",
													"src": "11431:95:13",
													"statements": [
														{
															"expression": {
																"arguments": [
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "11448:1:13",
																		"type": "",
																		"value": "0"
																	},
																	{
																		"arguments": [
																			{
																				"kind": "number",
																				"nodeType": "YulLiteral",
																				"src": "11455:3:13",
																				"type": "",
																				"value": "224"
																			},
																			{
																				"kind": "number",
																				"nodeType": "YulLiteral",
																				"src": "11460:10:13",
																				"type": "",
																				"value": "0x4e487b71"
																			}
																		],
																		"functionName": {
																			"name": "shl",
																			"nodeType": "YulIdentifier",
																			"src": "11451:3:13"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "11451:20:13"
																	}
																],
																"functionName": {
																	"name": "mstore",
																	"nodeType": "YulIdentifier",
																	"src": "11441:6:13"
																},
																"nodeType": "YulFunctionCall",
																"src": "11441:31:13"
															},
															"nodeType": "YulExpressionStatement",
															"src": "11441:31:13"
														},
														{
															"expression": {
																"arguments": [
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "11488:1:13",
																		"type": "",
																		"value": "4"
																	},
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "11491:4:13",
																		"type": "",
																		"value": "0x12"
																	}
																],
																"functionName": {
																	"name": "mstore",
																	"nodeType": "YulIdentifier",
																	"src": "11481:6:13"
																},
																"nodeType": "YulFunctionCall",
																"src": "11481:15:13"
															},
															"nodeType": "YulExpressionStatement",
															"src": "11481:15:13"
														},
														{
															"expression": {
																"arguments": [
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "11512:1:13",
																		"type": "",
																		"value": "0"
																	},
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "11515:4:13",
																		"type": "",
																		"value": "0x24"
																	}
																],
																"functionName": {
																	"name": "revert",
																	"nodeType": "YulIdentifier",
																	"src": "11505:6:13"
																},
																"nodeType": "YulFunctionCall",
																"src": "11505:15:13"
															},
															"nodeType": "YulExpressionStatement",
															"src": "11505:15:13"
														}
													]
												},
												"name": "panic_error_0x12",
												"nodeType": "YulFunctionDefinition",
												"src": "11399:127:13"
											},
											{
												"body": {
													"nodeType": "YulBlock",
													"src": "11577:74:13",
													"statements": [
														{
															"body": {
																"nodeType": "YulBlock",
																"src": "11600:22:13",
																"statements": [
																	{
																		"expression": {
																			"arguments": [],
																			"functionName": {
																				"name": "panic_error_0x12",
																				"nodeType": "YulIdentifier",
																				"src": "11602:16:13"
																			},
																			"nodeType": "YulFunctionCall",
																			"src": "11602:18:13"
																		},
																		"nodeType": "YulExpressionStatement",
																		"src": "11602:18:13"
																	}
																]
															},
															"condition": {
																"arguments": [
																	{
																		"name": "y",
																		"nodeType": "YulIdentifier",
																		"src": "11597:1:13"
																	}
																],
																"functionName": {
																	"name": "iszero",
																	"nodeType": "YulIdentifier",
																	"src": "11590:6:13"
																},
																"nodeType": "YulFunctionCall",
																"src": "11590:9:13"
															},
															"nodeType": "YulIf",
															"src": "11587:35:13"
														},
														{
															"nodeType": "YulAssignment",
															"src": "11631:14:13",
															"value": {
																"arguments": [
																	{
																		"name": "x",
																		"nodeType": "YulIdentifier",
																		"src": "11640:1:13"
																	},
																	{
																		"name": "y",
																		"nodeType": "YulIdentifier",
																		"src": "11643:1:13"
																	}
																],
																"functionName": {
																	"name": "div",
																	"nodeType": "YulIdentifier",
																	"src": "11636:3:13"
																},
																"nodeType": "YulFunctionCall",
																"src": "11636:9:13"
															},
															"variableNames": [
																{
																	"name": "r",
																	"nodeType": "YulIdentifier",
																	"src": "11631:1:13"
																}
															]
														}
													]
												},
												"name": "checked_div_t_uint256",
												"nodeType": "YulFunctionDefinition",
												"parameters": [
													{
														"name": "x",
														"nodeType": "YulTypedName",
														"src": "11562:1:13",
														"type": ""
													},
													{
														"name": "y",
														"nodeType": "YulTypedName",
														"src": "11565:1:13",
														"type": ""
													}
												],
												"returnVariables": [
													{
														"name": "r",
														"nodeType": "YulTypedName",
														"src": "11571:1:13",
														"type": ""
													}
												],
												"src": "11531:120:13"
											},
											{
												"body": {
													"nodeType": "YulBlock",
													"src": "11703:88:13",
													"statements": [
														{
															"body": {
																"nodeType": "YulBlock",
																"src": "11734:22:13",
																"statements": [
																	{
																		"expression": {
																			"arguments": [],
																			"functionName": {
																				"name": "panic_error_0x11",
																				"nodeType": "YulIdentifier",
																				"src": "11736:16:13"
																			},
																			"nodeType": "YulFunctionCall",
																			"src": "11736:18:13"
																		},
																		"nodeType": "YulExpressionStatement",
																		"src": "11736:18:13"
																	}
																]
															},
															"condition": {
																"arguments": [
																	{
																		"name": "value",
																		"nodeType": "YulIdentifier",
																		"src": "11719:5:13"
																	},
																	{
																		"arguments": [
																			{
																				"kind": "number",
																				"nodeType": "YulLiteral",
																				"src": "11730:1:13",
																				"type": "",
																				"value": "0"
																			}
																		],
																		"functionName": {
																			"name": "not",
																			"nodeType": "YulIdentifier",
																			"src": "11726:3:13"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "11726:6:13"
																	}
																],
																"functionName": {
																	"name": "eq",
																	"nodeType": "YulIdentifier",
																	"src": "11716:2:13"
																},
																"nodeType": "YulFunctionCall",
																"src": "11716:17:13"
															},
															"nodeType": "YulIf",
															"src": "11713:43:13"
														},
														{
															"nodeType": "YulAssignment",
															"src": "11765:20:13",
															"value": {
																"arguments": [
																	{
																		"name": "value",
																		"nodeType": "YulIdentifier",
																		"src": "11776:5:13"
																	},
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "11783:1:13",
																		"type": "",
																		"value": "1"
																	}
																],
																"functionName": {
																	"name": "add",
																	"nodeType": "YulIdentifier",
																	"src": "11772:3:13"
																},
																"nodeType": "YulFunctionCall",
																"src": "11772:13:13"
															},
															"variableNames": [
																{
																	"name": "ret",
																	"nodeType": "YulIdentifier",
																	"src": "11765:3:13"
																}
															]
														}
													]
												},
												"name": "increment_t_uint256",
												"nodeType": "YulFunctionDefinition",
												"parameters": [
													{
														"name": "value",
														"nodeType": "YulTypedName",
														"src": "11685:5:13",
														"type": ""
													}
												],
												"returnVariables": [
													{
														"name": "ret",
														"nodeType": "YulTypedName",
														"src": "11695:3:13",
														"type": ""
													}
												],
												"src": "11656:135:13"
											},
											{
												"body": {
													"nodeType": "YulBlock",
													"src": "11970:223:13",
													"statements": [
														{
															"expression": {
																"arguments": [
																	{
																		"name": "headStart",
																		"nodeType": "YulIdentifier",
																		"src": "11987:9:13"
																	},
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "11998:2:13",
																		"type": "",
																		"value": "32"
																	}
																],
																"functionName": {
																	"name": "mstore",
																	"nodeType": "YulIdentifier",
																	"src": "11980:6:13"
																},
																"nodeType": "YulFunctionCall",
																"src": "11980:21:13"
															},
															"nodeType": "YulExpressionStatement",
															"src": "11980:21:13"
														},
														{
															"expression": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"name": "headStart",
																				"nodeType": "YulIdentifier",
																				"src": "12021:9:13"
																			},
																			{
																				"kind": "number",
																				"nodeType": "YulLiteral",
																				"src": "12032:2:13",
																				"type": "",
																				"value": "32"
																			}
																		],
																		"functionName": {
																			"name": "add",
																			"nodeType": "YulIdentifier",
																			"src": "12017:3:13"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "12017:18:13"
																	},
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "12037:2:13",
																		"type": "",
																		"value": "33"
																	}
																],
																"functionName": {
																	"name": "mstore",
																	"nodeType": "YulIdentifier",
																	"src": "12010:6:13"
																},
																"nodeType": "YulFunctionCall",
																"src": "12010:30:13"
															},
															"nodeType": "YulExpressionStatement",
															"src": "12010:30:13"
														},
														{
															"expression": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"name": "headStart",
																				"nodeType": "YulIdentifier",
																				"src": "12060:9:13"
																			},
																			{
																				"kind": "number",
																				"nodeType": "YulLiteral",
																				"src": "12071:2:13",
																				"type": "",
																				"value": "64"
																			}
																		],
																		"functionName": {
																			"name": "add",
																			"nodeType": "YulIdentifier",
																			"src": "12056:3:13"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "12056:18:13"
																	},
																	{
																		"hexValue": "43727970746f42756c6c446f6773203a3a204e6f742059657420416374697665",
																		"kind": "string",
																		"nodeType": "YulLiteral",
																		"src": "12076:34:13",
																		"type": "",
																		"value": "CryptoBullDogs :: Not Yet Active"
																	}
																],
																"functionName": {
																	"name": "mstore",
																	"nodeType": "YulIdentifier",
																	"src": "12049:6:13"
																},
																"nodeType": "YulFunctionCall",
																"src": "12049:62:13"
															},
															"nodeType": "YulExpressionStatement",
															"src": "12049:62:13"
														},
														{
															"expression": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"name": "headStart",
																				"nodeType": "YulIdentifier",
																				"src": "12131:9:13"
																			},
																			{
																				"kind": "number",
																				"nodeType": "YulLiteral",
																				"src": "12142:2:13",
																				"type": "",
																				"value": "96"
																			}
																		],
																		"functionName": {
																			"name": "add",
																			"nodeType": "YulIdentifier",
																			"src": "12127:3:13"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "12127:18:13"
																	},
																	{
																		"hexValue": "2e",
																		"kind": "string",
																		"nodeType": "YulLiteral",
																		"src": "12147:3:13",
																		"type": "",
																		"value": "."
																	}
																],
																"functionName": {
																	"name": "mstore",
																	"nodeType": "YulIdentifier",
																	"src": "12120:6:13"
																},
																"nodeType": "YulFunctionCall",
																"src": "12120:31:13"
															},
															"nodeType": "YulExpressionStatement",
															"src": "12120:31:13"
														},
														{
															"nodeType": "YulAssignment",
															"src": "12160:27:13",
															"value": {
																"arguments": [
																	{
																		"name": "headStart",
																		"nodeType": "YulIdentifier",
																		"src": "12172:9:13"
																	},
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "12183:3:13",
																		"type": "",
																		"value": "128"
																	}
																],
																"functionName": {
																	"name": "add",
																	"nodeType": "YulIdentifier",
																	"src": "12168:3:13"
																},
																"nodeType": "YulFunctionCall",
																"src": "12168:19:13"
															},
															"variableNames": [
																{
																	"name": "tail",
																	"nodeType": "YulIdentifier",
																	"src": "12160:4:13"
																}
															]
														}
													]
												},
												"name": "abi_encode_tuple_t_stringliteral_4564d982d90210332958c1167d5b8793ec62b7f630d1d2edde455ef94ad8862d__to_t_string_memory_ptr__fromStack_reversed",
												"nodeType": "YulFunctionDefinition",
												"parameters": [
													{
														"name": "headStart",
														"nodeType": "YulTypedName",
														"src": "11947:9:13",
														"type": ""
													}
												],
												"returnVariables": [
													{
														"name": "tail",
														"nodeType": "YulTypedName",
														"src": "11961:4:13",
														"type": ""
													}
												],
												"src": "11796:397:13"
											},
											{
												"body": {
													"nodeType": "YulBlock",
													"src": "12372:225:13",
													"statements": [
														{
															"expression": {
																"arguments": [
																	{
																		"name": "headStart",
																		"nodeType": "YulIdentifier",
																		"src": "12389:9:13"
																	},
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "12400:2:13",
																		"type": "",
																		"value": "32"
																	}
																],
																"functionName": {
																	"name": "mstore",
																	"nodeType": "YulIdentifier",
																	"src": "12382:6:13"
																},
																"nodeType": "YulFunctionCall",
																"src": "12382:21:13"
															},
															"nodeType": "YulExpressionStatement",
															"src": "12382:21:13"
														},
														{
															"expression": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"name": "headStart",
																				"nodeType": "YulIdentifier",
																				"src": "12423:9:13"
																			},
																			{
																				"kind": "number",
																				"nodeType": "YulLiteral",
																				"src": "12434:2:13",
																				"type": "",
																				"value": "32"
																			}
																		],
																		"functionName": {
																			"name": "add",
																			"nodeType": "YulIdentifier",
																			"src": "12419:3:13"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "12419:18:13"
																	},
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "12439:2:13",
																		"type": "",
																		"value": "35"
																	}
																],
																"functionName": {
																	"name": "mstore",
																	"nodeType": "YulIdentifier",
																	"src": "12412:6:13"
																},
																"nodeType": "YulFunctionCall",
																"src": "12412:30:13"
															},
															"nodeType": "YulExpressionStatement",
															"src": "12412:30:13"
														},
														{
															"expression": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"name": "headStart",
																				"nodeType": "YulIdentifier",
																				"src": "12462:9:13"
																			},
																			{
																				"kind": "number",
																				"nodeType": "YulLiteral",
																				"src": "12473:2:13",
																				"type": "",
																				"value": "64"
																			}
																		],
																		"functionName": {
																			"name": "add",
																			"nodeType": "YulIdentifier",
																			"src": "12458:3:13"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "12458:18:13"
																	},
																	{
																		"hexValue": "43727970746f42756c6c446f6773203a3a204265796f6e64204d617820537570",
																		"kind": "string",
																		"nodeType": "YulLiteral",
																		"src": "12478:34:13",
																		"type": "",
																		"value": "CryptoBullDogs :: Beyond Max Sup"
																	}
																],
																"functionName": {
																	"name": "mstore",
																	"nodeType": "YulIdentifier",
																	"src": "12451:6:13"
																},
																"nodeType": "YulFunctionCall",
																"src": "12451:62:13"
															},
															"nodeType": "YulExpressionStatement",
															"src": "12451:62:13"
														},
														{
															"expression": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"name": "headStart",
																				"nodeType": "YulIdentifier",
																				"src": "12533:9:13"
																			},
																			{
																				"kind": "number",
																				"nodeType": "YulLiteral",
																				"src": "12544:2:13",
																				"type": "",
																				"value": "96"
																			}
																		],
																		"functionName": {
																			"name": "add",
																			"nodeType": "YulIdentifier",
																			"src": "12529:3:13"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "12529:18:13"
																	},
																	{
																		"hexValue": "706c79",
																		"kind": "string",
																		"nodeType": "YulLiteral",
																		"src": "12549:5:13",
																		"type": "",
																		"value": "ply"
																	}
																],
																"functionName": {
																	"name": "mstore",
																	"nodeType": "YulIdentifier",
																	"src": "12522:6:13"
																},
																"nodeType": "YulFunctionCall",
																"src": "12522:33:13"
															},
															"nodeType": "YulExpressionStatement",
															"src": "12522:33:13"
														},
														{
															"nodeType": "YulAssignment",
															"src": "12564:27:13",
															"value": {
																"arguments": [
																	{
																		"name": "headStart",
																		"nodeType": "YulIdentifier",
																		"src": "12576:9:13"
																	},
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "12587:3:13",
																		"type": "",
																		"value": "128"
																	}
																],
																"functionName": {
																	"name": "add",
																	"nodeType": "YulIdentifier",
																	"src": "12572:3:13"
																},
																"nodeType": "YulFunctionCall",
																"src": "12572:19:13"
															},
															"variableNames": [
																{
																	"name": "tail",
																	"nodeType": "YulIdentifier",
																	"src": "12564:4:13"
																}
															]
														}
													]
												},
												"name": "abi_encode_tuple_t_stringliteral_b6c181b21e441452ee7d7a7c60b6959a4f4ea0ea4d2d03845776065ae0fba129__to_t_string_memory_ptr__fromStack_reversed",
												"nodeType": "YulFunctionDefinition",
												"parameters": [
													{
														"name": "headStart",
														"nodeType": "YulTypedName",
														"src": "12349:9:13",
														"type": ""
													}
												],
												"returnVariables": [
													{
														"name": "tail",
														"nodeType": "YulTypedName",
														"src": "12363:4:13",
														"type": ""
													}
												],
												"src": "12198:399:13"
											},
											{
												"body": {
													"nodeType": "YulBlock",
													"src": "12776:231:13",
													"statements": [
														{
															"expression": {
																"arguments": [
																	{
																		"name": "headStart",
																		"nodeType": "YulIdentifier",
																		"src": "12793:9:13"
																	},
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "12804:2:13",
																		"type": "",
																		"value": "32"
																	}
																],
																"functionName": {
																	"name": "mstore",
																	"nodeType": "YulIdentifier",
																	"src": "12786:6:13"
																},
																"nodeType": "YulFunctionCall",
																"src": "12786:21:13"
															},
															"nodeType": "YulExpressionStatement",
															"src": "12786:21:13"
														},
														{
															"expression": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"name": "headStart",
																				"nodeType": "YulIdentifier",
																				"src": "12827:9:13"
																			},
																			{
																				"kind": "number",
																				"nodeType": "YulLiteral",
																				"src": "12838:2:13",
																				"type": "",
																				"value": "32"
																			}
																		],
																		"functionName": {
																			"name": "add",
																			"nodeType": "YulIdentifier",
																			"src": "12823:3:13"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "12823:18:13"
																	},
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "12843:2:13",
																		"type": "",
																		"value": "41"
																	}
																],
																"functionName": {
																	"name": "mstore",
																	"nodeType": "YulIdentifier",
																	"src": "12816:6:13"
																},
																"nodeType": "YulFunctionCall",
																"src": "12816:30:13"
															},
															"nodeType": "YulExpressionStatement",
															"src": "12816:30:13"
														},
														{
															"expression": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"name": "headStart",
																				"nodeType": "YulIdentifier",
																				"src": "12866:9:13"
																			},
																			{
																				"kind": "number",
																				"nodeType": "YulLiteral",
																				"src": "12877:2:13",
																				"type": "",
																				"value": "64"
																			}
																		],
																		"functionName": {
																			"name": "add",
																			"nodeType": "YulIdentifier",
																			"src": "12862:3:13"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "12862:18:13"
																	},
																	{
																		"hexValue": "43727970746f42756c6c446f6773203a3a20416c7265616479206d696e746564",
																		"kind": "string",
																		"nodeType": "YulLiteral",
																		"src": "12882:34:13",
																		"type": "",
																		"value": "CryptoBullDogs :: Already minted"
																	}
																],
																"functionName": {
																	"name": "mstore",
																	"nodeType": "YulIdentifier",
																	"src": "12855:6:13"
																},
																"nodeType": "YulFunctionCall",
																"src": "12855:62:13"
															},
															"nodeType": "YulExpressionStatement",
															"src": "12855:62:13"
														},
														{
															"expression": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"name": "headStart",
																				"nodeType": "YulIdentifier",
																				"src": "12937:9:13"
																			},
																			{
																				"kind": "number",
																				"nodeType": "YulLiteral",
																				"src": "12948:2:13",
																				"type": "",
																				"value": "96"
																			}
																		],
																		"functionName": {
																			"name": "add",
																			"nodeType": "YulIdentifier",
																			"src": "12933:3:13"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "12933:18:13"
																	},
																	{
																		"hexValue": "20332074696d657321",
																		"kind": "string",
																		"nodeType": "YulLiteral",
																		"src": "12953:11:13",
																		"type": "",
																		"value": " 3 times!"
																	}
																],
																"functionName": {
																	"name": "mstore",
																	"nodeType": "YulIdentifier",
																	"src": "12926:6:13"
																},
																"nodeType": "YulFunctionCall",
																"src": "12926:39:13"
															},
															"nodeType": "YulExpressionStatement",
															"src": "12926:39:13"
														},
														{
															"nodeType": "YulAssignment",
															"src": "12974:27:13",
															"value": {
																"arguments": [
																	{
																		"name": "headStart",
																		"nodeType": "YulIdentifier",
																		"src": "12986:9:13"
																	},
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "12997:3:13",
																		"type": "",
																		"value": "128"
																	}
																],
																"functionName": {
																	"name": "add",
																	"nodeType": "YulIdentifier",
																	"src": "12982:3:13"
																},
																"nodeType": "YulFunctionCall",
																"src": "12982:19:13"
															},
															"variableNames": [
																{
																	"name": "tail",
																	"nodeType": "YulIdentifier",
																	"src": "12974:4:13"
																}
															]
														}
													]
												},
												"name": "abi_encode_tuple_t_stringliteral_d50224ebe3461b0a303d65927b666a283fb32c6ac10a95714d9f0a81b05788d6__to_t_string_memory_ptr__fromStack_reversed",
												"nodeType": "YulFunctionDefinition",
												"parameters": [
													{
														"name": "headStart",
														"nodeType": "YulTypedName",
														"src": "12753:9:13",
														"type": ""
													}
												],
												"returnVariables": [
													{
														"name": "tail",
														"nodeType": "YulTypedName",
														"src": "12767:4:13",
														"type": ""
													}
												],
												"src": "12602:405:13"
											},
											{
												"body": {
													"nodeType": "YulBlock",
													"src": "13186:174:13",
													"statements": [
														{
															"expression": {
																"arguments": [
																	{
																		"name": "headStart",
																		"nodeType": "YulIdentifier",
																		"src": "13203:9:13"
																	},
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "13214:2:13",
																		"type": "",
																		"value": "32"
																	}
																],
																"functionName": {
																	"name": "mstore",
																	"nodeType": "YulIdentifier",
																	"src": "13196:6:13"
																},
																"nodeType": "YulFunctionCall",
																"src": "13196:21:13"
															},
															"nodeType": "YulExpressionStatement",
															"src": "13196:21:13"
														},
														{
															"expression": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"name": "headStart",
																				"nodeType": "YulIdentifier",
																				"src": "13237:9:13"
																			},
																			{
																				"kind": "number",
																				"nodeType": "YulLiteral",
																				"src": "13248:2:13",
																				"type": "",
																				"value": "32"
																			}
																		],
																		"functionName": {
																			"name": "add",
																			"nodeType": "YulIdentifier",
																			"src": "13233:3:13"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "13233:18:13"
																	},
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "13253:2:13",
																		"type": "",
																		"value": "24"
																	}
																],
																"functionName": {
																	"name": "mstore",
																	"nodeType": "YulIdentifier",
																	"src": "13226:6:13"
																},
																"nodeType": "YulFunctionCall",
																"src": "13226:30:13"
															},
															"nodeType": "YulExpressionStatement",
															"src": "13226:30:13"
														},
														{
															"expression": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"name": "headStart",
																				"nodeType": "YulIdentifier",
																				"src": "13276:9:13"
																			},
																			{
																				"kind": "number",
																				"nodeType": "YulLiteral",
																				"src": "13287:2:13",
																				"type": "",
																				"value": "64"
																			}
																		],
																		"functionName": {
																			"name": "add",
																			"nodeType": "YulIdentifier",
																			"src": "13272:3:13"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "13272:18:13"
																	},
																	{
																		"hexValue": "43727970746f42756c6c446f6773203a3a2042656c6f7720",
																		"kind": "string",
																		"nodeType": "YulLiteral",
																		"src": "13292:26:13",
																		"type": "",
																		"value": "CryptoBullDogs :: Below "
																	}
																],
																"functionName": {
																	"name": "mstore",
																	"nodeType": "YulIdentifier",
																	"src": "13265:6:13"
																},
																"nodeType": "YulFunctionCall",
																"src": "13265:54:13"
															},
															"nodeType": "YulExpressionStatement",
															"src": "13265:54:13"
														},
														{
															"nodeType": "YulAssignment",
															"src": "13328:26:13",
															"value": {
																"arguments": [
																	{
																		"name": "headStart",
																		"nodeType": "YulIdentifier",
																		"src": "13340:9:13"
																	},
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "13351:2:13",
																		"type": "",
																		"value": "96"
																	}
																],
																"functionName": {
																	"name": "add",
																	"nodeType": "YulIdentifier",
																	"src": "13336:3:13"
																},
																"nodeType": "YulFunctionCall",
																"src": "13336:18:13"
															},
															"variableNames": [
																{
																	"name": "tail",
																	"nodeType": "YulIdentifier",
																	"src": "13328:4:13"
																}
															]
														}
													]
												},
												"name": "abi_encode_tuple_t_stringliteral_aea8008bf26276581196d49f4534f22b2d7f0710e7141375c13ff69906fe5f3c__to_t_string_memory_ptr__fromStack_reversed",
												"nodeType": "YulFunctionDefinition",
												"parameters": [
													{
														"name": "headStart",
														"nodeType": "YulTypedName",
														"src": "13163:9:13",
														"type": ""
													}
												],
												"returnVariables": [
													{
														"name": "tail",
														"nodeType": "YulTypedName",
														"src": "13177:4:13",
														"type": ""
													}
												],
												"src": "13012:348:13"
											},
											{
												"body": {
													"nodeType": "YulBlock",
													"src": "13539:227:13",
													"statements": [
														{
															"expression": {
																"arguments": [
																	{
																		"name": "headStart",
																		"nodeType": "YulIdentifier",
																		"src": "13556:9:13"
																	},
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "13567:2:13",
																		"type": "",
																		"value": "32"
																	}
																],
																"functionName": {
																	"name": "mstore",
																	"nodeType": "YulIdentifier",
																	"src": "13549:6:13"
																},
																"nodeType": "YulFunctionCall",
																"src": "13549:21:13"
															},
															"nodeType": "YulExpressionStatement",
															"src": "13549:21:13"
														},
														{
															"expression": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"name": "headStart",
																				"nodeType": "YulIdentifier",
																				"src": "13590:9:13"
																			},
																			{
																				"kind": "number",
																				"nodeType": "YulLiteral",
																				"src": "13601:2:13",
																				"type": "",
																				"value": "32"
																			}
																		],
																		"functionName": {
																			"name": "add",
																			"nodeType": "YulIdentifier",
																			"src": "13586:3:13"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "13586:18:13"
																	},
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "13606:2:13",
																		"type": "",
																		"value": "37"
																	}
																],
																"functionName": {
																	"name": "mstore",
																	"nodeType": "YulIdentifier",
																	"src": "13579:6:13"
																},
																"nodeType": "YulFunctionCall",
																"src": "13579:30:13"
															},
															"nodeType": "YulExpressionStatement",
															"src": "13579:30:13"
														},
														{
															"expression": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"name": "headStart",
																				"nodeType": "YulIdentifier",
																				"src": "13629:9:13"
																			},
																			{
																				"kind": "number",
																				"nodeType": "YulLiteral",
																				"src": "13640:2:13",
																				"type": "",
																				"value": "64"
																			}
																		],
																		"functionName": {
																			"name": "add",
																			"nodeType": "YulIdentifier",
																			"src": "13625:3:13"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "13625:18:13"
																	},
																	{
																		"hexValue": "43727970746f42756c6c446f6773203a3a205465616d20616c7265616479206d",
																		"kind": "string",
																		"nodeType": "YulLiteral",
																		"src": "13645:34:13",
																		"type": "",
																		"value": "CryptoBullDogs :: Team already m"
																	}
																],
																"functionName": {
																	"name": "mstore",
																	"nodeType": "YulIdentifier",
																	"src": "13618:6:13"
																},
																"nodeType": "YulFunctionCall",
																"src": "13618:62:13"
															},
															"nodeType": "YulExpressionStatement",
															"src": "13618:62:13"
														},
														{
															"expression": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"name": "headStart",
																				"nodeType": "YulIdentifier",
																				"src": "13700:9:13"
																			},
																			{
																				"kind": "number",
																				"nodeType": "YulLiteral",
																				"src": "13711:2:13",
																				"type": "",
																				"value": "96"
																			}
																		],
																		"functionName": {
																			"name": "add",
																			"nodeType": "YulIdentifier",
																			"src": "13696:3:13"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "13696:18:13"
																	},
																	{
																		"hexValue": "696e746564",
																		"kind": "string",
																		"nodeType": "YulLiteral",
																		"src": "13716:7:13",
																		"type": "",
																		"value": "inted"
																	}
																],
																"functionName": {
																	"name": "mstore",
																	"nodeType": "YulIdentifier",
																	"src": "13689:6:13"
																},
																"nodeType": "YulFunctionCall",
																"src": "13689:35:13"
															},
															"nodeType": "YulExpressionStatement",
															"src": "13689:35:13"
														},
														{
															"nodeType": "YulAssignment",
															"src": "13733:27:13",
															"value": {
																"arguments": [
																	{
																		"name": "headStart",
																		"nodeType": "YulIdentifier",
																		"src": "13745:9:13"
																	},
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "13756:3:13",
																		"type": "",
																		"value": "128"
																	}
																],
																"functionName": {
																	"name": "add",
																	"nodeType": "YulIdentifier",
																	"src": "13741:3:13"
																},
																"nodeType": "YulFunctionCall",
																"src": "13741:19:13"
															},
															"variableNames": [
																{
																	"name": "tail",
																	"nodeType": "YulIdentifier",
																	"src": "13733:4:13"
																}
															]
														}
													]
												},
												"name": "abi_encode_tuple_t_stringliteral_8b1a1b9660295b67e7b14793b8c2bd996c6eeb2d2db0f052d14c8cdc22873a9a__to_t_string_memory_ptr__fromStack_reversed",
												"nodeType": "YulFunctionDefinition",
												"parameters": [
													{
														"name": "headStart",
														"nodeType": "YulTypedName",
														"src": "13516:9:13",
														"type": ""
													}
												],
												"returnVariables": [
													{
														"name": "tail",
														"nodeType": "YulTypedName",
														"src": "13530:4:13",
														"type": ""
													}
												],
												"src": "13365:401:13"
											},
											{
												"body": {
													"nodeType": "YulBlock",
													"src": "13945:237:13",
													"statements": [
														{
															"expression": {
																"arguments": [
																	{
																		"name": "headStart",
																		"nodeType": "YulIdentifier",
																		"src": "13962:9:13"
																	},
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "13973:2:13",
																		"type": "",
																		"value": "32"
																	}
																],
																"functionName": {
																	"name": "mstore",
																	"nodeType": "YulIdentifier",
																	"src": "13955:6:13"
																},
																"nodeType": "YulFunctionCall",
																"src": "13955:21:13"
															},
															"nodeType": "YulExpressionStatement",
															"src": "13955:21:13"
														},
														{
															"expression": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"name": "headStart",
																				"nodeType": "YulIdentifier",
																				"src": "13996:9:13"
																			},
																			{
																				"kind": "number",
																				"nodeType": "YulLiteral",
																				"src": "14007:2:13",
																				"type": "",
																				"value": "32"
																			}
																		],
																		"functionName": {
																			"name": "add",
																			"nodeType": "YulIdentifier",
																			"src": "13992:3:13"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "13992:18:13"
																	},
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "14012:2:13",
																		"type": "",
																		"value": "47"
																	}
																],
																"functionName": {
																	"name": "mstore",
																	"nodeType": "YulIdentifier",
																	"src": "13985:6:13"
																},
																"nodeType": "YulFunctionCall",
																"src": "13985:30:13"
															},
															"nodeType": "YulExpressionStatement",
															"src": "13985:30:13"
														},
														{
															"expression": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"name": "headStart",
																				"nodeType": "YulIdentifier",
																				"src": "14035:9:13"
																			},
																			{
																				"kind": "number",
																				"nodeType": "YulLiteral",
																				"src": "14046:2:13",
																				"type": "",
																				"value": "64"
																			}
																		],
																		"functionName": {
																			"name": "add",
																			"nodeType": "YulIdentifier",
																			"src": "14031:3:13"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "14031:18:13"
																	},
																	{
																		"hexValue": "4552433732314d657461646174613a2055524920717565727920666f72206e6f",
																		"kind": "string",
																		"nodeType": "YulLiteral",
																		"src": "14051:34:13",
																		"type": "",
																		"value": "ERC721Metadata: URI query for no"
																	}
																],
																"functionName": {
																	"name": "mstore",
																	"nodeType": "YulIdentifier",
																	"src": "14024:6:13"
																},
																"nodeType": "YulFunctionCall",
																"src": "14024:62:13"
															},
															"nodeType": "YulExpressionStatement",
															"src": "14024:62:13"
														},
														{
															"expression": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"name": "headStart",
																				"nodeType": "YulIdentifier",
																				"src": "14106:9:13"
																			},
																			{
																				"kind": "number",
																				"nodeType": "YulLiteral",
																				"src": "14117:2:13",
																				"type": "",
																				"value": "96"
																			}
																		],
																		"functionName": {
																			"name": "add",
																			"nodeType": "YulIdentifier",
																			"src": "14102:3:13"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "14102:18:13"
																	},
																	{
																		"hexValue": "6e6578697374656e7420746f6b656e",
																		"kind": "string",
																		"nodeType": "YulLiteral",
																		"src": "14122:17:13",
																		"type": "",
																		"value": "nexistent token"
																	}
																],
																"functionName": {
																	"name": "mstore",
																	"nodeType": "YulIdentifier",
																	"src": "14095:6:13"
																},
																"nodeType": "YulFunctionCall",
																"src": "14095:45:13"
															},
															"nodeType": "YulExpressionStatement",
															"src": "14095:45:13"
														},
														{
															"nodeType": "YulAssignment",
															"src": "14149:27:13",
															"value": {
																"arguments": [
																	{
																		"name": "headStart",
																		"nodeType": "YulIdentifier",
																		"src": "14161:9:13"
																	},
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "14172:3:13",
																		"type": "",
																		"value": "128"
																	}
																],
																"functionName": {
																	"name": "add",
																	"nodeType": "YulIdentifier",
																	"src": "14157:3:13"
																},
																"nodeType": "YulFunctionCall",
																"src": "14157:19:13"
															},
															"variableNames": [
																{
																	"name": "tail",
																	"nodeType": "YulIdentifier",
																	"src": "14149:4:13"
																}
															]
														}
													]
												},
												"name": "abi_encode_tuple_t_stringliteral_a2d45c0fba603d40d82d590051761ca952d1ab9d78cca6d0d464d7b6e961a9cb__to_t_string_memory_ptr__fromStack_reversed",
												"nodeType": "YulFunctionDefinition",
												"parameters": [
													{
														"name": "headStart",
														"nodeType": "YulTypedName",
														"src": "13922:9:13",
														"type": ""
													}
												],
												"returnVariables": [
													{
														"name": "tail",
														"nodeType": "YulTypedName",
														"src": "13936:4:13",
														"type": ""
													}
												],
												"src": "13771:411:13"
											},
											{
												"body": {
													"nodeType": "YulBlock",
													"src": "14243:65:13",
													"statements": [
														{
															"expression": {
																"arguments": [
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "14260:1:13",
																		"type": "",
																		"value": "0"
																	},
																	{
																		"name": "ptr",
																		"nodeType": "YulIdentifier",
																		"src": "14263:3:13"
																	}
																],
																"functionName": {
																	"name": "mstore",
																	"nodeType": "YulIdentifier",
																	"src": "14253:6:13"
																},
																"nodeType": "YulFunctionCall",
																"src": "14253:14:13"
															},
															"nodeType": "YulExpressionStatement",
															"src": "14253:14:13"
														},
														{
															"nodeType": "YulAssignment",
															"src": "14276:26:13",
															"value": {
																"arguments": [
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "14294:1:13",
																		"type": "",
																		"value": "0"
																	},
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "14297:4:13",
																		"type": "",
																		"value": "0x20"
																	}
																],
																"functionName": {
																	"name": "keccak256",
																	"nodeType": "YulIdentifier",
																	"src": "14284:9:13"
																},
																"nodeType": "YulFunctionCall",
																"src": "14284:18:13"
															},
															"variableNames": [
																{
																	"name": "data",
																	"nodeType": "YulIdentifier",
																	"src": "14276:4:13"
																}
															]
														}
													]
												},
												"name": "array_dataslot_string_storage",
												"nodeType": "YulFunctionDefinition",
												"parameters": [
													{
														"name": "ptr",
														"nodeType": "YulTypedName",
														"src": "14226:3:13",
														"type": ""
													}
												],
												"returnVariables": [
													{
														"name": "data",
														"nodeType": "YulTypedName",
														"src": "14234:4:13",
														"type": ""
													}
												],
												"src": "14187:121:13"
											},
											{
												"body": {
													"nodeType": "YulBlock",
													"src": "14363:135:13",
													"statements": [
														{
															"nodeType": "YulVariableDeclaration",
															"src": "14373:26:13",
															"value": {
																"arguments": [
																	{
																		"name": "value",
																		"nodeType": "YulIdentifier",
																		"src": "14393:5:13"
																	}
																],
																"functionName": {
																	"name": "mload",
																	"nodeType": "YulIdentifier",
																	"src": "14387:5:13"
																},
																"nodeType": "YulFunctionCall",
																"src": "14387:12:13"
															},
															"variables": [
																{
																	"name": "length",
																	"nodeType": "YulTypedName",
																	"src": "14377:6:13",
																	"type": ""
																}
															]
														},
														{
															"expression": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"name": "value",
																				"nodeType": "YulIdentifier",
																				"src": "14434:5:13"
																			},
																			{
																				"kind": "number",
																				"nodeType": "YulLiteral",
																				"src": "14441:4:13",
																				"type": "",
																				"value": "0x20"
																			}
																		],
																		"functionName": {
																			"name": "add",
																			"nodeType": "YulIdentifier",
																			"src": "14430:3:13"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "14430:16:13"
																	},
																	{
																		"name": "pos",
																		"nodeType": "YulIdentifier",
																		"src": "14448:3:13"
																	},
																	{
																		"name": "length",
																		"nodeType": "YulIdentifier",
																		"src": "14453:6:13"
																	}
																],
																"functionName": {
																	"name": "copy_memory_to_memory",
																	"nodeType": "YulIdentifier",
																	"src": "14408:21:13"
																},
																"nodeType": "YulFunctionCall",
																"src": "14408:52:13"
															},
															"nodeType": "YulExpressionStatement",
															"src": "14408:52:13"
														},
														{
															"nodeType": "YulAssignment",
															"src": "14469:23:13",
															"value": {
																"arguments": [
																	{
																		"name": "pos",
																		"nodeType": "YulIdentifier",
																		"src": "14480:3:13"
																	},
																	{
																		"name": "length",
																		"nodeType": "YulIdentifier",
																		"src": "14485:6:13"
																	}
																],
																"functionName": {
																	"name": "add",
																	"nodeType": "YulIdentifier",
																	"src": "14476:3:13"
																},
																"nodeType": "YulFunctionCall",
																"src": "14476:16:13"
															},
															"variableNames": [
																{
																	"name": "end",
																	"nodeType": "YulIdentifier",
																	"src": "14469:3:13"
																}
															]
														}
													]
												},
												"name": "abi_encode_string",
												"nodeType": "YulFunctionDefinition",
												"parameters": [
													{
														"name": "value",
														"nodeType": "YulTypedName",
														"src": "14340:5:13",
														"type": ""
													},
													{
														"name": "pos",
														"nodeType": "YulTypedName",
														"src": "14347:3:13",
														"type": ""
													}
												],
												"returnVariables": [
													{
														"name": "end",
														"nodeType": "YulTypedName",
														"src": "14355:3:13",
														"type": ""
													}
												],
												"src": "14313:185:13"
											},
											{
												"body": {
													"nodeType": "YulBlock",
													"src": "14553:63:13",
													"statements": [
														{
															"expression": {
																"arguments": [
																	{
																		"name": "pos",
																		"nodeType": "YulIdentifier",
																		"src": "14570:3:13"
																	},
																	{
																		"hexValue": "2e6a736f6e",
																		"kind": "string",
																		"nodeType": "YulLiteral",
																		"src": "14575:7:13",
																		"type": "",
																		"value": ".json"
																	}
																],
																"functionName": {
																	"name": "mstore",
																	"nodeType": "YulIdentifier",
																	"src": "14563:6:13"
																},
																"nodeType": "YulFunctionCall",
																"src": "14563:20:13"
															},
															"nodeType": "YulExpressionStatement",
															"src": "14563:20:13"
														},
														{
															"nodeType": "YulAssignment",
															"src": "14592:18:13",
															"value": {
																"arguments": [
																	{
																		"name": "pos",
																		"nodeType": "YulIdentifier",
																		"src": "14603:3:13"
																	},
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "14608:1:13",
																		"type": "",
																		"value": "5"
																	}
																],
																"functionName": {
																	"name": "add",
																	"nodeType": "YulIdentifier",
																	"src": "14599:3:13"
																},
																"nodeType": "YulFunctionCall",
																"src": "14599:11:13"
															},
															"variableNames": [
																{
																	"name": "end",
																	"nodeType": "YulIdentifier",
																	"src": "14592:3:13"
																}
															]
														}
													]
												},
												"name": "abi_encode_stringliteral",
												"nodeType": "YulFunctionDefinition",
												"parameters": [
													{
														"name": "pos",
														"nodeType": "YulTypedName",
														"src": "14537:3:13",
														"type": ""
													}
												],
												"returnVariables": [
													{
														"name": "end",
														"nodeType": "YulTypedName",
														"src": "14545:3:13",
														"type": ""
													}
												],
												"src": "14503:113:13"
											},
											{
												"body": {
													"nodeType": "YulBlock",
													"src": "14906:1016:13",
													"statements": [
														{
															"nodeType": "YulVariableDeclaration",
															"src": "14916:12:13",
															"value": {
																"kind": "number",
																"nodeType": "YulLiteral",
																"src": "14927:1:13",
																"type": "",
																"value": "0"
															},
															"variables": [
																{
																	"name": "ret",
																	"nodeType": "YulTypedName",
																	"src": "14920:3:13",
																	"type": ""
																}
															]
														},
														{
															"nodeType": "YulVariableDeclaration",
															"src": "14937:30:13",
															"value": {
																"arguments": [
																	{
																		"name": "value0",
																		"nodeType": "YulIdentifier",
																		"src": "14960:6:13"
																	}
																],
																"functionName": {
																	"name": "sload",
																	"nodeType": "YulIdentifier",
																	"src": "14954:5:13"
																},
																"nodeType": "YulFunctionCall",
																"src": "14954:13:13"
															},
															"variables": [
																{
																	"name": "slotValue",
																	"nodeType": "YulTypedName",
																	"src": "14941:9:13",
																	"type": ""
																}
															]
														},
														{
															"nodeType": "YulVariableDeclaration",
															"src": "14976:17:13",
															"value": {
																"name": "ret",
																"nodeType": "YulIdentifier",
																"src": "14990:3:13"
															},
															"variables": [
																{
																	"name": "length",
																	"nodeType": "YulTypedName",
																	"src": "14980:6:13",
																	"type": ""
																}
															]
														},
														{
															"nodeType": "YulVariableDeclaration",
															"src": "15002:11:13",
															"value": {
																"kind": "number",
																"nodeType": "YulLiteral",
																"src": "15012:1:13",
																"type": "",
																"value": "1"
															},
															"variables": [
																{
																	"name": "_1",
																	"nodeType": "YulTypedName",
																	"src": "15006:2:13",
																	"type": ""
																}
															]
														},
														{
															"nodeType": "YulAssignment",
															"src": "15022:28:13",
															"value": {
																"arguments": [
																	{
																		"name": "_1",
																		"nodeType": "YulIdentifier",
																		"src": "15036:2:13"
																	},
																	{
																		"name": "slotValue",
																		"nodeType": "YulIdentifier",
																		"src": "15040:9:13"
																	}
																],
																"functionName": {
																	"name": "shr",
																	"nodeType": "YulIdentifier",
																	"src": "15032:3:13"
																},
																"nodeType": "YulFunctionCall",
																"src": "15032:18:13"
															},
															"variableNames": [
																{
																	"name": "length",
																	"nodeType": "YulIdentifier",
																	"src": "15022:6:13"
																}
															]
														},
														{
															"nodeType": "YulVariableDeclaration",
															"src": "15059:44:13",
															"value": {
																"arguments": [
																	{
																		"name": "slotValue",
																		"nodeType": "YulIdentifier",
																		"src": "15089:9:13"
																	},
																	{
																		"name": "_1",
																		"nodeType": "YulIdentifier",
																		"src": "15100:2:13"
																	}
																],
																"functionName": {
																	"name": "and",
																	"nodeType": "YulIdentifier",
																	"src": "15085:3:13"
																},
																"nodeType": "YulFunctionCall",
																"src": "15085:18:13"
															},
															"variables": [
																{
																	"name": "outOfPlaceEncoding",
																	"nodeType": "YulTypedName",
																	"src": "15063:18:13",
																	"type": ""
																}
															]
														},
														{
															"body": {
																"nodeType": "YulBlock",
																"src": "15142:31:13",
																"statements": [
																	{
																		"nodeType": "YulAssignment",
																		"src": "15144:27:13",
																		"value": {
																			"arguments": [
																				{
																					"name": "length",
																					"nodeType": "YulIdentifier",
																					"src": "15158:6:13"
																				},
																				{
																					"kind": "number",
																					"nodeType": "YulLiteral",
																					"src": "15166:4:13",
																					"type": "",
																					"value": "0x7f"
																				}
																			],
																			"functionName": {
																				"name": "and",
																				"nodeType": "YulIdentifier",
																				"src": "15154:3:13"
																			},
																			"nodeType": "YulFunctionCall",
																			"src": "15154:17:13"
																		},
																		"variableNames": [
																			{
																				"name": "length",
																				"nodeType": "YulIdentifier",
																				"src": "15144:6:13"
																			}
																		]
																	}
																]
															},
															"condition": {
																"arguments": [
																	{
																		"name": "outOfPlaceEncoding",
																		"nodeType": "YulIdentifier",
																		"src": "15122:18:13"
																	}
																],
																"functionName": {
																	"name": "iszero",
																	"nodeType": "YulIdentifier",
																	"src": "15115:6:13"
																},
																"nodeType": "YulFunctionCall",
																"src": "15115:26:13"
															},
															"nodeType": "YulIf",
															"src": "15112:61:13"
														},
														{
															"nodeType": "YulVariableDeclaration",
															"src": "15182:12:13",
															"value": {
																"kind": "number",
																"nodeType": "YulLiteral",
																"src": "15192:2:13",
																"type": "",
																"value": "32"
															},
															"variables": [
																{
																	"name": "_2",
																	"nodeType": "YulTypedName",
																	"src": "15186:2:13",
																	"type": ""
																}
															]
														},
														{
															"body": {
																"nodeType": "YulBlock",
																"src": "15253:115:13",
																"statements": [
																	{
																		"expression": {
																			"arguments": [
																				{
																					"name": "ret",
																					"nodeType": "YulIdentifier",
																					"src": "15274:3:13"
																				},
																				{
																					"arguments": [
																						{
																							"kind": "number",
																							"nodeType": "YulLiteral",
																							"src": "15283:3:13",
																							"type": "",
																							"value": "224"
																						},
																						{
																							"kind": "number",
																							"nodeType": "YulLiteral",
																							"src": "15288:10:13",
																							"type": "",
																							"value": "0x4e487b71"
																						}
																					],
																					"functionName": {
																						"name": "shl",
																						"nodeType": "YulIdentifier",
																						"src": "15279:3:13"
																					},
																					"nodeType": "YulFunctionCall",
																					"src": "15279:20:13"
																				}
																			],
																			"functionName": {
																				"name": "mstore",
																				"nodeType": "YulIdentifier",
																				"src": "15267:6:13"
																			},
																			"nodeType": "YulFunctionCall",
																			"src": "15267:33:13"
																		},
																		"nodeType": "YulExpressionStatement",
																		"src": "15267:33:13"
																	},
																	{
																		"expression": {
																			"arguments": [
																				{
																					"kind": "number",
																					"nodeType": "YulLiteral",
																					"src": "15320:1:13",
																					"type": "",
																					"value": "4"
																				},
																				{
																					"kind": "number",
																					"nodeType": "YulLiteral",
																					"src": "15323:4:13",
																					"type": "",
																					"value": "0x22"
																				}
																			],
																			"functionName": {
																				"name": "mstore",
																				"nodeType": "YulIdentifier",
																				"src": "15313:6:13"
																			},
																			"nodeType": "YulFunctionCall",
																			"src": "15313:15:13"
																		},
																		"nodeType": "YulExpressionStatement",
																		"src": "15313:15:13"
																	},
																	{
																		"expression": {
																			"arguments": [
																				{
																					"name": "ret",
																					"nodeType": "YulIdentifier",
																					"src": "15348:3:13"
																				},
																				{
																					"kind": "number",
																					"nodeType": "YulLiteral",
																					"src": "15353:4:13",
																					"type": "",
																					"value": "0x24"
																				}
																			],
																			"functionName": {
																				"name": "revert",
																				"nodeType": "YulIdentifier",
																				"src": "15341:6:13"
																			},
																			"nodeType": "YulFunctionCall",
																			"src": "15341:17:13"
																		},
																		"nodeType": "YulExpressionStatement",
																		"src": "15341:17:13"
																	}
																]
															},
															"condition": {
																"arguments": [
																	{
																		"name": "outOfPlaceEncoding",
																		"nodeType": "YulIdentifier",
																		"src": "15209:18:13"
																	},
																	{
																		"arguments": [
																			{
																				"name": "length",
																				"nodeType": "YulIdentifier",
																				"src": "15232:6:13"
																			},
																			{
																				"name": "_2",
																				"nodeType": "YulIdentifier",
																				"src": "15240:2:13"
																			}
																		],
																		"functionName": {
																			"name": "lt",
																			"nodeType": "YulIdentifier",
																			"src": "15229:2:13"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "15229:14:13"
																	}
																],
																"functionName": {
																	"name": "eq",
																	"nodeType": "YulIdentifier",
																	"src": "15206:2:13"
																},
																"nodeType": "YulFunctionCall",
																"src": "15206:38:13"
															},
															"nodeType": "YulIf",
															"src": "15203:165:13"
														},
														{
															"cases": [
																{
																	"body": {
																		"nodeType": "YulBlock",
																		"src": "15418:97:13",
																		"statements": [
																			{
																				"expression": {
																					"arguments": [
																						{
																							"name": "pos",
																							"nodeType": "YulIdentifier",
																							"src": "15439:3:13"
																						},
																						{
																							"arguments": [
																								{
																									"name": "slotValue",
																									"nodeType": "YulIdentifier",
																									"src": "15448:9:13"
																								},
																								{
																									"arguments": [
																										{
																											"kind": "number",
																											"nodeType": "YulLiteral",
																											"src": "15463:3:13",
																											"type": "",
																											"value": "255"
																										}
																									],
																									"functionName": {
																										"name": "not",
																										"nodeType": "YulIdentifier",
																										"src": "15459:3:13"
																									},
																									"nodeType": "YulFunctionCall",
																									"src": "15459:8:13"
																								}
																							],
																							"functionName": {
																								"name": "and",
																								"nodeType": "YulIdentifier",
																								"src": "15444:3:13"
																							},
																							"nodeType": "YulFunctionCall",
																							"src": "15444:24:13"
																						}
																					],
																					"functionName": {
																						"name": "mstore",
																						"nodeType": "YulIdentifier",
																						"src": "15432:6:13"
																					},
																					"nodeType": "YulFunctionCall",
																					"src": "15432:37:13"
																				},
																				"nodeType": "YulExpressionStatement",
																				"src": "15432:37:13"
																			},
																			{
																				"nodeType": "YulAssignment",
																				"src": "15482:23:13",
																				"value": {
																					"arguments": [
																						{
																							"name": "pos",
																							"nodeType": "YulIdentifier",
																							"src": "15493:3:13"
																						},
																						{
																							"name": "length",
																							"nodeType": "YulIdentifier",
																							"src": "15498:6:13"
																						}
																					],
																					"functionName": {
																						"name": "add",
																						"nodeType": "YulIdentifier",
																						"src": "15489:3:13"
																					},
																					"nodeType": "YulFunctionCall",
																					"src": "15489:16:13"
																				},
																				"variableNames": [
																					{
																						"name": "ret",
																						"nodeType": "YulIdentifier",
																						"src": "15482:3:13"
																					}
																				]
																			}
																		]
																	},
																	"nodeType": "YulCase",
																	"src": "15411:104:13",
																	"value": {
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "15416:1:13",
																		"type": "",
																		"value": "0"
																	}
																},
																{
																	"body": {
																		"nodeType": "YulBlock",
																		"src": "15531:313:13",
																		"statements": [
																			{
																				"nodeType": "YulVariableDeclaration",
																				"src": "15545:52:13",
																				"value": {
																					"arguments": [
																						{
																							"name": "value0",
																							"nodeType": "YulIdentifier",
																							"src": "15590:6:13"
																						}
																					],
																					"functionName": {
																						"name": "array_dataslot_string_storage",
																						"nodeType": "YulIdentifier",
																						"src": "15560:29:13"
																					},
																					"nodeType": "YulFunctionCall",
																					"src": "15560:37:13"
																				},
																				"variables": [
																					{
																						"name": "dataPos",
																						"nodeType": "YulTypedName",
																						"src": "15549:7:13",
																						"type": ""
																					}
																				]
																			},
																			{
																				"nodeType": "YulVariableDeclaration",
																				"src": "15610:10:13",
																				"value": {
																					"kind": "number",
																					"nodeType": "YulLiteral",
																					"src": "15619:1:13",
																					"type": "",
																					"value": "0"
																				},
																				"variables": [
																					{
																						"name": "i",
																						"nodeType": "YulTypedName",
																						"src": "15614:1:13",
																						"type": ""
																					}
																				]
																			},
																			{
																				"body": {
																					"nodeType": "YulBlock",
																					"src": "15687:111:13",
																					"statements": [
																						{
																							"expression": {
																								"arguments": [
																									{
																										"arguments": [
																											{
																												"name": "pos",
																												"nodeType": "YulIdentifier",
																												"src": "15716:3:13"
																											},
																											{
																												"name": "i",
																												"nodeType": "YulIdentifier",
																												"src": "15721:1:13"
																											}
																										],
																										"functionName": {
																											"name": "add",
																											"nodeType": "YulIdentifier",
																											"src": "15712:3:13"
																										},
																										"nodeType": "YulFunctionCall",
																										"src": "15712:11:13"
																									},
																									{
																										"arguments": [
																											{
																												"name": "dataPos",
																												"nodeType": "YulIdentifier",
																												"src": "15731:7:13"
																											}
																										],
																										"functionName": {
																											"name": "sload",
																											"nodeType": "YulIdentifier",
																											"src": "15725:5:13"
																										},
																										"nodeType": "YulFunctionCall",
																										"src": "15725:14:13"
																									}
																								],
																								"functionName": {
																									"name": "mstore",
																									"nodeType": "YulIdentifier",
																									"src": "15705:6:13"
																								},
																								"nodeType": "YulFunctionCall",
																								"src": "15705:35:13"
																							},
																							"nodeType": "YulExpressionStatement",
																							"src": "15705:35:13"
																						},
																						{
																							"nodeType": "YulAssignment",
																							"src": "15757:27:13",
																							"value": {
																								"arguments": [
																									{
																										"name": "dataPos",
																										"nodeType": "YulIdentifier",
																										"src": "15772:7:13"
																									},
																									{
																										"name": "_1",
																										"nodeType": "YulIdentifier",
																										"src": "15781:2:13"
																									}
																								],
																								"functionName": {
																									"name": "add",
																									"nodeType": "YulIdentifier",
																									"src": "15768:3:13"
																								},
																								"nodeType": "YulFunctionCall",
																								"src": "15768:16:13"
																							},
																							"variableNames": [
																								{
																									"name": "dataPos",
																									"nodeType": "YulIdentifier",
																									"src": "15757:7:13"
																								}
																							]
																						}
																					]
																				},
																				"condition": {
																					"arguments": [
																						{
																							"name": "i",
																							"nodeType": "YulIdentifier",
																							"src": "15644:1:13"
																						},
																						{
																							"name": "length",
																							"nodeType": "YulIdentifier",
																							"src": "15647:6:13"
																						}
																					],
																					"functionName": {
																						"name": "lt",
																						"nodeType": "YulIdentifier",
																						"src": "15641:2:13"
																					},
																					"nodeType": "YulFunctionCall",
																					"src": "15641:13:13"
																				},
																				"nodeType": "YulForLoop",
																				"post": {
																					"nodeType": "YulBlock",
																					"src": "15655:19:13",
																					"statements": [
																						{
																							"nodeType": "YulAssignment",
																							"src": "15657:15:13",
																							"value": {
																								"arguments": [
																									{
																										"name": "i",
																										"nodeType": "YulIdentifier",
																										"src": "15666:1:13"
																									},
																									{
																										"name": "_2",
																										"nodeType": "YulIdentifier",
																										"src": "15669:2:13"
																									}
																								],
																								"functionName": {
																									"name": "add",
																									"nodeType": "YulIdentifier",
																									"src": "15662:3:13"
																								},
																								"nodeType": "YulFunctionCall",
																								"src": "15662:10:13"
																							},
																							"variableNames": [
																								{
																									"name": "i",
																									"nodeType": "YulIdentifier",
																									"src": "15657:1:13"
																								}
																							]
																						}
																					]
																				},
																				"pre": {
																					"nodeType": "YulBlock",
																					"src": "15637:3:13",
																					"statements": []
																				},
																				"src": "15633:165:13"
																			},
																			{
																				"nodeType": "YulAssignment",
																				"src": "15811:23:13",
																				"value": {
																					"arguments": [
																						{
																							"name": "pos",
																							"nodeType": "YulIdentifier",
																							"src": "15822:3:13"
																						},
																						{
																							"name": "length",
																							"nodeType": "YulIdentifier",
																							"src": "15827:6:13"
																						}
																					],
																					"functionName": {
																						"name": "add",
																						"nodeType": "YulIdentifier",
																						"src": "15818:3:13"
																					},
																					"nodeType": "YulFunctionCall",
																					"src": "15818:16:13"
																				},
																				"variableNames": [
																					{
																						"name": "ret",
																						"nodeType": "YulIdentifier",
																						"src": "15811:3:13"
																					}
																				]
																			}
																		]
																	},
																	"nodeType": "YulCase",
																	"src": "15524:320:13",
																	"value": {
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "15529:1:13",
																		"type": "",
																		"value": "1"
																	}
																}
															],
															"expression": {
																"name": "outOfPlaceEncoding",
																"nodeType": "YulIdentifier",
																"src": "15384:18:13"
															},
															"nodeType": "YulSwitch",
															"src": "15377:467:13"
														},
														{
															"nodeType": "YulAssignment",
															"src": "15853:63:13",
															"value": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"name": "value1",
																				"nodeType": "YulIdentifier",
																				"src": "15903:6:13"
																			},
																			{
																				"name": "ret",
																				"nodeType": "YulIdentifier",
																				"src": "15911:3:13"
																			}
																		],
																		"functionName": {
																			"name": "abi_encode_string",
																			"nodeType": "YulIdentifier",
																			"src": "15885:17:13"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "15885:30:13"
																	}
																],
																"functionName": {
																	"name": "abi_encode_stringliteral",
																	"nodeType": "YulIdentifier",
																	"src": "15860:24:13"
																},
																"nodeType": "YulFunctionCall",
																"src": "15860:56:13"
															},
															"variableNames": [
																{
																	"name": "end",
																	"nodeType": "YulIdentifier",
																	"src": "15853:3:13"
																}
															]
														}
													]
												},
												"name": "abi_encode_tuple_packed_t_string_storage_t_string_memory_ptr_t_stringliteral_94311adc0a0cd4e10be11b23bd4316b8cffa4adf693e8f96f5c075aa439a7972__to_t_string_memory_ptr_t_string_memory_ptr_t_string_memory_ptr__nonPadded_inplace_fromStack_reversed",
												"nodeType": "YulFunctionDefinition",
												"parameters": [
													{
														"name": "pos",
														"nodeType": "YulTypedName",
														"src": "14874:3:13",
														"type": ""
													},
													{
														"name": "value1",
														"nodeType": "YulTypedName",
														"src": "14879:6:13",
														"type": ""
													},
													{
														"name": "value0",
														"nodeType": "YulTypedName",
														"src": "14887:6:13",
														"type": ""
													}
												],
												"returnVariables": [
													{
														"name": "end",
														"nodeType": "YulTypedName",
														"src": "14898:3:13",
														"type": ""
													}
												],
												"src": "14621:1301:13"
											},
											{
												"body": {
													"nodeType": "YulBlock",
													"src": "16101:228:13",
													"statements": [
														{
															"expression": {
																"arguments": [
																	{
																		"name": "headStart",
																		"nodeType": "YulIdentifier",
																		"src": "16118:9:13"
																	},
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "16129:2:13",
																		"type": "",
																		"value": "32"
																	}
																],
																"functionName": {
																	"name": "mstore",
																	"nodeType": "YulIdentifier",
																	"src": "16111:6:13"
																},
																"nodeType": "YulFunctionCall",
																"src": "16111:21:13"
															},
															"nodeType": "YulExpressionStatement",
															"src": "16111:21:13"
														},
														{
															"expression": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"name": "headStart",
																				"nodeType": "YulIdentifier",
																				"src": "16152:9:13"
																			},
																			{
																				"kind": "number",
																				"nodeType": "YulLiteral",
																				"src": "16163:2:13",
																				"type": "",
																				"value": "32"
																			}
																		],
																		"functionName": {
																			"name": "add",
																			"nodeType": "YulIdentifier",
																			"src": "16148:3:13"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "16148:18:13"
																	},
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "16168:2:13",
																		"type": "",
																		"value": "38"
																	}
																],
																"functionName": {
																	"name": "mstore",
																	"nodeType": "YulIdentifier",
																	"src": "16141:6:13"
																},
																"nodeType": "YulFunctionCall",
																"src": "16141:30:13"
															},
															"nodeType": "YulExpressionStatement",
															"src": "16141:30:13"
														},
														{
															"expression": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"name": "headStart",
																				"nodeType": "YulIdentifier",
																				"src": "16191:9:13"
																			},
																			{
																				"kind": "number",
																				"nodeType": "YulLiteral",
																				"src": "16202:2:13",
																				"type": "",
																				"value": "64"
																			}
																		],
																		"functionName": {
																			"name": "add",
																			"nodeType": "YulIdentifier",
																			"src": "16187:3:13"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "16187:18:13"
																	},
																	{
																		"hexValue": "4f776e61626c653a206e6577206f776e657220697320746865207a65726f2061",
																		"kind": "string",
																		"nodeType": "YulLiteral",
																		"src": "16207:34:13",
																		"type": "",
																		"value": "Ownable: new owner is the zero a"
																	}
																],
																"functionName": {
																	"name": "mstore",
																	"nodeType": "YulIdentifier",
																	"src": "16180:6:13"
																},
																"nodeType": "YulFunctionCall",
																"src": "16180:62:13"
															},
															"nodeType": "YulExpressionStatement",
															"src": "16180:62:13"
														},
														{
															"expression": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"name": "headStart",
																				"nodeType": "YulIdentifier",
																				"src": "16262:9:13"
																			},
																			{
																				"kind": "number",
																				"nodeType": "YulLiteral",
																				"src": "16273:2:13",
																				"type": "",
																				"value": "96"
																			}
																		],
																		"functionName": {
																			"name": "add",
																			"nodeType": "YulIdentifier",
																			"src": "16258:3:13"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "16258:18:13"
																	},
																	{
																		"hexValue": "646472657373",
																		"kind": "string",
																		"nodeType": "YulLiteral",
																		"src": "16278:8:13",
																		"type": "",
																		"value": "ddress"
																	}
																],
																"functionName": {
																	"name": "mstore",
																	"nodeType": "YulIdentifier",
																	"src": "16251:6:13"
																},
																"nodeType": "YulFunctionCall",
																"src": "16251:36:13"
															},
															"nodeType": "YulExpressionStatement",
															"src": "16251:36:13"
														},
														{
															"nodeType": "YulAssignment",
															"src": "16296:27:13",
															"value": {
																"arguments": [
																	{
																		"name": "headStart",
																		"nodeType": "YulIdentifier",
																		"src": "16308:9:13"
																	},
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "16319:3:13",
																		"type": "",
																		"value": "128"
																	}
																],
																"functionName": {
																	"name": "add",
																	"nodeType": "YulIdentifier",
																	"src": "16304:3:13"
																},
																"nodeType": "YulFunctionCall",
																"src": "16304:19:13"
															},
															"variableNames": [
																{
																	"name": "tail",
																	"nodeType": "YulIdentifier",
																	"src": "16296:4:13"
																}
															]
														}
													]
												},
												"name": "abi_encode_tuple_t_stringliteral_245f15ff17f551913a7a18385165551503906a406f905ac1c2437281a7cd0cfe__to_t_string_memory_ptr__fromStack_reversed",
												"nodeType": "YulFunctionDefinition",
												"parameters": [
													{
														"name": "headStart",
														"nodeType": "YulTypedName",
														"src": "16078:9:13",
														"type": ""
													}
												],
												"returnVariables": [
													{
														"name": "tail",
														"nodeType": "YulTypedName",
														"src": "16092:4:13",
														"type": ""
													}
												],
												"src": "15927:402:13"
											},
											{
												"body": {
													"nodeType": "YulBlock",
													"src": "16537:297:13",
													"statements": [
														{
															"nodeType": "YulVariableDeclaration",
															"src": "16547:29:13",
															"value": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"kind": "number",
																				"nodeType": "YulLiteral",
																				"src": "16565:3:13",
																				"type": "",
																				"value": "160"
																			},
																			{
																				"kind": "number",
																				"nodeType": "YulLiteral",
																				"src": "16570:1:13",
																				"type": "",
																				"value": "1"
																			}
																		],
																		"functionName": {
																			"name": "shl",
																			"nodeType": "YulIdentifier",
																			"src": "16561:3:13"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "16561:11:13"
																	},
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "16574:1:13",
																		"type": "",
																		"value": "1"
																	}
																],
																"functionName": {
																	"name": "sub",
																	"nodeType": "YulIdentifier",
																	"src": "16557:3:13"
																},
																"nodeType": "YulFunctionCall",
																"src": "16557:19:13"
															},
															"variables": [
																{
																	"name": "_1",
																	"nodeType": "YulTypedName",
																	"src": "16551:2:13",
																	"type": ""
																}
															]
														},
														{
															"expression": {
																"arguments": [
																	{
																		"name": "headStart",
																		"nodeType": "YulIdentifier",
																		"src": "16592:9:13"
																	},
																	{
																		"arguments": [
																			{
																				"name": "value0",
																				"nodeType": "YulIdentifier",
																				"src": "16607:6:13"
																			},
																			{
																				"name": "_1",
																				"nodeType": "YulIdentifier",
																				"src": "16615:2:13"
																			}
																		],
																		"functionName": {
																			"name": "and",
																			"nodeType": "YulIdentifier",
																			"src": "16603:3:13"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "16603:15:13"
																	}
																],
																"functionName": {
																	"name": "mstore",
																	"nodeType": "YulIdentifier",
																	"src": "16585:6:13"
																},
																"nodeType": "YulFunctionCall",
																"src": "16585:34:13"
															},
															"nodeType": "YulExpressionStatement",
															"src": "16585:34:13"
														},
														{
															"expression": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"name": "headStart",
																				"nodeType": "YulIdentifier",
																				"src": "16639:9:13"
																			},
																			{
																				"kind": "number",
																				"nodeType": "YulLiteral",
																				"src": "16650:2:13",
																				"type": "",
																				"value": "32"
																			}
																		],
																		"functionName": {
																			"name": "add",
																			"nodeType": "YulIdentifier",
																			"src": "16635:3:13"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "16635:18:13"
																	},
																	{
																		"arguments": [
																			{
																				"name": "value1",
																				"nodeType": "YulIdentifier",
																				"src": "16659:6:13"
																			},
																			{
																				"name": "_1",
																				"nodeType": "YulIdentifier",
																				"src": "16667:2:13"
																			}
																		],
																		"functionName": {
																			"name": "and",
																			"nodeType": "YulIdentifier",
																			"src": "16655:3:13"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "16655:15:13"
																	}
																],
																"functionName": {
																	"name": "mstore",
																	"nodeType": "YulIdentifier",
																	"src": "16628:6:13"
																},
																"nodeType": "YulFunctionCall",
																"src": "16628:43:13"
															},
															"nodeType": "YulExpressionStatement",
															"src": "16628:43:13"
														},
														{
															"expression": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"name": "headStart",
																				"nodeType": "YulIdentifier",
																				"src": "16691:9:13"
																			},
																			{
																				"kind": "number",
																				"nodeType": "YulLiteral",
																				"src": "16702:2:13",
																				"type": "",
																				"value": "64"
																			}
																		],
																		"functionName": {
																			"name": "add",
																			"nodeType": "YulIdentifier",
																			"src": "16687:3:13"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "16687:18:13"
																	},
																	{
																		"name": "value2",
																		"nodeType": "YulIdentifier",
																		"src": "16707:6:13"
																	}
																],
																"functionName": {
																	"name": "mstore",
																	"nodeType": "YulIdentifier",
																	"src": "16680:6:13"
																},
																"nodeType": "YulFunctionCall",
																"src": "16680:34:13"
															},
															"nodeType": "YulExpressionStatement",
															"src": "16680:34:13"
														},
														{
															"expression": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"name": "headStart",
																				"nodeType": "YulIdentifier",
																				"src": "16734:9:13"
																			},
																			{
																				"kind": "number",
																				"nodeType": "YulLiteral",
																				"src": "16745:2:13",
																				"type": "",
																				"value": "96"
																			}
																		],
																		"functionName": {
																			"name": "add",
																			"nodeType": "YulIdentifier",
																			"src": "16730:3:13"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "16730:18:13"
																	},
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "16750:3:13",
																		"type": "",
																		"value": "128"
																	}
																],
																"functionName": {
																	"name": "mstore",
																	"nodeType": "YulIdentifier",
																	"src": "16723:6:13"
																},
																"nodeType": "YulFunctionCall",
																"src": "16723:31:13"
															},
															"nodeType": "YulExpressionStatement",
															"src": "16723:31:13"
														},
														{
															"nodeType": "YulAssignment",
															"src": "16763:65:13",
															"value": {
																"arguments": [
																	{
																		"name": "value3",
																		"nodeType": "YulIdentifier",
																		"src": "16800:6:13"
																	},
																	{
																		"arguments": [
																			{
																				"name": "headStart",
																				"nodeType": "YulIdentifier",
																				"src": "16812:9:13"
																			},
																			{
																				"kind": "number",
																				"nodeType": "YulLiteral",
																				"src": "16823:3:13",
																				"type": "",
																				"value": "128"
																			}
																		],
																		"functionName": {
																			"name": "add",
																			"nodeType": "YulIdentifier",
																			"src": "16808:3:13"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "16808:19:13"
																	}
																],
																"functionName": {
																	"name": "abi_encode_string_memory_ptr",
																	"nodeType": "YulIdentifier",
																	"src": "16771:28:13"
																},
																"nodeType": "YulFunctionCall",
																"src": "16771:57:13"
															},
															"variableNames": [
																{
																	"name": "tail",
																	"nodeType": "YulIdentifier",
																	"src": "16763:4:13"
																}
															]
														}
													]
												},
												"name": "abi_encode_tuple_t_address_t_address_t_uint256_t_bytes_memory_ptr__to_t_address_t_address_t_uint256_t_bytes_memory_ptr__fromStack_reversed",
												"nodeType": "YulFunctionDefinition",
												"parameters": [
													{
														"name": "headStart",
														"nodeType": "YulTypedName",
														"src": "16482:9:13",
														"type": ""
													},
													{
														"name": "value3",
														"nodeType": "YulTypedName",
														"src": "16493:6:13",
														"type": ""
													},
													{
														"name": "value2",
														"nodeType": "YulTypedName",
														"src": "16501:6:13",
														"type": ""
													},
													{
														"name": "value1",
														"nodeType": "YulTypedName",
														"src": "16509:6:13",
														"type": ""
													},
													{
														"name": "value0",
														"nodeType": "YulTypedName",
														"src": "16517:6:13",
														"type": ""
													}
												],
												"returnVariables": [
													{
														"name": "tail",
														"nodeType": "YulTypedName",
														"src": "16528:4:13",
														"type": ""
													}
												],
												"src": "16334:500:13"
											},
											{
												"body": {
													"nodeType": "YulBlock",
													"src": "16919:169:13",
													"statements": [
														{
															"body": {
																"nodeType": "YulBlock",
																"src": "16965:16:13",
																"statements": [
																	{
																		"expression": {
																			"arguments": [
																				{
																					"kind": "number",
																					"nodeType": "YulLiteral",
																					"src": "16974:1:13",
																					"type": "",
																					"value": "0"
																				},
																				{
																					"kind": "number",
																					"nodeType": "YulLiteral",
																					"src": "16977:1:13",
																					"type": "",
																					"value": "0"
																				}
																			],
																			"functionName": {
																				"name": "revert",
																				"nodeType": "YulIdentifier",
																				"src": "16967:6:13"
																			},
																			"nodeType": "YulFunctionCall",
																			"src": "16967:12:13"
																		},
																		"nodeType": "YulExpressionStatement",
																		"src": "16967:12:13"
																	}
																]
															},
															"condition": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"name": "dataEnd",
																				"nodeType": "YulIdentifier",
																				"src": "16940:7:13"
																			},
																			{
																				"name": "headStart",
																				"nodeType": "YulIdentifier",
																				"src": "16949:9:13"
																			}
																		],
																		"functionName": {
																			"name": "sub",
																			"nodeType": "YulIdentifier",
																			"src": "16936:3:13"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "16936:23:13"
																	},
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "16961:2:13",
																		"type": "",
																		"value": "32"
																	}
																],
																"functionName": {
																	"name": "slt",
																	"nodeType": "YulIdentifier",
																	"src": "16932:3:13"
																},
																"nodeType": "YulFunctionCall",
																"src": "16932:32:13"
															},
															"nodeType": "YulIf",
															"src": "16929:52:13"
														},
														{
															"nodeType": "YulVariableDeclaration",
															"src": "16990:29:13",
															"value": {
																"arguments": [
																	{
																		"name": "headStart",
																		"nodeType": "YulIdentifier",
																		"src": "17009:9:13"
																	}
																],
																"functionName": {
																	"name": "mload",
																	"nodeType": "YulIdentifier",
																	"src": "17003:5:13"
																},
																"nodeType": "YulFunctionCall",
																"src": "17003:16:13"
															},
															"variables": [
																{
																	"name": "value",
																	"nodeType": "YulTypedName",
																	"src": "16994:5:13",
																	"type": ""
																}
															]
														},
														{
															"expression": {
																"arguments": [
																	{
																		"name": "value",
																		"nodeType": "YulIdentifier",
																		"src": "17052:5:13"
																	}
																],
																"functionName": {
																	"name": "validator_revert_bytes4",
																	"nodeType": "YulIdentifier",
																	"src": "17028:23:13"
																},
																"nodeType": "YulFunctionCall",
																"src": "17028:30:13"
															},
															"nodeType": "YulExpressionStatement",
															"src": "17028:30:13"
														},
														{
															"nodeType": "YulAssignment",
															"src": "17067:15:13",
															"value": {
																"name": "value",
																"nodeType": "YulIdentifier",
																"src": "17077:5:13"
															},
															"variableNames": [
																{
																	"name": "value0",
																	"nodeType": "YulIdentifier",
																	"src": "17067:6:13"
																}
															]
														}
													]
												},
												"name": "abi_decode_tuple_t_bytes4_fromMemory",
												"nodeType": "YulFunctionDefinition",
												"parameters": [
													{
														"name": "headStart",
														"nodeType": "YulTypedName",
														"src": "16885:9:13",
														"type": ""
													},
													{
														"name": "dataEnd",
														"nodeType": "YulTypedName",
														"src": "16896:7:13",
														"type": ""
													}
												],
												"returnVariables": [
													{
														"name": "value0",
														"nodeType": "YulTypedName",
														"src": "16908:6:13",
														"type": ""
													}
												],
												"src": "16839:249:13"
											},
											{
												"body": {
													"nodeType": "YulBlock",
													"src": "17142:76:13",
													"statements": [
														{
															"body": {
																"nodeType": "YulBlock",
																"src": "17164:22:13",
																"statements": [
																	{
																		"expression": {
																			"arguments": [],
																			"functionName": {
																				"name": "panic_error_0x11",
																				"nodeType": "YulIdentifier",
																				"src": "17166:16:13"
																			},
																			"nodeType": "YulFunctionCall",
																			"src": "17166:18:13"
																		},
																		"nodeType": "YulExpressionStatement",
																		"src": "17166:18:13"
																	}
																]
															},
															"condition": {
																"arguments": [
																	{
																		"name": "x",
																		"nodeType": "YulIdentifier",
																		"src": "17158:1:13"
																	},
																	{
																		"name": "y",
																		"nodeType": "YulIdentifier",
																		"src": "17161:1:13"
																	}
																],
																"functionName": {
																	"name": "lt",
																	"nodeType": "YulIdentifier",
																	"src": "17155:2:13"
																},
																"nodeType": "YulFunctionCall",
																"src": "17155:8:13"
															},
															"nodeType": "YulIf",
															"src": "17152:34:13"
														},
														{
															"nodeType": "YulAssignment",
															"src": "17195:17:13",
															"value": {
																"arguments": [
																	{
																		"name": "x",
																		"nodeType": "YulIdentifier",
																		"src": "17207:1:13"
																	},
																	{
																		"name": "y",
																		"nodeType": "YulIdentifier",
																		"src": "17210:1:13"
																	}
																],
																"functionName": {
																	"name": "sub",
																	"nodeType": "YulIdentifier",
																	"src": "17203:3:13"
																},
																"nodeType": "YulFunctionCall",
																"src": "17203:9:13"
															},
															"variableNames": [
																{
																	"name": "diff",
																	"nodeType": "YulIdentifier",
																	"src": "17195:4:13"
																}
															]
														}
													]
												},
												"name": "checked_sub_t_uint256",
												"nodeType": "YulFunctionDefinition",
												"parameters": [
													{
														"name": "x",
														"nodeType": "YulTypedName",
														"src": "17124:1:13",
														"type": ""
													},
													{
														"name": "y",
														"nodeType": "YulTypedName",
														"src": "17127:1:13",
														"type": ""
													}
												],
												"returnVariables": [
													{
														"name": "diff",
														"nodeType": "YulTypedName",
														"src": "17133:4:13",
														"type": ""
													}
												],
												"src": "17093:125:13"
											},
											{
												"body": {
													"nodeType": "YulBlock",
													"src": "17261:74:13",
													"statements": [
														{
															"body": {
																"nodeType": "YulBlock",
																"src": "17284:22:13",
																"statements": [
																	{
																		"expression": {
																			"arguments": [],
																			"functionName": {
																				"name": "panic_error_0x12",
																				"nodeType": "YulIdentifier",
																				"src": "17286:16:13"
																			},
																			"nodeType": "YulFunctionCall",
																			"src": "17286:18:13"
																		},
																		"nodeType": "YulExpressionStatement",
																		"src": "17286:18:13"
																	}
																]
															},
															"condition": {
																"arguments": [
																	{
																		"name": "y",
																		"nodeType": "YulIdentifier",
																		"src": "17281:1:13"
																	}
																],
																"functionName": {
																	"name": "iszero",
																	"nodeType": "YulIdentifier",
																	"src": "17274:6:13"
																},
																"nodeType": "YulFunctionCall",
																"src": "17274:9:13"
															},
															"nodeType": "YulIf",
															"src": "17271:35:13"
														},
														{
															"nodeType": "YulAssignment",
															"src": "17315:14:13",
															"value": {
																"arguments": [
																	{
																		"name": "x",
																		"nodeType": "YulIdentifier",
																		"src": "17324:1:13"
																	},
																	{
																		"name": "y",
																		"nodeType": "YulIdentifier",
																		"src": "17327:1:13"
																	}
																],
																"functionName": {
																	"name": "mod",
																	"nodeType": "YulIdentifier",
																	"src": "17320:3:13"
																},
																"nodeType": "YulFunctionCall",
																"src": "17320:9:13"
															},
															"variableNames": [
																{
																	"name": "r",
																	"nodeType": "YulIdentifier",
																	"src": "17315:1:13"
																}
															]
														}
													]
												},
												"name": "mod_t_uint256",
												"nodeType": "YulFunctionDefinition",
												"parameters": [
													{
														"name": "x",
														"nodeType": "YulTypedName",
														"src": "17246:1:13",
														"type": ""
													},
													{
														"name": "y",
														"nodeType": "YulTypedName",
														"src": "17249:1:13",
														"type": ""
													}
												],
												"returnVariables": [
													{
														"name": "r",
														"nodeType": "YulTypedName",
														"src": "17255:1:13",
														"type": ""
													}
												],
												"src": "17223:112:13"
											},
											{
												"body": {
													"nodeType": "YulBlock",
													"src": "17372:95:13",
													"statements": [
														{
															"expression": {
																"arguments": [
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "17389:1:13",
																		"type": "",
																		"value": "0"
																	},
																	{
																		"arguments": [
																			{
																				"kind": "number",
																				"nodeType": "YulLiteral",
																				"src": "17396:3:13",
																				"type": "",
																				"value": "224"
																			},
																			{
																				"kind": "number",
																				"nodeType": "YulLiteral",
																				"src": "17401:10:13",
																				"type": "",
																				"value": "0x4e487b71"
																			}
																		],
																		"functionName": {
																			"name": "shl",
																			"nodeType": "YulIdentifier",
																			"src": "17392:3:13"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "17392:20:13"
																	}
																],
																"functionName": {
																	"name": "mstore",
																	"nodeType": "YulIdentifier",
																	"src": "17382:6:13"
																},
																"nodeType": "YulFunctionCall",
																"src": "17382:31:13"
															},
															"nodeType": "YulExpressionStatement",
															"src": "17382:31:13"
														},
														{
															"expression": {
																"arguments": [
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "17429:1:13",
																		"type": "",
																		"value": "4"
																	},
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "17432:4:13",
																		"type": "",
																		"value": "0x32"
																	}
																],
																"functionName": {
																	"name": "mstore",
																	"nodeType": "YulIdentifier",
																	"src": "17422:6:13"
																},
																"nodeType": "YulFunctionCall",
																"src": "17422:15:13"
															},
															"nodeType": "YulExpressionStatement",
															"src": "17422:15:13"
														},
														{
															"expression": {
																"arguments": [
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "17453:1:13",
																		"type": "",
																		"value": "0"
																	},
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "17456:4:13",
																		"type": "",
																		"value": "0x24"
																	}
																],
																"functionName": {
																	"name": "revert",
																	"nodeType": "YulIdentifier",
																	"src": "17446:6:13"
																},
																"nodeType": "YulFunctionCall",
																"src": "17446:15:13"
															},
															"nodeType": "YulExpressionStatement",
															"src": "17446:15:13"
														}
													]
												},
												"name": "panic_error_0x32",
												"nodeType": "YulFunctionDefinition",
												"src": "17340:127:13"
											}
										]
									},
									"contents": "{\n    { }\n    function validator_revert_bytes4(value)\n    {\n        if iszero(eq(value, and(value, shl(224, 0xffffffff)))) { revert(0, 0) }\n    }\n    function abi_decode_tuple_t_bytes4(headStart, dataEnd) -> value0\n    {\n        if slt(sub(dataEnd, headStart), 32) { revert(0, 0) }\n        let value := calldataload(headStart)\n        validator_revert_bytes4(value)\n        value0 := value\n    }\n    function abi_encode_tuple_t_bool__to_t_bool__fromStack_reversed(headStart, value0) -> tail\n    {\n        tail := add(headStart, 32)\n        mstore(headStart, iszero(iszero(value0)))\n    }\n    function abi_decode_address(offset) -> value\n    {\n        value := calldataload(offset)\n        if iszero(eq(value, and(value, sub(shl(160, 1), 1)))) { revert(0, 0) }\n    }\n    function abi_decode_tuple_t_address(headStart, dataEnd) -> value0\n    {\n        if slt(sub(dataEnd, headStart), 32) { revert(0, 0) }\n        value0 := abi_decode_address(headStart)\n    }\n    function abi_encode_tuple_t_uint256__to_t_uint256__fromStack_reversed(headStart, value0) -> tail\n    {\n        tail := add(headStart, 32)\n        mstore(headStart, value0)\n    }\n    function panic_error_0x41()\n    {\n        mstore(0, shl(224, 0x4e487b71))\n        mstore(4, 0x41)\n        revert(0, 0x24)\n    }\n    function allocate_memory(size) -> memPtr\n    {\n        memPtr := mload(64)\n        let newFreePtr := add(memPtr, and(add(size, 31), not(31)))\n        if or(gt(newFreePtr, 0xffffffffffffffff), lt(newFreePtr, memPtr)) { panic_error_0x41() }\n        mstore(64, newFreePtr)\n    }\n    function abi_decode_available_length_string(src, length, end) -> array\n    {\n        if gt(length, 0xffffffffffffffff) { panic_error_0x41() }\n        array := allocate_memory(add(and(add(length, 31), not(31)), 0x20))\n        mstore(array, length)\n        if gt(add(src, length), end) { revert(0, 0) }\n        calldatacopy(add(array, 0x20), src, length)\n        mstore(add(add(array, length), 0x20), 0)\n    }\n    function abi_decode_tuple_t_string_memory_ptr(headStart, dataEnd) -> value0\n    {\n        if slt(sub(dataEnd, headStart), 32) { revert(0, 0) }\n        let offset := calldataload(headStart)\n        if gt(offset, 0xffffffffffffffff) { revert(0, 0) }\n        let _1 := add(headStart, offset)\n        if iszero(slt(add(_1, 0x1f), dataEnd)) { revert(0, 0) }\n        value0 := abi_decode_available_length_string(add(_1, 32), calldataload(_1), dataEnd)\n    }\n    function copy_memory_to_memory(src, dst, length)\n    {\n        let i := 0\n        for { } lt(i, length) { i := add(i, 32) }\n        {\n            mstore(add(dst, i), mload(add(src, i)))\n        }\n        if gt(i, length) { mstore(add(dst, length), 0) }\n    }\n    function abi_encode_string_memory_ptr(value, pos) -> end\n    {\n        let length := mload(value)\n        mstore(pos, length)\n        copy_memory_to_memory(add(value, 0x20), add(pos, 0x20), length)\n        end := add(add(pos, and(add(length, 31), not(31))), 0x20)\n    }\n    function abi_encode_tuple_t_string_memory_ptr__to_t_string_memory_ptr__fromStack_reversed(headStart, value0) -> tail\n    {\n        mstore(headStart, 32)\n        tail := abi_encode_string_memory_ptr(value0, add(headStart, 32))\n    }\n    function abi_decode_tuple_t_uint256(headStart, dataEnd) -> value0\n    {\n        if slt(sub(dataEnd, headStart), 32) { revert(0, 0) }\n        value0 := calldataload(headStart)\n    }\n    function abi_encode_tuple_t_address__to_t_address__fromStack_reversed(headStart, value0) -> tail\n    {\n        tail := add(headStart, 32)\n        mstore(headStart, and(value0, sub(shl(160, 1), 1)))\n    }\n    function abi_decode_tuple_t_addresst_uint256(headStart, dataEnd) -> value0, value1\n    {\n        if slt(sub(dataEnd, headStart), 64) { revert(0, 0) }\n        value0 := abi_decode_address(headStart)\n        value1 := calldataload(add(headStart, 32))\n    }\n    function abi_decode_tuple_t_addresst_addresst_uint256(headStart, dataEnd) -> value0, value1, value2\n    {\n        if slt(sub(dataEnd, headStart), 96) { revert(0, 0) }\n        value0 := abi_decode_address(headStart)\n        value1 := abi_decode_address(add(headStart, 32))\n        value2 := calldataload(add(headStart, 64))\n    }\n    function abi_decode_tuple_t_array$_t_bytes32_$dyn_memory_ptrt_uint256(headStart, dataEnd) -> value0, value1\n    {\n        if slt(sub(dataEnd, headStart), 64) { revert(0, 0) }\n        let offset := calldataload(headStart)\n        let _1 := 0xffffffffffffffff\n        if gt(offset, _1) { revert(0, 0) }\n        let _2 := add(headStart, offset)\n        if iszero(slt(add(_2, 0x1f), dataEnd)) { revert(0, 0) }\n        let _3 := calldataload(_2)\n        let _4 := 0x20\n        if gt(_3, _1) { panic_error_0x41() }\n        let _5 := shl(5, _3)\n        let dst := allocate_memory(add(_5, _4))\n        let dst_1 := dst\n        mstore(dst, _3)\n        dst := add(dst, _4)\n        let srcEnd := add(add(_2, _5), _4)\n        if gt(srcEnd, dataEnd) { revert(0, 0) }\n        let src := add(_2, _4)\n        for { } lt(src, srcEnd) { src := add(src, _4) }\n        {\n            mstore(dst, calldataload(src))\n            dst := add(dst, _4)\n        }\n        value0 := dst_1\n        value1 := calldataload(add(headStart, _4))\n    }\n    function abi_encode_tuple_t_bytes32__to_t_bytes32__fromStack_reversed(headStart, value0) -> tail\n    {\n        tail := add(headStart, 32)\n        mstore(headStart, value0)\n    }\n    function abi_decode_tuple_t_bytes32(headStart, dataEnd) -> value0\n    {\n        if slt(sub(dataEnd, headStart), 32) { revert(0, 0) }\n        value0 := calldataload(headStart)\n    }\n    function abi_encode_tuple_t_array$_t_uint256_$dyn_memory_ptr__to_t_array$_t_uint256_$dyn_memory_ptr__fromStack_reversed(headStart, value0) -> tail\n    {\n        let _1 := 32\n        let tail_1 := add(headStart, _1)\n        mstore(headStart, _1)\n        let pos := tail_1\n        let length := mload(value0)\n        mstore(tail_1, length)\n        pos := add(headStart, 64)\n        let srcPtr := add(value0, _1)\n        let i := 0\n        for { } lt(i, length) { i := add(i, 1) }\n        {\n            mstore(pos, mload(srcPtr))\n            pos := add(pos, _1)\n            srcPtr := add(srcPtr, _1)\n        }\n        tail := pos\n    }\n    function abi_decode_tuple_t_addresst_bool(headStart, dataEnd) -> value0, value1\n    {\n        if slt(sub(dataEnd, headStart), 64) { revert(0, 0) }\n        value0 := abi_decode_address(headStart)\n        let value := calldataload(add(headStart, 32))\n        if iszero(eq(value, iszero(iszero(value)))) { revert(0, 0) }\n        value1 := value\n    }\n    function abi_decode_tuple_t_addresst_addresst_uint256t_bytes_memory_ptr(headStart, dataEnd) -> value0, value1, value2, value3\n    {\n        if slt(sub(dataEnd, headStart), 128) { revert(0, 0) }\n        value0 := abi_decode_address(headStart)\n        value1 := abi_decode_address(add(headStart, 32))\n        value2 := calldataload(add(headStart, 64))\n        let offset := calldataload(add(headStart, 96))\n        if gt(offset, 0xffffffffffffffff) { revert(0, 0) }\n        let _1 := add(headStart, offset)\n        if iszero(slt(add(_1, 0x1f), dataEnd)) { revert(0, 0) }\n        value3 := abi_decode_available_length_string(add(_1, 32), calldataload(_1), dataEnd)\n    }\n    function abi_decode_tuple_t_addresst_address(headStart, dataEnd) -> value0, value1\n    {\n        if slt(sub(dataEnd, headStart), 64) { revert(0, 0) }\n        value0 := abi_decode_address(headStart)\n        value1 := abi_decode_address(add(headStart, 32))\n    }\n    function abi_encode_tuple_t_stringliteral_9924ebdf1add33d25d4ef888e16131f0a5687b0580a36c21b5c301a6c462effe__to_t_string_memory_ptr__fromStack_reversed(headStart) -> tail\n    {\n        mstore(headStart, 32)\n        mstore(add(headStart, 32), 32)\n        mstore(add(headStart, 64), \"Ownable: caller is not the owner\")\n        tail := add(headStart, 96)\n    }\n    function extract_byte_array_length(data) -> length\n    {\n        length := shr(1, data)\n        let outOfPlaceEncoding := and(data, 1)\n        if iszero(outOfPlaceEncoding) { length := and(length, 0x7f) }\n        if eq(outOfPlaceEncoding, lt(length, 32))\n        {\n            mstore(0, shl(224, 0x4e487b71))\n            mstore(4, 0x22)\n            revert(0, 0x24)\n        }\n    }\n    function abi_encode_tuple_t_stringliteral_0b39a6345f34c8d3711dfee0a8d6f2ec7300f78ff8b109391ba42a768c3501b2__to_t_string_memory_ptr__fromStack_reversed(headStart) -> tail\n    {\n        mstore(headStart, 32)\n        mstore(add(headStart, 32), 48)\n        mstore(add(headStart, 64), \"CryptoBullDogs :: Cannot be call\")\n        mstore(add(headStart, 96), \"ed by a contract\")\n        tail := add(headStart, 128)\n    }\n    function abi_encode_tuple_t_stringliteral_c20fc45585ea982635c0eaea27752aa72d9d12c67d0eca0ac62441a0fcd497bc__to_t_string_memory_ptr__fromStack_reversed(headStart) -> tail\n    {\n        mstore(headStart, 32)\n        mstore(add(headStart, 32), 37)\n        mstore(add(headStart, 64), \"CryptoBullDogs :: Minting is on \")\n        mstore(add(headStart, 96), \"Pause\")\n        tail := add(headStart, 128)\n    }\n    function panic_error_0x11()\n    {\n        mstore(0, shl(224, 0x4e487b71))\n        mstore(4, 0x11)\n        revert(0, 0x24)\n    }\n    function checked_add_t_uint256(x, y) -> sum\n    {\n        if gt(x, not(y)) { panic_error_0x11() }\n        sum := add(x, y)\n    }\n    function abi_encode_tuple_t_stringliteral_c23275b1ed5ed81046546b0000675842efe31b6ede5f5a7e9e64b1e87538c27b__to_t_string_memory_ptr__fromStack_reversed(headStart) -> tail\n    {\n        mstore(headStart, 32)\n        mstore(add(headStart, 32), 47)\n        mstore(add(headStart, 64), \"CryptoBullDogs :: Cannot mint be\")\n        mstore(add(headStart, 96), \"yond max supply\")\n        tail := add(headStart, 128)\n    }\n    function abi_encode_tuple_t_stringliteral_a7784544cb8b9a65a2b0965c3345ca15fb09d360c00de0cc8d856dad61d1ba77__to_t_string_memory_ptr__fromStack_reversed(headStart) -> tail\n    {\n        mstore(headStart, 32)\n        mstore(add(headStart, 32), 55)\n        mstore(add(headStart, 64), \"CryptoBullDogs:: Cannot mint bey\")\n        mstore(add(headStart, 96), \"ond whitelist max mint!\")\n        tail := add(headStart, 128)\n    }\n    function checked_mul_t_uint256(x, y) -> product\n    {\n        if and(iszero(iszero(x)), gt(y, div(not(0), x))) { panic_error_0x11() }\n        product := mul(x, y)\n    }\n    function abi_encode_tuple_t_stringliteral_3f5ae172148f1a839b485a0b667d45729d23a3f71a8af08708a3cd4714b3609f__to_t_string_memory_ptr__fromStack_reversed(headStart) -> tail\n    {\n        mstore(headStart, 32)\n        mstore(add(headStart, 32), 44)\n        mstore(add(headStart, 64), \"CryptoBullDogs :: Payment is bel\")\n        mstore(add(headStart, 96), \"ow the price\")\n        tail := add(headStart, 128)\n    }\n    function abi_encode_tuple_packed_t_address__to_t_address__nonPadded_inplace_fromStack_reversed(pos, value0) -> end\n    {\n        mstore(pos, and(shl(96, value0), not(0xffffffffffffffffffffffff)))\n        end := add(pos, 20)\n    }\n    function abi_encode_tuple_t_stringliteral_d9829f603a2b359b234b0a0f735ae7dd63ba4e2bffa17e8480bd5f19fbc111cd__to_t_string_memory_ptr__fromStack_reversed(headStart) -> tail\n    {\n        mstore(headStart, 32)\n        mstore(add(headStart, 32), 41)\n        mstore(add(headStart, 64), \"CryptoBullDogs :: You are not wh\")\n        mstore(add(headStart, 96), \"itelisted\")\n        tail := add(headStart, 128)\n    }\n    function panic_error_0x12()\n    {\n        mstore(0, shl(224, 0x4e487b71))\n        mstore(4, 0x12)\n        revert(0, 0x24)\n    }\n    function checked_div_t_uint256(x, y) -> r\n    {\n        if iszero(y) { panic_error_0x12() }\n        r := div(x, y)\n    }\n    function increment_t_uint256(value) -> ret\n    {\n        if eq(value, not(0)) { panic_error_0x11() }\n        ret := add(value, 1)\n    }\n    function abi_encode_tuple_t_stringliteral_4564d982d90210332958c1167d5b8793ec62b7f630d1d2edde455ef94ad8862d__to_t_string_memory_ptr__fromStack_reversed(headStart) -> tail\n    {\n        mstore(headStart, 32)\n        mstore(add(headStart, 32), 33)\n        mstore(add(headStart, 64), \"CryptoBullDogs :: Not Yet Active\")\n        mstore(add(headStart, 96), \".\")\n        tail := add(headStart, 128)\n    }\n    function abi_encode_tuple_t_stringliteral_b6c181b21e441452ee7d7a7c60b6959a4f4ea0ea4d2d03845776065ae0fba129__to_t_string_memory_ptr__fromStack_reversed(headStart) -> tail\n    {\n        mstore(headStart, 32)\n        mstore(add(headStart, 32), 35)\n        mstore(add(headStart, 64), \"CryptoBullDogs :: Beyond Max Sup\")\n        mstore(add(headStart, 96), \"ply\")\n        tail := add(headStart, 128)\n    }\n    function abi_encode_tuple_t_stringliteral_d50224ebe3461b0a303d65927b666a283fb32c6ac10a95714d9f0a81b05788d6__to_t_string_memory_ptr__fromStack_reversed(headStart) -> tail\n    {\n        mstore(headStart, 32)\n        mstore(add(headStart, 32), 41)\n        mstore(add(headStart, 64), \"CryptoBullDogs :: Already minted\")\n        mstore(add(headStart, 96), \" 3 times!\")\n        tail := add(headStart, 128)\n    }\n    function abi_encode_tuple_t_stringliteral_aea8008bf26276581196d49f4534f22b2d7f0710e7141375c13ff69906fe5f3c__to_t_string_memory_ptr__fromStack_reversed(headStart) -> tail\n    {\n        mstore(headStart, 32)\n        mstore(add(headStart, 32), 24)\n        mstore(add(headStart, 64), \"CryptoBullDogs :: Below \")\n        tail := add(headStart, 96)\n    }\n    function abi_encode_tuple_t_stringliteral_8b1a1b9660295b67e7b14793b8c2bd996c6eeb2d2db0f052d14c8cdc22873a9a__to_t_string_memory_ptr__fromStack_reversed(headStart) -> tail\n    {\n        mstore(headStart, 32)\n        mstore(add(headStart, 32), 37)\n        mstore(add(headStart, 64), \"CryptoBullDogs :: Team already m\")\n        mstore(add(headStart, 96), \"inted\")\n        tail := add(headStart, 128)\n    }\n    function abi_encode_tuple_t_stringliteral_a2d45c0fba603d40d82d590051761ca952d1ab9d78cca6d0d464d7b6e961a9cb__to_t_string_memory_ptr__fromStack_reversed(headStart) -> tail\n    {\n        mstore(headStart, 32)\n        mstore(add(headStart, 32), 47)\n        mstore(add(headStart, 64), \"ERC721Metadata: URI query for no\")\n        mstore(add(headStart, 96), \"nexistent token\")\n        tail := add(headStart, 128)\n    }\n    function array_dataslot_string_storage(ptr) -> data\n    {\n        mstore(0, ptr)\n        data := keccak256(0, 0x20)\n    }\n    function abi_encode_string(value, pos) -> end\n    {\n        let length := mload(value)\n        copy_memory_to_memory(add(value, 0x20), pos, length)\n        end := add(pos, length)\n    }\n    function abi_encode_stringliteral(pos) -> end\n    {\n        mstore(pos, \".json\")\n        end := add(pos, 5)\n    }\n    function abi_encode_tuple_packed_t_string_storage_t_string_memory_ptr_t_stringliteral_94311adc0a0cd4e10be11b23bd4316b8cffa4adf693e8f96f5c075aa439a7972__to_t_string_memory_ptr_t_string_memory_ptr_t_string_memory_ptr__nonPadded_inplace_fromStack_reversed(pos, value1, value0) -> end\n    {\n        let ret := 0\n        let slotValue := sload(value0)\n        let length := ret\n        let _1 := 1\n        length := shr(_1, slotValue)\n        let outOfPlaceEncoding := and(slotValue, _1)\n        if iszero(outOfPlaceEncoding) { length := and(length, 0x7f) }\n        let _2 := 32\n        if eq(outOfPlaceEncoding, lt(length, _2))\n        {\n            mstore(ret, shl(224, 0x4e487b71))\n            mstore(4, 0x22)\n            revert(ret, 0x24)\n        }\n        switch outOfPlaceEncoding\n        case 0 {\n            mstore(pos, and(slotValue, not(255)))\n            ret := add(pos, length)\n        }\n        case 1 {\n            let dataPos := array_dataslot_string_storage(value0)\n            let i := 0\n            for { } lt(i, length) { i := add(i, _2) }\n            {\n                mstore(add(pos, i), sload(dataPos))\n                dataPos := add(dataPos, _1)\n            }\n            ret := add(pos, length)\n        }\n        end := abi_encode_stringliteral(abi_encode_string(value1, ret))\n    }\n    function abi_encode_tuple_t_stringliteral_245f15ff17f551913a7a18385165551503906a406f905ac1c2437281a7cd0cfe__to_t_string_memory_ptr__fromStack_reversed(headStart) -> tail\n    {\n        mstore(headStart, 32)\n        mstore(add(headStart, 32), 38)\n        mstore(add(headStart, 64), \"Ownable: new owner is the zero a\")\n        mstore(add(headStart, 96), \"ddress\")\n        tail := add(headStart, 128)\n    }\n    function abi_encode_tuple_t_address_t_address_t_uint256_t_bytes_memory_ptr__to_t_address_t_address_t_uint256_t_bytes_memory_ptr__fromStack_reversed(headStart, value3, value2, value1, value0) -> tail\n    {\n        let _1 := sub(shl(160, 1), 1)\n        mstore(headStart, and(value0, _1))\n        mstore(add(headStart, 32), and(value1, _1))\n        mstore(add(headStart, 64), value2)\n        mstore(add(headStart, 96), 128)\n        tail := abi_encode_string_memory_ptr(value3, add(headStart, 128))\n    }\n    function abi_decode_tuple_t_bytes4_fromMemory(headStart, dataEnd) -> value0\n    {\n        if slt(sub(dataEnd, headStart), 32) { revert(0, 0) }\n        let value := mload(headStart)\n        validator_revert_bytes4(value)\n        value0 := value\n    }\n    function checked_sub_t_uint256(x, y) -> diff\n    {\n        if lt(x, y) { panic_error_0x11() }\n        diff := sub(x, y)\n    }\n    function mod_t_uint256(x, y) -> r\n    {\n        if iszero(y) { panic_error_0x12() }\n        r := mod(x, y)\n    }\n    function panic_error_0x32()\n    {\n        mstore(0, shl(224, 0x4e487b71))\n        mstore(4, 0x32)\n        revert(0, 0x24)\n    }\n}",
									"id": 13,
									"language": "Yul",
									"name": "#utility.yul"
								}
							],
							"immutableReferences": {},
							"linkReferences": {},
							"object": "",
							"opcodes": "PUSH1 0x80 PUSH1 0x40 MSTORE PUSH1 0x4 CALLDATASIZE LT PUSH2 0x25C JUMPI PUSH1 0x0 CALLDATALOAD PUSH1 0xE0 SHR DUP1 PUSH4 0x70A08231 GT PUSH2 0x144 JUMPI DUP1 PUSH4 0xB0962C53 GT PUSH2 0xB6 JUMPI DUP1 PUSH4 0xC4AE3168 GT PUSH2 0x7A JUMPI DUP1 PUSH4 0xC4AE3168 EQ PUSH2 0x69C JUMPI DUP1 PUSH4 0xC87B56DD EQ PUSH2 0x6B1 JUMPI DUP1 PUSH4 0xE222C7F9 EQ PUSH2 0x6D1 JUMPI DUP1 PUSH4 0xE8B5498D EQ PUSH2 0x6E6 JUMPI DUP1 PUSH4 0xE985E9C5 EQ PUSH2 0x708 JUMPI DUP1 PUSH4 0xF2FDE38B EQ PUSH2 0x751 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP1 PUSH4 0xB0962C53 EQ PUSH2 0x62C JUMPI DUP1 PUSH4 0xB88D4FDE EQ PUSH2 0x64C JUMPI DUP1 PUSH4 0xBA7A86B8 EQ PUSH2 0x66C JUMPI DUP1 PUSH4 0xBC912E1A EQ PUSH2 0x681 JUMPI DUP1 PUSH4 0xC08DFD3C EQ PUSH2 0x4E4 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP1 PUSH4 0x86A173EE GT PUSH2 0x108 JUMPI DUP1 PUSH4 0x86A173EE EQ PUSH2 0x591 JUMPI DUP1 PUSH4 0x8BB64A8C EQ PUSH2 0x5B1 JUMPI DUP1 PUSH4 0x8DA5CB5B EQ PUSH2 0x5C6 JUMPI DUP1 PUSH4 0x95D89B41 EQ PUSH2 0x5E4 JUMPI DUP1 PUSH4 0xA0712D68 EQ PUSH2 0x5F9 JUMPI DUP1 PUSH4 0xA22CB465 EQ PUSH2 0x60C JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP1 PUSH4 0x70A08231 EQ PUSH2 0x4F9 JUMPI DUP1 PUSH4 0x715018A6 EQ PUSH2 0x519 JUMPI DUP1 PUSH4 0x7CB64759 EQ PUSH2 0x52E JUMPI DUP1 PUSH4 0x83A974A2 EQ PUSH2 0x54E JUMPI DUP1 PUSH4 0x8456CB59 EQ PUSH2 0x570 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP1 PUSH4 0x2904E6D9 GT PUSH2 0x1DD JUMPI DUP1 PUSH4 0x49590657 GT PUSH2 0x1A1 JUMPI DUP1 PUSH4 0x49590657 EQ PUSH2 0x46B JUMPI DUP1 PUSH4 0x4CF5F7A4 EQ PUSH2 0x480 JUMPI DUP1 PUSH4 0x54214F69 EQ PUSH2 0x495 JUMPI DUP1 PUSH4 0x5B8AD429 EQ PUSH2 0x4AF JUMPI DUP1 PUSH4 0x6352211E EQ PUSH2 0x4C4 JUMPI DUP1 PUSH4 0x65F13097 EQ PUSH2 0x4E4 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP1 PUSH4 0x2904E6D9 EQ PUSH2 0x3EE JUMPI DUP1 PUSH4 0x32CB6B0C EQ PUSH2 0x401 JUMPI DUP1 PUSH4 0x33BC1C5C EQ PUSH2 0x417 JUMPI DUP1 PUSH4 0x3CCFD60B EQ PUSH2 0x436 JUMPI DUP1 PUSH4 0x42842E0E EQ PUSH2 0x44B JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP1 PUSH4 0x81812FC GT PUSH2 0x224 JUMPI DUP1 PUSH4 0x81812FC EQ PUSH2 0x330 JUMPI DUP1 PUSH4 0x95EA7B3 EQ PUSH2 0x368 JUMPI DUP1 PUSH4 0x18160DDD EQ PUSH2 0x388 JUMPI DUP1 PUSH4 0x1C16521C EQ PUSH2 0x3A1 JUMPI DUP1 PUSH4 0x23B872DD EQ PUSH2 0x3CE JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP1 PUSH4 0x1FFC9A7 EQ PUSH2 0x261 JUMPI DUP1 PUSH4 0x345E3CB EQ PUSH2 0x296 JUMPI DUP1 PUSH4 0x675B7C6 EQ PUSH2 0x2D1 JUMPI DUP1 PUSH4 0x6FDDE03 EQ PUSH2 0x2F3 JUMPI DUP1 PUSH4 0x7E89EC0 EQ PUSH2 0x315 JUMPI JUMPDEST PUSH1 0x0 DUP1 REVERT JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x26D JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x281 PUSH2 0x27C CALLDATASIZE PUSH1 0x4 PUSH2 0x1F2F JUMP JUMPDEST PUSH2 0x771 JUMP JUMPDEST PUSH1 0x40 MLOAD SWAP1 ISZERO ISZERO DUP2 MSTORE PUSH1 0x20 ADD JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x2A2 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x2C3 PUSH2 0x2B1 CALLDATASIZE PUSH1 0x4 PUSH2 0x1F68 JUMP JUMPDEST PUSH1 0xE PUSH1 0x20 MSTORE PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0x40 SWAP1 KECCAK256 SLOAD DUP2 JUMP JUMPDEST PUSH1 0x40 MLOAD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH2 0x28D JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x2DD JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x2F1 PUSH2 0x2EC CALLDATASIZE PUSH1 0x4 PUSH2 0x2020 JUMP JUMPDEST PUSH2 0x7C3 JUMP JUMPDEST STOP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x2FF JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x308 PUSH2 0x80D JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH2 0x28D SWAP2 SWAP1 PUSH2 0x20C0 JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x321 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x2C3 PUSH7 0x8E1BC9BF040000 DUP2 JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x33C JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x350 PUSH2 0x34B CALLDATASIZE PUSH1 0x4 PUSH2 0x20D3 JUMP JUMPDEST PUSH2 0x89F JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB SWAP1 SWAP2 AND DUP2 MSTORE PUSH1 0x20 ADD PUSH2 0x28D JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x374 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x2F1 PUSH2 0x383 CALLDATASIZE PUSH1 0x4 PUSH2 0x20EC JUMP JUMPDEST PUSH2 0x8E3 JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x394 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH1 0x1 SLOAD PUSH1 0x0 SLOAD SUB PUSH2 0x2C3 JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x3AD JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x2C3 PUSH2 0x3BC CALLDATASIZE PUSH1 0x4 PUSH2 0x1F68 JUMP JUMPDEST PUSH1 0xD PUSH1 0x20 MSTORE PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0x40 SWAP1 KECCAK256 SLOAD DUP2 JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x3DA JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x2F1 PUSH2 0x3E9 CALLDATASIZE PUSH1 0x4 PUSH2 0x2116 JUMP JUMPDEST PUSH2 0x971 JUMP JUMPDEST PUSH2 0x2F1 PUSH2 0x3FC CALLDATASIZE PUSH1 0x4 PUSH2 0x2152 JUMP JUMPDEST PUSH2 0x97C JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x40D JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x2C3 PUSH2 0x8AE DUP2 JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x423 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH1 0xB SLOAD PUSH2 0x281 SWAP1 PUSH2 0x100 SWAP1 DIV PUSH1 0xFF AND DUP2 JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x442 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x2F1 PUSH2 0xC5C JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x457 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x2F1 PUSH2 0x466 CALLDATASIZE PUSH1 0x4 PUSH2 0x2116 JUMP JUMPDEST PUSH2 0xD10 JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x477 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH1 0xC SLOAD PUSH2 0x2C3 JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x48C JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x308 PUSH2 0xD2B JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x4A1 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH1 0xB SLOAD PUSH2 0x281 SWAP1 PUSH1 0xFF AND DUP2 JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x4BB JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x2F1 PUSH2 0xDB9 JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x4D0 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x350 PUSH2 0x4DF CALLDATASIZE PUSH1 0x4 PUSH2 0x20D3 JUMP JUMPDEST PUSH2 0xDF7 JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x4F0 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x2C3 PUSH1 0xA DUP2 JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x505 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x2C3 PUSH2 0x514 CALLDATASIZE PUSH1 0x4 PUSH2 0x1F68 JUMP JUMPDEST PUSH2 0xE09 JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x525 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x2F1 PUSH2 0xE57 JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x53A JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x2F1 PUSH2 0x549 CALLDATASIZE PUSH1 0x4 PUSH2 0x20D3 JUMP JUMPDEST PUSH2 0xE8D JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x55A JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x563 PUSH2 0xEBC JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH2 0x28D SWAP2 SWAP1 PUSH2 0x21FD JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x57C JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH1 0xB SLOAD PUSH2 0x281 SWAP1 PUSH4 0x1000000 SWAP1 DIV PUSH1 0xFF AND DUP2 JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x59D JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH1 0xB SLOAD PUSH2 0x281 SWAP1 PUSH3 0x10000 SWAP1 DIV PUSH1 0xFF AND DUP2 JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x5BD JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x2F1 PUSH2 0xF37 JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x5D2 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH1 0x8 SLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND PUSH2 0x350 JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x5F0 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x308 PUSH2 0xF80 JUMP JUMPDEST PUSH2 0x2F1 PUSH2 0x607 CALLDATASIZE PUSH1 0x4 PUSH2 0x20D3 JUMP JUMPDEST PUSH2 0xF8F JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x618 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x2F1 PUSH2 0x627 CALLDATASIZE PUSH1 0x4 PUSH2 0x2241 JUMP JUMPDEST PUSH2 0x1194 JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x638 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x2F1 PUSH2 0x647 CALLDATASIZE PUSH1 0x4 PUSH2 0x2020 JUMP JUMPDEST PUSH2 0x122A JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x658 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x2F1 PUSH2 0x667 CALLDATASIZE PUSH1 0x4 PUSH2 0x227D JUMP JUMPDEST PUSH2 0x1267 JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x678 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x2F1 PUSH2 0x12B8 JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x68D JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x2C3 PUSH7 0x6A94D74F430000 DUP2 JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x6A8 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x2F1 PUSH2 0x136C JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x6BD JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x308 PUSH2 0x6CC CALLDATASIZE PUSH1 0x4 PUSH2 0x20D3 JUMP JUMPDEST PUSH2 0x13B7 JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x6DD JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x2F1 PUSH2 0x1531 JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x6F2 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH1 0xB SLOAD PUSH2 0x281 SWAP1 PUSH5 0x100000000 SWAP1 DIV PUSH1 0xFF AND DUP2 JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x714 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x281 PUSH2 0x723 CALLDATASIZE PUSH1 0x4 PUSH2 0x22F8 JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB SWAP2 DUP3 AND PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0x7 PUSH1 0x20 SWAP1 DUP2 MSTORE PUSH1 0x40 DUP1 DUP4 KECCAK256 SWAP4 SWAP1 SWAP5 AND DUP3 MSTORE SWAP2 SWAP1 SWAP2 MSTORE KECCAK256 SLOAD PUSH1 0xFF AND SWAP1 JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x75D JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x2F1 PUSH2 0x76C CALLDATASIZE PUSH1 0x4 PUSH2 0x1F68 JUMP JUMPDEST PUSH2 0x1578 JUMP JUMPDEST PUSH1 0x0 PUSH1 0x1 PUSH1 0x1 PUSH1 0xE0 SHL SUB NOT DUP3 AND PUSH4 0x80AC58CD PUSH1 0xE0 SHL EQ DUP1 PUSH2 0x7A2 JUMPI POP PUSH1 0x1 PUSH1 0x1 PUSH1 0xE0 SHL SUB NOT DUP3 AND PUSH4 0x5B5E139F PUSH1 0xE0 SHL EQ JUMPDEST DUP1 PUSH2 0x7BD JUMPI POP PUSH4 0x1FFC9A7 PUSH1 0xE0 SHL PUSH1 0x1 PUSH1 0x1 PUSH1 0xE0 SHL SUB NOT DUP4 AND EQ JUMPDEST SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x8 SLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND CALLER EQ PUSH2 0x7F6 JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x7ED SWAP1 PUSH2 0x232B JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST DUP1 MLOAD PUSH2 0x809 SWAP1 PUSH1 0x9 SWAP1 PUSH1 0x20 DUP5 ADD SWAP1 PUSH2 0x1E80 JUMP JUMPDEST POP POP JUMP JUMPDEST PUSH1 0x60 PUSH1 0x2 DUP1 SLOAD PUSH2 0x81C SWAP1 PUSH2 0x2360 JUMP JUMPDEST DUP1 PUSH1 0x1F ADD PUSH1 0x20 DUP1 SWAP2 DIV MUL PUSH1 0x20 ADD PUSH1 0x40 MLOAD SWAP1 DUP2 ADD PUSH1 0x40 MSTORE DUP1 SWAP3 SWAP2 SWAP1 DUP2 DUP2 MSTORE PUSH1 0x20 ADD DUP3 DUP1 SLOAD PUSH2 0x848 SWAP1 PUSH2 0x2360 JUMP JUMPDEST DUP1 ISZERO PUSH2 0x895 JUMPI DUP1 PUSH1 0x1F LT PUSH2 0x86A JUMPI PUSH2 0x100 DUP1 DUP4 SLOAD DIV MUL DUP4 MSTORE SWAP2 PUSH1 0x20 ADD SWAP2 PUSH2 0x895 JUMP JUMPDEST DUP3 ADD SWAP2 SWAP1 PUSH1 0x0 MSTORE PUSH1 0x20 PUSH1 0x0 KECCAK256 SWAP1 JUMPDEST DUP2 SLOAD DUP2 MSTORE SWAP1 PUSH1 0x1 ADD SWAP1 PUSH1 0x20 ADD DUP1 DUP4 GT PUSH2 0x878 JUMPI DUP3 SWAP1 SUB PUSH1 0x1F AND DUP3 ADD SWAP2 JUMPDEST POP POP POP POP POP SWAP1 POP SWAP1 JUMP JUMPDEST PUSH1 0x0 PUSH2 0x8AA DUP3 PUSH2 0x1610 JUMP JUMPDEST PUSH2 0x8C7 JUMPI PUSH1 0x40 MLOAD PUSH4 0x33D1C039 PUSH1 0xE2 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST POP PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0x6 PUSH1 0x20 MSTORE PUSH1 0x40 SWAP1 KECCAK256 SLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND SWAP1 JUMP JUMPDEST PUSH1 0x0 PUSH2 0x8EE DUP3 PUSH2 0xDF7 JUMP JUMPDEST SWAP1 POP DUP1 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND DUP4 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND EQ ISZERO PUSH2 0x923 JUMPI PUSH1 0x40 MLOAD PUSH4 0x250FDEE3 PUSH1 0xE2 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST CALLER PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP3 AND EQ DUP1 ISZERO SWAP1 PUSH2 0x943 JUMPI POP PUSH2 0x941 DUP2 CALLER PUSH2 0x723 JUMP JUMPDEST ISZERO JUMPDEST ISZERO PUSH2 0x961 JUMPI PUSH1 0x40 MLOAD PUSH4 0x67D9DCA1 PUSH1 0xE1 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST PUSH2 0x96C DUP4 DUP4 DUP4 PUSH2 0x163B JUMP JUMPDEST POP POP POP JUMP JUMPDEST PUSH2 0x96C DUP4 DUP4 DUP4 PUSH2 0x1697 JUMP JUMPDEST ORIGIN CALLER EQ PUSH2 0x99B JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x7ED SWAP1 PUSH2 0x239B JUMP JUMPDEST PUSH1 0xB SLOAD PUSH3 0x10000 SWAP1 DIV PUSH1 0xFF AND PUSH2 0xA01 JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x25 PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x43727970746F42756C6C446F6773203A3A204D696E74696E67206973206F6E20 PUSH1 0x44 DUP3 ADD MSTORE PUSH5 0x5061757365 PUSH1 0xD8 SHL PUSH1 0x64 DUP3 ADD MSTORE PUSH1 0x84 ADD PUSH2 0x7ED JUMP JUMPDEST PUSH2 0x8AE DUP2 PUSH2 0xA12 PUSH1 0x1 SLOAD PUSH1 0x0 SLOAD SUB SWAP1 JUMP JUMPDEST PUSH2 0xA1C SWAP2 SWAP1 PUSH2 0x2401 JUMP JUMPDEST GT ISZERO PUSH2 0xA82 JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x2F PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x43727970746F42756C6C446F6773203A3A2043616E6E6F74206D696E74206265 PUSH1 0x44 DUP3 ADD MSTORE PUSH15 0x796F6E64206D617820737570706C79 PUSH1 0x88 SHL PUSH1 0x64 DUP3 ADD MSTORE PUSH1 0x84 ADD PUSH2 0x7ED JUMP JUMPDEST CALLER PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0xE PUSH1 0x20 MSTORE PUSH1 0x40 SWAP1 KECCAK256 SLOAD PUSH1 0xA SWAP1 PUSH2 0xAA0 SWAP1 DUP4 SWAP1 PUSH2 0x2401 JUMP JUMPDEST GT ISZERO PUSH2 0xB14 JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x37 PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x43727970746F42756C6C446F67733A3A2043616E6E6F74206D696E7420626579 PUSH1 0x44 DUP3 ADD MSTORE PUSH32 0x6F6E642077686974656C697374206D6178206D696E7421000000000000000000 PUSH1 0x64 DUP3 ADD MSTORE PUSH1 0x84 ADD PUSH2 0x7ED JUMP JUMPDEST PUSH2 0xB25 DUP2 PUSH7 0x6A94D74F430000 PUSH2 0x2419 JUMP JUMPDEST CALLVALUE LT ISZERO PUSH2 0xB89 JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x2C PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x43727970746F42756C6C446F6773203A3A205061796D656E742069732062656C PUSH1 0x44 DUP3 ADD MSTORE PUSH12 0x6F7720746865207072696365 PUSH1 0xA0 SHL PUSH1 0x64 DUP3 ADD MSTORE PUSH1 0x84 ADD PUSH2 0x7ED JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH12 0xFFFFFFFFFFFFFFFFFFFFFFFF NOT CALLER PUSH1 0x60 SHL AND PUSH1 0x20 DUP3 ADD MSTORE PUSH1 0x0 SWAP1 PUSH1 0x34 ADD PUSH1 0x40 MLOAD PUSH1 0x20 DUP2 DUP4 SUB SUB DUP2 MSTORE SWAP1 PUSH1 0x40 MSTORE DUP1 MLOAD SWAP1 PUSH1 0x20 ADD KECCAK256 SWAP1 POP PUSH2 0xBCF DUP4 PUSH1 0xC SLOAD DUP4 PUSH2 0x18AB JUMP JUMPDEST PUSH2 0xC2D JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x29 PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x43727970746F42756C6C446F6773203A3A20596F7520617265206E6F74207768 PUSH1 0x44 DUP3 ADD MSTORE PUSH9 0x1A5D195B1A5CDD1959 PUSH1 0xBA SHL PUSH1 0x64 DUP3 ADD MSTORE PUSH1 0x84 ADD PUSH2 0x7ED JUMP JUMPDEST CALLER PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0xE PUSH1 0x20 MSTORE PUSH1 0x40 DUP2 KECCAK256 DUP1 SLOAD DUP5 SWAP3 SWAP1 PUSH2 0xC4C SWAP1 DUP5 SWAP1 PUSH2 0x2401 JUMP JUMPDEST SWAP1 SWAP2 SSTORE POP PUSH2 0x96C SWAP1 POP CALLER DUP4 PUSH2 0x18C1 JUMP JUMPDEST PUSH1 0x8 SLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND CALLER EQ PUSH2 0xC86 JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x7ED SWAP1 PUSH2 0x232B JUMP JUMPDEST PUSH1 0x0 PUSH1 0x64 PUSH2 0xC95 SELFBALANCE PUSH1 0x3 PUSH2 0x2419 JUMP JUMPDEST PUSH2 0xC9F SWAP2 SWAP1 PUSH2 0x244E JUMP JUMPDEST PUSH1 0x40 MLOAD SWAP1 SWAP2 POP PUSH20 0x90EE4B80C3B15B8B83510BE8FCF2BCED69A4C9DB SWAP1 DUP3 ISZERO PUSH2 0x8FC MUL SWAP1 DUP4 SWAP1 PUSH1 0x0 DUP2 DUP2 DUP2 DUP6 DUP9 DUP9 CALL SWAP4 POP POP POP POP ISZERO DUP1 ISZERO PUSH2 0xCE3 JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP PUSH1 0x40 MLOAD CALLER SWAP1 SELFBALANCE DUP1 ISZERO PUSH2 0x8FC MUL SWAP2 PUSH1 0x0 DUP2 DUP2 DUP2 DUP6 DUP9 DUP9 CALL SWAP4 POP POP POP POP ISZERO DUP1 ISZERO PUSH2 0x809 JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST PUSH2 0x96C DUP4 DUP4 DUP4 PUSH1 0x40 MLOAD DUP1 PUSH1 0x20 ADD PUSH1 0x40 MSTORE DUP1 PUSH1 0x0 DUP2 MSTORE POP PUSH2 0x1267 JUMP JUMPDEST PUSH1 0xA DUP1 SLOAD PUSH2 0xD38 SWAP1 PUSH2 0x2360 JUMP JUMPDEST DUP1 PUSH1 0x1F ADD PUSH1 0x20 DUP1 SWAP2 DIV MUL PUSH1 0x20 ADD PUSH1 0x40 MLOAD SWAP1 DUP2 ADD PUSH1 0x40 MSTORE DUP1 SWAP3 SWAP2 SWAP1 DUP2 DUP2 MSTORE PUSH1 0x20 ADD DUP3 DUP1 SLOAD PUSH2 0xD64 SWAP1 PUSH2 0x2360 JUMP JUMPDEST DUP1 ISZERO PUSH2 0xDB1 JUMPI DUP1 PUSH1 0x1F LT PUSH2 0xD86 JUMPI PUSH2 0x100 DUP1 DUP4 SLOAD DIV MUL DUP4 MSTORE SWAP2 PUSH1 0x20 ADD SWAP2 PUSH2 0xDB1 JUMP JUMPDEST DUP3 ADD SWAP2 SWAP1 PUSH1 0x0 MSTORE PUSH1 0x20 PUSH1 0x0 KECCAK256 SWAP1 JUMPDEST DUP2 SLOAD DUP2 MSTORE SWAP1 PUSH1 0x1 ADD SWAP1 PUSH1 0x20 ADD DUP1 DUP4 GT PUSH2 0xD94 JUMPI DUP3 SWAP1 SUB PUSH1 0x1F AND DUP3 ADD SWAP2 JUMPDEST POP POP POP POP POP DUP2 JUMP JUMPDEST PUSH1 0x8 SLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND CALLER EQ PUSH2 0xDE3 JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x7ED SWAP1 PUSH2 0x232B JUMP JUMPDEST PUSH1 0xB DUP1 SLOAD PUSH1 0xFF NOT DUP2 AND PUSH1 0xFF SWAP1 SWAP2 AND ISZERO OR SWAP1 SSTORE JUMP JUMPDEST PUSH1 0x0 PUSH2 0xE02 DUP3 PUSH2 0x18DB JUMP JUMPDEST MLOAD SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP3 AND PUSH2 0xE32 JUMPI PUSH1 0x40 MLOAD PUSH4 0x23D3AD81 PUSH1 0xE2 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST POP PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0x5 PUSH1 0x20 MSTORE PUSH1 0x40 SWAP1 KECCAK256 SLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0x40 SHL SUB AND SWAP1 JUMP JUMPDEST PUSH1 0x8 SLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND CALLER EQ PUSH2 0xE81 JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x7ED SWAP1 PUSH2 0x232B JUMP JUMPDEST PUSH2 0xE8B PUSH1 0x0 PUSH2 0x19F5 JUMP JUMPDEST JUMP JUMPDEST PUSH1 0x8 SLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND CALLER EQ PUSH2 0xEB7 JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x7ED SWAP1 PUSH2 0x232B JUMP JUMPDEST PUSH1 0xC SSTORE JUMP JUMPDEST PUSH1 0x60 CALLER PUSH1 0x0 PUSH2 0xECA DUP3 PUSH2 0xE09 JUMP JUMPDEST SWAP1 POP PUSH1 0x0 DUP2 PUSH1 0x1 PUSH1 0x1 PUSH1 0x40 SHL SUB DUP2 GT ISZERO PUSH2 0xEE6 JUMPI PUSH2 0xEE6 PUSH2 0x1F83 JUMP JUMPDEST PUSH1 0x40 MLOAD SWAP1 DUP1 DUP3 MSTORE DUP1 PUSH1 0x20 MUL PUSH1 0x20 ADD DUP3 ADD PUSH1 0x40 MSTORE DUP1 ISZERO PUSH2 0xF0F JUMPI DUP2 PUSH1 0x20 ADD PUSH1 0x20 DUP3 MUL DUP1 CALLDATASIZE DUP4 CALLDATACOPY ADD SWAP1 POP JUMPDEST POP SWAP1 POP PUSH1 0x0 JUMPDEST DUP3 DUP2 LT ISZERO PUSH2 0xF2F JUMPI DUP1 PUSH2 0xF27 DUP2 PUSH2 0x2462 JUMP JUMPDEST SWAP2 POP POP PUSH2 0xF15 JUMP JUMPDEST POP SWAP4 SWAP3 POP POP POP JUMP JUMPDEST PUSH1 0x8 SLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND CALLER EQ PUSH2 0xF61 JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x7ED SWAP1 PUSH2 0x232B JUMP JUMPDEST PUSH1 0xB DUP1 SLOAD PUSH3 0xFF0000 NOT DUP2 AND PUSH3 0x10000 SWAP2 DUP3 SWAP1 DIV PUSH1 0xFF AND ISZERO SWAP1 SWAP2 MUL OR SWAP1 SSTORE JUMP JUMPDEST PUSH1 0x60 PUSH1 0x3 DUP1 SLOAD PUSH2 0x81C SWAP1 PUSH2 0x2360 JUMP JUMPDEST ORIGIN CALLER EQ PUSH2 0xFAE JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x7ED SWAP1 PUSH2 0x239B JUMP JUMPDEST PUSH1 0xB SLOAD PUSH2 0x100 SWAP1 DIV PUSH1 0xFF AND PUSH2 0x100F JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x21 PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x43727970746F42756C6C446F6773203A3A204E6F742059657420416374697665 PUSH1 0x44 DUP3 ADD MSTORE PUSH1 0x17 PUSH1 0xF9 SHL PUSH1 0x64 DUP3 ADD MSTORE PUSH1 0x84 ADD PUSH2 0x7ED JUMP JUMPDEST PUSH2 0x8AE DUP2 PUSH2 0x1020 PUSH1 0x1 SLOAD PUSH1 0x0 SLOAD SUB SWAP1 JUMP JUMPDEST PUSH2 0x102A SWAP2 SWAP1 PUSH2 0x2401 JUMP JUMPDEST GT ISZERO PUSH2 0x1084 JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x23 PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x43727970746F42756C6C446F6773203A3A204265796F6E64204D617820537570 PUSH1 0x44 DUP3 ADD MSTORE PUSH3 0x706C79 PUSH1 0xE8 SHL PUSH1 0x64 DUP3 ADD MSTORE PUSH1 0x84 ADD PUSH2 0x7ED JUMP JUMPDEST CALLER PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0xD PUSH1 0x20 MSTORE PUSH1 0x40 SWAP1 KECCAK256 SLOAD PUSH1 0xA SWAP1 PUSH2 0x10A2 SWAP1 DUP4 SWAP1 PUSH2 0x2401 JUMP JUMPDEST GT ISZERO PUSH2 0x1102 JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x29 PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x43727970746F42756C6C446F6773203A3A20416C7265616479206D696E746564 PUSH1 0x44 DUP3 ADD MSTORE PUSH9 0x20332074696D657321 PUSH1 0xB8 SHL PUSH1 0x64 DUP3 ADD MSTORE PUSH1 0x84 ADD PUSH2 0x7ED JUMP JUMPDEST PUSH2 0x1113 DUP2 PUSH7 0x8E1BC9BF040000 PUSH2 0x2419 JUMP JUMPDEST CALLVALUE LT ISZERO PUSH2 0x1162 JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x18 PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x43727970746F42756C6C446F6773203A3A2042656C6F77200000000000000000 PUSH1 0x44 DUP3 ADD MSTORE PUSH1 0x64 ADD PUSH2 0x7ED JUMP JUMPDEST CALLER PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0xD PUSH1 0x20 MSTORE PUSH1 0x40 DUP2 KECCAK256 DUP1 SLOAD DUP4 SWAP3 SWAP1 PUSH2 0x1181 SWAP1 DUP5 SWAP1 PUSH2 0x2401 JUMP JUMPDEST SWAP1 SWAP2 SSTORE POP PUSH2 0x1191 SWAP1 POP CALLER DUP3 PUSH2 0x18C1 JUMP JUMPDEST POP JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP3 AND CALLER EQ ISZERO PUSH2 0x11BE JUMPI PUSH1 0x40 MLOAD PUSH4 0xB06307DB PUSH1 0xE0 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST CALLER PUSH1 0x0 DUP2 DUP2 MSTORE PUSH1 0x7 PUSH1 0x20 SWAP1 DUP2 MSTORE PUSH1 0x40 DUP1 DUP4 KECCAK256 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP8 AND DUP1 DUP6 MSTORE SWAP1 DUP4 MSTORE SWAP3 DUP2 SWAP1 KECCAK256 DUP1 SLOAD PUSH1 0xFF NOT AND DUP7 ISZERO ISZERO SWAP1 DUP2 OR SWAP1 SWAP2 SSTORE SWAP1 MLOAD SWAP1 DUP2 MSTORE SWAP2 SWAP3 SWAP2 PUSH32 0x17307EAB39AB6107E8899845AD3D59BD9653F200F220920489CA2B5937696C31 SWAP2 ADD PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 LOG3 POP POP JUMP JUMPDEST PUSH1 0x8 SLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND CALLER EQ PUSH2 0x1254 JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x7ED SWAP1 PUSH2 0x232B JUMP JUMPDEST DUP1 MLOAD PUSH2 0x809 SWAP1 PUSH1 0xA SWAP1 PUSH1 0x20 DUP5 ADD SWAP1 PUSH2 0x1E80 JUMP JUMPDEST PUSH2 0x1272 DUP5 DUP5 DUP5 PUSH2 0x1697 JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP4 AND EXTCODESIZE ISZERO ISZERO DUP1 ISZERO PUSH2 0x1294 JUMPI POP PUSH2 0x1292 DUP5 DUP5 DUP5 DUP5 PUSH2 0x1A47 JUMP JUMPDEST ISZERO JUMPDEST ISZERO PUSH2 0x12B2 JUMPI PUSH1 0x40 MLOAD PUSH4 0x68D2BF6B PUSH1 0xE1 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST POP POP POP POP JUMP JUMPDEST PUSH1 0x8 SLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND CALLER EQ PUSH2 0x12E2 JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x7ED SWAP1 PUSH2 0x232B JUMP JUMPDEST PUSH1 0xB SLOAD PUSH5 0x100000000 SWAP1 DIV PUSH1 0xFF AND ISZERO PUSH2 0x134B JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x25 PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x43727970746F42756C6C446F6773203A3A205465616D20616C7265616479206D PUSH1 0x44 DUP3 ADD MSTORE PUSH5 0x1A5B9D1959 PUSH1 0xDA SHL PUSH1 0x64 DUP3 ADD MSTORE PUSH1 0x84 ADD PUSH2 0x7ED JUMP JUMPDEST PUSH1 0xB DUP1 SLOAD PUSH5 0xFF00000000 NOT AND PUSH5 0x100000000 OR SWAP1 SSTORE PUSH2 0xE8B CALLER PUSH2 0x26C PUSH2 0x18C1 JUMP JUMPDEST PUSH1 0x8 SLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND CALLER EQ PUSH2 0x1396 JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x7ED SWAP1 PUSH2 0x232B JUMP JUMPDEST PUSH1 0xB DUP1 SLOAD PUSH4 0xFF000000 NOT DUP2 AND PUSH4 0x1000000 SWAP2 DUP3 SWAP1 DIV PUSH1 0xFF AND ISZERO SWAP1 SWAP2 MUL OR SWAP1 SSTORE JUMP JUMPDEST PUSH1 0x60 PUSH2 0x13C2 DUP3 PUSH2 0x1610 JUMP JUMPDEST PUSH2 0x1426 JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x2F PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x4552433732314D657461646174613A2055524920717565727920666F72206E6F PUSH1 0x44 DUP3 ADD MSTORE PUSH15 0x3732BC34B9BA32B73A103A37B5B2B7 PUSH1 0x89 SHL PUSH1 0x64 DUP3 ADD MSTORE PUSH1 0x84 ADD PUSH2 0x7ED JUMP JUMPDEST PUSH1 0x0 PUSH2 0x1433 DUP4 PUSH1 0x1 PUSH2 0x2401 JUMP JUMPDEST PUSH1 0xB SLOAD SWAP1 SWAP2 POP PUSH1 0xFF AND PUSH2 0x14D3 JUMPI PUSH1 0xA DUP1 SLOAD PUSH2 0x144D SWAP1 PUSH2 0x2360 JUMP JUMPDEST DUP1 PUSH1 0x1F ADD PUSH1 0x20 DUP1 SWAP2 DIV MUL PUSH1 0x20 ADD PUSH1 0x40 MLOAD SWAP1 DUP2 ADD PUSH1 0x40 MSTORE DUP1 SWAP3 SWAP2 SWAP1 DUP2 DUP2 MSTORE PUSH1 0x20 ADD DUP3 DUP1 SLOAD PUSH2 0x1479 SWAP1 PUSH2 0x2360 JUMP JUMPDEST DUP1 ISZERO PUSH2 0x14C6 JUMPI DUP1 PUSH1 0x1F LT PUSH2 0x149B JUMPI PUSH2 0x100 DUP1 DUP4 SLOAD DIV MUL DUP4 MSTORE SWAP2 PUSH1 0x20 ADD SWAP2 PUSH2 0x14C6 JUMP JUMPDEST DUP3 ADD SWAP2 SWAP1 PUSH1 0x0 MSTORE PUSH1 0x20 PUSH1 0x0 KECCAK256 SWAP1 JUMPDEST DUP2 SLOAD DUP2 MSTORE SWAP1 PUSH1 0x1 ADD SWAP1 PUSH1 0x20 ADD DUP1 DUP4 GT PUSH2 0x14A9 JUMPI DUP3 SWAP1 SUB PUSH1 0x1F AND DUP3 ADD SWAP2 JUMPDEST POP POP POP POP POP SWAP2 POP POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x9 DUP1 SLOAD PUSH2 0x14E2 SWAP1 PUSH2 0x2360 JUMP JUMPDEST SWAP1 POP GT PUSH2 0x14FE JUMPI PUSH1 0x40 MLOAD DUP1 PUSH1 0x20 ADD PUSH1 0x40 MSTORE DUP1 PUSH1 0x0 DUP2 MSTORE POP PUSH2 0x152A JUMP JUMPDEST PUSH1 0x9 PUSH2 0x1509 DUP3 PUSH2 0x1B3F JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH1 0x20 ADD PUSH2 0x151A SWAP3 SWAP2 SWAP1 PUSH2 0x2499 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH1 0x20 DUP2 DUP4 SUB SUB DUP2 MSTORE SWAP1 PUSH1 0x40 MSTORE JUMPDEST SWAP4 SWAP3 POP POP POP JUMP JUMPDEST PUSH1 0x8 SLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND CALLER EQ PUSH2 0x155B JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x7ED SWAP1 PUSH2 0x232B JUMP JUMPDEST PUSH1 0xB DUP1 SLOAD PUSH2 0xFF00 NOT DUP2 AND PUSH2 0x100 SWAP2 DUP3 SWAP1 DIV PUSH1 0xFF AND ISZERO SWAP1 SWAP2 MUL OR SWAP1 SSTORE JUMP JUMPDEST PUSH1 0x8 SLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND CALLER EQ PUSH2 0x15A2 JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x7ED SWAP1 PUSH2 0x232B JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP2 AND PUSH2 0x1607 JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x26 PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x4F776E61626C653A206E6577206F776E657220697320746865207A65726F2061 PUSH1 0x44 DUP3 ADD MSTORE PUSH6 0x646472657373 PUSH1 0xD0 SHL PUSH1 0x64 DUP3 ADD MSTORE PUSH1 0x84 ADD PUSH2 0x7ED JUMP JUMPDEST PUSH2 0x1191 DUP2 PUSH2 0x19F5 JUMP JUMPDEST PUSH1 0x0 DUP1 SLOAD DUP3 LT DUP1 ISZERO PUSH2 0x7BD JUMPI POP POP PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0x4 PUSH1 0x20 MSTORE PUSH1 0x40 SWAP1 KECCAK256 SLOAD PUSH1 0x1 PUSH1 0xE0 SHL SWAP1 DIV PUSH1 0xFF AND ISZERO SWAP1 JUMP JUMPDEST PUSH1 0x0 DUP3 DUP2 MSTORE PUSH1 0x6 PUSH1 0x20 MSTORE PUSH1 0x40 DUP1 DUP3 KECCAK256 DUP1 SLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB NOT AND PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP8 DUP2 AND SWAP2 DUP3 OR SWAP1 SWAP3 SSTORE SWAP2 MLOAD DUP6 SWAP4 SWAP2 DUP6 AND SWAP2 PUSH32 0x8C5BE1E5EBEC7D5BD14F71427D1E84F3DD0314C0F7B2291E5B200AC8C7C3B925 SWAP2 LOG4 POP POP POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x16A2 DUP3 PUSH2 0x18DB JUMP JUMPDEST DUP1 MLOAD SWAP1 SWAP2 POP PUSH1 0x0 SWAP1 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND CALLER PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND EQ DUP1 PUSH2 0x16D0 JUMPI POP DUP2 MLOAD PUSH2 0x16D0 SWAP1 CALLER PUSH2 0x723 JUMP JUMPDEST DUP1 PUSH2 0x16EB JUMPI POP CALLER PUSH2 0x16E0 DUP5 PUSH2 0x89F JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND EQ JUMPDEST SWAP1 POP DUP1 PUSH2 0x170B JUMPI PUSH1 0x40 MLOAD PUSH4 0x2CE44B5F PUSH1 0xE1 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST DUP5 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND DUP3 PUSH1 0x0 ADD MLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND EQ PUSH2 0x1740 JUMPI PUSH1 0x40 MLOAD PUSH3 0xA11481 PUSH1 0xE8 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP5 AND PUSH2 0x1767 JUMPI PUSH1 0x40 MLOAD PUSH4 0x3A954ECD PUSH1 0xE2 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST PUSH2 0x1777 PUSH1 0x0 DUP5 DUP5 PUSH1 0x0 ADD MLOAD PUSH2 0x163B JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP6 DUP2 AND PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0x5 PUSH1 0x20 SWAP1 DUP2 MSTORE PUSH1 0x40 DUP1 DUP4 KECCAK256 DUP1 SLOAD PUSH8 0xFFFFFFFFFFFFFFFF NOT DUP1 DUP3 AND PUSH1 0x1 PUSH1 0x1 PUSH1 0x40 SHL SUB SWAP3 DUP4 AND PUSH1 0x0 NOT ADD DUP4 AND OR SWAP1 SWAP3 SSTORE DUP10 DUP7 AND DUP1 DUP7 MSTORE DUP4 DUP7 KECCAK256 DUP1 SLOAD SWAP4 DUP5 AND SWAP4 DUP4 AND PUSH1 0x1 SWAP1 DUP2 ADD DUP5 AND SWAP5 SWAP1 SWAP5 OR SWAP1 SSTORE DUP10 DUP7 MSTORE PUSH1 0x4 SWAP1 SWAP5 MSTORE DUP3 DUP6 KECCAK256 DUP1 SLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xE0 SHL SUB NOT AND SWAP1 SWAP5 OR PUSH1 0x1 PUSH1 0xA0 SHL TIMESTAMP SWAP1 SWAP3 AND SWAP2 SWAP1 SWAP2 MUL OR SWAP1 SWAP3 SSTORE SWAP1 DUP7 ADD DUP1 DUP4 MSTORE SWAP2 KECCAK256 SLOAD SWAP1 SWAP2 AND PUSH2 0x1861 JUMPI PUSH1 0x0 SLOAD DUP2 LT ISZERO PUSH2 0x1861 JUMPI DUP3 MLOAD PUSH1 0x0 DUP3 DUP2 MSTORE PUSH1 0x4 PUSH1 0x20 SWAP1 DUP2 MSTORE PUSH1 0x40 SWAP1 SWAP2 KECCAK256 DUP1 SLOAD SWAP2 DUP7 ADD MLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0x40 SHL SUB AND PUSH1 0x1 PUSH1 0xA0 SHL MUL PUSH1 0x1 PUSH1 0x1 PUSH1 0xE0 SHL SUB NOT SWAP1 SWAP3 AND PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB SWAP1 SWAP4 AND SWAP3 SWAP1 SWAP3 OR OR SWAP1 SSTORE JUMPDEST POP DUP3 DUP5 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND DUP7 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND PUSH32 0xDDF252AD1BE2C89B69C2B068FC378DAA952BA7F163C4A11628F55A4DF523B3EF PUSH1 0x40 MLOAD PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 LOG4 JUMPDEST POP POP POP POP POP JUMP JUMPDEST PUSH1 0x0 DUP3 PUSH2 0x18B8 DUP6 DUP5 PUSH2 0x1C3C JUMP JUMPDEST EQ SWAP5 SWAP4 POP POP POP POP JUMP JUMPDEST PUSH2 0x809 DUP3 DUP3 PUSH1 0x40 MLOAD DUP1 PUSH1 0x20 ADD PUSH1 0x40 MSTORE DUP1 PUSH1 0x0 DUP2 MSTORE POP PUSH2 0x1CA8 JUMP JUMPDEST PUSH1 0x40 DUP1 MLOAD PUSH1 0x60 DUP2 ADD DUP3 MSTORE PUSH1 0x0 DUP1 DUP3 MSTORE PUSH1 0x20 DUP3 ADD DUP2 SWAP1 MSTORE SWAP2 DUP2 ADD SWAP2 SWAP1 SWAP2 MSTORE DUP2 PUSH1 0x0 SLOAD DUP2 LT ISZERO PUSH2 0x19DC JUMPI PUSH1 0x0 DUP2 DUP2 MSTORE PUSH1 0x4 PUSH1 0x20 SWAP1 DUP2 MSTORE PUSH1 0x40 SWAP2 DUP3 SWAP1 KECCAK256 DUP3 MLOAD PUSH1 0x60 DUP2 ADD DUP5 MSTORE SWAP1 SLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP2 AND DUP3 MSTORE PUSH1 0x1 PUSH1 0xA0 SHL DUP2 DIV PUSH1 0x1 PUSH1 0x1 PUSH1 0x40 SHL SUB AND SWAP3 DUP3 ADD SWAP3 SWAP1 SWAP3 MSTORE PUSH1 0x1 PUSH1 0xE0 SHL SWAP1 SWAP2 DIV PUSH1 0xFF AND ISZERO ISZERO SWAP2 DUP2 ADD DUP3 SWAP1 MSTORE SWAP1 PUSH2 0x19DA JUMPI DUP1 MLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND ISZERO PUSH2 0x1971 JUMPI SWAP4 SWAP3 POP POP POP JUMP JUMPDEST POP PUSH1 0x0 NOT ADD PUSH1 0x0 DUP2 DUP2 MSTORE PUSH1 0x4 PUSH1 0x20 SWAP1 DUP2 MSTORE PUSH1 0x40 SWAP2 DUP3 SWAP1 KECCAK256 DUP3 MLOAD PUSH1 0x60 DUP2 ADD DUP5 MSTORE SWAP1 SLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP2 AND DUP1 DUP4 MSTORE PUSH1 0x1 PUSH1 0xA0 SHL DUP3 DIV PUSH1 0x1 PUSH1 0x1 PUSH1 0x40 SHL SUB AND SWAP4 DUP4 ADD SWAP4 SWAP1 SWAP4 MSTORE PUSH1 0x1 PUSH1 0xE0 SHL SWAP1 DIV PUSH1 0xFF AND ISZERO ISZERO SWAP3 DUP2 ADD SWAP3 SWAP1 SWAP3 MSTORE ISZERO PUSH2 0x19D5 JUMPI SWAP4 SWAP3 POP POP POP JUMP JUMPDEST PUSH2 0x1971 JUMP JUMPDEST POP JUMPDEST PUSH1 0x40 MLOAD PUSH4 0x6F96CDA1 PUSH1 0xE1 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST PUSH1 0x8 DUP1 SLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP4 DUP2 AND PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB NOT DUP4 AND DUP2 OR SWAP1 SWAP4 SSTORE PUSH1 0x40 MLOAD SWAP2 AND SWAP2 SWAP1 DUP3 SWAP1 PUSH32 0x8BE0079C531659141344CD1FD0A4F28419497F9722A3DAAFE3B4186F6B6457E0 SWAP1 PUSH1 0x0 SWAP1 LOG3 POP POP JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH4 0xA85BD01 PUSH1 0xE1 SHL DUP2 MSTORE PUSH1 0x0 SWAP1 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP6 AND SWAP1 PUSH4 0x150B7A02 SWAP1 PUSH2 0x1A7C SWAP1 CALLER SWAP1 DUP10 SWAP1 DUP9 SWAP1 DUP9 SWAP1 PUSH1 0x4 ADD PUSH2 0x2554 JUMP JUMPDEST PUSH1 0x20 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 PUSH1 0x0 DUP8 DUP1 EXTCODESIZE ISZERO DUP1 ISZERO PUSH2 0x1A96 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP GAS CALL SWAP3 POP POP POP DUP1 ISZERO PUSH2 0x1AC6 JUMPI POP PUSH1 0x40 DUP1 MLOAD PUSH1 0x1F RETURNDATASIZE SWAP1 DUP2 ADD PUSH1 0x1F NOT AND DUP3 ADD SWAP1 SWAP3 MSTORE PUSH2 0x1AC3 SWAP2 DUP2 ADD SWAP1 PUSH2 0x2591 JUMP JUMPDEST PUSH1 0x1 JUMPDEST PUSH2 0x1B21 JUMPI RETURNDATASIZE DUP1 DUP1 ISZERO PUSH2 0x1AF4 JUMPI PUSH1 0x40 MLOAD SWAP2 POP PUSH1 0x1F NOT PUSH1 0x3F RETURNDATASIZE ADD AND DUP3 ADD PUSH1 0x40 MSTORE RETURNDATASIZE DUP3 MSTORE RETURNDATASIZE PUSH1 0x0 PUSH1 0x20 DUP5 ADD RETURNDATACOPY PUSH2 0x1AF9 JUMP JUMPDEST PUSH1 0x60 SWAP2 POP JUMPDEST POP DUP1 MLOAD PUSH2 0x1B19 JUMPI PUSH1 0x40 MLOAD PUSH4 0x68D2BF6B PUSH1 0xE1 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST DUP1 MLOAD DUP2 PUSH1 0x20 ADD REVERT JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xE0 SHL SUB NOT AND PUSH4 0xA85BD01 PUSH1 0xE1 SHL EQ SWAP1 POP JUMPDEST SWAP5 SWAP4 POP POP POP POP JUMP JUMPDEST PUSH1 0x60 DUP2 PUSH2 0x1B63 JUMPI POP POP PUSH1 0x40 DUP1 MLOAD DUP1 DUP3 ADD SWAP1 SWAP2 MSTORE PUSH1 0x1 DUP2 MSTORE PUSH1 0x3 PUSH1 0xFC SHL PUSH1 0x20 DUP3 ADD MSTORE SWAP1 JUMP JUMPDEST DUP2 PUSH1 0x0 JUMPDEST DUP2 ISZERO PUSH2 0x1B8D JUMPI DUP1 PUSH2 0x1B77 DUP2 PUSH2 0x2462 JUMP JUMPDEST SWAP2 POP PUSH2 0x1B86 SWAP1 POP PUSH1 0xA DUP4 PUSH2 0x244E JUMP JUMPDEST SWAP2 POP PUSH2 0x1B67 JUMP JUMPDEST PUSH1 0x0 DUP2 PUSH1 0x1 PUSH1 0x1 PUSH1 0x40 SHL SUB DUP2 GT ISZERO PUSH2 0x1BA7 JUMPI PUSH2 0x1BA7 PUSH2 0x1F83 JUMP JUMPDEST PUSH1 0x40 MLOAD SWAP1 DUP1 DUP3 MSTORE DUP1 PUSH1 0x1F ADD PUSH1 0x1F NOT AND PUSH1 0x20 ADD DUP3 ADD PUSH1 0x40 MSTORE DUP1 ISZERO PUSH2 0x1BD1 JUMPI PUSH1 0x20 DUP3 ADD DUP2 DUP1 CALLDATASIZE DUP4 CALLDATACOPY ADD SWAP1 POP JUMPDEST POP SWAP1 POP JUMPDEST DUP5 ISZERO PUSH2 0x1B37 JUMPI PUSH2 0x1BE6 PUSH1 0x1 DUP4 PUSH2 0x25AE JUMP JUMPDEST SWAP2 POP PUSH2 0x1BF3 PUSH1 0xA DUP7 PUSH2 0x25C5 JUMP JUMPDEST PUSH2 0x1BFE SWAP1 PUSH1 0x30 PUSH2 0x2401 JUMP JUMPDEST PUSH1 0xF8 SHL DUP2 DUP4 DUP2 MLOAD DUP2 LT PUSH2 0x1C13 JUMPI PUSH2 0x1C13 PUSH2 0x25D9 JUMP JUMPDEST PUSH1 0x20 ADD ADD SWAP1 PUSH1 0x1 PUSH1 0x1 PUSH1 0xF8 SHL SUB NOT AND SWAP1 DUP2 PUSH1 0x0 BYTE SWAP1 MSTORE8 POP PUSH2 0x1C35 PUSH1 0xA DUP7 PUSH2 0x244E JUMP JUMPDEST SWAP5 POP PUSH2 0x1BD5 JUMP JUMPDEST PUSH1 0x0 DUP2 DUP2 JUMPDEST DUP5 MLOAD DUP2 LT ISZERO PUSH2 0xF2F JUMPI PUSH1 0x0 DUP6 DUP3 DUP2 MLOAD DUP2 LT PUSH2 0x1C5E JUMPI PUSH2 0x1C5E PUSH2 0x25D9 JUMP JUMPDEST PUSH1 0x20 MUL PUSH1 0x20 ADD ADD MLOAD SWAP1 POP DUP1 DUP4 GT PUSH2 0x1C84 JUMPI PUSH1 0x0 DUP4 DUP2 MSTORE PUSH1 0x20 DUP3 SWAP1 MSTORE PUSH1 0x40 SWAP1 KECCAK256 SWAP3 POP PUSH2 0x1C95 JUMP JUMPDEST PUSH1 0x0 DUP2 DUP2 MSTORE PUSH1 0x20 DUP5 SWAP1 MSTORE PUSH1 0x40 SWAP1 KECCAK256 SWAP3 POP JUMPDEST POP DUP1 PUSH2 0x1CA0 DUP2 PUSH2 0x2462 JUMP JUMPDEST SWAP2 POP POP PUSH2 0x1C41 JUMP JUMPDEST PUSH2 0x96C DUP4 DUP4 DUP4 PUSH1 0x1 PUSH1 0x0 SLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP6 AND PUSH2 0x1CD9 JUMPI PUSH1 0x40 MLOAD PUSH3 0x2E0763 PUSH1 0xE8 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST DUP4 PUSH2 0x1CF7 JUMPI PUSH1 0x40 MLOAD PUSH4 0xB562E8DD PUSH1 0xE0 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP6 AND PUSH1 0x0 DUP2 DUP2 MSTORE PUSH1 0x5 PUSH1 0x20 SWAP1 DUP2 MSTORE PUSH1 0x40 DUP1 DUP4 KECCAK256 DUP1 SLOAD PUSH16 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF NOT DUP2 AND PUSH1 0x1 PUSH1 0x1 PUSH1 0x40 SHL SUB DUP1 DUP4 AND DUP13 ADD DUP2 AND SWAP2 DUP3 OR PUSH9 0x10000000000000000 PUSH8 0xFFFFFFFFFFFFFFFF NOT SWAP1 SWAP5 AND SWAP1 SWAP3 OR DUP4 SWAP1 DIV DUP2 AND DUP13 ADD DUP2 AND SWAP1 SWAP3 MUL OR SWAP1 SWAP2 SSTORE DUP6 DUP5 MSTORE PUSH1 0x4 SWAP1 SWAP3 MSTORE SWAP1 SWAP2 KECCAK256 DUP1 SLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xE0 SHL SUB NOT AND SWAP1 SWAP3 OR PUSH1 0x1 PUSH1 0xA0 SHL TIMESTAMP SWAP1 SWAP3 AND SWAP2 SWAP1 SWAP2 MUL OR SWAP1 SSTORE DUP1 DUP1 DUP6 ADD DUP4 DUP1 ISZERO PUSH2 0x1DA8 JUMPI POP PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP8 AND EXTCODESIZE ISZERO ISZERO JUMPDEST ISZERO PUSH2 0x1E31 JUMPI JUMPDEST PUSH1 0x40 MLOAD DUP3 SWAP1 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP10 AND SWAP1 PUSH1 0x0 SWAP1 PUSH32 0xDDF252AD1BE2C89B69C2B068FC378DAA952BA7F163C4A11628F55A4DF523B3EF SWAP1 DUP3 SWAP1 LOG4 PUSH2 0x1DF9 PUSH1 0x0 DUP9 DUP5 DUP1 PUSH1 0x1 ADD SWAP6 POP DUP9 PUSH2 0x1A47 JUMP JUMPDEST PUSH2 0x1E16 JUMPI PUSH1 0x40 MLOAD PUSH4 0x68D2BF6B PUSH1 0xE1 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST DUP1 DUP3 EQ ISZERO PUSH2 0x1DAE JUMPI DUP3 PUSH1 0x0 SLOAD EQ PUSH2 0x1E2C JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH2 0x1E77 JUMP JUMPDEST JUMPDEST PUSH1 0x40 MLOAD PUSH1 0x1 DUP4 ADD SWAP3 SWAP1 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP10 AND SWAP1 PUSH1 0x0 SWAP1 PUSH32 0xDDF252AD1BE2C89B69C2B068FC378DAA952BA7F163C4A11628F55A4DF523B3EF SWAP1 DUP3 SWAP1 LOG4 DUP1 DUP3 EQ ISZERO PUSH2 0x1E32 JUMPI JUMPDEST POP PUSH1 0x0 SSTORE PUSH2 0x18A4 JUMP JUMPDEST DUP3 DUP1 SLOAD PUSH2 0x1E8C SWAP1 PUSH2 0x2360 JUMP JUMPDEST SWAP1 PUSH1 0x0 MSTORE PUSH1 0x20 PUSH1 0x0 KECCAK256 SWAP1 PUSH1 0x1F ADD PUSH1 0x20 SWAP1 DIV DUP2 ADD SWAP3 DUP3 PUSH2 0x1EAE JUMPI PUSH1 0x0 DUP6 SSTORE PUSH2 0x1EF4 JUMP JUMPDEST DUP3 PUSH1 0x1F LT PUSH2 0x1EC7 JUMPI DUP1 MLOAD PUSH1 0xFF NOT AND DUP4 DUP1 ADD OR DUP6 SSTORE PUSH2 0x1EF4 JUMP JUMPDEST DUP3 DUP1 ADD PUSH1 0x1 ADD DUP6 SSTORE DUP3 ISZERO PUSH2 0x1EF4 JUMPI SWAP2 DUP3 ADD JUMPDEST DUP3 DUP2 GT ISZERO PUSH2 0x1EF4 JUMPI DUP3 MLOAD DUP3 SSTORE SWAP2 PUSH1 0x20 ADD SWAP2 SWAP1 PUSH1 0x1 ADD SWAP1 PUSH2 0x1ED9 JUMP JUMPDEST POP PUSH2 0x1F00 SWAP3 SWAP2 POP PUSH2 0x1F04 JUMP JUMPDEST POP SWAP1 JUMP JUMPDEST JUMPDEST DUP1 DUP3 GT ISZERO PUSH2 0x1F00 JUMPI PUSH1 0x0 DUP2 SSTORE PUSH1 0x1 ADD PUSH2 0x1F05 JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xE0 SHL SUB NOT DUP2 AND DUP2 EQ PUSH2 0x1191 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 DUP5 SUB SLT ISZERO PUSH2 0x1F41 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP2 CALLDATALOAD PUSH2 0x152A DUP2 PUSH2 0x1F19 JUMP JUMPDEST DUP1 CALLDATALOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP2 AND DUP2 EQ PUSH2 0x1F63 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 DUP5 SUB SLT ISZERO PUSH2 0x1F7A JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH2 0x152A DUP3 PUSH2 0x1F4C JUMP JUMPDEST PUSH4 0x4E487B71 PUSH1 0xE0 SHL PUSH1 0x0 MSTORE PUSH1 0x41 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH1 0x0 REVERT JUMPDEST PUSH1 0x40 MLOAD PUSH1 0x1F DUP3 ADD PUSH1 0x1F NOT AND DUP2 ADD PUSH1 0x1 PUSH1 0x1 PUSH1 0x40 SHL SUB DUP2 GT DUP3 DUP3 LT OR ISZERO PUSH2 0x1FC1 JUMPI PUSH2 0x1FC1 PUSH2 0x1F83 JUMP JUMPDEST PUSH1 0x40 MSTORE SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x1 PUSH1 0x1 PUSH1 0x40 SHL SUB DUP4 GT ISZERO PUSH2 0x1FE2 JUMPI PUSH2 0x1FE2 PUSH2 0x1F83 JUMP JUMPDEST PUSH2 0x1FF5 PUSH1 0x1F DUP5 ADD PUSH1 0x1F NOT AND PUSH1 0x20 ADD PUSH2 0x1F99 JUMP JUMPDEST SWAP1 POP DUP3 DUP2 MSTORE DUP4 DUP4 DUP4 ADD GT ISZERO PUSH2 0x2009 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP3 DUP3 PUSH1 0x20 DUP4 ADD CALLDATACOPY PUSH1 0x0 PUSH1 0x20 DUP5 DUP4 ADD ADD MSTORE SWAP4 SWAP3 POP POP POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 DUP5 SUB SLT ISZERO PUSH2 0x2032 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP2 CALLDATALOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0x40 SHL SUB DUP2 GT ISZERO PUSH2 0x2048 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP3 ADD PUSH1 0x1F DUP2 ADD DUP5 SGT PUSH2 0x2059 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH2 0x1B37 DUP5 DUP3 CALLDATALOAD PUSH1 0x20 DUP5 ADD PUSH2 0x1FC9 JUMP JUMPDEST PUSH1 0x0 JUMPDEST DUP4 DUP2 LT ISZERO PUSH2 0x2083 JUMPI DUP2 DUP2 ADD MLOAD DUP4 DUP3 ADD MSTORE PUSH1 0x20 ADD PUSH2 0x206B JUMP JUMPDEST DUP4 DUP2 GT ISZERO PUSH2 0x12B2 JUMPI POP POP PUSH1 0x0 SWAP2 ADD MSTORE JUMP JUMPDEST PUSH1 0x0 DUP2 MLOAD DUP1 DUP5 MSTORE PUSH2 0x20AC DUP2 PUSH1 0x20 DUP7 ADD PUSH1 0x20 DUP7 ADD PUSH2 0x2068 JUMP JUMPDEST PUSH1 0x1F ADD PUSH1 0x1F NOT AND SWAP3 SWAP1 SWAP3 ADD PUSH1 0x20 ADD SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x20 DUP2 MSTORE PUSH1 0x0 PUSH2 0x152A PUSH1 0x20 DUP4 ADD DUP5 PUSH2 0x2094 JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 DUP5 SUB SLT ISZERO PUSH2 0x20E5 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP CALLDATALOAD SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x40 DUP4 DUP6 SUB SLT ISZERO PUSH2 0x20FF JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH2 0x2108 DUP4 PUSH2 0x1F4C JUMP JUMPDEST SWAP5 PUSH1 0x20 SWAP4 SWAP1 SWAP4 ADD CALLDATALOAD SWAP4 POP POP POP JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x0 PUSH1 0x60 DUP5 DUP7 SUB SLT ISZERO PUSH2 0x212B JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH2 0x2134 DUP5 PUSH2 0x1F4C JUMP JUMPDEST SWAP3 POP PUSH2 0x2142 PUSH1 0x20 DUP6 ADD PUSH2 0x1F4C JUMP JUMPDEST SWAP2 POP PUSH1 0x40 DUP5 ADD CALLDATALOAD SWAP1 POP SWAP3 POP SWAP3 POP SWAP3 JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x40 DUP4 DUP6 SUB SLT ISZERO PUSH2 0x2165 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP3 CALLDATALOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0x40 SHL SUB DUP1 DUP3 GT ISZERO PUSH2 0x217C JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP2 DUP6 ADD SWAP2 POP DUP6 PUSH1 0x1F DUP4 ADD SLT PUSH2 0x2190 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP2 CALLDATALOAD PUSH1 0x20 DUP3 DUP3 GT ISZERO PUSH2 0x21A4 JUMPI PUSH2 0x21A4 PUSH2 0x1F83 JUMP JUMPDEST DUP2 PUSH1 0x5 SHL SWAP3 POP PUSH2 0x21B5 DUP2 DUP5 ADD PUSH2 0x1F99 JUMP JUMPDEST DUP3 DUP2 MSTORE SWAP3 DUP5 ADD DUP2 ADD SWAP3 DUP2 DUP2 ADD SWAP1 DUP10 DUP6 GT ISZERO PUSH2 0x21CF JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST SWAP5 DUP3 ADD SWAP5 JUMPDEST DUP5 DUP7 LT ISZERO PUSH2 0x21ED JUMPI DUP6 CALLDATALOAD DUP3 MSTORE SWAP5 DUP3 ADD SWAP5 SWAP1 DUP3 ADD SWAP1 PUSH2 0x21D4 JUMP JUMPDEST SWAP10 SWAP8 SWAP1 SWAP2 ADD CALLDATALOAD SWAP8 POP POP POP POP POP POP POP JUMP JUMPDEST PUSH1 0x20 DUP1 DUP3 MSTORE DUP3 MLOAD DUP3 DUP3 ADD DUP2 SWAP1 MSTORE PUSH1 0x0 SWAP2 SWAP1 DUP5 DUP3 ADD SWAP1 PUSH1 0x40 DUP6 ADD SWAP1 DUP5 JUMPDEST DUP2 DUP2 LT ISZERO PUSH2 0x2235 JUMPI DUP4 MLOAD DUP4 MSTORE SWAP3 DUP5 ADD SWAP3 SWAP2 DUP5 ADD SWAP2 PUSH1 0x1 ADD PUSH2 0x2219 JUMP JUMPDEST POP SWAP1 SWAP7 SWAP6 POP POP POP POP POP POP JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x40 DUP4 DUP6 SUB SLT ISZERO PUSH2 0x2254 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH2 0x225D DUP4 PUSH2 0x1F4C JUMP JUMPDEST SWAP2 POP PUSH1 0x20 DUP4 ADD CALLDATALOAD DUP1 ISZERO ISZERO DUP2 EQ PUSH2 0x2272 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP1 SWAP2 POP POP SWAP3 POP SWAP3 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x0 DUP1 PUSH1 0x80 DUP6 DUP8 SUB SLT ISZERO PUSH2 0x2293 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH2 0x229C DUP6 PUSH2 0x1F4C JUMP JUMPDEST SWAP4 POP PUSH2 0x22AA PUSH1 0x20 DUP7 ADD PUSH2 0x1F4C JUMP JUMPDEST SWAP3 POP PUSH1 0x40 DUP6 ADD CALLDATALOAD SWAP2 POP PUSH1 0x60 DUP6 ADD CALLDATALOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0x40 SHL SUB DUP2 GT ISZERO PUSH2 0x22CC JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP6 ADD PUSH1 0x1F DUP2 ADD DUP8 SGT PUSH2 0x22DD JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH2 0x22EC DUP8 DUP3 CALLDATALOAD PUSH1 0x20 DUP5 ADD PUSH2 0x1FC9 JUMP JUMPDEST SWAP2 POP POP SWAP3 SWAP6 SWAP2 SWAP5 POP SWAP3 POP JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x40 DUP4 DUP6 SUB SLT ISZERO PUSH2 0x230B JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH2 0x2314 DUP4 PUSH2 0x1F4C JUMP JUMPDEST SWAP2 POP PUSH2 0x2322 PUSH1 0x20 DUP5 ADD PUSH2 0x1F4C JUMP JUMPDEST SWAP1 POP SWAP3 POP SWAP3 SWAP1 POP JUMP JUMPDEST PUSH1 0x20 DUP1 DUP3 MSTORE DUP2 DUP2 ADD MSTORE PUSH32 0x4F776E61626C653A2063616C6C6572206973206E6F7420746865206F776E6572 PUSH1 0x40 DUP3 ADD MSTORE PUSH1 0x60 ADD SWAP1 JUMP JUMPDEST PUSH1 0x1 DUP2 DUP2 SHR SWAP1 DUP3 AND DUP1 PUSH2 0x2374 JUMPI PUSH1 0x7F DUP3 AND SWAP2 POP JUMPDEST PUSH1 0x20 DUP3 LT DUP2 EQ ISZERO PUSH2 0x2395 JUMPI PUSH4 0x4E487B71 PUSH1 0xE0 SHL PUSH1 0x0 MSTORE PUSH1 0x22 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH1 0x0 REVERT JUMPDEST POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x20 DUP1 DUP3 MSTORE PUSH1 0x30 SWAP1 DUP3 ADD MSTORE PUSH32 0x43727970746F42756C6C446F6773203A3A2043616E6E6F742062652063616C6C PUSH1 0x40 DUP3 ADD MSTORE PUSH16 0x195908189E48184818DBDB9D1C9858DD PUSH1 0x82 SHL PUSH1 0x60 DUP3 ADD MSTORE PUSH1 0x80 ADD SWAP1 JUMP JUMPDEST PUSH4 0x4E487B71 PUSH1 0xE0 SHL PUSH1 0x0 MSTORE PUSH1 0x11 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH1 0x0 REVERT JUMPDEST PUSH1 0x0 DUP3 NOT DUP3 GT ISZERO PUSH2 0x2414 JUMPI PUSH2 0x2414 PUSH2 0x23EB JUMP JUMPDEST POP ADD SWAP1 JUMP JUMPDEST PUSH1 0x0 DUP2 PUSH1 0x0 NOT DIV DUP4 GT DUP3 ISZERO ISZERO AND ISZERO PUSH2 0x2433 JUMPI PUSH2 0x2433 PUSH2 0x23EB JUMP JUMPDEST POP MUL SWAP1 JUMP JUMPDEST PUSH4 0x4E487B71 PUSH1 0xE0 SHL PUSH1 0x0 MSTORE PUSH1 0x12 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH1 0x0 REVERT JUMPDEST PUSH1 0x0 DUP3 PUSH2 0x245D JUMPI PUSH2 0x245D PUSH2 0x2438 JUMP JUMPDEST POP DIV SWAP1 JUMP JUMPDEST PUSH1 0x0 PUSH1 0x0 NOT DUP3 EQ ISZERO PUSH2 0x2476 JUMPI PUSH2 0x2476 PUSH2 0x23EB JUMP JUMPDEST POP PUSH1 0x1 ADD SWAP1 JUMP JUMPDEST PUSH1 0x0 DUP2 MLOAD PUSH2 0x248F DUP2 DUP6 PUSH1 0x20 DUP7 ADD PUSH2 0x2068 JUMP JUMPDEST SWAP3 SWAP1 SWAP3 ADD SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 DUP1 DUP5 SLOAD DUP2 PUSH1 0x1 DUP3 DUP2 SHR SWAP2 POP DUP1 DUP4 AND DUP1 PUSH2 0x24B5 JUMPI PUSH1 0x7F DUP4 AND SWAP3 POP JUMPDEST PUSH1 0x20 DUP1 DUP5 LT DUP3 EQ ISZERO PUSH2 0x24D5 JUMPI PUSH4 0x4E487B71 PUSH1 0xE0 SHL DUP7 MSTORE PUSH1 0x22 PUSH1 0x4 MSTORE PUSH1 0x24 DUP7 REVERT JUMPDEST DUP2 DUP1 ISZERO PUSH2 0x24E9 JUMPI PUSH1 0x1 DUP2 EQ PUSH2 0x24FA JUMPI PUSH2 0x2527 JUMP JUMPDEST PUSH1 0xFF NOT DUP7 AND DUP10 MSTORE DUP5 DUP10 ADD SWAP7 POP PUSH2 0x2527 JUMP JUMPDEST PUSH1 0x0 DUP12 DUP2 MSTORE PUSH1 0x20 SWAP1 KECCAK256 PUSH1 0x0 JUMPDEST DUP7 DUP2 LT ISZERO PUSH2 0x251F JUMPI DUP2 SLOAD DUP12 DUP3 ADD MSTORE SWAP1 DUP6 ADD SWAP1 DUP4 ADD PUSH2 0x2506 JUMP JUMPDEST POP POP DUP5 DUP10 ADD SWAP7 POP JUMPDEST POP POP POP POP POP POP PUSH2 0x254B PUSH2 0x253A DUP3 DUP7 PUSH2 0x247D JUMP JUMPDEST PUSH5 0x173539B7B7 PUSH1 0xD9 SHL DUP2 MSTORE PUSH1 0x5 ADD SWAP1 JUMP JUMPDEST SWAP6 SWAP5 POP POP POP POP POP JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP6 DUP2 AND DUP3 MSTORE DUP5 AND PUSH1 0x20 DUP3 ADD MSTORE PUSH1 0x40 DUP2 ADD DUP4 SWAP1 MSTORE PUSH1 0x80 PUSH1 0x60 DUP3 ADD DUP2 SWAP1 MSTORE PUSH1 0x0 SWAP1 PUSH2 0x2587 SWAP1 DUP4 ADD DUP5 PUSH2 0x2094 JUMP JUMPDEST SWAP7 SWAP6 POP POP POP POP POP POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 DUP5 SUB SLT ISZERO PUSH2 0x25A3 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP2 MLOAD PUSH2 0x152A DUP2 PUSH2 0x1F19 JUMP JUMPDEST PUSH1 0x0 DUP3 DUP3 LT ISZERO PUSH2 0x25C0 JUMPI PUSH2 0x25C0 PUSH2 0x23EB JUMP JUMPDEST POP SUB SWAP1 JUMP JUMPDEST PUSH1 0x0 DUP3 PUSH2 0x25D4 JUMPI PUSH2 0x25D4 PUSH2 0x2438 JUMP JUMPDEST POP MOD SWAP1 JUMP JUMPDEST PUSH4 0x4E487B71 PUSH1 0xE0 SHL PUSH1 0x0 MSTORE PUSH1 0x32 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH1 0x0 REVERT INVALID LOG2 PUSH5 0x6970667358 0x22 SLT KECCAK256 0xCC 0xC0 0xD6 PUSH26 0x3696C9C6598F4D7991D88FC211F107D0883F5AC5CE95E85145 CREATE2 0xB1 PUSH5 0x736F6C6343 STOP ADDMOD MULMOD STOP CALLER ",
							"sourceMap": "220:4887:11:-:0;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;4843:300:12;;;;;;;;;;-1:-1:-1;4843:300:12;;;;;:::i;:::-;;:::i;:::-;;;565:14:13;;558:22;540:41;;528:2;513:18;4843:300:12;;;;;;;;998:53:11;;;;;;;;;;-1:-1:-1;998:53:11;;;;;:::i;:::-;;;;;;;;;;;;;;;;;1107:25:13;;;1095:2;1080:18;998:53:11;961:177:13;3975:113:11;;;;;;;;;;-1:-1:-1;3975:113:11;;;;;:::i;:::-;;:::i;:::-;;8139:98:12;;;;;;;;;;;;;:::i;:::-;;;;;;;:::i;459:53:11:-;;;;;;;;;;;;503:9;459:53;;9595:200:12;;;;;;;;;;-1:-1:-1;9595:200:12;;;;;:::i;:::-;;:::i;:::-;;;-1:-1:-1;;;;;3545:32:13;;;3527:51;;3515:2;3500:18;9595:200:12;3381:203:13;9172:362:12;;;;;;;;;;-1:-1:-1;9172:362:12;;;;;:::i;:::-;;:::i;4114:297::-;;;;;;;;;;-1:-1:-1;4364:12:12;;4158:7;4348:13;:28;4114:297;;942:50:11;;;;;;;;;;-1:-1:-1;942:50:11;;;;;:::i;:::-;;;;;;;;;;;;;;10426:164:12;;;;;;;;;;-1:-1:-1;10426:164:12;;;;;:::i;:::-;;:::i;1816:858:11:-;;;;;;:::i;:::-;;:::i;309:41::-;;;;;;;;;;;;346:4;309:41;;798:22;;;;;;;;;;-1:-1:-1;798:22:11;;;;;;;;;;;4806:299;;;;;;;;;;;;;:::i;10656:179:12:-;;;;;;;;;;-1:-1:-1;10656:179:12;;;;;:::i;:::-;;:::i;4348:90:11:-;;;;;;;;;;-1:-1:-1;4421:10:11;;4348:90;;615:35;;;;;;;;;;;;;:::i;770:22::-;;;;;;;;;;-1:-1:-1;770:22:11;;;;;;;;4717:83;;;;;;;;;;;;;:::i;7955:122:12:-;;;;;;;;;;-1:-1:-1;7955:122:12;;;;;:::i;:::-;;:::i;356:44:11:-;;;;;;;;;;;;398:2;356:44;;5202:203:12;;;;;;;;;;-1:-1:-1;5202:203:12;;;;;:::i;:::-;;:::i;1668:101:0:-;;;;;;;;;;;;;:::i;4239:103:11:-;;;;;;;;;;-1:-1:-1;4239:103:11;;;;;:::i;:::-;;:::i;3571:398::-;;;;;;;;;;;;;:::i;:::-;;;;;;;:::i;857:17::-;;;;;;;;;;-1:-1:-1;857:17:11;;;;;;;;;;;826:25;;;;;;;;;;-1:-1:-1;826:25:11;;;;;;;;;;;4522:96;;;;;;;;;;;;;:::i;1036:85:0:-;;;;;;;;;;-1:-1:-1;1108:6:0;;-1:-1:-1;;;;;1108:6:0;1036:85;;8301:102:12;;;;;;;;;;;;;:::i;1269:541:11:-;;;;;;:::i;:::-;;:::i;9862:274:12:-;;;;;;;;;;-1:-1:-1;9862:274:12;;;;;:::i;:::-;;:::i;4093:140:11:-;;;;;;;;;;-1:-1:-1;4093:140:11;;;;;:::i;:::-;;:::i;10901:359:12:-;;;;;;;;;;-1:-1:-1;10901:359:12;;;;;:::i;:::-;;:::i;2680:179:11:-;;;;;;;;;;;;;:::i;518:56::-;;;;;;;;;;;;565:9;518:56;;4444:72;;;;;;;;;;;;;:::i;3017:463::-;;;;;;;;;;-1:-1:-1;3017:463:11;;;;;:::i;:::-;;:::i;4624:87::-;;;;;;;;;;;;;:::i;880:22::-;;;;;;;;;;-1:-1:-1;880:22:11;;;;;;;;;;;10202:162:12;;;;;;;;;;-1:-1:-1;10202:162:12;;;;;:::i;:::-;-1:-1:-1;;;;;10322:25:12;;;10299:4;10322:25;;;:18;:25;;;;;;;;:35;;;;;;;;;;;;;;;10202:162;1918:198:0;;;;;;;;;;-1:-1:-1;1918:198:0;;;;;:::i;:::-;;:::i;4843:300:12:-;4945:4;-1:-1:-1;;;;;;4980:40:12;;-1:-1:-1;;;4980:40:12;;:104;;-1:-1:-1;;;;;;;5036:48:12;;-1:-1:-1;;;5036:48:12;4980:104;:156;;;-1:-1:-1;;;;;;;;;;937:40:9;;;5100:36:12;4961:175;4843:300;-1:-1:-1;;4843:300:12:o;3975:113:11:-;1108:6:0;;-1:-1:-1;;;;;1108:6:0;719:10:6;1248:23:0;1240:68;;;;-1:-1:-1;;;1240:68:0;;;;;;;:::i;:::-;;;;;;;;;4053:28:11;;::::1;::::0;:12:::1;::::0;:28:::1;::::0;::::1;::::0;::::1;:::i;:::-;;3975:113:::0;:::o;8139:98:12:-;8193:13;8225:5;8218:12;;;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;8139:98;:::o;9595:200::-;9663:7;9687:16;9695:7;9687;:16::i;:::-;9682:64;;9712:34;;-1:-1:-1;;;9712:34:12;;;;;;;;;;;9682:64;-1:-1:-1;9764:24:12;;;;:15;:24;;;;;;-1:-1:-1;;;;;9764:24:12;;9595:200::o;9172:362::-;9244:13;9260:24;9276:7;9260:15;:24::i;:::-;9244:40;;9304:5;-1:-1:-1;;;;;9298:11:12;:2;-1:-1:-1;;;;;9298:11:12;;9294:48;;;9318:24;;-1:-1:-1;;;9318:24:12;;;;;;;;;;;9294:48;719:10:6;-1:-1:-1;;;;;9357:21:12;;;;;;:63;;-1:-1:-1;9383:37:12;9400:5;719:10:6;10202:162:12;:::i;9383:37::-;9382:38;9357:63;9353:136;;;9443:35;;-1:-1:-1;;;9443:35:12;;;;;;;;;;;9353:136;9499:28;9508:2;9512:7;9521:5;9499:8;:28::i;:::-;9234:300;9172:362;;:::o;10426:164::-;10555:28;10565:4;10571:2;10575:7;10555:9;:28::i;1816:858:11:-;1169:9;1182:10;1169:23;1161:84;;;;-1:-1:-1;;;1161:84:11;;;;;;;:::i;:::-;1936:13:::1;::::0;;;::::1;;;1928:63;;;::::0;-1:-1:-1;;;1928:63:11;;8860:2:13;1928:63:11::1;::::0;::::1;8842:21:13::0;8899:2;8879:18;;;8872:30;8938:34;8918:18;;;8911:62;-1:-1:-1;;;8989:18:13;;;8982:35;9034:19;;1928:63:11::1;8658:401:13::0;1928:63:11::1;346:4;2026:9;2010:13;4364:12:12::0;;4158:7;4348:13;:28;;4114:297;2010:13:11::1;:25;;;;:::i;:::-;2009:41;;2001:101;;;::::0;-1:-1:-1;;;2001:101:11;;9531:2:13;2001:101:11::1;::::0;::::1;9513:21:13::0;9570:2;9550:18;;;9543:30;9609:34;9589:18;;;9582:62;-1:-1:-1;;;9660:18:13;;;9653:45;9715:19;;2001:101:11::1;9329:411:13::0;2001:101:11::1;2140:10;2121:30;::::0;;;:18:::1;:30;::::0;;;;;451:2:::1;::::0;2121:42:::1;::::0;2154:9;;2121:42:::1;:::i;:::-;2120:67;;2112:135;;;::::0;-1:-1:-1;;;2112:135:11;;9947:2:13;2112:135:11::1;::::0;::::1;9929:21:13::0;9986:2;9966:18;;;9959:30;10025:34;10005:18;;;9998:62;10096:25;10076:18;;;10069:53;10139:19;;2112:135:11::1;9745:419:13::0;2112:135:11::1;2279:32;2302:9:::0;565::::1;2279:32;:::i;:::-;2265:9;:47;;2257:104;;;::::0;-1:-1:-1;;;2257:104:11;;10544:2:13;2257:104:11::1;::::0;::::1;10526:21:13::0;10583:2;10563:18;;;10556:30;10622:34;10602:18;;;10595:62;-1:-1:-1;;;10673:18:13;;;10666:42;10725:19;;2257:104:11::1;10342:408:13::0;2257:104:11::1;2425:28;::::0;-1:-1:-1;;2442:10:11::1;10904:2:13::0;10900:15;10896:53;2425:28:11::1;::::0;::::1;10884:66:13::0;2398:14:11::1;::::0;10966:12:13;;2425:28:11::1;;;;;;;;;;;;2415:39;;;;;;2398:56;;2472:52;2491:12;2505:10;;2517:6;2472:18;:52::i;:::-;2464:106;;;::::0;-1:-1:-1;;;2464:106:11;;11191:2:13;2464:106:11::1;::::0;::::1;11173:21:13::0;11230:2;11210:18;;;11203:30;11269:34;11249:18;;;11242:62;-1:-1:-1;;;11320:18:13;;;11313:39;11369:19;;2464:106:11::1;10989:405:13::0;2464:106:11::1;2600:10;2581:30;::::0;;;:18:::1;:30;::::0;;;;:43;;2615:9;;2581:30;:43:::1;::::0;2615:9;;2581:43:::1;:::i;:::-;::::0;;;-1:-1:-1;2634:32:11::1;::::0;-1:-1:-1;2644:10:11::1;2656:9:::0;2634::::1;:32::i;4806:299::-:0;1108:6:0;;-1:-1:-1;;;;;1108:6:0;719:10:6;1248:23:0;1240:68;;;;-1:-1:-1;;;1240:68:0;;;;;;;:::i;:::-;4889:25:11::1;4943:3;4917:25;:21;4941:1;4917:25;:::i;:::-;:29;;;;:::i;:::-;4956:79;::::0;4889:57;;-1:-1:-1;4964:42:11::1;::::0;4956:79;::::1;;;::::0;4889:57;;4956:79:::1;::::0;;;4889:57;4964:42;4956:79;::::1;;;;;;;;;;;;;::::0;::::1;;;;;-1:-1:-1::0;5047:51:11::1;::::0;5055:10:::1;::::0;5076:21:::1;5047:51:::0;::::1;;;::::0;::::1;::::0;;;5076:21;5055:10;5047:51;::::1;;;;;;;;;;;;;::::0;::::1;;;;10656:179:12::0;10789:39;10806:4;10812:2;10816:7;10789:39;;;;;;;;;;;;:16;:39::i;615:35:11:-;;;;;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::o;4717:83::-;1108:6:0;;-1:-1:-1;;;;;1108:6:0;719:10:6;1248:23:0;1240:68;;;;-1:-1:-1;;;1240:68:0;;;;;;;:::i;:::-;4783:10:11::1;::::0;;-1:-1:-1;;4769:24:11;::::1;4783:10;::::0;;::::1;4782:11;4769:24;::::0;;4717:83::o;7955:122:12:-;8019:7;8045:20;8057:7;8045:11;:20::i;:::-;:25;;7955:122;-1:-1:-1;;7955:122:12:o;5202:203::-;5266:7;-1:-1:-1;;;;;5289:19:12;;5285:60;;5317:28;;-1:-1:-1;;;5317:28:12;;;;;;;;;;;5285:60;-1:-1:-1;;;;;;5370:19:12;;;;;:12;:19;;;;;:27;-1:-1:-1;;;;;5370:27:12;;5202:203::o;1668:101:0:-;1108:6;;-1:-1:-1;;;;;1108:6:0;719:10:6;1248:23:0;1240:68;;;;-1:-1:-1;;;1240:68:0;;;;;;;:::i;:::-;1732:30:::1;1759:1;1732:18;:30::i;:::-;1668:101::o:0;4239:103:11:-;1108:6:0;;-1:-1:-1;;;;;1108:6:0;719:10:6;1248:23:0;1240:68;;;;-1:-1:-1;;;1240:68:0;;;;;;;:::i;:::-;4311:10:11::1;:24:::0;4239:103::o;3571:398::-;3613:16;3657:10;3640:14;3704:17;3657:10;3704:9;:17::i;:::-;3677:44;;3731:25;3773:16;-1:-1:-1;;;;;3759:31:11;;;;;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;-1:-1:-1;3759:31:11;;3731:59;;3805:13;3801:136;3832:16;3824:5;:24;3801:136;;;3850:7;;;;:::i;:::-;;;;3801:136;;;-1:-1:-1;3954:8:11;3571:398;-1:-1:-1;;;3571:398:11:o;4522:96::-;1108:6:0;;-1:-1:-1;;;;;1108:6:0;719:10:6;1248:23:0;1240:68;;;;-1:-1:-1;;;1240:68:0;;;;;;;:::i;:::-;4598:13:11::1;::::0;;-1:-1:-1;;4581:30:11;::::1;4598:13:::0;;;;::::1;;;4597:14;4581:30:::0;;::::1;;::::0;;4522:96::o;8301:102:12:-;8357:13;8389:7;8382:14;;;;;:::i;1269:541:11:-;1169:9;1182:10;1169:23;1161:84;;;;-1:-1:-1;;;1161:84:11;;;;;;;:::i;:::-;1349:10:::1;::::0;::::1;::::0;::::1;;;1341:56;;;::::0;-1:-1:-1;;;1341:56:11;;11998:2:13;1341:56:11::1;::::0;::::1;11980:21:13::0;12037:2;12017:18;;;12010:30;12076:34;12056:18;;;12049:62;-1:-1:-1;;;12127:18:13;;;12120:31;12168:19;;1341:56:11::1;11796:397:13::0;1341:56:11::1;346:4;1432:9;1416:13;4364:12:12::0;;4158:7;4348:13;:28;;4114:297;1416:13:11::1;:25;;;;:::i;:::-;1415:41;;1407:89;;;::::0;-1:-1:-1;;;1407:89:11;;12400:2:13;1407:89:11::1;::::0;::::1;12382:21:13::0;12439:2;12419:18;;;12412:30;12478:34;12458:18;;;12451:62;-1:-1:-1;;;12529:18:13;;;12522:33;12572:19;;1407:89:11::1;12198:399:13::0;1407:89:11::1;1531:10;1515:27;::::0;;;:15:::1;:27;::::0;;;;;398:2:::1;::::0;1515:38:::1;::::0;1544:9;;1515:38:::1;:::i;:::-;1514:59;;1506:113;;;::::0;-1:-1:-1;;;1506:113:11;;12804:2:13;1506:113:11::1;::::0;::::1;12786:21:13::0;12843:2;12823:18;;;12816:30;12882:34;12862:18;;;12855:62;-1:-1:-1;;;12933:18:13;;;12926:39;12982:19;;1506:113:11::1;12602:405:13::0;1506:113:11::1;1651:29;1671:9:::0;503::::1;1651:29;:::i;:::-;1637:9;:44;;1629:81;;;::::0;-1:-1:-1;;;1629:81:11;;13214:2:13;1629:81:11::1;::::0;::::1;13196:21:13::0;13253:2;13233:18;;;13226:30;13292:26;13272:18;;;13265:54;13336:18;;1629:81:11::1;13012:348:13::0;1629:81:11::1;1737:10;1721:27;::::0;;;:15:::1;:27;::::0;;;;:40;;1752:9;;1721:27;:40:::1;::::0;1752:9;;1721:40:::1;:::i;:::-;::::0;;;-1:-1:-1;1771:32:11::1;::::0;-1:-1:-1;1781:10:11::1;1793:9:::0;1771::::1;:32::i;:::-;1269:541:::0;:::o;9862:274:12:-;-1:-1:-1;;;;;9952:24:12;;719:10:6;9952:24:12;9948:54;;;9985:17;;-1:-1:-1;;;9985:17:12;;;;;;;;;;;9948:54;719:10:6;10013:32:12;;;;:18;:32;;;;;;;;-1:-1:-1;;;;;10013:42:12;;;;;;;;;;;;:53;;-1:-1:-1;;10013:53:12;;;;;;;;;;10081:48;;540:41:13;;;10013:42:12;;719:10:6;10081:48:12;;513:18:13;10081:48:12;;;;;;;9862:274;;:::o;4093:140:11:-;1108:6:0;;-1:-1:-1;;;;;1108:6:0;719:10:6;1248:23:0;1240:68;;;;-1:-1:-1;;;1240:68:0;;;;;;;:::i;:::-;4184:42:11;;::::1;::::0;:19:::1;::::0;:42:::1;::::0;::::1;::::0;::::1;:::i;10901:359:12:-:0;11062:28;11072:4;11078:2;11082:7;11062:9;:28::i;:::-;-1:-1:-1;;;;;11104:13:12;;1465:19:5;:23;;11104:76:12;;;;;11124:56;11155:4;11161:2;11165:7;11174:5;11124:30;:56::i;:::-;11123:57;11104:76;11100:154;;;11203:40;;-1:-1:-1;;;11203:40:12;;;;;;;;;;;11100:154;10901:359;;;;:::o;2680:179:11:-;1108:6:0;;-1:-1:-1;;;;;1108:6:0;719:10:6;1248:23:0;1240:68;;;;-1:-1:-1;;;1240:68:0;;;;;;;:::i;:::-;2737:10:11::1;::::0;;;::::1;;;2736:11;2728:61;;;::::0;-1:-1:-1;;;2728:61:11;;13567:2:13;2728:61:11::1;::::0;::::1;13549:21:13::0;13606:2;13586:18;;;13579:30;13645:34;13625:18;;;13618:62;-1:-1:-1;;;13696:18:13;;;13689:35;13741:19;;2728:61:11::1;13365:401:13::0;2728:61:11::1;2799:10;:17:::0;;-1:-1:-1;;2799:17:11::1;::::0;::::1;::::0;;2826:26:::1;2836:10;2848:3;2826:9;:26::i;4444:72::-:0;1108:6:0;;-1:-1:-1;;;;;1108:6:0;719:10:6;1248:23:0;1240:68;;;;-1:-1:-1;;;1240:68:0;;;;;;;:::i;:::-;4504:5:11::1;::::0;;-1:-1:-1;;4495:14:11;::::1;4504:5:::0;;;;::::1;;;4503:6;4495:14:::0;;::::1;;::::0;;4444:72::o;3017:463::-;3090:13;3123:16;3131:7;3123;:16::i;:::-;3115:76;;;;-1:-1:-1;;;3115:76:11;;13973:2:13;3115:76:11;;;13955:21:13;14012:2;13992:18;;;13985:30;14051:34;14031:18;;;14024:62;-1:-1:-1;;;14102:18:13;;;14095:45;14157:19;;3115:76:11;13771:411:13;3115:76:11;3202:14;3219:11;:7;3229:1;3219:11;:::i;:::-;3245:10;;3202:28;;-1:-1:-1;3245:10:11;;3241:66;;3277:19;3270:26;;;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;3017:463;;;:::o;3241:66::-;3398:1;3375:12;3369:26;;;;;:::i;:::-;;;:30;:104;;;;;;;;;;;;;;;;;3426:12;3440:17;:6;:15;:17::i;:::-;3409:58;;;;;;;;;:::i;:::-;;;;;;;;;;;;;3369:104;3362:111;3017:463;-1:-1:-1;;;3017:463:11:o;4624:87::-;1108:6:0;;-1:-1:-1;;;;;1108:6:0;719:10:6;1248:23:0;1240:68;;;;-1:-1:-1;;;1240:68:0;;;;;;;:::i;:::-;4694:10:11::1;::::0;;-1:-1:-1;;4680:24:11;::::1;4694:10;::::0;;;::::1;;;4693:11;4680:24:::0;;::::1;;::::0;;4624:87::o;1918:198:0:-;1108:6;;-1:-1:-1;;;;;1108:6:0;719:10:6;1248:23:0;1240:68;;;;-1:-1:-1;;;1240:68:0;;;;;;;:::i;:::-;-1:-1:-1;;;;;2006:22:0;::::1;1998:73;;;::::0;-1:-1:-1;;;1998:73:0;;16129:2:13;1998:73:0::1;::::0;::::1;16111:21:13::0;16168:2;16148:18;;;16141:30;16207:34;16187:18;;;16180:62;-1:-1:-1;;;16258:18:13;;;16251:36;16304:19;;1998:73:0::1;15927:402:13::0;1998:73:0::1;2081:28;2100:8;2081:18;:28::i;11506:184:12:-:0;11563:4;11626:13;;11616:7;:23;11586:97;;;;-1:-1:-1;;11656:20:12;;;;:11;:20;;;;;:27;-1:-1:-1;;;11656:27:12;;;;11655:28;;11506:184::o;18922:189::-;19032:24;;;;:15;:24;;;;;;:29;;-1:-1:-1;;;;;;19032:29:12;-1:-1:-1;;;;;19032:29:12;;;;;;;;;19076:28;;19032:24;;19076:28;;;;;;;18922:189;;;:::o;14528:2067::-;14638:35;14676:20;14688:7;14676:11;:20::i;:::-;14749:18;;14638:58;;-1:-1:-1;14707:22:12;;-1:-1:-1;;;;;14733:34:12;719:10:6;-1:-1:-1;;;;;14733:34:12;;:100;;;-1:-1:-1;14800:18:12;;14783:50;;719:10:6;10202:162:12;:::i;14783:50::-;14733:152;;;-1:-1:-1;719:10:6;14849:20:12;14861:7;14849:11;:20::i;:::-;-1:-1:-1;;;;;14849:36:12;;14733:152;14707:179;;14902:17;14897:66;;14928:35;;-1:-1:-1;;;14928:35:12;;;;;;;;;;;14897:66;14999:4;-1:-1:-1;;;;;14977:26:12;:13;:18;;;-1:-1:-1;;;;;14977:26:12;;14973:67;;15012:28;;-1:-1:-1;;;15012:28:12;;;;;;;;;;;14973:67;-1:-1:-1;;;;;15054:16:12;;15050:52;;15079:23;;-1:-1:-1;;;15079:23:12;;;;;;;;;;;15050:52;15218:49;15235:1;15239:7;15248:13;:18;;;15218:8;:49::i;:::-;-1:-1:-1;;;;;15557:18:12;;;;;;;:12;:18;;;;;;;;:31;;-1:-1:-1;;15557:31:12;;;-1:-1:-1;;;;;15557:31:12;;;-1:-1:-1;;15557:31:12;;;;;;;15602:16;;;;;;;;;:29;;;;;;;;-1:-1:-1;15602:29:12;;;;;;;;;;;15646:20;;;:11;:20;;;;;;:30;;-1:-1:-1;;;;;;15690:61:12;;;;-1:-1:-1;;;15735:15:12;15690:61;;;;;;;;;;;16021:11;;;16050:24;;;;;:29;16021:11;;16050:29;16046:438;;16272:13;;16258:11;:27;16254:216;;;16341:18;;;16309:24;;;:11;:24;;;;;;;;:50;;16423:28;;;;-1:-1:-1;;;;;16381:70:12;-1:-1:-1;;;16381:70:12;-1:-1:-1;;;;;;16381:70:12;;;-1:-1:-1;;;;;16309:50:12;;;16381:70;;;;;;;16254:216;15533:961;16528:7;16524:2;-1:-1:-1;;;;;16509:27:12;16518:4;-1:-1:-1;;;;;16509:27:12;;;;;;;;;;;16546:42;14628:1967;;14528:2067;;;:::o;862:184:8:-;983:4;1035;1006:25;1019:5;1026:4;1006:12;:25::i;:::-;:33;;862:184;-1:-1:-1;;;;862:184:8:o;11696:102:12:-;11764:27;11774:2;11778:8;11764:27;;;;;;;;;;;;:9;:27::i;6815:1083::-;-1:-1:-1;;;;;;;;;;;;;;;;;;;;;;;;;6924:7:12;7004:13;;6997:4;:20;6966:868;;;7037:31;7071:17;;;:11;:17;;;;;;;;;7037:51;;;;;;;;;-1:-1:-1;;;;;7037:51:12;;;;-1:-1:-1;;;7037:51:12;;-1:-1:-1;;;;;7037:51:12;;;;;;;;-1:-1:-1;;;7037:51:12;;;;;;;;;;;;;;7106:714;;7155:14;;-1:-1:-1;;;;;7155:28:12;;7151:99;;7218:9;6815:1083;-1:-1:-1;;;6815:1083:12:o;7151:99::-;-1:-1:-1;;;7586:6:12;7630:17;;;;:11;:17;;;;;;;;;7618:29;;;;;;;;;-1:-1:-1;;;;;7618:29:12;;;;;-1:-1:-1;;;7618:29:12;;-1:-1:-1;;;;;7618:29:12;;;;;;;;-1:-1:-1;;;7618:29:12;;;;;;;;;;;;;7677:28;7673:107;;7744:9;6815:1083;-1:-1:-1;;;6815:1083:12:o;7673:107::-;7547:255;;;7019:815;6966:868;7860:31;;-1:-1:-1;;;7860:31:12;;;;;;;;;;;2270:187:0;2362:6;;;-1:-1:-1;;;;;2378:17:0;;;-1:-1:-1;;;;;;2378:17:0;;;;;;;2410:40;;2362:6;;;2378:17;2362:6;;2410:40;;2343:16;;2410:40;2333:124;2270:187;:::o;19592:650:12:-;19770:72;;-1:-1:-1;;;19770:72:12;;19750:4;;-1:-1:-1;;;;;19770:36:12;;;;;:72;;719:10:6;;19821:4:12;;19827:7;;19836:5;;19770:72;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;-1:-1:-1;19770:72:12;;;;;;;;-1:-1:-1;;19770:72:12;;;;;;;;;;;;:::i;:::-;;;19766:470;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;-1:-1:-1;20001:13:12;;19997:229;;20046:40;;-1:-1:-1;;;20046:40:12;;;;;;;;;;;19997:229;20186:6;20180:13;20171:6;20167:2;20163:15;20156:38;19766:470;-1:-1:-1;;;;;;19888:55:12;-1:-1:-1;;;19888:55:12;;-1:-1:-1;19766:470:12;19592:650;;;;;;:::o;328:703:7:-;384:13;601:10;597:51;;-1:-1:-1;;627:10:7;;;;;;;;;;;;-1:-1:-1;;;627:10:7;;;;;328:703::o;597:51::-;672:5;657:12;711:75;718:9;;711:75;;743:8;;;;:::i;:::-;;-1:-1:-1;765:10:7;;-1:-1:-1;773:2:7;765:10;;:::i;:::-;;;711:75;;;795:19;827:6;-1:-1:-1;;;;;817:17:7;;;;;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;-1:-1:-1;817:17:7;;795:39;;844:150;851:10;;844:150;;877:11;887:1;877:11;;:::i;:::-;;-1:-1:-1;945:10:7;953:2;945:5;:10;:::i;:::-;932:24;;:2;:24;:::i;:::-;919:39;;902:6;909;902:14;;;;;;;;:::i;:::-;;;;:56;-1:-1:-1;;;;;902:56:7;;;;;;;;-1:-1:-1;972:11:7;981:2;972:11;;:::i;:::-;;;844:150;;1398:662:8;1481:7;1523:4;1481:7;1537:488;1561:5;:12;1557:1;:16;1537:488;;;1594:20;1617:5;1623:1;1617:8;;;;;;;;:::i;:::-;;;;;;;1594:31;;1659:12;1643;:28;1639:376;;2134:13;2182:15;;;2217:4;2210:15;;;2263:4;2247:21;;1769:57;;1639:376;;;2134:13;2182:15;;;2217:4;2210:15;;;2263:4;2247:21;;1943:57;;1639:376;-1:-1:-1;1575:3:8;;;;:::i;:::-;;;;1537:488;;12149:157:12;12267:32;12273:2;12277:8;12287:5;12294:4;12686:20;12709:13;-1:-1:-1;;;;;12736:16:12;;12732:48;;12761:19;;-1:-1:-1;;;12761:19:12;;;;;;;;;;;12732:48;12794:13;12790:44;;12816:18;;-1:-1:-1;;;12816:18:12;;;;;;;;;;;12790:44;-1:-1:-1;;;;;13177:16:12;;;;;;:12;:16;;;;;;;;:44;;-1:-1:-1;;13235:49:12;;-1:-1:-1;;;;;13177:44:12;;;;;;;13235:49;;;;-1:-1:-1;;13177:44:12;;;;;;13235:49;;;;;;;;;;;;;;;;13299:25;;;:11;:25;;;;;;:35;;-1:-1:-1;;;;;;13348:66:12;;;;-1:-1:-1;;;13398:15:12;13348:66;;;;;;;;;;13299:25;13492:23;;;13534:4;:23;;;;-1:-1:-1;;;;;;13542:13:12;;1465:19:5;:23;;13542:15:12;13530:628;;;13577:309;13607:38;;13632:12;;-1:-1:-1;;;;;13607:38:12;;;13624:1;;13607:38;;13624:1;;13607:38;13672:69;13711:1;13715:2;13719:14;;;;;;13735:5;13672:30;:69::i;:::-;13667:172;;13776:40;;-1:-1:-1;;;13776:40:12;;;;;;;;;;;13667:172;13881:3;13865:12;:19;;13577:309;;13965:12;13948:13;;:29;13944:43;;13979:8;;;13944:43;13530:628;;;14026:118;14056:40;;14081:14;;;;;-1:-1:-1;;;;;14056:40:12;;;14073:1;;14056:40;;14073:1;;14056:40;14139:3;14123:12;:19;;14026:118;;13530:628;-1:-1:-1;14171:13:12;:28;14219:60;10901:359;-1:-1:-1;;;;;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;;;:::o;:::-;;;;;;;;;;;;;;;14:131:13;-1:-1:-1;;;;;;88:32:13;;78:43;;68:71;;135:1;132;125:12;150:245;208:6;261:2;249:9;240:7;236:23;232:32;229:52;;;277:1;274;267:12;229:52;316:9;303:23;335:30;359:5;335:30;:::i;592:173::-;660:20;;-1:-1:-1;;;;;709:31:13;;699:42;;689:70;;755:1;752;745:12;689:70;592:173;;;:::o;770:186::-;829:6;882:2;870:9;861:7;857:23;853:32;850:52;;;898:1;895;888:12;850:52;921:29;940:9;921:29;:::i;1143:127::-;1204:10;1199:3;1195:20;1192:1;1185:31;1235:4;1232:1;1225:15;1259:4;1256:1;1249:15;1275:275;1346:2;1340:9;1411:2;1392:13;;-1:-1:-1;;1388:27:13;1376:40;;-1:-1:-1;;;;;1431:34:13;;1467:22;;;1428:62;1425:88;;;1493:18;;:::i;:::-;1529:2;1522:22;1275:275;;-1:-1:-1;1275:275:13:o;1555:407::-;1620:5;-1:-1:-1;;;;;1646:6:13;1643:30;1640:56;;;1676:18;;:::i;:::-;1714:57;1759:2;1738:15;;-1:-1:-1;;1734:29:13;1765:4;1730:40;1714:57;:::i;:::-;1705:66;;1794:6;1787:5;1780:21;1834:3;1825:6;1820:3;1816:16;1813:25;1810:45;;;1851:1;1848;1841:12;1810:45;1900:6;1895:3;1888:4;1881:5;1877:16;1864:43;1954:1;1947:4;1938:6;1931:5;1927:18;1923:29;1916:40;1555:407;;;;;:::o;1967:451::-;2036:6;2089:2;2077:9;2068:7;2064:23;2060:32;2057:52;;;2105:1;2102;2095:12;2057:52;2145:9;2132:23;-1:-1:-1;;;;;2170:6:13;2167:30;2164:50;;;2210:1;2207;2200:12;2164:50;2233:22;;2286:4;2278:13;;2274:27;-1:-1:-1;2264:55:13;;2315:1;2312;2305:12;2264:55;2338:74;2404:7;2399:2;2386:16;2381:2;2377;2373:11;2338:74;:::i;2423:258::-;2495:1;2505:113;2519:6;2516:1;2513:13;2505:113;;;2595:11;;;2589:18;2576:11;;;2569:39;2541:2;2534:10;2505:113;;;2636:6;2633:1;2630:13;2627:48;;;-1:-1:-1;;2671:1:13;2653:16;;2646:27;2423:258::o;2686:269::-;2739:3;2777:5;2771:12;2804:6;2799:3;2792:19;2820:63;2876:6;2869:4;2864:3;2860:14;2853:4;2846:5;2842:16;2820:63;:::i;:::-;2937:2;2916:15;-1:-1:-1;;2912:29:13;2903:39;;;;2944:4;2899:50;;2686:269;-1:-1:-1;;2686:269:13:o;2960:231::-;3109:2;3098:9;3091:21;3072:4;3129:56;3181:2;3170:9;3166:18;3158:6;3129:56;:::i;3196:180::-;3255:6;3308:2;3296:9;3287:7;3283:23;3279:32;3276:52;;;3324:1;3321;3314:12;3276:52;-1:-1:-1;3347:23:13;;3196:180;-1:-1:-1;3196:180:13:o;3589:254::-;3657:6;3665;3718:2;3706:9;3697:7;3693:23;3689:32;3686:52;;;3734:1;3731;3724:12;3686:52;3757:29;3776:9;3757:29;:::i;:::-;3747:39;3833:2;3818:18;;;;3805:32;;-1:-1:-1;;;3589:254:13:o;3848:328::-;3925:6;3933;3941;3994:2;3982:9;3973:7;3969:23;3965:32;3962:52;;;4010:1;4007;4000:12;3962:52;4033:29;4052:9;4033:29;:::i;:::-;4023:39;;4081:38;4115:2;4104:9;4100:18;4081:38;:::i;:::-;4071:48;;4166:2;4155:9;4151:18;4138:32;4128:42;;3848:328;;;;;:::o;4181:1016::-;4274:6;4282;4335:2;4323:9;4314:7;4310:23;4306:32;4303:52;;;4351:1;4348;4341:12;4303:52;4391:9;4378:23;-1:-1:-1;;;;;4461:2:13;4453:6;4450:14;4447:34;;;4477:1;4474;4467:12;4447:34;4515:6;4504:9;4500:22;4490:32;;4560:7;4553:4;4549:2;4545:13;4541:27;4531:55;;4582:1;4579;4572:12;4531:55;4618:2;4605:16;4640:4;4663:2;4659;4656:10;4653:36;;;4669:18;;:::i;:::-;4715:2;4712:1;4708:10;4698:20;;4738:28;4762:2;4758;4754:11;4738:28;:::i;:::-;4800:15;;;4870:11;;;4866:20;;;4831:12;;;;4898:19;;;4895:39;;;4930:1;4927;4920:12;4895:39;4954:11;;;;4974:142;4990:6;4985:3;4982:15;4974:142;;;5056:17;;5044:30;;5007:12;;;;5094;;;;4974:142;;;5135:5;5172:18;;;;5159:32;;-1:-1:-1;;;;;;;4181:1016:13:o;5569:632::-;5740:2;5792:21;;;5862:13;;5765:18;;;5884:22;;;5711:4;;5740:2;5963:15;;;;5937:2;5922:18;;;5711:4;6006:169;6020:6;6017:1;6014:13;6006:169;;;6081:13;;6069:26;;6150:15;;;;6115:12;;;;6042:1;6035:9;6006:169;;;-1:-1:-1;6192:3:13;;5569:632;-1:-1:-1;;;;;;5569:632:13:o;6206:347::-;6271:6;6279;6332:2;6320:9;6311:7;6307:23;6303:32;6300:52;;;6348:1;6345;6338:12;6300:52;6371:29;6390:9;6371:29;:::i;:::-;6361:39;;6450:2;6439:9;6435:18;6422:32;6497:5;6490:13;6483:21;6476:5;6473:32;6463:60;;6519:1;6516;6509:12;6463:60;6542:5;6532:15;;;6206:347;;;;;:::o;6558:667::-;6653:6;6661;6669;6677;6730:3;6718:9;6709:7;6705:23;6701:33;6698:53;;;6747:1;6744;6737:12;6698:53;6770:29;6789:9;6770:29;:::i;:::-;6760:39;;6818:38;6852:2;6841:9;6837:18;6818:38;:::i;:::-;6808:48;;6903:2;6892:9;6888:18;6875:32;6865:42;;6958:2;6947:9;6943:18;6930:32;-1:-1:-1;;;;;6977:6:13;6974:30;6971:50;;;7017:1;7014;7007:12;6971:50;7040:22;;7093:4;7085:13;;7081:27;-1:-1:-1;7071:55:13;;7122:1;7119;7112:12;7071:55;7145:74;7211:7;7206:2;7193:16;7188:2;7184;7180:11;7145:74;:::i;:::-;7135:84;;;6558:667;;;;;;;:::o;7230:260::-;7298:6;7306;7359:2;7347:9;7338:7;7334:23;7330:32;7327:52;;;7375:1;7372;7365:12;7327:52;7398:29;7417:9;7398:29;:::i;:::-;7388:39;;7446:38;7480:2;7469:9;7465:18;7446:38;:::i;:::-;7436:48;;7230:260;;;;;:::o;7495:356::-;7697:2;7679:21;;;7716:18;;;7709:30;7775:34;7770:2;7755:18;;7748:62;7842:2;7827:18;;7495:356::o;7856:380::-;7935:1;7931:12;;;;7978;;;7999:61;;8053:4;8045:6;8041:17;8031:27;;7999:61;8106:2;8098:6;8095:14;8075:18;8072:38;8069:161;;;8152:10;8147:3;8143:20;8140:1;8133:31;8187:4;8184:1;8177:15;8215:4;8212:1;8205:15;8069:161;;7856:380;;;:::o;8241:412::-;8443:2;8425:21;;;8482:2;8462:18;;;8455:30;8521:34;8516:2;8501:18;;8494:62;-1:-1:-1;;;8587:2:13;8572:18;;8565:46;8643:3;8628:19;;8241:412::o;9064:127::-;9125:10;9120:3;9116:20;9113:1;9106:31;9156:4;9153:1;9146:15;9180:4;9177:1;9170:15;9196:128;9236:3;9267:1;9263:6;9260:1;9257:13;9254:39;;;9273:18;;:::i;:::-;-1:-1:-1;9309:9:13;;9196:128::o;10169:168::-;10209:7;10275:1;10271;10267:6;10263:14;10260:1;10257:21;10252:1;10245:9;10238:17;10234:45;10231:71;;;10282:18;;:::i;:::-;-1:-1:-1;10322:9:13;;10169:168::o;11399:127::-;11460:10;11455:3;11451:20;11448:1;11441:31;11491:4;11488:1;11481:15;11515:4;11512:1;11505:15;11531:120;11571:1;11597;11587:35;;11602:18;;:::i;:::-;-1:-1:-1;11636:9:13;;11531:120::o;11656:135::-;11695:3;-1:-1:-1;;11716:17:13;;11713:43;;;11736:18;;:::i;:::-;-1:-1:-1;11783:1:13;11772:13;;11656:135::o;14313:185::-;14355:3;14393:5;14387:12;14408:52;14453:6;14448:3;14441:4;14434:5;14430:16;14408:52;:::i;:::-;14476:16;;;;;14313:185;-1:-1:-1;;14313:185:13:o;14621:1301::-;14898:3;14927:1;14960:6;14954:13;14990:3;15012:1;15040:9;15036:2;15032:18;15022:28;;15100:2;15089:9;15085:18;15122;15112:61;;15166:4;15158:6;15154:17;15144:27;;15112:61;15192:2;15240;15232:6;15229:14;15209:18;15206:38;15203:165;;;-1:-1:-1;;;15267:33:13;;15323:4;15320:1;15313:15;15353:4;15274:3;15341:17;15203:165;15384:18;15411:104;;;;15529:1;15524:320;;;;15377:467;;15411:104;-1:-1:-1;;15444:24:13;;15432:37;;15489:16;;;;-1:-1:-1;15411:104:13;;15524:320;14260:1;14253:14;;;14297:4;14284:18;;15619:1;15633:165;15647:6;15644:1;15641:13;15633:165;;;15725:14;;15712:11;;;15705:35;15768:16;;;;15662:10;;15633:165;;;15637:3;;15827:6;15822:3;15818:16;15811:23;;15377:467;;;;;;;15860:56;15885:30;15911:3;15903:6;15885:30;:::i;:::-;-1:-1:-1;;;14563:20:13;;14608:1;14599:11;;14503:113;15860:56;15853:63;14621:1301;-1:-1:-1;;;;;14621:1301:13:o;16334:500::-;-1:-1:-1;;;;;16603:15:13;;;16585:34;;16655:15;;16650:2;16635:18;;16628:43;16702:2;16687:18;;16680:34;;;16750:3;16745:2;16730:18;;16723:31;;;16528:4;;16771:57;;16808:19;;16800:6;16771:57;:::i;:::-;16763:65;16334:500;-1:-1:-1;;;;;;16334:500:13:o;16839:249::-;16908:6;16961:2;16949:9;16940:7;16936:23;16932:32;16929:52;;;16977:1;16974;16967:12;16929:52;17009:9;17003:16;17028:30;17052:5;17028:30;:::i;17093:125::-;17133:4;17161:1;17158;17155:8;17152:34;;;17166:18;;:::i;:::-;-1:-1:-1;17203:9:13;;17093:125::o;17223:112::-;17255:1;17281;17271:35;;17286:18;;:::i;:::-;-1:-1:-1;17320:9:13;;17223:112::o;17340:127::-;17401:10;17396:3;17392:20;17389:1;17382:31;17432:4;17429:1;17422:15;17456:4;17453:1;17446:15"
						},
						"gasEstimates": {
							"creation": {
								"codeDepositCost": "1953000",
								"executionCost": "infinite",
								"totalCost": "infinite"
							},
							"external": {
								"MAX_PUBLIC_MINT()": "350",
								"MAX_SUPPLY()": "263",
								"MAX_WHITELIST_MINT()": "328",
								"PUBLIC_SALE_PRICE()": "330",
								"WHITELIST_SALE_PRICE()": "306",
								"approve(address,uint256)": "infinite",
								"balanceOf(address)": "2653",
								"getApproved(uint256)": "6914",
								"getMerkleRoot()": "2337",
								"isApprovedForAll(address,address)": "infinite",
								"isRevealed()": "2388",
								"mint(uint256)": "infinite",
								"name()": "infinite",
								"owner()": "2420",
								"ownerOf(uint256)": "infinite",
								"pause()": "2444",
								"placeholderTokenUri()": "infinite",
								"publicSale()": "2400",
								"renounceOwnership()": "28185",
								"safeTransferFrom(address,address,uint256)": "infinite",
								"safeTransferFrom(address,address,uint256,bytes)": "infinite",
								"setApprovalForAll(address,bool)": "26783",
								"setMerkleRoot(bytes32)": "24554",
								"setPlaceHolderUri(string)": "infinite",
								"setTokenUri(string)": "infinite",
								"supportsInterface(bytes4)": "557",
								"symbol()": "infinite",
								"teamMint()": "infinite",
								"teamMinted()": "2420",
								"togglePause()": "26589",
								"togglePublicSale()": "26633",
								"toggleReveal()": "26634",
								"toggleWhiteListSale()": "26612",
								"tokenURI(uint256)": "infinite",
								"totalPublicMint(address)": "2631",
								"totalSupply()": "4488",
								"totalWhitelistMint(address)": "2588",
								"transferFrom(address,address,uint256)": "infinite",
								"transferOwnership(address)": "28466",
								"walletOf()": "infinite",
								"whiteListSale()": "2355",
								"whitelistMint(bytes32[],uint256)": "infinite",
								"withdraw()": "infinite"
							},
							"internal": {
								"_baseURI()": "infinite"
							}
						},
						"legacyAssembly": {
							".code": [
								{
									"begin": 220,
									"end": 5107,
									"name": "PUSH",
									"source": 11,
									"value": "80"
								},
								{
									"begin": 220,
									"end": 5107,
									"name": "PUSH",
									"source": 11,
									"value": "40"
								},
								{
									"begin": 220,
									"end": 5107,
									"name": "MSTORE",
									"source": 11
								},
								{
									"begin": 1058,
									"end": 1121,
									"name": "CALLVALUE",
									"source": 11
								},
								{
									"begin": 1058,
									"end": 1121,
									"name": "DUP1",
									"source": 11
								},
								{
									"begin": 1058,
									"end": 1121,
									"name": "ISZERO",
									"source": 11
								},
								{
									"begin": 1058,
									"end": 1121,
									"name": "PUSH [tag]",
									"source": 11,
									"value": "1"
								},
								{
									"begin": 1058,
									"end": 1121,
									"name": "JUMPI",
									"source": 11
								},
								{
									"begin": 1058,
									"end": 1121,
									"name": "PUSH",
									"source": 11,
									"value": "0"
								},
								{
									"begin": 1058,
									"end": 1121,
									"name": "DUP1",
									"source": 11
								},
								{
									"begin": 1058,
									"end": 1121,
									"name": "REVERT",
									"source": 11
								},
								{
									"begin": 1058,
									"end": 1121,
									"name": "tag",
									"source": 11,
									"value": "1"
								},
								{
									"begin": 1058,
									"end": 1121,
									"name": "JUMPDEST",
									"source": 11
								},
								{
									"begin": -1,
									"end": -1,
									"name": "POP",
									"source": -1
								},
								{
									"begin": 3600,
									"end": 3754,
									"name": "PUSH",
									"source": 12,
									"value": "40"
								},
								{
									"begin": 3600,
									"end": 3754,
									"name": "DUP1",
									"source": 12
								},
								{
									"begin": 3600,
									"end": 3754,
									"name": "MLOAD",
									"source": 12
								},
								{
									"begin": 3600,
									"end": 3754,
									"name": "DUP1",
									"source": 12
								},
								{
									"begin": 3600,
									"end": 3754,
									"name": "DUP3",
									"source": 12
								},
								{
									"begin": 3600,
									"end": 3754,
									"name": "ADD",
									"source": 12
								},
								{
									"begin": 3600,
									"end": 3754,
									"name": "DUP3",
									"source": 12
								},
								{
									"begin": 3600,
									"end": 3754,
									"name": "MSTORE",
									"source": 12
								},
								{
									"begin": 3600,
									"end": 3754,
									"name": "PUSH",
									"source": 12,
									"value": "17"
								},
								{
									"begin": 3600,
									"end": 3754,
									"name": "DUP2",
									"source": 12
								},
								{
									"begin": 3600,
									"end": 3754,
									"name": "MSTORE",
									"source": 12
								},
								{
									"begin": 3600,
									"end": 3754,
									"name": "PUSH",
									"source": 12,
									"value": "43727970746F42756C6C446F6773204F6666696369616C000000000000000000"
								},
								{
									"begin": 3600,
									"end": 3754,
									"name": "PUSH",
									"source": 12,
									"value": "20"
								},
								{
									"begin": 3600,
									"end": 3754,
									"name": "DUP1",
									"source": 12
								},
								{
									"begin": 3600,
									"end": 3754,
									"name": "DUP4",
									"source": 12
								},
								{
									"begin": 3600,
									"end": 3754,
									"name": "ADD",
									"source": 12
								},
								{
									"begin": 3600,
									"end": 3754,
									"name": "SWAP2",
									"source": 12
								},
								{
									"begin": 3600,
									"end": 3754,
									"name": "DUP3",
									"source": 12
								},
								{
									"begin": 3600,
									"end": 3754,
									"name": "MSTORE",
									"source": 12
								},
								{
									"begin": 3600,
									"end": 3754,
									"name": "DUP4",
									"source": 12
								},
								{
									"begin": 3600,
									"end": 3754,
									"name": "MLOAD",
									"source": 12
								},
								{
									"begin": 3600,
									"end": 3754,
									"name": "DUP1",
									"source": 12
								},
								{
									"begin": 3600,
									"end": 3754,
									"name": "DUP6",
									"source": 12
								},
								{
									"begin": 3600,
									"end": 3754,
									"name": "ADD",
									"source": 12
								},
								{
									"begin": 3600,
									"end": 3754,
									"name": "SWAP1",
									"source": 12
								},
								{
									"begin": 3600,
									"end": 3754,
									"name": "SWAP5",
									"source": 12
								},
								{
									"begin": 3600,
									"end": 3754,
									"name": "MSTORE",
									"source": 12
								},
								{
									"begin": 3600,
									"end": 3754,
									"name": "PUSH",
									"source": 12,
									"value": "3"
								},
								{
									"begin": 3600,
									"end": 3754,
									"name": "DUP5",
									"source": 12
								},
								{
									"begin": 3600,
									"end": 3754,
									"name": "MSTORE",
									"source": 12
								},
								{
									"begin": -1,
									"end": -1,
									"name": "PUSH",
									"source": -1,
									"value": "10D091"
								},
								{
									"begin": -1,
									"end": -1,
									"name": "PUSH",
									"source": -1,
									"value": "EA"
								},
								{
									"begin": -1,
									"end": -1,
									"name": "SHL",
									"source": -1
								},
								{
									"begin": 3600,
									"end": 3754,
									"name": "SWAP1",
									"source": 12
								},
								{
									"begin": 3600,
									"end": 3754,
									"name": "DUP5",
									"source": 12
								},
								{
									"begin": 3600,
									"end": 3754,
									"name": "ADD",
									"source": 12
								},
								{
									"begin": 3600,
									"end": 3754,
									"name": "MSTORE",
									"source": 12
								},
								{
									"begin": 3666,
									"end": 3679,
									"name": "DUP2",
									"source": 12
								},
								{
									"begin": 3666,
									"end": 3679,
									"name": "MLOAD",
									"source": 12
								},
								{
									"begin": 3600,
									"end": 3754,
									"name": "SWAP2",
									"source": 12
								},
								{
									"begin": 3600,
									"end": 3754,
									"name": "SWAP3",
									"source": 12
								},
								{
									"begin": 3600,
									"end": 3754,
									"name": "SWAP2",
									"source": 12
								},
								{
									"begin": 3666,
									"end": 3679,
									"name": "PUSH [tag]",
									"source": 12,
									"value": "6"
								},
								{
									"begin": 3666,
									"end": 3679,
									"name": "SWAP2",
									"source": 12
								},
								{
									"begin": 3666,
									"end": 3671,
									"name": "PUSH",
									"source": 12,
									"value": "2"
								},
								{
									"begin": 3666,
									"end": 3671,
									"name": "SWAP2",
									"source": 12
								},
								{
									"begin": 3666,
									"end": 3679,
									"name": "PUSH [tag]",
									"source": 12,
									"value": "7"
								},
								{
									"begin": 3666,
									"end": 3679,
									"name": "JUMP",
									"source": 12,
									"value": "[in]"
								},
								{
									"begin": 3666,
									"end": 3679,
									"name": "tag",
									"source": 12,
									"value": "6"
								},
								{
									"begin": 3666,
									"end": 3679,
									"name": "JUMPDEST",
									"source": 12
								},
								{
									"begin": -1,
									"end": -1,
									"name": "POP",
									"source": -1
								},
								{
									"begin": 3689,
									"end": 3706,
									"name": "DUP1",
									"source": 12
								},
								{
									"begin": 3689,
									"end": 3706,
									"name": "MLOAD",
									"source": 12
								},
								{
									"begin": 3689,
									"end": 3706,
									"name": "PUSH [tag]",
									"source": 12,
									"value": "8"
								},
								{
									"begin": 3689,
									"end": 3706,
									"name": "SWAP1",
									"source": 12
								},
								{
									"begin": 3689,
									"end": 3696,
									"name": "PUSH",
									"source": 12,
									"value": "3"
								},
								{
									"begin": 3689,
									"end": 3696,
									"name": "SWAP1",
									"source": 12
								},
								{
									"begin": 3689,
									"end": 3706,
									"name": "PUSH",
									"source": 12,
									"value": "20"
								},
								{
									"begin": 3689,
									"end": 3706,
									"name": "DUP5",
									"source": 12
								},
								{
									"begin": 3689,
									"end": 3706,
									"name": "ADD",
									"source": 12
								},
								{
									"begin": 3689,
									"end": 3706,
									"name": "SWAP1",
									"source": 12
								},
								{
									"begin": 3689,
									"end": 3706,
									"name": "PUSH [tag]",
									"source": 12,
									"value": "7"
								},
								{
									"begin": 3689,
									"end": 3706,
									"name": "JUMP",
									"source": 12,
									"value": "[in]"
								},
								{
									"begin": 3689,
									"end": 3706,
									"name": "tag",
									"source": 12,
									"value": "8"
								},
								{
									"begin": 3689,
									"end": 3706,
									"name": "JUMPDEST",
									"source": 12
								},
								{
									"begin": -1,
									"end": -1,
									"name": "POP",
									"source": -1
								},
								{
									"begin": -1,
									"end": -1,
									"name": "POP",
									"source": -1
								},
								{
									"begin": 3902,
									"end": 3909,
									"name": "PUSH",
									"source": 12,
									"value": "0"
								},
								{
									"begin": 3716,
									"end": 3747,
									"name": "DUP1",
									"source": 12
								},
								{
									"begin": 3716,
									"end": 3747,
									"name": "SSTORE",
									"source": 12
								},
								{
									"begin": -1,
									"end": -1,
									"name": "POP",
									"source": -1
								},
								{
									"begin": 921,
									"end": 953,
									"name": "PUSH [tag]",
									"source": 0,
									"value": "12"
								},
								{
									"begin": 719,
									"end": 729,
									"name": "CALLER",
									"source": 6
								},
								{
									"begin": 921,
									"end": 939,
									"name": "PUSH [tag]",
									"source": 0,
									"value": "15"
								},
								{
									"begin": 921,
									"end": 953,
									"name": "JUMP",
									"source": 0,
									"value": "[in]"
								},
								{
									"begin": 921,
									"end": 953,
									"name": "tag",
									"source": 0,
									"value": "12"
								},
								{
									"begin": 921,
									"end": 953,
									"name": "JUMPDEST",
									"source": 0
								},
								{
									"begin": 220,
									"end": 5107,
									"name": "PUSH [tag]",
									"source": 11,
									"value": "32"
								},
								{
									"begin": 220,
									"end": 5107,
									"name": "JUMP",
									"source": 11
								},
								{
									"begin": 2270,
									"end": 2457,
									"name": "tag",
									"source": 0,
									"value": "15"
								},
								{
									"begin": 2270,
									"end": 2457,
									"name": "JUMPDEST",
									"source": 0
								},
								{
									"begin": 2362,
									"end": 2368,
									"name": "PUSH",
									"source": 0,
									"value": "8"
								},
								{
									"begin": 2362,
									"end": 2368,
									"name": "DUP1",
									"source": 0
								},
								{
									"begin": 2362,
									"end": 2368,
									"name": "SLOAD",
									"source": 0
								},
								{
									"begin": -1,
									"end": -1,
									"name": "PUSH",
									"source": -1,
									"value": "1"
								},
								{
									"begin": -1,
									"end": -1,
									"name": "PUSH",
									"source": -1,
									"value": "1"
								},
								{
									"begin": -1,
									"end": -1,
									"name": "PUSH",
									"source": -1,
									"value": "A0"
								},
								{
									"begin": -1,
									"end": -1,
									"name": "SHL",
									"source": -1
								},
								{
									"begin": -1,
									"end": -1,
									"name": "SUB",
									"source": -1
								},
								{
									"begin": 2378,
									"end": 2395,
									"name": "DUP4",
									"source": 0
								},
								{
									"begin": 2378,
									"end": 2395,
									"name": "DUP2",
									"source": 0
								},
								{
									"begin": 2378,
									"end": 2395,
									"name": "AND",
									"source": 0
								},
								{
									"begin": -1,
									"end": -1,
									"name": "PUSH",
									"source": -1,
									"value": "1"
								},
								{
									"begin": -1,
									"end": -1,
									"name": "PUSH",
									"source": -1,
									"value": "1"
								},
								{
									"begin": -1,
									"end": -1,
									"name": "PUSH",
									"source": -1,
									"value": "A0"
								},
								{
									"begin": -1,
									"end": -1,
									"name": "SHL",
									"source": -1
								},
								{
									"begin": -1,
									"end": -1,
									"name": "SUB",
									"source": -1
								},
								{
									"begin": -1,
									"end": -1,
									"name": "NOT",
									"source": -1
								},
								{
									"begin": 2378,
									"end": 2395,
									"name": "DUP4",
									"source": 0
								},
								{
									"begin": 2378,
									"end": 2395,
									"name": "AND",
									"source": 0
								},
								{
									"begin": 2378,
									"end": 2395,
									"name": "DUP2",
									"source": 0
								},
								{
									"begin": 2378,
									"end": 2395,
									"name": "OR",
									"source": 0
								},
								{
									"begin": 2378,
									"end": 2395,
									"name": "SWAP1",
									"source": 0
								},
								{
									"begin": 2378,
									"end": 2395,
									"name": "SWAP4",
									"source": 0
								},
								{
									"begin": 2378,
									"end": 2395,
									"name": "SSTORE",
									"source": 0
								},
								{
									"begin": 2410,
									"end": 2450,
									"name": "PUSH",
									"source": 0,
									"value": "40"
								},
								{
									"begin": 2410,
									"end": 2450,
									"name": "MLOAD",
									"source": 0
								},
								{
									"begin": 2362,
									"end": 2368,
									"name": "SWAP2",
									"source": 0
								},
								{
									"begin": 2362,
									"end": 2368,
									"name": "AND",
									"source": 0
								},
								{
									"begin": 2362,
									"end": 2368,
									"name": "SWAP2",
									"source": 0
								},
								{
									"begin": 2378,
									"end": 2395,
									"name": "SWAP1",
									"source": 0
								},
								{
									"begin": 2362,
									"end": 2368,
									"name": "DUP3",
									"source": 0
								},
								{
									"begin": 2362,
									"end": 2368,
									"name": "SWAP1",
									"source": 0
								},
								{
									"begin": 2410,
									"end": 2450,
									"name": "PUSH",
									"source": 0,
									"value": "8BE0079C531659141344CD1FD0A4F28419497F9722A3DAAFE3B4186F6B6457E0"
								},
								{
									"begin": 2410,
									"end": 2450,
									"name": "SWAP1",
									"source": 0
								},
								{
									"begin": 2343,
									"end": 2359,
									"name": "PUSH",
									"source": 0,
									"value": "0"
								},
								{
									"begin": 2343,
									"end": 2359,
									"name": "SWAP1",
									"source": 0
								},
								{
									"begin": 2410,
									"end": 2450,
									"name": "LOG3",
									"source": 0
								},
								{
									"begin": 2333,
									"end": 2457,
									"name": "POP",
									"source": 0
								},
								{
									"begin": 2270,
									"end": 2457,
									"name": "POP",
									"source": 0
								},
								{
									"begin": 2270,
									"end": 2457,
									"name": "JUMP",
									"source": 0,
									"value": "[out]"
								},
								{
									"begin": 220,
									"end": 5107,
									"name": "tag",
									"source": 11,
									"value": "7"
								},
								{
									"begin": 220,
									"end": 5107,
									"name": "JUMPDEST",
									"source": 11
								},
								{
									"begin": 220,
									"end": 5107,
									"name": "DUP3",
									"source": 11
								},
								{
									"begin": 220,
									"end": 5107,
									"name": "DUP1",
									"source": 11
								},
								{
									"begin": 220,
									"end": 5107,
									"name": "SLOAD",
									"source": 11
								},
								{
									"begin": 220,
									"end": 5107,
									"name": "PUSH [tag]",
									"source": 11,
									"value": "21"
								},
								{
									"begin": 220,
									"end": 5107,
									"name": "SWAP1",
									"source": 11
								},
								{
									"begin": 220,
									"end": 5107,
									"name": "PUSH [tag]",
									"source": 11,
									"value": "22"
								},
								{
									"begin": 220,
									"end": 5107,
									"name": "JUMP",
									"source": 11,
									"value": "[in]"
								},
								{
									"begin": 220,
									"end": 5107,
									"name": "tag",
									"source": 11,
									"value": "21"
								},
								{
									"begin": 220,
									"end": 5107,
									"name": "JUMPDEST",
									"source": 11
								},
								{
									"begin": 220,
									"end": 5107,
									"name": "SWAP1",
									"source": 11
								},
								{
									"begin": 220,
									"end": 5107,
									"name": "PUSH",
									"source": 11,
									"value": "0"
								},
								{
									"begin": 220,
									"end": 5107,
									"name": "MSTORE",
									"source": 11
								},
								{
									"begin": 220,
									"end": 5107,
									"name": "PUSH",
									"source": 11,
									"value": "20"
								},
								{
									"begin": 220,
									"end": 5107,
									"name": "PUSH",
									"source": 11,
									"value": "0"
								},
								{
									"begin": 220,
									"end": 5107,
									"name": "KECCAK256",
									"source": 11
								},
								{
									"begin": 220,
									"end": 5107,
									"name": "SWAP1",
									"source": 11
								},
								{
									"begin": 220,
									"end": 5107,
									"name": "PUSH",
									"source": 11,
									"value": "1F"
								},
								{
									"begin": 220,
									"end": 5107,
									"name": "ADD",
									"source": 11
								},
								{
									"begin": 220,
									"end": 5107,
									"name": "PUSH",
									"source": 11,
									"value": "20"
								},
								{
									"begin": 220,
									"end": 5107,
									"name": "SWAP1",
									"source": 11
								},
								{
									"begin": 220,
									"end": 5107,
									"name": "DIV",
									"source": 11
								},
								{
									"begin": 220,
									"end": 5107,
									"name": "DUP2",
									"source": 11
								},
								{
									"begin": 220,
									"end": 5107,
									"name": "ADD",
									"source": 11
								},
								{
									"begin": 220,
									"end": 5107,
									"name": "SWAP3",
									"source": 11
								},
								{
									"begin": 220,
									"end": 5107,
									"name": "DUP3",
									"source": 11
								},
								{
									"begin": 220,
									"end": 5107,
									"name": "PUSH [tag]",
									"source": 11,
									"value": "24"
								},
								{
									"begin": 220,
									"end": 5107,
									"name": "JUMPI",
									"source": 11
								},
								{
									"begin": 220,
									"end": 5107,
									"name": "PUSH",
									"source": 11,
									"value": "0"
								},
								{
									"begin": 220,
									"end": 5107,
									"name": "DUP6",
									"source": 11
								},
								{
									"begin": 220,
									"end": 5107,
									"name": "SSTORE",
									"source": 11
								},
								{
									"begin": 220,
									"end": 5107,
									"name": "PUSH [tag]",
									"source": 11,
									"value": "27"
								},
								{
									"begin": 220,
									"end": 5107,
									"name": "JUMP",
									"source": 11
								},
								{
									"begin": 220,
									"end": 5107,
									"name": "tag",
									"source": 11,
									"value": "24"
								},
								{
									"begin": 220,
									"end": 5107,
									"name": "JUMPDEST",
									"source": 11
								},
								{
									"begin": 220,
									"end": 5107,
									"name": "DUP3",
									"source": 11
								},
								{
									"begin": 220,
									"end": 5107,
									"name": "PUSH",
									"source": 11,
									"value": "1F"
								},
								{
									"begin": 220,
									"end": 5107,
									"name": "LT",
									"source": 11
								},
								{
									"begin": 220,
									"end": 5107,
									"name": "PUSH [tag]",
									"source": 11,
									"value": "25"
								},
								{
									"begin": 220,
									"end": 5107,
									"name": "JUMPI",
									"source": 11
								},
								{
									"begin": 220,
									"end": 5107,
									"name": "DUP1",
									"source": 11
								},
								{
									"begin": 220,
									"end": 5107,
									"name": "MLOAD",
									"source": 11
								},
								{
									"begin": 220,
									"end": 5107,
									"name": "PUSH",
									"source": 11,
									"value": "FF"
								},
								{
									"begin": 220,
									"end": 5107,
									"name": "NOT",
									"source": 11
								},
								{
									"begin": 220,
									"end": 5107,
									"name": "AND",
									"source": 11
								},
								{
									"begin": 220,
									"end": 5107,
									"name": "DUP4",
									"source": 11
								},
								{
									"begin": 220,
									"end": 5107,
									"name": "DUP1",
									"source": 11
								},
								{
									"begin": 220,
									"end": 5107,
									"name": "ADD",
									"source": 11
								},
								{
									"begin": 220,
									"end": 5107,
									"name": "OR",
									"source": 11
								},
								{
									"begin": 220,
									"end": 5107,
									"name": "DUP6",
									"source": 11
								},
								{
									"begin": 220,
									"end": 5107,
									"name": "SSTORE",
									"source": 11
								},
								{
									"begin": 220,
									"end": 5107,
									"name": "PUSH [tag]",
									"source": 11,
									"value": "27"
								},
								{
									"begin": 220,
									"end": 5107,
									"name": "JUMP",
									"source": 11
								},
								{
									"begin": 220,
									"end": 5107,
									"name": "tag",
									"source": 11,
									"value": "25"
								},
								{
									"begin": 220,
									"end": 5107,
									"name": "JUMPDEST",
									"source": 11
								},
								{
									"begin": 220,
									"end": 5107,
									"name": "DUP3",
									"source": 11
								},
								{
									"begin": 220,
									"end": 5107,
									"name": "DUP1",
									"source": 11
								},
								{
									"begin": 220,
									"end": 5107,
									"name": "ADD",
									"source": 11
								},
								{
									"begin": 220,
									"end": 5107,
									"name": "PUSH",
									"source": 11,
									"value": "1"
								},
								{
									"begin": 220,
									"end": 5107,
									"name": "ADD",
									"source": 11
								},
								{
									"begin": 220,
									"end": 5107,
									"name": "DUP6",
									"source": 11
								},
								{
									"begin": 220,
									"end": 5107,
									"name": "SSTORE",
									"source": 11
								},
								{
									"begin": 220,
									"end": 5107,
									"name": "DUP3",
									"source": 11
								},
								{
									"begin": 220,
									"end": 5107,
									"name": "ISZERO",
									"source": 11
								},
								{
									"begin": 220,
									"end": 5107,
									"name": "PUSH [tag]",
									"source": 11,
									"value": "27"
								},
								{
									"begin": 220,
									"end": 5107,
									"name": "JUMPI",
									"source": 11
								},
								{
									"begin": 220,
									"end": 5107,
									"name": "SWAP2",
									"source": 11
								},
								{
									"begin": 220,
									"end": 5107,
									"name": "DUP3",
									"source": 11
								},
								{
									"begin": 220,
									"end": 5107,
									"name": "ADD",
									"source": 11
								},
								{
									"begin": 220,
									"end": 5107,
									"name": "tag",
									"source": 11,
									"value": "26"
								},
								{
									"begin": 220,
									"end": 5107,
									"name": "JUMPDEST",
									"source": 11
								},
								{
									"begin": 220,
									"end": 5107,
									"name": "DUP3",
									"source": 11
								},
								{
									"begin": 220,
									"end": 5107,
									"name": "DUP2",
									"source": 11
								},
								{
									"begin": 220,
									"end": 5107,
									"name": "GT",
									"source": 11
								},
								{
									"begin": 220,
									"end": 5107,
									"name": "ISZERO",
									"source": 11
								},
								{
									"begin": 220,
									"end": 5107,
									"name": "PUSH [tag]",
									"source": 11,
									"value": "27"
								},
								{
									"begin": 220,
									"end": 5107,
									"name": "JUMPI",
									"source": 11
								},
								{
									"begin": 220,
									"end": 5107,
									"name": "DUP3",
									"source": 11
								},
								{
									"begin": 220,
									"end": 5107,
									"name": "MLOAD",
									"source": 11
								},
								{
									"begin": 220,
									"end": 5107,
									"name": "DUP3",
									"source": 11
								},
								{
									"begin": 220,
									"end": 5107,
									"name": "SSTORE",
									"source": 11
								},
								{
									"begin": 220,
									"end": 5107,
									"name": "SWAP2",
									"source": 11
								},
								{
									"begin": 220,
									"end": 5107,
									"name": "PUSH",
									"source": 11,
									"value": "20"
								},
								{
									"begin": 220,
									"end": 5107,
									"name": "ADD",
									"source": 11
								},
								{
									"begin": 220,
									"end": 5107,
									"name": "SWAP2",
									"source": 11
								},
								{
									"begin": 220,
									"end": 5107,
									"name": "SWAP1",
									"source": 11
								},
								{
									"begin": 220,
									"end": 5107,
									"name": "PUSH",
									"source": 11,
									"value": "1"
								},
								{
									"begin": 220,
									"end": 5107,
									"name": "ADD",
									"source": 11
								},
								{
									"begin": 220,
									"end": 5107,
									"name": "SWAP1",
									"source": 11
								},
								{
									"begin": 220,
									"end": 5107,
									"name": "PUSH [tag]",
									"source": 11,
									"value": "26"
								},
								{
									"begin": 220,
									"end": 5107,
									"name": "JUMP",
									"source": 11
								},
								{
									"begin": 220,
									"end": 5107,
									"name": "tag",
									"source": 11,
									"value": "27"
								},
								{
									"begin": 220,
									"end": 5107,
									"name": "JUMPDEST",
									"source": 11
								},
								{
									"begin": -1,
									"end": -1,
									"name": "POP",
									"source": -1
								},
								{
									"begin": 220,
									"end": 5107,
									"name": "PUSH [tag]",
									"source": 11,
									"value": "28"
								},
								{
									"begin": 220,
									"end": 5107,
									"name": "SWAP3",
									"source": 11
								},
								{
									"begin": 220,
									"end": 5107,
									"name": "SWAP2",
									"source": 11
								},
								{
									"begin": -1,
									"end": -1,
									"name": "POP",
									"source": -1
								},
								{
									"begin": 220,
									"end": 5107,
									"name": "PUSH [tag]",
									"source": 11,
									"value": "29"
								},
								{
									"begin": 220,
									"end": 5107,
									"name": "JUMP",
									"source": 11,
									"value": "[in]"
								},
								{
									"begin": 220,
									"end": 5107,
									"name": "tag",
									"source": 11,
									"value": "28"
								},
								{
									"begin": 220,
									"end": 5107,
									"name": "JUMPDEST",
									"source": 11
								},
								{
									"begin": 220,
									"end": 5107,
									"name": "POP",
									"source": 11
								},
								{
									"begin": 220,
									"end": 5107,
									"name": "SWAP1",
									"source": 11
								},
								{
									"begin": 220,
									"end": 5107,
									"name": "JUMP",
									"source": 11,
									"value": "[out]"
								},
								{
									"begin": 220,
									"end": 5107,
									"name": "tag",
									"source": 11,
									"value": "29"
								},
								{
									"begin": 220,
									"end": 5107,
									"name": "JUMPDEST",
									"source": 11
								},
								{
									"begin": 220,
									"end": 5107,
									"name": "tag",
									"source": 11,
									"value": "30"
								},
								{
									"begin": 220,
									"end": 5107,
									"name": "JUMPDEST",
									"source": 11
								},
								{
									"begin": 220,
									"end": 5107,
									"name": "DUP1",
									"source": 11
								},
								{
									"begin": 220,
									"end": 5107,
									"name": "DUP3",
									"source": 11
								},
								{
									"begin": 220,
									"end": 5107,
									"name": "GT",
									"source": 11
								},
								{
									"begin": 220,
									"end": 5107,
									"name": "ISZERO",
									"source": 11
								},
								{
									"begin": 220,
									"end": 5107,
									"name": "PUSH [tag]",
									"source": 11,
									"value": "28"
								},
								{
									"begin": 220,
									"end": 5107,
									"name": "JUMPI",
									"source": 11
								},
								{
									"begin": 220,
									"end": 5107,
									"name": "PUSH",
									"source": 11,
									"value": "0"
								},
								{
									"begin": 220,
									"end": 5107,
									"name": "DUP2",
									"source": 11
								},
								{
									"begin": 220,
									"end": 5107,
									"name": "SSTORE",
									"source": 11
								},
								{
									"begin": 220,
									"end": 5107,
									"name": "PUSH",
									"source": 11,
									"value": "1"
								},
								{
									"begin": 220,
									"end": 5107,
									"name": "ADD",
									"source": 11
								},
								{
									"begin": 220,
									"end": 5107,
									"name": "PUSH [tag]",
									"source": 11,
									"value": "30"
								},
								{
									"begin": 220,
									"end": 5107,
									"name": "JUMP",
									"source": 11
								},
								{
									"begin": 14,
									"end": 394,
									"name": "tag",
									"source": 13,
									"value": "22"
								},
								{
									"begin": 14,
									"end": 394,
									"name": "JUMPDEST",
									"source": 13
								},
								{
									"begin": 93,
									"end": 94,
									"name": "PUSH",
									"source": 13,
									"value": "1"
								},
								{
									"begin": 89,
									"end": 101,
									"name": "DUP2",
									"source": 13
								},
								{
									"begin": 89,
									"end": 101,
									"name": "DUP2",
									"source": 13
								},
								{
									"begin": 89,
									"end": 101,
									"name": "SHR",
									"source": 13
								},
								{
									"begin": 89,
									"end": 101,
									"name": "SWAP1",
									"source": 13
								},
								{
									"begin": 136,
									"end": 148,
									"name": "DUP3",
									"source": 13
								},
								{
									"begin": 136,
									"end": 148,
									"name": "AND",
									"source": 13
								},
								{
									"begin": 136,
									"end": 148,
									"name": "DUP1",
									"source": 13
								},
								{
									"begin": 157,
									"end": 218,
									"name": "PUSH [tag]",
									"source": 13,
									"value": "34"
								},
								{
									"begin": 157,
									"end": 218,
									"name": "JUMPI",
									"source": 13
								},
								{
									"begin": 211,
									"end": 215,
									"name": "PUSH",
									"source": 13,
									"value": "7F"
								},
								{
									"begin": 203,
									"end": 209,
									"name": "DUP3",
									"source": 13
								},
								{
									"begin": 199,
									"end": 216,
									"name": "AND",
									"source": 13
								},
								{
									"begin": 189,
									"end": 216,
									"name": "SWAP2",
									"source": 13
								},
								{
									"begin": 189,
									"end": 216,
									"name": "POP",
									"source": 13
								},
								{
									"begin": 157,
									"end": 218,
									"name": "tag",
									"source": 13,
									"value": "34"
								},
								{
									"begin": 157,
									"end": 218,
									"name": "JUMPDEST",
									"source": 13
								},
								{
									"begin": 264,
									"end": 266,
									"name": "PUSH",
									"source": 13,
									"value": "20"
								},
								{
									"begin": 256,
									"end": 262,
									"name": "DUP3",
									"source": 13
								},
								{
									"begin": 253,
									"end": 267,
									"name": "LT",
									"source": 13
								},
								{
									"begin": 233,
									"end": 251,
									"name": "DUP2",
									"source": 13
								},
								{
									"begin": 230,
									"end": 268,
									"name": "EQ",
									"source": 13
								},
								{
									"begin": 227,
									"end": 388,
									"name": "ISZERO",
									"source": 13
								},
								{
									"begin": 227,
									"end": 388,
									"name": "PUSH [tag]",
									"source": 13,
									"value": "35"
								},
								{
									"begin": 227,
									"end": 388,
									"name": "JUMPI",
									"source": 13
								},
								{
									"begin": 310,
									"end": 320,
									"name": "PUSH",
									"source": 13,
									"value": "4E487B71"
								},
								{
									"begin": 305,
									"end": 308,
									"name": "PUSH",
									"source": 13,
									"value": "E0"
								},
								{
									"begin": 301,
									"end": 321,
									"name": "SHL",
									"source": 13
								},
								{
									"begin": 298,
									"end": 299,
									"name": "PUSH",
									"source": 13,
									"value": "0"
								},
								{
									"begin": 291,
									"end": 322,
									"name": "MSTORE",
									"source": 13
								},
								{
									"begin": 345,
									"end": 349,
									"name": "PUSH",
									"source": 13,
									"value": "22"
								},
								{
									"begin": 342,
									"end": 343,
									"name": "PUSH",
									"source": 13,
									"value": "4"
								},
								{
									"begin": 335,
									"end": 350,
									"name": "MSTORE",
									"source": 13
								},
								{
									"begin": 373,
									"end": 377,
									"name": "PUSH",
									"source": 13,
									"value": "24"
								},
								{
									"begin": 370,
									"end": 371,
									"name": "PUSH",
									"source": 13,
									"value": "0"
								},
								{
									"begin": 363,
									"end": 378,
									"name": "REVERT",
									"source": 13
								},
								{
									"begin": 227,
									"end": 388,
									"name": "tag",
									"source": 13,
									"value": "35"
								},
								{
									"begin": 227,
									"end": 388,
									"name": "JUMPDEST",
									"source": 13
								},
								{
									"begin": 227,
									"end": 388,
									"name": "POP",
									"source": 13
								},
								{
									"begin": 14,
									"end": 394,
									"name": "SWAP2",
									"source": 13
								},
								{
									"begin": 14,
									"end": 394,
									"name": "SWAP1",
									"source": 13
								},
								{
									"begin": 14,
									"end": 394,
									"name": "POP",
									"source": 13
								},
								{
									"begin": 14,
									"end": 394,
									"name": "JUMP",
									"source": 13,
									"value": "[out]"
								},
								{
									"begin": 14,
									"end": 394,
									"name": "tag",
									"source": 13,
									"value": "32"
								},
								{
									"begin": 14,
									"end": 394,
									"name": "JUMPDEST",
									"source": 13
								},
								{
									"begin": 220,
									"end": 5107,
									"name": "PUSH #[$]",
									"source": 11,
									"value": "0000000000000000000000000000000000000000000000000000000000000000"
								},
								{
									"begin": 220,
									"end": 5107,
									"name": "DUP1",
									"source": 11
								},
								{
									"begin": 220,
									"end": 5107,
									"name": "PUSH [$]",
									"source": 11,
									"value": "0000000000000000000000000000000000000000000000000000000000000000"
								},
								{
									"begin": 220,
									"end": 5107,
									"name": "PUSH",
									"source": 11,
									"value": "0"
								},
								{
									"begin": 220,
									"end": 5107,
									"name": "CODECOPY",
									"source": 11
								},
								{
									"begin": 220,
									"end": 5107,
									"name": "PUSH",
									"source": 11,
									"value": "0"
								},
								{
									"begin": 220,
									"end": 5107,
									"name": "RETURN",
									"source": 11
								}
							],
							".data": {
								"0": {
									".auxdata": "a2646970667358221220ccc0d679003696c9c6598f4d7991d88fc211f107d0883f5ac5ce95e85145f5b164736f6c63430008090033",
									".code": [
										{
											"begin": 220,
											"end": 5107,
											"name": "PUSH",
											"source": 11,
											"value": "80"
										},
										{
											"begin": 220,
											"end": 5107,
											"name": "PUSH",
											"source": 11,
											"value": "40"
										},
										{
											"begin": 220,
											"end": 5107,
											"name": "MSTORE",
											"source": 11
										},
										{
											"begin": 220,
											"end": 5107,
											"name": "PUSH",
											"source": 11,
											"value": "4"
										},
										{
											"begin": 220,
											"end": 5107,
											"name": "CALLDATASIZE",
											"source": 11
										},
										{
											"begin": 220,
											"end": 5107,
											"name": "LT",
											"source": 11
										},
										{
											"begin": 220,
											"end": 5107,
											"name": "PUSH [tag]",
											"source": 11,
											"value": "1"
										},
										{
											"begin": 220,
											"end": 5107,
											"name": "JUMPI",
											"source": 11
										},
										{
											"begin": 220,
											"end": 5107,
											"name": "PUSH",
											"source": 11,
											"value": "0"
										},
										{
											"begin": 220,
											"end": 5107,
											"name": "CALLDATALOAD",
											"source": 11
										},
										{
											"begin": 220,
											"end": 5107,
											"name": "PUSH",
											"source": 11,
											"value": "E0"
										},
										{
											"begin": 220,
											"end": 5107,
											"name": "SHR",
											"source": 11
										},
										{
											"begin": 220,
											"end": 5107,
											"name": "DUP1",
											"source": 11
										},
										{
											"begin": 220,
											"end": 5107,
											"name": "PUSH",
											"source": 11,
											"value": "70A08231"
										},
										{
											"begin": 220,
											"end": 5107,
											"name": "GT",
											"source": 11
										},
										{
											"begin": 220,
											"end": 5107,
											"name": "PUSH [tag]",
											"source": 11,
											"value": "45"
										},
										{
											"begin": 220,
											"end": 5107,
											"name": "JUMPI",
											"source": 11
										},
										{
											"begin": 220,
											"end": 5107,
											"name": "DUP1",
											"source": 11
										},
										{
											"begin": 220,
											"end": 5107,
											"name": "PUSH",
											"source": 11,
											"value": "B0962C53"
										},
										{
											"begin": 220,
											"end": 5107,
											"name": "GT",
											"source": 11
										},
										{
											"begin": 220,
											"end": 5107,
											"name": "PUSH [tag]",
											"source": 11,
											"value": "46"
										},
										{
											"begin": 220,
											"end": 5107,
											"name": "JUMPI",
											"source": 11
										},
										{
											"begin": 220,
											"end": 5107,
											"name": "DUP1",
											"source": 11
										},
										{
											"begin": 220,
											"end": 5107,
											"name": "PUSH",
											"source": 11,
											"value": "C4AE3168"
										},
										{
											"begin": 220,
											"end": 5107,
											"name": "GT",
											"source": 11
										},
										{
											"begin": 220,
											"end": 5107,
											"name": "PUSH [tag]",
											"source": 11,
											"value": "47"
										},
										{
											"begin": 220,
											"end": 5107,
											"name": "JUMPI",
											"source": 11
										},
										{
											"begin": 220,
											"end": 5107,
											"name": "DUP1",
											"source": 11
										},
										{
											"begin": 220,
											"end": 5107,
											"name": "PUSH",
											"source": 11,
											"value": "C4AE3168"
										},
										{
											"begin": 220,
											"end": 5107,
											"name": "EQ",
											"source": 11
										},
										{
											"begin": 220,
											"end": 5107,
											"name": "PUSH [tag]",
											"source": 11,
											"value": "39"
										},
										{
											"begin": 220,
											"end": 5107,
											"name": "JUMPI",
											"source": 11
										},
										{
											"begin": 220,
											"end": 5107,
											"name": "DUP1",
											"source": 11
										},
										{
											"begin": 220,
											"end": 5107,
											"name": "PUSH",
											"source": 11,
											"value": "C87B56DD"
										},
										{
											"begin": 220,
											"end": 5107,
											"name": "EQ",
											"source": 11
										},
										{
											"begin": 220,
											"end": 5107,
											"name": "PUSH [tag]",
											"source": 11,
											"value": "40"
										},
										{
											"begin": 220,
											"end": 5107,
											"name": "JUMPI",
											"source": 11
										},
										{
											"begin": 220,
											"end": 5107,
											"name": "DUP1",
											"source": 11
										},
										{
											"begin": 220,
											"end": 5107,
											"name": "PUSH",
											"source": 11,
											"value": "E222C7F9"
										},
										{
											"begin": 220,
											"end": 5107,
											"name": "EQ",
											"source": 11
										},
										{
											"begin": 220,
											"end": 5107,
											"name": "PUSH [tag]",
											"source": 11,
											"value": "41"
										},
										{
											"begin": 220,
											"end": 5107,
											"name": "JUMPI",
											"source": 11
										},
										{
											"begin": 220,
											"end": 5107,
											"name": "DUP1",
											"source": 11
										},
										{
											"begin": 220,
											"end": 5107,
											"name": "PUSH",
											"source": 11,
											"value": "E8B5498D"
										},
										{
											"begin": 220,
											"end": 5107,
											"name": "EQ",
											"source": 11
										},
										{
											"begin": 220,
											"end": 5107,
											"name": "PUSH [tag]",
											"source": 11,
											"value": "42"
										},
										{
											"begin": 220,
											"end": 5107,
											"name": "JUMPI",
											"source": 11
										},
										{
											"begin": 220,
											"end": 5107,
											"name": "DUP1",
											"source": 11
										},
										{
											"begin": 220,
											"end": 5107,
											"name": "PUSH",
											"source": 11,
											"value": "E985E9C5"
										},
										{
											"begin": 220,
											"end": 5107,
											"name": "EQ",
											"source": 11
										},
										{
											"begin": 220,
											"end": 5107,
											"name": "PUSH [tag]",
											"source": 11,
											"value": "43"
										},
										{
											"begin": 220,
											"end": 5107,
											"name": "JUMPI",
											"source": 11
										},
										{
											"begin": 220,
											"end": 5107,
											"name": "DUP1",
											"source": 11
										},
										{
											"begin": 220,
											"end": 5107,
											"name": "PUSH",
											"source": 11,
											"value": "F2FDE38B"
										},
										{
											"begin": 220,
											"end": 5107,
											"name": "EQ",
											"source": 11
										},
										{
											"begin": 220,
											"end": 5107,
											"name": "PUSH [tag]",
											"source": 11,
											"value": "44"
										},
										{
											"begin": 220,
											"end": 5107,
											"name": "JUMPI",
											"source": 11
										},
										{
											"begin": 220,
											"end": 5107,
											"name": "PUSH",
											"source": 11,
											"value": "0"
										},
										{
											"begin": 220,
											"end": 5107,
											"name": "DUP1",
											"source": 11
										},
										{
											"begin": 220,
											"end": 5107,
											"name": "REVERT",
											"source": 11
										},
										{
											"begin": 220,
											"end": 5107,
											"name": "tag",
											"source": 11,
											"value": "47"
										},
										{
											"begin": 220,
											"end": 5107,
											"name": "JUMPDEST",
											"source": 11
										},
										{
											"begin": 220,
											"end": 5107,
											"name": "DUP1",
											"source": 11
										},
										{
											"begin": 220,
											"end": 5107,
											"name": "PUSH",
											"source": 11,
											"value": "B0962C53"
										},
										{
											"begin": 220,
											"end": 5107,
											"name": "EQ",
											"source": 11
										},
										{
											"begin": 220,
											"end": 5107,
											"name": "PUSH [tag]",
											"source": 11,
											"value": "34"
										},
										{
											"begin": 220,
											"end": 5107,
											"name": "JUMPI",
											"source": 11
										},
										{
											"begin": 220,
											"end": 5107,
											"name": "DUP1",
											"source": 11
										},
										{
											"begin": 220,
											"end": 5107,
											"name": "PUSH",
											"source": 11,
											"value": "B88D4FDE"
										},
										{
											"begin": 220,
											"end": 5107,
											"name": "EQ",
											"source": 11
										},
										{
											"begin": 220,
											"end": 5107,
											"name": "PUSH [tag]",
											"source": 11,
											"value": "35"
										},
										{
											"begin": 220,
											"end": 5107,
											"name": "JUMPI",
											"source": 11
										},
										{
											"begin": 220,
											"end": 5107,
											"name": "DUP1",
											"source": 11
										},
										{
											"begin": 220,
											"end": 5107,
											"name": "PUSH",
											"source": 11,
											"value": "BA7A86B8"
										},
										{
											"begin": 220,
											"end": 5107,
											"name": "EQ",
											"source": 11
										},
										{
											"begin": 220,
											"end": 5107,
											"name": "PUSH [tag]",
											"source": 11,
											"value": "36"
										},
										{
											"begin": 220,
											"end": 5107,
											"name": "JUMPI",
											"source": 11
										},
										{
											"begin": 220,
											"end": 5107,
											"name": "DUP1",
											"source": 11
										},
										{
											"begin": 220,
											"end": 5107,
											"name": "PUSH",
											"source": 11,
											"value": "BC912E1A"
										},
										{
											"begin": 220,
											"end": 5107,
											"name": "EQ",
											"source": 11
										},
										{
											"begin": 220,
											"end": 5107,
											"name": "PUSH [tag]",
											"source": 11,
											"value": "37"
										},
										{
											"begin": 220,
											"end": 5107,
											"name": "JUMPI",
											"source": 11
										},
										{
											"begin": 220,
											"end": 5107,
											"name": "DUP1",
											"source": 11
										},
										{
											"begin": 220,
											"end": 5107,
											"name": "PUSH",
											"source": 11,
											"value": "C08DFD3C"
										},
										{
											"begin": 220,
											"end": 5107,
											"name": "EQ",
											"source": 11
										},
										{
											"begin": 220,
											"end": 5107,
											"name": "PUSH [tag]",
											"source": 11,
											"value": "22"
										},
										{
											"begin": 220,
											"end": 5107,
											"name": "JUMPI",
											"source": 11
										},
										{
											"begin": 220,
											"end": 5107,
											"name": "PUSH",
											"source": 11,
											"value": "0"
										},
										{
											"begin": 220,
											"end": 5107,
											"name": "DUP1",
											"source": 11
										},
										{
											"begin": 220,
											"end": 5107,
											"name": "REVERT",
											"source": 11
										},
										{
											"begin": 220,
											"end": 5107,
											"name": "tag",
											"source": 11,
											"value": "46"
										},
										{
											"begin": 220,
											"end": 5107,
											"name": "JUMPDEST",
											"source": 11
										},
										{
											"begin": 220,
											"end": 5107,
											"name": "DUP1",
											"source": 11
										},
										{
											"begin": 220,
											"end": 5107,
											"name": "PUSH",
											"source": 11,
											"value": "86A173EE"
										},
										{
											"begin": 220,
											"end": 5107,
											"name": "GT",
											"source": 11
										},
										{
											"begin": 220,
											"end": 5107,
											"name": "PUSH [tag]",
											"source": 11,
											"value": "48"
										},
										{
											"begin": 220,
											"end": 5107,
											"name": "JUMPI",
											"source": 11
										},
										{
											"begin": 220,
											"end": 5107,
											"name": "DUP1",
											"source": 11
										},
										{
											"begin": 220,
											"end": 5107,
											"name": "PUSH",
											"source": 11,
											"value": "86A173EE"
										},
										{
											"begin": 220,
											"end": 5107,
											"name": "EQ",
											"source": 11
										},
										{
											"begin": 220,
											"end": 5107,
											"name": "PUSH [tag]",
											"source": 11,
											"value": "28"
										},
										{
											"begin": 220,
											"end": 5107,
											"name": "JUMPI",
											"source": 11
										},
										{
											"begin": 220,
											"end": 5107,
											"name": "DUP1",
											"source": 11
										},
										{
											"begin": 220,
											"end": 5107,
											"name": "PUSH",
											"source": 11,
											"value": "8BB64A8C"
										},
										{
											"begin": 220,
											"end": 5107,
											"name": "EQ",
											"source": 11
										},
										{
											"begin": 220,
											"end": 5107,
											"name": "PUSH [tag]",
											"source": 11,
											"value": "29"
										},
										{
											"begin": 220,
											"end": 5107,
											"name": "JUMPI",
											"source": 11
										},
										{
											"begin": 220,
											"end": 5107,
											"name": "DUP1",
											"source": 11
										},
										{
											"begin": 220,
											"end": 5107,
											"name": "PUSH",
											"source": 11,
											"value": "8DA5CB5B"
										},
										{
											"begin": 220,
											"end": 5107,
											"name": "EQ",
											"source": 11
										},
										{
											"begin": 220,
											"end": 5107,
											"name": "PUSH [tag]",
											"source": 11,
											"value": "30"
										},
										{
											"begin": 220,
											"end": 5107,
											"name": "JUMPI",
											"source": 11
										},
										{
											"begin": 220,
											"end": 5107,
											"name": "DUP1",
											"source": 11
										},
										{
											"begin": 220,
											"end": 5107,
											"name": "PUSH",
											"source": 11,
											"value": "95D89B41"
										},
										{
											"begin": 220,
											"end": 5107,
											"name": "EQ",
											"source": 11
										},
										{
											"begin": 220,
											"end": 5107,
											"name": "PUSH [tag]",
											"source": 11,
											"value": "31"
										},
										{
											"begin": 220,
											"end": 5107,
											"name": "JUMPI",
											"source": 11
										},
										{
											"begin": 220,
											"end": 5107,
											"name": "DUP1",
											"source": 11
										},
										{
											"begin": 220,
											"end": 5107,
											"name": "PUSH",
											"source": 11,
											"value": "A0712D68"
										},
										{
											"begin": 220,
											"end": 5107,
											"name": "EQ",
											"source": 11
										},
										{
											"begin": 220,
											"end": 5107,
											"name": "PUSH [tag]",
											"source": 11,
											"value": "32"
										},
										{
											"begin": 220,
											"end": 5107,
											"name": "JUMPI",
											"source": 11
										},
										{
											"begin": 220,
											"end": 5107,
											"name": "DUP1",
											"source": 11
										},
										{
											"begin": 220,
											"end": 5107,
											"name": "PUSH",
											"source": 11,
											"value": "A22CB465"
										},
										{
											"begin": 220,
											"end": 5107,
											"name": "EQ",
											"source": 11
										},
										{
											"begin": 220,
											"end": 5107,
											"name": "PUSH [tag]",
											"source": 11,
											"value": "33"
										},
										{
											"begin": 220,
											"end": 5107,
											"name": "JUMPI",
											"source": 11
										},
										{
											"begin": 220,
											"end": 5107,
											"name": "PUSH",
											"source": 11,
											"value": "0"
										},
										{
											"begin": 220,
											"end": 5107,
											"name": "DUP1",
											"source": 11
										},
										{
											"begin": 220,
											"end": 5107,
											"name": "REVERT",
											"source": 11
										},
										{
											"begin": 220,
											"end": 5107,
											"name": "tag",
											"source": 11,
											"value": "48"
										},
										{
											"begin": 220,
											"end": 5107,
											"name": "JUMPDEST",
											"source": 11
										},
										{
											"begin": 220,
											"end": 5107,
											"name": "DUP1",
											"source": 11
										},
										{
											"begin": 220,
											"end": 5107,
											"name": "PUSH",
											"source": 11,
											"value": "70A08231"
										},
										{
											"begin": 220,
											"end": 5107,
											"name": "EQ",
											"source": 11
										},
										{
											"begin": 220,
											"end": 5107,
											"name": "PUSH [tag]",
											"source": 11,
											"value": "23"
										},
										{
											"begin": 220,
											"end": 5107,
											"name": "JUMPI",
											"source": 11
										},
										{
											"begin": 220,
											"end": 5107,
											"name": "DUP1",
											"source": 11
										},
										{
											"begin": 220,
											"end": 5107,
											"name": "PUSH",
											"source": 11,
											"value": "715018A6"
										},
										{
											"begin": 220,
											"end": 5107,
											"name": "EQ",
											"source": 11
										},
										{
											"begin": 220,
											"end": 5107,
											"name": "PUSH [tag]",
											"source": 11,
											"value": "24"
										},
										{
											"begin": 220,
											"end": 5107,
											"name": "JUMPI",
											"source": 11
										},
										{
											"begin": 220,
											"end": 5107,
											"name": "DUP1",
											"source": 11
										},
										{
											"begin": 220,
											"end": 5107,
											"name": "PUSH",
											"source": 11,
											"value": "7CB64759"
										},
										{
											"begin": 220,
											"end": 5107,
											"name": "EQ",
											"source": 11
										},
										{
											"begin": 220,
											"end": 5107,
											"name": "PUSH [tag]",
											"source": 11,
											"value": "25"
										},
										{
											"begin": 220,
											"end": 5107,
											"name": "JUMPI",
											"source": 11
										},
										{
											"begin": 220,
											"end": 5107,
											"name": "DUP1",
											"source": 11
										},
										{
											"begin": 220,
											"end": 5107,
											"name": "PUSH",
											"source": 11,
											"value": "83A974A2"
										},
										{
											"begin": 220,
											"end": 5107,
											"name": "EQ",
											"source": 11
										},
										{
											"begin": 220,
											"end": 5107,
											"name": "PUSH [tag]",
											"source": 11,
											"value": "26"
										},
										{
											"begin": 220,
											"end": 5107,
											"name": "JUMPI",
											"source": 11
										},
										{
											"begin": 220,
											"end": 5107,
											"name": "DUP1",
											"source": 11
										},
										{
											"begin": 220,
											"end": 5107,
											"name": "PUSH",
											"source": 11,
											"value": "8456CB59"
										},
										{
											"begin": 220,
											"end": 5107,
											"name": "EQ",
											"source": 11
										},
										{
											"begin": 220,
											"end": 5107,
											"name": "PUSH [tag]",
											"source": 11,
											"value": "27"
										},
										{
											"begin": 220,
											"end": 5107,
											"name": "JUMPI",
											"source": 11
										},
										{
											"begin": 220,
											"end": 5107,
											"name": "PUSH",
											"source": 11,
											"value": "0"
										},
										{
											"begin": 220,
											"end": 5107,
											"name": "DUP1",
											"source": 11
										},
										{
											"begin": 220,
											"end": 5107,
											"name": "REVERT",
											"source": 11
										},
										{
											"begin": 220,
											"end": 5107,
											"name": "tag",
											"source": 11,
											"value": "45"
										},
										{
											"begin": 220,
											"end": 5107,
											"name": "JUMPDEST",
											"source": 11
										},
										{
											"begin": 220,
											"end": 5107,
											"name": "DUP1",
											"source": 11
										},
										{
											"begin": 220,
											"end": 5107,
											"name": "PUSH",
											"source": 11,
											"value": "2904E6D9"
										},
										{
											"begin": 220,
											"end": 5107,
											"name": "GT",
											"source": 11
										},
										{
											"begin": 220,
											"end": 5107,
											"name": "PUSH [tag]",
											"source": 11,
											"value": "49"
										},
										{
											"begin": 220,
											"end": 5107,
											"name": "JUMPI",
											"source": 11
										},
										{
											"begin": 220,
											"end": 5107,
											"name": "DUP1",
											"source": 11
										},
										{
											"begin": 220,
											"end": 5107,
											"name": "PUSH",
											"source": 11,
											"value": "49590657"
										},
										{
											"begin": 220,
											"end": 5107,
											"name": "GT",
											"source": 11
										},
										{
											"begin": 220,
											"end": 5107,
											"name": "PUSH [tag]",
											"source": 11,
											"value": "50"
										},
										{
											"begin": 220,
											"end": 5107,
											"name": "JUMPI",
											"source": 11
										},
										{
											"begin": 220,
											"end": 5107,
											"name": "DUP1",
											"source": 11
										},
										{
											"begin": 220,
											"end": 5107,
											"name": "PUSH",
											"source": 11,
											"value": "49590657"
										},
										{
											"begin": 220,
											"end": 5107,
											"name": "EQ",
											"source": 11
										},
										{
											"begin": 220,
											"end": 5107,
											"name": "PUSH [tag]",
											"source": 11,
											"value": "17"
										},
										{
											"begin": 220,
											"end": 5107,
											"name": "JUMPI",
											"source": 11
										},
										{
											"begin": 220,
											"end": 5107,
											"name": "DUP1",
											"source": 11
										},
										{
											"begin": 220,
											"end": 5107,
											"name": "PUSH",
											"source": 11,
											"value": "4CF5F7A4"
										},
										{
											"begin": 220,
											"end": 5107,
											"name": "EQ",
											"source": 11
										},
										{
											"begin": 220,
											"end": 5107,
											"name": "PUSH [tag]",
											"source": 11,
											"value": "18"
										},
										{
											"begin": 220,
											"end": 5107,
											"name": "JUMPI",
											"source": 11
										},
										{
											"begin": 220,
											"end": 5107,
											"name": "DUP1",
											"source": 11
										},
										{
											"begin": 220,
											"end": 5107,
											"name": "PUSH",
											"source": 11,
											"value": "54214F69"
										},
										{
											"begin": 220,
											"end": 5107,
											"name": "EQ",
											"source": 11
										},
										{
											"begin": 220,
											"end": 5107,
											"name": "PUSH [tag]",
											"source": 11,
											"value": "19"
										},
										{
											"begin": 220,
											"end": 5107,
											"name": "JUMPI",
											"source": 11
										},
										{
											"begin": 220,
											"end": 5107,
											"name": "DUP1",
											"source": 11
										},
										{
											"begin": 220,
											"end": 5107,
											"name": "PUSH",
											"source": 11,
											"value": "5B8AD429"
										},
										{
											"begin": 220,
											"end": 5107,
											"name": "EQ",
											"source": 11
										},
										{
											"begin": 220,
											"end": 5107,
											"name": "PUSH [tag]",
											"source": 11,
											"value": "20"
										},
										{
											"begin": 220,
											"end": 5107,
											"name": "JUMPI",
											"source": 11
										},
										{
											"begin": 220,
											"end": 5107,
											"name": "DUP1",
											"source": 11
										},
										{
											"begin": 220,
											"end": 5107,
											"name": "PUSH",
											"source": 11,
											"value": "6352211E"
										},
										{
											"begin": 220,
											"end": 5107,
											"name": "EQ",
											"source": 11
										},
										{
											"begin": 220,
											"end": 5107,
											"name": "PUSH [tag]",
											"source": 11,
											"value": "21"
										},
										{
											"begin": 220,
											"end": 5107,
											"name": "JUMPI",
											"source": 11
										},
										{
											"begin": 220,
											"end": 5107,
											"name": "DUP1",
											"source": 11
										},
										{
											"begin": 220,
											"end": 5107,
											"name": "PUSH",
											"source": 11,
											"value": "65F13097"
										},
										{
											"begin": 220,
											"end": 5107,
											"name": "EQ",
											"source": 11
										},
										{
											"begin": 220,
											"end": 5107,
											"name": "PUSH [tag]",
											"source": 11,
											"value": "22"
										},
										{
											"begin": 220,
											"end": 5107,
											"name": "JUMPI",
											"source": 11
										},
										{
											"begin": 220,
											"end": 5107,
											"name": "PUSH",
											"source": 11,
											"value": "0"
										},
										{
											"begin": 220,
											"end": 5107,
											"name": "DUP1",
											"source": 11
										},
										{
											"begin": 220,
											"end": 5107,
											"name": "REVERT",
											"source": 11
										},
										{
											"begin": 220,
											"end": 5107,
											"name": "tag",
											"source": 11,
											"value": "50"
										},
										{
											"begin": 220,
											"end": 5107,
											"name": "JUMPDEST",
											"source": 11
										},
										{
											"begin": 220,
											"end": 5107,
											"name": "DUP1",
											"source": 11
										},
										{
											"begin": 220,
											"end": 5107,
											"name": "PUSH",
											"source": 11,
											"value": "2904E6D9"
										},
										{
											"begin": 220,
											"end": 5107,
											"name": "EQ",
											"source": 11
										},
										{
											"begin": 220,
											"end": 5107,
											"name": "PUSH [tag]",
											"source": 11,
											"value": "12"
										},
										{
											"begin": 220,
											"end": 5107,
											"name": "JUMPI",
											"source": 11
										},
										{
											"begin": 220,
											"end": 5107,
											"name": "DUP1",
											"source": 11
										},
										{
											"begin": 220,
											"end": 5107,
											"name": "PUSH",
											"source": 11,
											"value": "32CB6B0C"
										},
										{
											"begin": 220,
											"end": 5107,
											"name": "EQ",
											"source": 11
										},
										{
											"begin": 220,
											"end": 5107,
											"name": "PUSH [tag]",
											"source": 11,
											"value": "13"
										},
										{
											"begin": 220,
											"end": 5107,
											"name": "JUMPI",
											"source": 11
										},
										{
											"begin": 220,
											"end": 5107,
											"name": "DUP1",
											"source": 11
										},
										{
											"begin": 220,
											"end": 5107,
											"name": "PUSH",
											"source": 11,
											"value": "33BC1C5C"
										},
										{
											"begin": 220,
											"end": 5107,
											"name": "EQ",
											"source": 11
										},
										{
											"begin": 220,
											"end": 5107,
											"name": "PUSH [tag]",
											"source": 11,
											"value": "14"
										},
										{
											"begin": 220,
											"end": 5107,
											"name": "JUMPI",
											"source": 11
										},
										{
											"begin": 220,
											"end": 5107,
											"name": "DUP1",
											"source": 11
										},
										{
											"begin": 220,
											"end": 5107,
											"name": "PUSH",
											"source": 11,
											"value": "3CCFD60B"
										},
										{
											"begin": 220,
											"end": 5107,
											"name": "EQ",
											"source": 11
										},
										{
											"begin": 220,
											"end": 5107,
											"name": "PUSH [tag]",
											"source": 11,
											"value": "15"
										},
										{
											"begin": 220,
											"end": 5107,
											"name": "JUMPI",
											"source": 11
										},
										{
											"begin": 220,
											"end": 5107,
											"name": "DUP1",
											"source": 11
										},
										{
											"begin": 220,
											"end": 5107,
											"name": "PUSH",
											"source": 11,
											"value": "42842E0E"
										},
										{
											"begin": 220,
											"end": 5107,
											"name": "EQ",
											"source": 11
										},
										{
											"begin": 220,
											"end": 5107,
											"name": "PUSH [tag]",
											"source": 11,
											"value": "16"
										},
										{
											"begin": 220,
											"end": 5107,
											"name": "JUMPI",
											"source": 11
										},
										{
											"begin": 220,
											"end": 5107,
											"name": "PUSH",
											"source": 11,
											"value": "0"
										},
										{
											"begin": 220,
											"end": 5107,
											"name": "DUP1",
											"source": 11
										},
										{
											"begin": 220,
											"end": 5107,
											"name": "REVERT",
											"source": 11
										},
										{
											"begin": 220,
											"end": 5107,
											"name": "tag",
											"source": 11,
											"value": "49"
										},
										{
											"begin": 220,
											"end": 5107,
											"name": "JUMPDEST",
											"source": 11
										},
										{
											"begin": 220,
											"end": 5107,
											"name": "DUP1",
											"source": 11
										},
										{
											"begin": 220,
											"end": 5107,
											"name": "PUSH",
											"source": 11,
											"value": "81812FC"
										},
										{
											"begin": 220,
											"end": 5107,
											"name": "GT",
											"source": 11
										},
										{
											"begin": 220,
											"end": 5107,
											"name": "PUSH [tag]",
											"source": 11,
											"value": "51"
										},
										{
											"begin": 220,
											"end": 5107,
											"name": "JUMPI",
											"source": 11
										},
										{
											"begin": 220,
											"end": 5107,
											"name": "DUP1",
											"source": 11
										},
										{
											"begin": 220,
											"end": 5107,
											"name": "PUSH",
											"source": 11,
											"value": "81812FC"
										},
										{
											"begin": 220,
											"end": 5107,
											"name": "EQ",
											"source": 11
										},
										{
											"begin": 220,
											"end": 5107,
											"name": "PUSH [tag]",
											"source": 11,
											"value": "7"
										},
										{
											"begin": 220,
											"end": 5107,
											"name": "JUMPI",
											"source": 11
										},
										{
											"begin": 220,
											"end": 5107,
											"name": "DUP1",
											"source": 11
										},
										{
											"begin": 220,
											"end": 5107,
											"name": "PUSH",
											"source": 11,
											"value": "95EA7B3"
										},
										{
											"begin": 220,
											"end": 5107,
											"name": "EQ",
											"source": 11
										},
										{
											"begin": 220,
											"end": 5107,
											"name": "PUSH [tag]",
											"source": 11,
											"value": "8"
										},
										{
											"begin": 220,
											"end": 5107,
											"name": "JUMPI",
											"source": 11
										},
										{
											"begin": 220,
											"end": 5107,
											"name": "DUP1",
											"source": 11
										},
										{
											"begin": 220,
											"end": 5107,
											"name": "PUSH",
											"source": 11,
											"value": "18160DDD"
										},
										{
											"begin": 220,
											"end": 5107,
											"name": "EQ",
											"source": 11
										},
										{
											"begin": 220,
											"end": 5107,
											"name": "PUSH [tag]",
											"source": 11,
											"value": "9"
										},
										{
											"begin": 220,
											"end": 5107,
											"name": "JUMPI",
											"source": 11
										},
										{
											"begin": 220,
											"end": 5107,
											"name": "DUP1",
											"source": 11
										},
										{
											"begin": 220,
											"end": 5107,
											"name": "PUSH",
											"source": 11,
											"value": "1C16521C"
										},
										{
											"begin": 220,
											"end": 5107,
											"name": "EQ",
											"source": 11
										},
										{
											"begin": 220,
											"end": 5107,
											"name": "PUSH [tag]",
											"source": 11,
											"value": "10"
										},
										{
											"begin": 220,
											"end": 5107,
											"name": "JUMPI",
											"source": 11
										},
										{
											"begin": 220,
											"end": 5107,
											"name": "DUP1",
											"source": 11
										},
										{
											"begin": 220,
											"end": 5107,
											"name": "PUSH",
											"source": 11,
											"value": "23B872DD"
										},
										{
											"begin": 220,
											"end": 5107,
											"name": "EQ",
											"source": 11
										},
										{
											"begin": 220,
											"end": 5107,
											"name": "PUSH [tag]",
											"source": 11,
											"value": "11"
										},
										{
											"begin": 220,
											"end": 5107,
											"name": "JUMPI",
											"source": 11
										},
										{
											"begin": 220,
											"end": 5107,
											"name": "PUSH",
											"source": 11,
											"value": "0"
										},
										{
											"begin": 220,
											"end": 5107,
											"name": "DUP1",
											"source": 11
										},
										{
											"begin": 220,
											"end": 5107,
											"name": "REVERT",
											"source": 11
										},
										{
											"begin": 220,
											"end": 5107,
											"name": "tag",
											"source": 11,
											"value": "51"
										},
										{
											"begin": 220,
											"end": 5107,
											"name": "JUMPDEST",
											"source": 11
										},
										{
											"begin": 220,
											"end": 5107,
											"name": "DUP1",
											"source": 11
										},
										{
											"begin": 220,
											"end": 5107,
											"name": "PUSH",
											"source": 11,
											"value": "1FFC9A7"
										},
										{
											"begin": 220,
											"end": 5107,
											"name": "EQ",
											"source": 11
										},
										{
											"begin": 220,
											"end": 5107,
											"name": "PUSH [tag]",
											"source": 11,
											"value": "2"
										},
										{
											"begin": 220,
											"end": 5107,
											"name": "JUMPI",
											"source": 11
										},
										{
											"begin": 220,
											"end": 5107,
											"name": "DUP1",
											"source": 11
										},
										{
											"begin": 220,
											"end": 5107,
											"name": "PUSH",
											"source": 11,
											"value": "345E3CB"
										},
										{
											"begin": 220,
											"end": 5107,
											"name": "EQ",
											"source": 11
										},
										{
											"begin": 220,
											"end": 5107,
											"name": "PUSH [tag]",
											"source": 11,
											"value": "3"
										},
										{
											"begin": 220,
											"end": 5107,
											"name": "JUMPI",
											"source": 11
										},
										{
											"begin": 220,
											"end": 5107,
											"name": "DUP1",
											"source": 11
										},
										{
											"begin": 220,
											"end": 5107,
											"name": "PUSH",
											"source": 11,
											"value": "675B7C6"
										},
										{
											"begin": 220,
											"end": 5107,
											"name": "EQ",
											"source": 11
										},
										{
											"begin": 220,
											"end": 5107,
											"name": "PUSH [tag]",
											"source": 11,
											"value": "4"
										},
										{
											"begin": 220,
											"end": 5107,
											"name": "JUMPI",
											"source": 11
										},
										{
											"begin": 220,
											"end": 5107,
											"name": "DUP1",
											"source": 11
										},
										{
											"begin": 220,
											"end": 5107,
											"name": "PUSH",
											"source": 11,
											"value": "6FDDE03"
										},
										{
											"begin": 220,
											"end": 5107,
											"name": "EQ",
											"source": 11
										},
										{
											"begin": 220,
											"end": 5107,
											"name": "PUSH [tag]",
											"source": 11,
											"value": "5"
										},
										{
											"begin": 220,
											"end": 5107,
											"name": "JUMPI",
											"source": 11
										},
										{
											"begin": 220,
											"end": 5107,
											"name": "DUP1",
											"source": 11
										},
										{
											"begin": 220,
											"end": 5107,
											"name": "PUSH",
											"source": 11,
											"value": "7E89EC0"
										},
										{
											"begin": 220,
											"end": 5107,
											"name": "EQ",
											"source": 11
										},
										{
											"begin": 220,
											"end": 5107,
											"name": "PUSH [tag]",
											"source": 11,
											"value": "6"
										},
										{
											"begin": 220,
											"end": 5107,
											"name": "JUMPI",
											"source": 11
										},
										{
											"begin": 220,
											"end": 5107,
											"name": "tag",
											"source": 11,
											"value": "1"
										},
										{
											"begin": 220,
											"end": 5107,
											"name": "JUMPDEST",
											"source": 11
										},
										{
											"begin": 220,
											"end": 5107,
											"name": "PUSH",
											"source": 11,
											"value": "0"
										},
										{
											"begin": 220,
											"end": 5107,
											"name": "DUP1",
											"source": 11
										},
										{
											"begin": 220,
											"end": 5107,
											"name": "REVERT",
											"source": 11
										},
										{
											"begin": 4843,
											"end": 5143,
											"name": "tag",
											"source": 12,
											"value": "2"
										},
										{
											"begin": 4843,
											"end": 5143,
											"name": "JUMPDEST",
											"source": 12
										},
										{
											"begin": 4843,
											"end": 5143,
											"name": "CALLVALUE",
											"source": 12
										},
										{
											"begin": 4843,
											"end": 5143,
											"name": "DUP1",
											"source": 12
										},
										{
											"begin": 4843,
											"end": 5143,
											"name": "ISZERO",
											"source": 12
										},
										{
											"begin": 4843,
											"end": 5143,
											"name": "PUSH [tag]",
											"source": 12,
											"value": "52"
										},
										{
											"begin": 4843,
											"end": 5143,
											"name": "JUMPI",
											"source": 12
										},
										{
											"begin": 4843,
											"end": 5143,
											"name": "PUSH",
											"source": 12,
											"value": "0"
										},
										{
											"begin": 4843,
											"end": 5143,
											"name": "DUP1",
											"source": 12
										},
										{
											"begin": 4843,
											"end": 5143,
											"name": "REVERT",
											"source": 12
										},
										{
											"begin": 4843,
											"end": 5143,
											"name": "tag",
											"source": 12,
											"value": "52"
										},
										{
											"begin": 4843,
											"end": 5143,
											"name": "JUMPDEST",
											"source": 12
										},
										{
											"begin": -1,
											"end": -1,
											"name": "POP",
											"source": -1
										},
										{
											"begin": 4843,
											"end": 5143,
											"name": "PUSH [tag]",
											"source": 12,
											"value": "53"
										},
										{
											"begin": 4843,
											"end": 5143,
											"name": "PUSH [tag]",
											"source": 12,
											"value": "54"
										},
										{
											"begin": 4843,
											"end": 5143,
											"name": "CALLDATASIZE",
											"source": 12
										},
										{
											"begin": 4843,
											"end": 5143,
											"name": "PUSH",
											"source": 12,
											"value": "4"
										},
										{
											"begin": 4843,
											"end": 5143,
											"name": "PUSH [tag]",
											"source": 12,
											"value": "55"
										},
										{
											"begin": 4843,
											"end": 5143,
											"name": "JUMP",
											"source": 12,
											"value": "[in]"
										},
										{
											"begin": 4843,
											"end": 5143,
											"name": "tag",
											"source": 12,
											"value": "54"
										},
										{
											"begin": 4843,
											"end": 5143,
											"name": "JUMPDEST",
											"source": 12
										},
										{
											"begin": 4843,
											"end": 5143,
											"name": "PUSH [tag]",
											"source": 12,
											"value": "56"
										},
										{
											"begin": 4843,
											"end": 5143,
											"name": "JUMP",
											"source": 12,
											"value": "[in]"
										},
										{
											"begin": 4843,
											"end": 5143,
											"name": "tag",
											"source": 12,
											"value": "53"
										},
										{
											"begin": 4843,
											"end": 5143,
											"name": "JUMPDEST",
											"source": 12
										},
										{
											"begin": 4843,
											"end": 5143,
											"name": "PUSH",
											"source": 12,
											"value": "40"
										},
										{
											"begin": 4843,
											"end": 5143,
											"name": "MLOAD",
											"source": 12
										},
										{
											"begin": 565,
											"end": 579,
											"name": "SWAP1",
											"source": 13
										},
										{
											"begin": 565,
											"end": 579,
											"name": "ISZERO",
											"source": 13
										},
										{
											"begin": 558,
											"end": 580,
											"name": "ISZERO",
											"source": 13
										},
										{
											"begin": 540,
											"end": 581,
											"name": "DUP2",
											"source": 13
										},
										{
											"begin": 540,
											"end": 581,
											"name": "MSTORE",
											"source": 13
										},
										{
											"begin": 528,
											"end": 530,
											"name": "PUSH",
											"source": 13,
											"value": "20"
										},
										{
											"begin": 513,
											"end": 531,
											"name": "ADD",
											"source": 13
										},
										{
											"begin": 4843,
											"end": 5143,
											"name": "tag",
											"source": 12,
											"value": "57"
										},
										{
											"begin": 4843,
											"end": 5143,
											"name": "JUMPDEST",
											"source": 12
										},
										{
											"begin": 4843,
											"end": 5143,
											"name": "PUSH",
											"source": 12,
											"value": "40"
										},
										{
											"begin": 4843,
											"end": 5143,
											"name": "MLOAD",
											"source": 12
										},
										{
											"begin": 4843,
											"end": 5143,
											"name": "DUP1",
											"source": 12
										},
										{
											"begin": 4843,
											"end": 5143,
											"name": "SWAP2",
											"source": 12
										},
										{
											"begin": 4843,
											"end": 5143,
											"name": "SUB",
											"source": 12
										},
										{
											"begin": 4843,
											"end": 5143,
											"name": "SWAP1",
											"source": 12
										},
										{
											"begin": 4843,
											"end": 5143,
											"name": "RETURN",
											"source": 12
										},
										{
											"begin": 998,
											"end": 1051,
											"name": "tag",
											"source": 11,
											"value": "3"
										},
										{
											"begin": 998,
											"end": 1051,
											"name": "JUMPDEST",
											"source": 11
										},
										{
											"begin": 998,
											"end": 1051,
											"name": "CALLVALUE",
											"source": 11
										},
										{
											"begin": 998,
											"end": 1051,
											"name": "DUP1",
											"source": 11
										},
										{
											"begin": 998,
											"end": 1051,
											"name": "ISZERO",
											"source": 11
										},
										{
											"begin": 998,
											"end": 1051,
											"name": "PUSH [tag]",
											"source": 11,
											"value": "59"
										},
										{
											"begin": 998,
											"end": 1051,
											"name": "JUMPI",
											"source": 11
										},
										{
											"begin": 998,
											"end": 1051,
											"name": "PUSH",
											"source": 11,
											"value": "0"
										},
										{
											"begin": 998,
											"end": 1051,
											"name": "DUP1",
											"source": 11
										},
										{
											"begin": 998,
											"end": 1051,
											"name": "REVERT",
											"source": 11
										},
										{
											"begin": 998,
											"end": 1051,
											"name": "tag",
											"source": 11,
											"value": "59"
										},
										{
											"begin": 998,
											"end": 1051,
											"name": "JUMPDEST",
											"source": 11
										},
										{
											"begin": -1,
											"end": -1,
											"name": "POP",
											"source": -1
										},
										{
											"begin": 998,
											"end": 1051,
											"name": "PUSH [tag]",
											"source": 11,
											"value": "60"
										},
										{
											"begin": 998,
											"end": 1051,
											"name": "PUSH [tag]",
											"source": 11,
											"value": "61"
										},
										{
											"begin": 998,
											"end": 1051,
											"name": "CALLDATASIZE",
											"source": 11
										},
										{
											"begin": 998,
											"end": 1051,
											"name": "PUSH",
											"source": 11,
											"value": "4"
										},
										{
											"begin": 998,
											"end": 1051,
											"name": "PUSH [tag]",
											"source": 11,
											"value": "62"
										},
										{
											"begin": 998,
											"end": 1051,
											"name": "JUMP",
											"source": 11,
											"value": "[in]"
										},
										{
											"begin": 998,
											"end": 1051,
											"name": "tag",
											"source": 11,
											"value": "61"
										},
										{
											"begin": 998,
											"end": 1051,
											"name": "JUMPDEST",
											"source": 11
										},
										{
											"begin": 998,
											"end": 1051,
											"name": "PUSH",
											"source": 11,
											"value": "E"
										},
										{
											"begin": 998,
											"end": 1051,
											"name": "PUSH",
											"source": 11,
											"value": "20"
										},
										{
											"begin": 998,
											"end": 1051,
											"name": "MSTORE",
											"source": 11
										},
										{
											"begin": 998,
											"end": 1051,
											"name": "PUSH",
											"source": 11,
											"value": "0"
										},
										{
											"begin": 998,
											"end": 1051,
											"name": "SWAP1",
											"source": 11
										},
										{
											"begin": 998,
											"end": 1051,
											"name": "DUP2",
											"source": 11
										},
										{
											"begin": 998,
											"end": 1051,
											"name": "MSTORE",
											"source": 11
										},
										{
											"begin": 998,
											"end": 1051,
											"name": "PUSH",
											"source": 11,
											"value": "40"
										},
										{
											"begin": 998,
											"end": 1051,
											"name": "SWAP1",
											"source": 11
										},
										{
											"begin": 998,
											"end": 1051,
											"name": "KECCAK256",
											"source": 11
										},
										{
											"begin": 998,
											"end": 1051,
											"name": "SLOAD",
											"source": 11
										},
										{
											"begin": 998,
											"end": 1051,
											"name": "DUP2",
											"source": 11
										},
										{
											"begin": 998,
											"end": 1051,
											"name": "JUMP",
											"source": 11
										},
										{
											"begin": 998,
											"end": 1051,
											"name": "tag",
											"source": 11,
											"value": "60"
										},
										{
											"begin": 998,
											"end": 1051,
											"name": "JUMPDEST",
											"source": 11
										},
										{
											"begin": 998,
											"end": 1051,
											"name": "PUSH",
											"source": 11,
											"value": "40"
										},
										{
											"begin": 998,
											"end": 1051,
											"name": "MLOAD",
											"source": 11
										},
										{
											"begin": 1107,
											"end": 1132,
											"name": "SWAP1",
											"source": 13
										},
										{
											"begin": 1107,
											"end": 1132,
											"name": "DUP2",
											"source": 13
										},
										{
											"begin": 1107,
											"end": 1132,
											"name": "MSTORE",
											"source": 13
										},
										{
											"begin": 1095,
											"end": 1097,
											"name": "PUSH",
											"source": 13,
											"value": "20"
										},
										{
											"begin": 1080,
											"end": 1098,
											"name": "ADD",
											"source": 13
										},
										{
											"begin": 998,
											"end": 1051,
											"name": "PUSH [tag]",
											"source": 11,
											"value": "57"
										},
										{
											"begin": 961,
											"end": 1138,
											"name": "JUMP",
											"source": 13
										},
										{
											"begin": 3975,
											"end": 4088,
											"name": "tag",
											"source": 11,
											"value": "4"
										},
										{
											"begin": 3975,
											"end": 4088,
											"name": "JUMPDEST",
											"source": 11
										},
										{
											"begin": 3975,
											"end": 4088,
											"name": "CALLVALUE",
											"source": 11
										},
										{
											"begin": 3975,
											"end": 4088,
											"name": "DUP1",
											"source": 11
										},
										{
											"begin": 3975,
											"end": 4088,
											"name": "ISZERO",
											"source": 11
										},
										{
											"begin": 3975,
											"end": 4088,
											"name": "PUSH [tag]",
											"source": 11,
											"value": "66"
										},
										{
											"begin": 3975,
											"end": 4088,
											"name": "JUMPI",
											"source": 11
										},
										{
											"begin": 3975,
											"end": 4088,
											"name": "PUSH",
											"source": 11,
											"value": "0"
										},
										{
											"begin": 3975,
											"end": 4088,
											"name": "DUP1",
											"source": 11
										},
										{
											"begin": 3975,
											"end": 4088,
											"name": "REVERT",
											"source": 11
										},
										{
											"begin": 3975,
											"end": 4088,
											"name": "tag",
											"source": 11,
											"value": "66"
										},
										{
											"begin": 3975,
											"end": 4088,
											"name": "JUMPDEST",
											"source": 11
										},
										{
											"begin": -1,
											"end": -1,
											"name": "POP",
											"source": -1
										},
										{
											"begin": 3975,
											"end": 4088,
											"name": "PUSH [tag]",
											"source": 11,
											"value": "67"
										},
										{
											"begin": 3975,
											"end": 4088,
											"name": "PUSH [tag]",
											"source": 11,
											"value": "68"
										},
										{
											"begin": 3975,
											"end": 4088,
											"name": "CALLDATASIZE",
											"source": 11
										},
										{
											"begin": 3975,
											"end": 4088,
											"name": "PUSH",
											"source": 11,
											"value": "4"
										},
										{
											"begin": 3975,
											"end": 4088,
											"name": "PUSH [tag]",
											"source": 11,
											"value": "69"
										},
										{
											"begin": 3975,
											"end": 4088,
											"name": "JUMP",
											"source": 11,
											"value": "[in]"
										},
										{
											"begin": 3975,
											"end": 4088,
											"name": "tag",
											"source": 11,
											"value": "68"
										},
										{
											"begin": 3975,
											"end": 4088,
											"name": "JUMPDEST",
											"source": 11
										},
										{
											"begin": 3975,
											"end": 4088,
											"name": "PUSH [tag]",
											"source": 11,
											"value": "70"
										},
										{
											"begin": 3975,
											"end": 4088,
											"name": "JUMP",
											"source": 11,
											"value": "[in]"
										},
										{
											"begin": 3975,
											"end": 4088,
											"name": "tag",
											"source": 11,
											"value": "67"
										},
										{
											"begin": 3975,
											"end": 4088,
											"name": "JUMPDEST",
											"source": 11
										},
										{
											"begin": 3975,
											"end": 4088,
											"name": "STOP",
											"source": 11
										},
										{
											"begin": 8139,
											"end": 8237,
											"name": "tag",
											"source": 12,
											"value": "5"
										},
										{
											"begin": 8139,
											"end": 8237,
											"name": "JUMPDEST",
											"source": 12
										},
										{
											"begin": 8139,
											"end": 8237,
											"name": "CALLVALUE",
											"source": 12
										},
										{
											"begin": 8139,
											"end": 8237,
											"name": "DUP1",
											"source": 12
										},
										{
											"begin": 8139,
											"end": 8237,
											"name": "ISZERO",
											"source": 12
										},
										{
											"begin": 8139,
											"end": 8237,
											"name": "PUSH [tag]",
											"source": 12,
											"value": "71"
										},
										{
											"begin": 8139,
											"end": 8237,
											"name": "JUMPI",
											"source": 12
										},
										{
											"begin": 8139,
											"end": 8237,
											"name": "PUSH",
											"source": 12,
											"value": "0"
										},
										{
											"begin": 8139,
											"end": 8237,
											"name": "DUP1",
											"source": 12
										},
										{
											"begin": 8139,
											"end": 8237,
											"name": "REVERT",
											"source": 12
										},
										{
											"begin": 8139,
											"end": 8237,
											"name": "tag",
											"source": 12,
											"value": "71"
										},
										{
											"begin": 8139,
											"end": 8237,
											"name": "JUMPDEST",
											"source": 12
										},
										{
											"begin": 8139,
											"end": 8237,
											"name": "POP",
											"source": 12
										},
										{
											"begin": 8139,
											"end": 8237,
											"name": "PUSH [tag]",
											"source": 12,
											"value": "72"
										},
										{
											"begin": 8139,
											"end": 8237,
											"name": "PUSH [tag]",
											"source": 12,
											"value": "73"
										},
										{
											"begin": 8139,
											"end": 8237,
											"name": "JUMP",
											"source": 12,
											"value": "[in]"
										},
										{
											"begin": 8139,
											"end": 8237,
											"name": "tag",
											"source": 12,
											"value": "72"
										},
										{
											"begin": 8139,
											"end": 8237,
											"name": "JUMPDEST",
											"source": 12
										},
										{
											"begin": 8139,
											"end": 8237,
											"name": "PUSH",
											"source": 12,
											"value": "40"
										},
										{
											"begin": 8139,
											"end": 8237,
											"name": "MLOAD",
											"source": 12
										},
										{
											"begin": 8139,
											"end": 8237,
											"name": "PUSH [tag]",
											"source": 12,
											"value": "57"
										},
										{
											"begin": 8139,
											"end": 8237,
											"name": "SWAP2",
											"source": 12
										},
										{
											"begin": 8139,
											"end": 8237,
											"name": "SWAP1",
											"source": 12
										},
										{
											"begin": 8139,
											"end": 8237,
											"name": "PUSH [tag]",
											"source": 12,
											"value": "75"
										},
										{
											"begin": 8139,
											"end": 8237,
											"name": "JUMP",
											"source": 12,
											"value": "[in]"
										},
										{
											"begin": 459,
											"end": 512,
											"name": "tag",
											"source": 11,
											"value": "6"
										},
										{
											"begin": 459,
											"end": 512,
											"name": "JUMPDEST",
											"source": 11
										},
										{
											"begin": 459,
											"end": 512,
											"name": "CALLVALUE",
											"source": 11
										},
										{
											"begin": 459,
											"end": 512,
											"name": "DUP1",
											"source": 11
										},
										{
											"begin": 459,
											"end": 512,
											"name": "ISZERO",
											"source": 11
										},
										{
											"begin": 459,
											"end": 512,
											"name": "PUSH [tag]",
											"source": 11,
											"value": "76"
										},
										{
											"begin": 459,
											"end": 512,
											"name": "JUMPI",
											"source": 11
										},
										{
											"begin": 459,
											"end": 512,
											"name": "PUSH",
											"source": 11,
											"value": "0"
										},
										{
											"begin": 459,
											"end": 512,
											"name": "DUP1",
											"source": 11
										},
										{
											"begin": 459,
											"end": 512,
											"name": "REVERT",
											"source": 11
										},
										{
											"begin": 459,
											"end": 512,
											"name": "tag",
											"source": 11,
											"value": "76"
										},
										{
											"begin": 459,
											"end": 512,
											"name": "JUMPDEST",
											"source": 11
										},
										{
											"begin": 459,
											"end": 512,
											"name": "POP",
											"source": 11
										},
										{
											"begin": 459,
											"end": 512,
											"name": "PUSH [tag]",
											"source": 11,
											"value": "60"
										},
										{
											"begin": 503,
											"end": 512,
											"name": "PUSH",
											"source": 11,
											"value": "8E1BC9BF040000"
										},
										{
											"begin": 459,
											"end": 512,
											"name": "DUP2",
											"source": 11
										},
										{
											"begin": 459,
											"end": 512,
											"name": "JUMP",
											"source": 11
										},
										{
											"begin": 9595,
											"end": 9795,
											"name": "tag",
											"source": 12,
											"value": "7"
										},
										{
											"begin": 9595,
											"end": 9795,
											"name": "JUMPDEST",
											"source": 12
										},
										{
											"begin": 9595,
											"end": 9795,
											"name": "CALLVALUE",
											"source": 12
										},
										{
											"begin": 9595,
											"end": 9795,
											"name": "DUP1",
											"source": 12
										},
										{
											"begin": 9595,
											"end": 9795,
											"name": "ISZERO",
											"source": 12
										},
										{
											"begin": 9595,
											"end": 9795,
											"name": "PUSH [tag]",
											"source": 12,
											"value": "80"
										},
										{
											"begin": 9595,
											"end": 9795,
											"name": "JUMPI",
											"source": 12
										},
										{
											"begin": 9595,
											"end": 9795,
											"name": "PUSH",
											"source": 12,
											"value": "0"
										},
										{
											"begin": 9595,
											"end": 9795,
											"name": "DUP1",
											"source": 12
										},
										{
											"begin": 9595,
											"end": 9795,
											"name": "REVERT",
											"source": 12
										},
										{
											"begin": 9595,
											"end": 9795,
											"name": "tag",
											"source": 12,
											"value": "80"
										},
										{
											"begin": 9595,
											"end": 9795,
											"name": "JUMPDEST",
											"source": 12
										},
										{
											"begin": -1,
											"end": -1,
											"name": "POP",
											"source": -1
										},
										{
											"begin": 9595,
											"end": 9795,
											"name": "PUSH [tag]",
											"source": 12,
											"value": "81"
										},
										{
											"begin": 9595,
											"end": 9795,
											"name": "PUSH [tag]",
											"source": 12,
											"value": "82"
										},
										{
											"begin": 9595,
											"end": 9795,
											"name": "CALLDATASIZE",
											"source": 12
										},
										{
											"begin": 9595,
											"end": 9795,
											"name": "PUSH",
											"source": 12,
											"value": "4"
										},
										{
											"begin": 9595,
											"end": 9795,
											"name": "PUSH [tag]",
											"source": 12,
											"value": "83"
										},
										{
											"begin": 9595,
											"end": 9795,
											"name": "JUMP",
											"source": 12,
											"value": "[in]"
										},
										{
											"begin": 9595,
											"end": 9795,
											"name": "tag",
											"source": 12,
											"value": "82"
										},
										{
											"begin": 9595,
											"end": 9795,
											"name": "JUMPDEST",
											"source": 12
										},
										{
											"begin": 9595,
											"end": 9795,
											"name": "PUSH [tag]",
											"source": 12,
											"value": "84"
										},
										{
											"begin": 9595,
											"end": 9795,
											"name": "JUMP",
											"source": 12,
											"value": "[in]"
										},
										{
											"begin": 9595,
											"end": 9795,
											"name": "tag",
											"source": 12,
											"value": "81"
										},
										{
											"begin": 9595,
											"end": 9795,
											"name": "JUMPDEST",
											"source": 12
										},
										{
											"begin": 9595,
											"end": 9795,
											"name": "PUSH",
											"source": 12,
											"value": "40"
										},
										{
											"begin": 9595,
											"end": 9795,
											"name": "MLOAD",
											"source": 12
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "A0"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SHL",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SUB",
											"source": -1
										},
										{
											"begin": 3545,
											"end": 3577,
											"name": "SWAP1",
											"source": 13
										},
										{
											"begin": 3545,
											"end": 3577,
											"name": "SWAP2",
											"source": 13
										},
										{
											"begin": 3545,
											"end": 3577,
											"name": "AND",
											"source": 13
										},
										{
											"begin": 3527,
											"end": 3578,
											"name": "DUP2",
											"source": 13
										},
										{
											"begin": 3527,
											"end": 3578,
											"name": "MSTORE",
											"source": 13
										},
										{
											"begin": 3515,
											"end": 3517,
											"name": "PUSH",
											"source": 13,
											"value": "20"
										},
										{
											"begin": 3500,
											"end": 3518,
											"name": "ADD",
											"source": 13
										},
										{
											"begin": 9595,
											"end": 9795,
											"name": "PUSH [tag]",
											"source": 12,
											"value": "57"
										},
										{
											"begin": 3381,
											"end": 3584,
											"name": "JUMP",
											"source": 13
										},
										{
											"begin": 9172,
											"end": 9534,
											"name": "tag",
											"source": 12,
											"value": "8"
										},
										{
											"begin": 9172,
											"end": 9534,
											"name": "JUMPDEST",
											"source": 12
										},
										{
											"begin": 9172,
											"end": 9534,
											"name": "CALLVALUE",
											"source": 12
										},
										{
											"begin": 9172,
											"end": 9534,
											"name": "DUP1",
											"source": 12
										},
										{
											"begin": 9172,
											"end": 9534,
											"name": "ISZERO",
											"source": 12
										},
										{
											"begin": 9172,
											"end": 9534,
											"name": "PUSH [tag]",
											"source": 12,
											"value": "87"
										},
										{
											"begin": 9172,
											"end": 9534,
											"name": "JUMPI",
											"source": 12
										},
										{
											"begin": 9172,
											"end": 9534,
											"name": "PUSH",
											"source": 12,
											"value": "0"
										},
										{
											"begin": 9172,
											"end": 9534,
											"name": "DUP1",
											"source": 12
										},
										{
											"begin": 9172,
											"end": 9534,
											"name": "REVERT",
											"source": 12
										},
										{
											"begin": 9172,
											"end": 9534,
											"name": "tag",
											"source": 12,
											"value": "87"
										},
										{
											"begin": 9172,
											"end": 9534,
											"name": "JUMPDEST",
											"source": 12
										},
										{
											"begin": -1,
											"end": -1,
											"name": "POP",
											"source": -1
										},
										{
											"begin": 9172,
											"end": 9534,
											"name": "PUSH [tag]",
											"source": 12,
											"value": "67"
										},
										{
											"begin": 9172,
											"end": 9534,
											"name": "PUSH [tag]",
											"source": 12,
											"value": "89"
										},
										{
											"begin": 9172,
											"end": 9534,
											"name": "CALLDATASIZE",
											"source": 12
										},
										{
											"begin": 9172,
											"end": 9534,
											"name": "PUSH",
											"source": 12,
											"value": "4"
										},
										{
											"begin": 9172,
											"end": 9534,
											"name": "PUSH [tag]",
											"source": 12,
											"value": "90"
										},
										{
											"begin": 9172,
											"end": 9534,
											"name": "JUMP",
											"source": 12,
											"value": "[in]"
										},
										{
											"begin": 9172,
											"end": 9534,
											"name": "tag",
											"source": 12,
											"value": "89"
										},
										{
											"begin": 9172,
											"end": 9534,
											"name": "JUMPDEST",
											"source": 12
										},
										{
											"begin": 9172,
											"end": 9534,
											"name": "PUSH [tag]",
											"source": 12,
											"value": "91"
										},
										{
											"begin": 9172,
											"end": 9534,
											"name": "JUMP",
											"source": 12,
											"value": "[in]"
										},
										{
											"begin": 4114,
											"end": 4411,
											"name": "tag",
											"source": 12,
											"value": "9"
										},
										{
											"begin": 4114,
											"end": 4411,
											"name": "JUMPDEST",
											"source": 12
										},
										{
											"begin": 4114,
											"end": 4411,
											"name": "CALLVALUE",
											"source": 12
										},
										{
											"begin": 4114,
											"end": 4411,
											"name": "DUP1",
											"source": 12
										},
										{
											"begin": 4114,
											"end": 4411,
											"name": "ISZERO",
											"source": 12
										},
										{
											"begin": 4114,
											"end": 4411,
											"name": "PUSH [tag]",
											"source": 12,
											"value": "92"
										},
										{
											"begin": 4114,
											"end": 4411,
											"name": "JUMPI",
											"source": 12
										},
										{
											"begin": 4114,
											"end": 4411,
											"name": "PUSH",
											"source": 12,
											"value": "0"
										},
										{
											"begin": 4114,
											"end": 4411,
											"name": "DUP1",
											"source": 12
										},
										{
											"begin": 4114,
											"end": 4411,
											"name": "REVERT",
											"source": 12
										},
										{
											"begin": 4114,
											"end": 4411,
											"name": "tag",
											"source": 12,
											"value": "92"
										},
										{
											"begin": 4114,
											"end": 4411,
											"name": "JUMPDEST",
											"source": 12
										},
										{
											"begin": -1,
											"end": -1,
											"name": "POP",
											"source": -1
										},
										{
											"begin": 4364,
											"end": 4376,
											"name": "PUSH",
											"source": 12,
											"value": "1"
										},
										{
											"begin": 4364,
											"end": 4376,
											"name": "SLOAD",
											"source": 12
										},
										{
											"begin": 4158,
											"end": 4165,
											"name": "PUSH",
											"source": 12,
											"value": "0"
										},
										{
											"begin": 4348,
											"end": 4361,
											"name": "SLOAD",
											"source": 12
										},
										{
											"begin": 4348,
											"end": 4376,
											"name": "SUB",
											"source": 12
										},
										{
											"begin": 4114,
											"end": 4411,
											"name": "PUSH [tag]",
											"source": 12,
											"value": "60"
										},
										{
											"begin": 4114,
											"end": 4411,
											"name": "JUMP",
											"source": 12
										},
										{
											"begin": 942,
											"end": 992,
											"name": "tag",
											"source": 11,
											"value": "10"
										},
										{
											"begin": 942,
											"end": 992,
											"name": "JUMPDEST",
											"source": 11
										},
										{
											"begin": 942,
											"end": 992,
											"name": "CALLVALUE",
											"source": 11
										},
										{
											"begin": 942,
											"end": 992,
											"name": "DUP1",
											"source": 11
										},
										{
											"begin": 942,
											"end": 992,
											"name": "ISZERO",
											"source": 11
										},
										{
											"begin": 942,
											"end": 992,
											"name": "PUSH [tag]",
											"source": 11,
											"value": "96"
										},
										{
											"begin": 942,
											"end": 992,
											"name": "JUMPI",
											"source": 11
										},
										{
											"begin": 942,
											"end": 992,
											"name": "PUSH",
											"source": 11,
											"value": "0"
										},
										{
											"begin": 942,
											"end": 992,
											"name": "DUP1",
											"source": 11
										},
										{
											"begin": 942,
											"end": 992,
											"name": "REVERT",
											"source": 11
										},
										{
											"begin": 942,
											"end": 992,
											"name": "tag",
											"source": 11,
											"value": "96"
										},
										{
											"begin": 942,
											"end": 992,
											"name": "JUMPDEST",
											"source": 11
										},
										{
											"begin": -1,
											"end": -1,
											"name": "POP",
											"source": -1
										},
										{
											"begin": 942,
											"end": 992,
											"name": "PUSH [tag]",
											"source": 11,
											"value": "60"
										},
										{
											"begin": 942,
											"end": 992,
											"name": "PUSH [tag]",
											"source": 11,
											"value": "98"
										},
										{
											"begin": 942,
											"end": 992,
											"name": "CALLDATASIZE",
											"source": 11
										},
										{
											"begin": 942,
											"end": 992,
											"name": "PUSH",
											"source": 11,
											"value": "4"
										},
										{
											"begin": 942,
											"end": 992,
											"name": "PUSH [tag]",
											"source": 11,
											"value": "62"
										},
										{
											"begin": 942,
											"end": 992,
											"name": "JUMP",
											"source": 11,
											"value": "[in]"
										},
										{
											"begin": 942,
											"end": 992,
											"name": "tag",
											"source": 11,
											"value": "98"
										},
										{
											"begin": 942,
											"end": 992,
											"name": "JUMPDEST",
											"source": 11
										},
										{
											"begin": 942,
											"end": 992,
											"name": "PUSH",
											"source": 11,
											"value": "D"
										},
										{
											"begin": 942,
											"end": 992,
											"name": "PUSH",
											"source": 11,
											"value": "20"
										},
										{
											"begin": 942,
											"end": 992,
											"name": "MSTORE",
											"source": 11
										},
										{
											"begin": 942,
											"end": 992,
											"name": "PUSH",
											"source": 11,
											"value": "0"
										},
										{
											"begin": 942,
											"end": 992,
											"name": "SWAP1",
											"source": 11
										},
										{
											"begin": 942,
											"end": 992,
											"name": "DUP2",
											"source": 11
										},
										{
											"begin": 942,
											"end": 992,
											"name": "MSTORE",
											"source": 11
										},
										{
											"begin": 942,
											"end": 992,
											"name": "PUSH",
											"source": 11,
											"value": "40"
										},
										{
											"begin": 942,
											"end": 992,
											"name": "SWAP1",
											"source": 11
										},
										{
											"begin": 942,
											"end": 992,
											"name": "KECCAK256",
											"source": 11
										},
										{
											"begin": 942,
											"end": 992,
											"name": "SLOAD",
											"source": 11
										},
										{
											"begin": 942,
											"end": 992,
											"name": "DUP2",
											"source": 11
										},
										{
											"begin": 942,
											"end": 992,
											"name": "JUMP",
											"source": 11
										},
										{
											"begin": 10426,
											"end": 10590,
											"name": "tag",
											"source": 12,
											"value": "11"
										},
										{
											"begin": 10426,
											"end": 10590,
											"name": "JUMPDEST",
											"source": 12
										},
										{
											"begin": 10426,
											"end": 10590,
											"name": "CALLVALUE",
											"source": 12
										},
										{
											"begin": 10426,
											"end": 10590,
											"name": "DUP1",
											"source": 12
										},
										{
											"begin": 10426,
											"end": 10590,
											"name": "ISZERO",
											"source": 12
										},
										{
											"begin": 10426,
											"end": 10590,
											"name": "PUSH [tag]",
											"source": 12,
											"value": "101"
										},
										{
											"begin": 10426,
											"end": 10590,
											"name": "JUMPI",
											"source": 12
										},
										{
											"begin": 10426,
											"end": 10590,
											"name": "PUSH",
											"source": 12,
											"value": "0"
										},
										{
											"begin": 10426,
											"end": 10590,
											"name": "DUP1",
											"source": 12
										},
										{
											"begin": 10426,
											"end": 10590,
											"name": "REVERT",
											"source": 12
										},
										{
											"begin": 10426,
											"end": 10590,
											"name": "tag",
											"source": 12,
											"value": "101"
										},
										{
											"begin": 10426,
											"end": 10590,
											"name": "JUMPDEST",
											"source": 12
										},
										{
											"begin": -1,
											"end": -1,
											"name": "POP",
											"source": -1
										},
										{
											"begin": 10426,
											"end": 10590,
											"name": "PUSH [tag]",
											"source": 12,
											"value": "67"
										},
										{
											"begin": 10426,
											"end": 10590,
											"name": "PUSH [tag]",
											"source": 12,
											"value": "103"
										},
										{
											"begin": 10426,
											"end": 10590,
											"name": "CALLDATASIZE",
											"source": 12
										},
										{
											"begin": 10426,
											"end": 10590,
											"name": "PUSH",
											"source": 12,
											"value": "4"
										},
										{
											"begin": 10426,
											"end": 10590,
											"name": "PUSH [tag]",
											"source": 12,
											"value": "104"
										},
										{
											"begin": 10426,
											"end": 10590,
											"name": "JUMP",
											"source": 12,
											"value": "[in]"
										},
										{
											"begin": 10426,
											"end": 10590,
											"name": "tag",
											"source": 12,
											"value": "103"
										},
										{
											"begin": 10426,
											"end": 10590,
											"name": "JUMPDEST",
											"source": 12
										},
										{
											"begin": 10426,
											"end": 10590,
											"name": "PUSH [tag]",
											"source": 12,
											"value": "105"
										},
										{
											"begin": 10426,
											"end": 10590,
											"name": "JUMP",
											"source": 12,
											"value": "[in]"
										},
										{
											"begin": 1816,
											"end": 2674,
											"name": "tag",
											"source": 11,
											"value": "12"
										},
										{
											"begin": 1816,
											"end": 2674,
											"name": "JUMPDEST",
											"source": 11
										},
										{
											"begin": 1816,
											"end": 2674,
											"name": "PUSH [tag]",
											"source": 11,
											"value": "67"
										},
										{
											"begin": 1816,
											"end": 2674,
											"name": "PUSH [tag]",
											"source": 11,
											"value": "107"
										},
										{
											"begin": 1816,
											"end": 2674,
											"name": "CALLDATASIZE",
											"source": 11
										},
										{
											"begin": 1816,
											"end": 2674,
											"name": "PUSH",
											"source": 11,
											"value": "4"
										},
										{
											"begin": 1816,
											"end": 2674,
											"name": "PUSH [tag]",
											"source": 11,
											"value": "108"
										},
										{
											"begin": 1816,
											"end": 2674,
											"name": "JUMP",
											"source": 11,
											"value": "[in]"
										},
										{
											"begin": 1816,
											"end": 2674,
											"name": "tag",
											"source": 11,
											"value": "107"
										},
										{
											"begin": 1816,
											"end": 2674,
											"name": "JUMPDEST",
											"source": 11
										},
										{
											"begin": 1816,
											"end": 2674,
											"name": "PUSH [tag]",
											"source": 11,
											"value": "109"
										},
										{
											"begin": 1816,
											"end": 2674,
											"name": "JUMP",
											"source": 11,
											"value": "[in]"
										},
										{
											"begin": 309,
											"end": 350,
											"name": "tag",
											"source": 11,
											"value": "13"
										},
										{
											"begin": 309,
											"end": 350,
											"name": "JUMPDEST",
											"source": 11
										},
										{
											"begin": 309,
											"end": 350,
											"name": "CALLVALUE",
											"source": 11
										},
										{
											"begin": 309,
											"end": 350,
											"name": "DUP1",
											"source": 11
										},
										{
											"begin": 309,
											"end": 350,
											"name": "ISZERO",
											"source": 11
										},
										{
											"begin": 309,
											"end": 350,
											"name": "PUSH [tag]",
											"source": 11,
											"value": "110"
										},
										{
											"begin": 309,
											"end": 350,
											"name": "JUMPI",
											"source": 11
										},
										{
											"begin": 309,
											"end": 350,
											"name": "PUSH",
											"source": 11,
											"value": "0"
										},
										{
											"begin": 309,
											"end": 350,
											"name": "DUP1",
											"source": 11
										},
										{
											"begin": 309,
											"end": 350,
											"name": "REVERT",
											"source": 11
										},
										{
											"begin": 309,
											"end": 350,
											"name": "tag",
											"source": 11,
											"value": "110"
										},
										{
											"begin": 309,
											"end": 350,
											"name": "JUMPDEST",
											"source": 11
										},
										{
											"begin": 309,
											"end": 350,
											"name": "POP",
											"source": 11
										},
										{
											"begin": 309,
											"end": 350,
											"name": "PUSH [tag]",
											"source": 11,
											"value": "60"
										},
										{
											"begin": 346,
											"end": 350,
											"name": "PUSH",
											"source": 11,
											"value": "8AE"
										},
										{
											"begin": 309,
											"end": 350,
											"name": "DUP2",
											"source": 11
										},
										{
											"begin": 309,
											"end": 350,
											"name": "JUMP",
											"source": 11
										},
										{
											"begin": 798,
											"end": 820,
											"name": "tag",
											"source": 11,
											"value": "14"
										},
										{
											"begin": 798,
											"end": 820,
											"name": "JUMPDEST",
											"source": 11
										},
										{
											"begin": 798,
											"end": 820,
											"name": "CALLVALUE",
											"source": 11
										},
										{
											"begin": 798,
											"end": 820,
											"name": "DUP1",
											"source": 11
										},
										{
											"begin": 798,
											"end": 820,
											"name": "ISZERO",
											"source": 11
										},
										{
											"begin": 798,
											"end": 820,
											"name": "PUSH [tag]",
											"source": 11,
											"value": "114"
										},
										{
											"begin": 798,
											"end": 820,
											"name": "JUMPI",
											"source": 11
										},
										{
											"begin": 798,
											"end": 820,
											"name": "PUSH",
											"source": 11,
											"value": "0"
										},
										{
											"begin": 798,
											"end": 820,
											"name": "DUP1",
											"source": 11
										},
										{
											"begin": 798,
											"end": 820,
											"name": "REVERT",
											"source": 11
										},
										{
											"begin": 798,
											"end": 820,
											"name": "tag",
											"source": 11,
											"value": "114"
										},
										{
											"begin": 798,
											"end": 820,
											"name": "JUMPDEST",
											"source": 11
										},
										{
											"begin": -1,
											"end": -1,
											"name": "POP",
											"source": -1
										},
										{
											"begin": 798,
											"end": 820,
											"name": "PUSH",
											"source": 11,
											"value": "B"
										},
										{
											"begin": 798,
											"end": 820,
											"name": "SLOAD",
											"source": 11
										},
										{
											"begin": 798,
											"end": 820,
											"name": "PUSH [tag]",
											"source": 11,
											"value": "53"
										},
										{
											"begin": 798,
											"end": 820,
											"name": "SWAP1",
											"source": 11
										},
										{
											"begin": 798,
											"end": 820,
											"name": "PUSH",
											"source": 11,
											"value": "100"
										},
										{
											"begin": 798,
											"end": 820,
											"name": "SWAP1",
											"source": 11
										},
										{
											"begin": 798,
											"end": 820,
											"name": "DIV",
											"source": 11
										},
										{
											"begin": 798,
											"end": 820,
											"name": "PUSH",
											"source": 11,
											"value": "FF"
										},
										{
											"begin": 798,
											"end": 820,
											"name": "AND",
											"source": 11
										},
										{
											"begin": 798,
											"end": 820,
											"name": "DUP2",
											"source": 11
										},
										{
											"begin": 798,
											"end": 820,
											"name": "JUMP",
											"source": 11
										},
										{
											"begin": 4806,
											"end": 5105,
											"name": "tag",
											"source": 11,
											"value": "15"
										},
										{
											"begin": 4806,
											"end": 5105,
											"name": "JUMPDEST",
											"source": 11
										},
										{
											"begin": 4806,
											"end": 5105,
											"name": "CALLVALUE",
											"source": 11
										},
										{
											"begin": 4806,
											"end": 5105,
											"name": "DUP1",
											"source": 11
										},
										{
											"begin": 4806,
											"end": 5105,
											"name": "ISZERO",
											"source": 11
										},
										{
											"begin": 4806,
											"end": 5105,
											"name": "PUSH [tag]",
											"source": 11,
											"value": "118"
										},
										{
											"begin": 4806,
											"end": 5105,
											"name": "JUMPI",
											"source": 11
										},
										{
											"begin": 4806,
											"end": 5105,
											"name": "PUSH",
											"source": 11,
											"value": "0"
										},
										{
											"begin": 4806,
											"end": 5105,
											"name": "DUP1",
											"source": 11
										},
										{
											"begin": 4806,
											"end": 5105,
											"name": "REVERT",
											"source": 11
										},
										{
											"begin": 4806,
											"end": 5105,
											"name": "tag",
											"source": 11,
											"value": "118"
										},
										{
											"begin": 4806,
											"end": 5105,
											"name": "JUMPDEST",
											"source": 11
										},
										{
											"begin": 4806,
											"end": 5105,
											"name": "POP",
											"source": 11
										},
										{
											"begin": 4806,
											"end": 5105,
											"name": "PUSH [tag]",
											"source": 11,
											"value": "67"
										},
										{
											"begin": 4806,
											"end": 5105,
											"name": "PUSH [tag]",
											"source": 11,
											"value": "120"
										},
										{
											"begin": 4806,
											"end": 5105,
											"name": "JUMP",
											"source": 11,
											"value": "[in]"
										},
										{
											"begin": 10656,
											"end": 10835,
											"name": "tag",
											"source": 12,
											"value": "16"
										},
										{
											"begin": 10656,
											"end": 10835,
											"name": "JUMPDEST",
											"source": 12
										},
										{
											"begin": 10656,
											"end": 10835,
											"name": "CALLVALUE",
											"source": 12
										},
										{
											"begin": 10656,
											"end": 10835,
											"name": "DUP1",
											"source": 12
										},
										{
											"begin": 10656,
											"end": 10835,
											"name": "ISZERO",
											"source": 12
										},
										{
											"begin": 10656,
											"end": 10835,
											"name": "PUSH [tag]",
											"source": 12,
											"value": "121"
										},
										{
											"begin": 10656,
											"end": 10835,
											"name": "JUMPI",
											"source": 12
										},
										{
											"begin": 10656,
											"end": 10835,
											"name": "PUSH",
											"source": 12,
											"value": "0"
										},
										{
											"begin": 10656,
											"end": 10835,
											"name": "DUP1",
											"source": 12
										},
										{
											"begin": 10656,
											"end": 10835,
											"name": "REVERT",
											"source": 12
										},
										{
											"begin": 10656,
											"end": 10835,
											"name": "tag",
											"source": 12,
											"value": "121"
										},
										{
											"begin": 10656,
											"end": 10835,
											"name": "JUMPDEST",
											"source": 12
										},
										{
											"begin": -1,
											"end": -1,
											"name": "POP",
											"source": -1
										},
										{
											"begin": 10656,
											"end": 10835,
											"name": "PUSH [tag]",
											"source": 12,
											"value": "67"
										},
										{
											"begin": 10656,
											"end": 10835,
											"name": "PUSH [tag]",
											"source": 12,
											"value": "123"
										},
										{
											"begin": 10656,
											"end": 10835,
											"name": "CALLDATASIZE",
											"source": 12
										},
										{
											"begin": 10656,
											"end": 10835,
											"name": "PUSH",
											"source": 12,
											"value": "4"
										},
										{
											"begin": 10656,
											"end": 10835,
											"name": "PUSH [tag]",
											"source": 12,
											"value": "104"
										},
										{
											"begin": 10656,
											"end": 10835,
											"name": "JUMP",
											"source": 12,
											"value": "[in]"
										},
										{
											"begin": 10656,
											"end": 10835,
											"name": "tag",
											"source": 12,
											"value": "123"
										},
										{
											"begin": 10656,
											"end": 10835,
											"name": "JUMPDEST",
											"source": 12
										},
										{
											"begin": 10656,
											"end": 10835,
											"name": "PUSH [tag]",
											"source": 12,
											"value": "124"
										},
										{
											"begin": 10656,
											"end": 10835,
											"name": "JUMP",
											"source": 12,
											"value": "[in]"
										},
										{
											"begin": 4348,
											"end": 4438,
											"name": "tag",
											"source": 11,
											"value": "17"
										},
										{
											"begin": 4348,
											"end": 4438,
											"name": "JUMPDEST",
											"source": 11
										},
										{
											"begin": 4348,
											"end": 4438,
											"name": "CALLVALUE",
											"source": 11
										},
										{
											"begin": 4348,
											"end": 4438,
											"name": "DUP1",
											"source": 11
										},
										{
											"begin": 4348,
											"end": 4438,
											"name": "ISZERO",
											"source": 11
										},
										{
											"begin": 4348,
											"end": 4438,
											"name": "PUSH [tag]",
											"source": 11,
											"value": "125"
										},
										{
											"begin": 4348,
											"end": 4438,
											"name": "JUMPI",
											"source": 11
										},
										{
											"begin": 4348,
											"end": 4438,
											"name": "PUSH",
											"source": 11,
											"value": "0"
										},
										{
											"begin": 4348,
											"end": 4438,
											"name": "DUP1",
											"source": 11
										},
										{
											"begin": 4348,
											"end": 4438,
											"name": "REVERT",
											"source": 11
										},
										{
											"begin": 4348,
											"end": 4438,
											"name": "tag",
											"source": 11,
											"value": "125"
										},
										{
											"begin": 4348,
											"end": 4438,
											"name": "JUMPDEST",
											"source": 11
										},
										{
											"begin": -1,
											"end": -1,
											"name": "POP",
											"source": -1
										},
										{
											"begin": 4421,
											"end": 4431,
											"name": "PUSH",
											"source": 11,
											"value": "C"
										},
										{
											"begin": 4421,
											"end": 4431,
											"name": "SLOAD",
											"source": 11
										},
										{
											"begin": 4348,
											"end": 4438,
											"name": "PUSH [tag]",
											"source": 11,
											"value": "60"
										},
										{
											"begin": 4348,
											"end": 4438,
											"name": "JUMP",
											"source": 11
										},
										{
											"begin": 615,
											"end": 650,
											"name": "tag",
											"source": 11,
											"value": "18"
										},
										{
											"begin": 615,
											"end": 650,
											"name": "JUMPDEST",
											"source": 11
										},
										{
											"begin": 615,
											"end": 650,
											"name": "CALLVALUE",
											"source": 11
										},
										{
											"begin": 615,
											"end": 650,
											"name": "DUP1",
											"source": 11
										},
										{
											"begin": 615,
											"end": 650,
											"name": "ISZERO",
											"source": 11
										},
										{
											"begin": 615,
											"end": 650,
											"name": "PUSH [tag]",
											"source": 11,
											"value": "130"
										},
										{
											"begin": 615,
											"end": 650,
											"name": "JUMPI",
											"source": 11
										},
										{
											"begin": 615,
											"end": 650,
											"name": "PUSH",
											"source": 11,
											"value": "0"
										},
										{
											"begin": 615,
											"end": 650,
											"name": "DUP1",
											"source": 11
										},
										{
											"begin": 615,
											"end": 650,
											"name": "REVERT",
											"source": 11
										},
										{
											"begin": 615,
											"end": 650,
											"name": "tag",
											"source": 11,
											"value": "130"
										},
										{
											"begin": 615,
											"end": 650,
											"name": "JUMPDEST",
											"source": 11
										},
										{
											"begin": 615,
											"end": 650,
											"name": "POP",
											"source": 11
										},
										{
											"begin": 615,
											"end": 650,
											"name": "PUSH [tag]",
											"source": 11,
											"value": "72"
										},
										{
											"begin": 615,
											"end": 650,
											"name": "PUSH [tag]",
											"source": 11,
											"value": "132"
										},
										{
											"begin": 615,
											"end": 650,
											"name": "JUMP",
											"source": 11,
											"value": "[in]"
										},
										{
											"begin": 770,
											"end": 792,
											"name": "tag",
											"source": 11,
											"value": "19"
										},
										{
											"begin": 770,
											"end": 792,
											"name": "JUMPDEST",
											"source": 11
										},
										{
											"begin": 770,
											"end": 792,
											"name": "CALLVALUE",
											"source": 11
										},
										{
											"begin": 770,
											"end": 792,
											"name": "DUP1",
											"source": 11
										},
										{
											"begin": 770,
											"end": 792,
											"name": "ISZERO",
											"source": 11
										},
										{
											"begin": 770,
											"end": 792,
											"name": "PUSH [tag]",
											"source": 11,
											"value": "134"
										},
										{
											"begin": 770,
											"end": 792,
											"name": "JUMPI",
											"source": 11
										},
										{
											"begin": 770,
											"end": 792,
											"name": "PUSH",
											"source": 11,
											"value": "0"
										},
										{
											"begin": 770,
											"end": 792,
											"name": "DUP1",
											"source": 11
										},
										{
											"begin": 770,
											"end": 792,
											"name": "REVERT",
											"source": 11
										},
										{
											"begin": 770,
											"end": 792,
											"name": "tag",
											"source": 11,
											"value": "134"
										},
										{
											"begin": 770,
											"end": 792,
											"name": "JUMPDEST",
											"source": 11
										},
										{
											"begin": -1,
											"end": -1,
											"name": "POP",
											"source": -1
										},
										{
											"begin": 770,
											"end": 792,
											"name": "PUSH",
											"source": 11,
											"value": "B"
										},
										{
											"begin": 770,
											"end": 792,
											"name": "SLOAD",
											"source": 11
										},
										{
											"begin": 770,
											"end": 792,
											"name": "PUSH [tag]",
											"source": 11,
											"value": "53"
										},
										{
											"begin": 770,
											"end": 792,
											"name": "SWAP1",
											"source": 11
										},
										{
											"begin": 770,
											"end": 792,
											"name": "PUSH",
											"source": 11,
											"value": "FF"
										},
										{
											"begin": 770,
											"end": 792,
											"name": "AND",
											"source": 11
										},
										{
											"begin": 770,
											"end": 792,
											"name": "DUP2",
											"source": 11
										},
										{
											"begin": 770,
											"end": 792,
											"name": "JUMP",
											"source": 11
										},
										{
											"begin": 4717,
											"end": 4800,
											"name": "tag",
											"source": 11,
											"value": "20"
										},
										{
											"begin": 4717,
											"end": 4800,
											"name": "JUMPDEST",
											"source": 11
										},
										{
											"begin": 4717,
											"end": 4800,
											"name": "CALLVALUE",
											"source": 11
										},
										{
											"begin": 4717,
											"end": 4800,
											"name": "DUP1",
											"source": 11
										},
										{
											"begin": 4717,
											"end": 4800,
											"name": "ISZERO",
											"source": 11
										},
										{
											"begin": 4717,
											"end": 4800,
											"name": "PUSH [tag]",
											"source": 11,
											"value": "138"
										},
										{
											"begin": 4717,
											"end": 4800,
											"name": "JUMPI",
											"source": 11
										},
										{
											"begin": 4717,
											"end": 4800,
											"name": "PUSH",
											"source": 11,
											"value": "0"
										},
										{
											"begin": 4717,
											"end": 4800,
											"name": "DUP1",
											"source": 11
										},
										{
											"begin": 4717,
											"end": 4800,
											"name": "REVERT",
											"source": 11
										},
										{
											"begin": 4717,
											"end": 4800,
											"name": "tag",
											"source": 11,
											"value": "138"
										},
										{
											"begin": 4717,
											"end": 4800,
											"name": "JUMPDEST",
											"source": 11
										},
										{
											"begin": 4717,
											"end": 4800,
											"name": "POP",
											"source": 11
										},
										{
											"begin": 4717,
											"end": 4800,
											"name": "PUSH [tag]",
											"source": 11,
											"value": "67"
										},
										{
											"begin": 4717,
											"end": 4800,
											"name": "PUSH [tag]",
											"source": 11,
											"value": "140"
										},
										{
											"begin": 4717,
											"end": 4800,
											"name": "JUMP",
											"source": 11,
											"value": "[in]"
										},
										{
											"begin": 7955,
											"end": 8077,
											"name": "tag",
											"source": 12,
											"value": "21"
										},
										{
											"begin": 7955,
											"end": 8077,
											"name": "JUMPDEST",
											"source": 12
										},
										{
											"begin": 7955,
											"end": 8077,
											"name": "CALLVALUE",
											"source": 12
										},
										{
											"begin": 7955,
											"end": 8077,
											"name": "DUP1",
											"source": 12
										},
										{
											"begin": 7955,
											"end": 8077,
											"name": "ISZERO",
											"source": 12
										},
										{
											"begin": 7955,
											"end": 8077,
											"name": "PUSH [tag]",
											"source": 12,
											"value": "141"
										},
										{
											"begin": 7955,
											"end": 8077,
											"name": "JUMPI",
											"source": 12
										},
										{
											"begin": 7955,
											"end": 8077,
											"name": "PUSH",
											"source": 12,
											"value": "0"
										},
										{
											"begin": 7955,
											"end": 8077,
											"name": "DUP1",
											"source": 12
										},
										{
											"begin": 7955,
											"end": 8077,
											"name": "REVERT",
											"source": 12
										},
										{
											"begin": 7955,
											"end": 8077,
											"name": "tag",
											"source": 12,
											"value": "141"
										},
										{
											"begin": 7955,
											"end": 8077,
											"name": "JUMPDEST",
											"source": 12
										},
										{
											"begin": -1,
											"end": -1,
											"name": "POP",
											"source": -1
										},
										{
											"begin": 7955,
											"end": 8077,
											"name": "PUSH [tag]",
											"source": 12,
											"value": "81"
										},
										{
											"begin": 7955,
											"end": 8077,
											"name": "PUSH [tag]",
											"source": 12,
											"value": "143"
										},
										{
											"begin": 7955,
											"end": 8077,
											"name": "CALLDATASIZE",
											"source": 12
										},
										{
											"begin": 7955,
											"end": 8077,
											"name": "PUSH",
											"source": 12,
											"value": "4"
										},
										{
											"begin": 7955,
											"end": 8077,
											"name": "PUSH [tag]",
											"source": 12,
											"value": "83"
										},
										{
											"begin": 7955,
											"end": 8077,
											"name": "JUMP",
											"source": 12,
											"value": "[in]"
										},
										{
											"begin": 7955,
											"end": 8077,
											"name": "tag",
											"source": 12,
											"value": "143"
										},
										{
											"begin": 7955,
											"end": 8077,
											"name": "JUMPDEST",
											"source": 12
										},
										{
											"begin": 7955,
											"end": 8077,
											"name": "PUSH [tag]",
											"source": 12,
											"value": "144"
										},
										{
											"begin": 7955,
											"end": 8077,
											"name": "JUMP",
											"source": 12,
											"value": "[in]"
										},
										{
											"begin": 356,
											"end": 400,
											"name": "tag",
											"source": 11,
											"value": "22"
										},
										{
											"begin": 356,
											"end": 400,
											"name": "JUMPDEST",
											"source": 11
										},
										{
											"begin": 356,
											"end": 400,
											"name": "CALLVALUE",
											"source": 11
										},
										{
											"begin": 356,
											"end": 400,
											"name": "DUP1",
											"source": 11
										},
										{
											"begin": 356,
											"end": 400,
											"name": "ISZERO",
											"source": 11
										},
										{
											"begin": 356,
											"end": 400,
											"name": "PUSH [tag]",
											"source": 11,
											"value": "146"
										},
										{
											"begin": 356,
											"end": 400,
											"name": "JUMPI",
											"source": 11
										},
										{
											"begin": 356,
											"end": 400,
											"name": "PUSH",
											"source": 11,
											"value": "0"
										},
										{
											"begin": 356,
											"end": 400,
											"name": "DUP1",
											"source": 11
										},
										{
											"begin": 356,
											"end": 400,
											"name": "REVERT",
											"source": 11
										},
										{
											"begin": 356,
											"end": 400,
											"name": "tag",
											"source": 11,
											"value": "146"
										},
										{
											"begin": 356,
											"end": 400,
											"name": "JUMPDEST",
											"source": 11
										},
										{
											"begin": 356,
											"end": 400,
											"name": "POP",
											"source": 11
										},
										{
											"begin": 356,
											"end": 400,
											"name": "PUSH [tag]",
											"source": 11,
											"value": "60"
										},
										{
											"begin": 398,
											"end": 400,
											"name": "PUSH",
											"source": 11,
											"value": "A"
										},
										{
											"begin": 356,
											"end": 400,
											"name": "DUP2",
											"source": 11
										},
										{
											"begin": 356,
											"end": 400,
											"name": "JUMP",
											"source": 11
										},
										{
											"begin": 5202,
											"end": 5405,
											"name": "tag",
											"source": 12,
											"value": "23"
										},
										{
											"begin": 5202,
											"end": 5405,
											"name": "JUMPDEST",
											"source": 12
										},
										{
											"begin": 5202,
											"end": 5405,
											"name": "CALLVALUE",
											"source": 12
										},
										{
											"begin": 5202,
											"end": 5405,
											"name": "DUP1",
											"source": 12
										},
										{
											"begin": 5202,
											"end": 5405,
											"name": "ISZERO",
											"source": 12
										},
										{
											"begin": 5202,
											"end": 5405,
											"name": "PUSH [tag]",
											"source": 12,
											"value": "150"
										},
										{
											"begin": 5202,
											"end": 5405,
											"name": "JUMPI",
											"source": 12
										},
										{
											"begin": 5202,
											"end": 5405,
											"name": "PUSH",
											"source": 12,
											"value": "0"
										},
										{
											"begin": 5202,
											"end": 5405,
											"name": "DUP1",
											"source": 12
										},
										{
											"begin": 5202,
											"end": 5405,
											"name": "REVERT",
											"source": 12
										},
										{
											"begin": 5202,
											"end": 5405,
											"name": "tag",
											"source": 12,
											"value": "150"
										},
										{
											"begin": 5202,
											"end": 5405,
											"name": "JUMPDEST",
											"source": 12
										},
										{
											"begin": -1,
											"end": -1,
											"name": "POP",
											"source": -1
										},
										{
											"begin": 5202,
											"end": 5405,
											"name": "PUSH [tag]",
											"source": 12,
											"value": "60"
										},
										{
											"begin": 5202,
											"end": 5405,
											"name": "PUSH [tag]",
											"source": 12,
											"value": "152"
										},
										{
											"begin": 5202,
											"end": 5405,
											"name": "CALLDATASIZE",
											"source": 12
										},
										{
											"begin": 5202,
											"end": 5405,
											"name": "PUSH",
											"source": 12,
											"value": "4"
										},
										{
											"begin": 5202,
											"end": 5405,
											"name": "PUSH [tag]",
											"source": 12,
											"value": "62"
										},
										{
											"begin": 5202,
											"end": 5405,
											"name": "JUMP",
											"source": 12,
											"value": "[in]"
										},
										{
											"begin": 5202,
											"end": 5405,
											"name": "tag",
											"source": 12,
											"value": "152"
										},
										{
											"begin": 5202,
											"end": 5405,
											"name": "JUMPDEST",
											"source": 12
										},
										{
											"begin": 5202,
											"end": 5405,
											"name": "PUSH [tag]",
											"source": 12,
											"value": "153"
										},
										{
											"begin": 5202,
											"end": 5405,
											"name": "JUMP",
											"source": 12,
											"value": "[in]"
										},
										{
											"begin": 1668,
											"end": 1769,
											"name": "tag",
											"source": 0,
											"value": "24"
										},
										{
											"begin": 1668,
											"end": 1769,
											"name": "JUMPDEST",
											"source": 0
										},
										{
											"begin": 1668,
											"end": 1769,
											"name": "CALLVALUE",
											"source": 0
										},
										{
											"begin": 1668,
											"end": 1769,
											"name": "DUP1",
											"source": 0
										},
										{
											"begin": 1668,
											"end": 1769,
											"name": "ISZERO",
											"source": 0
										},
										{
											"begin": 1668,
											"end": 1769,
											"name": "PUSH [tag]",
											"source": 0,
											"value": "155"
										},
										{
											"begin": 1668,
											"end": 1769,
											"name": "JUMPI",
											"source": 0
										},
										{
											"begin": 1668,
											"end": 1769,
											"name": "PUSH",
											"source": 0,
											"value": "0"
										},
										{
											"begin": 1668,
											"end": 1769,
											"name": "DUP1",
											"source": 0
										},
										{
											"begin": 1668,
											"end": 1769,
											"name": "REVERT",
											"source": 0
										},
										{
											"begin": 1668,
											"end": 1769,
											"name": "tag",
											"source": 0,
											"value": "155"
										},
										{
											"begin": 1668,
											"end": 1769,
											"name": "JUMPDEST",
											"source": 0
										},
										{
											"begin": 1668,
											"end": 1769,
											"name": "POP",
											"source": 0
										},
										{
											"begin": 1668,
											"end": 1769,
											"name": "PUSH [tag]",
											"source": 0,
											"value": "67"
										},
										{
											"begin": 1668,
											"end": 1769,
											"name": "PUSH [tag]",
											"source": 0,
											"value": "157"
										},
										{
											"begin": 1668,
											"end": 1769,
											"name": "JUMP",
											"source": 0,
											"value": "[in]"
										},
										{
											"begin": 4239,
											"end": 4342,
											"name": "tag",
											"source": 11,
											"value": "25"
										},
										{
											"begin": 4239,
											"end": 4342,
											"name": "JUMPDEST",
											"source": 11
										},
										{
											"begin": 4239,
											"end": 4342,
											"name": "CALLVALUE",
											"source": 11
										},
										{
											"begin": 4239,
											"end": 4342,
											"name": "DUP1",
											"source": 11
										},
										{
											"begin": 4239,
											"end": 4342,
											"name": "ISZERO",
											"source": 11
										},
										{
											"begin": 4239,
											"end": 4342,
											"name": "PUSH [tag]",
											"source": 11,
											"value": "158"
										},
										{
											"begin": 4239,
											"end": 4342,
											"name": "JUMPI",
											"source": 11
										},
										{
											"begin": 4239,
											"end": 4342,
											"name": "PUSH",
											"source": 11,
											"value": "0"
										},
										{
											"begin": 4239,
											"end": 4342,
											"name": "DUP1",
											"source": 11
										},
										{
											"begin": 4239,
											"end": 4342,
											"name": "REVERT",
											"source": 11
										},
										{
											"begin": 4239,
											"end": 4342,
											"name": "tag",
											"source": 11,
											"value": "158"
										},
										{
											"begin": 4239,
											"end": 4342,
											"name": "JUMPDEST",
											"source": 11
										},
										{
											"begin": -1,
											"end": -1,
											"name": "POP",
											"source": -1
										},
										{
											"begin": 4239,
											"end": 4342,
											"name": "PUSH [tag]",
											"source": 11,
											"value": "67"
										},
										{
											"begin": 4239,
											"end": 4342,
											"name": "PUSH [tag]",
											"source": 11,
											"value": "160"
										},
										{
											"begin": 4239,
											"end": 4342,
											"name": "CALLDATASIZE",
											"source": 11
										},
										{
											"begin": 4239,
											"end": 4342,
											"name": "PUSH",
											"source": 11,
											"value": "4"
										},
										{
											"begin": 4239,
											"end": 4342,
											"name": "PUSH [tag]",
											"source": 11,
											"value": "83"
										},
										{
											"begin": 4239,
											"end": 4342,
											"name": "JUMP",
											"source": 11,
											"value": "[in]"
										},
										{
											"begin": 4239,
											"end": 4342,
											"name": "tag",
											"source": 11,
											"value": "160"
										},
										{
											"begin": 4239,
											"end": 4342,
											"name": "JUMPDEST",
											"source": 11
										},
										{
											"begin": 4239,
											"end": 4342,
											"name": "PUSH [tag]",
											"source": 11,
											"value": "162"
										},
										{
											"begin": 4239,
											"end": 4342,
											"name": "JUMP",
											"source": 11,
											"value": "[in]"
										},
										{
											"begin": 3571,
											"end": 3969,
											"name": "tag",
											"source": 11,
											"value": "26"
										},
										{
											"begin": 3571,
											"end": 3969,
											"name": "JUMPDEST",
											"source": 11
										},
										{
											"begin": 3571,
											"end": 3969,
											"name": "CALLVALUE",
											"source": 11
										},
										{
											"begin": 3571,
											"end": 3969,
											"name": "DUP1",
											"source": 11
										},
										{
											"begin": 3571,
											"end": 3969,
											"name": "ISZERO",
											"source": 11
										},
										{
											"begin": 3571,
											"end": 3969,
											"name": "PUSH [tag]",
											"source": 11,
											"value": "163"
										},
										{
											"begin": 3571,
											"end": 3969,
											"name": "JUMPI",
											"source": 11
										},
										{
											"begin": 3571,
											"end": 3969,
											"name": "PUSH",
											"source": 11,
											"value": "0"
										},
										{
											"begin": 3571,
											"end": 3969,
											"name": "DUP1",
											"source": 11
										},
										{
											"begin": 3571,
											"end": 3969,
											"name": "REVERT",
											"source": 11
										},
										{
											"begin": 3571,
											"end": 3969,
											"name": "tag",
											"source": 11,
											"value": "163"
										},
										{
											"begin": 3571,
											"end": 3969,
											"name": "JUMPDEST",
											"source": 11
										},
										{
											"begin": 3571,
											"end": 3969,
											"name": "POP",
											"source": 11
										},
										{
											"begin": 3571,
											"end": 3969,
											"name": "PUSH [tag]",
											"source": 11,
											"value": "164"
										},
										{
											"begin": 3571,
											"end": 3969,
											"name": "PUSH [tag]",
											"source": 11,
											"value": "165"
										},
										{
											"begin": 3571,
											"end": 3969,
											"name": "JUMP",
											"source": 11,
											"value": "[in]"
										},
										{
											"begin": 3571,
											"end": 3969,
											"name": "tag",
											"source": 11,
											"value": "164"
										},
										{
											"begin": 3571,
											"end": 3969,
											"name": "JUMPDEST",
											"source": 11
										},
										{
											"begin": 3571,
											"end": 3969,
											"name": "PUSH",
											"source": 11,
											"value": "40"
										},
										{
											"begin": 3571,
											"end": 3969,
											"name": "MLOAD",
											"source": 11
										},
										{
											"begin": 3571,
											"end": 3969,
											"name": "PUSH [tag]",
											"source": 11,
											"value": "57"
										},
										{
											"begin": 3571,
											"end": 3969,
											"name": "SWAP2",
											"source": 11
										},
										{
											"begin": 3571,
											"end": 3969,
											"name": "SWAP1",
											"source": 11
										},
										{
											"begin": 3571,
											"end": 3969,
											"name": "PUSH [tag]",
											"source": 11,
											"value": "167"
										},
										{
											"begin": 3571,
											"end": 3969,
											"name": "JUMP",
											"source": 11,
											"value": "[in]"
										},
										{
											"begin": 857,
											"end": 874,
											"name": "tag",
											"source": 11,
											"value": "27"
										},
										{
											"begin": 857,
											"end": 874,
											"name": "JUMPDEST",
											"source": 11
										},
										{
											"begin": 857,
											"end": 874,
											"name": "CALLVALUE",
											"source": 11
										},
										{
											"begin": 857,
											"end": 874,
											"name": "DUP1",
											"source": 11
										},
										{
											"begin": 857,
											"end": 874,
											"name": "ISZERO",
											"source": 11
										},
										{
											"begin": 857,
											"end": 874,
											"name": "PUSH [tag]",
											"source": 11,
											"value": "168"
										},
										{
											"begin": 857,
											"end": 874,
											"name": "JUMPI",
											"source": 11
										},
										{
											"begin": 857,
											"end": 874,
											"name": "PUSH",
											"source": 11,
											"value": "0"
										},
										{
											"begin": 857,
											"end": 874,
											"name": "DUP1",
											"source": 11
										},
										{
											"begin": 857,
											"end": 874,
											"name": "REVERT",
											"source": 11
										},
										{
											"begin": 857,
											"end": 874,
											"name": "tag",
											"source": 11,
											"value": "168"
										},
										{
											"begin": 857,
											"end": 874,
											"name": "JUMPDEST",
											"source": 11
										},
										{
											"begin": -1,
											"end": -1,
											"name": "POP",
											"source": -1
										},
										{
											"begin": 857,
											"end": 874,
											"name": "PUSH",
											"source": 11,
											"value": "B"
										},
										{
											"begin": 857,
											"end": 874,
											"name": "SLOAD",
											"source": 11
										},
										{
											"begin": 857,
											"end": 874,
											"name": "PUSH [tag]",
											"source": 11,
											"value": "53"
										},
										{
											"begin": 857,
											"end": 874,
											"name": "SWAP1",
											"source": 11
										},
										{
											"begin": 857,
											"end": 874,
											"name": "PUSH",
											"source": 11,
											"value": "1000000"
										},
										{
											"begin": 857,
											"end": 874,
											"name": "SWAP1",
											"source": 11
										},
										{
											"begin": 857,
											"end": 874,
											"name": "DIV",
											"source": 11
										},
										{
											"begin": 857,
											"end": 874,
											"name": "PUSH",
											"source": 11,
											"value": "FF"
										},
										{
											"begin": 857,
											"end": 874,
											"name": "AND",
											"source": 11
										},
										{
											"begin": 857,
											"end": 874,
											"name": "DUP2",
											"source": 11
										},
										{
											"begin": 857,
											"end": 874,
											"name": "JUMP",
											"source": 11
										},
										{
											"begin": 826,
											"end": 851,
											"name": "tag",
											"source": 11,
											"value": "28"
										},
										{
											"begin": 826,
											"end": 851,
											"name": "JUMPDEST",
											"source": 11
										},
										{
											"begin": 826,
											"end": 851,
											"name": "CALLVALUE",
											"source": 11
										},
										{
											"begin": 826,
											"end": 851,
											"name": "DUP1",
											"source": 11
										},
										{
											"begin": 826,
											"end": 851,
											"name": "ISZERO",
											"source": 11
										},
										{
											"begin": 826,
											"end": 851,
											"name": "PUSH [tag]",
											"source": 11,
											"value": "172"
										},
										{
											"begin": 826,
											"end": 851,
											"name": "JUMPI",
											"source": 11
										},
										{
											"begin": 826,
											"end": 851,
											"name": "PUSH",
											"source": 11,
											"value": "0"
										},
										{
											"begin": 826,
											"end": 851,
											"name": "DUP1",
											"source": 11
										},
										{
											"begin": 826,
											"end": 851,
											"name": "REVERT",
											"source": 11
										},
										{
											"begin": 826,
											"end": 851,
											"name": "tag",
											"source": 11,
											"value": "172"
										},
										{
											"begin": 826,
											"end": 851,
											"name": "JUMPDEST",
											"source": 11
										},
										{
											"begin": -1,
											"end": -1,
											"name": "POP",
											"source": -1
										},
										{
											"begin": 826,
											"end": 851,
											"name": "PUSH",
											"source": 11,
											"value": "B"
										},
										{
											"begin": 826,
											"end": 851,
											"name": "SLOAD",
											"source": 11
										},
										{
											"begin": 826,
											"end": 851,
											"name": "PUSH [tag]",
											"source": 11,
											"value": "53"
										},
										{
											"begin": 826,
											"end": 851,
											"name": "SWAP1",
											"source": 11
										},
										{
											"begin": 826,
											"end": 851,
											"name": "PUSH",
											"source": 11,
											"value": "10000"
										},
										{
											"begin": 826,
											"end": 851,
											"name": "SWAP1",
											"source": 11
										},
										{
											"begin": 826,
											"end": 851,
											"name": "DIV",
											"source": 11
										},
										{
											"begin": 826,
											"end": 851,
											"name": "PUSH",
											"source": 11,
											"value": "FF"
										},
										{
											"begin": 826,
											"end": 851,
											"name": "AND",
											"source": 11
										},
										{
											"begin": 826,
											"end": 851,
											"name": "DUP2",
											"source": 11
										},
										{
											"begin": 826,
											"end": 851,
											"name": "JUMP",
											"source": 11
										},
										{
											"begin": 4522,
											"end": 4618,
											"name": "tag",
											"source": 11,
											"value": "29"
										},
										{
											"begin": 4522,
											"end": 4618,
											"name": "JUMPDEST",
											"source": 11
										},
										{
											"begin": 4522,
											"end": 4618,
											"name": "CALLVALUE",
											"source": 11
										},
										{
											"begin": 4522,
											"end": 4618,
											"name": "DUP1",
											"source": 11
										},
										{
											"begin": 4522,
											"end": 4618,
											"name": "ISZERO",
											"source": 11
										},
										{
											"begin": 4522,
											"end": 4618,
											"name": "PUSH [tag]",
											"source": 11,
											"value": "176"
										},
										{
											"begin": 4522,
											"end": 4618,
											"name": "JUMPI",
											"source": 11
										},
										{
											"begin": 4522,
											"end": 4618,
											"name": "PUSH",
											"source": 11,
											"value": "0"
										},
										{
											"begin": 4522,
											"end": 4618,
											"name": "DUP1",
											"source": 11
										},
										{
											"begin": 4522,
											"end": 4618,
											"name": "REVERT",
											"source": 11
										},
										{
											"begin": 4522,
											"end": 4618,
											"name": "tag",
											"source": 11,
											"value": "176"
										},
										{
											"begin": 4522,
											"end": 4618,
											"name": "JUMPDEST",
											"source": 11
										},
										{
											"begin": 4522,
											"end": 4618,
											"name": "POP",
											"source": 11
										},
										{
											"begin": 4522,
											"end": 4618,
											"name": "PUSH [tag]",
											"source": 11,
											"value": "67"
										},
										{
											"begin": 4522,
											"end": 4618,
											"name": "PUSH [tag]",
											"source": 11,
											"value": "178"
										},
										{
											"begin": 4522,
											"end": 4618,
											"name": "JUMP",
											"source": 11,
											"value": "[in]"
										},
										{
											"begin": 1036,
											"end": 1121,
											"name": "tag",
											"source": 0,
											"value": "30"
										},
										{
											"begin": 1036,
											"end": 1121,
											"name": "JUMPDEST",
											"source": 0
										},
										{
											"begin": 1036,
											"end": 1121,
											"name": "CALLVALUE",
											"source": 0
										},
										{
											"begin": 1036,
											"end": 1121,
											"name": "DUP1",
											"source": 0
										},
										{
											"begin": 1036,
											"end": 1121,
											"name": "ISZERO",
											"source": 0
										},
										{
											"begin": 1036,
											"end": 1121,
											"name": "PUSH [tag]",
											"source": 0,
											"value": "179"
										},
										{
											"begin": 1036,
											"end": 1121,
											"name": "JUMPI",
											"source": 0
										},
										{
											"begin": 1036,
											"end": 1121,
											"name": "PUSH",
											"source": 0,
											"value": "0"
										},
										{
											"begin": 1036,
											"end": 1121,
											"name": "DUP1",
											"source": 0
										},
										{
											"begin": 1036,
											"end": 1121,
											"name": "REVERT",
											"source": 0
										},
										{
											"begin": 1036,
											"end": 1121,
											"name": "tag",
											"source": 0,
											"value": "179"
										},
										{
											"begin": 1036,
											"end": 1121,
											"name": "JUMPDEST",
											"source": 0
										},
										{
											"begin": -1,
											"end": -1,
											"name": "POP",
											"source": -1
										},
										{
											"begin": 1108,
											"end": 1114,
											"name": "PUSH",
											"source": 0,
											"value": "8"
										},
										{
											"begin": 1108,
											"end": 1114,
											"name": "SLOAD",
											"source": 0
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "A0"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SHL",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SUB",
											"source": -1
										},
										{
											"begin": 1108,
											"end": 1114,
											"name": "AND",
											"source": 0
										},
										{
											"begin": 1036,
											"end": 1121,
											"name": "PUSH [tag]",
											"source": 0,
											"value": "81"
										},
										{
											"begin": 1036,
											"end": 1121,
											"name": "JUMP",
											"source": 0
										},
										{
											"begin": 8301,
											"end": 8403,
											"name": "tag",
											"source": 12,
											"value": "31"
										},
										{
											"begin": 8301,
											"end": 8403,
											"name": "JUMPDEST",
											"source": 12
										},
										{
											"begin": 8301,
											"end": 8403,
											"name": "CALLVALUE",
											"source": 12
										},
										{
											"begin": 8301,
											"end": 8403,
											"name": "DUP1",
											"source": 12
										},
										{
											"begin": 8301,
											"end": 8403,
											"name": "ISZERO",
											"source": 12
										},
										{
											"begin": 8301,
											"end": 8403,
											"name": "PUSH [tag]",
											"source": 12,
											"value": "183"
										},
										{
											"begin": 8301,
											"end": 8403,
											"name": "JUMPI",
											"source": 12
										},
										{
											"begin": 8301,
											"end": 8403,
											"name": "PUSH",
											"source": 12,
											"value": "0"
										},
										{
											"begin": 8301,
											"end": 8403,
											"name": "DUP1",
											"source": 12
										},
										{
											"begin": 8301,
											"end": 8403,
											"name": "REVERT",
											"source": 12
										},
										{
											"begin": 8301,
											"end": 8403,
											"name": "tag",
											"source": 12,
											"value": "183"
										},
										{
											"begin": 8301,
											"end": 8403,
											"name": "JUMPDEST",
											"source": 12
										},
										{
											"begin": 8301,
											"end": 8403,
											"name": "POP",
											"source": 12
										},
										{
											"begin": 8301,
											"end": 8403,
											"name": "PUSH [tag]",
											"source": 12,
											"value": "72"
										},
										{
											"begin": 8301,
											"end": 8403,
											"name": "PUSH [tag]",
											"source": 12,
											"value": "185"
										},
										{
											"begin": 8301,
											"end": 8403,
											"name": "JUMP",
											"source": 12,
											"value": "[in]"
										},
										{
											"begin": 1269,
											"end": 1810,
											"name": "tag",
											"source": 11,
											"value": "32"
										},
										{
											"begin": 1269,
											"end": 1810,
											"name": "JUMPDEST",
											"source": 11
										},
										{
											"begin": 1269,
											"end": 1810,
											"name": "PUSH [tag]",
											"source": 11,
											"value": "67"
										},
										{
											"begin": 1269,
											"end": 1810,
											"name": "PUSH [tag]",
											"source": 11,
											"value": "188"
										},
										{
											"begin": 1269,
											"end": 1810,
											"name": "CALLDATASIZE",
											"source": 11
										},
										{
											"begin": 1269,
											"end": 1810,
											"name": "PUSH",
											"source": 11,
											"value": "4"
										},
										{
											"begin": 1269,
											"end": 1810,
											"name": "PUSH [tag]",
											"source": 11,
											"value": "83"
										},
										{
											"begin": 1269,
											"end": 1810,
											"name": "JUMP",
											"source": 11,
											"value": "[in]"
										},
										{
											"begin": 1269,
											"end": 1810,
											"name": "tag",
											"source": 11,
											"value": "188"
										},
										{
											"begin": 1269,
											"end": 1810,
											"name": "JUMPDEST",
											"source": 11
										},
										{
											"begin": 1269,
											"end": 1810,
											"name": "PUSH [tag]",
											"source": 11,
											"value": "189"
										},
										{
											"begin": 1269,
											"end": 1810,
											"name": "JUMP",
											"source": 11,
											"value": "[in]"
										},
										{
											"begin": 9862,
											"end": 10136,
											"name": "tag",
											"source": 12,
											"value": "33"
										},
										{
											"begin": 9862,
											"end": 10136,
											"name": "JUMPDEST",
											"source": 12
										},
										{
											"begin": 9862,
											"end": 10136,
											"name": "CALLVALUE",
											"source": 12
										},
										{
											"begin": 9862,
											"end": 10136,
											"name": "DUP1",
											"source": 12
										},
										{
											"begin": 9862,
											"end": 10136,
											"name": "ISZERO",
											"source": 12
										},
										{
											"begin": 9862,
											"end": 10136,
											"name": "PUSH [tag]",
											"source": 12,
											"value": "190"
										},
										{
											"begin": 9862,
											"end": 10136,
											"name": "JUMPI",
											"source": 12
										},
										{
											"begin": 9862,
											"end": 10136,
											"name": "PUSH",
											"source": 12,
											"value": "0"
										},
										{
											"begin": 9862,
											"end": 10136,
											"name": "DUP1",
											"source": 12
										},
										{
											"begin": 9862,
											"end": 10136,
											"name": "REVERT",
											"source": 12
										},
										{
											"begin": 9862,
											"end": 10136,
											"name": "tag",
											"source": 12,
											"value": "190"
										},
										{
											"begin": 9862,
											"end": 10136,
											"name": "JUMPDEST",
											"source": 12
										},
										{
											"begin": -1,
											"end": -1,
											"name": "POP",
											"source": -1
										},
										{
											"begin": 9862,
											"end": 10136,
											"name": "PUSH [tag]",
											"source": 12,
											"value": "67"
										},
										{
											"begin": 9862,
											"end": 10136,
											"name": "PUSH [tag]",
											"source": 12,
											"value": "192"
										},
										{
											"begin": 9862,
											"end": 10136,
											"name": "CALLDATASIZE",
											"source": 12
										},
										{
											"begin": 9862,
											"end": 10136,
											"name": "PUSH",
											"source": 12,
											"value": "4"
										},
										{
											"begin": 9862,
											"end": 10136,
											"name": "PUSH [tag]",
											"source": 12,
											"value": "193"
										},
										{
											"begin": 9862,
											"end": 10136,
											"name": "JUMP",
											"source": 12,
											"value": "[in]"
										},
										{
											"begin": 9862,
											"end": 10136,
											"name": "tag",
											"source": 12,
											"value": "192"
										},
										{
											"begin": 9862,
											"end": 10136,
											"name": "JUMPDEST",
											"source": 12
										},
										{
											"begin": 9862,
											"end": 10136,
											"name": "PUSH [tag]",
											"source": 12,
											"value": "194"
										},
										{
											"begin": 9862,
											"end": 10136,
											"name": "JUMP",
											"source": 12,
											"value": "[in]"
										},
										{
											"begin": 4093,
											"end": 4233,
											"name": "tag",
											"source": 11,
											"value": "34"
										},
										{
											"begin": 4093,
											"end": 4233,
											"name": "JUMPDEST",
											"source": 11
										},
										{
											"begin": 4093,
											"end": 4233,
											"name": "CALLVALUE",
											"source": 11
										},
										{
											"begin": 4093,
											"end": 4233,
											"name": "DUP1",
											"source": 11
										},
										{
											"begin": 4093,
											"end": 4233,
											"name": "ISZERO",
											"source": 11
										},
										{
											"begin": 4093,
											"end": 4233,
											"name": "PUSH [tag]",
											"source": 11,
											"value": "195"
										},
										{
											"begin": 4093,
											"end": 4233,
											"name": "JUMPI",
											"source": 11
										},
										{
											"begin": 4093,
											"end": 4233,
											"name": "PUSH",
											"source": 11,
											"value": "0"
										},
										{
											"begin": 4093,
											"end": 4233,
											"name": "DUP1",
											"source": 11
										},
										{
											"begin": 4093,
											"end": 4233,
											"name": "REVERT",
											"source": 11
										},
										{
											"begin": 4093,
											"end": 4233,
											"name": "tag",
											"source": 11,
											"value": "195"
										},
										{
											"begin": 4093,
											"end": 4233,
											"name": "JUMPDEST",
											"source": 11
										},
										{
											"begin": -1,
											"end": -1,
											"name": "POP",
											"source": -1
										},
										{
											"begin": 4093,
											"end": 4233,
											"name": "PUSH [tag]",
											"source": 11,
											"value": "67"
										},
										{
											"begin": 4093,
											"end": 4233,
											"name": "PUSH [tag]",
											"source": 11,
											"value": "197"
										},
										{
											"begin": 4093,
											"end": 4233,
											"name": "CALLDATASIZE",
											"source": 11
										},
										{
											"begin": 4093,
											"end": 4233,
											"name": "PUSH",
											"source": 11,
											"value": "4"
										},
										{
											"begin": 4093,
											"end": 4233,
											"name": "PUSH [tag]",
											"source": 11,
											"value": "69"
										},
										{
											"begin": 4093,
											"end": 4233,
											"name": "JUMP",
											"source": 11,
											"value": "[in]"
										},
										{
											"begin": 4093,
											"end": 4233,
											"name": "tag",
											"source": 11,
											"value": "197"
										},
										{
											"begin": 4093,
											"end": 4233,
											"name": "JUMPDEST",
											"source": 11
										},
										{
											"begin": 4093,
											"end": 4233,
											"name": "PUSH [tag]",
											"source": 11,
											"value": "198"
										},
										{
											"begin": 4093,
											"end": 4233,
											"name": "JUMP",
											"source": 11,
											"value": "[in]"
										},
										{
											"begin": 10901,
											"end": 11260,
											"name": "tag",
											"source": 12,
											"value": "35"
										},
										{
											"begin": 10901,
											"end": 11260,
											"name": "JUMPDEST",
											"source": 12
										},
										{
											"begin": 10901,
											"end": 11260,
											"name": "CALLVALUE",
											"source": 12
										},
										{
											"begin": 10901,
											"end": 11260,
											"name": "DUP1",
											"source": 12
										},
										{
											"begin": 10901,
											"end": 11260,
											"name": "ISZERO",
											"source": 12
										},
										{
											"begin": 10901,
											"end": 11260,
											"name": "PUSH [tag]",
											"source": 12,
											"value": "199"
										},
										{
											"begin": 10901,
											"end": 11260,
											"name": "JUMPI",
											"source": 12
										},
										{
											"begin": 10901,
											"end": 11260,
											"name": "PUSH",
											"source": 12,
											"value": "0"
										},
										{
											"begin": 10901,
											"end": 11260,
											"name": "DUP1",
											"source": 12
										},
										{
											"begin": 10901,
											"end": 11260,
											"name": "REVERT",
											"source": 12
										},
										{
											"begin": 10901,
											"end": 11260,
											"name": "tag",
											"source": 12,
											"value": "199"
										},
										{
											"begin": 10901,
											"end": 11260,
											"name": "JUMPDEST",
											"source": 12
										},
										{
											"begin": -1,
											"end": -1,
											"name": "POP",
											"source": -1
										},
										{
											"begin": 10901,
											"end": 11260,
											"name": "PUSH [tag]",
											"source": 12,
											"value": "67"
										},
										{
											"begin": 10901,
											"end": 11260,
											"name": "PUSH [tag]",
											"source": 12,
											"value": "201"
										},
										{
											"begin": 10901,
											"end": 11260,
											"name": "CALLDATASIZE",
											"source": 12
										},
										{
											"begin": 10901,
											"end": 11260,
											"name": "PUSH",
											"source": 12,
											"value": "4"
										},
										{
											"begin": 10901,
											"end": 11260,
											"name": "PUSH [tag]",
											"source": 12,
											"value": "202"
										},
										{
											"begin": 10901,
											"end": 11260,
											"name": "JUMP",
											"source": 12,
											"value": "[in]"
										},
										{
											"begin": 10901,
											"end": 11260,
											"name": "tag",
											"source": 12,
											"value": "201"
										},
										{
											"begin": 10901,
											"end": 11260,
											"name": "JUMPDEST",
											"source": 12
										},
										{
											"begin": 10901,
											"end": 11260,
											"name": "PUSH [tag]",
											"source": 12,
											"value": "203"
										},
										{
											"begin": 10901,
											"end": 11260,
											"name": "JUMP",
											"source": 12,
											"value": "[in]"
										},
										{
											"begin": 2680,
											"end": 2859,
											"name": "tag",
											"source": 11,
											"value": "36"
										},
										{
											"begin": 2680,
											"end": 2859,
											"name": "JUMPDEST",
											"source": 11
										},
										{
											"begin": 2680,
											"end": 2859,
											"name": "CALLVALUE",
											"source": 11
										},
										{
											"begin": 2680,
											"end": 2859,
											"name": "DUP1",
											"source": 11
										},
										{
											"begin": 2680,
											"end": 2859,
											"name": "ISZERO",
											"source": 11
										},
										{
											"begin": 2680,
											"end": 2859,
											"name": "PUSH [tag]",
											"source": 11,
											"value": "204"
										},
										{
											"begin": 2680,
											"end": 2859,
											"name": "JUMPI",
											"source": 11
										},
										{
											"begin": 2680,
											"end": 2859,
											"name": "PUSH",
											"source": 11,
											"value": "0"
										},
										{
											"begin": 2680,
											"end": 2859,
											"name": "DUP1",
											"source": 11
										},
										{
											"begin": 2680,
											"end": 2859,
											"name": "REVERT",
											"source": 11
										},
										{
											"begin": 2680,
											"end": 2859,
											"name": "tag",
											"source": 11,
											"value": "204"
										},
										{
											"begin": 2680,
											"end": 2859,
											"name": "JUMPDEST",
											"source": 11
										},
										{
											"begin": 2680,
											"end": 2859,
											"name": "POP",
											"source": 11
										},
										{
											"begin": 2680,
											"end": 2859,
											"name": "PUSH [tag]",
											"source": 11,
											"value": "67"
										},
										{
											"begin": 2680,
											"end": 2859,
											"name": "PUSH [tag]",
											"source": 11,
											"value": "206"
										},
										{
											"begin": 2680,
											"end": 2859,
											"name": "JUMP",
											"source": 11,
											"value": "[in]"
										},
										{
											"begin": 518,
											"end": 574,
											"name": "tag",
											"source": 11,
											"value": "37"
										},
										{
											"begin": 518,
											"end": 574,
											"name": "JUMPDEST",
											"source": 11
										},
										{
											"begin": 518,
											"end": 574,
											"name": "CALLVALUE",
											"source": 11
										},
										{
											"begin": 518,
											"end": 574,
											"name": "DUP1",
											"source": 11
										},
										{
											"begin": 518,
											"end": 574,
											"name": "ISZERO",
											"source": 11
										},
										{
											"begin": 518,
											"end": 574,
											"name": "PUSH [tag]",
											"source": 11,
											"value": "207"
										},
										{
											"begin": 518,
											"end": 574,
											"name": "JUMPI",
											"source": 11
										},
										{
											"begin": 518,
											"end": 574,
											"name": "PUSH",
											"source": 11,
											"value": "0"
										},
										{
											"begin": 518,
											"end": 574,
											"name": "DUP1",
											"source": 11
										},
										{
											"begin": 518,
											"end": 574,
											"name": "REVERT",
											"source": 11
										},
										{
											"begin": 518,
											"end": 574,
											"name": "tag",
											"source": 11,
											"value": "207"
										},
										{
											"begin": 518,
											"end": 574,
											"name": "JUMPDEST",
											"source": 11
										},
										{
											"begin": 518,
											"end": 574,
											"name": "POP",
											"source": 11
										},
										{
											"begin": 518,
											"end": 574,
											"name": "PUSH [tag]",
											"source": 11,
											"value": "60"
										},
										{
											"begin": 565,
											"end": 574,
											"name": "PUSH",
											"source": 11,
											"value": "6A94D74F430000"
										},
										{
											"begin": 518,
											"end": 574,
											"name": "DUP2",
											"source": 11
										},
										{
											"begin": 518,
											"end": 574,
											"name": "JUMP",
											"source": 11
										},
										{
											"begin": 4444,
											"end": 4516,
											"name": "tag",
											"source": 11,
											"value": "39"
										},
										{
											"begin": 4444,
											"end": 4516,
											"name": "JUMPDEST",
											"source": 11
										},
										{
											"begin": 4444,
											"end": 4516,
											"name": "CALLVALUE",
											"source": 11
										},
										{
											"begin": 4444,
											"end": 4516,
											"name": "DUP1",
											"source": 11
										},
										{
											"begin": 4444,
											"end": 4516,
											"name": "ISZERO",
											"source": 11
										},
										{
											"begin": 4444,
											"end": 4516,
											"name": "PUSH [tag]",
											"source": 11,
											"value": "215"
										},
										{
											"begin": 4444,
											"end": 4516,
											"name": "JUMPI",
											"source": 11
										},
										{
											"begin": 4444,
											"end": 4516,
											"name": "PUSH",
											"source": 11,
											"value": "0"
										},
										{
											"begin": 4444,
											"end": 4516,
											"name": "DUP1",
											"source": 11
										},
										{
											"begin": 4444,
											"end": 4516,
											"name": "REVERT",
											"source": 11
										},
										{
											"begin": 4444,
											"end": 4516,
											"name": "tag",
											"source": 11,
											"value": "215"
										},
										{
											"begin": 4444,
											"end": 4516,
											"name": "JUMPDEST",
											"source": 11
										},
										{
											"begin": 4444,
											"end": 4516,
											"name": "POP",
											"source": 11
										},
										{
											"begin": 4444,
											"end": 4516,
											"name": "PUSH [tag]",
											"source": 11,
											"value": "67"
										},
										{
											"begin": 4444,
											"end": 4516,
											"name": "PUSH [tag]",
											"source": 11,
											"value": "217"
										},
										{
											"begin": 4444,
											"end": 4516,
											"name": "JUMP",
											"source": 11,
											"value": "[in]"
										},
										{
											"begin": 3017,
											"end": 3480,
											"name": "tag",
											"source": 11,
											"value": "40"
										},
										{
											"begin": 3017,
											"end": 3480,
											"name": "JUMPDEST",
											"source": 11
										},
										{
											"begin": 3017,
											"end": 3480,
											"name": "CALLVALUE",
											"source": 11
										},
										{
											"begin": 3017,
											"end": 3480,
											"name": "DUP1",
											"source": 11
										},
										{
											"begin": 3017,
											"end": 3480,
											"name": "ISZERO",
											"source": 11
										},
										{
											"begin": 3017,
											"end": 3480,
											"name": "PUSH [tag]",
											"source": 11,
											"value": "218"
										},
										{
											"begin": 3017,
											"end": 3480,
											"name": "JUMPI",
											"source": 11
										},
										{
											"begin": 3017,
											"end": 3480,
											"name": "PUSH",
											"source": 11,
											"value": "0"
										},
										{
											"begin": 3017,
											"end": 3480,
											"name": "DUP1",
											"source": 11
										},
										{
											"begin": 3017,
											"end": 3480,
											"name": "REVERT",
											"source": 11
										},
										{
											"begin": 3017,
											"end": 3480,
											"name": "tag",
											"source": 11,
											"value": "218"
										},
										{
											"begin": 3017,
											"end": 3480,
											"name": "JUMPDEST",
											"source": 11
										},
										{
											"begin": -1,
											"end": -1,
											"name": "POP",
											"source": -1
										},
										{
											"begin": 3017,
											"end": 3480,
											"name": "PUSH [tag]",
											"source": 11,
											"value": "72"
										},
										{
											"begin": 3017,
											"end": 3480,
											"name": "PUSH [tag]",
											"source": 11,
											"value": "220"
										},
										{
											"begin": 3017,
											"end": 3480,
											"name": "CALLDATASIZE",
											"source": 11
										},
										{
											"begin": 3017,
											"end": 3480,
											"name": "PUSH",
											"source": 11,
											"value": "4"
										},
										{
											"begin": 3017,
											"end": 3480,
											"name": "PUSH [tag]",
											"source": 11,
											"value": "83"
										},
										{
											"begin": 3017,
											"end": 3480,
											"name": "JUMP",
											"source": 11,
											"value": "[in]"
										},
										{
											"begin": 3017,
											"end": 3480,
											"name": "tag",
											"source": 11,
											"value": "220"
										},
										{
											"begin": 3017,
											"end": 3480,
											"name": "JUMPDEST",
											"source": 11
										},
										{
											"begin": 3017,
											"end": 3480,
											"name": "PUSH [tag]",
											"source": 11,
											"value": "221"
										},
										{
											"begin": 3017,
											"end": 3480,
											"name": "JUMP",
											"source": 11,
											"value": "[in]"
										},
										{
											"begin": 4624,
											"end": 4711,
											"name": "tag",
											"source": 11,
											"value": "41"
										},
										{
											"begin": 4624,
											"end": 4711,
											"name": "JUMPDEST",
											"source": 11
										},
										{
											"begin": 4624,
											"end": 4711,
											"name": "CALLVALUE",
											"source": 11
										},
										{
											"begin": 4624,
											"end": 4711,
											"name": "DUP1",
											"source": 11
										},
										{
											"begin": 4624,
											"end": 4711,
											"name": "ISZERO",
											"source": 11
										},
										{
											"begin": 4624,
											"end": 4711,
											"name": "PUSH [tag]",
											"source": 11,
											"value": "223"
										},
										{
											"begin": 4624,
											"end": 4711,
											"name": "JUMPI",
											"source": 11
										},
										{
											"begin": 4624,
											"end": 4711,
											"name": "PUSH",
											"source": 11,
											"value": "0"
										},
										{
											"begin": 4624,
											"end": 4711,
											"name": "DUP1",
											"source": 11
										},
										{
											"begin": 4624,
											"end": 4711,
											"name": "REVERT",
											"source": 11
										},
										{
											"begin": 4624,
											"end": 4711,
											"name": "tag",
											"source": 11,
											"value": "223"
										},
										{
											"begin": 4624,
											"end": 4711,
											"name": "JUMPDEST",
											"source": 11
										},
										{
											"begin": 4624,
											"end": 4711,
											"name": "POP",
											"source": 11
										},
										{
											"begin": 4624,
											"end": 4711,
											"name": "PUSH [tag]",
											"source": 11,
											"value": "67"
										},
										{
											"begin": 4624,
											"end": 4711,
											"name": "PUSH [tag]",
											"source": 11,
											"value": "225"
										},
										{
											"begin": 4624,
											"end": 4711,
											"name": "JUMP",
											"source": 11,
											"value": "[in]"
										},
										{
											"begin": 880,
											"end": 902,
											"name": "tag",
											"source": 11,
											"value": "42"
										},
										{
											"begin": 880,
											"end": 902,
											"name": "JUMPDEST",
											"source": 11
										},
										{
											"begin": 880,
											"end": 902,
											"name": "CALLVALUE",
											"source": 11
										},
										{
											"begin": 880,
											"end": 902,
											"name": "DUP1",
											"source": 11
										},
										{
											"begin": 880,
											"end": 902,
											"name": "ISZERO",
											"source": 11
										},
										{
											"begin": 880,
											"end": 902,
											"name": "PUSH [tag]",
											"source": 11,
											"value": "226"
										},
										{
											"begin": 880,
											"end": 902,
											"name": "JUMPI",
											"source": 11
										},
										{
											"begin": 880,
											"end": 902,
											"name": "PUSH",
											"source": 11,
											"value": "0"
										},
										{
											"begin": 880,
											"end": 902,
											"name": "DUP1",
											"source": 11
										},
										{
											"begin": 880,
											"end": 902,
											"name": "REVERT",
											"source": 11
										},
										{
											"begin": 880,
											"end": 902,
											"name": "tag",
											"source": 11,
											"value": "226"
										},
										{
											"begin": 880,
											"end": 902,
											"name": "JUMPDEST",
											"source": 11
										},
										{
											"begin": -1,
											"end": -1,
											"name": "POP",
											"source": -1
										},
										{
											"begin": 880,
											"end": 902,
											"name": "PUSH",
											"source": 11,
											"value": "B"
										},
										{
											"begin": 880,
											"end": 902,
											"name": "SLOAD",
											"source": 11
										},
										{
											"begin": 880,
											"end": 902,
											"name": "PUSH [tag]",
											"source": 11,
											"value": "53"
										},
										{
											"begin": 880,
											"end": 902,
											"name": "SWAP1",
											"source": 11
										},
										{
											"begin": 880,
											"end": 902,
											"name": "PUSH",
											"source": 11,
											"value": "100000000"
										},
										{
											"begin": 880,
											"end": 902,
											"name": "SWAP1",
											"source": 11
										},
										{
											"begin": 880,
											"end": 902,
											"name": "DIV",
											"source": 11
										},
										{
											"begin": 880,
											"end": 902,
											"name": "PUSH",
											"source": 11,
											"value": "FF"
										},
										{
											"begin": 880,
											"end": 902,
											"name": "AND",
											"source": 11
										},
										{
											"begin": 880,
											"end": 902,
											"name": "DUP2",
											"source": 11
										},
										{
											"begin": 880,
											"end": 902,
											"name": "JUMP",
											"source": 11
										},
										{
											"begin": 10202,
											"end": 10364,
											"name": "tag",
											"source": 12,
											"value": "43"
										},
										{
											"begin": 10202,
											"end": 10364,
											"name": "JUMPDEST",
											"source": 12
										},
										{
											"begin": 10202,
											"end": 10364,
											"name": "CALLVALUE",
											"source": 12
										},
										{
											"begin": 10202,
											"end": 10364,
											"name": "DUP1",
											"source": 12
										},
										{
											"begin": 10202,
											"end": 10364,
											"name": "ISZERO",
											"source": 12
										},
										{
											"begin": 10202,
											"end": 10364,
											"name": "PUSH [tag]",
											"source": 12,
											"value": "230"
										},
										{
											"begin": 10202,
											"end": 10364,
											"name": "JUMPI",
											"source": 12
										},
										{
											"begin": 10202,
											"end": 10364,
											"name": "PUSH",
											"source": 12,
											"value": "0"
										},
										{
											"begin": 10202,
											"end": 10364,
											"name": "DUP1",
											"source": 12
										},
										{
											"begin": 10202,
											"end": 10364,
											"name": "REVERT",
											"source": 12
										},
										{
											"begin": 10202,
											"end": 10364,
											"name": "tag",
											"source": 12,
											"value": "230"
										},
										{
											"begin": 10202,
											"end": 10364,
											"name": "JUMPDEST",
											"source": 12
										},
										{
											"begin": -1,
											"end": -1,
											"name": "POP",
											"source": -1
										},
										{
											"begin": 10202,
											"end": 10364,
											"name": "PUSH [tag]",
											"source": 12,
											"value": "53"
										},
										{
											"begin": 10202,
											"end": 10364,
											"name": "PUSH [tag]",
											"source": 12,
											"value": "232"
										},
										{
											"begin": 10202,
											"end": 10364,
											"name": "CALLDATASIZE",
											"source": 12
										},
										{
											"begin": 10202,
											"end": 10364,
											"name": "PUSH",
											"source": 12,
											"value": "4"
										},
										{
											"begin": 10202,
											"end": 10364,
											"name": "PUSH [tag]",
											"source": 12,
											"value": "233"
										},
										{
											"begin": 10202,
											"end": 10364,
											"name": "JUMP",
											"source": 12,
											"value": "[in]"
										},
										{
											"begin": 10202,
											"end": 10364,
											"name": "tag",
											"source": 12,
											"value": "232"
										},
										{
											"begin": 10202,
											"end": 10364,
											"name": "JUMPDEST",
											"source": 12
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "A0"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SHL",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SUB",
											"source": -1
										},
										{
											"begin": 10322,
											"end": 10347,
											"name": "SWAP2",
											"source": 12
										},
										{
											"begin": 10322,
											"end": 10347,
											"name": "DUP3",
											"source": 12
										},
										{
											"begin": 10322,
											"end": 10347,
											"name": "AND",
											"source": 12
										},
										{
											"begin": 10299,
											"end": 10303,
											"name": "PUSH",
											"source": 12,
											"value": "0"
										},
										{
											"begin": 10322,
											"end": 10347,
											"name": "SWAP1",
											"source": 12
										},
										{
											"begin": 10322,
											"end": 10347,
											"name": "DUP2",
											"source": 12
										},
										{
											"begin": 10322,
											"end": 10347,
											"name": "MSTORE",
											"source": 12
										},
										{
											"begin": 10322,
											"end": 10340,
											"name": "PUSH",
											"source": 12,
											"value": "7"
										},
										{
											"begin": 10322,
											"end": 10347,
											"name": "PUSH",
											"source": 12,
											"value": "20"
										},
										{
											"begin": 10322,
											"end": 10347,
											"name": "SWAP1",
											"source": 12
										},
										{
											"begin": 10322,
											"end": 10347,
											"name": "DUP2",
											"source": 12
										},
										{
											"begin": 10322,
											"end": 10347,
											"name": "MSTORE",
											"source": 12
										},
										{
											"begin": 10322,
											"end": 10347,
											"name": "PUSH",
											"source": 12,
											"value": "40"
										},
										{
											"begin": 10322,
											"end": 10347,
											"name": "DUP1",
											"source": 12
										},
										{
											"begin": 10322,
											"end": 10347,
											"name": "DUP4",
											"source": 12
										},
										{
											"begin": 10322,
											"end": 10347,
											"name": "KECCAK256",
											"source": 12
										},
										{
											"begin": 10322,
											"end": 10357,
											"name": "SWAP4",
											"source": 12
										},
										{
											"begin": 10322,
											"end": 10357,
											"name": "SWAP1",
											"source": 12
										},
										{
											"begin": 10322,
											"end": 10357,
											"name": "SWAP5",
											"source": 12
										},
										{
											"begin": 10322,
											"end": 10357,
											"name": "AND",
											"source": 12
										},
										{
											"begin": 10322,
											"end": 10357,
											"name": "DUP3",
											"source": 12
										},
										{
											"begin": 10322,
											"end": 10357,
											"name": "MSTORE",
											"source": 12
										},
										{
											"begin": 10322,
											"end": 10357,
											"name": "SWAP2",
											"source": 12
										},
										{
											"begin": 10322,
											"end": 10357,
											"name": "SWAP1",
											"source": 12
										},
										{
											"begin": 10322,
											"end": 10357,
											"name": "SWAP2",
											"source": 12
										},
										{
											"begin": 10322,
											"end": 10357,
											"name": "MSTORE",
											"source": 12
										},
										{
											"begin": 10322,
											"end": 10357,
											"name": "KECCAK256",
											"source": 12
										},
										{
											"begin": 10322,
											"end": 10357,
											"name": "SLOAD",
											"source": 12
										},
										{
											"begin": 10322,
											"end": 10357,
											"name": "PUSH",
											"source": 12,
											"value": "FF"
										},
										{
											"begin": 10322,
											"end": 10357,
											"name": "AND",
											"source": 12
										},
										{
											"begin": 10322,
											"end": 10357,
											"name": "SWAP1",
											"source": 12
										},
										{
											"begin": 10202,
											"end": 10364,
											"name": "JUMP",
											"source": 12
										},
										{
											"begin": 1918,
											"end": 2116,
											"name": "tag",
											"source": 0,
											"value": "44"
										},
										{
											"begin": 1918,
											"end": 2116,
											"name": "JUMPDEST",
											"source": 0
										},
										{
											"begin": 1918,
											"end": 2116,
											"name": "CALLVALUE",
											"source": 0
										},
										{
											"begin": 1918,
											"end": 2116,
											"name": "DUP1",
											"source": 0
										},
										{
											"begin": 1918,
											"end": 2116,
											"name": "ISZERO",
											"source": 0
										},
										{
											"begin": 1918,
											"end": 2116,
											"name": "PUSH [tag]",
											"source": 0,
											"value": "236"
										},
										{
											"begin": 1918,
											"end": 2116,
											"name": "JUMPI",
											"source": 0
										},
										{
											"begin": 1918,
											"end": 2116,
											"name": "PUSH",
											"source": 0,
											"value": "0"
										},
										{
											"begin": 1918,
											"end": 2116,
											"name": "DUP1",
											"source": 0
										},
										{
											"begin": 1918,
											"end": 2116,
											"name": "REVERT",
											"source": 0
										},
										{
											"begin": 1918,
											"end": 2116,
											"name": "tag",
											"source": 0,
											"value": "236"
										},
										{
											"begin": 1918,
											"end": 2116,
											"name": "JUMPDEST",
											"source": 0
										},
										{
											"begin": -1,
											"end": -1,
											"name": "POP",
											"source": -1
										},
										{
											"begin": 1918,
											"end": 2116,
											"name": "PUSH [tag]",
											"source": 0,
											"value": "67"
										},
										{
											"begin": 1918,
											"end": 2116,
											"name": "PUSH [tag]",
											"source": 0,
											"value": "238"
										},
										{
											"begin": 1918,
											"end": 2116,
											"name": "CALLDATASIZE",
											"source": 0
										},
										{
											"begin": 1918,
											"end": 2116,
											"name": "PUSH",
											"source": 0,
											"value": "4"
										},
										{
											"begin": 1918,
											"end": 2116,
											"name": "PUSH [tag]",
											"source": 0,
											"value": "62"
										},
										{
											"begin": 1918,
											"end": 2116,
											"name": "JUMP",
											"source": 0,
											"value": "[in]"
										},
										{
											"begin": 1918,
											"end": 2116,
											"name": "tag",
											"source": 0,
											"value": "238"
										},
										{
											"begin": 1918,
											"end": 2116,
											"name": "JUMPDEST",
											"source": 0
										},
										{
											"begin": 1918,
											"end": 2116,
											"name": "PUSH [tag]",
											"source": 0,
											"value": "239"
										},
										{
											"begin": 1918,
											"end": 2116,
											"name": "JUMP",
											"source": 0,
											"value": "[in]"
										},
										{
											"begin": 4843,
											"end": 5143,
											"name": "tag",
											"source": 12,
											"value": "56"
										},
										{
											"begin": 4843,
											"end": 5143,
											"name": "JUMPDEST",
											"source": 12
										},
										{
											"begin": 4945,
											"end": 4949,
											"name": "PUSH",
											"source": 12,
											"value": "0"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "E0"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SHL",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SUB",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "NOT",
											"source": -1
										},
										{
											"begin": 4980,
											"end": 5020,
											"name": "DUP3",
											"source": 12
										},
										{
											"begin": 4980,
											"end": 5020,
											"name": "AND",
											"source": 12
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "80AC58CD"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "E0"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SHL",
											"source": -1
										},
										{
											"begin": 4980,
											"end": 5020,
											"name": "EQ",
											"source": 12
										},
										{
											"begin": 4980,
											"end": 5020,
											"name": "DUP1",
											"source": 12
										},
										{
											"begin": 4980,
											"end": 5084,
											"name": "PUSH [tag]",
											"source": 12,
											"value": "241"
										},
										{
											"begin": 4980,
											"end": 5084,
											"name": "JUMPI",
											"source": 12
										},
										{
											"begin": -1,
											"end": -1,
											"name": "POP",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "E0"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SHL",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SUB",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "NOT",
											"source": -1
										},
										{
											"begin": 5036,
											"end": 5084,
											"name": "DUP3",
											"source": 12
										},
										{
											"begin": 5036,
											"end": 5084,
											"name": "AND",
											"source": 12
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "5B5E139F"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "E0"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SHL",
											"source": -1
										},
										{
											"begin": 5036,
											"end": 5084,
											"name": "EQ",
											"source": 12
										},
										{
											"begin": 4980,
											"end": 5084,
											"name": "tag",
											"source": 12,
											"value": "241"
										},
										{
											"begin": 4980,
											"end": 5084,
											"name": "JUMPDEST",
											"source": 12
										},
										{
											"begin": 4980,
											"end": 5136,
											"name": "DUP1",
											"source": 12
										},
										{
											"begin": 4980,
											"end": 5136,
											"name": "PUSH [tag]",
											"source": 12,
											"value": "243"
										},
										{
											"begin": 4980,
											"end": 5136,
											"name": "JUMPI",
											"source": 12
										},
										{
											"begin": -1,
											"end": -1,
											"name": "POP",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1FFC9A7"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "E0"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SHL",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "E0"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SHL",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SUB",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "NOT",
											"source": -1
										},
										{
											"begin": 937,
											"end": 977,
											"name": "DUP4",
											"source": 9
										},
										{
											"begin": 937,
											"end": 977,
											"name": "AND",
											"source": 9
										},
										{
											"begin": 937,
											"end": 977,
											"name": "EQ",
											"source": 9
										},
										{
											"begin": 5100,
											"end": 5136,
											"name": "tag",
											"source": 12,
											"value": "243"
										},
										{
											"begin": 5100,
											"end": 5136,
											"name": "JUMPDEST",
											"source": 12
										},
										{
											"begin": 4961,
											"end": 5136,
											"name": "SWAP3",
											"source": 12
										},
										{
											"begin": 4843,
											"end": 5143,
											"name": "SWAP2",
											"source": 12
										},
										{
											"begin": -1,
											"end": -1,
											"name": "POP",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "POP",
											"source": -1
										},
										{
											"begin": 4843,
											"end": 5143,
											"name": "JUMP",
											"source": 12,
											"value": "[out]"
										},
										{
											"begin": 3975,
											"end": 4088,
											"name": "tag",
											"source": 11,
											"value": "70"
										},
										{
											"begin": 3975,
											"end": 4088,
											"name": "JUMPDEST",
											"source": 11
										},
										{
											"begin": 1108,
											"end": 1114,
											"name": "PUSH",
											"source": 0,
											"value": "8"
										},
										{
											"begin": 1108,
											"end": 1114,
											"name": "SLOAD",
											"source": 0
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "A0"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SHL",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SUB",
											"source": -1
										},
										{
											"begin": 1108,
											"end": 1114,
											"name": "AND",
											"source": 0
										},
										{
											"begin": 719,
											"end": 729,
											"name": "CALLER",
											"source": 6
										},
										{
											"begin": 1248,
											"end": 1271,
											"name": "EQ",
											"source": 0
										},
										{
											"begin": 1240,
											"end": 1308,
											"name": "PUSH [tag]",
											"source": 0,
											"value": "249"
										},
										{
											"begin": 1240,
											"end": 1308,
											"name": "JUMPI",
											"source": 0
										},
										{
											"begin": 1240,
											"end": 1308,
											"name": "PUSH",
											"source": 0,
											"value": "40"
										},
										{
											"begin": 1240,
											"end": 1308,
											"name": "MLOAD",
											"source": 0
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "461BCD"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "E5"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SHL",
											"source": -1
										},
										{
											"begin": 1240,
											"end": 1308,
											"name": "DUP2",
											"source": 0
										},
										{
											"begin": 1240,
											"end": 1308,
											"name": "MSTORE",
											"source": 0
										},
										{
											"begin": 1240,
											"end": 1308,
											"name": "PUSH",
											"source": 0,
											"value": "4"
										},
										{
											"begin": 1240,
											"end": 1308,
											"name": "ADD",
											"source": 0
										},
										{
											"begin": 1240,
											"end": 1308,
											"name": "PUSH [tag]",
											"source": 0,
											"value": "250"
										},
										{
											"begin": 1240,
											"end": 1308,
											"name": "SWAP1",
											"source": 0
										},
										{
											"begin": 1240,
											"end": 1308,
											"name": "PUSH [tag]",
											"source": 0,
											"value": "251"
										},
										{
											"begin": 1240,
											"end": 1308,
											"name": "JUMP",
											"source": 0,
											"value": "[in]"
										},
										{
											"begin": 1240,
											"end": 1308,
											"name": "tag",
											"source": 0,
											"value": "250"
										},
										{
											"begin": 1240,
											"end": 1308,
											"name": "JUMPDEST",
											"source": 0
										},
										{
											"begin": 1240,
											"end": 1308,
											"name": "PUSH",
											"source": 0,
											"value": "40"
										},
										{
											"begin": 1240,
											"end": 1308,
											"name": "MLOAD",
											"source": 0
										},
										{
											"begin": 1240,
											"end": 1308,
											"name": "DUP1",
											"source": 0
										},
										{
											"begin": 1240,
											"end": 1308,
											"name": "SWAP2",
											"source": 0
										},
										{
											"begin": 1240,
											"end": 1308,
											"name": "SUB",
											"source": 0
										},
										{
											"begin": 1240,
											"end": 1308,
											"name": "SWAP1",
											"source": 0
										},
										{
											"begin": 1240,
											"end": 1308,
											"name": "REVERT",
											"source": 0
										},
										{
											"begin": 1240,
											"end": 1308,
											"name": "tag",
											"source": 0,
											"value": "249"
										},
										{
											"begin": 1240,
											"end": 1308,
											"name": "JUMPDEST",
											"source": 0
										},
										{
											"begin": 4053,
											"end": 4081,
											"name": "DUP1",
											"source": 11
										},
										{
											"begin": 4053,
											"end": 4081,
											"name": "MLOAD",
											"source": 11
										},
										{
											"begin": 4053,
											"end": 4081,
											"name": "PUSH [tag]",
											"source": 11,
											"value": "253"
										},
										{
											"begin": 4053,
											"end": 4081,
											"name": "SWAP1",
											"source": 11
										},
										{
											"begin": 4053,
											"end": 4065,
											"name": "PUSH",
											"source": 11,
											"value": "9"
										},
										{
											"begin": 4053,
											"end": 4065,
											"name": "SWAP1",
											"source": 11
										},
										{
											"begin": 4053,
											"end": 4081,
											"name": "PUSH",
											"source": 11,
											"value": "20"
										},
										{
											"begin": 4053,
											"end": 4081,
											"name": "DUP5",
											"source": 11
										},
										{
											"begin": 4053,
											"end": 4081,
											"name": "ADD",
											"source": 11
										},
										{
											"begin": 4053,
											"end": 4081,
											"name": "SWAP1",
											"source": 11
										},
										{
											"begin": 4053,
											"end": 4081,
											"name": "PUSH [tag]",
											"source": 11,
											"value": "254"
										},
										{
											"begin": 4053,
											"end": 4081,
											"name": "JUMP",
											"source": 11,
											"value": "[in]"
										},
										{
											"begin": 4053,
											"end": 4081,
											"name": "tag",
											"source": 11,
											"value": "253"
										},
										{
											"begin": 4053,
											"end": 4081,
											"name": "JUMPDEST",
											"source": 11
										},
										{
											"begin": 4053,
											"end": 4081,
											"name": "POP",
											"source": 11
										},
										{
											"begin": 3975,
											"end": 4088,
											"name": "POP",
											"source": 11
										},
										{
											"begin": 3975,
											"end": 4088,
											"name": "JUMP",
											"source": 11,
											"value": "[out]"
										},
										{
											"begin": 8139,
											"end": 8237,
											"name": "tag",
											"source": 12,
											"value": "73"
										},
										{
											"begin": 8139,
											"end": 8237,
											"name": "JUMPDEST",
											"source": 12
										},
										{
											"begin": 8193,
											"end": 8206,
											"name": "PUSH",
											"source": 12,
											"value": "60"
										},
										{
											"begin": 8225,
											"end": 8230,
											"name": "PUSH",
											"source": 12,
											"value": "2"
										},
										{
											"begin": 8218,
											"end": 8230,
											"name": "DUP1",
											"source": 12
										},
										{
											"begin": 8218,
											"end": 8230,
											"name": "SLOAD",
											"source": 12
										},
										{
											"begin": 8218,
											"end": 8230,
											"name": "PUSH [tag]",
											"source": 12,
											"value": "256"
										},
										{
											"begin": 8218,
											"end": 8230,
											"name": "SWAP1",
											"source": 12
										},
										{
											"begin": 8218,
											"end": 8230,
											"name": "PUSH [tag]",
											"source": 12,
											"value": "257"
										},
										{
											"begin": 8218,
											"end": 8230,
											"name": "JUMP",
											"source": 12,
											"value": "[in]"
										},
										{
											"begin": 8218,
											"end": 8230,
											"name": "tag",
											"source": 12,
											"value": "256"
										},
										{
											"begin": 8218,
											"end": 8230,
											"name": "JUMPDEST",
											"source": 12
										},
										{
											"begin": 8218,
											"end": 8230,
											"name": "DUP1",
											"source": 12
										},
										{
											"begin": 8218,
											"end": 8230,
											"name": "PUSH",
											"source": 12,
											"value": "1F"
										},
										{
											"begin": 8218,
											"end": 8230,
											"name": "ADD",
											"source": 12
										},
										{
											"begin": 8218,
											"end": 8230,
											"name": "PUSH",
											"source": 12,
											"value": "20"
										},
										{
											"begin": 8218,
											"end": 8230,
											"name": "DUP1",
											"source": 12
										},
										{
											"begin": 8218,
											"end": 8230,
											"name": "SWAP2",
											"source": 12
										},
										{
											"begin": 8218,
											"end": 8230,
											"name": "DIV",
											"source": 12
										},
										{
											"begin": 8218,
											"end": 8230,
											"name": "MUL",
											"source": 12
										},
										{
											"begin": 8218,
											"end": 8230,
											"name": "PUSH",
											"source": 12,
											"value": "20"
										},
										{
											"begin": 8218,
											"end": 8230,
											"name": "ADD",
											"source": 12
										},
										{
											"begin": 8218,
											"end": 8230,
											"name": "PUSH",
											"source": 12,
											"value": "40"
										},
										{
											"begin": 8218,
											"end": 8230,
											"name": "MLOAD",
											"source": 12
										},
										{
											"begin": 8218,
											"end": 8230,
											"name": "SWAP1",
											"source": 12
										},
										{
											"begin": 8218,
											"end": 8230,
											"name": "DUP2",
											"source": 12
										},
										{
											"begin": 8218,
											"end": 8230,
											"name": "ADD",
											"source": 12
										},
										{
											"begin": 8218,
											"end": 8230,
											"name": "PUSH",
											"source": 12,
											"value": "40"
										},
										{
											"begin": 8218,
											"end": 8230,
											"name": "MSTORE",
											"source": 12
										},
										{
											"begin": 8218,
											"end": 8230,
											"name": "DUP1",
											"source": 12
										},
										{
											"begin": 8218,
											"end": 8230,
											"name": "SWAP3",
											"source": 12
										},
										{
											"begin": 8218,
											"end": 8230,
											"name": "SWAP2",
											"source": 12
										},
										{
											"begin": 8218,
											"end": 8230,
											"name": "SWAP1",
											"source": 12
										},
										{
											"begin": 8218,
											"end": 8230,
											"name": "DUP2",
											"source": 12
										},
										{
											"begin": 8218,
											"end": 8230,
											"name": "DUP2",
											"source": 12
										},
										{
											"begin": 8218,
											"end": 8230,
											"name": "MSTORE",
											"source": 12
										},
										{
											"begin": 8218,
											"end": 8230,
											"name": "PUSH",
											"source": 12,
											"value": "20"
										},
										{
											"begin": 8218,
											"end": 8230,
											"name": "ADD",
											"source": 12
										},
										{
											"begin": 8218,
											"end": 8230,
											"name": "DUP3",
											"source": 12
										},
										{
											"begin": 8218,
											"end": 8230,
											"name": "DUP1",
											"source": 12
										},
										{
											"begin": 8218,
											"end": 8230,
											"name": "SLOAD",
											"source": 12
										},
										{
											"begin": 8218,
											"end": 8230,
											"name": "PUSH [tag]",
											"source": 12,
											"value": "258"
										},
										{
											"begin": 8218,
											"end": 8230,
											"name": "SWAP1",
											"source": 12
										},
										{
											"begin": 8218,
											"end": 8230,
											"name": "PUSH [tag]",
											"source": 12,
											"value": "257"
										},
										{
											"begin": 8218,
											"end": 8230,
											"name": "JUMP",
											"source": 12,
											"value": "[in]"
										},
										{
											"begin": 8218,
											"end": 8230,
											"name": "tag",
											"source": 12,
											"value": "258"
										},
										{
											"begin": 8218,
											"end": 8230,
											"name": "JUMPDEST",
											"source": 12
										},
										{
											"begin": 8218,
											"end": 8230,
											"name": "DUP1",
											"source": 12
										},
										{
											"begin": 8218,
											"end": 8230,
											"name": "ISZERO",
											"source": 12
										},
										{
											"begin": 8218,
											"end": 8230,
											"name": "PUSH [tag]",
											"source": 12,
											"value": "259"
										},
										{
											"begin": 8218,
											"end": 8230,
											"name": "JUMPI",
											"source": 12
										},
										{
											"begin": 8218,
											"end": 8230,
											"name": "DUP1",
											"source": 12
										},
										{
											"begin": 8218,
											"end": 8230,
											"name": "PUSH",
											"source": 12,
											"value": "1F"
										},
										{
											"begin": 8218,
											"end": 8230,
											"name": "LT",
											"source": 12
										},
										{
											"begin": 8218,
											"end": 8230,
											"name": "PUSH [tag]",
											"source": 12,
											"value": "260"
										},
										{
											"begin": 8218,
											"end": 8230,
											"name": "JUMPI",
											"source": 12
										},
										{
											"begin": 8218,
											"end": 8230,
											"name": "PUSH",
											"source": 12,
											"value": "100"
										},
										{
											"begin": 8218,
											"end": 8230,
											"name": "DUP1",
											"source": 12
										},
										{
											"begin": 8218,
											"end": 8230,
											"name": "DUP4",
											"source": 12
										},
										{
											"begin": 8218,
											"end": 8230,
											"name": "SLOAD",
											"source": 12
										},
										{
											"begin": 8218,
											"end": 8230,
											"name": "DIV",
											"source": 12
										},
										{
											"begin": 8218,
											"end": 8230,
											"name": "MUL",
											"source": 12
										},
										{
											"begin": 8218,
											"end": 8230,
											"name": "DUP4",
											"source": 12
										},
										{
											"begin": 8218,
											"end": 8230,
											"name": "MSTORE",
											"source": 12
										},
										{
											"begin": 8218,
											"end": 8230,
											"name": "SWAP2",
											"source": 12
										},
										{
											"begin": 8218,
											"end": 8230,
											"name": "PUSH",
											"source": 12,
											"value": "20"
										},
										{
											"begin": 8218,
											"end": 8230,
											"name": "ADD",
											"source": 12
										},
										{
											"begin": 8218,
											"end": 8230,
											"name": "SWAP2",
											"source": 12
										},
										{
											"begin": 8218,
											"end": 8230,
											"name": "PUSH [tag]",
											"source": 12,
											"value": "259"
										},
										{
											"begin": 8218,
											"end": 8230,
											"name": "JUMP",
											"source": 12
										},
										{
											"begin": 8218,
											"end": 8230,
											"name": "tag",
											"source": 12,
											"value": "260"
										},
										{
											"begin": 8218,
											"end": 8230,
											"name": "JUMPDEST",
											"source": 12
										},
										{
											"begin": 8218,
											"end": 8230,
											"name": "DUP3",
											"source": 12
										},
										{
											"begin": 8218,
											"end": 8230,
											"name": "ADD",
											"source": 12
										},
										{
											"begin": 8218,
											"end": 8230,
											"name": "SWAP2",
											"source": 12
										},
										{
											"begin": 8218,
											"end": 8230,
											"name": "SWAP1",
											"source": 12
										},
										{
											"begin": 8218,
											"end": 8230,
											"name": "PUSH",
											"source": 12,
											"value": "0"
										},
										{
											"begin": 8218,
											"end": 8230,
											"name": "MSTORE",
											"source": 12
										},
										{
											"begin": 8218,
											"end": 8230,
											"name": "PUSH",
											"source": 12,
											"value": "20"
										},
										{
											"begin": 8218,
											"end": 8230,
											"name": "PUSH",
											"source": 12,
											"value": "0"
										},
										{
											"begin": 8218,
											"end": 8230,
											"name": "KECCAK256",
											"source": 12
										},
										{
											"begin": 8218,
											"end": 8230,
											"name": "SWAP1",
											"source": 12
										},
										{
											"begin": 8218,
											"end": 8230,
											"name": "tag",
											"source": 12,
											"value": "261"
										},
										{
											"begin": 8218,
											"end": 8230,
											"name": "JUMPDEST",
											"source": 12
										},
										{
											"begin": 8218,
											"end": 8230,
											"name": "DUP2",
											"source": 12
										},
										{
											"begin": 8218,
											"end": 8230,
											"name": "SLOAD",
											"source": 12
										},
										{
											"begin": 8218,
											"end": 8230,
											"name": "DUP2",
											"source": 12
										},
										{
											"begin": 8218,
											"end": 8230,
											"name": "MSTORE",
											"source": 12
										},
										{
											"begin": 8218,
											"end": 8230,
											"name": "SWAP1",
											"source": 12
										},
										{
											"begin": 8218,
											"end": 8230,
											"name": "PUSH",
											"source": 12,
											"value": "1"
										},
										{
											"begin": 8218,
											"end": 8230,
											"name": "ADD",
											"source": 12
										},
										{
											"begin": 8218,
											"end": 8230,
											"name": "SWAP1",
											"source": 12
										},
										{
											"begin": 8218,
											"end": 8230,
											"name": "PUSH",
											"source": 12,
											"value": "20"
										},
										{
											"begin": 8218,
											"end": 8230,
											"name": "ADD",
											"source": 12
										},
										{
											"begin": 8218,
											"end": 8230,
											"name": "DUP1",
											"source": 12
										},
										{
											"begin": 8218,
											"end": 8230,
											"name": "DUP4",
											"source": 12
										},
										{
											"begin": 8218,
											"end": 8230,
											"name": "GT",
											"source": 12
										},
										{
											"begin": 8218,
											"end": 8230,
											"name": "PUSH [tag]",
											"source": 12,
											"value": "261"
										},
										{
											"begin": 8218,
											"end": 8230,
											"name": "JUMPI",
											"source": 12
										},
										{
											"begin": 8218,
											"end": 8230,
											"name": "DUP3",
											"source": 12
										},
										{
											"begin": 8218,
											"end": 8230,
											"name": "SWAP1",
											"source": 12
										},
										{
											"begin": 8218,
											"end": 8230,
											"name": "SUB",
											"source": 12
										},
										{
											"begin": 8218,
											"end": 8230,
											"name": "PUSH",
											"source": 12,
											"value": "1F"
										},
										{
											"begin": 8218,
											"end": 8230,
											"name": "AND",
											"source": 12
										},
										{
											"begin": 8218,
											"end": 8230,
											"name": "DUP3",
											"source": 12
										},
										{
											"begin": 8218,
											"end": 8230,
											"name": "ADD",
											"source": 12
										},
										{
											"begin": 8218,
											"end": 8230,
											"name": "SWAP2",
											"source": 12
										},
										{
											"begin": 8218,
											"end": 8230,
											"name": "tag",
											"source": 12,
											"value": "259"
										},
										{
											"begin": 8218,
											"end": 8230,
											"name": "JUMPDEST",
											"source": 12
										},
										{
											"begin": 8218,
											"end": 8230,
											"name": "POP",
											"source": 12
										},
										{
											"begin": 8218,
											"end": 8230,
											"name": "POP",
											"source": 12
										},
										{
											"begin": 8218,
											"end": 8230,
											"name": "POP",
											"source": 12
										},
										{
											"begin": 8218,
											"end": 8230,
											"name": "POP",
											"source": 12
										},
										{
											"begin": 8218,
											"end": 8230,
											"name": "POP",
											"source": 12
										},
										{
											"begin": 8218,
											"end": 8230,
											"name": "SWAP1",
											"source": 12
										},
										{
											"begin": 8218,
											"end": 8230,
											"name": "POP",
											"source": 12
										},
										{
											"begin": 8139,
											"end": 8237,
											"name": "SWAP1",
											"source": 12
										},
										{
											"begin": 8139,
											"end": 8237,
											"name": "JUMP",
											"source": 12,
											"value": "[out]"
										},
										{
											"begin": 9595,
											"end": 9795,
											"name": "tag",
											"source": 12,
											"value": "84"
										},
										{
											"begin": 9595,
											"end": 9795,
											"name": "JUMPDEST",
											"source": 12
										},
										{
											"begin": 9663,
											"end": 9670,
											"name": "PUSH",
											"source": 12,
											"value": "0"
										},
										{
											"begin": 9687,
											"end": 9703,
											"name": "PUSH [tag]",
											"source": 12,
											"value": "263"
										},
										{
											"begin": 9695,
											"end": 9702,
											"name": "DUP3",
											"source": 12
										},
										{
											"begin": 9687,
											"end": 9694,
											"name": "PUSH [tag]",
											"source": 12,
											"value": "264"
										},
										{
											"begin": 9687,
											"end": 9703,
											"name": "JUMP",
											"source": 12,
											"value": "[in]"
										},
										{
											"begin": 9687,
											"end": 9703,
											"name": "tag",
											"source": 12,
											"value": "263"
										},
										{
											"begin": 9687,
											"end": 9703,
											"name": "JUMPDEST",
											"source": 12
										},
										{
											"begin": 9682,
											"end": 9746,
											"name": "PUSH [tag]",
											"source": 12,
											"value": "265"
										},
										{
											"begin": 9682,
											"end": 9746,
											"name": "JUMPI",
											"source": 12
										},
										{
											"begin": 9712,
											"end": 9746,
											"name": "PUSH",
											"source": 12,
											"value": "40"
										},
										{
											"begin": 9712,
											"end": 9746,
											"name": "MLOAD",
											"source": 12
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "33D1C039"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "E2"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SHL",
											"source": -1
										},
										{
											"begin": 9712,
											"end": 9746,
											"name": "DUP2",
											"source": 12
										},
										{
											"begin": 9712,
											"end": 9746,
											"name": "MSTORE",
											"source": 12
										},
										{
											"begin": 9712,
											"end": 9746,
											"name": "PUSH",
											"source": 12,
											"value": "4"
										},
										{
											"begin": 9712,
											"end": 9746,
											"name": "ADD",
											"source": 12
										},
										{
											"begin": 9712,
											"end": 9746,
											"name": "PUSH",
											"source": 12,
											"value": "40"
										},
										{
											"begin": 9712,
											"end": 9746,
											"name": "MLOAD",
											"source": 12
										},
										{
											"begin": 9712,
											"end": 9746,
											"name": "DUP1",
											"source": 12
										},
										{
											"begin": 9712,
											"end": 9746,
											"name": "SWAP2",
											"source": 12
										},
										{
											"begin": 9712,
											"end": 9746,
											"name": "SUB",
											"source": 12
										},
										{
											"begin": 9712,
											"end": 9746,
											"name": "SWAP1",
											"source": 12
										},
										{
											"begin": 9712,
											"end": 9746,
											"name": "REVERT",
											"source": 12
										},
										{
											"begin": 9682,
											"end": 9746,
											"name": "tag",
											"source": 12,
											"value": "265"
										},
										{
											"begin": 9682,
											"end": 9746,
											"name": "JUMPDEST",
											"source": 12
										},
										{
											"begin": -1,
											"end": -1,
											"name": "POP",
											"source": -1
										},
										{
											"begin": 9764,
											"end": 9788,
											"name": "PUSH",
											"source": 12,
											"value": "0"
										},
										{
											"begin": 9764,
											"end": 9788,
											"name": "SWAP1",
											"source": 12
										},
										{
											"begin": 9764,
											"end": 9788,
											"name": "DUP2",
											"source": 12
										},
										{
											"begin": 9764,
											"end": 9788,
											"name": "MSTORE",
											"source": 12
										},
										{
											"begin": 9764,
											"end": 9779,
											"name": "PUSH",
											"source": 12,
											"value": "6"
										},
										{
											"begin": 9764,
											"end": 9788,
											"name": "PUSH",
											"source": 12,
											"value": "20"
										},
										{
											"begin": 9764,
											"end": 9788,
											"name": "MSTORE",
											"source": 12
										},
										{
											"begin": 9764,
											"end": 9788,
											"name": "PUSH",
											"source": 12,
											"value": "40"
										},
										{
											"begin": 9764,
											"end": 9788,
											"name": "SWAP1",
											"source": 12
										},
										{
											"begin": 9764,
											"end": 9788,
											"name": "KECCAK256",
											"source": 12
										},
										{
											"begin": 9764,
											"end": 9788,
											"name": "SLOAD",
											"source": 12
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "A0"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SHL",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SUB",
											"source": -1
										},
										{
											"begin": 9764,
											"end": 9788,
											"name": "AND",
											"source": 12
										},
										{
											"begin": 9764,
											"end": 9788,
											"name": "SWAP1",
											"source": 12
										},
										{
											"begin": 9595,
											"end": 9795,
											"name": "JUMP",
											"source": 12,
											"value": "[out]"
										},
										{
											"begin": 9172,
											"end": 9534,
											"name": "tag",
											"source": 12,
											"value": "91"
										},
										{
											"begin": 9172,
											"end": 9534,
											"name": "JUMPDEST",
											"source": 12
										},
										{
											"begin": 9244,
											"end": 9257,
											"name": "PUSH",
											"source": 12,
											"value": "0"
										},
										{
											"begin": 9260,
											"end": 9284,
											"name": "PUSH [tag]",
											"source": 12,
											"value": "267"
										},
										{
											"begin": 9276,
											"end": 9283,
											"name": "DUP3",
											"source": 12
										},
										{
											"begin": 9260,
											"end": 9275,
											"name": "PUSH [tag]",
											"source": 12,
											"value": "144"
										},
										{
											"begin": 9260,
											"end": 9284,
											"name": "JUMP",
											"source": 12,
											"value": "[in]"
										},
										{
											"begin": 9260,
											"end": 9284,
											"name": "tag",
											"source": 12,
											"value": "267"
										},
										{
											"begin": 9260,
											"end": 9284,
											"name": "JUMPDEST",
											"source": 12
										},
										{
											"begin": 9244,
											"end": 9284,
											"name": "SWAP1",
											"source": 12
										},
										{
											"begin": 9244,
											"end": 9284,
											"name": "POP",
											"source": 12
										},
										{
											"begin": 9304,
											"end": 9309,
											"name": "DUP1",
											"source": 12
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "A0"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SHL",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SUB",
											"source": -1
										},
										{
											"begin": 9298,
											"end": 9309,
											"name": "AND",
											"source": 12
										},
										{
											"begin": 9298,
											"end": 9300,
											"name": "DUP4",
											"source": 12
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "A0"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SHL",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SUB",
											"source": -1
										},
										{
											"begin": 9298,
											"end": 9309,
											"name": "AND",
											"source": 12
										},
										{
											"begin": 9298,
											"end": 9309,
											"name": "EQ",
											"source": 12
										},
										{
											"begin": 9294,
											"end": 9342,
											"name": "ISZERO",
											"source": 12
										},
										{
											"begin": 9294,
											"end": 9342,
											"name": "PUSH [tag]",
											"source": 12,
											"value": "268"
										},
										{
											"begin": 9294,
											"end": 9342,
											"name": "JUMPI",
											"source": 12
										},
										{
											"begin": 9318,
											"end": 9342,
											"name": "PUSH",
											"source": 12,
											"value": "40"
										},
										{
											"begin": 9318,
											"end": 9342,
											"name": "MLOAD",
											"source": 12
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "250FDEE3"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "E2"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SHL",
											"source": -1
										},
										{
											"begin": 9318,
											"end": 9342,
											"name": "DUP2",
											"source": 12
										},
										{
											"begin": 9318,
											"end": 9342,
											"name": "MSTORE",
											"source": 12
										},
										{
											"begin": 9318,
											"end": 9342,
											"name": "PUSH",
											"source": 12,
											"value": "4"
										},
										{
											"begin": 9318,
											"end": 9342,
											"name": "ADD",
											"source": 12
										},
										{
											"begin": 9318,
											"end": 9342,
											"name": "PUSH",
											"source": 12,
											"value": "40"
										},
										{
											"begin": 9318,
											"end": 9342,
											"name": "MLOAD",
											"source": 12
										},
										{
											"begin": 9318,
											"end": 9342,
											"name": "DUP1",
											"source": 12
										},
										{
											"begin": 9318,
											"end": 9342,
											"name": "SWAP2",
											"source": 12
										},
										{
											"begin": 9318,
											"end": 9342,
											"name": "SUB",
											"source": 12
										},
										{
											"begin": 9318,
											"end": 9342,
											"name": "SWAP1",
											"source": 12
										},
										{
											"begin": 9318,
											"end": 9342,
											"name": "REVERT",
											"source": 12
										},
										{
											"begin": 9294,
											"end": 9342,
											"name": "tag",
											"source": 12,
											"value": "268"
										},
										{
											"begin": 9294,
											"end": 9342,
											"name": "JUMPDEST",
											"source": 12
										},
										{
											"begin": 719,
											"end": 729,
											"name": "CALLER",
											"source": 6
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "A0"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SHL",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SUB",
											"source": -1
										},
										{
											"begin": 9357,
											"end": 9378,
											"name": "DUP3",
											"source": 12
										},
										{
											"begin": 9357,
											"end": 9378,
											"name": "AND",
											"source": 12
										},
										{
											"begin": 9357,
											"end": 9378,
											"name": "EQ",
											"source": 12
										},
										{
											"begin": 9357,
											"end": 9378,
											"name": "DUP1",
											"source": 12
										},
										{
											"begin": 9357,
											"end": 9378,
											"name": "ISZERO",
											"source": 12
										},
										{
											"begin": 9357,
											"end": 9378,
											"name": "SWAP1",
											"source": 12
										},
										{
											"begin": 9357,
											"end": 9420,
											"name": "PUSH [tag]",
											"source": 12,
											"value": "270"
										},
										{
											"begin": 9357,
											"end": 9420,
											"name": "JUMPI",
											"source": 12
										},
										{
											"begin": -1,
											"end": -1,
											"name": "POP",
											"source": -1
										},
										{
											"begin": 9383,
											"end": 9420,
											"name": "PUSH [tag]",
											"source": 12,
											"value": "271"
										},
										{
											"begin": 9400,
											"end": 9405,
											"name": "DUP2",
											"source": 12
										},
										{
											"begin": 719,
											"end": 729,
											"name": "CALLER",
											"source": 6
										},
										{
											"begin": 10202,
											"end": 10364,
											"name": "PUSH [tag]",
											"source": 12,
											"value": "232"
										},
										{
											"begin": 10202,
											"end": 10364,
											"name": "JUMP",
											"source": 12,
											"value": "[in]"
										},
										{
											"begin": 9383,
											"end": 9420,
											"name": "tag",
											"source": 12,
											"value": "271"
										},
										{
											"begin": 9383,
											"end": 9420,
											"name": "JUMPDEST",
											"source": 12
										},
										{
											"begin": 9382,
											"end": 9420,
											"name": "ISZERO",
											"source": 12
										},
										{
											"begin": 9357,
											"end": 9420,
											"name": "tag",
											"source": 12,
											"value": "270"
										},
										{
											"begin": 9357,
											"end": 9420,
											"name": "JUMPDEST",
											"source": 12
										},
										{
											"begin": 9353,
											"end": 9489,
											"name": "ISZERO",
											"source": 12
										},
										{
											"begin": 9353,
											"end": 9489,
											"name": "PUSH [tag]",
											"source": 12,
											"value": "273"
										},
										{
											"begin": 9353,
											"end": 9489,
											"name": "JUMPI",
											"source": 12
										},
										{
											"begin": 9443,
											"end": 9478,
											"name": "PUSH",
											"source": 12,
											"value": "40"
										},
										{
											"begin": 9443,
											"end": 9478,
											"name": "MLOAD",
											"source": 12
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "67D9DCA1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "E1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SHL",
											"source": -1
										},
										{
											"begin": 9443,
											"end": 9478,
											"name": "DUP2",
											"source": 12
										},
										{
											"begin": 9443,
											"end": 9478,
											"name": "MSTORE",
											"source": 12
										},
										{
											"begin": 9443,
											"end": 9478,
											"name": "PUSH",
											"source": 12,
											"value": "4"
										},
										{
											"begin": 9443,
											"end": 9478,
											"name": "ADD",
											"source": 12
										},
										{
											"begin": 9443,
											"end": 9478,
											"name": "PUSH",
											"source": 12,
											"value": "40"
										},
										{
											"begin": 9443,
											"end": 9478,
											"name": "MLOAD",
											"source": 12
										},
										{
											"begin": 9443,
											"end": 9478,
											"name": "DUP1",
											"source": 12
										},
										{
											"begin": 9443,
											"end": 9478,
											"name": "SWAP2",
											"source": 12
										},
										{
											"begin": 9443,
											"end": 9478,
											"name": "SUB",
											"source": 12
										},
										{
											"begin": 9443,
											"end": 9478,
											"name": "SWAP1",
											"source": 12
										},
										{
											"begin": 9443,
											"end": 9478,
											"name": "REVERT",
											"source": 12
										},
										{
											"begin": 9353,
											"end": 9489,
											"name": "tag",
											"source": 12,
											"value": "273"
										},
										{
											"begin": 9353,
											"end": 9489,
											"name": "JUMPDEST",
											"source": 12
										},
										{
											"begin": 9499,
											"end": 9527,
											"name": "PUSH [tag]",
											"source": 12,
											"value": "274"
										},
										{
											"begin": 9508,
											"end": 9510,
											"name": "DUP4",
											"source": 12
										},
										{
											"begin": 9512,
											"end": 9519,
											"name": "DUP4",
											"source": 12
										},
										{
											"begin": 9521,
											"end": 9526,
											"name": "DUP4",
											"source": 12
										},
										{
											"begin": 9499,
											"end": 9507,
											"name": "PUSH [tag]",
											"source": 12,
											"value": "275"
										},
										{
											"begin": 9499,
											"end": 9527,
											"name": "JUMP",
											"source": 12,
											"value": "[in]"
										},
										{
											"begin": 9499,
											"end": 9527,
											"name": "tag",
											"source": 12,
											"value": "274"
										},
										{
											"begin": 9499,
											"end": 9527,
											"name": "JUMPDEST",
											"source": 12
										},
										{
											"begin": 9234,
											"end": 9534,
											"name": "POP",
											"source": 12
										},
										{
											"begin": 9172,
											"end": 9534,
											"name": "POP",
											"source": 12
										},
										{
											"begin": 9172,
											"end": 9534,
											"name": "POP",
											"source": 12
										},
										{
											"begin": 9172,
											"end": 9534,
											"name": "JUMP",
											"source": 12,
											"value": "[out]"
										},
										{
											"begin": 10426,
											"end": 10590,
											"name": "tag",
											"source": 12,
											"value": "105"
										},
										{
											"begin": 10426,
											"end": 10590,
											"name": "JUMPDEST",
											"source": 12
										},
										{
											"begin": 10555,
											"end": 10583,
											"name": "PUSH [tag]",
											"source": 12,
											"value": "274"
										},
										{
											"begin": 10565,
											"end": 10569,
											"name": "DUP4",
											"source": 12
										},
										{
											"begin": 10571,
											"end": 10573,
											"name": "DUP4",
											"source": 12
										},
										{
											"begin": 10575,
											"end": 10582,
											"name": "DUP4",
											"source": 12
										},
										{
											"begin": 10555,
											"end": 10564,
											"name": "PUSH [tag]",
											"source": 12,
											"value": "281"
										},
										{
											"begin": 10555,
											"end": 10583,
											"name": "JUMP",
											"source": 12,
											"value": "[in]"
										},
										{
											"begin": 1816,
											"end": 2674,
											"name": "tag",
											"source": 11,
											"value": "109"
										},
										{
											"begin": 1816,
											"end": 2674,
											"name": "JUMPDEST",
											"source": 11
										},
										{
											"begin": 1169,
											"end": 1178,
											"name": "ORIGIN",
											"source": 11
										},
										{
											"begin": 1182,
											"end": 1192,
											"name": "CALLER",
											"source": 11
										},
										{
											"begin": 1169,
											"end": 1192,
											"name": "EQ",
											"source": 11
										},
										{
											"begin": 1161,
											"end": 1245,
											"name": "PUSH [tag]",
											"source": 11,
											"value": "283"
										},
										{
											"begin": 1161,
											"end": 1245,
											"name": "JUMPI",
											"source": 11
										},
										{
											"begin": 1161,
											"end": 1245,
											"name": "PUSH",
											"source": 11,
											"value": "40"
										},
										{
											"begin": 1161,
											"end": 1245,
											"name": "MLOAD",
											"source": 11
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "461BCD"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "E5"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SHL",
											"source": -1
										},
										{
											"begin": 1161,
											"end": 1245,
											"name": "DUP2",
											"source": 11
										},
										{
											"begin": 1161,
											"end": 1245,
											"name": "MSTORE",
											"source": 11
										},
										{
											"begin": 1161,
											"end": 1245,
											"name": "PUSH",
											"source": 11,
											"value": "4"
										},
										{
											"begin": 1161,
											"end": 1245,
											"name": "ADD",
											"source": 11
										},
										{
											"begin": 1161,
											"end": 1245,
											"name": "PUSH [tag]",
											"source": 11,
											"value": "250"
										},
										{
											"begin": 1161,
											"end": 1245,
											"name": "SWAP1",
											"source": 11
										},
										{
											"begin": 1161,
											"end": 1245,
											"name": "PUSH [tag]",
											"source": 11,
											"value": "285"
										},
										{
											"begin": 1161,
											"end": 1245,
											"name": "JUMP",
											"source": 11,
											"value": "[in]"
										},
										{
											"begin": 1161,
											"end": 1245,
											"name": "tag",
											"source": 11,
											"value": "283"
										},
										{
											"begin": 1161,
											"end": 1245,
											"name": "JUMPDEST",
											"source": 11
										},
										{
											"begin": 1936,
											"end": 1949,
											"name": "PUSH",
											"source": 11,
											"value": "B"
										},
										{
											"begin": 1936,
											"end": 1949,
											"name": "SLOAD",
											"source": 11
										},
										{
											"begin": 1936,
											"end": 1949,
											"name": "PUSH",
											"source": 11,
											"value": "10000"
										},
										{
											"begin": 1936,
											"end": 1949,
											"name": "SWAP1",
											"source": 11
										},
										{
											"begin": 1936,
											"end": 1949,
											"name": "DIV",
											"source": 11
										},
										{
											"begin": 1936,
											"end": 1949,
											"name": "PUSH",
											"source": 11,
											"value": "FF"
										},
										{
											"begin": 1936,
											"end": 1949,
											"name": "AND",
											"source": 11
										},
										{
											"begin": 1928,
											"end": 1991,
											"name": "PUSH [tag]",
											"source": 11,
											"value": "287"
										},
										{
											"begin": 1928,
											"end": 1991,
											"name": "JUMPI",
											"source": 11
										},
										{
											"begin": 1928,
											"end": 1991,
											"name": "PUSH",
											"source": 11,
											"value": "40"
										},
										{
											"begin": 1928,
											"end": 1991,
											"name": "MLOAD",
											"source": 11
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "461BCD"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "E5"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SHL",
											"source": -1
										},
										{
											"begin": 1928,
											"end": 1991,
											"name": "DUP2",
											"source": 11
										},
										{
											"begin": 1928,
											"end": 1991,
											"name": "MSTORE",
											"source": 11
										},
										{
											"begin": 8860,
											"end": 8862,
											"name": "PUSH",
											"source": 13,
											"value": "20"
										},
										{
											"begin": 1928,
											"end": 1991,
											"name": "PUSH",
											"source": 11,
											"value": "4"
										},
										{
											"begin": 1928,
											"end": 1991,
											"name": "DUP3",
											"source": 11
										},
										{
											"begin": 1928,
											"end": 1991,
											"name": "ADD",
											"source": 11
										},
										{
											"begin": 8842,
											"end": 8863,
											"name": "MSTORE",
											"source": 13
										},
										{
											"begin": 8899,
											"end": 8901,
											"name": "PUSH",
											"source": 13,
											"value": "25"
										},
										{
											"begin": 8879,
											"end": 8897,
											"name": "PUSH",
											"source": 13,
											"value": "24"
										},
										{
											"begin": 8879,
											"end": 8897,
											"name": "DUP3",
											"source": 13
										},
										{
											"begin": 8879,
											"end": 8897,
											"name": "ADD",
											"source": 13
										},
										{
											"begin": 8872,
											"end": 8902,
											"name": "MSTORE",
											"source": 13
										},
										{
											"begin": 8938,
											"end": 8972,
											"name": "PUSH",
											"source": 13,
											"value": "43727970746F42756C6C446F6773203A3A204D696E74696E67206973206F6E20"
										},
										{
											"begin": 8918,
											"end": 8936,
											"name": "PUSH",
											"source": 13,
											"value": "44"
										},
										{
											"begin": 8918,
											"end": 8936,
											"name": "DUP3",
											"source": 13
										},
										{
											"begin": 8918,
											"end": 8936,
											"name": "ADD",
											"source": 13
										},
										{
											"begin": 8911,
											"end": 8973,
											"name": "MSTORE",
											"source": 13
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "5061757365"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "D8"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SHL",
											"source": -1
										},
										{
											"begin": 8989,
											"end": 9007,
											"name": "PUSH",
											"source": 13,
											"value": "64"
										},
										{
											"begin": 8989,
											"end": 9007,
											"name": "DUP3",
											"source": 13
										},
										{
											"begin": 8989,
											"end": 9007,
											"name": "ADD",
											"source": 13
										},
										{
											"begin": 8982,
											"end": 9017,
											"name": "MSTORE",
											"source": 13
										},
										{
											"begin": 9034,
											"end": 9053,
											"name": "PUSH",
											"source": 13,
											"value": "84"
										},
										{
											"begin": 9034,
											"end": 9053,
											"name": "ADD",
											"source": 13
										},
										{
											"begin": 1928,
											"end": 1991,
											"name": "PUSH [tag]",
											"source": 11,
											"value": "250"
										},
										{
											"begin": 8658,
											"end": 9059,
											"name": "JUMP",
											"source": 13
										},
										{
											"begin": 1928,
											"end": 1991,
											"name": "tag",
											"source": 11,
											"value": "287"
										},
										{
											"begin": 1928,
											"end": 1991,
											"name": "JUMPDEST",
											"source": 11
										},
										{
											"begin": 346,
											"end": 350,
											"name": "PUSH",
											"source": 11,
											"value": "8AE"
										},
										{
											"begin": 2026,
											"end": 2035,
											"name": "DUP2",
											"source": 11
										},
										{
											"begin": 2010,
											"end": 2023,
											"name": "PUSH [tag]",
											"source": 11,
											"value": "290"
										},
										{
											"begin": 4364,
											"end": 4376,
											"name": "PUSH",
											"source": 12,
											"value": "1"
										},
										{
											"begin": 4364,
											"end": 4376,
											"name": "SLOAD",
											"source": 12
										},
										{
											"begin": 4158,
											"end": 4165,
											"name": "PUSH",
											"source": 12,
											"value": "0"
										},
										{
											"begin": 4348,
											"end": 4361,
											"name": "SLOAD",
											"source": 12
										},
										{
											"begin": 4348,
											"end": 4376,
											"name": "SUB",
											"source": 12
										},
										{
											"begin": 4348,
											"end": 4376,
											"name": "SWAP1",
											"source": 12
										},
										{
											"begin": 4114,
											"end": 4411,
											"name": "JUMP",
											"source": 12
										},
										{
											"begin": 2010,
											"end": 2023,
											"name": "tag",
											"source": 11,
											"value": "290"
										},
										{
											"begin": 2010,
											"end": 2023,
											"name": "JUMPDEST",
											"source": 11
										},
										{
											"begin": 2010,
											"end": 2035,
											"name": "PUSH [tag]",
											"source": 11,
											"value": "291"
										},
										{
											"begin": 2010,
											"end": 2035,
											"name": "SWAP2",
											"source": 11
										},
										{
											"begin": 2010,
											"end": 2035,
											"name": "SWAP1",
											"source": 11
										},
										{
											"begin": 2010,
											"end": 2035,
											"name": "PUSH [tag]",
											"source": 11,
											"value": "292"
										},
										{
											"begin": 2010,
											"end": 2035,
											"name": "JUMP",
											"source": 11,
											"value": "[in]"
										},
										{
											"begin": 2010,
											"end": 2035,
											"name": "tag",
											"source": 11,
											"value": "291"
										},
										{
											"begin": 2010,
											"end": 2035,
											"name": "JUMPDEST",
											"source": 11
										},
										{
											"begin": 2009,
											"end": 2050,
											"name": "GT",
											"source": 11
										},
										{
											"begin": 2009,
											"end": 2050,
											"name": "ISZERO",
											"source": 11
										},
										{
											"begin": 2001,
											"end": 2102,
											"name": "PUSH [tag]",
											"source": 11,
											"value": "293"
										},
										{
											"begin": 2001,
											"end": 2102,
											"name": "JUMPI",
											"source": 11
										},
										{
											"begin": 2001,
											"end": 2102,
											"name": "PUSH",
											"source": 11,
											"value": "40"
										},
										{
											"begin": 2001,
											"end": 2102,
											"name": "MLOAD",
											"source": 11
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "461BCD"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "E5"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SHL",
											"source": -1
										},
										{
											"begin": 2001,
											"end": 2102,
											"name": "DUP2",
											"source": 11
										},
										{
											"begin": 2001,
											"end": 2102,
											"name": "MSTORE",
											"source": 11
										},
										{
											"begin": 9531,
											"end": 9533,
											"name": "PUSH",
											"source": 13,
											"value": "20"
										},
										{
											"begin": 2001,
											"end": 2102,
											"name": "PUSH",
											"source": 11,
											"value": "4"
										},
										{
											"begin": 2001,
											"end": 2102,
											"name": "DUP3",
											"source": 11
										},
										{
											"begin": 2001,
											"end": 2102,
											"name": "ADD",
											"source": 11
										},
										{
											"begin": 9513,
											"end": 9534,
											"name": "MSTORE",
											"source": 13
										},
										{
											"begin": 9570,
											"end": 9572,
											"name": "PUSH",
											"source": 13,
											"value": "2F"
										},
										{
											"begin": 9550,
											"end": 9568,
											"name": "PUSH",
											"source": 13,
											"value": "24"
										},
										{
											"begin": 9550,
											"end": 9568,
											"name": "DUP3",
											"source": 13
										},
										{
											"begin": 9550,
											"end": 9568,
											"name": "ADD",
											"source": 13
										},
										{
											"begin": 9543,
											"end": 9573,
											"name": "MSTORE",
											"source": 13
										},
										{
											"begin": 9609,
											"end": 9643,
											"name": "PUSH",
											"source": 13,
											"value": "43727970746F42756C6C446F6773203A3A2043616E6E6F74206D696E74206265"
										},
										{
											"begin": 9589,
											"end": 9607,
											"name": "PUSH",
											"source": 13,
											"value": "44"
										},
										{
											"begin": 9589,
											"end": 9607,
											"name": "DUP3",
											"source": 13
										},
										{
											"begin": 9589,
											"end": 9607,
											"name": "ADD",
											"source": 13
										},
										{
											"begin": 9582,
											"end": 9644,
											"name": "MSTORE",
											"source": 13
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "796F6E64206D617820737570706C79"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "88"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SHL",
											"source": -1
										},
										{
											"begin": 9660,
											"end": 9678,
											"name": "PUSH",
											"source": 13,
											"value": "64"
										},
										{
											"begin": 9660,
											"end": 9678,
											"name": "DUP3",
											"source": 13
										},
										{
											"begin": 9660,
											"end": 9678,
											"name": "ADD",
											"source": 13
										},
										{
											"begin": 9653,
											"end": 9698,
											"name": "MSTORE",
											"source": 13
										},
										{
											"begin": 9715,
											"end": 9734,
											"name": "PUSH",
											"source": 13,
											"value": "84"
										},
										{
											"begin": 9715,
											"end": 9734,
											"name": "ADD",
											"source": 13
										},
										{
											"begin": 2001,
											"end": 2102,
											"name": "PUSH [tag]",
											"source": 11,
											"value": "250"
										},
										{
											"begin": 9329,
											"end": 9740,
											"name": "JUMP",
											"source": 13
										},
										{
											"begin": 2001,
											"end": 2102,
											"name": "tag",
											"source": 11,
											"value": "293"
										},
										{
											"begin": 2001,
											"end": 2102,
											"name": "JUMPDEST",
											"source": 11
										},
										{
											"begin": 2140,
											"end": 2150,
											"name": "CALLER",
											"source": 11
										},
										{
											"begin": 2121,
											"end": 2151,
											"name": "PUSH",
											"source": 11,
											"value": "0"
										},
										{
											"begin": 2121,
											"end": 2151,
											"name": "SWAP1",
											"source": 11
										},
										{
											"begin": 2121,
											"end": 2151,
											"name": "DUP2",
											"source": 11
										},
										{
											"begin": 2121,
											"end": 2151,
											"name": "MSTORE",
											"source": 11
										},
										{
											"begin": 2121,
											"end": 2139,
											"name": "PUSH",
											"source": 11,
											"value": "E"
										},
										{
											"begin": 2121,
											"end": 2151,
											"name": "PUSH",
											"source": 11,
											"value": "20"
										},
										{
											"begin": 2121,
											"end": 2151,
											"name": "MSTORE",
											"source": 11
										},
										{
											"begin": 2121,
											"end": 2151,
											"name": "PUSH",
											"source": 11,
											"value": "40"
										},
										{
											"begin": 2121,
											"end": 2151,
											"name": "SWAP1",
											"source": 11
										},
										{
											"begin": 2121,
											"end": 2151,
											"name": "KECCAK256",
											"source": 11
										},
										{
											"begin": 2121,
											"end": 2151,
											"name": "SLOAD",
											"source": 11
										},
										{
											"begin": 451,
											"end": 453,
											"name": "PUSH",
											"source": 11,
											"value": "A"
										},
										{
											"begin": 451,
											"end": 453,
											"name": "SWAP1",
											"source": 11
										},
										{
											"begin": 2121,
											"end": 2163,
											"name": "PUSH [tag]",
											"source": 11,
											"value": "296"
										},
										{
											"begin": 2121,
											"end": 2163,
											"name": "SWAP1",
											"source": 11
										},
										{
											"begin": 2154,
											"end": 2163,
											"name": "DUP4",
											"source": 11
										},
										{
											"begin": 2154,
											"end": 2163,
											"name": "SWAP1",
											"source": 11
										},
										{
											"begin": 2121,
											"end": 2163,
											"name": "PUSH [tag]",
											"source": 11,
											"value": "292"
										},
										{
											"begin": 2121,
											"end": 2163,
											"name": "JUMP",
											"source": 11,
											"value": "[in]"
										},
										{
											"begin": 2121,
											"end": 2163,
											"name": "tag",
											"source": 11,
											"value": "296"
										},
										{
											"begin": 2121,
											"end": 2163,
											"name": "JUMPDEST",
											"source": 11
										},
										{
											"begin": 2120,
											"end": 2187,
											"name": "GT",
											"source": 11
										},
										{
											"begin": 2120,
											"end": 2187,
											"name": "ISZERO",
											"source": 11
										},
										{
											"begin": 2112,
											"end": 2247,
											"name": "PUSH [tag]",
											"source": 11,
											"value": "297"
										},
										{
											"begin": 2112,
											"end": 2247,
											"name": "JUMPI",
											"source": 11
										},
										{
											"begin": 2112,
											"end": 2247,
											"name": "PUSH",
											"source": 11,
											"value": "40"
										},
										{
											"begin": 2112,
											"end": 2247,
											"name": "MLOAD",
											"source": 11
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "461BCD"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "E5"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SHL",
											"source": -1
										},
										{
											"begin": 2112,
											"end": 2247,
											"name": "DUP2",
											"source": 11
										},
										{
											"begin": 2112,
											"end": 2247,
											"name": "MSTORE",
											"source": 11
										},
										{
											"begin": 9947,
											"end": 9949,
											"name": "PUSH",
											"source": 13,
											"value": "20"
										},
										{
											"begin": 2112,
											"end": 2247,
											"name": "PUSH",
											"source": 11,
											"value": "4"
										},
										{
											"begin": 2112,
											"end": 2247,
											"name": "DUP3",
											"source": 11
										},
										{
											"begin": 2112,
											"end": 2247,
											"name": "ADD",
											"source": 11
										},
										{
											"begin": 9929,
											"end": 9950,
											"name": "MSTORE",
											"source": 13
										},
										{
											"begin": 9986,
											"end": 9988,
											"name": "PUSH",
											"source": 13,
											"value": "37"
										},
										{
											"begin": 9966,
											"end": 9984,
											"name": "PUSH",
											"source": 13,
											"value": "24"
										},
										{
											"begin": 9966,
											"end": 9984,
											"name": "DUP3",
											"source": 13
										},
										{
											"begin": 9966,
											"end": 9984,
											"name": "ADD",
											"source": 13
										},
										{
											"begin": 9959,
											"end": 9989,
											"name": "MSTORE",
											"source": 13
										},
										{
											"begin": 10025,
											"end": 10059,
											"name": "PUSH",
											"source": 13,
											"value": "43727970746F42756C6C446F67733A3A2043616E6E6F74206D696E7420626579"
										},
										{
											"begin": 10005,
											"end": 10023,
											"name": "PUSH",
											"source": 13,
											"value": "44"
										},
										{
											"begin": 10005,
											"end": 10023,
											"name": "DUP3",
											"source": 13
										},
										{
											"begin": 10005,
											"end": 10023,
											"name": "ADD",
											"source": 13
										},
										{
											"begin": 9998,
											"end": 10060,
											"name": "MSTORE",
											"source": 13
										},
										{
											"begin": 10096,
											"end": 10121,
											"name": "PUSH",
											"source": 13,
											"value": "6F6E642077686974656C697374206D6178206D696E7421000000000000000000"
										},
										{
											"begin": 10076,
											"end": 10094,
											"name": "PUSH",
											"source": 13,
											"value": "64"
										},
										{
											"begin": 10076,
											"end": 10094,
											"name": "DUP3",
											"source": 13
										},
										{
											"begin": 10076,
											"end": 10094,
											"name": "ADD",
											"source": 13
										},
										{
											"begin": 10069,
											"end": 10122,
											"name": "MSTORE",
											"source": 13
										},
										{
											"begin": 10139,
											"end": 10158,
											"name": "PUSH",
											"source": 13,
											"value": "84"
										},
										{
											"begin": 10139,
											"end": 10158,
											"name": "ADD",
											"source": 13
										},
										{
											"begin": 2112,
											"end": 2247,
											"name": "PUSH [tag]",
											"source": 11,
											"value": "250"
										},
										{
											"begin": 9745,
											"end": 10164,
											"name": "JUMP",
											"source": 13
										},
										{
											"begin": 2112,
											"end": 2247,
											"name": "tag",
											"source": 11,
											"value": "297"
										},
										{
											"begin": 2112,
											"end": 2247,
											"name": "JUMPDEST",
											"source": 11
										},
										{
											"begin": 2279,
											"end": 2311,
											"name": "PUSH [tag]",
											"source": 11,
											"value": "300"
										},
										{
											"begin": 2302,
											"end": 2311,
											"name": "DUP2",
											"source": 11
										},
										{
											"begin": 565,
											"end": 574,
											"name": "PUSH",
											"source": 11,
											"value": "6A94D74F430000"
										},
										{
											"begin": 2279,
											"end": 2311,
											"name": "PUSH [tag]",
											"source": 11,
											"value": "301"
										},
										{
											"begin": 2279,
											"end": 2311,
											"name": "JUMP",
											"source": 11,
											"value": "[in]"
										},
										{
											"begin": 2279,
											"end": 2311,
											"name": "tag",
											"source": 11,
											"value": "300"
										},
										{
											"begin": 2279,
											"end": 2311,
											"name": "JUMPDEST",
											"source": 11
										},
										{
											"begin": 2265,
											"end": 2274,
											"name": "CALLVALUE",
											"source": 11
										},
										{
											"begin": 2265,
											"end": 2312,
											"name": "LT",
											"source": 11
										},
										{
											"begin": 2265,
											"end": 2312,
											"name": "ISZERO",
											"source": 11
										},
										{
											"begin": 2257,
											"end": 2361,
											"name": "PUSH [tag]",
											"source": 11,
											"value": "302"
										},
										{
											"begin": 2257,
											"end": 2361,
											"name": "JUMPI",
											"source": 11
										},
										{
											"begin": 2257,
											"end": 2361,
											"name": "PUSH",
											"source": 11,
											"value": "40"
										},
										{
											"begin": 2257,
											"end": 2361,
											"name": "MLOAD",
											"source": 11
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "461BCD"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "E5"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SHL",
											"source": -1
										},
										{
											"begin": 2257,
											"end": 2361,
											"name": "DUP2",
											"source": 11
										},
										{
											"begin": 2257,
											"end": 2361,
											"name": "MSTORE",
											"source": 11
										},
										{
											"begin": 10544,
											"end": 10546,
											"name": "PUSH",
											"source": 13,
											"value": "20"
										},
										{
											"begin": 2257,
											"end": 2361,
											"name": "PUSH",
											"source": 11,
											"value": "4"
										},
										{
											"begin": 2257,
											"end": 2361,
											"name": "DUP3",
											"source": 11
										},
										{
											"begin": 2257,
											"end": 2361,
											"name": "ADD",
											"source": 11
										},
										{
											"begin": 10526,
											"end": 10547,
											"name": "MSTORE",
											"source": 13
										},
										{
											"begin": 10583,
											"end": 10585,
											"name": "PUSH",
											"source": 13,
											"value": "2C"
										},
										{
											"begin": 10563,
											"end": 10581,
											"name": "PUSH",
											"source": 13,
											"value": "24"
										},
										{
											"begin": 10563,
											"end": 10581,
											"name": "DUP3",
											"source": 13
										},
										{
											"begin": 10563,
											"end": 10581,
											"name": "ADD",
											"source": 13
										},
										{
											"begin": 10556,
											"end": 10586,
											"name": "MSTORE",
											"source": 13
										},
										{
											"begin": 10622,
											"end": 10656,
											"name": "PUSH",
											"source": 13,
											"value": "43727970746F42756C6C446F6773203A3A205061796D656E742069732062656C"
										},
										{
											"begin": 10602,
											"end": 10620,
											"name": "PUSH",
											"source": 13,
											"value": "44"
										},
										{
											"begin": 10602,
											"end": 10620,
											"name": "DUP3",
											"source": 13
										},
										{
											"begin": 10602,
											"end": 10620,
											"name": "ADD",
											"source": 13
										},
										{
											"begin": 10595,
											"end": 10657,
											"name": "MSTORE",
											"source": 13
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "6F7720746865207072696365"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "A0"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SHL",
											"source": -1
										},
										{
											"begin": 10673,
											"end": 10691,
											"name": "PUSH",
											"source": 13,
											"value": "64"
										},
										{
											"begin": 10673,
											"end": 10691,
											"name": "DUP3",
											"source": 13
										},
										{
											"begin": 10673,
											"end": 10691,
											"name": "ADD",
											"source": 13
										},
										{
											"begin": 10666,
											"end": 10708,
											"name": "MSTORE",
											"source": 13
										},
										{
											"begin": 10725,
											"end": 10744,
											"name": "PUSH",
											"source": 13,
											"value": "84"
										},
										{
											"begin": 10725,
											"end": 10744,
											"name": "ADD",
											"source": 13
										},
										{
											"begin": 2257,
											"end": 2361,
											"name": "PUSH [tag]",
											"source": 11,
											"value": "250"
										},
										{
											"begin": 10342,
											"end": 10750,
											"name": "JUMP",
											"source": 13
										},
										{
											"begin": 2257,
											"end": 2361,
											"name": "tag",
											"source": 11,
											"value": "302"
										},
										{
											"begin": 2257,
											"end": 2361,
											"name": "JUMPDEST",
											"source": 11
										},
										{
											"begin": 2425,
											"end": 2453,
											"name": "PUSH",
											"source": 11,
											"value": "40"
										},
										{
											"begin": 2425,
											"end": 2453,
											"name": "MLOAD",
											"source": 11
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "FFFFFFFFFFFFFFFFFFFFFFFF"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "NOT",
											"source": -1
										},
										{
											"begin": 2442,
											"end": 2452,
											"name": "CALLER",
											"source": 11
										},
										{
											"begin": 10904,
											"end": 10906,
											"name": "PUSH",
											"source": 13,
											"value": "60"
										},
										{
											"begin": 10900,
											"end": 10915,
											"name": "SHL",
											"source": 13
										},
										{
											"begin": 10896,
											"end": 10949,
											"name": "AND",
											"source": 13
										},
										{
											"begin": 2425,
											"end": 2453,
											"name": "PUSH",
											"source": 11,
											"value": "20"
										},
										{
											"begin": 2425,
											"end": 2453,
											"name": "DUP3",
											"source": 11
										},
										{
											"begin": 2425,
											"end": 2453,
											"name": "ADD",
											"source": 11
										},
										{
											"begin": 10884,
											"end": 10950,
											"name": "MSTORE",
											"source": 13
										},
										{
											"begin": 2398,
											"end": 2412,
											"name": "PUSH",
											"source": 11,
											"value": "0"
										},
										{
											"begin": 2398,
											"end": 2412,
											"name": "SWAP1",
											"source": 11
										},
										{
											"begin": 10966,
											"end": 10978,
											"name": "PUSH",
											"source": 13,
											"value": "34"
										},
										{
											"begin": 10966,
											"end": 10978,
											"name": "ADD",
											"source": 13
										},
										{
											"begin": 2425,
											"end": 2453,
											"name": "PUSH",
											"source": 11,
											"value": "40"
										},
										{
											"begin": 2425,
											"end": 2453,
											"name": "MLOAD",
											"source": 11
										},
										{
											"begin": 2425,
											"end": 2453,
											"name": "PUSH",
											"source": 11,
											"value": "20"
										},
										{
											"begin": 2425,
											"end": 2453,
											"name": "DUP2",
											"source": 11
										},
										{
											"begin": 2425,
											"end": 2453,
											"name": "DUP4",
											"source": 11
										},
										{
											"begin": 2425,
											"end": 2453,
											"name": "SUB",
											"source": 11
										},
										{
											"begin": 2425,
											"end": 2453,
											"name": "SUB",
											"source": 11
										},
										{
											"begin": 2425,
											"end": 2453,
											"name": "DUP2",
											"source": 11
										},
										{
											"begin": 2425,
											"end": 2453,
											"name": "MSTORE",
											"source": 11
										},
										{
											"begin": 2425,
											"end": 2453,
											"name": "SWAP1",
											"source": 11
										},
										{
											"begin": 2425,
											"end": 2453,
											"name": "PUSH",
											"source": 11,
											"value": "40"
										},
										{
											"begin": 2425,
											"end": 2453,
											"name": "MSTORE",
											"source": 11
										},
										{
											"begin": 2415,
											"end": 2454,
											"name": "DUP1",
											"source": 11
										},
										{
											"begin": 2415,
											"end": 2454,
											"name": "MLOAD",
											"source": 11
										},
										{
											"begin": 2415,
											"end": 2454,
											"name": "SWAP1",
											"source": 11
										},
										{
											"begin": 2415,
											"end": 2454,
											"name": "PUSH",
											"source": 11,
											"value": "20"
										},
										{
											"begin": 2415,
											"end": 2454,
											"name": "ADD",
											"source": 11
										},
										{
											"begin": 2415,
											"end": 2454,
											"name": "KECCAK256",
											"source": 11
										},
										{
											"begin": 2398,
											"end": 2454,
											"name": "SWAP1",
											"source": 11
										},
										{
											"begin": 2398,
											"end": 2454,
											"name": "POP",
											"source": 11
										},
										{
											"begin": 2472,
											"end": 2524,
											"name": "PUSH [tag]",
											"source": 11,
											"value": "307"
										},
										{
											"begin": 2491,
											"end": 2503,
											"name": "DUP4",
											"source": 11
										},
										{
											"begin": 2505,
											"end": 2515,
											"name": "PUSH",
											"source": 11,
											"value": "C"
										},
										{
											"begin": 2505,
											"end": 2515,
											"name": "SLOAD",
											"source": 11
										},
										{
											"begin": 2517,
											"end": 2523,
											"name": "DUP4",
											"source": 11
										},
										{
											"begin": 2472,
											"end": 2490,
											"name": "PUSH [tag]",
											"source": 11,
											"value": "308"
										},
										{
											"begin": 2472,
											"end": 2524,
											"name": "JUMP",
											"source": 11,
											"value": "[in]"
										},
										{
											"begin": 2472,
											"end": 2524,
											"name": "tag",
											"source": 11,
											"value": "307"
										},
										{
											"begin": 2472,
											"end": 2524,
											"name": "JUMPDEST",
											"source": 11
										},
										{
											"begin": 2464,
											"end": 2570,
											"name": "PUSH [tag]",
											"source": 11,
											"value": "309"
										},
										{
											"begin": 2464,
											"end": 2570,
											"name": "JUMPI",
											"source": 11
										},
										{
											"begin": 2464,
											"end": 2570,
											"name": "PUSH",
											"source": 11,
											"value": "40"
										},
										{
											"begin": 2464,
											"end": 2570,
											"name": "MLOAD",
											"source": 11
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "461BCD"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "E5"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SHL",
											"source": -1
										},
										{
											"begin": 2464,
											"end": 2570,
											"name": "DUP2",
											"source": 11
										},
										{
											"begin": 2464,
											"end": 2570,
											"name": "MSTORE",
											"source": 11
										},
										{
											"begin": 11191,
											"end": 11193,
											"name": "PUSH",
											"source": 13,
											"value": "20"
										},
										{
											"begin": 2464,
											"end": 2570,
											"name": "PUSH",
											"source": 11,
											"value": "4"
										},
										{
											"begin": 2464,
											"end": 2570,
											"name": "DUP3",
											"source": 11
										},
										{
											"begin": 2464,
											"end": 2570,
											"name": "ADD",
											"source": 11
										},
										{
											"begin": 11173,
											"end": 11194,
											"name": "MSTORE",
											"source": 13
										},
										{
											"begin": 11230,
											"end": 11232,
											"name": "PUSH",
											"source": 13,
											"value": "29"
										},
										{
											"begin": 11210,
											"end": 11228,
											"name": "PUSH",
											"source": 13,
											"value": "24"
										},
										{
											"begin": 11210,
											"end": 11228,
											"name": "DUP3",
											"source": 13
										},
										{
											"begin": 11210,
											"end": 11228,
											"name": "ADD",
											"source": 13
										},
										{
											"begin": 11203,
											"end": 11233,
											"name": "MSTORE",
											"source": 13
										},
										{
											"begin": 11269,
											"end": 11303,
											"name": "PUSH",
											"source": 13,
											"value": "43727970746F42756C6C446F6773203A3A20596F7520617265206E6F74207768"
										},
										{
											"begin": 11249,
											"end": 11267,
											"name": "PUSH",
											"source": 13,
											"value": "44"
										},
										{
											"begin": 11249,
											"end": 11267,
											"name": "DUP3",
											"source": 13
										},
										{
											"begin": 11249,
											"end": 11267,
											"name": "ADD",
											"source": 13
										},
										{
											"begin": 11242,
											"end": 11304,
											"name": "MSTORE",
											"source": 13
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1A5D195B1A5CDD1959"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "BA"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SHL",
											"source": -1
										},
										{
											"begin": 11320,
											"end": 11338,
											"name": "PUSH",
											"source": 13,
											"value": "64"
										},
										{
											"begin": 11320,
											"end": 11338,
											"name": "DUP3",
											"source": 13
										},
										{
											"begin": 11320,
											"end": 11338,
											"name": "ADD",
											"source": 13
										},
										{
											"begin": 11313,
											"end": 11352,
											"name": "MSTORE",
											"source": 13
										},
										{
											"begin": 11369,
											"end": 11388,
											"name": "PUSH",
											"source": 13,
											"value": "84"
										},
										{
											"begin": 11369,
											"end": 11388,
											"name": "ADD",
											"source": 13
										},
										{
											"begin": 2464,
											"end": 2570,
											"name": "PUSH [tag]",
											"source": 11,
											"value": "250"
										},
										{
											"begin": 10989,
											"end": 11394,
											"name": "JUMP",
											"source": 13
										},
										{
											"begin": 2464,
											"end": 2570,
											"name": "tag",
											"source": 11,
											"value": "309"
										},
										{
											"begin": 2464,
											"end": 2570,
											"name": "JUMPDEST",
											"source": 11
										},
										{
											"begin": 2600,
											"end": 2610,
											"name": "CALLER",
											"source": 11
										},
										{
											"begin": 2581,
											"end": 2611,
											"name": "PUSH",
											"source": 11,
											"value": "0"
										},
										{
											"begin": 2581,
											"end": 2611,
											"name": "SWAP1",
											"source": 11
										},
										{
											"begin": 2581,
											"end": 2611,
											"name": "DUP2",
											"source": 11
										},
										{
											"begin": 2581,
											"end": 2611,
											"name": "MSTORE",
											"source": 11
										},
										{
											"begin": 2581,
											"end": 2599,
											"name": "PUSH",
											"source": 11,
											"value": "E"
										},
										{
											"begin": 2581,
											"end": 2611,
											"name": "PUSH",
											"source": 11,
											"value": "20"
										},
										{
											"begin": 2581,
											"end": 2611,
											"name": "MSTORE",
											"source": 11
										},
										{
											"begin": 2581,
											"end": 2611,
											"name": "PUSH",
											"source": 11,
											"value": "40"
										},
										{
											"begin": 2581,
											"end": 2611,
											"name": "DUP2",
											"source": 11
										},
										{
											"begin": 2581,
											"end": 2611,
											"name": "KECCAK256",
											"source": 11
										},
										{
											"begin": 2581,
											"end": 2624,
											"name": "DUP1",
											"source": 11
										},
										{
											"begin": 2581,
											"end": 2624,
											"name": "SLOAD",
											"source": 11
										},
										{
											"begin": 2615,
											"end": 2624,
											"name": "DUP5",
											"source": 11
										},
										{
											"begin": 2615,
											"end": 2624,
											"name": "SWAP3",
											"source": 11
										},
										{
											"begin": 2581,
											"end": 2611,
											"name": "SWAP1",
											"source": 11
										},
										{
											"begin": 2581,
											"end": 2624,
											"name": "PUSH [tag]",
											"source": 11,
											"value": "312"
										},
										{
											"begin": 2581,
											"end": 2624,
											"name": "SWAP1",
											"source": 11
										},
										{
											"begin": 2615,
											"end": 2624,
											"name": "DUP5",
											"source": 11
										},
										{
											"begin": 2615,
											"end": 2624,
											"name": "SWAP1",
											"source": 11
										},
										{
											"begin": 2581,
											"end": 2624,
											"name": "PUSH [tag]",
											"source": 11,
											"value": "292"
										},
										{
											"begin": 2581,
											"end": 2624,
											"name": "JUMP",
											"source": 11,
											"value": "[in]"
										},
										{
											"begin": 2581,
											"end": 2624,
											"name": "tag",
											"source": 11,
											"value": "312"
										},
										{
											"begin": 2581,
											"end": 2624,
											"name": "JUMPDEST",
											"source": 11
										},
										{
											"begin": 2581,
											"end": 2624,
											"name": "SWAP1",
											"source": 11
										},
										{
											"begin": 2581,
											"end": 2624,
											"name": "SWAP2",
											"source": 11
										},
										{
											"begin": 2581,
											"end": 2624,
											"name": "SSTORE",
											"source": 11
										},
										{
											"begin": -1,
											"end": -1,
											"name": "POP",
											"source": -1
										},
										{
											"begin": 2634,
											"end": 2666,
											"name": "PUSH [tag]",
											"source": 11,
											"value": "274"
										},
										{
											"begin": 2634,
											"end": 2666,
											"name": "SWAP1",
											"source": 11
										},
										{
											"begin": -1,
											"end": -1,
											"name": "POP",
											"source": -1
										},
										{
											"begin": 2644,
											"end": 2654,
											"name": "CALLER",
											"source": 11
										},
										{
											"begin": 2656,
											"end": 2665,
											"name": "DUP4",
											"source": 11
										},
										{
											"begin": 2634,
											"end": 2643,
											"name": "PUSH [tag]",
											"source": 11,
											"value": "314"
										},
										{
											"begin": 2634,
											"end": 2666,
											"name": "JUMP",
											"source": 11,
											"value": "[in]"
										},
										{
											"begin": 4806,
											"end": 5105,
											"name": "tag",
											"source": 11,
											"value": "120"
										},
										{
											"begin": 4806,
											"end": 5105,
											"name": "JUMPDEST",
											"source": 11
										},
										{
											"begin": 1108,
											"end": 1114,
											"name": "PUSH",
											"source": 0,
											"value": "8"
										},
										{
											"begin": 1108,
											"end": 1114,
											"name": "SLOAD",
											"source": 0
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "A0"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SHL",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SUB",
											"source": -1
										},
										{
											"begin": 1108,
											"end": 1114,
											"name": "AND",
											"source": 0
										},
										{
											"begin": 719,
											"end": 729,
											"name": "CALLER",
											"source": 6
										},
										{
											"begin": 1248,
											"end": 1271,
											"name": "EQ",
											"source": 0
										},
										{
											"begin": 1240,
											"end": 1308,
											"name": "PUSH [tag]",
											"source": 0,
											"value": "318"
										},
										{
											"begin": 1240,
											"end": 1308,
											"name": "JUMPI",
											"source": 0
										},
										{
											"begin": 1240,
											"end": 1308,
											"name": "PUSH",
											"source": 0,
											"value": "40"
										},
										{
											"begin": 1240,
											"end": 1308,
											"name": "MLOAD",
											"source": 0
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "461BCD"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "E5"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SHL",
											"source": -1
										},
										{
											"begin": 1240,
											"end": 1308,
											"name": "DUP2",
											"source": 0
										},
										{
											"begin": 1240,
											"end": 1308,
											"name": "MSTORE",
											"source": 0
										},
										{
											"begin": 1240,
											"end": 1308,
											"name": "PUSH",
											"source": 0,
											"value": "4"
										},
										{
											"begin": 1240,
											"end": 1308,
											"name": "ADD",
											"source": 0
										},
										{
											"begin": 1240,
											"end": 1308,
											"name": "PUSH [tag]",
											"source": 0,
											"value": "250"
										},
										{
											"begin": 1240,
											"end": 1308,
											"name": "SWAP1",
											"source": 0
										},
										{
											"begin": 1240,
											"end": 1308,
											"name": "PUSH [tag]",
											"source": 0,
											"value": "251"
										},
										{
											"begin": 1240,
											"end": 1308,
											"name": "JUMP",
											"source": 0,
											"value": "[in]"
										},
										{
											"begin": 1240,
											"end": 1308,
											"name": "tag",
											"source": 0,
											"value": "318"
										},
										{
											"begin": 1240,
											"end": 1308,
											"name": "JUMPDEST",
											"source": 0
										},
										{
											"begin": 4889,
											"end": 4914,
											"name": "PUSH",
											"source": 11,
											"value": "0"
										},
										{
											"begin": 4943,
											"end": 4946,
											"name": "PUSH",
											"source": 11,
											"value": "64"
										},
										{
											"begin": 4917,
											"end": 4942,
											"name": "PUSH [tag]",
											"source": 11,
											"value": "321"
										},
										{
											"begin": 4917,
											"end": 4938,
											"name": "SELFBALANCE",
											"source": 11
										},
										{
											"begin": 4941,
											"end": 4942,
											"name": "PUSH",
											"source": 11,
											"value": "3"
										},
										{
											"begin": 4917,
											"end": 4942,
											"name": "PUSH [tag]",
											"source": 11,
											"value": "301"
										},
										{
											"begin": 4917,
											"end": 4942,
											"name": "JUMP",
											"source": 11,
											"value": "[in]"
										},
										{
											"begin": 4917,
											"end": 4942,
											"name": "tag",
											"source": 11,
											"value": "321"
										},
										{
											"begin": 4917,
											"end": 4942,
											"name": "JUMPDEST",
											"source": 11
										},
										{
											"begin": 4917,
											"end": 4946,
											"name": "PUSH [tag]",
											"source": 11,
											"value": "322"
										},
										{
											"begin": 4917,
											"end": 4946,
											"name": "SWAP2",
											"source": 11
										},
										{
											"begin": 4917,
											"end": 4946,
											"name": "SWAP1",
											"source": 11
										},
										{
											"begin": 4917,
											"end": 4946,
											"name": "PUSH [tag]",
											"source": 11,
											"value": "323"
										},
										{
											"begin": 4917,
											"end": 4946,
											"name": "JUMP",
											"source": 11,
											"value": "[in]"
										},
										{
											"begin": 4917,
											"end": 4946,
											"name": "tag",
											"source": 11,
											"value": "322"
										},
										{
											"begin": 4917,
											"end": 4946,
											"name": "JUMPDEST",
											"source": 11
										},
										{
											"begin": 4956,
											"end": 5035,
											"name": "PUSH",
											"source": 11,
											"value": "40"
										},
										{
											"begin": 4956,
											"end": 5035,
											"name": "MLOAD",
											"source": 11
										},
										{
											"begin": 4889,
											"end": 4946,
											"name": "SWAP1",
											"source": 11
										},
										{
											"begin": 4889,
											"end": 4946,
											"name": "SWAP2",
											"source": 11
										},
										{
											"begin": -1,
											"end": -1,
											"name": "POP",
											"source": -1
										},
										{
											"begin": 4964,
											"end": 5006,
											"name": "PUSH",
											"source": 11,
											"value": "90EE4B80C3B15B8B83510BE8FCF2BCED69A4C9DB"
										},
										{
											"begin": 4964,
											"end": 5006,
											"name": "SWAP1",
											"source": 11
										},
										{
											"begin": 4956,
											"end": 5035,
											"name": "DUP3",
											"source": 11
										},
										{
											"begin": 4956,
											"end": 5035,
											"name": "ISZERO",
											"source": 11
										},
										{
											"begin": 4956,
											"end": 5035,
											"name": "PUSH",
											"source": 11,
											"value": "8FC"
										},
										{
											"begin": 4956,
											"end": 5035,
											"name": "MUL",
											"source": 11
										},
										{
											"begin": 4956,
											"end": 5035,
											"name": "SWAP1",
											"source": 11
										},
										{
											"begin": 4889,
											"end": 4946,
											"name": "DUP4",
											"source": 11
										},
										{
											"begin": 4889,
											"end": 4946,
											"name": "SWAP1",
											"source": 11
										},
										{
											"begin": 4956,
											"end": 5035,
											"name": "PUSH",
											"source": 11,
											"value": "0"
										},
										{
											"begin": 4956,
											"end": 5035,
											"name": "DUP2",
											"source": 11
										},
										{
											"begin": 4956,
											"end": 5035,
											"name": "DUP2",
											"source": 11
										},
										{
											"begin": 4956,
											"end": 5035,
											"name": "DUP2",
											"source": 11
										},
										{
											"begin": 4889,
											"end": 4946,
											"name": "DUP6",
											"source": 11
										},
										{
											"begin": 4964,
											"end": 5006,
											"name": "DUP9",
											"source": 11
										},
										{
											"begin": 4956,
											"end": 5035,
											"name": "DUP9",
											"source": 11
										},
										{
											"begin": 4956,
											"end": 5035,
											"name": "CALL",
											"source": 11
										},
										{
											"begin": 4956,
											"end": 5035,
											"name": "SWAP4",
											"source": 11
										},
										{
											"begin": 4956,
											"end": 5035,
											"name": "POP",
											"source": 11
										},
										{
											"begin": 4956,
											"end": 5035,
											"name": "POP",
											"source": 11
										},
										{
											"begin": 4956,
											"end": 5035,
											"name": "POP",
											"source": 11
										},
										{
											"begin": 4956,
											"end": 5035,
											"name": "POP",
											"source": 11
										},
										{
											"begin": 4956,
											"end": 5035,
											"name": "ISZERO",
											"source": 11
										},
										{
											"begin": 4956,
											"end": 5035,
											"name": "DUP1",
											"source": 11
										},
										{
											"begin": 4956,
											"end": 5035,
											"name": "ISZERO",
											"source": 11
										},
										{
											"begin": 4956,
											"end": 5035,
											"name": "PUSH [tag]",
											"source": 11,
											"value": "325"
										},
										{
											"begin": 4956,
											"end": 5035,
											"name": "JUMPI",
											"source": 11
										},
										{
											"begin": 4956,
											"end": 5035,
											"name": "RETURNDATASIZE",
											"source": 11
										},
										{
											"begin": 4956,
											"end": 5035,
											"name": "PUSH",
											"source": 11,
											"value": "0"
										},
										{
											"begin": 4956,
											"end": 5035,
											"name": "DUP1",
											"source": 11
										},
										{
											"begin": 4956,
											"end": 5035,
											"name": "RETURNDATACOPY",
											"source": 11
										},
										{
											"begin": 4956,
											"end": 5035,
											"name": "RETURNDATASIZE",
											"source": 11
										},
										{
											"begin": 4956,
											"end": 5035,
											"name": "PUSH",
											"source": 11,
											"value": "0"
										},
										{
											"begin": 4956,
											"end": 5035,
											"name": "REVERT",
											"source": 11
										},
										{
											"begin": 4956,
											"end": 5035,
											"name": "tag",
											"source": 11,
											"value": "325"
										},
										{
											"begin": 4956,
											"end": 5035,
											"name": "JUMPDEST",
											"source": 11
										},
										{
											"begin": -1,
											"end": -1,
											"name": "POP",
											"source": -1
										},
										{
											"begin": 5047,
											"end": 5098,
											"name": "PUSH",
											"source": 11,
											"value": "40"
										},
										{
											"begin": 5047,
											"end": 5098,
											"name": "MLOAD",
											"source": 11
										},
										{
											"begin": 5055,
											"end": 5065,
											"name": "CALLER",
											"source": 11
										},
										{
											"begin": 5055,
											"end": 5065,
											"name": "SWAP1",
											"source": 11
										},
										{
											"begin": 5076,
											"end": 5097,
											"name": "SELFBALANCE",
											"source": 11
										},
										{
											"begin": 5047,
											"end": 5098,
											"name": "DUP1",
											"source": 11
										},
										{
											"begin": 5047,
											"end": 5098,
											"name": "ISZERO",
											"source": 11
										},
										{
											"begin": 5047,
											"end": 5098,
											"name": "PUSH",
											"source": 11,
											"value": "8FC"
										},
										{
											"begin": 5047,
											"end": 5098,
											"name": "MUL",
											"source": 11
										},
										{
											"begin": 5047,
											"end": 5098,
											"name": "SWAP2",
											"source": 11
										},
										{
											"begin": 5047,
											"end": 5098,
											"name": "PUSH",
											"source": 11,
											"value": "0"
										},
										{
											"begin": 5047,
											"end": 5098,
											"name": "DUP2",
											"source": 11
										},
										{
											"begin": 5047,
											"end": 5098,
											"name": "DUP2",
											"source": 11
										},
										{
											"begin": 5047,
											"end": 5098,
											"name": "DUP2",
											"source": 11
										},
										{
											"begin": 5076,
											"end": 5097,
											"name": "DUP6",
											"source": 11
										},
										{
											"begin": 5055,
											"end": 5065,
											"name": "DUP9",
											"source": 11
										},
										{
											"begin": 5047,
											"end": 5098,
											"name": "DUP9",
											"source": 11
										},
										{
											"begin": 5047,
											"end": 5098,
											"name": "CALL",
											"source": 11
										},
										{
											"begin": 5047,
											"end": 5098,
											"name": "SWAP4",
											"source": 11
										},
										{
											"begin": 5047,
											"end": 5098,
											"name": "POP",
											"source": 11
										},
										{
											"begin": 5047,
											"end": 5098,
											"name": "POP",
											"source": 11
										},
										{
											"begin": 5047,
											"end": 5098,
											"name": "POP",
											"source": 11
										},
										{
											"begin": 5047,
											"end": 5098,
											"name": "POP",
											"source": 11
										},
										{
											"begin": 5047,
											"end": 5098,
											"name": "ISZERO",
											"source": 11
										},
										{
											"begin": 5047,
											"end": 5098,
											"name": "DUP1",
											"source": 11
										},
										{
											"begin": 5047,
											"end": 5098,
											"name": "ISZERO",
											"source": 11
										},
										{
											"begin": 5047,
											"end": 5098,
											"name": "PUSH [tag]",
											"source": 11,
											"value": "253"
										},
										{
											"begin": 5047,
											"end": 5098,
											"name": "JUMPI",
											"source": 11
										},
										{
											"begin": 5047,
											"end": 5098,
											"name": "RETURNDATASIZE",
											"source": 11
										},
										{
											"begin": 5047,
											"end": 5098,
											"name": "PUSH",
											"source": 11,
											"value": "0"
										},
										{
											"begin": 5047,
											"end": 5098,
											"name": "DUP1",
											"source": 11
										},
										{
											"begin": 5047,
											"end": 5098,
											"name": "RETURNDATACOPY",
											"source": 11
										},
										{
											"begin": 5047,
											"end": 5098,
											"name": "RETURNDATASIZE",
											"source": 11
										},
										{
											"begin": 5047,
											"end": 5098,
											"name": "PUSH",
											"source": 11,
											"value": "0"
										},
										{
											"begin": 5047,
											"end": 5098,
											"name": "REVERT",
											"source": 11
										},
										{
											"begin": 10656,
											"end": 10835,
											"name": "tag",
											"source": 12,
											"value": "124"
										},
										{
											"begin": 10656,
											"end": 10835,
											"name": "JUMPDEST",
											"source": 12
										},
										{
											"begin": 10789,
											"end": 10828,
											"name": "PUSH [tag]",
											"source": 12,
											"value": "274"
										},
										{
											"begin": 10806,
											"end": 10810,
											"name": "DUP4",
											"source": 12
										},
										{
											"begin": 10812,
											"end": 10814,
											"name": "DUP4",
											"source": 12
										},
										{
											"begin": 10816,
											"end": 10823,
											"name": "DUP4",
											"source": 12
										},
										{
											"begin": 10789,
											"end": 10828,
											"name": "PUSH",
											"source": 12,
											"value": "40"
										},
										{
											"begin": 10789,
											"end": 10828,
											"name": "MLOAD",
											"source": 12
										},
										{
											"begin": 10789,
											"end": 10828,
											"name": "DUP1",
											"source": 12
										},
										{
											"begin": 10789,
											"end": 10828,
											"name": "PUSH",
											"source": 12,
											"value": "20"
										},
										{
											"begin": 10789,
											"end": 10828,
											"name": "ADD",
											"source": 12
										},
										{
											"begin": 10789,
											"end": 10828,
											"name": "PUSH",
											"source": 12,
											"value": "40"
										},
										{
											"begin": 10789,
											"end": 10828,
											"name": "MSTORE",
											"source": 12
										},
										{
											"begin": 10789,
											"end": 10828,
											"name": "DUP1",
											"source": 12
										},
										{
											"begin": 10789,
											"end": 10828,
											"name": "PUSH",
											"source": 12,
											"value": "0"
										},
										{
											"begin": 10789,
											"end": 10828,
											"name": "DUP2",
											"source": 12
										},
										{
											"begin": 10789,
											"end": 10828,
											"name": "MSTORE",
											"source": 12
										},
										{
											"begin": 10789,
											"end": 10828,
											"name": "POP",
											"source": 12
										},
										{
											"begin": 10789,
											"end": 10805,
											"name": "PUSH [tag]",
											"source": 12,
											"value": "203"
										},
										{
											"begin": 10789,
											"end": 10828,
											"name": "JUMP",
											"source": 12,
											"value": "[in]"
										},
										{
											"begin": 615,
											"end": 650,
											"name": "tag",
											"source": 11,
											"value": "132"
										},
										{
											"begin": 615,
											"end": 650,
											"name": "JUMPDEST",
											"source": 11
										},
										{
											"begin": 615,
											"end": 650,
											"name": "PUSH",
											"source": 11,
											"value": "A"
										},
										{
											"begin": 615,
											"end": 650,
											"name": "DUP1",
											"source": 11
										},
										{
											"begin": 615,
											"end": 650,
											"name": "SLOAD",
											"source": 11
										},
										{
											"begin": 615,
											"end": 650,
											"name": "PUSH [tag]",
											"source": 11,
											"value": "331"
										},
										{
											"begin": 615,
											"end": 650,
											"name": "SWAP1",
											"source": 11
										},
										{
											"begin": 615,
											"end": 650,
											"name": "PUSH [tag]",
											"source": 11,
											"value": "257"
										},
										{
											"begin": 615,
											"end": 650,
											"name": "JUMP",
											"source": 11,
											"value": "[in]"
										},
										{
											"begin": 615,
											"end": 650,
											"name": "tag",
											"source": 11,
											"value": "331"
										},
										{
											"begin": 615,
											"end": 650,
											"name": "JUMPDEST",
											"source": 11
										},
										{
											"begin": 615,
											"end": 650,
											"name": "DUP1",
											"source": 11
										},
										{
											"begin": 615,
											"end": 650,
											"name": "PUSH",
											"source": 11,
											"value": "1F"
										},
										{
											"begin": 615,
											"end": 650,
											"name": "ADD",
											"source": 11
										},
										{
											"begin": 615,
											"end": 650,
											"name": "PUSH",
											"source": 11,
											"value": "20"
										},
										{
											"begin": 615,
											"end": 650,
											"name": "DUP1",
											"source": 11
										},
										{
											"begin": 615,
											"end": 650,
											"name": "SWAP2",
											"source": 11
										},
										{
											"begin": 615,
											"end": 650,
											"name": "DIV",
											"source": 11
										},
										{
											"begin": 615,
											"end": 650,
											"name": "MUL",
											"source": 11
										},
										{
											"begin": 615,
											"end": 650,
											"name": "PUSH",
											"source": 11,
											"value": "20"
										},
										{
											"begin": 615,
											"end": 650,
											"name": "ADD",
											"source": 11
										},
										{
											"begin": 615,
											"end": 650,
											"name": "PUSH",
											"source": 11,
											"value": "40"
										},
										{
											"begin": 615,
											"end": 650,
											"name": "MLOAD",
											"source": 11
										},
										{
											"begin": 615,
											"end": 650,
											"name": "SWAP1",
											"source": 11
										},
										{
											"begin": 615,
											"end": 650,
											"name": "DUP2",
											"source": 11
										},
										{
											"begin": 615,
											"end": 650,
											"name": "ADD",
											"source": 11
										},
										{
											"begin": 615,
											"end": 650,
											"name": "PUSH",
											"source": 11,
											"value": "40"
										},
										{
											"begin": 615,
											"end": 650,
											"name": "MSTORE",
											"source": 11
										},
										{
											"begin": 615,
											"end": 650,
											"name": "DUP1",
											"source": 11
										},
										{
											"begin": 615,
											"end": 650,
											"name": "SWAP3",
											"source": 11
										},
										{
											"begin": 615,
											"end": 650,
											"name": "SWAP2",
											"source": 11
										},
										{
											"begin": 615,
											"end": 650,
											"name": "SWAP1",
											"source": 11
										},
										{
											"begin": 615,
											"end": 650,
											"name": "DUP2",
											"source": 11
										},
										{
											"begin": 615,
											"end": 650,
											"name": "DUP2",
											"source": 11
										},
										{
											"begin": 615,
											"end": 650,
											"name": "MSTORE",
											"source": 11
										},
										{
											"begin": 615,
											"end": 650,
											"name": "PUSH",
											"source": 11,
											"value": "20"
										},
										{
											"begin": 615,
											"end": 650,
											"name": "ADD",
											"source": 11
										},
										{
											"begin": 615,
											"end": 650,
											"name": "DUP3",
											"source": 11
										},
										{
											"begin": 615,
											"end": 650,
											"name": "DUP1",
											"source": 11
										},
										{
											"begin": 615,
											"end": 650,
											"name": "SLOAD",
											"source": 11
										},
										{
											"begin": 615,
											"end": 650,
											"name": "PUSH [tag]",
											"source": 11,
											"value": "332"
										},
										{
											"begin": 615,
											"end": 650,
											"name": "SWAP1",
											"source": 11
										},
										{
											"begin": 615,
											"end": 650,
											"name": "PUSH [tag]",
											"source": 11,
											"value": "257"
										},
										{
											"begin": 615,
											"end": 650,
											"name": "JUMP",
											"source": 11,
											"value": "[in]"
										},
										{
											"begin": 615,
											"end": 650,
											"name": "tag",
											"source": 11,
											"value": "332"
										},
										{
											"begin": 615,
											"end": 650,
											"name": "JUMPDEST",
											"source": 11
										},
										{
											"begin": 615,
											"end": 650,
											"name": "DUP1",
											"source": 11
										},
										{
											"begin": 615,
											"end": 650,
											"name": "ISZERO",
											"source": 11
										},
										{
											"begin": 615,
											"end": 650,
											"name": "PUSH [tag]",
											"source": 11,
											"value": "333"
										},
										{
											"begin": 615,
											"end": 650,
											"name": "JUMPI",
											"source": 11
										},
										{
											"begin": 615,
											"end": 650,
											"name": "DUP1",
											"source": 11
										},
										{
											"begin": 615,
											"end": 650,
											"name": "PUSH",
											"source": 11,
											"value": "1F"
										},
										{
											"begin": 615,
											"end": 650,
											"name": "LT",
											"source": 11
										},
										{
											"begin": 615,
											"end": 650,
											"name": "PUSH [tag]",
											"source": 11,
											"value": "334"
										},
										{
											"begin": 615,
											"end": 650,
											"name": "JUMPI",
											"source": 11
										},
										{
											"begin": 615,
											"end": 650,
											"name": "PUSH",
											"source": 11,
											"value": "100"
										},
										{
											"begin": 615,
											"end": 650,
											"name": "DUP1",
											"source": 11
										},
										{
											"begin": 615,
											"end": 650,
											"name": "DUP4",
											"source": 11
										},
										{
											"begin": 615,
											"end": 650,
											"name": "SLOAD",
											"source": 11
										},
										{
											"begin": 615,
											"end": 650,
											"name": "DIV",
											"source": 11
										},
										{
											"begin": 615,
											"end": 650,
											"name": "MUL",
											"source": 11
										},
										{
											"begin": 615,
											"end": 650,
											"name": "DUP4",
											"source": 11
										},
										{
											"begin": 615,
											"end": 650,
											"name": "MSTORE",
											"source": 11
										},
										{
											"begin": 615,
											"end": 650,
											"name": "SWAP2",
											"source": 11
										},
										{
											"begin": 615,
											"end": 650,
											"name": "PUSH",
											"source": 11,
											"value": "20"
										},
										{
											"begin": 615,
											"end": 650,
											"name": "ADD",
											"source": 11
										},
										{
											"begin": 615,
											"end": 650,
											"name": "SWAP2",
											"source": 11
										},
										{
											"begin": 615,
											"end": 650,
											"name": "PUSH [tag]",
											"source": 11,
											"value": "333"
										},
										{
											"begin": 615,
											"end": 650,
											"name": "JUMP",
											"source": 11
										},
										{
											"begin": 615,
											"end": 650,
											"name": "tag",
											"source": 11,
											"value": "334"
										},
										{
											"begin": 615,
											"end": 650,
											"name": "JUMPDEST",
											"source": 11
										},
										{
											"begin": 615,
											"end": 650,
											"name": "DUP3",
											"source": 11
										},
										{
											"begin": 615,
											"end": 650,
											"name": "ADD",
											"source": 11
										},
										{
											"begin": 615,
											"end": 650,
											"name": "SWAP2",
											"source": 11
										},
										{
											"begin": 615,
											"end": 650,
											"name": "SWAP1",
											"source": 11
										},
										{
											"begin": 615,
											"end": 650,
											"name": "PUSH",
											"source": 11,
											"value": "0"
										},
										{
											"begin": 615,
											"end": 650,
											"name": "MSTORE",
											"source": 11
										},
										{
											"begin": 615,
											"end": 650,
											"name": "PUSH",
											"source": 11,
											"value": "20"
										},
										{
											"begin": 615,
											"end": 650,
											"name": "PUSH",
											"source": 11,
											"value": "0"
										},
										{
											"begin": 615,
											"end": 650,
											"name": "KECCAK256",
											"source": 11
										},
										{
											"begin": 615,
											"end": 650,
											"name": "SWAP1",
											"source": 11
										},
										{
											"begin": 615,
											"end": 650,
											"name": "tag",
											"source": 11,
											"value": "335"
										},
										{
											"begin": 615,
											"end": 650,
											"name": "JUMPDEST",
											"source": 11
										},
										{
											"begin": 615,
											"end": 650,
											"name": "DUP2",
											"source": 11
										},
										{
											"begin": 615,
											"end": 650,
											"name": "SLOAD",
											"source": 11
										},
										{
											"begin": 615,
											"end": 650,
											"name": "DUP2",
											"source": 11
										},
										{
											"begin": 615,
											"end": 650,
											"name": "MSTORE",
											"source": 11
										},
										{
											"begin": 615,
											"end": 650,
											"name": "SWAP1",
											"source": 11
										},
										{
											"begin": 615,
											"end": 650,
											"name": "PUSH",
											"source": 11,
											"value": "1"
										},
										{
											"begin": 615,
											"end": 650,
											"name": "ADD",
											"source": 11
										},
										{
											"begin": 615,
											"end": 650,
											"name": "SWAP1",
											"source": 11
										},
										{
											"begin": 615,
											"end": 650,
											"name": "PUSH",
											"source": 11,
											"value": "20"
										},
										{
											"begin": 615,
											"end": 650,
											"name": "ADD",
											"source": 11
										},
										{
											"begin": 615,
											"end": 650,
											"name": "DUP1",
											"source": 11
										},
										{
											"begin": 615,
											"end": 650,
											"name": "DUP4",
											"source": 11
										},
										{
											"begin": 615,
											"end": 650,
											"name": "GT",
											"source": 11
										},
										{
											"begin": 615,
											"end": 650,
											"name": "PUSH [tag]",
											"source": 11,
											"value": "335"
										},
										{
											"begin": 615,
											"end": 650,
											"name": "JUMPI",
											"source": 11
										},
										{
											"begin": 615,
											"end": 650,
											"name": "DUP3",
											"source": 11
										},
										{
											"begin": 615,
											"end": 650,
											"name": "SWAP1",
											"source": 11
										},
										{
											"begin": 615,
											"end": 650,
											"name": "SUB",
											"source": 11
										},
										{
											"begin": 615,
											"end": 650,
											"name": "PUSH",
											"source": 11,
											"value": "1F"
										},
										{
											"begin": 615,
											"end": 650,
											"name": "AND",
											"source": 11
										},
										{
											"begin": 615,
											"end": 650,
											"name": "DUP3",
											"source": 11
										},
										{
											"begin": 615,
											"end": 650,
											"name": "ADD",
											"source": 11
										},
										{
											"begin": 615,
											"end": 650,
											"name": "SWAP2",
											"source": 11
										},
										{
											"begin": 615,
											"end": 650,
											"name": "tag",
											"source": 11,
											"value": "333"
										},
										{
											"begin": 615,
											"end": 650,
											"name": "JUMPDEST",
											"source": 11
										},
										{
											"begin": 615,
											"end": 650,
											"name": "POP",
											"source": 11
										},
										{
											"begin": 615,
											"end": 650,
											"name": "POP",
											"source": 11
										},
										{
											"begin": 615,
											"end": 650,
											"name": "POP",
											"source": 11
										},
										{
											"begin": 615,
											"end": 650,
											"name": "POP",
											"source": 11
										},
										{
											"begin": 615,
											"end": 650,
											"name": "POP",
											"source": 11
										},
										{
											"begin": 615,
											"end": 650,
											"name": "DUP2",
											"source": 11
										},
										{
											"begin": 615,
											"end": 650,
											"name": "JUMP",
											"source": 11,
											"value": "[out]"
										},
										{
											"begin": 4717,
											"end": 4800,
											"name": "tag",
											"source": 11,
											"value": "140"
										},
										{
											"begin": 4717,
											"end": 4800,
											"name": "JUMPDEST",
											"source": 11
										},
										{
											"begin": 1108,
											"end": 1114,
											"name": "PUSH",
											"source": 0,
											"value": "8"
										},
										{
											"begin": 1108,
											"end": 1114,
											"name": "SLOAD",
											"source": 0
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "A0"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SHL",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SUB",
											"source": -1
										},
										{
											"begin": 1108,
											"end": 1114,
											"name": "AND",
											"source": 0
										},
										{
											"begin": 719,
											"end": 729,
											"name": "CALLER",
											"source": 6
										},
										{
											"begin": 1248,
											"end": 1271,
											"name": "EQ",
											"source": 0
										},
										{
											"begin": 1240,
											"end": 1308,
											"name": "PUSH [tag]",
											"source": 0,
											"value": "339"
										},
										{
											"begin": 1240,
											"end": 1308,
											"name": "JUMPI",
											"source": 0
										},
										{
											"begin": 1240,
											"end": 1308,
											"name": "PUSH",
											"source": 0,
											"value": "40"
										},
										{
											"begin": 1240,
											"end": 1308,
											"name": "MLOAD",
											"source": 0
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "461BCD"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "E5"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SHL",
											"source": -1
										},
										{
											"begin": 1240,
											"end": 1308,
											"name": "DUP2",
											"source": 0
										},
										{
											"begin": 1240,
											"end": 1308,
											"name": "MSTORE",
											"source": 0
										},
										{
											"begin": 1240,
											"end": 1308,
											"name": "PUSH",
											"source": 0,
											"value": "4"
										},
										{
											"begin": 1240,
											"end": 1308,
											"name": "ADD",
											"source": 0
										},
										{
											"begin": 1240,
											"end": 1308,
											"name": "PUSH [tag]",
											"source": 0,
											"value": "250"
										},
										{
											"begin": 1240,
											"end": 1308,
											"name": "SWAP1",
											"source": 0
										},
										{
											"begin": 1240,
											"end": 1308,
											"name": "PUSH [tag]",
											"source": 0,
											"value": "251"
										},
										{
											"begin": 1240,
											"end": 1308,
											"name": "JUMP",
											"source": 0,
											"value": "[in]"
										},
										{
											"begin": 1240,
											"end": 1308,
											"name": "tag",
											"source": 0,
											"value": "339"
										},
										{
											"begin": 1240,
											"end": 1308,
											"name": "JUMPDEST",
											"source": 0
										},
										{
											"begin": 4783,
											"end": 4793,
											"name": "PUSH",
											"source": 11,
											"value": "B"
										},
										{
											"begin": 4783,
											"end": 4793,
											"name": "DUP1",
											"source": 11
										},
										{
											"begin": 4783,
											"end": 4793,
											"name": "SLOAD",
											"source": 11
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "FF"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "NOT",
											"source": -1
										},
										{
											"begin": 4769,
											"end": 4793,
											"name": "DUP2",
											"source": 11
										},
										{
											"begin": 4769,
											"end": 4793,
											"name": "AND",
											"source": 11
										},
										{
											"begin": 4783,
											"end": 4793,
											"name": "PUSH",
											"source": 11,
											"value": "FF"
										},
										{
											"begin": 4783,
											"end": 4793,
											"name": "SWAP1",
											"source": 11
										},
										{
											"begin": 4783,
											"end": 4793,
											"name": "SWAP2",
											"source": 11
										},
										{
											"begin": 4783,
											"end": 4793,
											"name": "AND",
											"source": 11
										},
										{
											"begin": 4782,
											"end": 4793,
											"name": "ISZERO",
											"source": 11
										},
										{
											"begin": 4769,
											"end": 4793,
											"name": "OR",
											"source": 11
										},
										{
											"begin": 4769,
											"end": 4793,
											"name": "SWAP1",
											"source": 11
										},
										{
											"begin": 4769,
											"end": 4793,
											"name": "SSTORE",
											"source": 11
										},
										{
											"begin": 4717,
											"end": 4800,
											"name": "JUMP",
											"source": 11,
											"value": "[out]"
										},
										{
											"begin": 7955,
											"end": 8077,
											"name": "tag",
											"source": 12,
											"value": "144"
										},
										{
											"begin": 7955,
											"end": 8077,
											"name": "JUMPDEST",
											"source": 12
										},
										{
											"begin": 8019,
											"end": 8026,
											"name": "PUSH",
											"source": 12,
											"value": "0"
										},
										{
											"begin": 8045,
											"end": 8065,
											"name": "PUSH [tag]",
											"source": 12,
											"value": "343"
										},
										{
											"begin": 8057,
											"end": 8064,
											"name": "DUP3",
											"source": 12
										},
										{
											"begin": 8045,
											"end": 8056,
											"name": "PUSH [tag]",
											"source": 12,
											"value": "344"
										},
										{
											"begin": 8045,
											"end": 8065,
											"name": "JUMP",
											"source": 12,
											"value": "[in]"
										},
										{
											"begin": 8045,
											"end": 8065,
											"name": "tag",
											"source": 12,
											"value": "343"
										},
										{
											"begin": 8045,
											"end": 8065,
											"name": "JUMPDEST",
											"source": 12
										},
										{
											"begin": 8045,
											"end": 8070,
											"name": "MLOAD",
											"source": 12
										},
										{
											"begin": 8045,
											"end": 8070,
											"name": "SWAP3",
											"source": 12
										},
										{
											"begin": 7955,
											"end": 8077,
											"name": "SWAP2",
											"source": 12
										},
										{
											"begin": -1,
											"end": -1,
											"name": "POP",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "POP",
											"source": -1
										},
										{
											"begin": 7955,
											"end": 8077,
											"name": "JUMP",
											"source": 12,
											"value": "[out]"
										},
										{
											"begin": 5202,
											"end": 5405,
											"name": "tag",
											"source": 12,
											"value": "153"
										},
										{
											"begin": 5202,
											"end": 5405,
											"name": "JUMPDEST",
											"source": 12
										},
										{
											"begin": 5266,
											"end": 5273,
											"name": "PUSH",
											"source": 12,
											"value": "0"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "A0"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SHL",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SUB",
											"source": -1
										},
										{
											"begin": 5289,
											"end": 5308,
											"name": "DUP3",
											"source": 12
										},
										{
											"begin": 5289,
											"end": 5308,
											"name": "AND",
											"source": 12
										},
										{
											"begin": 5285,
											"end": 5345,
											"name": "PUSH [tag]",
											"source": 12,
											"value": "346"
										},
										{
											"begin": 5285,
											"end": 5345,
											"name": "JUMPI",
											"source": 12
										},
										{
											"begin": 5317,
											"end": 5345,
											"name": "PUSH",
											"source": 12,
											"value": "40"
										},
										{
											"begin": 5317,
											"end": 5345,
											"name": "MLOAD",
											"source": 12
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "23D3AD81"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "E2"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SHL",
											"source": -1
										},
										{
											"begin": 5317,
											"end": 5345,
											"name": "DUP2",
											"source": 12
										},
										{
											"begin": 5317,
											"end": 5345,
											"name": "MSTORE",
											"source": 12
										},
										{
											"begin": 5317,
											"end": 5345,
											"name": "PUSH",
											"source": 12,
											"value": "4"
										},
										{
											"begin": 5317,
											"end": 5345,
											"name": "ADD",
											"source": 12
										},
										{
											"begin": 5317,
											"end": 5345,
											"name": "PUSH",
											"source": 12,
											"value": "40"
										},
										{
											"begin": 5317,
											"end": 5345,
											"name": "MLOAD",
											"source": 12
										},
										{
											"begin": 5317,
											"end": 5345,
											"name": "DUP1",
											"source": 12
										},
										{
											"begin": 5317,
											"end": 5345,
											"name": "SWAP2",
											"source": 12
										},
										{
											"begin": 5317,
											"end": 5345,
											"name": "SUB",
											"source": 12
										},
										{
											"begin": 5317,
											"end": 5345,
											"name": "SWAP1",
											"source": 12
										},
										{
											"begin": 5317,
											"end": 5345,
											"name": "REVERT",
											"source": 12
										},
										{
											"begin": 5285,
											"end": 5345,
											"name": "tag",
											"source": 12,
											"value": "346"
										},
										{
											"begin": 5285,
											"end": 5345,
											"name": "JUMPDEST",
											"source": 12
										},
										{
											"begin": -1,
											"end": -1,
											"name": "POP",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "A0"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SHL",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SUB",
											"source": -1
										},
										{
											"begin": 5370,
											"end": 5389,
											"name": "AND",
											"source": 12
										},
										{
											"begin": 5370,
											"end": 5389,
											"name": "PUSH",
											"source": 12,
											"value": "0"
										},
										{
											"begin": 5370,
											"end": 5389,
											"name": "SWAP1",
											"source": 12
										},
										{
											"begin": 5370,
											"end": 5389,
											"name": "DUP2",
											"source": 12
										},
										{
											"begin": 5370,
											"end": 5389,
											"name": "MSTORE",
											"source": 12
										},
										{
											"begin": 5370,
											"end": 5382,
											"name": "PUSH",
											"source": 12,
											"value": "5"
										},
										{
											"begin": 5370,
											"end": 5389,
											"name": "PUSH",
											"source": 12,
											"value": "20"
										},
										{
											"begin": 5370,
											"end": 5389,
											"name": "MSTORE",
											"source": 12
										},
										{
											"begin": 5370,
											"end": 5389,
											"name": "PUSH",
											"source": 12,
											"value": "40"
										},
										{
											"begin": 5370,
											"end": 5389,
											"name": "SWAP1",
											"source": 12
										},
										{
											"begin": 5370,
											"end": 5389,
											"name": "KECCAK256",
											"source": 12
										},
										{
											"begin": 5370,
											"end": 5397,
											"name": "SLOAD",
											"source": 12
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "40"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SHL",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SUB",
											"source": -1
										},
										{
											"begin": 5370,
											"end": 5397,
											"name": "AND",
											"source": 12
										},
										{
											"begin": 5370,
											"end": 5397,
											"name": "SWAP1",
											"source": 12
										},
										{
											"begin": 5202,
											"end": 5405,
											"name": "JUMP",
											"source": 12,
											"value": "[out]"
										},
										{
											"begin": 1668,
											"end": 1769,
											"name": "tag",
											"source": 0,
											"value": "157"
										},
										{
											"begin": 1668,
											"end": 1769,
											"name": "JUMPDEST",
											"source": 0
										},
										{
											"begin": 1108,
											"end": 1114,
											"name": "PUSH",
											"source": 0,
											"value": "8"
										},
										{
											"begin": 1108,
											"end": 1114,
											"name": "SLOAD",
											"source": 0
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "A0"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SHL",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SUB",
											"source": -1
										},
										{
											"begin": 1108,
											"end": 1114,
											"name": "AND",
											"source": 0
										},
										{
											"begin": 719,
											"end": 729,
											"name": "CALLER",
											"source": 6
										},
										{
											"begin": 1248,
											"end": 1271,
											"name": "EQ",
											"source": 0
										},
										{
											"begin": 1240,
											"end": 1308,
											"name": "PUSH [tag]",
											"source": 0,
											"value": "350"
										},
										{
											"begin": 1240,
											"end": 1308,
											"name": "JUMPI",
											"source": 0
										},
										{
											"begin": 1240,
											"end": 1308,
											"name": "PUSH",
											"source": 0,
											"value": "40"
										},
										{
											"begin": 1240,
											"end": 1308,
											"name": "MLOAD",
											"source": 0
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "461BCD"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "E5"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SHL",
											"source": -1
										},
										{
											"begin": 1240,
											"end": 1308,
											"name": "DUP2",
											"source": 0
										},
										{
											"begin": 1240,
											"end": 1308,
											"name": "MSTORE",
											"source": 0
										},
										{
											"begin": 1240,
											"end": 1308,
											"name": "PUSH",
											"source": 0,
											"value": "4"
										},
										{
											"begin": 1240,
											"end": 1308,
											"name": "ADD",
											"source": 0
										},
										{
											"begin": 1240,
											"end": 1308,
											"name": "PUSH [tag]",
											"source": 0,
											"value": "250"
										},
										{
											"begin": 1240,
											"end": 1308,
											"name": "SWAP1",
											"source": 0
										},
										{
											"begin": 1240,
											"end": 1308,
											"name": "PUSH [tag]",
											"source": 0,
											"value": "251"
										},
										{
											"begin": 1240,
											"end": 1308,
											"name": "JUMP",
											"source": 0,
											"value": "[in]"
										},
										{
											"begin": 1240,
											"end": 1308,
											"name": "tag",
											"source": 0,
											"value": "350"
										},
										{
											"begin": 1240,
											"end": 1308,
											"name": "JUMPDEST",
											"source": 0
										},
										{
											"begin": 1732,
											"end": 1762,
											"name": "PUSH [tag]",
											"source": 0,
											"value": "353"
										},
										{
											"begin": 1759,
											"end": 1760,
											"name": "PUSH",
											"source": 0,
											"value": "0"
										},
										{
											"begin": 1732,
											"end": 1750,
											"name": "PUSH [tag]",
											"source": 0,
											"value": "354"
										},
										{
											"begin": 1732,
											"end": 1762,
											"name": "JUMP",
											"source": 0,
											"value": "[in]"
										},
										{
											"begin": 1732,
											"end": 1762,
											"name": "tag",
											"source": 0,
											"value": "353"
										},
										{
											"begin": 1732,
											"end": 1762,
											"name": "JUMPDEST",
											"source": 0
										},
										{
											"begin": 1668,
											"end": 1769,
											"name": "JUMP",
											"source": 0,
											"value": "[out]"
										},
										{
											"begin": 4239,
											"end": 4342,
											"name": "tag",
											"source": 11,
											"value": "162"
										},
										{
											"begin": 4239,
											"end": 4342,
											"name": "JUMPDEST",
											"source": 11
										},
										{
											"begin": 1108,
											"end": 1114,
											"name": "PUSH",
											"source": 0,
											"value": "8"
										},
										{
											"begin": 1108,
											"end": 1114,
											"name": "SLOAD",
											"source": 0
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "A0"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SHL",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SUB",
											"source": -1
										},
										{
											"begin": 1108,
											"end": 1114,
											"name": "AND",
											"source": 0
										},
										{
											"begin": 719,
											"end": 729,
											"name": "CALLER",
											"source": 6
										},
										{
											"begin": 1248,
											"end": 1271,
											"name": "EQ",
											"source": 0
										},
										{
											"begin": 1240,
											"end": 1308,
											"name": "PUSH [tag]",
											"source": 0,
											"value": "358"
										},
										{
											"begin": 1240,
											"end": 1308,
											"name": "JUMPI",
											"source": 0
										},
										{
											"begin": 1240,
											"end": 1308,
											"name": "PUSH",
											"source": 0,
											"value": "40"
										},
										{
											"begin": 1240,
											"end": 1308,
											"name": "MLOAD",
											"source": 0
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "461BCD"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "E5"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SHL",
											"source": -1
										},
										{
											"begin": 1240,
											"end": 1308,
											"name": "DUP2",
											"source": 0
										},
										{
											"begin": 1240,
											"end": 1308,
											"name": "MSTORE",
											"source": 0
										},
										{
											"begin": 1240,
											"end": 1308,
											"name": "PUSH",
											"source": 0,
											"value": "4"
										},
										{
											"begin": 1240,
											"end": 1308,
											"name": "ADD",
											"source": 0
										},
										{
											"begin": 1240,
											"end": 1308,
											"name": "PUSH [tag]",
											"source": 0,
											"value": "250"
										},
										{
											"begin": 1240,
											"end": 1308,
											"name": "SWAP1",
											"source": 0
										},
										{
											"begin": 1240,
											"end": 1308,
											"name": "PUSH [tag]",
											"source": 0,
											"value": "251"
										},
										{
											"begin": 1240,
											"end": 1308,
											"name": "JUMP",
											"source": 0,
											"value": "[in]"
										},
										{
											"begin": 1240,
											"end": 1308,
											"name": "tag",
											"source": 0,
											"value": "358"
										},
										{
											"begin": 1240,
											"end": 1308,
											"name": "JUMPDEST",
											"source": 0
										},
										{
											"begin": 4311,
											"end": 4321,
											"name": "PUSH",
											"source": 11,
											"value": "C"
										},
										{
											"begin": 4311,
											"end": 4335,
											"name": "SSTORE",
											"source": 11
										},
										{
											"begin": 4239,
											"end": 4342,
											"name": "JUMP",
											"source": 11,
											"value": "[out]"
										},
										{
											"begin": 3571,
											"end": 3969,
											"name": "tag",
											"source": 11,
											"value": "165"
										},
										{
											"begin": 3571,
											"end": 3969,
											"name": "JUMPDEST",
											"source": 11
										},
										{
											"begin": 3613,
											"end": 3629,
											"name": "PUSH",
											"source": 11,
											"value": "60"
										},
										{
											"begin": 3657,
											"end": 3667,
											"name": "CALLER",
											"source": 11
										},
										{
											"begin": 3640,
											"end": 3654,
											"name": "PUSH",
											"source": 11,
											"value": "0"
										},
										{
											"begin": 3704,
											"end": 3721,
											"name": "PUSH [tag]",
											"source": 11,
											"value": "362"
										},
										{
											"begin": 3657,
											"end": 3667,
											"name": "DUP3",
											"source": 11
										},
										{
											"begin": 3704,
											"end": 3713,
											"name": "PUSH [tag]",
											"source": 11,
											"value": "153"
										},
										{
											"begin": 3704,
											"end": 3721,
											"name": "JUMP",
											"source": 11,
											"value": "[in]"
										},
										{
											"begin": 3704,
											"end": 3721,
											"name": "tag",
											"source": 11,
											"value": "362"
										},
										{
											"begin": 3704,
											"end": 3721,
											"name": "JUMPDEST",
											"source": 11
										},
										{
											"begin": 3677,
											"end": 3721,
											"name": "SWAP1",
											"source": 11
										},
										{
											"begin": 3677,
											"end": 3721,
											"name": "POP",
											"source": 11
										},
										{
											"begin": 3731,
											"end": 3756,
											"name": "PUSH",
											"source": 11,
											"value": "0"
										},
										{
											"begin": 3773,
											"end": 3789,
											"name": "DUP2",
											"source": 11
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "40"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SHL",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SUB",
											"source": -1
										},
										{
											"begin": 3759,
											"end": 3790,
											"name": "DUP2",
											"source": 11
										},
										{
											"begin": 3759,
											"end": 3790,
											"name": "GT",
											"source": 11
										},
										{
											"begin": 3759,
											"end": 3790,
											"name": "ISZERO",
											"source": 11
										},
										{
											"begin": 3759,
											"end": 3790,
											"name": "PUSH [tag]",
											"source": 11,
											"value": "364"
										},
										{
											"begin": 3759,
											"end": 3790,
											"name": "JUMPI",
											"source": 11
										},
										{
											"begin": 3759,
											"end": 3790,
											"name": "PUSH [tag]",
											"source": 11,
											"value": "364"
										},
										{
											"begin": 3759,
											"end": 3790,
											"name": "PUSH [tag]",
											"source": 11,
											"value": "365"
										},
										{
											"begin": 3759,
											"end": 3790,
											"name": "JUMP",
											"source": 11,
											"value": "[in]"
										},
										{
											"begin": 3759,
											"end": 3790,
											"name": "tag",
											"source": 11,
											"value": "364"
										},
										{
											"begin": 3759,
											"end": 3790,
											"name": "JUMPDEST",
											"source": 11
										},
										{
											"begin": 3759,
											"end": 3790,
											"name": "PUSH",
											"source": 11,
											"value": "40"
										},
										{
											"begin": 3759,
											"end": 3790,
											"name": "MLOAD",
											"source": 11
										},
										{
											"begin": 3759,
											"end": 3790,
											"name": "SWAP1",
											"source": 11
										},
										{
											"begin": 3759,
											"end": 3790,
											"name": "DUP1",
											"source": 11
										},
										{
											"begin": 3759,
											"end": 3790,
											"name": "DUP3",
											"source": 11
										},
										{
											"begin": 3759,
											"end": 3790,
											"name": "MSTORE",
											"source": 11
										},
										{
											"begin": 3759,
											"end": 3790,
											"name": "DUP1",
											"source": 11
										},
										{
											"begin": 3759,
											"end": 3790,
											"name": "PUSH",
											"source": 11,
											"value": "20"
										},
										{
											"begin": 3759,
											"end": 3790,
											"name": "MUL",
											"source": 11
										},
										{
											"begin": 3759,
											"end": 3790,
											"name": "PUSH",
											"source": 11,
											"value": "20"
										},
										{
											"begin": 3759,
											"end": 3790,
											"name": "ADD",
											"source": 11
										},
										{
											"begin": 3759,
											"end": 3790,
											"name": "DUP3",
											"source": 11
										},
										{
											"begin": 3759,
											"end": 3790,
											"name": "ADD",
											"source": 11
										},
										{
											"begin": 3759,
											"end": 3790,
											"name": "PUSH",
											"source": 11,
											"value": "40"
										},
										{
											"begin": 3759,
											"end": 3790,
											"name": "MSTORE",
											"source": 11
										},
										{
											"begin": 3759,
											"end": 3790,
											"name": "DUP1",
											"source": 11
										},
										{
											"begin": 3759,
											"end": 3790,
											"name": "ISZERO",
											"source": 11
										},
										{
											"begin": 3759,
											"end": 3790,
											"name": "PUSH [tag]",
											"source": 11,
											"value": "366"
										},
										{
											"begin": 3759,
											"end": 3790,
											"name": "JUMPI",
											"source": 11
										},
										{
											"begin": 3759,
											"end": 3790,
											"name": "DUP2",
											"source": 11
										},
										{
											"begin": 3759,
											"end": 3790,
											"name": "PUSH",
											"source": 11,
											"value": "20"
										},
										{
											"begin": 3759,
											"end": 3790,
											"name": "ADD",
											"source": 11
										},
										{
											"begin": 3759,
											"end": 3790,
											"name": "PUSH",
											"source": 11,
											"value": "20"
										},
										{
											"begin": 3759,
											"end": 3790,
											"name": "DUP3",
											"source": 11
										},
										{
											"begin": 3759,
											"end": 3790,
											"name": "MUL",
											"source": 11
										},
										{
											"begin": 3759,
											"end": 3790,
											"name": "DUP1",
											"source": 11
										},
										{
											"begin": 3759,
											"end": 3790,
											"name": "CALLDATASIZE",
											"source": 11
										},
										{
											"begin": 3759,
											"end": 3790,
											"name": "DUP4",
											"source": 11
										},
										{
											"begin": 3759,
											"end": 3790,
											"name": "CALLDATACOPY",
											"source": 11
										},
										{
											"begin": 3759,
											"end": 3790,
											"name": "ADD",
											"source": 11
										},
										{
											"begin": 3759,
											"end": 3790,
											"name": "SWAP1",
											"source": 11
										},
										{
											"begin": -1,
											"end": -1,
											"name": "POP",
											"source": -1
										},
										{
											"begin": 3759,
											"end": 3790,
											"name": "tag",
											"source": 11,
											"value": "366"
										},
										{
											"begin": 3759,
											"end": 3790,
											"name": "JUMPDEST",
											"source": 11
										},
										{
											"begin": 3759,
											"end": 3790,
											"name": "POP",
											"source": 11
										},
										{
											"begin": 3731,
											"end": 3790,
											"name": "SWAP1",
											"source": 11
										},
										{
											"begin": 3731,
											"end": 3790,
											"name": "POP",
											"source": 11
										},
										{
											"begin": 3805,
											"end": 3818,
											"name": "PUSH",
											"source": 11,
											"value": "0"
										},
										{
											"begin": 3801,
											"end": 3937,
											"name": "tag",
											"source": 11,
											"value": "367"
										},
										{
											"begin": 3801,
											"end": 3937,
											"name": "JUMPDEST",
											"source": 11
										},
										{
											"begin": 3832,
											"end": 3848,
											"name": "DUP3",
											"source": 11
										},
										{
											"begin": 3824,
											"end": 3829,
											"name": "DUP2",
											"source": 11
										},
										{
											"begin": 3824,
											"end": 3848,
											"name": "LT",
											"source": 11
										},
										{
											"begin": 3801,
											"end": 3937,
											"name": "ISZERO",
											"source": 11
										},
										{
											"begin": 3801,
											"end": 3937,
											"name": "PUSH [tag]",
											"source": 11,
											"value": "368"
										},
										{
											"begin": 3801,
											"end": 3937,
											"name": "JUMPI",
											"source": 11
										},
										{
											"begin": 3850,
											"end": 3857,
											"name": "DUP1",
											"source": 11
										},
										{
											"begin": 3850,
											"end": 3857,
											"name": "PUSH [tag]",
											"source": 11,
											"value": "370"
										},
										{
											"begin": 3850,
											"end": 3857,
											"name": "DUP2",
											"source": 11
										},
										{
											"begin": 3850,
											"end": 3857,
											"name": "PUSH [tag]",
											"source": 11,
											"value": "371"
										},
										{
											"begin": 3850,
											"end": 3857,
											"name": "JUMP",
											"source": 11,
											"value": "[in]"
										},
										{
											"begin": 3850,
											"end": 3857,
											"name": "tag",
											"source": 11,
											"value": "370"
										},
										{
											"begin": 3850,
											"end": 3857,
											"name": "JUMPDEST",
											"source": 11
										},
										{
											"begin": 3850,
											"end": 3857,
											"name": "SWAP2",
											"source": 11
										},
										{
											"begin": 3850,
											"end": 3857,
											"name": "POP",
											"source": 11
										},
										{
											"begin": 3850,
											"end": 3857,
											"name": "POP",
											"source": 11
										},
										{
											"begin": 3801,
											"end": 3937,
											"name": "PUSH [tag]",
											"source": 11,
											"value": "367"
										},
										{
											"begin": 3801,
											"end": 3937,
											"name": "JUMP",
											"source": 11
										},
										{
											"begin": 3801,
											"end": 3937,
											"name": "tag",
											"source": 11,
											"value": "368"
										},
										{
											"begin": 3801,
											"end": 3937,
											"name": "JUMPDEST",
											"source": 11
										},
										{
											"begin": -1,
											"end": -1,
											"name": "POP",
											"source": -1
										},
										{
											"begin": 3954,
											"end": 3962,
											"name": "SWAP4",
											"source": 11
										},
										{
											"begin": 3571,
											"end": 3969,
											"name": "SWAP3",
											"source": 11
										},
										{
											"begin": -1,
											"end": -1,
											"name": "POP",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "POP",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "POP",
											"source": -1
										},
										{
											"begin": 3571,
											"end": 3969,
											"name": "JUMP",
											"source": 11,
											"value": "[out]"
										},
										{
											"begin": 4522,
											"end": 4618,
											"name": "tag",
											"source": 11,
											"value": "178"
										},
										{
											"begin": 4522,
											"end": 4618,
											"name": "JUMPDEST",
											"source": 11
										},
										{
											"begin": 1108,
											"end": 1114,
											"name": "PUSH",
											"source": 0,
											"value": "8"
										},
										{
											"begin": 1108,
											"end": 1114,
											"name": "SLOAD",
											"source": 0
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "A0"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SHL",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SUB",
											"source": -1
										},
										{
											"begin": 1108,
											"end": 1114,
											"name": "AND",
											"source": 0
										},
										{
											"begin": 719,
											"end": 729,
											"name": "CALLER",
											"source": 6
										},
										{
											"begin": 1248,
											"end": 1271,
											"name": "EQ",
											"source": 0
										},
										{
											"begin": 1240,
											"end": 1308,
											"name": "PUSH [tag]",
											"source": 0,
											"value": "375"
										},
										{
											"begin": 1240,
											"end": 1308,
											"name": "JUMPI",
											"source": 0
										},
										{
											"begin": 1240,
											"end": 1308,
											"name": "PUSH",
											"source": 0,
											"value": "40"
										},
										{
											"begin": 1240,
											"end": 1308,
											"name": "MLOAD",
											"source": 0
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "461BCD"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "E5"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SHL",
											"source": -1
										},
										{
											"begin": 1240,
											"end": 1308,
											"name": "DUP2",
											"source": 0
										},
										{
											"begin": 1240,
											"end": 1308,
											"name": "MSTORE",
											"source": 0
										},
										{
											"begin": 1240,
											"end": 1308,
											"name": "PUSH",
											"source": 0,
											"value": "4"
										},
										{
											"begin": 1240,
											"end": 1308,
											"name": "ADD",
											"source": 0
										},
										{
											"begin": 1240,
											"end": 1308,
											"name": "PUSH [tag]",
											"source": 0,
											"value": "250"
										},
										{
											"begin": 1240,
											"end": 1308,
											"name": "SWAP1",
											"source": 0
										},
										{
											"begin": 1240,
											"end": 1308,
											"name": "PUSH [tag]",
											"source": 0,
											"value": "251"
										},
										{
											"begin": 1240,
											"end": 1308,
											"name": "JUMP",
											"source": 0,
											"value": "[in]"
										},
										{
											"begin": 1240,
											"end": 1308,
											"name": "tag",
											"source": 0,
											"value": "375"
										},
										{
											"begin": 1240,
											"end": 1308,
											"name": "JUMPDEST",
											"source": 0
										},
										{
											"begin": 4598,
											"end": 4611,
											"name": "PUSH",
											"source": 11,
											"value": "B"
										},
										{
											"begin": 4598,
											"end": 4611,
											"name": "DUP1",
											"source": 11
										},
										{
											"begin": 4598,
											"end": 4611,
											"name": "SLOAD",
											"source": 11
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "FF0000"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "NOT",
											"source": -1
										},
										{
											"begin": 4581,
											"end": 4611,
											"name": "DUP2",
											"source": 11
										},
										{
											"begin": 4581,
											"end": 4611,
											"name": "AND",
											"source": 11
										},
										{
											"begin": 4598,
											"end": 4611,
											"name": "PUSH",
											"source": 11,
											"value": "10000"
										},
										{
											"begin": 4598,
											"end": 4611,
											"name": "SWAP2",
											"source": 11
										},
										{
											"begin": 4598,
											"end": 4611,
											"name": "DUP3",
											"source": 11
										},
										{
											"begin": 4598,
											"end": 4611,
											"name": "SWAP1",
											"source": 11
										},
										{
											"begin": 4598,
											"end": 4611,
											"name": "DIV",
											"source": 11
										},
										{
											"begin": 4598,
											"end": 4611,
											"name": "PUSH",
											"source": 11,
											"value": "FF"
										},
										{
											"begin": 4598,
											"end": 4611,
											"name": "AND",
											"source": 11
										},
										{
											"begin": 4597,
											"end": 4611,
											"name": "ISZERO",
											"source": 11
										},
										{
											"begin": 4581,
											"end": 4611,
											"name": "SWAP1",
											"source": 11
										},
										{
											"begin": 4581,
											"end": 4611,
											"name": "SWAP2",
											"source": 11
										},
										{
											"begin": 4581,
											"end": 4611,
											"name": "MUL",
											"source": 11
										},
										{
											"begin": 4581,
											"end": 4611,
											"name": "OR",
											"source": 11
										},
										{
											"begin": 4581,
											"end": 4611,
											"name": "SWAP1",
											"source": 11
										},
										{
											"begin": 4581,
											"end": 4611,
											"name": "SSTORE",
											"source": 11
										},
										{
											"begin": 4522,
											"end": 4618,
											"name": "JUMP",
											"source": 11,
											"value": "[out]"
										},
										{
											"begin": 8301,
											"end": 8403,
											"name": "tag",
											"source": 12,
											"value": "185"
										},
										{
											"begin": 8301,
											"end": 8403,
											"name": "JUMPDEST",
											"source": 12
										},
										{
											"begin": 8357,
											"end": 8370,
											"name": "PUSH",
											"source": 12,
											"value": "60"
										},
										{
											"begin": 8389,
											"end": 8396,
											"name": "PUSH",
											"source": 12,
											"value": "3"
										},
										{
											"begin": 8382,
											"end": 8396,
											"name": "DUP1",
											"source": 12
										},
										{
											"begin": 8382,
											"end": 8396,
											"name": "SLOAD",
											"source": 12
										},
										{
											"begin": 8382,
											"end": 8396,
											"name": "PUSH [tag]",
											"source": 12,
											"value": "256"
										},
										{
											"begin": 8382,
											"end": 8396,
											"name": "SWAP1",
											"source": 12
										},
										{
											"begin": 8382,
											"end": 8396,
											"name": "PUSH [tag]",
											"source": 12,
											"value": "257"
										},
										{
											"begin": 8382,
											"end": 8396,
											"name": "JUMP",
											"source": 12,
											"value": "[in]"
										},
										{
											"begin": 1269,
											"end": 1810,
											"name": "tag",
											"source": 11,
											"value": "189"
										},
										{
											"begin": 1269,
											"end": 1810,
											"name": "JUMPDEST",
											"source": 11
										},
										{
											"begin": 1169,
											"end": 1178,
											"name": "ORIGIN",
											"source": 11
										},
										{
											"begin": 1182,
											"end": 1192,
											"name": "CALLER",
											"source": 11
										},
										{
											"begin": 1169,
											"end": 1192,
											"name": "EQ",
											"source": 11
										},
										{
											"begin": 1161,
											"end": 1245,
											"name": "PUSH [tag]",
											"source": 11,
											"value": "386"
										},
										{
											"begin": 1161,
											"end": 1245,
											"name": "JUMPI",
											"source": 11
										},
										{
											"begin": 1161,
											"end": 1245,
											"name": "PUSH",
											"source": 11,
											"value": "40"
										},
										{
											"begin": 1161,
											"end": 1245,
											"name": "MLOAD",
											"source": 11
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "461BCD"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "E5"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SHL",
											"source": -1
										},
										{
											"begin": 1161,
											"end": 1245,
											"name": "DUP2",
											"source": 11
										},
										{
											"begin": 1161,
											"end": 1245,
											"name": "MSTORE",
											"source": 11
										},
										{
											"begin": 1161,
											"end": 1245,
											"name": "PUSH",
											"source": 11,
											"value": "4"
										},
										{
											"begin": 1161,
											"end": 1245,
											"name": "ADD",
											"source": 11
										},
										{
											"begin": 1161,
											"end": 1245,
											"name": "PUSH [tag]",
											"source": 11,
											"value": "250"
										},
										{
											"begin": 1161,
											"end": 1245,
											"name": "SWAP1",
											"source": 11
										},
										{
											"begin": 1161,
											"end": 1245,
											"name": "PUSH [tag]",
											"source": 11,
											"value": "285"
										},
										{
											"begin": 1161,
											"end": 1245,
											"name": "JUMP",
											"source": 11,
											"value": "[in]"
										},
										{
											"begin": 1161,
											"end": 1245,
											"name": "tag",
											"source": 11,
											"value": "386"
										},
										{
											"begin": 1161,
											"end": 1245,
											"name": "JUMPDEST",
											"source": 11
										},
										{
											"begin": 1349,
											"end": 1359,
											"name": "PUSH",
											"source": 11,
											"value": "B"
										},
										{
											"begin": 1349,
											"end": 1359,
											"name": "SLOAD",
											"source": 11
										},
										{
											"begin": 1349,
											"end": 1359,
											"name": "PUSH",
											"source": 11,
											"value": "100"
										},
										{
											"begin": 1349,
											"end": 1359,
											"name": "SWAP1",
											"source": 11
										},
										{
											"begin": 1349,
											"end": 1359,
											"name": "DIV",
											"source": 11
										},
										{
											"begin": 1349,
											"end": 1359,
											"name": "PUSH",
											"source": 11,
											"value": "FF"
										},
										{
											"begin": 1349,
											"end": 1359,
											"name": "AND",
											"source": 11
										},
										{
											"begin": 1341,
											"end": 1397,
											"name": "PUSH [tag]",
											"source": 11,
											"value": "389"
										},
										{
											"begin": 1341,
											"end": 1397,
											"name": "JUMPI",
											"source": 11
										},
										{
											"begin": 1341,
											"end": 1397,
											"name": "PUSH",
											"source": 11,
											"value": "40"
										},
										{
											"begin": 1341,
											"end": 1397,
											"name": "MLOAD",
											"source": 11
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "461BCD"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "E5"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SHL",
											"source": -1
										},
										{
											"begin": 1341,
											"end": 1397,
											"name": "DUP2",
											"source": 11
										},
										{
											"begin": 1341,
											"end": 1397,
											"name": "MSTORE",
											"source": 11
										},
										{
											"begin": 11998,
											"end": 12000,
											"name": "PUSH",
											"source": 13,
											"value": "20"
										},
										{
											"begin": 1341,
											"end": 1397,
											"name": "PUSH",
											"source": 11,
											"value": "4"
										},
										{
											"begin": 1341,
											"end": 1397,
											"name": "DUP3",
											"source": 11
										},
										{
											"begin": 1341,
											"end": 1397,
											"name": "ADD",
											"source": 11
										},
										{
											"begin": 11980,
											"end": 12001,
											"name": "MSTORE",
											"source": 13
										},
										{
											"begin": 12037,
											"end": 12039,
											"name": "PUSH",
											"source": 13,
											"value": "21"
										},
										{
											"begin": 12017,
											"end": 12035,
											"name": "PUSH",
											"source": 13,
											"value": "24"
										},
										{
											"begin": 12017,
											"end": 12035,
											"name": "DUP3",
											"source": 13
										},
										{
											"begin": 12017,
											"end": 12035,
											"name": "ADD",
											"source": 13
										},
										{
											"begin": 12010,
											"end": 12040,
											"name": "MSTORE",
											"source": 13
										},
										{
											"begin": 12076,
											"end": 12110,
											"name": "PUSH",
											"source": 13,
											"value": "43727970746F42756C6C446F6773203A3A204E6F742059657420416374697665"
										},
										{
											"begin": 12056,
											"end": 12074,
											"name": "PUSH",
											"source": 13,
											"value": "44"
										},
										{
											"begin": 12056,
											"end": 12074,
											"name": "DUP3",
											"source": 13
										},
										{
											"begin": 12056,
											"end": 12074,
											"name": "ADD",
											"source": 13
										},
										{
											"begin": 12049,
											"end": 12111,
											"name": "MSTORE",
											"source": 13
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "17"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "F9"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SHL",
											"source": -1
										},
										{
											"begin": 12127,
											"end": 12145,
											"name": "PUSH",
											"source": 13,
											"value": "64"
										},
										{
											"begin": 12127,
											"end": 12145,
											"name": "DUP3",
											"source": 13
										},
										{
											"begin": 12127,
											"end": 12145,
											"name": "ADD",
											"source": 13
										},
										{
											"begin": 12120,
											"end": 12151,
											"name": "MSTORE",
											"source": 13
										},
										{
											"begin": 12168,
											"end": 12187,
											"name": "PUSH",
											"source": 13,
											"value": "84"
										},
										{
											"begin": 12168,
											"end": 12187,
											"name": "ADD",
											"source": 13
										},
										{
											"begin": 1341,
											"end": 1397,
											"name": "PUSH [tag]",
											"source": 11,
											"value": "250"
										},
										{
											"begin": 11796,
											"end": 12193,
											"name": "JUMP",
											"source": 13
										},
										{
											"begin": 1341,
											"end": 1397,
											"name": "tag",
											"source": 11,
											"value": "389"
										},
										{
											"begin": 1341,
											"end": 1397,
											"name": "JUMPDEST",
											"source": 11
										},
										{
											"begin": 346,
											"end": 350,
											"name": "PUSH",
											"source": 11,
											"value": "8AE"
										},
										{
											"begin": 1432,
											"end": 1441,
											"name": "DUP2",
											"source": 11
										},
										{
											"begin": 1416,
											"end": 1429,
											"name": "PUSH [tag]",
											"source": 11,
											"value": "392"
										},
										{
											"begin": 4364,
											"end": 4376,
											"name": "PUSH",
											"source": 12,
											"value": "1"
										},
										{
											"begin": 4364,
											"end": 4376,
											"name": "SLOAD",
											"source": 12
										},
										{
											"begin": 4158,
											"end": 4165,
											"name": "PUSH",
											"source": 12,
											"value": "0"
										},
										{
											"begin": 4348,
											"end": 4361,
											"name": "SLOAD",
											"source": 12
										},
										{
											"begin": 4348,
											"end": 4376,
											"name": "SUB",
											"source": 12
										},
										{
											"begin": 4348,
											"end": 4376,
											"name": "SWAP1",
											"source": 12
										},
										{
											"begin": 4114,
											"end": 4411,
											"name": "JUMP",
											"source": 12
										},
										{
											"begin": 1416,
											"end": 1429,
											"name": "tag",
											"source": 11,
											"value": "392"
										},
										{
											"begin": 1416,
											"end": 1429,
											"name": "JUMPDEST",
											"source": 11
										},
										{
											"begin": 1416,
											"end": 1441,
											"name": "PUSH [tag]",
											"source": 11,
											"value": "393"
										},
										{
											"begin": 1416,
											"end": 1441,
											"name": "SWAP2",
											"source": 11
										},
										{
											"begin": 1416,
											"end": 1441,
											"name": "SWAP1",
											"source": 11
										},
										{
											"begin": 1416,
											"end": 1441,
											"name": "PUSH [tag]",
											"source": 11,
											"value": "292"
										},
										{
											"begin": 1416,
											"end": 1441,
											"name": "JUMP",
											"source": 11,
											"value": "[in]"
										},
										{
											"begin": 1416,
											"end": 1441,
											"name": "tag",
											"source": 11,
											"value": "393"
										},
										{
											"begin": 1416,
											"end": 1441,
											"name": "JUMPDEST",
											"source": 11
										},
										{
											"begin": 1415,
											"end": 1456,
											"name": "GT",
											"source": 11
										},
										{
											"begin": 1415,
											"end": 1456,
											"name": "ISZERO",
											"source": 11
										},
										{
											"begin": 1407,
											"end": 1496,
											"name": "PUSH [tag]",
											"source": 11,
											"value": "394"
										},
										{
											"begin": 1407,
											"end": 1496,
											"name": "JUMPI",
											"source": 11
										},
										{
											"begin": 1407,
											"end": 1496,
											"name": "PUSH",
											"source": 11,
											"value": "40"
										},
										{
											"begin": 1407,
											"end": 1496,
											"name": "MLOAD",
											"source": 11
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "461BCD"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "E5"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SHL",
											"source": -1
										},
										{
											"begin": 1407,
											"end": 1496,
											"name": "DUP2",
											"source": 11
										},
										{
											"begin": 1407,
											"end": 1496,
											"name": "MSTORE",
											"source": 11
										},
										{
											"begin": 12400,
											"end": 12402,
											"name": "PUSH",
											"source": 13,
											"value": "20"
										},
										{
											"begin": 1407,
											"end": 1496,
											"name": "PUSH",
											"source": 11,
											"value": "4"
										},
										{
											"begin": 1407,
											"end": 1496,
											"name": "DUP3",
											"source": 11
										},
										{
											"begin": 1407,
											"end": 1496,
											"name": "ADD",
											"source": 11
										},
										{
											"begin": 12382,
											"end": 12403,
											"name": "MSTORE",
											"source": 13
										},
										{
											"begin": 12439,
											"end": 12441,
											"name": "PUSH",
											"source": 13,
											"value": "23"
										},
										{
											"begin": 12419,
											"end": 12437,
											"name": "PUSH",
											"source": 13,
											"value": "24"
										},
										{
											"begin": 12419,
											"end": 12437,
											"name": "DUP3",
											"source": 13
										},
										{
											"begin": 12419,
											"end": 12437,
											"name": "ADD",
											"source": 13
										},
										{
											"begin": 12412,
											"end": 12442,
											"name": "MSTORE",
											"source": 13
										},
										{
											"begin": 12478,
											"end": 12512,
											"name": "PUSH",
											"source": 13,
											"value": "43727970746F42756C6C446F6773203A3A204265796F6E64204D617820537570"
										},
										{
											"begin": 12458,
											"end": 12476,
											"name": "PUSH",
											"source": 13,
											"value": "44"
										},
										{
											"begin": 12458,
											"end": 12476,
											"name": "DUP3",
											"source": 13
										},
										{
											"begin": 12458,
											"end": 12476,
											"name": "ADD",
											"source": 13
										},
										{
											"begin": 12451,
											"end": 12513,
											"name": "MSTORE",
											"source": 13
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "706C79"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "E8"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SHL",
											"source": -1
										},
										{
											"begin": 12529,
											"end": 12547,
											"name": "PUSH",
											"source": 13,
											"value": "64"
										},
										{
											"begin": 12529,
											"end": 12547,
											"name": "DUP3",
											"source": 13
										},
										{
											"begin": 12529,
											"end": 12547,
											"name": "ADD",
											"source": 13
										},
										{
											"begin": 12522,
											"end": 12555,
											"name": "MSTORE",
											"source": 13
										},
										{
											"begin": 12572,
											"end": 12591,
											"name": "PUSH",
											"source": 13,
											"value": "84"
										},
										{
											"begin": 12572,
											"end": 12591,
											"name": "ADD",
											"source": 13
										},
										{
											"begin": 1407,
											"end": 1496,
											"name": "PUSH [tag]",
											"source": 11,
											"value": "250"
										},
										{
											"begin": 12198,
											"end": 12597,
											"name": "JUMP",
											"source": 13
										},
										{
											"begin": 1407,
											"end": 1496,
											"name": "tag",
											"source": 11,
											"value": "394"
										},
										{
											"begin": 1407,
											"end": 1496,
											"name": "JUMPDEST",
											"source": 11
										},
										{
											"begin": 1531,
											"end": 1541,
											"name": "CALLER",
											"source": 11
										},
										{
											"begin": 1515,
											"end": 1542,
											"name": "PUSH",
											"source": 11,
											"value": "0"
										},
										{
											"begin": 1515,
											"end": 1542,
											"name": "SWAP1",
											"source": 11
										},
										{
											"begin": 1515,
											"end": 1542,
											"name": "DUP2",
											"source": 11
										},
										{
											"begin": 1515,
											"end": 1542,
											"name": "MSTORE",
											"source": 11
										},
										{
											"begin": 1515,
											"end": 1530,
											"name": "PUSH",
											"source": 11,
											"value": "D"
										},
										{
											"begin": 1515,
											"end": 1542,
											"name": "PUSH",
											"source": 11,
											"value": "20"
										},
										{
											"begin": 1515,
											"end": 1542,
											"name": "MSTORE",
											"source": 11
										},
										{
											"begin": 1515,
											"end": 1542,
											"name": "PUSH",
											"source": 11,
											"value": "40"
										},
										{
											"begin": 1515,
											"end": 1542,
											"name": "SWAP1",
											"source": 11
										},
										{
											"begin": 1515,
											"end": 1542,
											"name": "KECCAK256",
											"source": 11
										},
										{
											"begin": 1515,
											"end": 1542,
											"name": "SLOAD",
											"source": 11
										},
										{
											"begin": 398,
											"end": 400,
											"name": "PUSH",
											"source": 11,
											"value": "A"
										},
										{
											"begin": 398,
											"end": 400,
											"name": "SWAP1",
											"source": 11
										},
										{
											"begin": 1515,
											"end": 1553,
											"name": "PUSH [tag]",
											"source": 11,
											"value": "397"
										},
										{
											"begin": 1515,
											"end": 1553,
											"name": "SWAP1",
											"source": 11
										},
										{
											"begin": 1544,
											"end": 1553,
											"name": "DUP4",
											"source": 11
										},
										{
											"begin": 1544,
											"end": 1553,
											"name": "SWAP1",
											"source": 11
										},
										{
											"begin": 1515,
											"end": 1553,
											"name": "PUSH [tag]",
											"source": 11,
											"value": "292"
										},
										{
											"begin": 1515,
											"end": 1553,
											"name": "JUMP",
											"source": 11,
											"value": "[in]"
										},
										{
											"begin": 1515,
											"end": 1553,
											"name": "tag",
											"source": 11,
											"value": "397"
										},
										{
											"begin": 1515,
											"end": 1553,
											"name": "JUMPDEST",
											"source": 11
										},
										{
											"begin": 1514,
											"end": 1573,
											"name": "GT",
											"source": 11
										},
										{
											"begin": 1514,
											"end": 1573,
											"name": "ISZERO",
											"source": 11
										},
										{
											"begin": 1506,
											"end": 1619,
											"name": "PUSH [tag]",
											"source": 11,
											"value": "398"
										},
										{
											"begin": 1506,
											"end": 1619,
											"name": "JUMPI",
											"source": 11
										},
										{
											"begin": 1506,
											"end": 1619,
											"name": "PUSH",
											"source": 11,
											"value": "40"
										},
										{
											"begin": 1506,
											"end": 1619,
											"name": "MLOAD",
											"source": 11
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "461BCD"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "E5"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SHL",
											"source": -1
										},
										{
											"begin": 1506,
											"end": 1619,
											"name": "DUP2",
											"source": 11
										},
										{
											"begin": 1506,
											"end": 1619,
											"name": "MSTORE",
											"source": 11
										},
										{
											"begin": 12804,
											"end": 12806,
											"name": "PUSH",
											"source": 13,
											"value": "20"
										},
										{
											"begin": 1506,
											"end": 1619,
											"name": "PUSH",
											"source": 11,
											"value": "4"
										},
										{
											"begin": 1506,
											"end": 1619,
											"name": "DUP3",
											"source": 11
										},
										{
											"begin": 1506,
											"end": 1619,
											"name": "ADD",
											"source": 11
										},
										{
											"begin": 12786,
											"end": 12807,
											"name": "MSTORE",
											"source": 13
										},
										{
											"begin": 12843,
											"end": 12845,
											"name": "PUSH",
											"source": 13,
											"value": "29"
										},
										{
											"begin": 12823,
											"end": 12841,
											"name": "PUSH",
											"source": 13,
											"value": "24"
										},
										{
											"begin": 12823,
											"end": 12841,
											"name": "DUP3",
											"source": 13
										},
										{
											"begin": 12823,
											"end": 12841,
											"name": "ADD",
											"source": 13
										},
										{
											"begin": 12816,
											"end": 12846,
											"name": "MSTORE",
											"source": 13
										},
										{
											"begin": 12882,
											"end": 12916,
											"name": "PUSH",
											"source": 13,
											"value": "43727970746F42756C6C446F6773203A3A20416C7265616479206D696E746564"
										},
										{
											"begin": 12862,
											"end": 12880,
											"name": "PUSH",
											"source": 13,
											"value": "44"
										},
										{
											"begin": 12862,
											"end": 12880,
											"name": "DUP3",
											"source": 13
										},
										{
											"begin": 12862,
											"end": 12880,
											"name": "ADD",
											"source": 13
										},
										{
											"begin": 12855,
											"end": 12917,
											"name": "MSTORE",
											"source": 13
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "20332074696D657321"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "B8"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SHL",
											"source": -1
										},
										{
											"begin": 12933,
											"end": 12951,
											"name": "PUSH",
											"source": 13,
											"value": "64"
										},
										{
											"begin": 12933,
											"end": 12951,
											"name": "DUP3",
											"source": 13
										},
										{
											"begin": 12933,
											"end": 12951,
											"name": "ADD",
											"source": 13
										},
										{
											"begin": 12926,
											"end": 12965,
											"name": "MSTORE",
											"source": 13
										},
										{
											"begin": 12982,
											"end": 13001,
											"name": "PUSH",
											"source": 13,
											"value": "84"
										},
										{
											"begin": 12982,
											"end": 13001,
											"name": "ADD",
											"source": 13
										},
										{
											"begin": 1506,
											"end": 1619,
											"name": "PUSH [tag]",
											"source": 11,
											"value": "250"
										},
										{
											"begin": 12602,
											"end": 13007,
											"name": "JUMP",
											"source": 13
										},
										{
											"begin": 1506,
											"end": 1619,
											"name": "tag",
											"source": 11,
											"value": "398"
										},
										{
											"begin": 1506,
											"end": 1619,
											"name": "JUMPDEST",
											"source": 11
										},
										{
											"begin": 1651,
											"end": 1680,
											"name": "PUSH [tag]",
											"source": 11,
											"value": "401"
										},
										{
											"begin": 1671,
											"end": 1680,
											"name": "DUP2",
											"source": 11
										},
										{
											"begin": 503,
											"end": 512,
											"name": "PUSH",
											"source": 11,
											"value": "8E1BC9BF040000"
										},
										{
											"begin": 1651,
											"end": 1680,
											"name": "PUSH [tag]",
											"source": 11,
											"value": "301"
										},
										{
											"begin": 1651,
											"end": 1680,
											"name": "JUMP",
											"source": 11,
											"value": "[in]"
										},
										{
											"begin": 1651,
											"end": 1680,
											"name": "tag",
											"source": 11,
											"value": "401"
										},
										{
											"begin": 1651,
											"end": 1680,
											"name": "JUMPDEST",
											"source": 11
										},
										{
											"begin": 1637,
											"end": 1646,
											"name": "CALLVALUE",
											"source": 11
										},
										{
											"begin": 1637,
											"end": 1681,
											"name": "LT",
											"source": 11
										},
										{
											"begin": 1637,
											"end": 1681,
											"name": "ISZERO",
											"source": 11
										},
										{
											"begin": 1629,
											"end": 1710,
											"name": "PUSH [tag]",
											"source": 11,
											"value": "402"
										},
										{
											"begin": 1629,
											"end": 1710,
											"name": "JUMPI",
											"source": 11
										},
										{
											"begin": 1629,
											"end": 1710,
											"name": "PUSH",
											"source": 11,
											"value": "40"
										},
										{
											"begin": 1629,
											"end": 1710,
											"name": "MLOAD",
											"source": 11
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "461BCD"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "E5"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SHL",
											"source": -1
										},
										{
											"begin": 1629,
											"end": 1710,
											"name": "DUP2",
											"source": 11
										},
										{
											"begin": 1629,
											"end": 1710,
											"name": "MSTORE",
											"source": 11
										},
										{
											"begin": 13214,
											"end": 13216,
											"name": "PUSH",
											"source": 13,
											"value": "20"
										},
										{
											"begin": 1629,
											"end": 1710,
											"name": "PUSH",
											"source": 11,
											"value": "4"
										},
										{
											"begin": 1629,
											"end": 1710,
											"name": "DUP3",
											"source": 11
										},
										{
											"begin": 1629,
											"end": 1710,
											"name": "ADD",
											"source": 11
										},
										{
											"begin": 13196,
											"end": 13217,
											"name": "MSTORE",
											"source": 13
										},
										{
											"begin": 13253,
											"end": 13255,
											"name": "PUSH",
											"source": 13,
											"value": "18"
										},
										{
											"begin": 13233,
											"end": 13251,
											"name": "PUSH",
											"source": 13,
											"value": "24"
										},
										{
											"begin": 13233,
											"end": 13251,
											"name": "DUP3",
											"source": 13
										},
										{
											"begin": 13233,
											"end": 13251,
											"name": "ADD",
											"source": 13
										},
										{
											"begin": 13226,
											"end": 13256,
											"name": "MSTORE",
											"source": 13
										},
										{
											"begin": 13292,
											"end": 13318,
											"name": "PUSH",
											"source": 13,
											"value": "43727970746F42756C6C446F6773203A3A2042656C6F77200000000000000000"
										},
										{
											"begin": 13272,
											"end": 13290,
											"name": "PUSH",
											"source": 13,
											"value": "44"
										},
										{
											"begin": 13272,
											"end": 13290,
											"name": "DUP3",
											"source": 13
										},
										{
											"begin": 13272,
											"end": 13290,
											"name": "ADD",
											"source": 13
										},
										{
											"begin": 13265,
											"end": 13319,
											"name": "MSTORE",
											"source": 13
										},
										{
											"begin": 13336,
											"end": 13354,
											"name": "PUSH",
											"source": 13,
											"value": "64"
										},
										{
											"begin": 13336,
											"end": 13354,
											"name": "ADD",
											"source": 13
										},
										{
											"begin": 1629,
											"end": 1710,
											"name": "PUSH [tag]",
											"source": 11,
											"value": "250"
										},
										{
											"begin": 13012,
											"end": 13360,
											"name": "JUMP",
											"source": 13
										},
										{
											"begin": 1629,
											"end": 1710,
											"name": "tag",
											"source": 11,
											"value": "402"
										},
										{
											"begin": 1629,
											"end": 1710,
											"name": "JUMPDEST",
											"source": 11
										},
										{
											"begin": 1737,
											"end": 1747,
											"name": "CALLER",
											"source": 11
										},
										{
											"begin": 1721,
											"end": 1748,
											"name": "PUSH",
											"source": 11,
											"value": "0"
										},
										{
											"begin": 1721,
											"end": 1748,
											"name": "SWAP1",
											"source": 11
										},
										{
											"begin": 1721,
											"end": 1748,
											"name": "DUP2",
											"source": 11
										},
										{
											"begin": 1721,
											"end": 1748,
											"name": "MSTORE",
											"source": 11
										},
										{
											"begin": 1721,
											"end": 1736,
											"name": "PUSH",
											"source": 11,
											"value": "D"
										},
										{
											"begin": 1721,
											"end": 1748,
											"name": "PUSH",
											"source": 11,
											"value": "20"
										},
										{
											"begin": 1721,
											"end": 1748,
											"name": "MSTORE",
											"source": 11
										},
										{
											"begin": 1721,
											"end": 1748,
											"name": "PUSH",
											"source": 11,
											"value": "40"
										},
										{
											"begin": 1721,
											"end": 1748,
											"name": "DUP2",
											"source": 11
										},
										{
											"begin": 1721,
											"end": 1748,
											"name": "KECCAK256",
											"source": 11
										},
										{
											"begin": 1721,
											"end": 1761,
											"name": "DUP1",
											"source": 11
										},
										{
											"begin": 1721,
											"end": 1761,
											"name": "SLOAD",
											"source": 11
										},
										{
											"begin": 1752,
											"end": 1761,
											"name": "DUP4",
											"source": 11
										},
										{
											"begin": 1752,
											"end": 1761,
											"name": "SWAP3",
											"source": 11
										},
										{
											"begin": 1721,
											"end": 1748,
											"name": "SWAP1",
											"source": 11
										},
										{
											"begin": 1721,
											"end": 1761,
											"name": "PUSH [tag]",
											"source": 11,
											"value": "405"
										},
										{
											"begin": 1721,
											"end": 1761,
											"name": "SWAP1",
											"source": 11
										},
										{
											"begin": 1752,
											"end": 1761,
											"name": "DUP5",
											"source": 11
										},
										{
											"begin": 1752,
											"end": 1761,
											"name": "SWAP1",
											"source": 11
										},
										{
											"begin": 1721,
											"end": 1761,
											"name": "PUSH [tag]",
											"source": 11,
											"value": "292"
										},
										{
											"begin": 1721,
											"end": 1761,
											"name": "JUMP",
											"source": 11,
											"value": "[in]"
										},
										{
											"begin": 1721,
											"end": 1761,
											"name": "tag",
											"source": 11,
											"value": "405"
										},
										{
											"begin": 1721,
											"end": 1761,
											"name": "JUMPDEST",
											"source": 11
										},
										{
											"begin": 1721,
											"end": 1761,
											"name": "SWAP1",
											"source": 11
										},
										{
											"begin": 1721,
											"end": 1761,
											"name": "SWAP2",
											"source": 11
										},
										{
											"begin": 1721,
											"end": 1761,
											"name": "SSTORE",
											"source": 11
										},
										{
											"begin": -1,
											"end": -1,
											"name": "POP",
											"source": -1
										},
										{
											"begin": 1771,
											"end": 1803,
											"name": "PUSH [tag]",
											"source": 11,
											"value": "406"
										},
										{
											"begin": 1771,
											"end": 1803,
											"name": "SWAP1",
											"source": 11
										},
										{
											"begin": -1,
											"end": -1,
											"name": "POP",
											"source": -1
										},
										{
											"begin": 1781,
											"end": 1791,
											"name": "CALLER",
											"source": 11
										},
										{
											"begin": 1793,
											"end": 1802,
											"name": "DUP3",
											"source": 11
										},
										{
											"begin": 1771,
											"end": 1780,
											"name": "PUSH [tag]",
											"source": 11,
											"value": "314"
										},
										{
											"begin": 1771,
											"end": 1803,
											"name": "JUMP",
											"source": 11,
											"value": "[in]"
										},
										{
											"begin": 1771,
											"end": 1803,
											"name": "tag",
											"source": 11,
											"value": "406"
										},
										{
											"begin": 1771,
											"end": 1803,
											"name": "JUMPDEST",
											"source": 11
										},
										{
											"begin": 1269,
											"end": 1810,
											"name": "POP",
											"source": 11
										},
										{
											"begin": 1269,
											"end": 1810,
											"name": "JUMP",
											"source": 11,
											"value": "[out]"
										},
										{
											"begin": 9862,
											"end": 10136,
											"name": "tag",
											"source": 12,
											"value": "194"
										},
										{
											"begin": 9862,
											"end": 10136,
											"name": "JUMPDEST",
											"source": 12
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "A0"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SHL",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SUB",
											"source": -1
										},
										{
											"begin": 9952,
											"end": 9976,
											"name": "DUP3",
											"source": 12
										},
										{
											"begin": 9952,
											"end": 9976,
											"name": "AND",
											"source": 12
										},
										{
											"begin": 719,
											"end": 729,
											"name": "CALLER",
											"source": 6
										},
										{
											"begin": 9952,
											"end": 9976,
											"name": "EQ",
											"source": 12
										},
										{
											"begin": 9948,
											"end": 10002,
											"name": "ISZERO",
											"source": 12
										},
										{
											"begin": 9948,
											"end": 10002,
											"name": "PUSH [tag]",
											"source": 12,
											"value": "409"
										},
										{
											"begin": 9948,
											"end": 10002,
											"name": "JUMPI",
											"source": 12
										},
										{
											"begin": 9985,
											"end": 10002,
											"name": "PUSH",
											"source": 12,
											"value": "40"
										},
										{
											"begin": 9985,
											"end": 10002,
											"name": "MLOAD",
											"source": 12
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "B06307DB"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "E0"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SHL",
											"source": -1
										},
										{
											"begin": 9985,
											"end": 10002,
											"name": "DUP2",
											"source": 12
										},
										{
											"begin": 9985,
											"end": 10002,
											"name": "MSTORE",
											"source": 12
										},
										{
											"begin": 9985,
											"end": 10002,
											"name": "PUSH",
											"source": 12,
											"value": "4"
										},
										{
											"begin": 9985,
											"end": 10002,
											"name": "ADD",
											"source": 12
										},
										{
											"begin": 9985,
											"end": 10002,
											"name": "PUSH",
											"source": 12,
											"value": "40"
										},
										{
											"begin": 9985,
											"end": 10002,
											"name": "MLOAD",
											"source": 12
										},
										{
											"begin": 9985,
											"end": 10002,
											"name": "DUP1",
											"source": 12
										},
										{
											"begin": 9985,
											"end": 10002,
											"name": "SWAP2",
											"source": 12
										},
										{
											"begin": 9985,
											"end": 10002,
											"name": "SUB",
											"source": 12
										},
										{
											"begin": 9985,
											"end": 10002,
											"name": "SWAP1",
											"source": 12
										},
										{
											"begin": 9985,
											"end": 10002,
											"name": "REVERT",
											"source": 12
										},
										{
											"begin": 9948,
											"end": 10002,
											"name": "tag",
											"source": 12,
											"value": "409"
										},
										{
											"begin": 9948,
											"end": 10002,
											"name": "JUMPDEST",
											"source": 12
										},
										{
											"begin": 719,
											"end": 729,
											"name": "CALLER",
											"source": 6
										},
										{
											"begin": 10013,
											"end": 10045,
											"name": "PUSH",
											"source": 12,
											"value": "0"
										},
										{
											"begin": 10013,
											"end": 10045,
											"name": "DUP2",
											"source": 12
										},
										{
											"begin": 10013,
											"end": 10045,
											"name": "DUP2",
											"source": 12
										},
										{
											"begin": 10013,
											"end": 10045,
											"name": "MSTORE",
											"source": 12
										},
										{
											"begin": 10013,
											"end": 10031,
											"name": "PUSH",
											"source": 12,
											"value": "7"
										},
										{
											"begin": 10013,
											"end": 10045,
											"name": "PUSH",
											"source": 12,
											"value": "20"
										},
										{
											"begin": 10013,
											"end": 10045,
											"name": "SWAP1",
											"source": 12
										},
										{
											"begin": 10013,
											"end": 10045,
											"name": "DUP2",
											"source": 12
										},
										{
											"begin": 10013,
											"end": 10045,
											"name": "MSTORE",
											"source": 12
										},
										{
											"begin": 10013,
											"end": 10045,
											"name": "PUSH",
											"source": 12,
											"value": "40"
										},
										{
											"begin": 10013,
											"end": 10045,
											"name": "DUP1",
											"source": 12
										},
										{
											"begin": 10013,
											"end": 10045,
											"name": "DUP4",
											"source": 12
										},
										{
											"begin": 10013,
											"end": 10045,
											"name": "KECCAK256",
											"source": 12
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "A0"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SHL",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SUB",
											"source": -1
										},
										{
											"begin": 10013,
											"end": 10055,
											"name": "DUP8",
											"source": 12
										},
										{
											"begin": 10013,
											"end": 10055,
											"name": "AND",
											"source": 12
										},
										{
											"begin": 10013,
											"end": 10055,
											"name": "DUP1",
											"source": 12
										},
										{
											"begin": 10013,
											"end": 10055,
											"name": "DUP6",
											"source": 12
										},
										{
											"begin": 10013,
											"end": 10055,
											"name": "MSTORE",
											"source": 12
										},
										{
											"begin": 10013,
											"end": 10055,
											"name": "SWAP1",
											"source": 12
										},
										{
											"begin": 10013,
											"end": 10055,
											"name": "DUP4",
											"source": 12
										},
										{
											"begin": 10013,
											"end": 10055,
											"name": "MSTORE",
											"source": 12
										},
										{
											"begin": 10013,
											"end": 10055,
											"name": "SWAP3",
											"source": 12
										},
										{
											"begin": 10013,
											"end": 10055,
											"name": "DUP2",
											"source": 12
										},
										{
											"begin": 10013,
											"end": 10055,
											"name": "SWAP1",
											"source": 12
										},
										{
											"begin": 10013,
											"end": 10055,
											"name": "KECCAK256",
											"source": 12
										},
										{
											"begin": 10013,
											"end": 10066,
											"name": "DUP1",
											"source": 12
										},
										{
											"begin": 10013,
											"end": 10066,
											"name": "SLOAD",
											"source": 12
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "FF"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "NOT",
											"source": -1
										},
										{
											"begin": 10013,
											"end": 10066,
											"name": "AND",
											"source": 12
										},
										{
											"begin": 10013,
											"end": 10066,
											"name": "DUP7",
											"source": 12
										},
										{
											"begin": 10013,
											"end": 10066,
											"name": "ISZERO",
											"source": 12
										},
										{
											"begin": 10013,
											"end": 10066,
											"name": "ISZERO",
											"source": 12
										},
										{
											"begin": 10013,
											"end": 10066,
											"name": "SWAP1",
											"source": 12
										},
										{
											"begin": 10013,
											"end": 10066,
											"name": "DUP2",
											"source": 12
										},
										{
											"begin": 10013,
											"end": 10066,
											"name": "OR",
											"source": 12
										},
										{
											"begin": 10013,
											"end": 10066,
											"name": "SWAP1",
											"source": 12
										},
										{
											"begin": 10013,
											"end": 10066,
											"name": "SWAP2",
											"source": 12
										},
										{
											"begin": 10013,
											"end": 10066,
											"name": "SSTORE",
											"source": 12
										},
										{
											"begin": 10081,
											"end": 10129,
											"name": "SWAP1",
											"source": 12
										},
										{
											"begin": 10081,
											"end": 10129,
											"name": "MLOAD",
											"source": 12
										},
										{
											"begin": 540,
											"end": 581,
											"name": "SWAP1",
											"source": 13
										},
										{
											"begin": 540,
											"end": 581,
											"name": "DUP2",
											"source": 13
										},
										{
											"begin": 540,
											"end": 581,
											"name": "MSTORE",
											"source": 13
										},
										{
											"begin": 10013,
											"end": 10055,
											"name": "SWAP2",
											"source": 12
										},
										{
											"begin": 10013,
											"end": 10055,
											"name": "SWAP3",
											"source": 12
										},
										{
											"begin": 719,
											"end": 729,
											"name": "SWAP2",
											"source": 6
										},
										{
											"begin": 10081,
											"end": 10129,
											"name": "PUSH",
											"source": 12,
											"value": "17307EAB39AB6107E8899845AD3D59BD9653F200F220920489CA2B5937696C31"
										},
										{
											"begin": 10081,
											"end": 10129,
											"name": "SWAP2",
											"source": 12
										},
										{
											"begin": 513,
											"end": 531,
											"name": "ADD",
											"source": 13
										},
										{
											"begin": 10081,
											"end": 10129,
											"name": "PUSH",
											"source": 12,
											"value": "40"
										},
										{
											"begin": 10081,
											"end": 10129,
											"name": "MLOAD",
											"source": 12
										},
										{
											"begin": 10081,
											"end": 10129,
											"name": "DUP1",
											"source": 12
										},
										{
											"begin": 10081,
											"end": 10129,
											"name": "SWAP2",
											"source": 12
										},
										{
											"begin": 10081,
											"end": 10129,
											"name": "SUB",
											"source": 12
										},
										{
											"begin": 10081,
											"end": 10129,
											"name": "SWAP1",
											"source": 12
										},
										{
											"begin": 10081,
											"end": 10129,
											"name": "LOG3",
											"source": 12
										},
										{
											"begin": 9862,
											"end": 10136,
											"name": "POP",
											"source": 12
										},
										{
											"begin": 9862,
											"end": 10136,
											"name": "POP",
											"source": 12
										},
										{
											"begin": 9862,
											"end": 10136,
											"name": "JUMP",
											"source": 12,
											"value": "[out]"
										},
										{
											"begin": 4093,
											"end": 4233,
											"name": "tag",
											"source": 11,
											"value": "198"
										},
										{
											"begin": 4093,
											"end": 4233,
											"name": "JUMPDEST",
											"source": 11
										},
										{
											"begin": 1108,
											"end": 1114,
											"name": "PUSH",
											"source": 0,
											"value": "8"
										},
										{
											"begin": 1108,
											"end": 1114,
											"name": "SLOAD",
											"source": 0
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "A0"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SHL",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SUB",
											"source": -1
										},
										{
											"begin": 1108,
											"end": 1114,
											"name": "AND",
											"source": 0
										},
										{
											"begin": 719,
											"end": 729,
											"name": "CALLER",
											"source": 6
										},
										{
											"begin": 1248,
											"end": 1271,
											"name": "EQ",
											"source": 0
										},
										{
											"begin": 1240,
											"end": 1308,
											"name": "PUSH [tag]",
											"source": 0,
											"value": "416"
										},
										{
											"begin": 1240,
											"end": 1308,
											"name": "JUMPI",
											"source": 0
										},
										{
											"begin": 1240,
											"end": 1308,
											"name": "PUSH",
											"source": 0,
											"value": "40"
										},
										{
											"begin": 1240,
											"end": 1308,
											"name": "MLOAD",
											"source": 0
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "461BCD"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "E5"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SHL",
											"source": -1
										},
										{
											"begin": 1240,
											"end": 1308,
											"name": "DUP2",
											"source": 0
										},
										{
											"begin": 1240,
											"end": 1308,
											"name": "MSTORE",
											"source": 0
										},
										{
											"begin": 1240,
											"end": 1308,
											"name": "PUSH",
											"source": 0,
											"value": "4"
										},
										{
											"begin": 1240,
											"end": 1308,
											"name": "ADD",
											"source": 0
										},
										{
											"begin": 1240,
											"end": 1308,
											"name": "PUSH [tag]",
											"source": 0,
											"value": "250"
										},
										{
											"begin": 1240,
											"end": 1308,
											"name": "SWAP1",
											"source": 0
										},
										{
											"begin": 1240,
											"end": 1308,
											"name": "PUSH [tag]",
											"source": 0,
											"value": "251"
										},
										{
											"begin": 1240,
											"end": 1308,
											"name": "JUMP",
											"source": 0,
											"value": "[in]"
										},
										{
											"begin": 1240,
											"end": 1308,
											"name": "tag",
											"source": 0,
											"value": "416"
										},
										{
											"begin": 1240,
											"end": 1308,
											"name": "JUMPDEST",
											"source": 0
										},
										{
											"begin": 4184,
											"end": 4226,
											"name": "DUP1",
											"source": 11
										},
										{
											"begin": 4184,
											"end": 4226,
											"name": "MLOAD",
											"source": 11
										},
										{
											"begin": 4184,
											"end": 4226,
											"name": "PUSH [tag]",
											"source": 11,
											"value": "253"
										},
										{
											"begin": 4184,
											"end": 4226,
											"name": "SWAP1",
											"source": 11
										},
										{
											"begin": 4184,
											"end": 4203,
											"name": "PUSH",
											"source": 11,
											"value": "A"
										},
										{
											"begin": 4184,
											"end": 4203,
											"name": "SWAP1",
											"source": 11
										},
										{
											"begin": 4184,
											"end": 4226,
											"name": "PUSH",
											"source": 11,
											"value": "20"
										},
										{
											"begin": 4184,
											"end": 4226,
											"name": "DUP5",
											"source": 11
										},
										{
											"begin": 4184,
											"end": 4226,
											"name": "ADD",
											"source": 11
										},
										{
											"begin": 4184,
											"end": 4226,
											"name": "SWAP1",
											"source": 11
										},
										{
											"begin": 4184,
											"end": 4226,
											"name": "PUSH [tag]",
											"source": 11,
											"value": "254"
										},
										{
											"begin": 4184,
											"end": 4226,
											"name": "JUMP",
											"source": 11,
											"value": "[in]"
										},
										{
											"begin": 10901,
											"end": 11260,
											"name": "tag",
											"source": 12,
											"value": "203"
										},
										{
											"begin": 10901,
											"end": 11260,
											"name": "JUMPDEST",
											"source": 12
										},
										{
											"begin": 11062,
											"end": 11090,
											"name": "PUSH [tag]",
											"source": 12,
											"value": "421"
										},
										{
											"begin": 11072,
											"end": 11076,
											"name": "DUP5",
											"source": 12
										},
										{
											"begin": 11078,
											"end": 11080,
											"name": "DUP5",
											"source": 12
										},
										{
											"begin": 11082,
											"end": 11089,
											"name": "DUP5",
											"source": 12
										},
										{
											"begin": 11062,
											"end": 11071,
											"name": "PUSH [tag]",
											"source": 12,
											"value": "281"
										},
										{
											"begin": 11062,
											"end": 11090,
											"name": "JUMP",
											"source": 12,
											"value": "[in]"
										},
										{
											"begin": 11062,
											"end": 11090,
											"name": "tag",
											"source": 12,
											"value": "421"
										},
										{
											"begin": 11062,
											"end": 11090,
											"name": "JUMPDEST",
											"source": 12
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "A0"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SHL",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SUB",
											"source": -1
										},
										{
											"begin": 11104,
											"end": 11117,
											"name": "DUP4",
											"source": 12
										},
										{
											"begin": 11104,
											"end": 11117,
											"name": "AND",
											"source": 12
										},
										{
											"begin": 1465,
											"end": 1484,
											"name": "EXTCODESIZE",
											"source": 5
										},
										{
											"begin": 1465,
											"end": 1488,
											"name": "ISZERO",
											"source": 5
										},
										{
											"begin": 1465,
											"end": 1488,
											"name": "ISZERO",
											"source": 5
										},
										{
											"begin": 11104,
											"end": 11180,
											"name": "DUP1",
											"source": 12
										},
										{
											"begin": 11104,
											"end": 11180,
											"name": "ISZERO",
											"source": 12
										},
										{
											"begin": 11104,
											"end": 11180,
											"name": "PUSH [tag]",
											"source": 12,
											"value": "424"
										},
										{
											"begin": 11104,
											"end": 11180,
											"name": "JUMPI",
											"source": 12
										},
										{
											"begin": 11104,
											"end": 11180,
											"name": "POP",
											"source": 12
										},
										{
											"begin": 11124,
											"end": 11180,
											"name": "PUSH [tag]",
											"source": 12,
											"value": "425"
										},
										{
											"begin": 11155,
											"end": 11159,
											"name": "DUP5",
											"source": 12
										},
										{
											"begin": 11161,
											"end": 11163,
											"name": "DUP5",
											"source": 12
										},
										{
											"begin": 11165,
											"end": 11172,
											"name": "DUP5",
											"source": 12
										},
										{
											"begin": 11174,
											"end": 11179,
											"name": "DUP5",
											"source": 12
										},
										{
											"begin": 11124,
											"end": 11154,
											"name": "PUSH [tag]",
											"source": 12,
											"value": "426"
										},
										{
											"begin": 11124,
											"end": 11180,
											"name": "JUMP",
											"source": 12,
											"value": "[in]"
										},
										{
											"begin": 11124,
											"end": 11180,
											"name": "tag",
											"source": 12,
											"value": "425"
										},
										{
											"begin": 11124,
											"end": 11180,
											"name": "JUMPDEST",
											"source": 12
										},
										{
											"begin": 11123,
											"end": 11180,
											"name": "ISZERO",
											"source": 12
										},
										{
											"begin": 11104,
											"end": 11180,
											"name": "tag",
											"source": 12,
											"value": "424"
										},
										{
											"begin": 11104,
											"end": 11180,
											"name": "JUMPDEST",
											"source": 12
										},
										{
											"begin": 11100,
											"end": 11254,
											"name": "ISZERO",
											"source": 12
										},
										{
											"begin": 11100,
											"end": 11254,
											"name": "PUSH [tag]",
											"source": 12,
											"value": "427"
										},
										{
											"begin": 11100,
											"end": 11254,
											"name": "JUMPI",
											"source": 12
										},
										{
											"begin": 11203,
											"end": 11243,
											"name": "PUSH",
											"source": 12,
											"value": "40"
										},
										{
											"begin": 11203,
											"end": 11243,
											"name": "MLOAD",
											"source": 12
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "68D2BF6B"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "E1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SHL",
											"source": -1
										},
										{
											"begin": 11203,
											"end": 11243,
											"name": "DUP2",
											"source": 12
										},
										{
											"begin": 11203,
											"end": 11243,
											"name": "MSTORE",
											"source": 12
										},
										{
											"begin": 11203,
											"end": 11243,
											"name": "PUSH",
											"source": 12,
											"value": "4"
										},
										{
											"begin": 11203,
											"end": 11243,
											"name": "ADD",
											"source": 12
										},
										{
											"begin": 11203,
											"end": 11243,
											"name": "PUSH",
											"source": 12,
											"value": "40"
										},
										{
											"begin": 11203,
											"end": 11243,
											"name": "MLOAD",
											"source": 12
										},
										{
											"begin": 11203,
											"end": 11243,
											"name": "DUP1",
											"source": 12
										},
										{
											"begin": 11203,
											"end": 11243,
											"name": "SWAP2",
											"source": 12
										},
										{
											"begin": 11203,
											"end": 11243,
											"name": "SUB",
											"source": 12
										},
										{
											"begin": 11203,
											"end": 11243,
											"name": "SWAP1",
											"source": 12
										},
										{
											"begin": 11203,
											"end": 11243,
											"name": "REVERT",
											"source": 12
										},
										{
											"begin": 11100,
											"end": 11254,
											"name": "tag",
											"source": 12,
											"value": "427"
										},
										{
											"begin": 11100,
											"end": 11254,
											"name": "JUMPDEST",
											"source": 12
										},
										{
											"begin": 10901,
											"end": 11260,
											"name": "POP",
											"source": 12
										},
										{
											"begin": 10901,
											"end": 11260,
											"name": "POP",
											"source": 12
										},
										{
											"begin": 10901,
											"end": 11260,
											"name": "POP",
											"source": 12
										},
										{
											"begin": 10901,
											"end": 11260,
											"name": "POP",
											"source": 12
										},
										{
											"begin": 10901,
											"end": 11260,
											"name": "JUMP",
											"source": 12,
											"value": "[out]"
										},
										{
											"begin": 2680,
											"end": 2859,
											"name": "tag",
											"source": 11,
											"value": "206"
										},
										{
											"begin": 2680,
											"end": 2859,
											"name": "JUMPDEST",
											"source": 11
										},
										{
											"begin": 1108,
											"end": 1114,
											"name": "PUSH",
											"source": 0,
											"value": "8"
										},
										{
											"begin": 1108,
											"end": 1114,
											"name": "SLOAD",
											"source": 0
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "A0"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SHL",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SUB",
											"source": -1
										},
										{
											"begin": 1108,
											"end": 1114,
											"name": "AND",
											"source": 0
										},
										{
											"begin": 719,
											"end": 729,
											"name": "CALLER",
											"source": 6
										},
										{
											"begin": 1248,
											"end": 1271,
											"name": "EQ",
											"source": 0
										},
										{
											"begin": 1240,
											"end": 1308,
											"name": "PUSH [tag]",
											"source": 0,
											"value": "431"
										},
										{
											"begin": 1240,
											"end": 1308,
											"name": "JUMPI",
											"source": 0
										},
										{
											"begin": 1240,
											"end": 1308,
											"name": "PUSH",
											"source": 0,
											"value": "40"
										},
										{
											"begin": 1240,
											"end": 1308,
											"name": "MLOAD",
											"source": 0
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "461BCD"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "E5"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SHL",
											"source": -1
										},
										{
											"begin": 1240,
											"end": 1308,
											"name": "DUP2",
											"source": 0
										},
										{
											"begin": 1240,
											"end": 1308,
											"name": "MSTORE",
											"source": 0
										},
										{
											"begin": 1240,
											"end": 1308,
											"name": "PUSH",
											"source": 0,
											"value": "4"
										},
										{
											"begin": 1240,
											"end": 1308,
											"name": "ADD",
											"source": 0
										},
										{
											"begin": 1240,
											"end": 1308,
											"name": "PUSH [tag]",
											"source": 0,
											"value": "250"
										},
										{
											"begin": 1240,
											"end": 1308,
											"name": "SWAP1",
											"source": 0
										},
										{
											"begin": 1240,
											"end": 1308,
											"name": "PUSH [tag]",
											"source": 0,
											"value": "251"
										},
										{
											"begin": 1240,
											"end": 1308,
											"name": "JUMP",
											"source": 0,
											"value": "[in]"
										},
										{
											"begin": 1240,
											"end": 1308,
											"name": "tag",
											"source": 0,
											"value": "431"
										},
										{
											"begin": 1240,
											"end": 1308,
											"name": "JUMPDEST",
											"source": 0
										},
										{
											"begin": 2737,
											"end": 2747,
											"name": "PUSH",
											"source": 11,
											"value": "B"
										},
										{
											"begin": 2737,
											"end": 2747,
											"name": "SLOAD",
											"source": 11
										},
										{
											"begin": 2737,
											"end": 2747,
											"name": "PUSH",
											"source": 11,
											"value": "100000000"
										},
										{
											"begin": 2737,
											"end": 2747,
											"name": "SWAP1",
											"source": 11
										},
										{
											"begin": 2737,
											"end": 2747,
											"name": "DIV",
											"source": 11
										},
										{
											"begin": 2737,
											"end": 2747,
											"name": "PUSH",
											"source": 11,
											"value": "FF"
										},
										{
											"begin": 2737,
											"end": 2747,
											"name": "AND",
											"source": 11
										},
										{
											"begin": 2736,
											"end": 2747,
											"name": "ISZERO",
											"source": 11
										},
										{
											"begin": 2728,
											"end": 2789,
											"name": "PUSH [tag]",
											"source": 11,
											"value": "434"
										},
										{
											"begin": 2728,
											"end": 2789,
											"name": "JUMPI",
											"source": 11
										},
										{
											"begin": 2728,
											"end": 2789,
											"name": "PUSH",
											"source": 11,
											"value": "40"
										},
										{
											"begin": 2728,
											"end": 2789,
											"name": "MLOAD",
											"source": 11
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "461BCD"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "E5"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SHL",
											"source": -1
										},
										{
											"begin": 2728,
											"end": 2789,
											"name": "DUP2",
											"source": 11
										},
										{
											"begin": 2728,
											"end": 2789,
											"name": "MSTORE",
											"source": 11
										},
										{
											"begin": 13567,
											"end": 13569,
											"name": "PUSH",
											"source": 13,
											"value": "20"
										},
										{
											"begin": 2728,
											"end": 2789,
											"name": "PUSH",
											"source": 11,
											"value": "4"
										},
										{
											"begin": 2728,
											"end": 2789,
											"name": "DUP3",
											"source": 11
										},
										{
											"begin": 2728,
											"end": 2789,
											"name": "ADD",
											"source": 11
										},
										{
											"begin": 13549,
											"end": 13570,
											"name": "MSTORE",
											"source": 13
										},
										{
											"begin": 13606,
											"end": 13608,
											"name": "PUSH",
											"source": 13,
											"value": "25"
										},
										{
											"begin": 13586,
											"end": 13604,
											"name": "PUSH",
											"source": 13,
											"value": "24"
										},
										{
											"begin": 13586,
											"end": 13604,
											"name": "DUP3",
											"source": 13
										},
										{
											"begin": 13586,
											"end": 13604,
											"name": "ADD",
											"source": 13
										},
										{
											"begin": 13579,
											"end": 13609,
											"name": "MSTORE",
											"source": 13
										},
										{
											"begin": 13645,
											"end": 13679,
											"name": "PUSH",
											"source": 13,
											"value": "43727970746F42756C6C446F6773203A3A205465616D20616C7265616479206D"
										},
										{
											"begin": 13625,
											"end": 13643,
											"name": "PUSH",
											"source": 13,
											"value": "44"
										},
										{
											"begin": 13625,
											"end": 13643,
											"name": "DUP3",
											"source": 13
										},
										{
											"begin": 13625,
											"end": 13643,
											"name": "ADD",
											"source": 13
										},
										{
											"begin": 13618,
											"end": 13680,
											"name": "MSTORE",
											"source": 13
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1A5B9D1959"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "DA"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SHL",
											"source": -1
										},
										{
											"begin": 13696,
											"end": 13714,
											"name": "PUSH",
											"source": 13,
											"value": "64"
										},
										{
											"begin": 13696,
											"end": 13714,
											"name": "DUP3",
											"source": 13
										},
										{
											"begin": 13696,
											"end": 13714,
											"name": "ADD",
											"source": 13
										},
										{
											"begin": 13689,
											"end": 13724,
											"name": "MSTORE",
											"source": 13
										},
										{
											"begin": 13741,
											"end": 13760,
											"name": "PUSH",
											"source": 13,
											"value": "84"
										},
										{
											"begin": 13741,
											"end": 13760,
											"name": "ADD",
											"source": 13
										},
										{
											"begin": 2728,
											"end": 2789,
											"name": "PUSH [tag]",
											"source": 11,
											"value": "250"
										},
										{
											"begin": 13365,
											"end": 13766,
											"name": "JUMP",
											"source": 13
										},
										{
											"begin": 2728,
											"end": 2789,
											"name": "tag",
											"source": 11,
											"value": "434"
										},
										{
											"begin": 2728,
											"end": 2789,
											"name": "JUMPDEST",
											"source": 11
										},
										{
											"begin": 2799,
											"end": 2809,
											"name": "PUSH",
											"source": 11,
											"value": "B"
										},
										{
											"begin": 2799,
											"end": 2816,
											"name": "DUP1",
											"source": 11
										},
										{
											"begin": 2799,
											"end": 2816,
											"name": "SLOAD",
											"source": 11
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "FF00000000"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "NOT",
											"source": -1
										},
										{
											"begin": 2799,
											"end": 2816,
											"name": "AND",
											"source": 11
										},
										{
											"begin": 2799,
											"end": 2816,
											"name": "PUSH",
											"source": 11,
											"value": "100000000"
										},
										{
											"begin": 2799,
											"end": 2816,
											"name": "OR",
											"source": 11
										},
										{
											"begin": 2799,
											"end": 2816,
											"name": "SWAP1",
											"source": 11
										},
										{
											"begin": 2799,
											"end": 2816,
											"name": "SSTORE",
											"source": 11
										},
										{
											"begin": 2826,
											"end": 2852,
											"name": "PUSH [tag]",
											"source": 11,
											"value": "353"
										},
										{
											"begin": 2836,
											"end": 2846,
											"name": "CALLER",
											"source": 11
										},
										{
											"begin": 2848,
											"end": 2851,
											"name": "PUSH",
											"source": 11,
											"value": "26C"
										},
										{
											"begin": 2826,
											"end": 2835,
											"name": "PUSH [tag]",
											"source": 11,
											"value": "314"
										},
										{
											"begin": 2826,
											"end": 2852,
											"name": "JUMP",
											"source": 11,
											"value": "[in]"
										},
										{
											"begin": 4444,
											"end": 4516,
											"name": "tag",
											"source": 11,
											"value": "217"
										},
										{
											"begin": 4444,
											"end": 4516,
											"name": "JUMPDEST",
											"source": 11
										},
										{
											"begin": 1108,
											"end": 1114,
											"name": "PUSH",
											"source": 0,
											"value": "8"
										},
										{
											"begin": 1108,
											"end": 1114,
											"name": "SLOAD",
											"source": 0
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "A0"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SHL",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SUB",
											"source": -1
										},
										{
											"begin": 1108,
											"end": 1114,
											"name": "AND",
											"source": 0
										},
										{
											"begin": 719,
											"end": 729,
											"name": "CALLER",
											"source": 6
										},
										{
											"begin": 1248,
											"end": 1271,
											"name": "EQ",
											"source": 0
										},
										{
											"begin": 1240,
											"end": 1308,
											"name": "PUSH [tag]",
											"source": 0,
											"value": "441"
										},
										{
											"begin": 1240,
											"end": 1308,
											"name": "JUMPI",
											"source": 0
										},
										{
											"begin": 1240,
											"end": 1308,
											"name": "PUSH",
											"source": 0,
											"value": "40"
										},
										{
											"begin": 1240,
											"end": 1308,
											"name": "MLOAD",
											"source": 0
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "461BCD"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "E5"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SHL",
											"source": -1
										},
										{
											"begin": 1240,
											"end": 1308,
											"name": "DUP2",
											"source": 0
										},
										{
											"begin": 1240,
											"end": 1308,
											"name": "MSTORE",
											"source": 0
										},
										{
											"begin": 1240,
											"end": 1308,
											"name": "PUSH",
											"source": 0,
											"value": "4"
										},
										{
											"begin": 1240,
											"end": 1308,
											"name": "ADD",
											"source": 0
										},
										{
											"begin": 1240,
											"end": 1308,
											"name": "PUSH [tag]",
											"source": 0,
											"value": "250"
										},
										{
											"begin": 1240,
											"end": 1308,
											"name": "SWAP1",
											"source": 0
										},
										{
											"begin": 1240,
											"end": 1308,
											"name": "PUSH [tag]",
											"source": 0,
											"value": "251"
										},
										{
											"begin": 1240,
											"end": 1308,
											"name": "JUMP",
											"source": 0,
											"value": "[in]"
										},
										{
											"begin": 1240,
											"end": 1308,
											"name": "tag",
											"source": 0,
											"value": "441"
										},
										{
											"begin": 1240,
											"end": 1308,
											"name": "JUMPDEST",
											"source": 0
										},
										{
											"begin": 4504,
											"end": 4509,
											"name": "PUSH",
											"source": 11,
											"value": "B"
										},
										{
											"begin": 4504,
											"end": 4509,
											"name": "DUP1",
											"source": 11
										},
										{
											"begin": 4504,
											"end": 4509,
											"name": "SLOAD",
											"source": 11
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "FF000000"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "NOT",
											"source": -1
										},
										{
											"begin": 4495,
											"end": 4509,
											"name": "DUP2",
											"source": 11
										},
										{
											"begin": 4495,
											"end": 4509,
											"name": "AND",
											"source": 11
										},
										{
											"begin": 4504,
											"end": 4509,
											"name": "PUSH",
											"source": 11,
											"value": "1000000"
										},
										{
											"begin": 4504,
											"end": 4509,
											"name": "SWAP2",
											"source": 11
										},
										{
											"begin": 4504,
											"end": 4509,
											"name": "DUP3",
											"source": 11
										},
										{
											"begin": 4504,
											"end": 4509,
											"name": "SWAP1",
											"source": 11
										},
										{
											"begin": 4504,
											"end": 4509,
											"name": "DIV",
											"source": 11
										},
										{
											"begin": 4504,
											"end": 4509,
											"name": "PUSH",
											"source": 11,
											"value": "FF"
										},
										{
											"begin": 4504,
											"end": 4509,
											"name": "AND",
											"source": 11
										},
										{
											"begin": 4503,
											"end": 4509,
											"name": "ISZERO",
											"source": 11
										},
										{
											"begin": 4495,
											"end": 4509,
											"name": "SWAP1",
											"source": 11
										},
										{
											"begin": 4495,
											"end": 4509,
											"name": "SWAP2",
											"source": 11
										},
										{
											"begin": 4495,
											"end": 4509,
											"name": "MUL",
											"source": 11
										},
										{
											"begin": 4495,
											"end": 4509,
											"name": "OR",
											"source": 11
										},
										{
											"begin": 4495,
											"end": 4509,
											"name": "SWAP1",
											"source": 11
										},
										{
											"begin": 4495,
											"end": 4509,
											"name": "SSTORE",
											"source": 11
										},
										{
											"begin": 4444,
											"end": 4516,
											"name": "JUMP",
											"source": 11,
											"value": "[out]"
										},
										{
											"begin": 3017,
											"end": 3480,
											"name": "tag",
											"source": 11,
											"value": "221"
										},
										{
											"begin": 3017,
											"end": 3480,
											"name": "JUMPDEST",
											"source": 11
										},
										{
											"begin": 3090,
											"end": 3103,
											"name": "PUSH",
											"source": 11,
											"value": "60"
										},
										{
											"begin": 3123,
											"end": 3139,
											"name": "PUSH [tag]",
											"source": 11,
											"value": "445"
										},
										{
											"begin": 3131,
											"end": 3138,
											"name": "DUP3",
											"source": 11
										},
										{
											"begin": 3123,
											"end": 3130,
											"name": "PUSH [tag]",
											"source": 11,
											"value": "264"
										},
										{
											"begin": 3123,
											"end": 3139,
											"name": "JUMP",
											"source": 11,
											"value": "[in]"
										},
										{
											"begin": 3123,
											"end": 3139,
											"name": "tag",
											"source": 11,
											"value": "445"
										},
										{
											"begin": 3123,
											"end": 3139,
											"name": "JUMPDEST",
											"source": 11
										},
										{
											"begin": 3115,
											"end": 3191,
											"name": "PUSH [tag]",
											"source": 11,
											"value": "446"
										},
										{
											"begin": 3115,
											"end": 3191,
											"name": "JUMPI",
											"source": 11
										},
										{
											"begin": 3115,
											"end": 3191,
											"name": "PUSH",
											"source": 11,
											"value": "40"
										},
										{
											"begin": 3115,
											"end": 3191,
											"name": "MLOAD",
											"source": 11
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "461BCD"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "E5"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SHL",
											"source": -1
										},
										{
											"begin": 3115,
											"end": 3191,
											"name": "DUP2",
											"source": 11
										},
										{
											"begin": 3115,
											"end": 3191,
											"name": "MSTORE",
											"source": 11
										},
										{
											"begin": 13973,
											"end": 13975,
											"name": "PUSH",
											"source": 13,
											"value": "20"
										},
										{
											"begin": 3115,
											"end": 3191,
											"name": "PUSH",
											"source": 11,
											"value": "4"
										},
										{
											"begin": 3115,
											"end": 3191,
											"name": "DUP3",
											"source": 11
										},
										{
											"begin": 3115,
											"end": 3191,
											"name": "ADD",
											"source": 11
										},
										{
											"begin": 13955,
											"end": 13976,
											"name": "MSTORE",
											"source": 13
										},
										{
											"begin": 14012,
											"end": 14014,
											"name": "PUSH",
											"source": 13,
											"value": "2F"
										},
										{
											"begin": 13992,
											"end": 14010,
											"name": "PUSH",
											"source": 13,
											"value": "24"
										},
										{
											"begin": 13992,
											"end": 14010,
											"name": "DUP3",
											"source": 13
										},
										{
											"begin": 13992,
											"end": 14010,
											"name": "ADD",
											"source": 13
										},
										{
											"begin": 13985,
											"end": 14015,
											"name": "MSTORE",
											"source": 13
										},
										{
											"begin": 14051,
											"end": 14085,
											"name": "PUSH",
											"source": 13,
											"value": "4552433732314D657461646174613A2055524920717565727920666F72206E6F"
										},
										{
											"begin": 14031,
											"end": 14049,
											"name": "PUSH",
											"source": 13,
											"value": "44"
										},
										{
											"begin": 14031,
											"end": 14049,
											"name": "DUP3",
											"source": 13
										},
										{
											"begin": 14031,
											"end": 14049,
											"name": "ADD",
											"source": 13
										},
										{
											"begin": 14024,
											"end": 14086,
											"name": "MSTORE",
											"source": 13
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "3732BC34B9BA32B73A103A37B5B2B7"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "89"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SHL",
											"source": -1
										},
										{
											"begin": 14102,
											"end": 14120,
											"name": "PUSH",
											"source": 13,
											"value": "64"
										},
										{
											"begin": 14102,
											"end": 14120,
											"name": "DUP3",
											"source": 13
										},
										{
											"begin": 14102,
											"end": 14120,
											"name": "ADD",
											"source": 13
										},
										{
											"begin": 14095,
											"end": 14140,
											"name": "MSTORE",
											"source": 13
										},
										{
											"begin": 14157,
											"end": 14176,
											"name": "PUSH",
											"source": 13,
											"value": "84"
										},
										{
											"begin": 14157,
											"end": 14176,
											"name": "ADD",
											"source": 13
										},
										{
											"begin": 3115,
											"end": 3191,
											"name": "PUSH [tag]",
											"source": 11,
											"value": "250"
										},
										{
											"begin": 13771,
											"end": 14182,
											"name": "JUMP",
											"source": 13
										},
										{
											"begin": 3115,
											"end": 3191,
											"name": "tag",
											"source": 11,
											"value": "446"
										},
										{
											"begin": 3115,
											"end": 3191,
											"name": "JUMPDEST",
											"source": 11
										},
										{
											"begin": 3202,
											"end": 3216,
											"name": "PUSH",
											"source": 11,
											"value": "0"
										},
										{
											"begin": 3219,
											"end": 3230,
											"name": "PUSH [tag]",
											"source": 11,
											"value": "449"
										},
										{
											"begin": 3219,
											"end": 3226,
											"name": "DUP4",
											"source": 11
										},
										{
											"begin": 3229,
											"end": 3230,
											"name": "PUSH",
											"source": 11,
											"value": "1"
										},
										{
											"begin": 3219,
											"end": 3230,
											"name": "PUSH [tag]",
											"source": 11,
											"value": "292"
										},
										{
											"begin": 3219,
											"end": 3230,
											"name": "JUMP",
											"source": 11,
											"value": "[in]"
										},
										{
											"begin": 3219,
											"end": 3230,
											"name": "tag",
											"source": 11,
											"value": "449"
										},
										{
											"begin": 3219,
											"end": 3230,
											"name": "JUMPDEST",
											"source": 11
										},
										{
											"begin": 3245,
											"end": 3255,
											"name": "PUSH",
											"source": 11,
											"value": "B"
										},
										{
											"begin": 3245,
											"end": 3255,
											"name": "SLOAD",
											"source": 11
										},
										{
											"begin": 3202,
											"end": 3230,
											"name": "SWAP1",
											"source": 11
										},
										{
											"begin": 3202,
											"end": 3230,
											"name": "SWAP2",
											"source": 11
										},
										{
											"begin": -1,
											"end": -1,
											"name": "POP",
											"source": -1
										},
										{
											"begin": 3245,
											"end": 3255,
											"name": "PUSH",
											"source": 11,
											"value": "FF"
										},
										{
											"begin": 3245,
											"end": 3255,
											"name": "AND",
											"source": 11
										},
										{
											"begin": 3241,
											"end": 3307,
											"name": "PUSH [tag]",
											"source": 11,
											"value": "450"
										},
										{
											"begin": 3241,
											"end": 3307,
											"name": "JUMPI",
											"source": 11
										},
										{
											"begin": 3277,
											"end": 3296,
											"name": "PUSH",
											"source": 11,
											"value": "A"
										},
										{
											"begin": 3270,
											"end": 3296,
											"name": "DUP1",
											"source": 11
										},
										{
											"begin": 3270,
											"end": 3296,
											"name": "SLOAD",
											"source": 11
										},
										{
											"begin": 3270,
											"end": 3296,
											"name": "PUSH [tag]",
											"source": 11,
											"value": "451"
										},
										{
											"begin": 3270,
											"end": 3296,
											"name": "SWAP1",
											"source": 11
										},
										{
											"begin": 3270,
											"end": 3296,
											"name": "PUSH [tag]",
											"source": 11,
											"value": "257"
										},
										{
											"begin": 3270,
											"end": 3296,
											"name": "JUMP",
											"source": 11,
											"value": "[in]"
										},
										{
											"begin": 3270,
											"end": 3296,
											"name": "tag",
											"source": 11,
											"value": "451"
										},
										{
											"begin": 3270,
											"end": 3296,
											"name": "JUMPDEST",
											"source": 11
										},
										{
											"begin": 3270,
											"end": 3296,
											"name": "DUP1",
											"source": 11
										},
										{
											"begin": 3270,
											"end": 3296,
											"name": "PUSH",
											"source": 11,
											"value": "1F"
										},
										{
											"begin": 3270,
											"end": 3296,
											"name": "ADD",
											"source": 11
										},
										{
											"begin": 3270,
											"end": 3296,
											"name": "PUSH",
											"source": 11,
											"value": "20"
										},
										{
											"begin": 3270,
											"end": 3296,
											"name": "DUP1",
											"source": 11
										},
										{
											"begin": 3270,
											"end": 3296,
											"name": "SWAP2",
											"source": 11
										},
										{
											"begin": 3270,
											"end": 3296,
											"name": "DIV",
											"source": 11
										},
										{
											"begin": 3270,
											"end": 3296,
											"name": "MUL",
											"source": 11
										},
										{
											"begin": 3270,
											"end": 3296,
											"name": "PUSH",
											"source": 11,
											"value": "20"
										},
										{
											"begin": 3270,
											"end": 3296,
											"name": "ADD",
											"source": 11
										},
										{
											"begin": 3270,
											"end": 3296,
											"name": "PUSH",
											"source": 11,
											"value": "40"
										},
										{
											"begin": 3270,
											"end": 3296,
											"name": "MLOAD",
											"source": 11
										},
										{
											"begin": 3270,
											"end": 3296,
											"name": "SWAP1",
											"source": 11
										},
										{
											"begin": 3270,
											"end": 3296,
											"name": "DUP2",
											"source": 11
										},
										{
											"begin": 3270,
											"end": 3296,
											"name": "ADD",
											"source": 11
										},
										{
											"begin": 3270,
											"end": 3296,
											"name": "PUSH",
											"source": 11,
											"value": "40"
										},
										{
											"begin": 3270,
											"end": 3296,
											"name": "MSTORE",
											"source": 11
										},
										{
											"begin": 3270,
											"end": 3296,
											"name": "DUP1",
											"source": 11
										},
										{
											"begin": 3270,
											"end": 3296,
											"name": "SWAP3",
											"source": 11
										},
										{
											"begin": 3270,
											"end": 3296,
											"name": "SWAP2",
											"source": 11
										},
										{
											"begin": 3270,
											"end": 3296,
											"name": "SWAP1",
											"source": 11
										},
										{
											"begin": 3270,
											"end": 3296,
											"name": "DUP2",
											"source": 11
										},
										{
											"begin": 3270,
											"end": 3296,
											"name": "DUP2",
											"source": 11
										},
										{
											"begin": 3270,
											"end": 3296,
											"name": "MSTORE",
											"source": 11
										},
										{
											"begin": 3270,
											"end": 3296,
											"name": "PUSH",
											"source": 11,
											"value": "20"
										},
										{
											"begin": 3270,
											"end": 3296,
											"name": "ADD",
											"source": 11
										},
										{
											"begin": 3270,
											"end": 3296,
											"name": "DUP3",
											"source": 11
										},
										{
											"begin": 3270,
											"end": 3296,
											"name": "DUP1",
											"source": 11
										},
										{
											"begin": 3270,
											"end": 3296,
											"name": "SLOAD",
											"source": 11
										},
										{
											"begin": 3270,
											"end": 3296,
											"name": "PUSH [tag]",
											"source": 11,
											"value": "452"
										},
										{
											"begin": 3270,
											"end": 3296,
											"name": "SWAP1",
											"source": 11
										},
										{
											"begin": 3270,
											"end": 3296,
											"name": "PUSH [tag]",
											"source": 11,
											"value": "257"
										},
										{
											"begin": 3270,
											"end": 3296,
											"name": "JUMP",
											"source": 11,
											"value": "[in]"
										},
										{
											"begin": 3270,
											"end": 3296,
											"name": "tag",
											"source": 11,
											"value": "452"
										},
										{
											"begin": 3270,
											"end": 3296,
											"name": "JUMPDEST",
											"source": 11
										},
										{
											"begin": 3270,
											"end": 3296,
											"name": "DUP1",
											"source": 11
										},
										{
											"begin": 3270,
											"end": 3296,
											"name": "ISZERO",
											"source": 11
										},
										{
											"begin": 3270,
											"end": 3296,
											"name": "PUSH [tag]",
											"source": 11,
											"value": "453"
										},
										{
											"begin": 3270,
											"end": 3296,
											"name": "JUMPI",
											"source": 11
										},
										{
											"begin": 3270,
											"end": 3296,
											"name": "DUP1",
											"source": 11
										},
										{
											"begin": 3270,
											"end": 3296,
											"name": "PUSH",
											"source": 11,
											"value": "1F"
										},
										{
											"begin": 3270,
											"end": 3296,
											"name": "LT",
											"source": 11
										},
										{
											"begin": 3270,
											"end": 3296,
											"name": "PUSH [tag]",
											"source": 11,
											"value": "454"
										},
										{
											"begin": 3270,
											"end": 3296,
											"name": "JUMPI",
											"source": 11
										},
										{
											"begin": 3270,
											"end": 3296,
											"name": "PUSH",
											"source": 11,
											"value": "100"
										},
										{
											"begin": 3270,
											"end": 3296,
											"name": "DUP1",
											"source": 11
										},
										{
											"begin": 3270,
											"end": 3296,
											"name": "DUP4",
											"source": 11
										},
										{
											"begin": 3270,
											"end": 3296,
											"name": "SLOAD",
											"source": 11
										},
										{
											"begin": 3270,
											"end": 3296,
											"name": "DIV",
											"source": 11
										},
										{
											"begin": 3270,
											"end": 3296,
											"name": "MUL",
											"source": 11
										},
										{
											"begin": 3270,
											"end": 3296,
											"name": "DUP4",
											"source": 11
										},
										{
											"begin": 3270,
											"end": 3296,
											"name": "MSTORE",
											"source": 11
										},
										{
											"begin": 3270,
											"end": 3296,
											"name": "SWAP2",
											"source": 11
										},
										{
											"begin": 3270,
											"end": 3296,
											"name": "PUSH",
											"source": 11,
											"value": "20"
										},
										{
											"begin": 3270,
											"end": 3296,
											"name": "ADD",
											"source": 11
										},
										{
											"begin": 3270,
											"end": 3296,
											"name": "SWAP2",
											"source": 11
										},
										{
											"begin": 3270,
											"end": 3296,
											"name": "PUSH [tag]",
											"source": 11,
											"value": "453"
										},
										{
											"begin": 3270,
											"end": 3296,
											"name": "JUMP",
											"source": 11
										},
										{
											"begin": 3270,
											"end": 3296,
											"name": "tag",
											"source": 11,
											"value": "454"
										},
										{
											"begin": 3270,
											"end": 3296,
											"name": "JUMPDEST",
											"source": 11
										},
										{
											"begin": 3270,
											"end": 3296,
											"name": "DUP3",
											"source": 11
										},
										{
											"begin": 3270,
											"end": 3296,
											"name": "ADD",
											"source": 11
										},
										{
											"begin": 3270,
											"end": 3296,
											"name": "SWAP2",
											"source": 11
										},
										{
											"begin": 3270,
											"end": 3296,
											"name": "SWAP1",
											"source": 11
										},
										{
											"begin": 3270,
											"end": 3296,
											"name": "PUSH",
											"source": 11,
											"value": "0"
										},
										{
											"begin": 3270,
											"end": 3296,
											"name": "MSTORE",
											"source": 11
										},
										{
											"begin": 3270,
											"end": 3296,
											"name": "PUSH",
											"source": 11,
											"value": "20"
										},
										{
											"begin": 3270,
											"end": 3296,
											"name": "PUSH",
											"source": 11,
											"value": "0"
										},
										{
											"begin": 3270,
											"end": 3296,
											"name": "KECCAK256",
											"source": 11
										},
										{
											"begin": 3270,
											"end": 3296,
											"name": "SWAP1",
											"source": 11
										},
										{
											"begin": 3270,
											"end": 3296,
											"name": "tag",
											"source": 11,
											"value": "455"
										},
										{
											"begin": 3270,
											"end": 3296,
											"name": "JUMPDEST",
											"source": 11
										},
										{
											"begin": 3270,
											"end": 3296,
											"name": "DUP2",
											"source": 11
										},
										{
											"begin": 3270,
											"end": 3296,
											"name": "SLOAD",
											"source": 11
										},
										{
											"begin": 3270,
											"end": 3296,
											"name": "DUP2",
											"source": 11
										},
										{
											"begin": 3270,
											"end": 3296,
											"name": "MSTORE",
											"source": 11
										},
										{
											"begin": 3270,
											"end": 3296,
											"name": "SWAP1",
											"source": 11
										},
										{
											"begin": 3270,
											"end": 3296,
											"name": "PUSH",
											"source": 11,
											"value": "1"
										},
										{
											"begin": 3270,
											"end": 3296,
											"name": "ADD",
											"source": 11
										},
										{
											"begin": 3270,
											"end": 3296,
											"name": "SWAP1",
											"source": 11
										},
										{
											"begin": 3270,
											"end": 3296,
											"name": "PUSH",
											"source": 11,
											"value": "20"
										},
										{
											"begin": 3270,
											"end": 3296,
											"name": "ADD",
											"source": 11
										},
										{
											"begin": 3270,
											"end": 3296,
											"name": "DUP1",
											"source": 11
										},
										{
											"begin": 3270,
											"end": 3296,
											"name": "DUP4",
											"source": 11
										},
										{
											"begin": 3270,
											"end": 3296,
											"name": "GT",
											"source": 11
										},
										{
											"begin": 3270,
											"end": 3296,
											"name": "PUSH [tag]",
											"source": 11,
											"value": "455"
										},
										{
											"begin": 3270,
											"end": 3296,
											"name": "JUMPI",
											"source": 11
										},
										{
											"begin": 3270,
											"end": 3296,
											"name": "DUP3",
											"source": 11
										},
										{
											"begin": 3270,
											"end": 3296,
											"name": "SWAP1",
											"source": 11
										},
										{
											"begin": 3270,
											"end": 3296,
											"name": "SUB",
											"source": 11
										},
										{
											"begin": 3270,
											"end": 3296,
											"name": "PUSH",
											"source": 11,
											"value": "1F"
										},
										{
											"begin": 3270,
											"end": 3296,
											"name": "AND",
											"source": 11
										},
										{
											"begin": 3270,
											"end": 3296,
											"name": "DUP3",
											"source": 11
										},
										{
											"begin": 3270,
											"end": 3296,
											"name": "ADD",
											"source": 11
										},
										{
											"begin": 3270,
											"end": 3296,
											"name": "SWAP2",
											"source": 11
										},
										{
											"begin": 3270,
											"end": 3296,
											"name": "tag",
											"source": 11,
											"value": "453"
										},
										{
											"begin": 3270,
											"end": 3296,
											"name": "JUMPDEST",
											"source": 11
										},
										{
											"begin": 3270,
											"end": 3296,
											"name": "POP",
											"source": 11
										},
										{
											"begin": 3270,
											"end": 3296,
											"name": "POP",
											"source": 11
										},
										{
											"begin": 3270,
											"end": 3296,
											"name": "POP",
											"source": 11
										},
										{
											"begin": 3270,
											"end": 3296,
											"name": "POP",
											"source": 11
										},
										{
											"begin": 3270,
											"end": 3296,
											"name": "POP",
											"source": 11
										},
										{
											"begin": 3270,
											"end": 3296,
											"name": "SWAP2",
											"source": 11
										},
										{
											"begin": 3270,
											"end": 3296,
											"name": "POP",
											"source": 11
										},
										{
											"begin": 3270,
											"end": 3296,
											"name": "POP",
											"source": 11
										},
										{
											"begin": 3017,
											"end": 3480,
											"name": "SWAP2",
											"source": 11
										},
										{
											"begin": 3017,
											"end": 3480,
											"name": "SWAP1",
											"source": 11
										},
										{
											"begin": 3017,
											"end": 3480,
											"name": "POP",
											"source": 11
										},
										{
											"begin": 3017,
											"end": 3480,
											"name": "JUMP",
											"source": 11,
											"value": "[out]"
										},
										{
											"begin": 3241,
											"end": 3307,
											"name": "tag",
											"source": 11,
											"value": "450"
										},
										{
											"begin": 3241,
											"end": 3307,
											"name": "JUMPDEST",
											"source": 11
										},
										{
											"begin": 3398,
											"end": 3399,
											"name": "PUSH",
											"source": 11,
											"value": "0"
										},
										{
											"begin": 3375,
											"end": 3387,
											"name": "PUSH",
											"source": 11,
											"value": "9"
										},
										{
											"begin": 3369,
											"end": 3395,
											"name": "DUP1",
											"source": 11
										},
										{
											"begin": 3369,
											"end": 3395,
											"name": "SLOAD",
											"source": 11
										},
										{
											"begin": 3369,
											"end": 3395,
											"name": "PUSH [tag]",
											"source": 11,
											"value": "456"
										},
										{
											"begin": 3369,
											"end": 3395,
											"name": "SWAP1",
											"source": 11
										},
										{
											"begin": 3369,
											"end": 3395,
											"name": "PUSH [tag]",
											"source": 11,
											"value": "257"
										},
										{
											"begin": 3369,
											"end": 3395,
											"name": "JUMP",
											"source": 11,
											"value": "[in]"
										},
										{
											"begin": 3369,
											"end": 3395,
											"name": "tag",
											"source": 11,
											"value": "456"
										},
										{
											"begin": 3369,
											"end": 3395,
											"name": "JUMPDEST",
											"source": 11
										},
										{
											"begin": 3369,
											"end": 3395,
											"name": "SWAP1",
											"source": 11
										},
										{
											"begin": 3369,
											"end": 3395,
											"name": "POP",
											"source": 11
										},
										{
											"begin": 3369,
											"end": 3399,
											"name": "GT",
											"source": 11
										},
										{
											"begin": 3369,
											"end": 3473,
											"name": "PUSH [tag]",
											"source": 11,
											"value": "457"
										},
										{
											"begin": 3369,
											"end": 3473,
											"name": "JUMPI",
											"source": 11
										},
										{
											"begin": 3369,
											"end": 3473,
											"name": "PUSH",
											"source": 11,
											"value": "40"
										},
										{
											"begin": 3369,
											"end": 3473,
											"name": "MLOAD",
											"source": 11
										},
										{
											"begin": 3369,
											"end": 3473,
											"name": "DUP1",
											"source": 11
										},
										{
											"begin": 3369,
											"end": 3473,
											"name": "PUSH",
											"source": 11,
											"value": "20"
										},
										{
											"begin": 3369,
											"end": 3473,
											"name": "ADD",
											"source": 11
										},
										{
											"begin": 3369,
											"end": 3473,
											"name": "PUSH",
											"source": 11,
											"value": "40"
										},
										{
											"begin": 3369,
											"end": 3473,
											"name": "MSTORE",
											"source": 11
										},
										{
											"begin": 3369,
											"end": 3473,
											"name": "DUP1",
											"source": 11
										},
										{
											"begin": 3369,
											"end": 3473,
											"name": "PUSH",
											"source": 11,
											"value": "0"
										},
										{
											"begin": 3369,
											"end": 3473,
											"name": "DUP2",
											"source": 11
										},
										{
											"begin": 3369,
											"end": 3473,
											"name": "MSTORE",
											"source": 11
										},
										{
											"begin": 3369,
											"end": 3473,
											"name": "POP",
											"source": 11
										},
										{
											"begin": 3369,
											"end": 3473,
											"name": "PUSH [tag]",
											"source": 11,
											"value": "458"
										},
										{
											"begin": 3369,
											"end": 3473,
											"name": "JUMP",
											"source": 11
										},
										{
											"begin": 3369,
											"end": 3473,
											"name": "tag",
											"source": 11,
											"value": "457"
										},
										{
											"begin": 3369,
											"end": 3473,
											"name": "JUMPDEST",
											"source": 11
										},
										{
											"begin": 3426,
											"end": 3438,
											"name": "PUSH",
											"source": 11,
											"value": "9"
										},
										{
											"begin": 3440,
											"end": 3457,
											"name": "PUSH [tag]",
											"source": 11,
											"value": "459"
										},
										{
											"begin": 3440,
											"end": 3446,
											"name": "DUP3",
											"source": 11
										},
										{
											"begin": 3440,
											"end": 3455,
											"name": "PUSH [tag]",
											"source": 11,
											"value": "460"
										},
										{
											"begin": 3440,
											"end": 3457,
											"name": "JUMP",
											"source": 11,
											"value": "[in]"
										},
										{
											"begin": 3440,
											"end": 3457,
											"name": "tag",
											"source": 11,
											"value": "459"
										},
										{
											"begin": 3440,
											"end": 3457,
											"name": "JUMPDEST",
											"source": 11
										},
										{
											"begin": 3409,
											"end": 3467,
											"name": "PUSH",
											"source": 11,
											"value": "40"
										},
										{
											"begin": 3409,
											"end": 3467,
											"name": "MLOAD",
											"source": 11
										},
										{
											"begin": 3409,
											"end": 3467,
											"name": "PUSH",
											"source": 11,
											"value": "20"
										},
										{
											"begin": 3409,
											"end": 3467,
											"name": "ADD",
											"source": 11
										},
										{
											"begin": 3409,
											"end": 3467,
											"name": "PUSH [tag]",
											"source": 11,
											"value": "461"
										},
										{
											"begin": 3409,
											"end": 3467,
											"name": "SWAP3",
											"source": 11
										},
										{
											"begin": 3409,
											"end": 3467,
											"name": "SWAP2",
											"source": 11
										},
										{
											"begin": 3409,
											"end": 3467,
											"name": "SWAP1",
											"source": 11
										},
										{
											"begin": 3409,
											"end": 3467,
											"name": "PUSH [tag]",
											"source": 11,
											"value": "462"
										},
										{
											"begin": 3409,
											"end": 3467,
											"name": "JUMP",
											"source": 11,
											"value": "[in]"
										},
										{
											"begin": 3409,
											"end": 3467,
											"name": "tag",
											"source": 11,
											"value": "461"
										},
										{
											"begin": 3409,
											"end": 3467,
											"name": "JUMPDEST",
											"source": 11
										},
										{
											"begin": 3409,
											"end": 3467,
											"name": "PUSH",
											"source": 11,
											"value": "40"
										},
										{
											"begin": 3409,
											"end": 3467,
											"name": "MLOAD",
											"source": 11
										},
										{
											"begin": 3409,
											"end": 3467,
											"name": "PUSH",
											"source": 11,
											"value": "20"
										},
										{
											"begin": 3409,
											"end": 3467,
											"name": "DUP2",
											"source": 11
										},
										{
											"begin": 3409,
											"end": 3467,
											"name": "DUP4",
											"source": 11
										},
										{
											"begin": 3409,
											"end": 3467,
											"name": "SUB",
											"source": 11
										},
										{
											"begin": 3409,
											"end": 3467,
											"name": "SUB",
											"source": 11
										},
										{
											"begin": 3409,
											"end": 3467,
											"name": "DUP2",
											"source": 11
										},
										{
											"begin": 3409,
											"end": 3467,
											"name": "MSTORE",
											"source": 11
										},
										{
											"begin": 3409,
											"end": 3467,
											"name": "SWAP1",
											"source": 11
										},
										{
											"begin": 3409,
											"end": 3467,
											"name": "PUSH",
											"source": 11,
											"value": "40"
										},
										{
											"begin": 3409,
											"end": 3467,
											"name": "MSTORE",
											"source": 11
										},
										{
											"begin": 3369,
											"end": 3473,
											"name": "tag",
											"source": 11,
											"value": "458"
										},
										{
											"begin": 3369,
											"end": 3473,
											"name": "JUMPDEST",
											"source": 11
										},
										{
											"begin": 3362,
											"end": 3473,
											"name": "SWAP4",
											"source": 11
										},
										{
											"begin": 3017,
											"end": 3480,
											"name": "SWAP3",
											"source": 11
										},
										{
											"begin": -1,
											"end": -1,
											"name": "POP",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "POP",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "POP",
											"source": -1
										},
										{
											"begin": 3017,
											"end": 3480,
											"name": "JUMP",
											"source": 11,
											"value": "[out]"
										},
										{
											"begin": 4624,
											"end": 4711,
											"name": "tag",
											"source": 11,
											"value": "225"
										},
										{
											"begin": 4624,
											"end": 4711,
											"name": "JUMPDEST",
											"source": 11
										},
										{
											"begin": 1108,
											"end": 1114,
											"name": "PUSH",
											"source": 0,
											"value": "8"
										},
										{
											"begin": 1108,
											"end": 1114,
											"name": "SLOAD",
											"source": 0
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "A0"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SHL",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SUB",
											"source": -1
										},
										{
											"begin": 1108,
											"end": 1114,
											"name": "AND",
											"source": 0
										},
										{
											"begin": 719,
											"end": 729,
											"name": "CALLER",
											"source": 6
										},
										{
											"begin": 1248,
											"end": 1271,
											"name": "EQ",
											"source": 0
										},
										{
											"begin": 1240,
											"end": 1308,
											"name": "PUSH [tag]",
											"source": 0,
											"value": "466"
										},
										{
											"begin": 1240,
											"end": 1308,
											"name": "JUMPI",
											"source": 0
										},
										{
											"begin": 1240,
											"end": 1308,
											"name": "PUSH",
											"source": 0,
											"value": "40"
										},
										{
											"begin": 1240,
											"end": 1308,
											"name": "MLOAD",
											"source": 0
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "461BCD"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "E5"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SHL",
											"source": -1
										},
										{
											"begin": 1240,
											"end": 1308,
											"name": "DUP2",
											"source": 0
										},
										{
											"begin": 1240,
											"end": 1308,
											"name": "MSTORE",
											"source": 0
										},
										{
											"begin": 1240,
											"end": 1308,
											"name": "PUSH",
											"source": 0,
											"value": "4"
										},
										{
											"begin": 1240,
											"end": 1308,
											"name": "ADD",
											"source": 0
										},
										{
											"begin": 1240,
											"end": 1308,
											"name": "PUSH [tag]",
											"source": 0,
											"value": "250"
										},
										{
											"begin": 1240,
											"end": 1308,
											"name": "SWAP1",
											"source": 0
										},
										{
											"begin": 1240,
											"end": 1308,
											"name": "PUSH [tag]",
											"source": 0,
											"value": "251"
										},
										{
											"begin": 1240,
											"end": 1308,
											"name": "JUMP",
											"source": 0,
											"value": "[in]"
										},
										{
											"begin": 1240,
											"end": 1308,
											"name": "tag",
											"source": 0,
											"value": "466"
										},
										{
											"begin": 1240,
											"end": 1308,
											"name": "JUMPDEST",
											"source": 0
										},
										{
											"begin": 4694,
											"end": 4704,
											"name": "PUSH",
											"source": 11,
											"value": "B"
										},
										{
											"begin": 4694,
											"end": 4704,
											"name": "DUP1",
											"source": 11
										},
										{
											"begin": 4694,
											"end": 4704,
											"name": "SLOAD",
											"source": 11
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "FF00"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "NOT",
											"source": -1
										},
										{
											"begin": 4680,
											"end": 4704,
											"name": "DUP2",
											"source": 11
										},
										{
											"begin": 4680,
											"end": 4704,
											"name": "AND",
											"source": 11
										},
										{
											"begin": 4694,
											"end": 4704,
											"name": "PUSH",
											"source": 11,
											"value": "100"
										},
										{
											"begin": 4694,
											"end": 4704,
											"name": "SWAP2",
											"source": 11
										},
										{
											"begin": 4694,
											"end": 4704,
											"name": "DUP3",
											"source": 11
										},
										{
											"begin": 4694,
											"end": 4704,
											"name": "SWAP1",
											"source": 11
										},
										{
											"begin": 4694,
											"end": 4704,
											"name": "DIV",
											"source": 11
										},
										{
											"begin": 4694,
											"end": 4704,
											"name": "PUSH",
											"source": 11,
											"value": "FF"
										},
										{
											"begin": 4694,
											"end": 4704,
											"name": "AND",
											"source": 11
										},
										{
											"begin": 4693,
											"end": 4704,
											"name": "ISZERO",
											"source": 11
										},
										{
											"begin": 4680,
											"end": 4704,
											"name": "SWAP1",
											"source": 11
										},
										{
											"begin": 4680,
											"end": 4704,
											"name": "SWAP2",
											"source": 11
										},
										{
											"begin": 4680,
											"end": 4704,
											"name": "MUL",
											"source": 11
										},
										{
											"begin": 4680,
											"end": 4704,
											"name": "OR",
											"source": 11
										},
										{
											"begin": 4680,
											"end": 4704,
											"name": "SWAP1",
											"source": 11
										},
										{
											"begin": 4680,
											"end": 4704,
											"name": "SSTORE",
											"source": 11
										},
										{
											"begin": 4624,
											"end": 4711,
											"name": "JUMP",
											"source": 11,
											"value": "[out]"
										},
										{
											"begin": 1918,
											"end": 2116,
											"name": "tag",
											"source": 0,
											"value": "239"
										},
										{
											"begin": 1918,
											"end": 2116,
											"name": "JUMPDEST",
											"source": 0
										},
										{
											"begin": 1108,
											"end": 1114,
											"name": "PUSH",
											"source": 0,
											"value": "8"
										},
										{
											"begin": 1108,
											"end": 1114,
											"name": "SLOAD",
											"source": 0
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "A0"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SHL",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SUB",
											"source": -1
										},
										{
											"begin": 1108,
											"end": 1114,
											"name": "AND",
											"source": 0
										},
										{
											"begin": 719,
											"end": 729,
											"name": "CALLER",
											"source": 6
										},
										{
											"begin": 1248,
											"end": 1271,
											"name": "EQ",
											"source": 0
										},
										{
											"begin": 1240,
											"end": 1308,
											"name": "PUSH [tag]",
											"source": 0,
											"value": "473"
										},
										{
											"begin": 1240,
											"end": 1308,
											"name": "JUMPI",
											"source": 0
										},
										{
											"begin": 1240,
											"end": 1308,
											"name": "PUSH",
											"source": 0,
											"value": "40"
										},
										{
											"begin": 1240,
											"end": 1308,
											"name": "MLOAD",
											"source": 0
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "461BCD"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "E5"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SHL",
											"source": -1
										},
										{
											"begin": 1240,
											"end": 1308,
											"name": "DUP2",
											"source": 0
										},
										{
											"begin": 1240,
											"end": 1308,
											"name": "MSTORE",
											"source": 0
										},
										{
											"begin": 1240,
											"end": 1308,
											"name": "PUSH",
											"source": 0,
											"value": "4"
										},
										{
											"begin": 1240,
											"end": 1308,
											"name": "ADD",
											"source": 0
										},
										{
											"begin": 1240,
											"end": 1308,
											"name": "PUSH [tag]",
											"source": 0,
											"value": "250"
										},
										{
											"begin": 1240,
											"end": 1308,
											"name": "SWAP1",
											"source": 0
										},
										{
											"begin": 1240,
											"end": 1308,
											"name": "PUSH [tag]",
											"source": 0,
											"value": "251"
										},
										{
											"begin": 1240,
											"end": 1308,
											"name": "JUMP",
											"source": 0,
											"value": "[in]"
										},
										{
											"begin": 1240,
											"end": 1308,
											"name": "tag",
											"source": 0,
											"value": "473"
										},
										{
											"begin": 1240,
											"end": 1308,
											"name": "JUMPDEST",
											"source": 0
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "A0"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SHL",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SUB",
											"source": -1
										},
										{
											"begin": 2006,
											"end": 2028,
											"name": "DUP2",
											"source": 0
										},
										{
											"begin": 2006,
											"end": 2028,
											"name": "AND",
											"source": 0
										},
										{
											"begin": 1998,
											"end": 2071,
											"name": "PUSH [tag]",
											"source": 0,
											"value": "476"
										},
										{
											"begin": 1998,
											"end": 2071,
											"name": "JUMPI",
											"source": 0
										},
										{
											"begin": 1998,
											"end": 2071,
											"name": "PUSH",
											"source": 0,
											"value": "40"
										},
										{
											"begin": 1998,
											"end": 2071,
											"name": "MLOAD",
											"source": 0
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "461BCD"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "E5"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SHL",
											"source": -1
										},
										{
											"begin": 1998,
											"end": 2071,
											"name": "DUP2",
											"source": 0
										},
										{
											"begin": 1998,
											"end": 2071,
											"name": "MSTORE",
											"source": 0
										},
										{
											"begin": 16129,
											"end": 16131,
											"name": "PUSH",
											"source": 13,
											"value": "20"
										},
										{
											"begin": 1998,
											"end": 2071,
											"name": "PUSH",
											"source": 0,
											"value": "4"
										},
										{
											"begin": 1998,
											"end": 2071,
											"name": "DUP3",
											"source": 0
										},
										{
											"begin": 1998,
											"end": 2071,
											"name": "ADD",
											"source": 0
										},
										{
											"begin": 16111,
											"end": 16132,
											"name": "MSTORE",
											"source": 13
										},
										{
											"begin": 16168,
											"end": 16170,
											"name": "PUSH",
											"source": 13,
											"value": "26"
										},
										{
											"begin": 16148,
											"end": 16166,
											"name": "PUSH",
											"source": 13,
											"value": "24"
										},
										{
											"begin": 16148,
											"end": 16166,
											"name": "DUP3",
											"source": 13
										},
										{
											"begin": 16148,
											"end": 16166,
											"name": "ADD",
											"source": 13
										},
										{
											"begin": 16141,
											"end": 16171,
											"name": "MSTORE",
											"source": 13
										},
										{
											"begin": 16207,
											"end": 16241,
											"name": "PUSH",
											"source": 13,
											"value": "4F776E61626C653A206E6577206F776E657220697320746865207A65726F2061"
										},
										{
											"begin": 16187,
											"end": 16205,
											"name": "PUSH",
											"source": 13,
											"value": "44"
										},
										{
											"begin": 16187,
											"end": 16205,
											"name": "DUP3",
											"source": 13
										},
										{
											"begin": 16187,
											"end": 16205,
											"name": "ADD",
											"source": 13
										},
										{
											"begin": 16180,
											"end": 16242,
											"name": "MSTORE",
											"source": 13
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "646472657373"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "D0"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SHL",
											"source": -1
										},
										{
											"begin": 16258,
											"end": 16276,
											"name": "PUSH",
											"source": 13,
											"value": "64"
										},
										{
											"begin": 16258,
											"end": 16276,
											"name": "DUP3",
											"source": 13
										},
										{
											"begin": 16258,
											"end": 16276,
											"name": "ADD",
											"source": 13
										},
										{
											"begin": 16251,
											"end": 16287,
											"name": "MSTORE",
											"source": 13
										},
										{
											"begin": 16304,
											"end": 16323,
											"name": "PUSH",
											"source": 13,
											"value": "84"
										},
										{
											"begin": 16304,
											"end": 16323,
											"name": "ADD",
											"source": 13
										},
										{
											"begin": 1998,
											"end": 2071,
											"name": "PUSH [tag]",
											"source": 0,
											"value": "250"
										},
										{
											"begin": 15927,
											"end": 16329,
											"name": "JUMP",
											"source": 13
										},
										{
											"begin": 1998,
											"end": 2071,
											"name": "tag",
											"source": 0,
											"value": "476"
										},
										{
											"begin": 1998,
											"end": 2071,
											"name": "JUMPDEST",
											"source": 0
										},
										{
											"begin": 2081,
											"end": 2109,
											"name": "PUSH [tag]",
											"source": 0,
											"value": "406"
										},
										{
											"begin": 2100,
											"end": 2108,
											"name": "DUP2",
											"source": 0
										},
										{
											"begin": 2081,
											"end": 2099,
											"name": "PUSH [tag]",
											"source": 0,
											"value": "354"
										},
										{
											"begin": 2081,
											"end": 2109,
											"name": "JUMP",
											"source": 0,
											"value": "[in]"
										},
										{
											"begin": 11506,
											"end": 11690,
											"name": "tag",
											"source": 12,
											"value": "264"
										},
										{
											"begin": 11506,
											"end": 11690,
											"name": "JUMPDEST",
											"source": 12
										},
										{
											"begin": 11563,
											"end": 11567,
											"name": "PUSH",
											"source": 12,
											"value": "0"
										},
										{
											"begin": 11626,
											"end": 11639,
											"name": "DUP1",
											"source": 12
										},
										{
											"begin": 11626,
											"end": 11639,
											"name": "SLOAD",
											"source": 12
										},
										{
											"begin": 11616,
											"end": 11623,
											"name": "DUP3",
											"source": 12
										},
										{
											"begin": 11616,
											"end": 11639,
											"name": "LT",
											"source": 12
										},
										{
											"begin": 11586,
											"end": 11683,
											"name": "DUP1",
											"source": 12
										},
										{
											"begin": 11586,
											"end": 11683,
											"name": "ISZERO",
											"source": 12
										},
										{
											"begin": 11586,
											"end": 11683,
											"name": "PUSH [tag]",
											"source": 12,
											"value": "243"
										},
										{
											"begin": 11586,
											"end": 11683,
											"name": "JUMPI",
											"source": 12
										},
										{
											"begin": -1,
											"end": -1,
											"name": "POP",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "POP",
											"source": -1
										},
										{
											"begin": 11656,
											"end": 11676,
											"name": "PUSH",
											"source": 12,
											"value": "0"
										},
										{
											"begin": 11656,
											"end": 11676,
											"name": "SWAP1",
											"source": 12
										},
										{
											"begin": 11656,
											"end": 11676,
											"name": "DUP2",
											"source": 12
										},
										{
											"begin": 11656,
											"end": 11676,
											"name": "MSTORE",
											"source": 12
										},
										{
											"begin": 11656,
											"end": 11667,
											"name": "PUSH",
											"source": 12,
											"value": "4"
										},
										{
											"begin": 11656,
											"end": 11676,
											"name": "PUSH",
											"source": 12,
											"value": "20"
										},
										{
											"begin": 11656,
											"end": 11676,
											"name": "MSTORE",
											"source": 12
										},
										{
											"begin": 11656,
											"end": 11676,
											"name": "PUSH",
											"source": 12,
											"value": "40"
										},
										{
											"begin": 11656,
											"end": 11676,
											"name": "SWAP1",
											"source": 12
										},
										{
											"begin": 11656,
											"end": 11676,
											"name": "KECCAK256",
											"source": 12
										},
										{
											"begin": 11656,
											"end": 11683,
											"name": "SLOAD",
											"source": 12
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "E0"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SHL",
											"source": -1
										},
										{
											"begin": 11656,
											"end": 11683,
											"name": "SWAP1",
											"source": 12
										},
										{
											"begin": 11656,
											"end": 11683,
											"name": "DIV",
											"source": 12
										},
										{
											"begin": 11656,
											"end": 11683,
											"name": "PUSH",
											"source": 12,
											"value": "FF"
										},
										{
											"begin": 11656,
											"end": 11683,
											"name": "AND",
											"source": 12
										},
										{
											"begin": 11655,
											"end": 11683,
											"name": "ISZERO",
											"source": 12
										},
										{
											"begin": 11655,
											"end": 11683,
											"name": "SWAP1",
											"source": 12
										},
										{
											"begin": 11506,
											"end": 11690,
											"name": "JUMP",
											"source": 12,
											"value": "[out]"
										},
										{
											"begin": 18922,
											"end": 19111,
											"name": "tag",
											"source": 12,
											"value": "275"
										},
										{
											"begin": 18922,
											"end": 19111,
											"name": "JUMPDEST",
											"source": 12
										},
										{
											"begin": 19032,
											"end": 19056,
											"name": "PUSH",
											"source": 12,
											"value": "0"
										},
										{
											"begin": 19032,
											"end": 19056,
											"name": "DUP3",
											"source": 12
										},
										{
											"begin": 19032,
											"end": 19056,
											"name": "DUP2",
											"source": 12
										},
										{
											"begin": 19032,
											"end": 19056,
											"name": "MSTORE",
											"source": 12
										},
										{
											"begin": 19032,
											"end": 19047,
											"name": "PUSH",
											"source": 12,
											"value": "6"
										},
										{
											"begin": 19032,
											"end": 19056,
											"name": "PUSH",
											"source": 12,
											"value": "20"
										},
										{
											"begin": 19032,
											"end": 19056,
											"name": "MSTORE",
											"source": 12
										},
										{
											"begin": 19032,
											"end": 19056,
											"name": "PUSH",
											"source": 12,
											"value": "40"
										},
										{
											"begin": 19032,
											"end": 19056,
											"name": "DUP1",
											"source": 12
										},
										{
											"begin": 19032,
											"end": 19056,
											"name": "DUP3",
											"source": 12
										},
										{
											"begin": 19032,
											"end": 19056,
											"name": "KECCAK256",
											"source": 12
										},
										{
											"begin": 19032,
											"end": 19061,
											"name": "DUP1",
											"source": 12
										},
										{
											"begin": 19032,
											"end": 19061,
											"name": "SLOAD",
											"source": 12
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "A0"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SHL",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SUB",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "NOT",
											"source": -1
										},
										{
											"begin": 19032,
											"end": 19061,
											"name": "AND",
											"source": 12
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "A0"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SHL",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SUB",
											"source": -1
										},
										{
											"begin": 19032,
											"end": 19061,
											"name": "DUP8",
											"source": 12
										},
										{
											"begin": 19032,
											"end": 19061,
											"name": "DUP2",
											"source": 12
										},
										{
											"begin": 19032,
											"end": 19061,
											"name": "AND",
											"source": 12
										},
										{
											"begin": 19032,
											"end": 19061,
											"name": "SWAP2",
											"source": 12
										},
										{
											"begin": 19032,
											"end": 19061,
											"name": "DUP3",
											"source": 12
										},
										{
											"begin": 19032,
											"end": 19061,
											"name": "OR",
											"source": 12
										},
										{
											"begin": 19032,
											"end": 19061,
											"name": "SWAP1",
											"source": 12
										},
										{
											"begin": 19032,
											"end": 19061,
											"name": "SWAP3",
											"source": 12
										},
										{
											"begin": 19032,
											"end": 19061,
											"name": "SSTORE",
											"source": 12
										},
										{
											"begin": 19076,
											"end": 19104,
											"name": "SWAP2",
											"source": 12
										},
										{
											"begin": 19076,
											"end": 19104,
											"name": "MLOAD",
											"source": 12
										},
										{
											"begin": 19032,
											"end": 19056,
											"name": "DUP6",
											"source": 12
										},
										{
											"begin": 19032,
											"end": 19056,
											"name": "SWAP4",
											"source": 12
										},
										{
											"begin": 19076,
											"end": 19104,
											"name": "SWAP2",
											"source": 12
										},
										{
											"begin": 19076,
											"end": 19104,
											"name": "DUP6",
											"source": 12
										},
										{
											"begin": 19076,
											"end": 19104,
											"name": "AND",
											"source": 12
										},
										{
											"begin": 19076,
											"end": 19104,
											"name": "SWAP2",
											"source": 12
										},
										{
											"begin": 19076,
											"end": 19104,
											"name": "PUSH",
											"source": 12,
											"value": "8C5BE1E5EBEC7D5BD14F71427D1E84F3DD0314C0F7B2291E5B200AC8C7C3B925"
										},
										{
											"begin": 19076,
											"end": 19104,
											"name": "SWAP2",
											"source": 12
										},
										{
											"begin": 19076,
											"end": 19104,
											"name": "LOG4",
											"source": 12
										},
										{
											"begin": 18922,
											"end": 19111,
											"name": "POP",
											"source": 12
										},
										{
											"begin": 18922,
											"end": 19111,
											"name": "POP",
											"source": 12
										},
										{
											"begin": 18922,
											"end": 19111,
											"name": "POP",
											"source": 12
										},
										{
											"begin": 18922,
											"end": 19111,
											"name": "JUMP",
											"source": 12,
											"value": "[out]"
										},
										{
											"begin": 14528,
											"end": 16595,
											"name": "tag",
											"source": 12,
											"value": "281"
										},
										{
											"begin": 14528,
											"end": 16595,
											"name": "JUMPDEST",
											"source": 12
										},
										{
											"begin": 14638,
											"end": 14673,
											"name": "PUSH",
											"source": 12,
											"value": "0"
										},
										{
											"begin": 14676,
											"end": 14696,
											"name": "PUSH [tag]",
											"source": 12,
											"value": "489"
										},
										{
											"begin": 14688,
											"end": 14695,
											"name": "DUP3",
											"source": 12
										},
										{
											"begin": 14676,
											"end": 14687,
											"name": "PUSH [tag]",
											"source": 12,
											"value": "344"
										},
										{
											"begin": 14676,
											"end": 14696,
											"name": "JUMP",
											"source": 12,
											"value": "[in]"
										},
										{
											"begin": 14676,
											"end": 14696,
											"name": "tag",
											"source": 12,
											"value": "489"
										},
										{
											"begin": 14676,
											"end": 14696,
											"name": "JUMPDEST",
											"source": 12
										},
										{
											"begin": 14749,
											"end": 14767,
											"name": "DUP1",
											"source": 12
										},
										{
											"begin": 14749,
											"end": 14767,
											"name": "MLOAD",
											"source": 12
										},
										{
											"begin": 14638,
											"end": 14696,
											"name": "SWAP1",
											"source": 12
										},
										{
											"begin": 14638,
											"end": 14696,
											"name": "SWAP2",
											"source": 12
										},
										{
											"begin": -1,
											"end": -1,
											"name": "POP",
											"source": -1
										},
										{
											"begin": 14707,
											"end": 14729,
											"name": "PUSH",
											"source": 12,
											"value": "0"
										},
										{
											"begin": 14707,
											"end": 14729,
											"name": "SWAP1",
											"source": 12
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "A0"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SHL",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SUB",
											"source": -1
										},
										{
											"begin": 14733,
											"end": 14767,
											"name": "AND",
											"source": 12
										},
										{
											"begin": 719,
											"end": 729,
											"name": "CALLER",
											"source": 6
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "A0"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SHL",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SUB",
											"source": -1
										},
										{
											"begin": 14733,
											"end": 14767,
											"name": "AND",
											"source": 12
										},
										{
											"begin": 14733,
											"end": 14767,
											"name": "EQ",
											"source": 12
										},
										{
											"begin": 14733,
											"end": 14833,
											"name": "DUP1",
											"source": 12
										},
										{
											"begin": 14733,
											"end": 14833,
											"name": "PUSH [tag]",
											"source": 12,
											"value": "492"
										},
										{
											"begin": 14733,
											"end": 14833,
											"name": "JUMPI",
											"source": 12
										},
										{
											"begin": -1,
											"end": -1,
											"name": "POP",
											"source": -1
										},
										{
											"begin": 14800,
											"end": 14818,
											"name": "DUP2",
											"source": 12
										},
										{
											"begin": 14800,
											"end": 14818,
											"name": "MLOAD",
											"source": 12
										},
										{
											"begin": 14783,
											"end": 14833,
											"name": "PUSH [tag]",
											"source": 12,
											"value": "492"
										},
										{
											"begin": 14783,
											"end": 14833,
											"name": "SWAP1",
											"source": 12
										},
										{
											"begin": 719,
											"end": 729,
											"name": "CALLER",
											"source": 6
										},
										{
											"begin": 10202,
											"end": 10364,
											"name": "PUSH [tag]",
											"source": 12,
											"value": "232"
										},
										{
											"begin": 10202,
											"end": 10364,
											"name": "JUMP",
											"source": 12,
											"value": "[in]"
										},
										{
											"begin": 14783,
											"end": 14833,
											"name": "tag",
											"source": 12,
											"value": "492"
										},
										{
											"begin": 14783,
											"end": 14833,
											"name": "JUMPDEST",
											"source": 12
										},
										{
											"begin": 14733,
											"end": 14885,
											"name": "DUP1",
											"source": 12
										},
										{
											"begin": 14733,
											"end": 14885,
											"name": "PUSH [tag]",
											"source": 12,
											"value": "494"
										},
										{
											"begin": 14733,
											"end": 14885,
											"name": "JUMPI",
											"source": 12
										},
										{
											"begin": -1,
											"end": -1,
											"name": "POP",
											"source": -1
										},
										{
											"begin": 719,
											"end": 729,
											"name": "CALLER",
											"source": 6
										},
										{
											"begin": 14849,
											"end": 14869,
											"name": "PUSH [tag]",
											"source": 12,
											"value": "496"
										},
										{
											"begin": 14861,
											"end": 14868,
											"name": "DUP5",
											"source": 12
										},
										{
											"begin": 14849,
											"end": 14860,
											"name": "PUSH [tag]",
											"source": 12,
											"value": "84"
										},
										{
											"begin": 14849,
											"end": 14869,
											"name": "JUMP",
											"source": 12,
											"value": "[in]"
										},
										{
											"begin": 14849,
											"end": 14869,
											"name": "tag",
											"source": 12,
											"value": "496"
										},
										{
											"begin": 14849,
											"end": 14869,
											"name": "JUMPDEST",
											"source": 12
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "A0"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SHL",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SUB",
											"source": -1
										},
										{
											"begin": 14849,
											"end": 14885,
											"name": "AND",
											"source": 12
										},
										{
											"begin": 14849,
											"end": 14885,
											"name": "EQ",
											"source": 12
										},
										{
											"begin": 14733,
											"end": 14885,
											"name": "tag",
											"source": 12,
											"value": "494"
										},
										{
											"begin": 14733,
											"end": 14885,
											"name": "JUMPDEST",
											"source": 12
										},
										{
											"begin": 14707,
											"end": 14886,
											"name": "SWAP1",
											"source": 12
										},
										{
											"begin": 14707,
											"end": 14886,
											"name": "POP",
											"source": 12
										},
										{
											"begin": 14902,
											"end": 14919,
											"name": "DUP1",
											"source": 12
										},
										{
											"begin": 14897,
											"end": 14963,
											"name": "PUSH [tag]",
											"source": 12,
											"value": "497"
										},
										{
											"begin": 14897,
											"end": 14963,
											"name": "JUMPI",
											"source": 12
										},
										{
											"begin": 14928,
											"end": 14963,
											"name": "PUSH",
											"source": 12,
											"value": "40"
										},
										{
											"begin": 14928,
											"end": 14963,
											"name": "MLOAD",
											"source": 12
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "2CE44B5F"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "E1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SHL",
											"source": -1
										},
										{
											"begin": 14928,
											"end": 14963,
											"name": "DUP2",
											"source": 12
										},
										{
											"begin": 14928,
											"end": 14963,
											"name": "MSTORE",
											"source": 12
										},
										{
											"begin": 14928,
											"end": 14963,
											"name": "PUSH",
											"source": 12,
											"value": "4"
										},
										{
											"begin": 14928,
											"end": 14963,
											"name": "ADD",
											"source": 12
										},
										{
											"begin": 14928,
											"end": 14963,
											"name": "PUSH",
											"source": 12,
											"value": "40"
										},
										{
											"begin": 14928,
											"end": 14963,
											"name": "MLOAD",
											"source": 12
										},
										{
											"begin": 14928,
											"end": 14963,
											"name": "DUP1",
											"source": 12
										},
										{
											"begin": 14928,
											"end": 14963,
											"name": "SWAP2",
											"source": 12
										},
										{
											"begin": 14928,
											"end": 14963,
											"name": "SUB",
											"source": 12
										},
										{
											"begin": 14928,
											"end": 14963,
											"name": "SWAP1",
											"source": 12
										},
										{
											"begin": 14928,
											"end": 14963,
											"name": "REVERT",
											"source": 12
										},
										{
											"begin": 14897,
											"end": 14963,
											"name": "tag",
											"source": 12,
											"value": "497"
										},
										{
											"begin": 14897,
											"end": 14963,
											"name": "JUMPDEST",
											"source": 12
										},
										{
											"begin": 14999,
											"end": 15003,
											"name": "DUP5",
											"source": 12
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "A0"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SHL",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SUB",
											"source": -1
										},
										{
											"begin": 14977,
											"end": 15003,
											"name": "AND",
											"source": 12
										},
										{
											"begin": 14977,
											"end": 14990,
											"name": "DUP3",
											"source": 12
										},
										{
											"begin": 14977,
											"end": 14995,
											"name": "PUSH",
											"source": 12,
											"value": "0"
										},
										{
											"begin": 14977,
											"end": 14995,
											"name": "ADD",
											"source": 12
										},
										{
											"begin": 14977,
											"end": 14995,
											"name": "MLOAD",
											"source": 12
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "A0"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SHL",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SUB",
											"source": -1
										},
										{
											"begin": 14977,
											"end": 15003,
											"name": "AND",
											"source": 12
										},
										{
											"begin": 14977,
											"end": 15003,
											"name": "EQ",
											"source": 12
										},
										{
											"begin": 14973,
											"end": 15040,
											"name": "PUSH [tag]",
											"source": 12,
											"value": "498"
										},
										{
											"begin": 14973,
											"end": 15040,
											"name": "JUMPI",
											"source": 12
										},
										{
											"begin": 15012,
											"end": 15040,
											"name": "PUSH",
											"source": 12,
											"value": "40"
										},
										{
											"begin": 15012,
											"end": 15040,
											"name": "MLOAD",
											"source": 12
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "A11481"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "E8"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SHL",
											"source": -1
										},
										{
											"begin": 15012,
											"end": 15040,
											"name": "DUP2",
											"source": 12
										},
										{
											"begin": 15012,
											"end": 15040,
											"name": "MSTORE",
											"source": 12
										},
										{
											"begin": 15012,
											"end": 15040,
											"name": "PUSH",
											"source": 12,
											"value": "4"
										},
										{
											"begin": 15012,
											"end": 15040,
											"name": "ADD",
											"source": 12
										},
										{
											"begin": 15012,
											"end": 15040,
											"name": "PUSH",
											"source": 12,
											"value": "40"
										},
										{
											"begin": 15012,
											"end": 15040,
											"name": "MLOAD",
											"source": 12
										},
										{
											"begin": 15012,
											"end": 15040,
											"name": "DUP1",
											"source": 12
										},
										{
											"begin": 15012,
											"end": 15040,
											"name": "SWAP2",
											"source": 12
										},
										{
											"begin": 15012,
											"end": 15040,
											"name": "SUB",
											"source": 12
										},
										{
											"begin": 15012,
											"end": 15040,
											"name": "SWAP1",
											"source": 12
										},
										{
											"begin": 15012,
											"end": 15040,
											"name": "REVERT",
											"source": 12
										},
										{
											"begin": 14973,
											"end": 15040,
											"name": "tag",
											"source": 12,
											"value": "498"
										},
										{
											"begin": 14973,
											"end": 15040,
											"name": "JUMPDEST",
											"source": 12
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "A0"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SHL",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SUB",
											"source": -1
										},
										{
											"begin": 15054,
											"end": 15070,
											"name": "DUP5",
											"source": 12
										},
										{
											"begin": 15054,
											"end": 15070,
											"name": "AND",
											"source": 12
										},
										{
											"begin": 15050,
											"end": 15102,
											"name": "PUSH [tag]",
											"source": 12,
											"value": "499"
										},
										{
											"begin": 15050,
											"end": 15102,
											"name": "JUMPI",
											"source": 12
										},
										{
											"begin": 15079,
											"end": 15102,
											"name": "PUSH",
											"source": 12,
											"value": "40"
										},
										{
											"begin": 15079,
											"end": 15102,
											"name": "MLOAD",
											"source": 12
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "3A954ECD"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "E2"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SHL",
											"source": -1
										},
										{
											"begin": 15079,
											"end": 15102,
											"name": "DUP2",
											"source": 12
										},
										{
											"begin": 15079,
											"end": 15102,
											"name": "MSTORE",
											"source": 12
										},
										{
											"begin": 15079,
											"end": 15102,
											"name": "PUSH",
											"source": 12,
											"value": "4"
										},
										{
											"begin": 15079,
											"end": 15102,
											"name": "ADD",
											"source": 12
										},
										{
											"begin": 15079,
											"end": 15102,
											"name": "PUSH",
											"source": 12,
											"value": "40"
										},
										{
											"begin": 15079,
											"end": 15102,
											"name": "MLOAD",
											"source": 12
										},
										{
											"begin": 15079,
											"end": 15102,
											"name": "DUP1",
											"source": 12
										},
										{
											"begin": 15079,
											"end": 15102,
											"name": "SWAP2",
											"source": 12
										},
										{
											"begin": 15079,
											"end": 15102,
											"name": "SUB",
											"source": 12
										},
										{
											"begin": 15079,
											"end": 15102,
											"name": "SWAP1",
											"source": 12
										},
										{
											"begin": 15079,
											"end": 15102,
											"name": "REVERT",
											"source": 12
										},
										{
											"begin": 15050,
											"end": 15102,
											"name": "tag",
											"source": 12,
											"value": "499"
										},
										{
											"begin": 15050,
											"end": 15102,
											"name": "JUMPDEST",
											"source": 12
										},
										{
											"begin": 15218,
											"end": 15267,
											"name": "PUSH [tag]",
											"source": 12,
											"value": "502"
										},
										{
											"begin": 15235,
											"end": 15236,
											"name": "PUSH",
											"source": 12,
											"value": "0"
										},
										{
											"begin": 15239,
											"end": 15246,
											"name": "DUP5",
											"source": 12
										},
										{
											"begin": 15248,
											"end": 15261,
											"name": "DUP5",
											"source": 12
										},
										{
											"begin": 15248,
											"end": 15266,
											"name": "PUSH",
											"source": 12,
											"value": "0"
										},
										{
											"begin": 15248,
											"end": 15266,
											"name": "ADD",
											"source": 12
										},
										{
											"begin": 15248,
											"end": 15266,
											"name": "MLOAD",
											"source": 12
										},
										{
											"begin": 15218,
											"end": 15226,
											"name": "PUSH [tag]",
											"source": 12,
											"value": "275"
										},
										{
											"begin": 15218,
											"end": 15267,
											"name": "JUMP",
											"source": 12,
											"value": "[in]"
										},
										{
											"begin": 15218,
											"end": 15267,
											"name": "tag",
											"source": 12,
											"value": "502"
										},
										{
											"begin": 15218,
											"end": 15267,
											"name": "JUMPDEST",
											"source": 12
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "A0"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SHL",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SUB",
											"source": -1
										},
										{
											"begin": 15557,
											"end": 15575,
											"name": "DUP6",
											"source": 12
										},
										{
											"begin": 15557,
											"end": 15575,
											"name": "DUP2",
											"source": 12
										},
										{
											"begin": 15557,
											"end": 15575,
											"name": "AND",
											"source": 12
										},
										{
											"begin": 15557,
											"end": 15575,
											"name": "PUSH",
											"source": 12,
											"value": "0"
										},
										{
											"begin": 15557,
											"end": 15575,
											"name": "SWAP1",
											"source": 12
										},
										{
											"begin": 15557,
											"end": 15575,
											"name": "DUP2",
											"source": 12
										},
										{
											"begin": 15557,
											"end": 15575,
											"name": "MSTORE",
											"source": 12
										},
										{
											"begin": 15557,
											"end": 15569,
											"name": "PUSH",
											"source": 12,
											"value": "5"
										},
										{
											"begin": 15557,
											"end": 15575,
											"name": "PUSH",
											"source": 12,
											"value": "20"
										},
										{
											"begin": 15557,
											"end": 15575,
											"name": "SWAP1",
											"source": 12
										},
										{
											"begin": 15557,
											"end": 15575,
											"name": "DUP2",
											"source": 12
										},
										{
											"begin": 15557,
											"end": 15575,
											"name": "MSTORE",
											"source": 12
										},
										{
											"begin": 15557,
											"end": 15575,
											"name": "PUSH",
											"source": 12,
											"value": "40"
										},
										{
											"begin": 15557,
											"end": 15575,
											"name": "DUP1",
											"source": 12
										},
										{
											"begin": 15557,
											"end": 15575,
											"name": "DUP4",
											"source": 12
										},
										{
											"begin": 15557,
											"end": 15575,
											"name": "KECCAK256",
											"source": 12
										},
										{
											"begin": 15557,
											"end": 15588,
											"name": "DUP1",
											"source": 12
										},
										{
											"begin": 15557,
											"end": 15588,
											"name": "SLOAD",
											"source": 12
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "FFFFFFFFFFFFFFFF"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "NOT",
											"source": -1
										},
										{
											"begin": 15557,
											"end": 15588,
											"name": "DUP1",
											"source": 12
										},
										{
											"begin": 15557,
											"end": 15588,
											"name": "DUP3",
											"source": 12
										},
										{
											"begin": 15557,
											"end": 15588,
											"name": "AND",
											"source": 12
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "40"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SHL",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SUB",
											"source": -1
										},
										{
											"begin": 15557,
											"end": 15588,
											"name": "SWAP3",
											"source": 12
										},
										{
											"begin": 15557,
											"end": 15588,
											"name": "DUP4",
											"source": 12
										},
										{
											"begin": 15557,
											"end": 15588,
											"name": "AND",
											"source": 12
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "0"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "NOT",
											"source": -1
										},
										{
											"begin": 15557,
											"end": 15588,
											"name": "ADD",
											"source": 12
										},
										{
											"begin": 15557,
											"end": 15588,
											"name": "DUP4",
											"source": 12
										},
										{
											"begin": 15557,
											"end": 15588,
											"name": "AND",
											"source": 12
										},
										{
											"begin": 15557,
											"end": 15588,
											"name": "OR",
											"source": 12
										},
										{
											"begin": 15557,
											"end": 15588,
											"name": "SWAP1",
											"source": 12
										},
										{
											"begin": 15557,
											"end": 15588,
											"name": "SWAP3",
											"source": 12
										},
										{
											"begin": 15557,
											"end": 15588,
											"name": "SSTORE",
											"source": 12
										},
										{
											"begin": 15602,
											"end": 15618,
											"name": "DUP10",
											"source": 12
										},
										{
											"begin": 15602,
											"end": 15618,
											"name": "DUP7",
											"source": 12
										},
										{
											"begin": 15602,
											"end": 15618,
											"name": "AND",
											"source": 12
										},
										{
											"begin": 15602,
											"end": 15618,
											"name": "DUP1",
											"source": 12
										},
										{
											"begin": 15602,
											"end": 15618,
											"name": "DUP7",
											"source": 12
										},
										{
											"begin": 15602,
											"end": 15618,
											"name": "MSTORE",
											"source": 12
										},
										{
											"begin": 15602,
											"end": 15618,
											"name": "DUP4",
											"source": 12
										},
										{
											"begin": 15602,
											"end": 15618,
											"name": "DUP7",
											"source": 12
										},
										{
											"begin": 15602,
											"end": 15618,
											"name": "KECCAK256",
											"source": 12
										},
										{
											"begin": 15602,
											"end": 15631,
											"name": "DUP1",
											"source": 12
										},
										{
											"begin": 15602,
											"end": 15631,
											"name": "SLOAD",
											"source": 12
										},
										{
											"begin": 15602,
											"end": 15631,
											"name": "SWAP4",
											"source": 12
										},
										{
											"begin": 15602,
											"end": 15631,
											"name": "DUP5",
											"source": 12
										},
										{
											"begin": 15602,
											"end": 15631,
											"name": "AND",
											"source": 12
										},
										{
											"begin": 15602,
											"end": 15631,
											"name": "SWAP4",
											"source": 12
										},
										{
											"begin": 15602,
											"end": 15631,
											"name": "DUP4",
											"source": 12
										},
										{
											"begin": 15602,
											"end": 15631,
											"name": "AND",
											"source": 12
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": 15602,
											"end": 15631,
											"name": "SWAP1",
											"source": 12
										},
										{
											"begin": 15602,
											"end": 15631,
											"name": "DUP2",
											"source": 12
										},
										{
											"begin": 15602,
											"end": 15631,
											"name": "ADD",
											"source": 12
										},
										{
											"begin": 15602,
											"end": 15631,
											"name": "DUP5",
											"source": 12
										},
										{
											"begin": 15602,
											"end": 15631,
											"name": "AND",
											"source": 12
										},
										{
											"begin": 15602,
											"end": 15631,
											"name": "SWAP5",
											"source": 12
										},
										{
											"begin": 15602,
											"end": 15631,
											"name": "SWAP1",
											"source": 12
										},
										{
											"begin": 15602,
											"end": 15631,
											"name": "SWAP5",
											"source": 12
										},
										{
											"begin": 15602,
											"end": 15631,
											"name": "OR",
											"source": 12
										},
										{
											"begin": 15602,
											"end": 15631,
											"name": "SWAP1",
											"source": 12
										},
										{
											"begin": 15602,
											"end": 15631,
											"name": "SSTORE",
											"source": 12
										},
										{
											"begin": 15646,
											"end": 15666,
											"name": "DUP10",
											"source": 12
										},
										{
											"begin": 15646,
											"end": 15666,
											"name": "DUP7",
											"source": 12
										},
										{
											"begin": 15646,
											"end": 15666,
											"name": "MSTORE",
											"source": 12
										},
										{
											"begin": 15646,
											"end": 15657,
											"name": "PUSH",
											"source": 12,
											"value": "4"
										},
										{
											"begin": 15646,
											"end": 15666,
											"name": "SWAP1",
											"source": 12
										},
										{
											"begin": 15646,
											"end": 15666,
											"name": "SWAP5",
											"source": 12
										},
										{
											"begin": 15646,
											"end": 15666,
											"name": "MSTORE",
											"source": 12
										},
										{
											"begin": 15646,
											"end": 15666,
											"name": "DUP3",
											"source": 12
										},
										{
											"begin": 15646,
											"end": 15666,
											"name": "DUP6",
											"source": 12
										},
										{
											"begin": 15646,
											"end": 15666,
											"name": "KECCAK256",
											"source": 12
										},
										{
											"begin": 15646,
											"end": 15676,
											"name": "DUP1",
											"source": 12
										},
										{
											"begin": 15646,
											"end": 15676,
											"name": "SLOAD",
											"source": 12
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "E0"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SHL",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SUB",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "NOT",
											"source": -1
										},
										{
											"begin": 15690,
											"end": 15751,
											"name": "AND",
											"source": 12
										},
										{
											"begin": 15690,
											"end": 15751,
											"name": "SWAP1",
											"source": 12
										},
										{
											"begin": 15690,
											"end": 15751,
											"name": "SWAP5",
											"source": 12
										},
										{
											"begin": 15690,
											"end": 15751,
											"name": "OR",
											"source": 12
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "A0"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SHL",
											"source": -1
										},
										{
											"begin": 15735,
											"end": 15750,
											"name": "TIMESTAMP",
											"source": 12
										},
										{
											"begin": 15690,
											"end": 15751,
											"name": "SWAP1",
											"source": 12
										},
										{
											"begin": 15690,
											"end": 15751,
											"name": "SWAP3",
											"source": 12
										},
										{
											"begin": 15690,
											"end": 15751,
											"name": "AND",
											"source": 12
										},
										{
											"begin": 15690,
											"end": 15751,
											"name": "SWAP2",
											"source": 12
										},
										{
											"begin": 15690,
											"end": 15751,
											"name": "SWAP1",
											"source": 12
										},
										{
											"begin": 15690,
											"end": 15751,
											"name": "SWAP2",
											"source": 12
										},
										{
											"begin": 15690,
											"end": 15751,
											"name": "MUL",
											"source": 12
										},
										{
											"begin": 15690,
											"end": 15751,
											"name": "OR",
											"source": 12
										},
										{
											"begin": 15690,
											"end": 15751,
											"name": "SWAP1",
											"source": 12
										},
										{
											"begin": 15690,
											"end": 15751,
											"name": "SWAP3",
											"source": 12
										},
										{
											"begin": 15690,
											"end": 15751,
											"name": "SSTORE",
											"source": 12
										},
										{
											"begin": 16021,
											"end": 16032,
											"name": "SWAP1",
											"source": 12
										},
										{
											"begin": 16021,
											"end": 16032,
											"name": "DUP7",
											"source": 12
										},
										{
											"begin": 16021,
											"end": 16032,
											"name": "ADD",
											"source": 12
										},
										{
											"begin": 16050,
											"end": 16074,
											"name": "DUP1",
											"source": 12
										},
										{
											"begin": 16050,
											"end": 16074,
											"name": "DUP4",
											"source": 12
										},
										{
											"begin": 16050,
											"end": 16074,
											"name": "MSTORE",
											"source": 12
										},
										{
											"begin": 16050,
											"end": 16074,
											"name": "SWAP2",
											"source": 12
										},
										{
											"begin": 16050,
											"end": 16074,
											"name": "KECCAK256",
											"source": 12
										},
										{
											"begin": 16050,
											"end": 16079,
											"name": "SLOAD",
											"source": 12
										},
										{
											"begin": 16021,
											"end": 16032,
											"name": "SWAP1",
											"source": 12
										},
										{
											"begin": 16021,
											"end": 16032,
											"name": "SWAP2",
											"source": 12
										},
										{
											"begin": 16050,
											"end": 16079,
											"name": "AND",
											"source": 12
										},
										{
											"begin": 16046,
											"end": 16484,
											"name": "PUSH [tag]",
											"source": 12,
											"value": "504"
										},
										{
											"begin": 16046,
											"end": 16484,
											"name": "JUMPI",
											"source": 12
										},
										{
											"begin": 16272,
											"end": 16285,
											"name": "PUSH",
											"source": 12,
											"value": "0"
										},
										{
											"begin": 16272,
											"end": 16285,
											"name": "SLOAD",
											"source": 12
										},
										{
											"begin": 16258,
											"end": 16269,
											"name": "DUP2",
											"source": 12
										},
										{
											"begin": 16258,
											"end": 16285,
											"name": "LT",
											"source": 12
										},
										{
											"begin": 16254,
											"end": 16470,
											"name": "ISZERO",
											"source": 12
										},
										{
											"begin": 16254,
											"end": 16470,
											"name": "PUSH [tag]",
											"source": 12,
											"value": "504"
										},
										{
											"begin": 16254,
											"end": 16470,
											"name": "JUMPI",
											"source": 12
										},
										{
											"begin": 16341,
											"end": 16359,
											"name": "DUP3",
											"source": 12
										},
										{
											"begin": 16341,
											"end": 16359,
											"name": "MLOAD",
											"source": 12
										},
										{
											"begin": 16341,
											"end": 16359,
											"name": "PUSH",
											"source": 12,
											"value": "0"
										},
										{
											"begin": 16309,
											"end": 16333,
											"name": "DUP3",
											"source": 12
										},
										{
											"begin": 16309,
											"end": 16333,
											"name": "DUP2",
											"source": 12
										},
										{
											"begin": 16309,
											"end": 16333,
											"name": "MSTORE",
											"source": 12
										},
										{
											"begin": 16309,
											"end": 16320,
											"name": "PUSH",
											"source": 12,
											"value": "4"
										},
										{
											"begin": 16309,
											"end": 16333,
											"name": "PUSH",
											"source": 12,
											"value": "20"
										},
										{
											"begin": 16309,
											"end": 16333,
											"name": "SWAP1",
											"source": 12
										},
										{
											"begin": 16309,
											"end": 16333,
											"name": "DUP2",
											"source": 12
										},
										{
											"begin": 16309,
											"end": 16333,
											"name": "MSTORE",
											"source": 12
										},
										{
											"begin": 16309,
											"end": 16333,
											"name": "PUSH",
											"source": 12,
											"value": "40"
										},
										{
											"begin": 16309,
											"end": 16333,
											"name": "SWAP1",
											"source": 12
										},
										{
											"begin": 16309,
											"end": 16333,
											"name": "SWAP2",
											"source": 12
										},
										{
											"begin": 16309,
											"end": 16333,
											"name": "KECCAK256",
											"source": 12
										},
										{
											"begin": 16309,
											"end": 16359,
											"name": "DUP1",
											"source": 12
										},
										{
											"begin": 16309,
											"end": 16359,
											"name": "SLOAD",
											"source": 12
										},
										{
											"begin": 16423,
											"end": 16451,
											"name": "SWAP2",
											"source": 12
										},
										{
											"begin": 16423,
											"end": 16451,
											"name": "DUP7",
											"source": 12
										},
										{
											"begin": 16423,
											"end": 16451,
											"name": "ADD",
											"source": 12
										},
										{
											"begin": 16423,
											"end": 16451,
											"name": "MLOAD",
											"source": 12
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "40"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SHL",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SUB",
											"source": -1
										},
										{
											"begin": 16381,
											"end": 16451,
											"name": "AND",
											"source": 12
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "A0"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SHL",
											"source": -1
										},
										{
											"begin": 16381,
											"end": 16451,
											"name": "MUL",
											"source": 12
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "E0"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SHL",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SUB",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "NOT",
											"source": -1
										},
										{
											"begin": 16381,
											"end": 16451,
											"name": "SWAP1",
											"source": 12
										},
										{
											"begin": 16381,
											"end": 16451,
											"name": "SWAP3",
											"source": 12
										},
										{
											"begin": 16381,
											"end": 16451,
											"name": "AND",
											"source": 12
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "A0"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SHL",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SUB",
											"source": -1
										},
										{
											"begin": 16309,
											"end": 16359,
											"name": "SWAP1",
											"source": 12
										},
										{
											"begin": 16309,
											"end": 16359,
											"name": "SWAP4",
											"source": 12
										},
										{
											"begin": 16309,
											"end": 16359,
											"name": "AND",
											"source": 12
										},
										{
											"begin": 16381,
											"end": 16451,
											"name": "SWAP3",
											"source": 12
										},
										{
											"begin": 16381,
											"end": 16451,
											"name": "SWAP1",
											"source": 12
										},
										{
											"begin": 16381,
											"end": 16451,
											"name": "SWAP3",
											"source": 12
										},
										{
											"begin": 16381,
											"end": 16451,
											"name": "OR",
											"source": 12
										},
										{
											"begin": 16381,
											"end": 16451,
											"name": "OR",
											"source": 12
										},
										{
											"begin": 16381,
											"end": 16451,
											"name": "SWAP1",
											"source": 12
										},
										{
											"begin": 16381,
											"end": 16451,
											"name": "SSTORE",
											"source": 12
										},
										{
											"begin": 16254,
											"end": 16470,
											"name": "tag",
											"source": 12,
											"value": "504"
										},
										{
											"begin": 16254,
											"end": 16470,
											"name": "JUMPDEST",
											"source": 12
										},
										{
											"begin": 15533,
											"end": 16494,
											"name": "POP",
											"source": 12
										},
										{
											"begin": 16528,
											"end": 16535,
											"name": "DUP3",
											"source": 12
										},
										{
											"begin": 16524,
											"end": 16526,
											"name": "DUP5",
											"source": 12
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "A0"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SHL",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SUB",
											"source": -1
										},
										{
											"begin": 16509,
											"end": 16536,
											"name": "AND",
											"source": 12
										},
										{
											"begin": 16518,
											"end": 16522,
											"name": "DUP7",
											"source": 12
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "A0"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SHL",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SUB",
											"source": -1
										},
										{
											"begin": 16509,
											"end": 16536,
											"name": "AND",
											"source": 12
										},
										{
											"begin": 16509,
											"end": 16536,
											"name": "PUSH",
											"source": 12,
											"value": "DDF252AD1BE2C89B69C2B068FC378DAA952BA7F163C4A11628F55A4DF523B3EF"
										},
										{
											"begin": 16509,
											"end": 16536,
											"name": "PUSH",
											"source": 12,
											"value": "40"
										},
										{
											"begin": 16509,
											"end": 16536,
											"name": "MLOAD",
											"source": 12
										},
										{
											"begin": 16509,
											"end": 16536,
											"name": "PUSH",
											"source": 12,
											"value": "40"
										},
										{
											"begin": 16509,
											"end": 16536,
											"name": "MLOAD",
											"source": 12
										},
										{
											"begin": 16509,
											"end": 16536,
											"name": "DUP1",
											"source": 12
										},
										{
											"begin": 16509,
											"end": 16536,
											"name": "SWAP2",
											"source": 12
										},
										{
											"begin": 16509,
											"end": 16536,
											"name": "SUB",
											"source": 12
										},
										{
											"begin": 16509,
											"end": 16536,
											"name": "SWAP1",
											"source": 12
										},
										{
											"begin": 16509,
											"end": 16536,
											"name": "LOG4",
											"source": 12
										},
										{
											"begin": 16546,
											"end": 16588,
											"name": "tag",
											"source": 12,
											"value": "505"
										},
										{
											"begin": 16546,
											"end": 16588,
											"name": "JUMPDEST",
											"source": 12
										},
										{
											"begin": 14628,
											"end": 16595,
											"name": "POP",
											"source": 12
										},
										{
											"begin": 14628,
											"end": 16595,
											"name": "POP",
											"source": 12
										},
										{
											"begin": 14528,
											"end": 16595,
											"name": "POP",
											"source": 12
										},
										{
											"begin": 14528,
											"end": 16595,
											"name": "POP",
											"source": 12
										},
										{
											"begin": 14528,
											"end": 16595,
											"name": "POP",
											"source": 12
										},
										{
											"begin": 14528,
											"end": 16595,
											"name": "JUMP",
											"source": 12,
											"value": "[out]"
										},
										{
											"begin": 862,
											"end": 1046,
											"name": "tag",
											"source": 8,
											"value": "308"
										},
										{
											"begin": 862,
											"end": 1046,
											"name": "JUMPDEST",
											"source": 8
										},
										{
											"begin": 983,
											"end": 987,
											"name": "PUSH",
											"source": 8,
											"value": "0"
										},
										{
											"begin": 1035,
											"end": 1039,
											"name": "DUP3",
											"source": 8
										},
										{
											"begin": 1006,
											"end": 1031,
											"name": "PUSH [tag]",
											"source": 8,
											"value": "508"
										},
										{
											"begin": 1019,
											"end": 1024,
											"name": "DUP6",
											"source": 8
										},
										{
											"begin": 1026,
											"end": 1030,
											"name": "DUP5",
											"source": 8
										},
										{
											"begin": 1006,
											"end": 1018,
											"name": "PUSH [tag]",
											"source": 8,
											"value": "509"
										},
										{
											"begin": 1006,
											"end": 1031,
											"name": "JUMP",
											"source": 8,
											"value": "[in]"
										},
										{
											"begin": 1006,
											"end": 1031,
											"name": "tag",
											"source": 8,
											"value": "508"
										},
										{
											"begin": 1006,
											"end": 1031,
											"name": "JUMPDEST",
											"source": 8
										},
										{
											"begin": 1006,
											"end": 1039,
											"name": "EQ",
											"source": 8
										},
										{
											"begin": 1006,
											"end": 1039,
											"name": "SWAP5",
											"source": 8
										},
										{
											"begin": 862,
											"end": 1046,
											"name": "SWAP4",
											"source": 8
										},
										{
											"begin": -1,
											"end": -1,
											"name": "POP",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "POP",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "POP",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "POP",
											"source": -1
										},
										{
											"begin": 862,
											"end": 1046,
											"name": "JUMP",
											"source": 8,
											"value": "[out]"
										},
										{
											"begin": 11696,
											"end": 11798,
											"name": "tag",
											"source": 12,
											"value": "314"
										},
										{
											"begin": 11696,
											"end": 11798,
											"name": "JUMPDEST",
											"source": 12
										},
										{
											"begin": 11764,
											"end": 11791,
											"name": "PUSH [tag]",
											"source": 12,
											"value": "253"
										},
										{
											"begin": 11774,
											"end": 11776,
											"name": "DUP3",
											"source": 12
										},
										{
											"begin": 11778,
											"end": 11786,
											"name": "DUP3",
											"source": 12
										},
										{
											"begin": 11764,
											"end": 11791,
											"name": "PUSH",
											"source": 12,
											"value": "40"
										},
										{
											"begin": 11764,
											"end": 11791,
											"name": "MLOAD",
											"source": 12
										},
										{
											"begin": 11764,
											"end": 11791,
											"name": "DUP1",
											"source": 12
										},
										{
											"begin": 11764,
											"end": 11791,
											"name": "PUSH",
											"source": 12,
											"value": "20"
										},
										{
											"begin": 11764,
											"end": 11791,
											"name": "ADD",
											"source": 12
										},
										{
											"begin": 11764,
											"end": 11791,
											"name": "PUSH",
											"source": 12,
											"value": "40"
										},
										{
											"begin": 11764,
											"end": 11791,
											"name": "MSTORE",
											"source": 12
										},
										{
											"begin": 11764,
											"end": 11791,
											"name": "DUP1",
											"source": 12
										},
										{
											"begin": 11764,
											"end": 11791,
											"name": "PUSH",
											"source": 12,
											"value": "0"
										},
										{
											"begin": 11764,
											"end": 11791,
											"name": "DUP2",
											"source": 12
										},
										{
											"begin": 11764,
											"end": 11791,
											"name": "MSTORE",
											"source": 12
										},
										{
											"begin": 11764,
											"end": 11791,
											"name": "POP",
											"source": 12
										},
										{
											"begin": 11764,
											"end": 11773,
											"name": "PUSH [tag]",
											"source": 12,
											"value": "512"
										},
										{
											"begin": 11764,
											"end": 11791,
											"name": "JUMP",
											"source": 12,
											"value": "[in]"
										},
										{
											"begin": 6815,
											"end": 7898,
											"name": "tag",
											"source": 12,
											"value": "344"
										},
										{
											"begin": 6815,
											"end": 7898,
											"name": "JUMPDEST",
											"source": 12
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "40"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "DUP1",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "MLOAD",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "60"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "DUP2",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "ADD",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "DUP3",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "MSTORE",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "0"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "DUP1",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "DUP3",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "MSTORE",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "20"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "DUP3",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "ADD",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "DUP2",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SWAP1",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "MSTORE",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SWAP2",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "DUP2",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "ADD",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SWAP2",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SWAP1",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SWAP2",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "MSTORE",
											"source": -1
										},
										{
											"begin": 6924,
											"end": 6931,
											"name": "DUP2",
											"source": 12
										},
										{
											"begin": 7004,
											"end": 7017,
											"name": "PUSH",
											"source": 12,
											"value": "0"
										},
										{
											"begin": 7004,
											"end": 7017,
											"name": "SLOAD",
											"source": 12
										},
										{
											"begin": 6997,
											"end": 7001,
											"name": "DUP2",
											"source": 12
										},
										{
											"begin": 6997,
											"end": 7017,
											"name": "LT",
											"source": 12
										},
										{
											"begin": 6966,
											"end": 7834,
											"name": "ISZERO",
											"source": 12
										},
										{
											"begin": 6966,
											"end": 7834,
											"name": "PUSH [tag]",
											"source": 12,
											"value": "518"
										},
										{
											"begin": 6966,
											"end": 7834,
											"name": "JUMPI",
											"source": 12
										},
										{
											"begin": 7037,
											"end": 7068,
											"name": "PUSH",
											"source": 12,
											"value": "0"
										},
										{
											"begin": 7071,
											"end": 7088,
											"name": "DUP2",
											"source": 12
										},
										{
											"begin": 7071,
											"end": 7088,
											"name": "DUP2",
											"source": 12
										},
										{
											"begin": 7071,
											"end": 7088,
											"name": "MSTORE",
											"source": 12
										},
										{
											"begin": 7071,
											"end": 7082,
											"name": "PUSH",
											"source": 12,
											"value": "4"
										},
										{
											"begin": 7071,
											"end": 7088,
											"name": "PUSH",
											"source": 12,
											"value": "20"
										},
										{
											"begin": 7071,
											"end": 7088,
											"name": "SWAP1",
											"source": 12
										},
										{
											"begin": 7071,
											"end": 7088,
											"name": "DUP2",
											"source": 12
										},
										{
											"begin": 7071,
											"end": 7088,
											"name": "MSTORE",
											"source": 12
										},
										{
											"begin": 7071,
											"end": 7088,
											"name": "PUSH",
											"source": 12,
											"value": "40"
										},
										{
											"begin": 7071,
											"end": 7088,
											"name": "SWAP2",
											"source": 12
										},
										{
											"begin": 7071,
											"end": 7088,
											"name": "DUP3",
											"source": 12
										},
										{
											"begin": 7071,
											"end": 7088,
											"name": "SWAP1",
											"source": 12
										},
										{
											"begin": 7071,
											"end": 7088,
											"name": "KECCAK256",
											"source": 12
										},
										{
											"begin": 7037,
											"end": 7088,
											"name": "DUP3",
											"source": 12
										},
										{
											"begin": 7037,
											"end": 7088,
											"name": "MLOAD",
											"source": 12
										},
										{
											"begin": 7037,
											"end": 7088,
											"name": "PUSH",
											"source": 12,
											"value": "60"
										},
										{
											"begin": 7037,
											"end": 7088,
											"name": "DUP2",
											"source": 12
										},
										{
											"begin": 7037,
											"end": 7088,
											"name": "ADD",
											"source": 12
										},
										{
											"begin": 7037,
											"end": 7088,
											"name": "DUP5",
											"source": 12
										},
										{
											"begin": 7037,
											"end": 7088,
											"name": "MSTORE",
											"source": 12
										},
										{
											"begin": 7037,
											"end": 7088,
											"name": "SWAP1",
											"source": 12
										},
										{
											"begin": 7037,
											"end": 7088,
											"name": "SLOAD",
											"source": 12
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "A0"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SHL",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SUB",
											"source": -1
										},
										{
											"begin": 7037,
											"end": 7088,
											"name": "DUP2",
											"source": 12
										},
										{
											"begin": 7037,
											"end": 7088,
											"name": "AND",
											"source": 12
										},
										{
											"begin": 7037,
											"end": 7088,
											"name": "DUP3",
											"source": 12
										},
										{
											"begin": 7037,
											"end": 7088,
											"name": "MSTORE",
											"source": 12
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "A0"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SHL",
											"source": -1
										},
										{
											"begin": 7037,
											"end": 7088,
											"name": "DUP2",
											"source": 12
										},
										{
											"begin": 7037,
											"end": 7088,
											"name": "DIV",
											"source": 12
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "40"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SHL",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SUB",
											"source": -1
										},
										{
											"begin": 7037,
											"end": 7088,
											"name": "AND",
											"source": 12
										},
										{
											"begin": 7037,
											"end": 7088,
											"name": "SWAP3",
											"source": 12
										},
										{
											"begin": 7037,
											"end": 7088,
											"name": "DUP3",
											"source": 12
										},
										{
											"begin": 7037,
											"end": 7088,
											"name": "ADD",
											"source": 12
										},
										{
											"begin": 7037,
											"end": 7088,
											"name": "SWAP3",
											"source": 12
										},
										{
											"begin": 7037,
											"end": 7088,
											"name": "SWAP1",
											"source": 12
										},
										{
											"begin": 7037,
											"end": 7088,
											"name": "SWAP3",
											"source": 12
										},
										{
											"begin": 7037,
											"end": 7088,
											"name": "MSTORE",
											"source": 12
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "E0"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SHL",
											"source": -1
										},
										{
											"begin": 7037,
											"end": 7088,
											"name": "SWAP1",
											"source": 12
										},
										{
											"begin": 7037,
											"end": 7088,
											"name": "SWAP2",
											"source": 12
										},
										{
											"begin": 7037,
											"end": 7088,
											"name": "DIV",
											"source": 12
										},
										{
											"begin": 7037,
											"end": 7088,
											"name": "PUSH",
											"source": 12,
											"value": "FF"
										},
										{
											"begin": 7037,
											"end": 7088,
											"name": "AND",
											"source": 12
										},
										{
											"begin": 7037,
											"end": 7088,
											"name": "ISZERO",
											"source": 12
										},
										{
											"begin": 7037,
											"end": 7088,
											"name": "ISZERO",
											"source": 12
										},
										{
											"begin": 7037,
											"end": 7088,
											"name": "SWAP2",
											"source": 12
										},
										{
											"begin": 7037,
											"end": 7088,
											"name": "DUP2",
											"source": 12
										},
										{
											"begin": 7037,
											"end": 7088,
											"name": "ADD",
											"source": 12
										},
										{
											"begin": 7037,
											"end": 7088,
											"name": "DUP3",
											"source": 12
										},
										{
											"begin": 7037,
											"end": 7088,
											"name": "SWAP1",
											"source": 12
										},
										{
											"begin": 7037,
											"end": 7088,
											"name": "MSTORE",
											"source": 12
										},
										{
											"begin": 7037,
											"end": 7088,
											"name": "SWAP1",
											"source": 12
										},
										{
											"begin": 7106,
											"end": 7820,
											"name": "PUSH [tag]",
											"source": 12,
											"value": "522"
										},
										{
											"begin": 7106,
											"end": 7820,
											"name": "JUMPI",
											"source": 12
										},
										{
											"begin": 7155,
											"end": 7169,
											"name": "DUP1",
											"source": 12
										},
										{
											"begin": 7155,
											"end": 7169,
											"name": "MLOAD",
											"source": 12
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "A0"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SHL",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SUB",
											"source": -1
										},
										{
											"begin": 7155,
											"end": 7183,
											"name": "AND",
											"source": 12
										},
										{
											"begin": 7155,
											"end": 7183,
											"name": "ISZERO",
											"source": 12
										},
										{
											"begin": 7151,
											"end": 7250,
											"name": "PUSH [tag]",
											"source": 12,
											"value": "520"
										},
										{
											"begin": 7151,
											"end": 7250,
											"name": "JUMPI",
											"source": 12
										},
										{
											"begin": 7218,
											"end": 7227,
											"name": "SWAP4",
											"source": 12
										},
										{
											"begin": 6815,
											"end": 7898,
											"name": "SWAP3",
											"source": 12
										},
										{
											"begin": -1,
											"end": -1,
											"name": "POP",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "POP",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "POP",
											"source": -1
										},
										{
											"begin": 6815,
											"end": 7898,
											"name": "JUMP",
											"source": 12,
											"value": "[out]"
										},
										{
											"begin": 7151,
											"end": 7250,
											"name": "tag",
											"source": 12,
											"value": "520"
										},
										{
											"begin": 7151,
											"end": 7250,
											"name": "JUMPDEST",
											"source": 12
										},
										{
											"begin": -1,
											"end": -1,
											"name": "POP",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "0"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "NOT",
											"source": -1
										},
										{
											"begin": 7586,
											"end": 7592,
											"name": "ADD",
											"source": 12
										},
										{
											"begin": 7630,
											"end": 7647,
											"name": "PUSH",
											"source": 12,
											"value": "0"
										},
										{
											"begin": 7630,
											"end": 7647,
											"name": "DUP2",
											"source": 12
										},
										{
											"begin": 7630,
											"end": 7647,
											"name": "DUP2",
											"source": 12
										},
										{
											"begin": 7630,
											"end": 7647,
											"name": "MSTORE",
											"source": 12
										},
										{
											"begin": 7630,
											"end": 7641,
											"name": "PUSH",
											"source": 12,
											"value": "4"
										},
										{
											"begin": 7630,
											"end": 7647,
											"name": "PUSH",
											"source": 12,
											"value": "20"
										},
										{
											"begin": 7630,
											"end": 7647,
											"name": "SWAP1",
											"source": 12
										},
										{
											"begin": 7630,
											"end": 7647,
											"name": "DUP2",
											"source": 12
										},
										{
											"begin": 7630,
											"end": 7647,
											"name": "MSTORE",
											"source": 12
										},
										{
											"begin": 7630,
											"end": 7647,
											"name": "PUSH",
											"source": 12,
											"value": "40"
										},
										{
											"begin": 7630,
											"end": 7647,
											"name": "SWAP2",
											"source": 12
										},
										{
											"begin": 7630,
											"end": 7647,
											"name": "DUP3",
											"source": 12
										},
										{
											"begin": 7630,
											"end": 7647,
											"name": "SWAP1",
											"source": 12
										},
										{
											"begin": 7630,
											"end": 7647,
											"name": "KECCAK256",
											"source": 12
										},
										{
											"begin": 7618,
											"end": 7647,
											"name": "DUP3",
											"source": 12
										},
										{
											"begin": 7618,
											"end": 7647,
											"name": "MLOAD",
											"source": 12
										},
										{
											"begin": 7618,
											"end": 7647,
											"name": "PUSH",
											"source": 12,
											"value": "60"
										},
										{
											"begin": 7618,
											"end": 7647,
											"name": "DUP2",
											"source": 12
										},
										{
											"begin": 7618,
											"end": 7647,
											"name": "ADD",
											"source": 12
										},
										{
											"begin": 7618,
											"end": 7647,
											"name": "DUP5",
											"source": 12
										},
										{
											"begin": 7618,
											"end": 7647,
											"name": "MSTORE",
											"source": 12
										},
										{
											"begin": 7618,
											"end": 7647,
											"name": "SWAP1",
											"source": 12
										},
										{
											"begin": 7618,
											"end": 7647,
											"name": "SLOAD",
											"source": 12
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "A0"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SHL",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SUB",
											"source": -1
										},
										{
											"begin": 7618,
											"end": 7647,
											"name": "DUP2",
											"source": 12
										},
										{
											"begin": 7618,
											"end": 7647,
											"name": "AND",
											"source": 12
										},
										{
											"begin": 7618,
											"end": 7647,
											"name": "DUP1",
											"source": 12
										},
										{
											"begin": 7618,
											"end": 7647,
											"name": "DUP4",
											"source": 12
										},
										{
											"begin": 7618,
											"end": 7647,
											"name": "MSTORE",
											"source": 12
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "A0"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SHL",
											"source": -1
										},
										{
											"begin": 7618,
											"end": 7647,
											"name": "DUP3",
											"source": 12
										},
										{
											"begin": 7618,
											"end": 7647,
											"name": "DIV",
											"source": 12
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "40"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SHL",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SUB",
											"source": -1
										},
										{
											"begin": 7618,
											"end": 7647,
											"name": "AND",
											"source": 12
										},
										{
											"begin": 7618,
											"end": 7647,
											"name": "SWAP4",
											"source": 12
										},
										{
											"begin": 7618,
											"end": 7647,
											"name": "DUP4",
											"source": 12
										},
										{
											"begin": 7618,
											"end": 7647,
											"name": "ADD",
											"source": 12
										},
										{
											"begin": 7618,
											"end": 7647,
											"name": "SWAP4",
											"source": 12
										},
										{
											"begin": 7618,
											"end": 7647,
											"name": "SWAP1",
											"source": 12
										},
										{
											"begin": 7618,
											"end": 7647,
											"name": "SWAP4",
											"source": 12
										},
										{
											"begin": 7618,
											"end": 7647,
											"name": "MSTORE",
											"source": 12
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "E0"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SHL",
											"source": -1
										},
										{
											"begin": 7618,
											"end": 7647,
											"name": "SWAP1",
											"source": 12
										},
										{
											"begin": 7618,
											"end": 7647,
											"name": "DIV",
											"source": 12
										},
										{
											"begin": 7618,
											"end": 7647,
											"name": "PUSH",
											"source": 12,
											"value": "FF"
										},
										{
											"begin": 7618,
											"end": 7647,
											"name": "AND",
											"source": 12
										},
										{
											"begin": 7618,
											"end": 7647,
											"name": "ISZERO",
											"source": 12
										},
										{
											"begin": 7618,
											"end": 7647,
											"name": "ISZERO",
											"source": 12
										},
										{
											"begin": 7618,
											"end": 7647,
											"name": "SWAP3",
											"source": 12
										},
										{
											"begin": 7618,
											"end": 7647,
											"name": "DUP2",
											"source": 12
										},
										{
											"begin": 7618,
											"end": 7647,
											"name": "ADD",
											"source": 12
										},
										{
											"begin": 7618,
											"end": 7647,
											"name": "SWAP3",
											"source": 12
										},
										{
											"begin": 7618,
											"end": 7647,
											"name": "SWAP1",
											"source": 12
										},
										{
											"begin": 7618,
											"end": 7647,
											"name": "SWAP3",
											"source": 12
										},
										{
											"begin": 7618,
											"end": 7647,
											"name": "MSTORE",
											"source": 12
										},
										{
											"begin": 7677,
											"end": 7705,
											"name": "ISZERO",
											"source": 12
										},
										{
											"begin": 7673,
											"end": 7780,
											"name": "PUSH [tag]",
											"source": 12,
											"value": "523"
										},
										{
											"begin": 7673,
											"end": 7780,
											"name": "JUMPI",
											"source": 12
										},
										{
											"begin": 7744,
											"end": 7753,
											"name": "SWAP4",
											"source": 12
										},
										{
											"begin": 6815,
											"end": 7898,
											"name": "SWAP3",
											"source": 12
										},
										{
											"begin": -1,
											"end": -1,
											"name": "POP",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "POP",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "POP",
											"source": -1
										},
										{
											"begin": 6815,
											"end": 7898,
											"name": "JUMP",
											"source": 12,
											"value": "[out]"
										},
										{
											"begin": 7673,
											"end": 7780,
											"name": "tag",
											"source": 12,
											"value": "523"
										},
										{
											"begin": 7673,
											"end": 7780,
											"name": "JUMPDEST",
											"source": 12
										},
										{
											"begin": 7547,
											"end": 7802,
											"name": "PUSH [tag]",
											"source": 12,
											"value": "520"
										},
										{
											"begin": 7547,
											"end": 7802,
											"name": "JUMP",
											"source": 12
										},
										{
											"begin": 7547,
											"end": 7802,
											"name": "tag",
											"source": 12,
											"value": "522"
										},
										{
											"begin": 7547,
											"end": 7802,
											"name": "JUMPDEST",
											"source": 12
										},
										{
											"begin": 7019,
											"end": 7834,
											"name": "POP",
											"source": 12
										},
										{
											"begin": 6966,
											"end": 7834,
											"name": "tag",
											"source": 12,
											"value": "518"
										},
										{
											"begin": 6966,
											"end": 7834,
											"name": "JUMPDEST",
											"source": 12
										},
										{
											"begin": 7860,
											"end": 7891,
											"name": "PUSH",
											"source": 12,
											"value": "40"
										},
										{
											"begin": 7860,
											"end": 7891,
											"name": "MLOAD",
											"source": 12
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "6F96CDA1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "E1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SHL",
											"source": -1
										},
										{
											"begin": 7860,
											"end": 7891,
											"name": "DUP2",
											"source": 12
										},
										{
											"begin": 7860,
											"end": 7891,
											"name": "MSTORE",
											"source": 12
										},
										{
											"begin": 7860,
											"end": 7891,
											"name": "PUSH",
											"source": 12,
											"value": "4"
										},
										{
											"begin": 7860,
											"end": 7891,
											"name": "ADD",
											"source": 12
										},
										{
											"begin": 7860,
											"end": 7891,
											"name": "PUSH",
											"source": 12,
											"value": "40"
										},
										{
											"begin": 7860,
											"end": 7891,
											"name": "MLOAD",
											"source": 12
										},
										{
											"begin": 7860,
											"end": 7891,
											"name": "DUP1",
											"source": 12
										},
										{
											"begin": 7860,
											"end": 7891,
											"name": "SWAP2",
											"source": 12
										},
										{
											"begin": 7860,
											"end": 7891,
											"name": "SUB",
											"source": 12
										},
										{
											"begin": 7860,
											"end": 7891,
											"name": "SWAP1",
											"source": 12
										},
										{
											"begin": 7860,
											"end": 7891,
											"name": "REVERT",
											"source": 12
										},
										{
											"begin": 2270,
											"end": 2457,
											"name": "tag",
											"source": 0,
											"value": "354"
										},
										{
											"begin": 2270,
											"end": 2457,
											"name": "JUMPDEST",
											"source": 0
										},
										{
											"begin": 2362,
											"end": 2368,
											"name": "PUSH",
											"source": 0,
											"value": "8"
										},
										{
											"begin": 2362,
											"end": 2368,
											"name": "DUP1",
											"source": 0
										},
										{
											"begin": 2362,
											"end": 2368,
											"name": "SLOAD",
											"source": 0
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "A0"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SHL",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SUB",
											"source": -1
										},
										{
											"begin": 2378,
											"end": 2395,
											"name": "DUP4",
											"source": 0
										},
										{
											"begin": 2378,
											"end": 2395,
											"name": "DUP2",
											"source": 0
										},
										{
											"begin": 2378,
											"end": 2395,
											"name": "AND",
											"source": 0
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "A0"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SHL",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SUB",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "NOT",
											"source": -1
										},
										{
											"begin": 2378,
											"end": 2395,
											"name": "DUP4",
											"source": 0
										},
										{
											"begin": 2378,
											"end": 2395,
											"name": "AND",
											"source": 0
										},
										{
											"begin": 2378,
											"end": 2395,
											"name": "DUP2",
											"source": 0
										},
										{
											"begin": 2378,
											"end": 2395,
											"name": "OR",
											"source": 0
										},
										{
											"begin": 2378,
											"end": 2395,
											"name": "SWAP1",
											"source": 0
										},
										{
											"begin": 2378,
											"end": 2395,
											"name": "SWAP4",
											"source": 0
										},
										{
											"begin": 2378,
											"end": 2395,
											"name": "SSTORE",
											"source": 0
										},
										{
											"begin": 2410,
											"end": 2450,
											"name": "PUSH",
											"source": 0,
											"value": "40"
										},
										{
											"begin": 2410,
											"end": 2450,
											"name": "MLOAD",
											"source": 0
										},
										{
											"begin": 2362,
											"end": 2368,
											"name": "SWAP2",
											"source": 0
										},
										{
											"begin": 2362,
											"end": 2368,
											"name": "AND",
											"source": 0
										},
										{
											"begin": 2362,
											"end": 2368,
											"name": "SWAP2",
											"source": 0
										},
										{
											"begin": 2378,
											"end": 2395,
											"name": "SWAP1",
											"source": 0
										},
										{
											"begin": 2362,
											"end": 2368,
											"name": "DUP3",
											"source": 0
										},
										{
											"begin": 2362,
											"end": 2368,
											"name": "SWAP1",
											"source": 0
										},
										{
											"begin": 2410,
											"end": 2450,
											"name": "PUSH",
											"source": 0,
											"value": "8BE0079C531659141344CD1FD0A4F28419497F9722A3DAAFE3B4186F6B6457E0"
										},
										{
											"begin": 2410,
											"end": 2450,
											"name": "SWAP1",
											"source": 0
										},
										{
											"begin": 2343,
											"end": 2359,
											"name": "PUSH",
											"source": 0,
											"value": "0"
										},
										{
											"begin": 2343,
											"end": 2359,
											"name": "SWAP1",
											"source": 0
										},
										{
											"begin": 2410,
											"end": 2450,
											"name": "LOG3",
											"source": 0
										},
										{
											"begin": 2333,
											"end": 2457,
											"name": "POP",
											"source": 0
										},
										{
											"begin": 2270,
											"end": 2457,
											"name": "POP",
											"source": 0
										},
										{
											"begin": 2270,
											"end": 2457,
											"name": "JUMP",
											"source": 0,
											"value": "[out]"
										},
										{
											"begin": 19592,
											"end": 20242,
											"name": "tag",
											"source": 12,
											"value": "426"
										},
										{
											"begin": 19592,
											"end": 20242,
											"name": "JUMPDEST",
											"source": 12
										},
										{
											"begin": 19770,
											"end": 19842,
											"name": "PUSH",
											"source": 12,
											"value": "40"
										},
										{
											"begin": 19770,
											"end": 19842,
											"name": "MLOAD",
											"source": 12
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "A85BD01"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "E1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SHL",
											"source": -1
										},
										{
											"begin": 19770,
											"end": 19842,
											"name": "DUP2",
											"source": 12
										},
										{
											"begin": 19770,
											"end": 19842,
											"name": "MSTORE",
											"source": 12
										},
										{
											"begin": 19750,
											"end": 19754,
											"name": "PUSH",
											"source": 12,
											"value": "0"
										},
										{
											"begin": 19750,
											"end": 19754,
											"name": "SWAP1",
											"source": 12
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "A0"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SHL",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SUB",
											"source": -1
										},
										{
											"begin": 19770,
											"end": 19806,
											"name": "DUP6",
											"source": 12
										},
										{
											"begin": 19770,
											"end": 19806,
											"name": "AND",
											"source": 12
										},
										{
											"begin": 19770,
											"end": 19806,
											"name": "SWAP1",
											"source": 12
										},
										{
											"begin": 19770,
											"end": 19806,
											"name": "PUSH",
											"source": 12,
											"value": "150B7A02"
										},
										{
											"begin": 19770,
											"end": 19806,
											"name": "SWAP1",
											"source": 12
										},
										{
											"begin": 19770,
											"end": 19842,
											"name": "PUSH [tag]",
											"source": 12,
											"value": "528"
										},
										{
											"begin": 19770,
											"end": 19842,
											"name": "SWAP1",
											"source": 12
										},
										{
											"begin": 719,
											"end": 729,
											"name": "CALLER",
											"source": 6
										},
										{
											"begin": 719,
											"end": 729,
											"name": "SWAP1",
											"source": 6
										},
										{
											"begin": 19821,
											"end": 19825,
											"name": "DUP10",
											"source": 12
										},
										{
											"begin": 19821,
											"end": 19825,
											"name": "SWAP1",
											"source": 12
										},
										{
											"begin": 19827,
											"end": 19834,
											"name": "DUP9",
											"source": 12
										},
										{
											"begin": 19827,
											"end": 19834,
											"name": "SWAP1",
											"source": 12
										},
										{
											"begin": 19836,
											"end": 19841,
											"name": "DUP9",
											"source": 12
										},
										{
											"begin": 19836,
											"end": 19841,
											"name": "SWAP1",
											"source": 12
										},
										{
											"begin": 19770,
											"end": 19842,
											"name": "PUSH",
											"source": 12,
											"value": "4"
										},
										{
											"begin": 19770,
											"end": 19842,
											"name": "ADD",
											"source": 12
										},
										{
											"begin": 19770,
											"end": 19842,
											"name": "PUSH [tag]",
											"source": 12,
											"value": "529"
										},
										{
											"begin": 19770,
											"end": 19842,
											"name": "JUMP",
											"source": 12,
											"value": "[in]"
										},
										{
											"begin": 19770,
											"end": 19842,
											"name": "tag",
											"source": 12,
											"value": "528"
										},
										{
											"begin": 19770,
											"end": 19842,
											"name": "JUMPDEST",
											"source": 12
										},
										{
											"begin": 19770,
											"end": 19842,
											"name": "PUSH",
											"source": 12,
											"value": "20"
										},
										{
											"begin": 19770,
											"end": 19842,
											"name": "PUSH",
											"source": 12,
											"value": "40"
										},
										{
											"begin": 19770,
											"end": 19842,
											"name": "MLOAD",
											"source": 12
										},
										{
											"begin": 19770,
											"end": 19842,
											"name": "DUP1",
											"source": 12
										},
										{
											"begin": 19770,
											"end": 19842,
											"name": "DUP4",
											"source": 12
										},
										{
											"begin": 19770,
											"end": 19842,
											"name": "SUB",
											"source": 12
										},
										{
											"begin": 19770,
											"end": 19842,
											"name": "DUP2",
											"source": 12
										},
										{
											"begin": 19770,
											"end": 19842,
											"name": "PUSH",
											"source": 12,
											"value": "0"
										},
										{
											"begin": 19770,
											"end": 19842,
											"name": "DUP8",
											"source": 12
										},
										{
											"begin": 19770,
											"end": 19842,
											"name": "DUP1",
											"source": 12
										},
										{
											"begin": 19770,
											"end": 19842,
											"name": "EXTCODESIZE",
											"source": 12
										},
										{
											"begin": 19770,
											"end": 19842,
											"name": "ISZERO",
											"source": 12
										},
										{
											"begin": 19770,
											"end": 19842,
											"name": "DUP1",
											"source": 12
										},
										{
											"begin": 19770,
											"end": 19842,
											"name": "ISZERO",
											"source": 12
										},
										{
											"begin": 19770,
											"end": 19842,
											"name": "PUSH [tag]",
											"source": 12,
											"value": "530"
										},
										{
											"begin": 19770,
											"end": 19842,
											"name": "JUMPI",
											"source": 12
										},
										{
											"begin": 19770,
											"end": 19842,
											"name": "PUSH",
											"source": 12,
											"value": "0"
										},
										{
											"begin": 19770,
											"end": 19842,
											"name": "DUP1",
											"source": 12
										},
										{
											"begin": 19770,
											"end": 19842,
											"name": "REVERT",
											"source": 12
										},
										{
											"begin": 19770,
											"end": 19842,
											"name": "tag",
											"source": 12,
											"value": "530"
										},
										{
											"begin": 19770,
											"end": 19842,
											"name": "JUMPDEST",
											"source": 12
										},
										{
											"begin": 19770,
											"end": 19842,
											"name": "POP",
											"source": 12
										},
										{
											"begin": 19770,
											"end": 19842,
											"name": "GAS",
											"source": 12
										},
										{
											"begin": 19770,
											"end": 19842,
											"name": "CALL",
											"source": 12
										},
										{
											"begin": 19770,
											"end": 19842,
											"name": "SWAP3",
											"source": 12
										},
										{
											"begin": 19770,
											"end": 19842,
											"name": "POP",
											"source": 12
										},
										{
											"begin": 19770,
											"end": 19842,
											"name": "POP",
											"source": 12
										},
										{
											"begin": 19770,
											"end": 19842,
											"name": "POP",
											"source": 12
										},
										{
											"begin": 19770,
											"end": 19842,
											"name": "DUP1",
											"source": 12
										},
										{
											"begin": 19770,
											"end": 19842,
											"name": "ISZERO",
											"source": 12
										},
										{
											"begin": 19770,
											"end": 19842,
											"name": "PUSH [tag]",
											"source": 12,
											"value": "531"
										},
										{
											"begin": 19770,
											"end": 19842,
											"name": "JUMPI",
											"source": 12
										},
										{
											"begin": -1,
											"end": -1,
											"name": "POP",
											"source": -1
										},
										{
											"begin": 19770,
											"end": 19842,
											"name": "PUSH",
											"source": 12,
											"value": "40"
										},
										{
											"begin": 19770,
											"end": 19842,
											"name": "DUP1",
											"source": 12
										},
										{
											"begin": 19770,
											"end": 19842,
											"name": "MLOAD",
											"source": 12
										},
										{
											"begin": 19770,
											"end": 19842,
											"name": "PUSH",
											"source": 12,
											"value": "1F"
										},
										{
											"begin": 19770,
											"end": 19842,
											"name": "RETURNDATASIZE",
											"source": 12
										},
										{
											"begin": 19770,
											"end": 19842,
											"name": "SWAP1",
											"source": 12
										},
										{
											"begin": 19770,
											"end": 19842,
											"name": "DUP2",
											"source": 12
										},
										{
											"begin": 19770,
											"end": 19842,
											"name": "ADD",
											"source": 12
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1F"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "NOT",
											"source": -1
										},
										{
											"begin": 19770,
											"end": 19842,
											"name": "AND",
											"source": 12
										},
										{
											"begin": 19770,
											"end": 19842,
											"name": "DUP3",
											"source": 12
										},
										{
											"begin": 19770,
											"end": 19842,
											"name": "ADD",
											"source": 12
										},
										{
											"begin": 19770,
											"end": 19842,
											"name": "SWAP1",
											"source": 12
										},
										{
											"begin": 19770,
											"end": 19842,
											"name": "SWAP3",
											"source": 12
										},
										{
											"begin": 19770,
											"end": 19842,
											"name": "MSTORE",
											"source": 12
										},
										{
											"begin": 19770,
											"end": 19842,
											"name": "PUSH [tag]",
											"source": 12,
											"value": "532"
										},
										{
											"begin": 19770,
											"end": 19842,
											"name": "SWAP2",
											"source": 12
										},
										{
											"begin": 19770,
											"end": 19842,
											"name": "DUP2",
											"source": 12
										},
										{
											"begin": 19770,
											"end": 19842,
											"name": "ADD",
											"source": 12
										},
										{
											"begin": 19770,
											"end": 19842,
											"name": "SWAP1",
											"source": 12
										},
										{
											"begin": 19770,
											"end": 19842,
											"name": "PUSH [tag]",
											"source": 12,
											"value": "533"
										},
										{
											"begin": 19770,
											"end": 19842,
											"name": "JUMP",
											"source": 12,
											"value": "[in]"
										},
										{
											"begin": 19770,
											"end": 19842,
											"name": "tag",
											"source": 12,
											"value": "532"
										},
										{
											"begin": 19770,
											"end": 19842,
											"name": "JUMPDEST",
											"source": 12
										},
										{
											"begin": 19770,
											"end": 19842,
											"name": "PUSH",
											"source": 12,
											"value": "1"
										},
										{
											"begin": 19770,
											"end": 19842,
											"name": "tag",
											"source": 12,
											"value": "531"
										},
										{
											"begin": 19770,
											"end": 19842,
											"name": "JUMPDEST",
											"source": 12
										},
										{
											"begin": 19766,
											"end": 20236,
											"name": "PUSH [tag]",
											"source": 12,
											"value": "534"
										},
										{
											"begin": 19766,
											"end": 20236,
											"name": "JUMPI",
											"source": 12
										},
										{
											"begin": 19766,
											"end": 20236,
											"name": "RETURNDATASIZE",
											"source": 12
										},
										{
											"begin": 19766,
											"end": 20236,
											"name": "DUP1",
											"source": 12
										},
										{
											"begin": 19766,
											"end": 20236,
											"name": "DUP1",
											"source": 12
										},
										{
											"begin": 19766,
											"end": 20236,
											"name": "ISZERO",
											"source": 12
										},
										{
											"begin": 19766,
											"end": 20236,
											"name": "PUSH [tag]",
											"source": 12,
											"value": "539"
										},
										{
											"begin": 19766,
											"end": 20236,
											"name": "JUMPI",
											"source": 12
										},
										{
											"begin": 19766,
											"end": 20236,
											"name": "PUSH",
											"source": 12,
											"value": "40"
										},
										{
											"begin": 19766,
											"end": 20236,
											"name": "MLOAD",
											"source": 12
										},
										{
											"begin": 19766,
											"end": 20236,
											"name": "SWAP2",
											"source": 12
										},
										{
											"begin": 19766,
											"end": 20236,
											"name": "POP",
											"source": 12
										},
										{
											"begin": 19766,
											"end": 20236,
											"name": "PUSH",
											"source": 12,
											"value": "1F"
										},
										{
											"begin": 19766,
											"end": 20236,
											"name": "NOT",
											"source": 12
										},
										{
											"begin": 19766,
											"end": 20236,
											"name": "PUSH",
											"source": 12,
											"value": "3F"
										},
										{
											"begin": 19766,
											"end": 20236,
											"name": "RETURNDATASIZE",
											"source": 12
										},
										{
											"begin": 19766,
											"end": 20236,
											"name": "ADD",
											"source": 12
										},
										{
											"begin": 19766,
											"end": 20236,
											"name": "AND",
											"source": 12
										},
										{
											"begin": 19766,
											"end": 20236,
											"name": "DUP3",
											"source": 12
										},
										{
											"begin": 19766,
											"end": 20236,
											"name": "ADD",
											"source": 12
										},
										{
											"begin": 19766,
											"end": 20236,
											"name": "PUSH",
											"source": 12,
											"value": "40"
										},
										{
											"begin": 19766,
											"end": 20236,
											"name": "MSTORE",
											"source": 12
										},
										{
											"begin": 19766,
											"end": 20236,
											"name": "RETURNDATASIZE",
											"source": 12
										},
										{
											"begin": 19766,
											"end": 20236,
											"name": "DUP3",
											"source": 12
										},
										{
											"begin": 19766,
											"end": 20236,
											"name": "MSTORE",
											"source": 12
										},
										{
											"begin": 19766,
											"end": 20236,
											"name": "RETURNDATASIZE",
											"source": 12
										},
										{
											"begin": 19766,
											"end": 20236,
											"name": "PUSH",
											"source": 12,
											"value": "0"
										},
										{
											"begin": 19766,
											"end": 20236,
											"name": "PUSH",
											"source": 12,
											"value": "20"
										},
										{
											"begin": 19766,
											"end": 20236,
											"name": "DUP5",
											"source": 12
										},
										{
											"begin": 19766,
											"end": 20236,
											"name": "ADD",
											"source": 12
										},
										{
											"begin": 19766,
											"end": 20236,
											"name": "RETURNDATACOPY",
											"source": 12
										},
										{
											"begin": 19766,
											"end": 20236,
											"name": "PUSH [tag]",
											"source": 12,
											"value": "538"
										},
										{
											"begin": 19766,
											"end": 20236,
											"name": "JUMP",
											"source": 12
										},
										{
											"begin": 19766,
											"end": 20236,
											"name": "tag",
											"source": 12,
											"value": "539"
										},
										{
											"begin": 19766,
											"end": 20236,
											"name": "JUMPDEST",
											"source": 12
										},
										{
											"begin": 19766,
											"end": 20236,
											"name": "PUSH",
											"source": 12,
											"value": "60"
										},
										{
											"begin": 19766,
											"end": 20236,
											"name": "SWAP2",
											"source": 12
										},
										{
											"begin": 19766,
											"end": 20236,
											"name": "POP",
											"source": 12
										},
										{
											"begin": 19766,
											"end": 20236,
											"name": "tag",
											"source": 12,
											"value": "538"
										},
										{
											"begin": 19766,
											"end": 20236,
											"name": "JUMPDEST",
											"source": 12
										},
										{
											"begin": -1,
											"end": -1,
											"name": "POP",
											"source": -1
										},
										{
											"begin": 20001,
											"end": 20014,
											"name": "DUP1",
											"source": 12
										},
										{
											"begin": 20001,
											"end": 20014,
											"name": "MLOAD",
											"source": 12
										},
										{
											"begin": 19997,
											"end": 20226,
											"name": "PUSH [tag]",
											"source": 12,
											"value": "540"
										},
										{
											"begin": 19997,
											"end": 20226,
											"name": "JUMPI",
											"source": 12
										},
										{
											"begin": 20046,
											"end": 20086,
											"name": "PUSH",
											"source": 12,
											"value": "40"
										},
										{
											"begin": 20046,
											"end": 20086,
											"name": "MLOAD",
											"source": 12
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "68D2BF6B"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "E1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SHL",
											"source": -1
										},
										{
											"begin": 20046,
											"end": 20086,
											"name": "DUP2",
											"source": 12
										},
										{
											"begin": 20046,
											"end": 20086,
											"name": "MSTORE",
											"source": 12
										},
										{
											"begin": 20046,
											"end": 20086,
											"name": "PUSH",
											"source": 12,
											"value": "4"
										},
										{
											"begin": 20046,
											"end": 20086,
											"name": "ADD",
											"source": 12
										},
										{
											"begin": 20046,
											"end": 20086,
											"name": "PUSH",
											"source": 12,
											"value": "40"
										},
										{
											"begin": 20046,
											"end": 20086,
											"name": "MLOAD",
											"source": 12
										},
										{
											"begin": 20046,
											"end": 20086,
											"name": "DUP1",
											"source": 12
										},
										{
											"begin": 20046,
											"end": 20086,
											"name": "SWAP2",
											"source": 12
										},
										{
											"begin": 20046,
											"end": 20086,
											"name": "SUB",
											"source": 12
										},
										{
											"begin": 20046,
											"end": 20086,
											"name": "SWAP1",
											"source": 12
										},
										{
											"begin": 20046,
											"end": 20086,
											"name": "REVERT",
											"source": 12
										},
										{
											"begin": 19997,
											"end": 20226,
											"name": "tag",
											"source": 12,
											"value": "540"
										},
										{
											"begin": 19997,
											"end": 20226,
											"name": "JUMPDEST",
											"source": 12
										},
										{
											"begin": 20186,
											"end": 20192,
											"name": "DUP1",
											"source": 12
										},
										{
											"begin": 20180,
											"end": 20193,
											"name": "MLOAD",
											"source": 12
										},
										{
											"begin": 20171,
											"end": 20177,
											"name": "DUP2",
											"source": 12
										},
										{
											"begin": 20167,
											"end": 20169,
											"name": "PUSH",
											"source": 12,
											"value": "20"
										},
										{
											"begin": 20163,
											"end": 20178,
											"name": "ADD",
											"source": 12
										},
										{
											"begin": 20156,
											"end": 20194,
											"name": "REVERT",
											"source": 12
										},
										{
											"begin": 19766,
											"end": 20236,
											"name": "tag",
											"source": 12,
											"value": "534"
										},
										{
											"begin": 19766,
											"end": 20236,
											"name": "JUMPDEST",
											"source": 12
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "E0"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SHL",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SUB",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "NOT",
											"source": -1
										},
										{
											"begin": 19888,
											"end": 19943,
											"name": "AND",
											"source": 12
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "A85BD01"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "E1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SHL",
											"source": -1
										},
										{
											"begin": 19888,
											"end": 19943,
											"name": "EQ",
											"source": 12
										},
										{
											"begin": 19888,
											"end": 19943,
											"name": "SWAP1",
											"source": 12
										},
										{
											"begin": -1,
											"end": -1,
											"name": "POP",
											"source": -1
										},
										{
											"begin": 19766,
											"end": 20236,
											"name": "tag",
											"source": 12,
											"value": "542"
										},
										{
											"begin": 19766,
											"end": 20236,
											"name": "JUMPDEST",
											"source": 12
										},
										{
											"begin": 19592,
											"end": 20242,
											"name": "SWAP5",
											"source": 12
										},
										{
											"begin": 19592,
											"end": 20242,
											"name": "SWAP4",
											"source": 12
										},
										{
											"begin": 19592,
											"end": 20242,
											"name": "POP",
											"source": 12
										},
										{
											"begin": 19592,
											"end": 20242,
											"name": "POP",
											"source": 12
										},
										{
											"begin": 19592,
											"end": 20242,
											"name": "POP",
											"source": 12
										},
										{
											"begin": 19592,
											"end": 20242,
											"name": "POP",
											"source": 12
										},
										{
											"begin": 19592,
											"end": 20242,
											"name": "JUMP",
											"source": 12,
											"value": "[out]"
										},
										{
											"begin": 328,
											"end": 1031,
											"name": "tag",
											"source": 7,
											"value": "460"
										},
										{
											"begin": 328,
											"end": 1031,
											"name": "JUMPDEST",
											"source": 7
										},
										{
											"begin": 384,
											"end": 397,
											"name": "PUSH",
											"source": 7,
											"value": "60"
										},
										{
											"begin": 601,
											"end": 611,
											"name": "DUP2",
											"source": 7
										},
										{
											"begin": 597,
											"end": 648,
											"name": "PUSH [tag]",
											"source": 7,
											"value": "544"
										},
										{
											"begin": 597,
											"end": 648,
											"name": "JUMPI",
											"source": 7
										},
										{
											"begin": -1,
											"end": -1,
											"name": "POP",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "POP",
											"source": -1
										},
										{
											"begin": 627,
											"end": 637,
											"name": "PUSH",
											"source": 7,
											"value": "40"
										},
										{
											"begin": 627,
											"end": 637,
											"name": "DUP1",
											"source": 7
										},
										{
											"begin": 627,
											"end": 637,
											"name": "MLOAD",
											"source": 7
										},
										{
											"begin": 627,
											"end": 637,
											"name": "DUP1",
											"source": 7
										},
										{
											"begin": 627,
											"end": 637,
											"name": "DUP3",
											"source": 7
										},
										{
											"begin": 627,
											"end": 637,
											"name": "ADD",
											"source": 7
										},
										{
											"begin": 627,
											"end": 637,
											"name": "SWAP1",
											"source": 7
										},
										{
											"begin": 627,
											"end": 637,
											"name": "SWAP2",
											"source": 7
										},
										{
											"begin": 627,
											"end": 637,
											"name": "MSTORE",
											"source": 7
										},
										{
											"begin": 627,
											"end": 637,
											"name": "PUSH",
											"source": 7,
											"value": "1"
										},
										{
											"begin": 627,
											"end": 637,
											"name": "DUP2",
											"source": 7
										},
										{
											"begin": 627,
											"end": 637,
											"name": "MSTORE",
											"source": 7
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "3"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "FC"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SHL",
											"source": -1
										},
										{
											"begin": 627,
											"end": 637,
											"name": "PUSH",
											"source": 7,
											"value": "20"
										},
										{
											"begin": 627,
											"end": 637,
											"name": "DUP3",
											"source": 7
										},
										{
											"begin": 627,
											"end": 637,
											"name": "ADD",
											"source": 7
										},
										{
											"begin": 627,
											"end": 637,
											"name": "MSTORE",
											"source": 7
										},
										{
											"begin": 627,
											"end": 637,
											"name": "SWAP1",
											"source": 7
										},
										{
											"begin": 328,
											"end": 1031,
											"name": "JUMP",
											"source": 7,
											"value": "[out]"
										},
										{
											"begin": 597,
											"end": 648,
											"name": "tag",
											"source": 7,
											"value": "544"
										},
										{
											"begin": 597,
											"end": 648,
											"name": "JUMPDEST",
											"source": 7
										},
										{
											"begin": 672,
											"end": 677,
											"name": "DUP2",
											"source": 7
										},
										{
											"begin": 657,
											"end": 669,
											"name": "PUSH",
											"source": 7,
											"value": "0"
										},
										{
											"begin": 711,
											"end": 786,
											"name": "tag",
											"source": 7,
											"value": "545"
										},
										{
											"begin": 711,
											"end": 786,
											"name": "JUMPDEST",
											"source": 7
										},
										{
											"begin": 718,
											"end": 727,
											"name": "DUP2",
											"source": 7
										},
										{
											"begin": 718,
											"end": 727,
											"name": "ISZERO",
											"source": 7
										},
										{
											"begin": 711,
											"end": 786,
											"name": "PUSH [tag]",
											"source": 7,
											"value": "546"
										},
										{
											"begin": 711,
											"end": 786,
											"name": "JUMPI",
											"source": 7
										},
										{
											"begin": 743,
											"end": 751,
											"name": "DUP1",
											"source": 7
										},
										{
											"begin": 743,
											"end": 751,
											"name": "PUSH [tag]",
											"source": 7,
											"value": "547"
										},
										{
											"begin": 743,
											"end": 751,
											"name": "DUP2",
											"source": 7
										},
										{
											"begin": 743,
											"end": 751,
											"name": "PUSH [tag]",
											"source": 7,
											"value": "371"
										},
										{
											"begin": 743,
											"end": 751,
											"name": "JUMP",
											"source": 7,
											"value": "[in]"
										},
										{
											"begin": 743,
											"end": 751,
											"name": "tag",
											"source": 7,
											"value": "547"
										},
										{
											"begin": 743,
											"end": 751,
											"name": "JUMPDEST",
											"source": 7
										},
										{
											"begin": 743,
											"end": 751,
											"name": "SWAP2",
											"source": 7
										},
										{
											"begin": -1,
											"end": -1,
											"name": "POP",
											"source": -1
										},
										{
											"begin": 765,
											"end": 775,
											"name": "PUSH [tag]",
											"source": 7,
											"value": "548"
										},
										{
											"begin": 765,
											"end": 775,
											"name": "SWAP1",
											"source": 7
										},
										{
											"begin": -1,
											"end": -1,
											"name": "POP",
											"source": -1
										},
										{
											"begin": 773,
											"end": 775,
											"name": "PUSH",
											"source": 7,
											"value": "A"
										},
										{
											"begin": 765,
											"end": 775,
											"name": "DUP4",
											"source": 7
										},
										{
											"begin": 765,
											"end": 775,
											"name": "PUSH [tag]",
											"source": 7,
											"value": "323"
										},
										{
											"begin": 765,
											"end": 775,
											"name": "JUMP",
											"source": 7,
											"value": "[in]"
										},
										{
											"begin": 765,
											"end": 775,
											"name": "tag",
											"source": 7,
											"value": "548"
										},
										{
											"begin": 765,
											"end": 775,
											"name": "JUMPDEST",
											"source": 7
										},
										{
											"begin": 765,
											"end": 775,
											"name": "SWAP2",
											"source": 7
										},
										{
											"begin": 765,
											"end": 775,
											"name": "POP",
											"source": 7
										},
										{
											"begin": 711,
											"end": 786,
											"name": "PUSH [tag]",
											"source": 7,
											"value": "545"
										},
										{
											"begin": 711,
											"end": 786,
											"name": "JUMP",
											"source": 7
										},
										{
											"begin": 711,
											"end": 786,
											"name": "tag",
											"source": 7,
											"value": "546"
										},
										{
											"begin": 711,
											"end": 786,
											"name": "JUMPDEST",
											"source": 7
										},
										{
											"begin": 795,
											"end": 814,
											"name": "PUSH",
											"source": 7,
											"value": "0"
										},
										{
											"begin": 827,
											"end": 833,
											"name": "DUP2",
											"source": 7
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "40"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SHL",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SUB",
											"source": -1
										},
										{
											"begin": 817,
											"end": 834,
											"name": "DUP2",
											"source": 7
										},
										{
											"begin": 817,
											"end": 834,
											"name": "GT",
											"source": 7
										},
										{
											"begin": 817,
											"end": 834,
											"name": "ISZERO",
											"source": 7
										},
										{
											"begin": 817,
											"end": 834,
											"name": "PUSH [tag]",
											"source": 7,
											"value": "550"
										},
										{
											"begin": 817,
											"end": 834,
											"name": "JUMPI",
											"source": 7
										},
										{
											"begin": 817,
											"end": 834,
											"name": "PUSH [tag]",
											"source": 7,
											"value": "550"
										},
										{
											"begin": 817,
											"end": 834,
											"name": "PUSH [tag]",
											"source": 7,
											"value": "365"
										},
										{
											"begin": 817,
											"end": 834,
											"name": "JUMP",
											"source": 7,
											"value": "[in]"
										},
										{
											"begin": 817,
											"end": 834,
											"name": "tag",
											"source": 7,
											"value": "550"
										},
										{
											"begin": 817,
											"end": 834,
											"name": "JUMPDEST",
											"source": 7
										},
										{
											"begin": 817,
											"end": 834,
											"name": "PUSH",
											"source": 7,
											"value": "40"
										},
										{
											"begin": 817,
											"end": 834,
											"name": "MLOAD",
											"source": 7
										},
										{
											"begin": 817,
											"end": 834,
											"name": "SWAP1",
											"source": 7
										},
										{
											"begin": 817,
											"end": 834,
											"name": "DUP1",
											"source": 7
										},
										{
											"begin": 817,
											"end": 834,
											"name": "DUP3",
											"source": 7
										},
										{
											"begin": 817,
											"end": 834,
											"name": "MSTORE",
											"source": 7
										},
										{
											"begin": 817,
											"end": 834,
											"name": "DUP1",
											"source": 7
										},
										{
											"begin": 817,
											"end": 834,
											"name": "PUSH",
											"source": 7,
											"value": "1F"
										},
										{
											"begin": 817,
											"end": 834,
											"name": "ADD",
											"source": 7
										},
										{
											"begin": 817,
											"end": 834,
											"name": "PUSH",
											"source": 7,
											"value": "1F"
										},
										{
											"begin": 817,
											"end": 834,
											"name": "NOT",
											"source": 7
										},
										{
											"begin": 817,
											"end": 834,
											"name": "AND",
											"source": 7
										},
										{
											"begin": 817,
											"end": 834,
											"name": "PUSH",
											"source": 7,
											"value": "20"
										},
										{
											"begin": 817,
											"end": 834,
											"name": "ADD",
											"source": 7
										},
										{
											"begin": 817,
											"end": 834,
											"name": "DUP3",
											"source": 7
										},
										{
											"begin": 817,
											"end": 834,
											"name": "ADD",
											"source": 7
										},
										{
											"begin": 817,
											"end": 834,
											"name": "PUSH",
											"source": 7,
											"value": "40"
										},
										{
											"begin": 817,
											"end": 834,
											"name": "MSTORE",
											"source": 7
										},
										{
											"begin": 817,
											"end": 834,
											"name": "DUP1",
											"source": 7
										},
										{
											"begin": 817,
											"end": 834,
											"name": "ISZERO",
											"source": 7
										},
										{
											"begin": 817,
											"end": 834,
											"name": "PUSH [tag]",
											"source": 7,
											"value": "551"
										},
										{
											"begin": 817,
											"end": 834,
											"name": "JUMPI",
											"source": 7
										},
										{
											"begin": 817,
											"end": 834,
											"name": "PUSH",
											"source": 7,
											"value": "20"
										},
										{
											"begin": 817,
											"end": 834,
											"name": "DUP3",
											"source": 7
										},
										{
											"begin": 817,
											"end": 834,
											"name": "ADD",
											"source": 7
										},
										{
											"begin": 817,
											"end": 834,
											"name": "DUP2",
											"source": 7
										},
										{
											"begin": 817,
											"end": 834,
											"name": "DUP1",
											"source": 7
										},
										{
											"begin": 817,
											"end": 834,
											"name": "CALLDATASIZE",
											"source": 7
										},
										{
											"begin": 817,
											"end": 834,
											"name": "DUP4",
											"source": 7
										},
										{
											"begin": 817,
											"end": 834,
											"name": "CALLDATACOPY",
											"source": 7
										},
										{
											"begin": 817,
											"end": 834,
											"name": "ADD",
											"source": 7
										},
										{
											"begin": 817,
											"end": 834,
											"name": "SWAP1",
											"source": 7
										},
										{
											"begin": -1,
											"end": -1,
											"name": "POP",
											"source": -1
										},
										{
											"begin": 817,
											"end": 834,
											"name": "tag",
											"source": 7,
											"value": "551"
										},
										{
											"begin": 817,
											"end": 834,
											"name": "JUMPDEST",
											"source": 7
										},
										{
											"begin": 817,
											"end": 834,
											"name": "POP",
											"source": 7
										},
										{
											"begin": 795,
											"end": 834,
											"name": "SWAP1",
											"source": 7
										},
										{
											"begin": 795,
											"end": 834,
											"name": "POP",
											"source": 7
										},
										{
											"begin": 844,
											"end": 994,
											"name": "tag",
											"source": 7,
											"value": "552"
										},
										{
											"begin": 844,
											"end": 994,
											"name": "JUMPDEST",
											"source": 7
										},
										{
											"begin": 851,
											"end": 861,
											"name": "DUP5",
											"source": 7
										},
										{
											"begin": 851,
											"end": 861,
											"name": "ISZERO",
											"source": 7
										},
										{
											"begin": 844,
											"end": 994,
											"name": "PUSH [tag]",
											"source": 7,
											"value": "542"
										},
										{
											"begin": 844,
											"end": 994,
											"name": "JUMPI",
											"source": 7
										},
										{
											"begin": 877,
											"end": 888,
											"name": "PUSH [tag]",
											"source": 7,
											"value": "554"
										},
										{
											"begin": 887,
											"end": 888,
											"name": "PUSH",
											"source": 7,
											"value": "1"
										},
										{
											"begin": 877,
											"end": 888,
											"name": "DUP4",
											"source": 7
										},
										{
											"begin": 877,
											"end": 888,
											"name": "PUSH [tag]",
											"source": 7,
											"value": "555"
										},
										{
											"begin": 877,
											"end": 888,
											"name": "JUMP",
											"source": 7,
											"value": "[in]"
										},
										{
											"begin": 877,
											"end": 888,
											"name": "tag",
											"source": 7,
											"value": "554"
										},
										{
											"begin": 877,
											"end": 888,
											"name": "JUMPDEST",
											"source": 7
										},
										{
											"begin": 877,
											"end": 888,
											"name": "SWAP2",
											"source": 7
										},
										{
											"begin": -1,
											"end": -1,
											"name": "POP",
											"source": -1
										},
										{
											"begin": 945,
											"end": 955,
											"name": "PUSH [tag]",
											"source": 7,
											"value": "556"
										},
										{
											"begin": 953,
											"end": 955,
											"name": "PUSH",
											"source": 7,
											"value": "A"
										},
										{
											"begin": 945,
											"end": 950,
											"name": "DUP7",
											"source": 7
										},
										{
											"begin": 945,
											"end": 955,
											"name": "PUSH [tag]",
											"source": 7,
											"value": "557"
										},
										{
											"begin": 945,
											"end": 955,
											"name": "JUMP",
											"source": 7,
											"value": "[in]"
										},
										{
											"begin": 945,
											"end": 955,
											"name": "tag",
											"source": 7,
											"value": "556"
										},
										{
											"begin": 945,
											"end": 955,
											"name": "JUMPDEST",
											"source": 7
										},
										{
											"begin": 932,
											"end": 956,
											"name": "PUSH [tag]",
											"source": 7,
											"value": "558"
										},
										{
											"begin": 932,
											"end": 956,
											"name": "SWAP1",
											"source": 7
										},
										{
											"begin": 932,
											"end": 934,
											"name": "PUSH",
											"source": 7,
											"value": "30"
										},
										{
											"begin": 932,
											"end": 956,
											"name": "PUSH [tag]",
											"source": 7,
											"value": "292"
										},
										{
											"begin": 932,
											"end": 956,
											"name": "JUMP",
											"source": 7,
											"value": "[in]"
										},
										{
											"begin": 932,
											"end": 956,
											"name": "tag",
											"source": 7,
											"value": "558"
										},
										{
											"begin": 932,
											"end": 956,
											"name": "JUMPDEST",
											"source": 7
										},
										{
											"begin": 919,
											"end": 958,
											"name": "PUSH",
											"source": 7,
											"value": "F8"
										},
										{
											"begin": 919,
											"end": 958,
											"name": "SHL",
											"source": 7
										},
										{
											"begin": 902,
											"end": 908,
											"name": "DUP2",
											"source": 7
										},
										{
											"begin": 909,
											"end": 915,
											"name": "DUP4",
											"source": 7
										},
										{
											"begin": 902,
											"end": 916,
											"name": "DUP2",
											"source": 7
										},
										{
											"begin": 902,
											"end": 916,
											"name": "MLOAD",
											"source": 7
										},
										{
											"begin": 902,
											"end": 916,
											"name": "DUP2",
											"source": 7
										},
										{
											"begin": 902,
											"end": 916,
											"name": "LT",
											"source": 7
										},
										{
											"begin": 902,
											"end": 916,
											"name": "PUSH [tag]",
											"source": 7,
											"value": "560"
										},
										{
											"begin": 902,
											"end": 916,
											"name": "JUMPI",
											"source": 7
										},
										{
											"begin": 902,
											"end": 916,
											"name": "PUSH [tag]",
											"source": 7,
											"value": "560"
										},
										{
											"begin": 902,
											"end": 916,
											"name": "PUSH [tag]",
											"source": 7,
											"value": "561"
										},
										{
											"begin": 902,
											"end": 916,
											"name": "JUMP",
											"source": 7,
											"value": "[in]"
										},
										{
											"begin": 902,
											"end": 916,
											"name": "tag",
											"source": 7,
											"value": "560"
										},
										{
											"begin": 902,
											"end": 916,
											"name": "JUMPDEST",
											"source": 7
										},
										{
											"begin": 902,
											"end": 916,
											"name": "PUSH",
											"source": 7,
											"value": "20"
										},
										{
											"begin": 902,
											"end": 916,
											"name": "ADD",
											"source": 7
										},
										{
											"begin": 902,
											"end": 916,
											"name": "ADD",
											"source": 7
										},
										{
											"begin": 902,
											"end": 958,
											"name": "SWAP1",
											"source": 7
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "F8"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SHL",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SUB",
											"source": -1
										},
										{
											"begin": 902,
											"end": 958,
											"name": "NOT",
											"source": 7
										},
										{
											"begin": 902,
											"end": 958,
											"name": "AND",
											"source": 7
										},
										{
											"begin": 902,
											"end": 958,
											"name": "SWAP1",
											"source": 7
										},
										{
											"begin": 902,
											"end": 958,
											"name": "DUP2",
											"source": 7
										},
										{
											"begin": 902,
											"end": 958,
											"name": "PUSH",
											"source": 7,
											"value": "0"
										},
										{
											"begin": 902,
											"end": 958,
											"name": "BYTE",
											"source": 7
										},
										{
											"begin": 902,
											"end": 958,
											"name": "SWAP1",
											"source": 7
										},
										{
											"begin": 902,
											"end": 958,
											"name": "MSTORE8",
											"source": 7
										},
										{
											"begin": -1,
											"end": -1,
											"name": "POP",
											"source": -1
										},
										{
											"begin": 972,
											"end": 983,
											"name": "PUSH [tag]",
											"source": 7,
											"value": "562"
										},
										{
											"begin": 981,
											"end": 983,
											"name": "PUSH",
											"source": 7,
											"value": "A"
										},
										{
											"begin": 972,
											"end": 983,
											"name": "DUP7",
											"source": 7
										},
										{
											"begin": 972,
											"end": 983,
											"name": "PUSH [tag]",
											"source": 7,
											"value": "323"
										},
										{
											"begin": 972,
											"end": 983,
											"name": "JUMP",
											"source": 7,
											"value": "[in]"
										},
										{
											"begin": 972,
											"end": 983,
											"name": "tag",
											"source": 7,
											"value": "562"
										},
										{
											"begin": 972,
											"end": 983,
											"name": "JUMPDEST",
											"source": 7
										},
										{
											"begin": 972,
											"end": 983,
											"name": "SWAP5",
											"source": 7
										},
										{
											"begin": 972,
											"end": 983,
											"name": "POP",
											"source": 7
										},
										{
											"begin": 844,
											"end": 994,
											"name": "PUSH [tag]",
											"source": 7,
											"value": "552"
										},
										{
											"begin": 844,
											"end": 994,
											"name": "JUMP",
											"source": 7
										},
										{
											"begin": 1398,
											"end": 2060,
											"name": "tag",
											"source": 8,
											"value": "509"
										},
										{
											"begin": 1398,
											"end": 2060,
											"name": "JUMPDEST",
											"source": 8
										},
										{
											"begin": 1481,
											"end": 1488,
											"name": "PUSH",
											"source": 8,
											"value": "0"
										},
										{
											"begin": 1523,
											"end": 1527,
											"name": "DUP2",
											"source": 8
										},
										{
											"begin": 1481,
											"end": 1488,
											"name": "DUP2",
											"source": 8
										},
										{
											"begin": 1537,
											"end": 2025,
											"name": "tag",
											"source": 8,
											"value": "566"
										},
										{
											"begin": 1537,
											"end": 2025,
											"name": "JUMPDEST",
											"source": 8
										},
										{
											"begin": 1561,
											"end": 1566,
											"name": "DUP5",
											"source": 8
										},
										{
											"begin": 1561,
											"end": 1573,
											"name": "MLOAD",
											"source": 8
										},
										{
											"begin": 1557,
											"end": 1558,
											"name": "DUP2",
											"source": 8
										},
										{
											"begin": 1557,
											"end": 1573,
											"name": "LT",
											"source": 8
										},
										{
											"begin": 1537,
											"end": 2025,
											"name": "ISZERO",
											"source": 8
										},
										{
											"begin": 1537,
											"end": 2025,
											"name": "PUSH [tag]",
											"source": 8,
											"value": "368"
										},
										{
											"begin": 1537,
											"end": 2025,
											"name": "JUMPI",
											"source": 8
										},
										{
											"begin": 1594,
											"end": 1614,
											"name": "PUSH",
											"source": 8,
											"value": "0"
										},
										{
											"begin": 1617,
											"end": 1622,
											"name": "DUP6",
											"source": 8
										},
										{
											"begin": 1623,
											"end": 1624,
											"name": "DUP3",
											"source": 8
										},
										{
											"begin": 1617,
											"end": 1625,
											"name": "DUP2",
											"source": 8
										},
										{
											"begin": 1617,
											"end": 1625,
											"name": "MLOAD",
											"source": 8
										},
										{
											"begin": 1617,
											"end": 1625,
											"name": "DUP2",
											"source": 8
										},
										{
											"begin": 1617,
											"end": 1625,
											"name": "LT",
											"source": 8
										},
										{
											"begin": 1617,
											"end": 1625,
											"name": "PUSH [tag]",
											"source": 8,
											"value": "570"
										},
										{
											"begin": 1617,
											"end": 1625,
											"name": "JUMPI",
											"source": 8
										},
										{
											"begin": 1617,
											"end": 1625,
											"name": "PUSH [tag]",
											"source": 8,
											"value": "570"
										},
										{
											"begin": 1617,
											"end": 1625,
											"name": "PUSH [tag]",
											"source": 8,
											"value": "561"
										},
										{
											"begin": 1617,
											"end": 1625,
											"name": "JUMP",
											"source": 8,
											"value": "[in]"
										},
										{
											"begin": 1617,
											"end": 1625,
											"name": "tag",
											"source": 8,
											"value": "570"
										},
										{
											"begin": 1617,
											"end": 1625,
											"name": "JUMPDEST",
											"source": 8
										},
										{
											"begin": 1617,
											"end": 1625,
											"name": "PUSH",
											"source": 8,
											"value": "20"
										},
										{
											"begin": 1617,
											"end": 1625,
											"name": "MUL",
											"source": 8
										},
										{
											"begin": 1617,
											"end": 1625,
											"name": "PUSH",
											"source": 8,
											"value": "20"
										},
										{
											"begin": 1617,
											"end": 1625,
											"name": "ADD",
											"source": 8
										},
										{
											"begin": 1617,
											"end": 1625,
											"name": "ADD",
											"source": 8
										},
										{
											"begin": 1617,
											"end": 1625,
											"name": "MLOAD",
											"source": 8
										},
										{
											"begin": 1594,
											"end": 1625,
											"name": "SWAP1",
											"source": 8
										},
										{
											"begin": 1594,
											"end": 1625,
											"name": "POP",
											"source": 8
										},
										{
											"begin": 1659,
											"end": 1671,
											"name": "DUP1",
											"source": 8
										},
										{
											"begin": 1643,
											"end": 1655,
											"name": "DUP4",
											"source": 8
										},
										{
											"begin": 1643,
											"end": 1671,
											"name": "GT",
											"source": 8
										},
										{
											"begin": 1639,
											"end": 2015,
											"name": "PUSH [tag]",
											"source": 8,
											"value": "571"
										},
										{
											"begin": 1639,
											"end": 2015,
											"name": "JUMPI",
											"source": 8
										},
										{
											"begin": 2134,
											"end": 2147,
											"name": "PUSH",
											"source": 8,
											"value": "0"
										},
										{
											"begin": 2182,
											"end": 2197,
											"name": "DUP4",
											"source": 8
										},
										{
											"begin": 2182,
											"end": 2197,
											"name": "DUP2",
											"source": 8
										},
										{
											"begin": 2182,
											"end": 2197,
											"name": "MSTORE",
											"source": 8
										},
										{
											"begin": 2217,
											"end": 2221,
											"name": "PUSH",
											"source": 8,
											"value": "20"
										},
										{
											"begin": 2210,
											"end": 2225,
											"name": "DUP3",
											"source": 8
										},
										{
											"begin": 2210,
											"end": 2225,
											"name": "SWAP1",
											"source": 8
										},
										{
											"begin": 2210,
											"end": 2225,
											"name": "MSTORE",
											"source": 8
										},
										{
											"begin": 2263,
											"end": 2267,
											"name": "PUSH",
											"source": 8,
											"value": "40"
										},
										{
											"begin": 2247,
											"end": 2268,
											"name": "SWAP1",
											"source": 8
										},
										{
											"begin": 2247,
											"end": 2268,
											"name": "KECCAK256",
											"source": 8
										},
										{
											"begin": 1769,
											"end": 1826,
											"name": "SWAP3",
											"source": 8
										},
										{
											"begin": 1769,
											"end": 1826,
											"name": "POP",
											"source": 8
										},
										{
											"begin": 1639,
											"end": 2015,
											"name": "PUSH [tag]",
											"source": 8,
											"value": "574"
										},
										{
											"begin": 1639,
											"end": 2015,
											"name": "JUMP",
											"source": 8
										},
										{
											"begin": 1639,
											"end": 2015,
											"name": "tag",
											"source": 8,
											"value": "571"
										},
										{
											"begin": 1639,
											"end": 2015,
											"name": "JUMPDEST",
											"source": 8
										},
										{
											"begin": 2134,
											"end": 2147,
											"name": "PUSH",
											"source": 8,
											"value": "0"
										},
										{
											"begin": 2182,
											"end": 2197,
											"name": "DUP2",
											"source": 8
										},
										{
											"begin": 2182,
											"end": 2197,
											"name": "DUP2",
											"source": 8
										},
										{
											"begin": 2182,
											"end": 2197,
											"name": "MSTORE",
											"source": 8
										},
										{
											"begin": 2217,
											"end": 2221,
											"name": "PUSH",
											"source": 8,
											"value": "20"
										},
										{
											"begin": 2210,
											"end": 2225,
											"name": "DUP5",
											"source": 8
										},
										{
											"begin": 2210,
											"end": 2225,
											"name": "SWAP1",
											"source": 8
										},
										{
											"begin": 2210,
											"end": 2225,
											"name": "MSTORE",
											"source": 8
										},
										{
											"begin": 2263,
											"end": 2267,
											"name": "PUSH",
											"source": 8,
											"value": "40"
										},
										{
											"begin": 2247,
											"end": 2268,
											"name": "SWAP1",
											"source": 8
										},
										{
											"begin": 2247,
											"end": 2268,
											"name": "KECCAK256",
											"source": 8
										},
										{
											"begin": 1943,
											"end": 2000,
											"name": "SWAP3",
											"source": 8
										},
										{
											"begin": 1943,
											"end": 2000,
											"name": "POP",
											"source": 8
										},
										{
											"begin": 1639,
											"end": 2015,
											"name": "tag",
											"source": 8,
											"value": "574"
										},
										{
											"begin": 1639,
											"end": 2015,
											"name": "JUMPDEST",
											"source": 8
										},
										{
											"begin": -1,
											"end": -1,
											"name": "POP",
											"source": -1
										},
										{
											"begin": 1575,
											"end": 1578,
											"name": "DUP1",
											"source": 8
										},
										{
											"begin": 1575,
											"end": 1578,
											"name": "PUSH [tag]",
											"source": 8,
											"value": "576"
										},
										{
											"begin": 1575,
											"end": 1578,
											"name": "DUP2",
											"source": 8
										},
										{
											"begin": 1575,
											"end": 1578,
											"name": "PUSH [tag]",
											"source": 8,
											"value": "371"
										},
										{
											"begin": 1575,
											"end": 1578,
											"name": "JUMP",
											"source": 8,
											"value": "[in]"
										},
										{
											"begin": 1575,
											"end": 1578,
											"name": "tag",
											"source": 8,
											"value": "576"
										},
										{
											"begin": 1575,
											"end": 1578,
											"name": "JUMPDEST",
											"source": 8
										},
										{
											"begin": 1575,
											"end": 1578,
											"name": "SWAP2",
											"source": 8
										},
										{
											"begin": 1575,
											"end": 1578,
											"name": "POP",
											"source": 8
										},
										{
											"begin": 1575,
											"end": 1578,
											"name": "POP",
											"source": 8
										},
										{
											"begin": 1537,
											"end": 2025,
											"name": "PUSH [tag]",
											"source": 8,
											"value": "566"
										},
										{
											"begin": 1537,
											"end": 2025,
											"name": "JUMP",
											"source": 8
										},
										{
											"begin": 12149,
											"end": 12306,
											"name": "tag",
											"source": 12,
											"value": "512"
										},
										{
											"begin": 12149,
											"end": 12306,
											"name": "JUMPDEST",
											"source": 12
										},
										{
											"begin": 12267,
											"end": 12299,
											"name": "PUSH [tag]",
											"source": 12,
											"value": "274"
										},
										{
											"begin": 12273,
											"end": 12275,
											"name": "DUP4",
											"source": 12
										},
										{
											"begin": 12277,
											"end": 12285,
											"name": "DUP4",
											"source": 12
										},
										{
											"begin": 12287,
											"end": 12292,
											"name": "DUP4",
											"source": 12
										},
										{
											"begin": 12294,
											"end": 12298,
											"name": "PUSH",
											"source": 12,
											"value": "1"
										},
										{
											"begin": 12686,
											"end": 12706,
											"name": "PUSH",
											"source": 12,
											"value": "0"
										},
										{
											"begin": 12709,
											"end": 12722,
											"name": "SLOAD",
											"source": 12
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "A0"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SHL",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SUB",
											"source": -1
										},
										{
											"begin": 12736,
											"end": 12752,
											"name": "DUP6",
											"source": 12
										},
										{
											"begin": 12736,
											"end": 12752,
											"name": "AND",
											"source": 12
										},
										{
											"begin": 12732,
											"end": 12780,
											"name": "PUSH [tag]",
											"source": 12,
											"value": "582"
										},
										{
											"begin": 12732,
											"end": 12780,
											"name": "JUMPI",
											"source": 12
										},
										{
											"begin": 12761,
											"end": 12780,
											"name": "PUSH",
											"source": 12,
											"value": "40"
										},
										{
											"begin": 12761,
											"end": 12780,
											"name": "MLOAD",
											"source": 12
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "2E0763"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "E8"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SHL",
											"source": -1
										},
										{
											"begin": 12761,
											"end": 12780,
											"name": "DUP2",
											"source": 12
										},
										{
											"begin": 12761,
											"end": 12780,
											"name": "MSTORE",
											"source": 12
										},
										{
											"begin": 12761,
											"end": 12780,
											"name": "PUSH",
											"source": 12,
											"value": "4"
										},
										{
											"begin": 12761,
											"end": 12780,
											"name": "ADD",
											"source": 12
										},
										{
											"begin": 12761,
											"end": 12780,
											"name": "PUSH",
											"source": 12,
											"value": "40"
										},
										{
											"begin": 12761,
											"end": 12780,
											"name": "MLOAD",
											"source": 12
										},
										{
											"begin": 12761,
											"end": 12780,
											"name": "DUP1",
											"source": 12
										},
										{
											"begin": 12761,
											"end": 12780,
											"name": "SWAP2",
											"source": 12
										},
										{
											"begin": 12761,
											"end": 12780,
											"name": "SUB",
											"source": 12
										},
										{
											"begin": 12761,
											"end": 12780,
											"name": "SWAP1",
											"source": 12
										},
										{
											"begin": 12761,
											"end": 12780,
											"name": "REVERT",
											"source": 12
										},
										{
											"begin": 12732,
											"end": 12780,
											"name": "tag",
											"source": 12,
											"value": "582"
										},
										{
											"begin": 12732,
											"end": 12780,
											"name": "JUMPDEST",
											"source": 12
										},
										{
											"begin": 12794,
											"end": 12807,
											"name": "DUP4",
											"source": 12
										},
										{
											"begin": 12790,
											"end": 12834,
											"name": "PUSH [tag]",
											"source": 12,
											"value": "583"
										},
										{
											"begin": 12790,
											"end": 12834,
											"name": "JUMPI",
											"source": 12
										},
										{
											"begin": 12816,
											"end": 12834,
											"name": "PUSH",
											"source": 12,
											"value": "40"
										},
										{
											"begin": 12816,
											"end": 12834,
											"name": "MLOAD",
											"source": 12
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "B562E8DD"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "E0"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SHL",
											"source": -1
										},
										{
											"begin": 12816,
											"end": 12834,
											"name": "DUP2",
											"source": 12
										},
										{
											"begin": 12816,
											"end": 12834,
											"name": "MSTORE",
											"source": 12
										},
										{
											"begin": 12816,
											"end": 12834,
											"name": "PUSH",
											"source": 12,
											"value": "4"
										},
										{
											"begin": 12816,
											"end": 12834,
											"name": "ADD",
											"source": 12
										},
										{
											"begin": 12816,
											"end": 12834,
											"name": "PUSH",
											"source": 12,
											"value": "40"
										},
										{
											"begin": 12816,
											"end": 12834,
											"name": "MLOAD",
											"source": 12
										},
										{
											"begin": 12816,
											"end": 12834,
											"name": "DUP1",
											"source": 12
										},
										{
											"begin": 12816,
											"end": 12834,
											"name": "SWAP2",
											"source": 12
										},
										{
											"begin": 12816,
											"end": 12834,
											"name": "SUB",
											"source": 12
										},
										{
											"begin": 12816,
											"end": 12834,
											"name": "SWAP1",
											"source": 12
										},
										{
											"begin": 12816,
											"end": 12834,
											"name": "REVERT",
											"source": 12
										},
										{
											"begin": 12790,
											"end": 12834,
											"name": "tag",
											"source": 12,
											"value": "583"
										},
										{
											"begin": 12790,
											"end": 12834,
											"name": "JUMPDEST",
											"source": 12
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "A0"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SHL",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SUB",
											"source": -1
										},
										{
											"begin": 13177,
											"end": 13193,
											"name": "DUP6",
											"source": 12
										},
										{
											"begin": 13177,
											"end": 13193,
											"name": "AND",
											"source": 12
										},
										{
											"begin": 13177,
											"end": 13193,
											"name": "PUSH",
											"source": 12,
											"value": "0"
										},
										{
											"begin": 13177,
											"end": 13193,
											"name": "DUP2",
											"source": 12
										},
										{
											"begin": 13177,
											"end": 13193,
											"name": "DUP2",
											"source": 12
										},
										{
											"begin": 13177,
											"end": 13193,
											"name": "MSTORE",
											"source": 12
										},
										{
											"begin": 13177,
											"end": 13189,
											"name": "PUSH",
											"source": 12,
											"value": "5"
										},
										{
											"begin": 13177,
											"end": 13193,
											"name": "PUSH",
											"source": 12,
											"value": "20"
										},
										{
											"begin": 13177,
											"end": 13193,
											"name": "SWAP1",
											"source": 12
										},
										{
											"begin": 13177,
											"end": 13193,
											"name": "DUP2",
											"source": 12
										},
										{
											"begin": 13177,
											"end": 13193,
											"name": "MSTORE",
											"source": 12
										},
										{
											"begin": 13177,
											"end": 13193,
											"name": "PUSH",
											"source": 12,
											"value": "40"
										},
										{
											"begin": 13177,
											"end": 13193,
											"name": "DUP1",
											"source": 12
										},
										{
											"begin": 13177,
											"end": 13193,
											"name": "DUP4",
											"source": 12
										},
										{
											"begin": 13177,
											"end": 13193,
											"name": "KECCAK256",
											"source": 12
										},
										{
											"begin": 13177,
											"end": 13221,
											"name": "DUP1",
											"source": 12
										},
										{
											"begin": 13177,
											"end": 13221,
											"name": "SLOAD",
											"source": 12
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "NOT",
											"source": -1
										},
										{
											"begin": 13235,
											"end": 13284,
											"name": "DUP2",
											"source": 12
										},
										{
											"begin": 13235,
											"end": 13284,
											"name": "AND",
											"source": 12
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "40"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SHL",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SUB",
											"source": -1
										},
										{
											"begin": 13177,
											"end": 13221,
											"name": "DUP1",
											"source": 12
										},
										{
											"begin": 13177,
											"end": 13221,
											"name": "DUP4",
											"source": 12
										},
										{
											"begin": 13177,
											"end": 13221,
											"name": "AND",
											"source": 12
										},
										{
											"begin": 13177,
											"end": 13221,
											"name": "DUP13",
											"source": 12
										},
										{
											"begin": 13177,
											"end": 13221,
											"name": "ADD",
											"source": 12
										},
										{
											"begin": 13177,
											"end": 13221,
											"name": "DUP2",
											"source": 12
										},
										{
											"begin": 13177,
											"end": 13221,
											"name": "AND",
											"source": 12
										},
										{
											"begin": 13235,
											"end": 13284,
											"name": "SWAP2",
											"source": 12
										},
										{
											"begin": 13235,
											"end": 13284,
											"name": "DUP3",
											"source": 12
										},
										{
											"begin": 13235,
											"end": 13284,
											"name": "OR",
											"source": 12
										},
										{
											"begin": 13235,
											"end": 13284,
											"name": "PUSH",
											"source": 12,
											"value": "10000000000000000"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "FFFFFFFFFFFFFFFF"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "NOT",
											"source": -1
										},
										{
											"begin": 13177,
											"end": 13221,
											"name": "SWAP1",
											"source": 12
										},
										{
											"begin": 13177,
											"end": 13221,
											"name": "SWAP5",
											"source": 12
										},
										{
											"begin": 13177,
											"end": 13221,
											"name": "AND",
											"source": 12
										},
										{
											"begin": 13177,
											"end": 13221,
											"name": "SWAP1",
											"source": 12
										},
										{
											"begin": 13177,
											"end": 13221,
											"name": "SWAP3",
											"source": 12
										},
										{
											"begin": 13177,
											"end": 13221,
											"name": "OR",
											"source": 12
										},
										{
											"begin": 13235,
											"end": 13284,
											"name": "DUP4",
											"source": 12
										},
										{
											"begin": 13235,
											"end": 13284,
											"name": "SWAP1",
											"source": 12
										},
										{
											"begin": 13235,
											"end": 13284,
											"name": "DIV",
											"source": 12
										},
										{
											"begin": 13235,
											"end": 13284,
											"name": "DUP2",
											"source": 12
										},
										{
											"begin": 13235,
											"end": 13284,
											"name": "AND",
											"source": 12
										},
										{
											"begin": 13235,
											"end": 13284,
											"name": "DUP13",
											"source": 12
										},
										{
											"begin": 13235,
											"end": 13284,
											"name": "ADD",
											"source": 12
										},
										{
											"begin": 13235,
											"end": 13284,
											"name": "DUP2",
											"source": 12
										},
										{
											"begin": 13235,
											"end": 13284,
											"name": "AND",
											"source": 12
										},
										{
											"begin": 13235,
											"end": 13284,
											"name": "SWAP1",
											"source": 12
										},
										{
											"begin": 13235,
											"end": 13284,
											"name": "SWAP3",
											"source": 12
										},
										{
											"begin": 13235,
											"end": 13284,
											"name": "MUL",
											"source": 12
										},
										{
											"begin": 13235,
											"end": 13284,
											"name": "OR",
											"source": 12
										},
										{
											"begin": 13235,
											"end": 13284,
											"name": "SWAP1",
											"source": 12
										},
										{
											"begin": 13235,
											"end": 13284,
											"name": "SWAP2",
											"source": 12
										},
										{
											"begin": 13235,
											"end": 13284,
											"name": "SSTORE",
											"source": 12
										},
										{
											"begin": 13299,
											"end": 13324,
											"name": "DUP6",
											"source": 12
										},
										{
											"begin": 13299,
											"end": 13324,
											"name": "DUP5",
											"source": 12
										},
										{
											"begin": 13299,
											"end": 13324,
											"name": "MSTORE",
											"source": 12
										},
										{
											"begin": 13299,
											"end": 13310,
											"name": "PUSH",
											"source": 12,
											"value": "4"
										},
										{
											"begin": 13299,
											"end": 13324,
											"name": "SWAP1",
											"source": 12
										},
										{
											"begin": 13299,
											"end": 13324,
											"name": "SWAP3",
											"source": 12
										},
										{
											"begin": 13299,
											"end": 13324,
											"name": "MSTORE",
											"source": 12
										},
										{
											"begin": 13299,
											"end": 13324,
											"name": "SWAP1",
											"source": 12
										},
										{
											"begin": 13299,
											"end": 13324,
											"name": "SWAP2",
											"source": 12
										},
										{
											"begin": 13299,
											"end": 13324,
											"name": "KECCAK256",
											"source": 12
										},
										{
											"begin": 13299,
											"end": 13334,
											"name": "DUP1",
											"source": 12
										},
										{
											"begin": 13299,
											"end": 13334,
											"name": "SLOAD",
											"source": 12
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "E0"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SHL",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SUB",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "NOT",
											"source": -1
										},
										{
											"begin": 13348,
											"end": 13414,
											"name": "AND",
											"source": 12
										},
										{
											"begin": 13348,
											"end": 13414,
											"name": "SWAP1",
											"source": 12
										},
										{
											"begin": 13348,
											"end": 13414,
											"name": "SWAP3",
											"source": 12
										},
										{
											"begin": 13348,
											"end": 13414,
											"name": "OR",
											"source": 12
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "A0"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SHL",
											"source": -1
										},
										{
											"begin": 13398,
											"end": 13413,
											"name": "TIMESTAMP",
											"source": 12
										},
										{
											"begin": 13348,
											"end": 13414,
											"name": "SWAP1",
											"source": 12
										},
										{
											"begin": 13348,
											"end": 13414,
											"name": "SWAP3",
											"source": 12
										},
										{
											"begin": 13348,
											"end": 13414,
											"name": "AND",
											"source": 12
										},
										{
											"begin": 13348,
											"end": 13414,
											"name": "SWAP2",
											"source": 12
										},
										{
											"begin": 13348,
											"end": 13414,
											"name": "SWAP1",
											"source": 12
										},
										{
											"begin": 13348,
											"end": 13414,
											"name": "SWAP2",
											"source": 12
										},
										{
											"begin": 13348,
											"end": 13414,
											"name": "MUL",
											"source": 12
										},
										{
											"begin": 13348,
											"end": 13414,
											"name": "OR",
											"source": 12
										},
										{
											"begin": 13348,
											"end": 13414,
											"name": "SWAP1",
											"source": 12
										},
										{
											"begin": 13348,
											"end": 13414,
											"name": "SSTORE",
											"source": 12
										},
										{
											"begin": 13299,
											"end": 13324,
											"name": "DUP1",
											"source": 12
										},
										{
											"begin": 13492,
											"end": 13515,
											"name": "DUP1",
											"source": 12
										},
										{
											"begin": 13492,
											"end": 13515,
											"name": "DUP6",
											"source": 12
										},
										{
											"begin": 13492,
											"end": 13515,
											"name": "ADD",
											"source": 12
										},
										{
											"begin": 13534,
											"end": 13538,
											"name": "DUP4",
											"source": 12
										},
										{
											"begin": 13534,
											"end": 13557,
											"name": "DUP1",
											"source": 12
										},
										{
											"begin": 13534,
											"end": 13557,
											"name": "ISZERO",
											"source": 12
										},
										{
											"begin": 13534,
											"end": 13557,
											"name": "PUSH [tag]",
											"source": 12,
											"value": "586"
										},
										{
											"begin": 13534,
											"end": 13557,
											"name": "JUMPI",
											"source": 12
										},
										{
											"begin": -1,
											"end": -1,
											"name": "POP",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "A0"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SHL",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SUB",
											"source": -1
										},
										{
											"begin": 13542,
											"end": 13555,
											"name": "DUP8",
											"source": 12
										},
										{
											"begin": 13542,
											"end": 13555,
											"name": "AND",
											"source": 12
										},
										{
											"begin": 1465,
											"end": 1484,
											"name": "EXTCODESIZE",
											"source": 5
										},
										{
											"begin": 1465,
											"end": 1488,
											"name": "ISZERO",
											"source": 5
										},
										{
											"begin": 1465,
											"end": 1488,
											"name": "ISZERO",
											"source": 5
										},
										{
											"begin": 13542,
											"end": 13557,
											"name": "tag",
											"source": 12,
											"value": "586"
										},
										{
											"begin": 13542,
											"end": 13557,
											"name": "JUMPDEST",
											"source": 12
										},
										{
											"begin": 13530,
											"end": 14158,
											"name": "ISZERO",
											"source": 12
										},
										{
											"begin": 13530,
											"end": 14158,
											"name": "PUSH [tag]",
											"source": 12,
											"value": "587"
										},
										{
											"begin": 13530,
											"end": 14158,
											"name": "JUMPI",
											"source": 12
										},
										{
											"begin": 13577,
											"end": 13886,
											"name": "tag",
											"source": 12,
											"value": "588"
										},
										{
											"begin": 13577,
											"end": 13886,
											"name": "JUMPDEST",
											"source": 12
										},
										{
											"begin": 13607,
											"end": 13645,
											"name": "PUSH",
											"source": 12,
											"value": "40"
										},
										{
											"begin": 13607,
											"end": 13645,
											"name": "MLOAD",
											"source": 12
										},
										{
											"begin": 13632,
											"end": 13644,
											"name": "DUP3",
											"source": 12
										},
										{
											"begin": 13632,
											"end": 13644,
											"name": "SWAP1",
											"source": 12
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "A0"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SHL",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SUB",
											"source": -1
										},
										{
											"begin": 13607,
											"end": 13645,
											"name": "DUP10",
											"source": 12
										},
										{
											"begin": 13607,
											"end": 13645,
											"name": "AND",
											"source": 12
										},
										{
											"begin": 13607,
											"end": 13645,
											"name": "SWAP1",
											"source": 12
										},
										{
											"begin": 13624,
											"end": 13625,
											"name": "PUSH",
											"source": 12,
											"value": "0"
										},
										{
											"begin": 13624,
											"end": 13625,
											"name": "SWAP1",
											"source": 12
										},
										{
											"begin": 13607,
											"end": 13645,
											"name": "PUSH",
											"source": 12,
											"value": "DDF252AD1BE2C89B69C2B068FC378DAA952BA7F163C4A11628F55A4DF523B3EF"
										},
										{
											"begin": 13607,
											"end": 13645,
											"name": "SWAP1",
											"source": 12
										},
										{
											"begin": 13624,
											"end": 13625,
											"name": "DUP3",
											"source": 12
										},
										{
											"begin": 13624,
											"end": 13625,
											"name": "SWAP1",
											"source": 12
										},
										{
											"begin": 13607,
											"end": 13645,
											"name": "LOG4",
											"source": 12
										},
										{
											"begin": 13672,
											"end": 13741,
											"name": "PUSH [tag]",
											"source": 12,
											"value": "591"
										},
										{
											"begin": 13711,
											"end": 13712,
											"name": "PUSH",
											"source": 12,
											"value": "0"
										},
										{
											"begin": 13715,
											"end": 13717,
											"name": "DUP9",
											"source": 12
										},
										{
											"begin": 13719,
											"end": 13733,
											"name": "DUP5",
											"source": 12
										},
										{
											"begin": 13719,
											"end": 13733,
											"name": "DUP1",
											"source": 12
										},
										{
											"begin": 13719,
											"end": 13733,
											"name": "PUSH",
											"source": 12,
											"value": "1"
										},
										{
											"begin": 13719,
											"end": 13733,
											"name": "ADD",
											"source": 12
										},
										{
											"begin": 13719,
											"end": 13733,
											"name": "SWAP6",
											"source": 12
										},
										{
											"begin": 13719,
											"end": 13733,
											"name": "POP",
											"source": 12
										},
										{
											"begin": 13735,
											"end": 13740,
											"name": "DUP9",
											"source": 12
										},
										{
											"begin": 13672,
											"end": 13702,
											"name": "PUSH [tag]",
											"source": 12,
											"value": "426"
										},
										{
											"begin": 13672,
											"end": 13741,
											"name": "JUMP",
											"source": 12,
											"value": "[in]"
										},
										{
											"begin": 13672,
											"end": 13741,
											"name": "tag",
											"source": 12,
											"value": "591"
										},
										{
											"begin": 13672,
											"end": 13741,
											"name": "JUMPDEST",
											"source": 12
										},
										{
											"begin": 13667,
											"end": 13839,
											"name": "PUSH [tag]",
											"source": 12,
											"value": "592"
										},
										{
											"begin": 13667,
											"end": 13839,
											"name": "JUMPI",
											"source": 12
										},
										{
											"begin": 13776,
											"end": 13816,
											"name": "PUSH",
											"source": 12,
											"value": "40"
										},
										{
											"begin": 13776,
											"end": 13816,
											"name": "MLOAD",
											"source": 12
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "68D2BF6B"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "E1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SHL",
											"source": -1
										},
										{
											"begin": 13776,
											"end": 13816,
											"name": "DUP2",
											"source": 12
										},
										{
											"begin": 13776,
											"end": 13816,
											"name": "MSTORE",
											"source": 12
										},
										{
											"begin": 13776,
											"end": 13816,
											"name": "PUSH",
											"source": 12,
											"value": "4"
										},
										{
											"begin": 13776,
											"end": 13816,
											"name": "ADD",
											"source": 12
										},
										{
											"begin": 13776,
											"end": 13816,
											"name": "PUSH",
											"source": 12,
											"value": "40"
										},
										{
											"begin": 13776,
											"end": 13816,
											"name": "MLOAD",
											"source": 12
										},
										{
											"begin": 13776,
											"end": 13816,
											"name": "DUP1",
											"source": 12
										},
										{
											"begin": 13776,
											"end": 13816,
											"name": "SWAP2",
											"source": 12
										},
										{
											"begin": 13776,
											"end": 13816,
											"name": "SUB",
											"source": 12
										},
										{
											"begin": 13776,
											"end": 13816,
											"name": "SWAP1",
											"source": 12
										},
										{
											"begin": 13776,
											"end": 13816,
											"name": "REVERT",
											"source": 12
										},
										{
											"begin": 13667,
											"end": 13839,
											"name": "tag",
											"source": 12,
											"value": "592"
										},
										{
											"begin": 13667,
											"end": 13839,
											"name": "JUMPDEST",
											"source": 12
										},
										{
											"begin": 13881,
											"end": 13884,
											"name": "DUP1",
											"source": 12
										},
										{
											"begin": 13865,
											"end": 13877,
											"name": "DUP3",
											"source": 12
										},
										{
											"begin": 13865,
											"end": 13884,
											"name": "EQ",
											"source": 12
										},
										{
											"begin": 13865,
											"end": 13884,
											"name": "ISZERO",
											"source": 12
										},
										{
											"begin": 13577,
											"end": 13886,
											"name": "PUSH [tag]",
											"source": 12,
											"value": "588"
										},
										{
											"begin": 13577,
											"end": 13886,
											"name": "JUMPI",
											"source": 12
										},
										{
											"begin": 13965,
											"end": 13977,
											"name": "DUP3",
											"source": 12
										},
										{
											"begin": 13948,
											"end": 13961,
											"name": "PUSH",
											"source": 12,
											"value": "0"
										},
										{
											"begin": 13948,
											"end": 13961,
											"name": "SLOAD",
											"source": 12
										},
										{
											"begin": 13948,
											"end": 13977,
											"name": "EQ",
											"source": 12
										},
										{
											"begin": 13944,
											"end": 13987,
											"name": "PUSH [tag]",
											"source": 12,
											"value": "593"
										},
										{
											"begin": 13944,
											"end": 13987,
											"name": "JUMPI",
											"source": 12
										},
										{
											"begin": 13979,
											"end": 13987,
											"name": "PUSH",
											"source": 12,
											"value": "0"
										},
										{
											"begin": 13979,
											"end": 13987,
											"name": "DUP1",
											"source": 12
										},
										{
											"begin": 13979,
											"end": 13987,
											"name": "REVERT",
											"source": 12
										},
										{
											"begin": 13944,
											"end": 13987,
											"name": "tag",
											"source": 12,
											"value": "593"
										},
										{
											"begin": 13944,
											"end": 13987,
											"name": "JUMPDEST",
											"source": 12
										},
										{
											"begin": 13530,
											"end": 14158,
											"name": "PUSH [tag]",
											"source": 12,
											"value": "594"
										},
										{
											"begin": 13530,
											"end": 14158,
											"name": "JUMP",
											"source": 12
										},
										{
											"begin": 13530,
											"end": 14158,
											"name": "tag",
											"source": 12,
											"value": "587"
										},
										{
											"begin": 13530,
											"end": 14158,
											"name": "JUMPDEST",
											"source": 12
										},
										{
											"begin": 14026,
											"end": 14144,
											"name": "tag",
											"source": 12,
											"value": "595"
										},
										{
											"begin": 14026,
											"end": 14144,
											"name": "JUMPDEST",
											"source": 12
										},
										{
											"begin": 14056,
											"end": 14096,
											"name": "PUSH",
											"source": 12,
											"value": "40"
										},
										{
											"begin": 14056,
											"end": 14096,
											"name": "MLOAD",
											"source": 12
										},
										{
											"begin": 14081,
											"end": 14095,
											"name": "PUSH",
											"source": 12,
											"value": "1"
										},
										{
											"begin": 14081,
											"end": 14095,
											"name": "DUP4",
											"source": 12
										},
										{
											"begin": 14081,
											"end": 14095,
											"name": "ADD",
											"source": 12
										},
										{
											"begin": 14081,
											"end": 14095,
											"name": "SWAP3",
											"source": 12
										},
										{
											"begin": 14081,
											"end": 14095,
											"name": "SWAP1",
											"source": 12
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "A0"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SHL",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SUB",
											"source": -1
										},
										{
											"begin": 14056,
											"end": 14096,
											"name": "DUP10",
											"source": 12
										},
										{
											"begin": 14056,
											"end": 14096,
											"name": "AND",
											"source": 12
										},
										{
											"begin": 14056,
											"end": 14096,
											"name": "SWAP1",
											"source": 12
										},
										{
											"begin": 14073,
											"end": 14074,
											"name": "PUSH",
											"source": 12,
											"value": "0"
										},
										{
											"begin": 14073,
											"end": 14074,
											"name": "SWAP1",
											"source": 12
										},
										{
											"begin": 14056,
											"end": 14096,
											"name": "PUSH",
											"source": 12,
											"value": "DDF252AD1BE2C89B69C2B068FC378DAA952BA7F163C4A11628F55A4DF523B3EF"
										},
										{
											"begin": 14056,
											"end": 14096,
											"name": "SWAP1",
											"source": 12
										},
										{
											"begin": 14073,
											"end": 14074,
											"name": "DUP3",
											"source": 12
										},
										{
											"begin": 14073,
											"end": 14074,
											"name": "SWAP1",
											"source": 12
										},
										{
											"begin": 14056,
											"end": 14096,
											"name": "LOG4",
											"source": 12
										},
										{
											"begin": 14139,
											"end": 14142,
											"name": "DUP1",
											"source": 12
										},
										{
											"begin": 14123,
											"end": 14135,
											"name": "DUP3",
											"source": 12
										},
										{
											"begin": 14123,
											"end": 14142,
											"name": "EQ",
											"source": 12
										},
										{
											"begin": 14123,
											"end": 14142,
											"name": "ISZERO",
											"source": 12
										},
										{
											"begin": 14026,
											"end": 14144,
											"name": "PUSH [tag]",
											"source": 12,
											"value": "595"
										},
										{
											"begin": 14026,
											"end": 14144,
											"name": "JUMPI",
											"source": 12
										},
										{
											"begin": 13530,
											"end": 14158,
											"name": "tag",
											"source": 12,
											"value": "594"
										},
										{
											"begin": 13530,
											"end": 14158,
											"name": "JUMPDEST",
											"source": 12
										},
										{
											"begin": -1,
											"end": -1,
											"name": "POP",
											"source": -1
										},
										{
											"begin": 14171,
											"end": 14184,
											"name": "PUSH",
											"source": 12,
											"value": "0"
										},
										{
											"begin": 14171,
											"end": 14199,
											"name": "SSTORE",
											"source": 12
										},
										{
											"begin": 14219,
											"end": 14279,
											"name": "PUSH [tag]",
											"source": 12,
											"value": "505"
										},
										{
											"begin": 10901,
											"end": 11260,
											"name": "JUMP",
											"source": 12
										},
										{
											"begin": -1,
											"end": -1,
											"name": "tag",
											"source": -1,
											"value": "254"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "JUMPDEST",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "DUP3",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "DUP1",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SLOAD",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH [tag]",
											"source": -1,
											"value": "599"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SWAP1",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH [tag]",
											"source": -1,
											"value": "257"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "JUMP",
											"source": -1,
											"value": "[in]"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "tag",
											"source": -1,
											"value": "599"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "JUMPDEST",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SWAP1",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "0"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "MSTORE",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "20"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "0"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "KECCAK256",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SWAP1",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1F"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "ADD",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "20"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SWAP1",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "DIV",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "DUP2",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "ADD",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SWAP3",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "DUP3",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH [tag]",
											"source": -1,
											"value": "601"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "JUMPI",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "0"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "DUP6",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SSTORE",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH [tag]",
											"source": -1,
											"value": "604"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "JUMP",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "tag",
											"source": -1,
											"value": "601"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "JUMPDEST",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "DUP3",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1F"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "LT",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH [tag]",
											"source": -1,
											"value": "602"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "JUMPI",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "DUP1",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "MLOAD",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "FF"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "NOT",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "AND",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "DUP4",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "DUP1",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "ADD",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "OR",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "DUP6",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SSTORE",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH [tag]",
											"source": -1,
											"value": "604"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "JUMP",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "tag",
											"source": -1,
											"value": "602"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "JUMPDEST",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "DUP3",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "DUP1",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "ADD",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "ADD",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "DUP6",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SSTORE",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "DUP3",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "ISZERO",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH [tag]",
											"source": -1,
											"value": "604"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "JUMPI",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SWAP2",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "DUP3",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "ADD",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "tag",
											"source": -1,
											"value": "603"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "JUMPDEST",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "DUP3",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "DUP2",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "GT",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "ISZERO",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH [tag]",
											"source": -1,
											"value": "604"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "JUMPI",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "DUP3",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "MLOAD",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "DUP3",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SSTORE",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SWAP2",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "20"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "ADD",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SWAP2",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SWAP1",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "ADD",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SWAP1",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH [tag]",
											"source": -1,
											"value": "603"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "JUMP",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "tag",
											"source": -1,
											"value": "604"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "JUMPDEST",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "POP",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH [tag]",
											"source": -1,
											"value": "605"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SWAP3",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SWAP2",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "POP",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH [tag]",
											"source": -1,
											"value": "606"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "JUMP",
											"source": -1,
											"value": "[in]"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "tag",
											"source": -1,
											"value": "605"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "JUMPDEST",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "POP",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SWAP1",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "JUMP",
											"source": -1,
											"value": "[out]"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "tag",
											"source": -1,
											"value": "606"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "JUMPDEST",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "tag",
											"source": -1,
											"value": "607"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "JUMPDEST",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "DUP1",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "DUP3",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "GT",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "ISZERO",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH [tag]",
											"source": -1,
											"value": "605"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "JUMPI",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "0"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "DUP2",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SSTORE",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "ADD",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH [tag]",
											"source": -1,
											"value": "607"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "JUMP",
											"source": -1
										},
										{
											"begin": 14,
											"end": 145,
											"name": "tag",
											"source": 13,
											"value": "609"
										},
										{
											"begin": 14,
											"end": 145,
											"name": "JUMPDEST",
											"source": 13
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "E0"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SHL",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SUB",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "NOT",
											"source": -1
										},
										{
											"begin": 88,
											"end": 120,
											"name": "DUP2",
											"source": 13
										},
										{
											"begin": 88,
											"end": 120,
											"name": "AND",
											"source": 13
										},
										{
											"begin": 78,
											"end": 121,
											"name": "DUP2",
											"source": 13
										},
										{
											"begin": 78,
											"end": 121,
											"name": "EQ",
											"source": 13
										},
										{
											"begin": 68,
											"end": 139,
											"name": "PUSH [tag]",
											"source": 13,
											"value": "406"
										},
										{
											"begin": 68,
											"end": 139,
											"name": "JUMPI",
											"source": 13
										},
										{
											"begin": 135,
											"end": 136,
											"name": "PUSH",
											"source": 13,
											"value": "0"
										},
										{
											"begin": 132,
											"end": 133,
											"name": "DUP1",
											"source": 13
										},
										{
											"begin": 125,
											"end": 137,
											"name": "REVERT",
											"source": 13
										},
										{
											"begin": 150,
											"end": 395,
											"name": "tag",
											"source": 13,
											"value": "55"
										},
										{
											"begin": 150,
											"end": 395,
											"name": "JUMPDEST",
											"source": 13
										},
										{
											"begin": 208,
											"end": 214,
											"name": "PUSH",
											"source": 13,
											"value": "0"
										},
										{
											"begin": 261,
											"end": 263,
											"name": "PUSH",
											"source": 13,
											"value": "20"
										},
										{
											"begin": 249,
											"end": 258,
											"name": "DUP3",
											"source": 13
										},
										{
											"begin": 240,
											"end": 247,
											"name": "DUP5",
											"source": 13
										},
										{
											"begin": 236,
											"end": 259,
											"name": "SUB",
											"source": 13
										},
										{
											"begin": 232,
											"end": 264,
											"name": "SLT",
											"source": 13
										},
										{
											"begin": 229,
											"end": 281,
											"name": "ISZERO",
											"source": 13
										},
										{
											"begin": 229,
											"end": 281,
											"name": "PUSH [tag]",
											"source": 13,
											"value": "624"
										},
										{
											"begin": 229,
											"end": 281,
											"name": "JUMPI",
											"source": 13
										},
										{
											"begin": 277,
											"end": 278,
											"name": "PUSH",
											"source": 13,
											"value": "0"
										},
										{
											"begin": 274,
											"end": 275,
											"name": "DUP1",
											"source": 13
										},
										{
											"begin": 267,
											"end": 279,
											"name": "REVERT",
											"source": 13
										},
										{
											"begin": 229,
											"end": 281,
											"name": "tag",
											"source": 13,
											"value": "624"
										},
										{
											"begin": 229,
											"end": 281,
											"name": "JUMPDEST",
											"source": 13
										},
										{
											"begin": 316,
											"end": 325,
											"name": "DUP2",
											"source": 13
										},
										{
											"begin": 303,
											"end": 326,
											"name": "CALLDATALOAD",
											"source": 13
										},
										{
											"begin": 335,
											"end": 365,
											"name": "PUSH [tag]",
											"source": 13,
											"value": "458"
										},
										{
											"begin": 359,
											"end": 364,
											"name": "DUP2",
											"source": 13
										},
										{
											"begin": 335,
											"end": 365,
											"name": "PUSH [tag]",
											"source": 13,
											"value": "609"
										},
										{
											"begin": 335,
											"end": 365,
											"name": "JUMP",
											"source": 13,
											"value": "[in]"
										},
										{
											"begin": 592,
											"end": 765,
											"name": "tag",
											"source": 13,
											"value": "610"
										},
										{
											"begin": 592,
											"end": 765,
											"name": "JUMPDEST",
											"source": 13
										},
										{
											"begin": 660,
											"end": 680,
											"name": "DUP1",
											"source": 13
										},
										{
											"begin": 660,
											"end": 680,
											"name": "CALLDATALOAD",
											"source": 13
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "A0"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SHL",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SUB",
											"source": -1
										},
										{
											"begin": 709,
											"end": 740,
											"name": "DUP2",
											"source": 13
										},
										{
											"begin": 709,
											"end": 740,
											"name": "AND",
											"source": 13
										},
										{
											"begin": 699,
											"end": 741,
											"name": "DUP2",
											"source": 13
										},
										{
											"begin": 699,
											"end": 741,
											"name": "EQ",
											"source": 13
										},
										{
											"begin": 689,
											"end": 759,
											"name": "PUSH [tag]",
											"source": 13,
											"value": "628"
										},
										{
											"begin": 689,
											"end": 759,
											"name": "JUMPI",
											"source": 13
										},
										{
											"begin": 755,
											"end": 756,
											"name": "PUSH",
											"source": 13,
											"value": "0"
										},
										{
											"begin": 752,
											"end": 753,
											"name": "DUP1",
											"source": 13
										},
										{
											"begin": 745,
											"end": 757,
											"name": "REVERT",
											"source": 13
										},
										{
											"begin": 689,
											"end": 759,
											"name": "tag",
											"source": 13,
											"value": "628"
										},
										{
											"begin": 689,
											"end": 759,
											"name": "JUMPDEST",
											"source": 13
										},
										{
											"begin": 592,
											"end": 765,
											"name": "SWAP2",
											"source": 13
										},
										{
											"begin": 592,
											"end": 765,
											"name": "SWAP1",
											"source": 13
										},
										{
											"begin": 592,
											"end": 765,
											"name": "POP",
											"source": 13
										},
										{
											"begin": 592,
											"end": 765,
											"name": "JUMP",
											"source": 13,
											"value": "[out]"
										},
										{
											"begin": 770,
											"end": 956,
											"name": "tag",
											"source": 13,
											"value": "62"
										},
										{
											"begin": 770,
											"end": 956,
											"name": "JUMPDEST",
											"source": 13
										},
										{
											"begin": 829,
											"end": 835,
											"name": "PUSH",
											"source": 13,
											"value": "0"
										},
										{
											"begin": 882,
											"end": 884,
											"name": "PUSH",
											"source": 13,
											"value": "20"
										},
										{
											"begin": 870,
											"end": 879,
											"name": "DUP3",
											"source": 13
										},
										{
											"begin": 861,
											"end": 868,
											"name": "DUP5",
											"source": 13
										},
										{
											"begin": 857,
											"end": 880,
											"name": "SUB",
											"source": 13
										},
										{
											"begin": 853,
											"end": 885,
											"name": "SLT",
											"source": 13
										},
										{
											"begin": 850,
											"end": 902,
											"name": "ISZERO",
											"source": 13
										},
										{
											"begin": 850,
											"end": 902,
											"name": "PUSH [tag]",
											"source": 13,
											"value": "630"
										},
										{
											"begin": 850,
											"end": 902,
											"name": "JUMPI",
											"source": 13
										},
										{
											"begin": 898,
											"end": 899,
											"name": "PUSH",
											"source": 13,
											"value": "0"
										},
										{
											"begin": 895,
											"end": 896,
											"name": "DUP1",
											"source": 13
										},
										{
											"begin": 888,
											"end": 900,
											"name": "REVERT",
											"source": 13
										},
										{
											"begin": 850,
											"end": 902,
											"name": "tag",
											"source": 13,
											"value": "630"
										},
										{
											"begin": 850,
											"end": 902,
											"name": "JUMPDEST",
											"source": 13
										},
										{
											"begin": 921,
											"end": 950,
											"name": "PUSH [tag]",
											"source": 13,
											"value": "458"
										},
										{
											"begin": 940,
											"end": 949,
											"name": "DUP3",
											"source": 13
										},
										{
											"begin": 921,
											"end": 950,
											"name": "PUSH [tag]",
											"source": 13,
											"value": "610"
										},
										{
											"begin": 921,
											"end": 950,
											"name": "JUMP",
											"source": 13,
											"value": "[in]"
										},
										{
											"begin": 1143,
											"end": 1270,
											"name": "tag",
											"source": 13,
											"value": "365"
										},
										{
											"begin": 1143,
											"end": 1270,
											"name": "JUMPDEST",
											"source": 13
										},
										{
											"begin": 1204,
											"end": 1214,
											"name": "PUSH",
											"source": 13,
											"value": "4E487B71"
										},
										{
											"begin": 1199,
											"end": 1202,
											"name": "PUSH",
											"source": 13,
											"value": "E0"
										},
										{
											"begin": 1195,
											"end": 1215,
											"name": "SHL",
											"source": 13
										},
										{
											"begin": 1192,
											"end": 1193,
											"name": "PUSH",
											"source": 13,
											"value": "0"
										},
										{
											"begin": 1185,
											"end": 1216,
											"name": "MSTORE",
											"source": 13
										},
										{
											"begin": 1235,
											"end": 1239,
											"name": "PUSH",
											"source": 13,
											"value": "41"
										},
										{
											"begin": 1232,
											"end": 1233,
											"name": "PUSH",
											"source": 13,
											"value": "4"
										},
										{
											"begin": 1225,
											"end": 1240,
											"name": "MSTORE",
											"source": 13
										},
										{
											"begin": 1259,
											"end": 1263,
											"name": "PUSH",
											"source": 13,
											"value": "24"
										},
										{
											"begin": 1256,
											"end": 1257,
											"name": "PUSH",
											"source": 13,
											"value": "0"
										},
										{
											"begin": 1249,
											"end": 1264,
											"name": "REVERT",
											"source": 13
										},
										{
											"begin": 1275,
											"end": 1550,
											"name": "tag",
											"source": 13,
											"value": "611"
										},
										{
											"begin": 1275,
											"end": 1550,
											"name": "JUMPDEST",
											"source": 13
										},
										{
											"begin": 1346,
											"end": 1348,
											"name": "PUSH",
											"source": 13,
											"value": "40"
										},
										{
											"begin": 1340,
											"end": 1349,
											"name": "MLOAD",
											"source": 13
										},
										{
											"begin": 1411,
											"end": 1413,
											"name": "PUSH",
											"source": 13,
											"value": "1F"
										},
										{
											"begin": 1392,
											"end": 1405,
											"name": "DUP3",
											"source": 13
										},
										{
											"begin": 1392,
											"end": 1405,
											"name": "ADD",
											"source": 13
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1F"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "NOT",
											"source": -1
										},
										{
											"begin": 1388,
											"end": 1415,
											"name": "AND",
											"source": 13
										},
										{
											"begin": 1376,
											"end": 1416,
											"name": "DUP2",
											"source": 13
										},
										{
											"begin": 1376,
											"end": 1416,
											"name": "ADD",
											"source": 13
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "40"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SHL",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SUB",
											"source": -1
										},
										{
											"begin": 1431,
											"end": 1465,
											"name": "DUP2",
											"source": 13
										},
										{
											"begin": 1431,
											"end": 1465,
											"name": "GT",
											"source": 13
										},
										{
											"begin": 1467,
											"end": 1489,
											"name": "DUP3",
											"source": 13
										},
										{
											"begin": 1467,
											"end": 1489,
											"name": "DUP3",
											"source": 13
										},
										{
											"begin": 1467,
											"end": 1489,
											"name": "LT",
											"source": 13
										},
										{
											"begin": 1428,
											"end": 1490,
											"name": "OR",
											"source": 13
										},
										{
											"begin": 1425,
											"end": 1513,
											"name": "ISZERO",
											"source": 13
										},
										{
											"begin": 1425,
											"end": 1513,
											"name": "PUSH [tag]",
											"source": 13,
											"value": "636"
										},
										{
											"begin": 1425,
											"end": 1513,
											"name": "JUMPI",
											"source": 13
										},
										{
											"begin": 1493,
											"end": 1511,
											"name": "PUSH [tag]",
											"source": 13,
											"value": "636"
										},
										{
											"begin": 1493,
											"end": 1511,
											"name": "PUSH [tag]",
											"source": 13,
											"value": "365"
										},
										{
											"begin": 1493,
											"end": 1511,
											"name": "JUMP",
											"source": 13,
											"value": "[in]"
										},
										{
											"begin": 1493,
											"end": 1511,
											"name": "tag",
											"source": 13,
											"value": "636"
										},
										{
											"begin": 1493,
											"end": 1511,
											"name": "JUMPDEST",
											"source": 13
										},
										{
											"begin": 1529,
											"end": 1531,
											"name": "PUSH",
											"source": 13,
											"value": "40"
										},
										{
											"begin": 1522,
											"end": 1544,
											"name": "MSTORE",
											"source": 13
										},
										{
											"begin": 1275,
											"end": 1550,
											"name": "SWAP2",
											"source": 13
										},
										{
											"begin": 1275,
											"end": 1550,
											"name": "SWAP1",
											"source": 13
										},
										{
											"begin": -1,
											"end": -1,
											"name": "POP",
											"source": -1
										},
										{
											"begin": 1275,
											"end": 1550,
											"name": "JUMP",
											"source": 13,
											"value": "[out]"
										},
										{
											"begin": 1555,
											"end": 1962,
											"name": "tag",
											"source": 13,
											"value": "612"
										},
										{
											"begin": 1555,
											"end": 1962,
											"name": "JUMPDEST",
											"source": 13
										},
										{
											"begin": 1620,
											"end": 1625,
											"name": "PUSH",
											"source": 13,
											"value": "0"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "40"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SHL",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SUB",
											"source": -1
										},
										{
											"begin": 1646,
											"end": 1652,
											"name": "DUP4",
											"source": 13
										},
										{
											"begin": 1643,
											"end": 1673,
											"name": "GT",
											"source": 13
										},
										{
											"begin": 1640,
											"end": 1696,
											"name": "ISZERO",
											"source": 13
										},
										{
											"begin": 1640,
											"end": 1696,
											"name": "PUSH [tag]",
											"source": 13,
											"value": "639"
										},
										{
											"begin": 1640,
											"end": 1696,
											"name": "JUMPI",
											"source": 13
										},
										{
											"begin": 1676,
											"end": 1694,
											"name": "PUSH [tag]",
											"source": 13,
											"value": "639"
										},
										{
											"begin": 1676,
											"end": 1694,
											"name": "PUSH [tag]",
											"source": 13,
											"value": "365"
										},
										{
											"begin": 1676,
											"end": 1694,
											"name": "JUMP",
											"source": 13,
											"value": "[in]"
										},
										{
											"begin": 1676,
											"end": 1694,
											"name": "tag",
											"source": 13,
											"value": "639"
										},
										{
											"begin": 1676,
											"end": 1694,
											"name": "JUMPDEST",
											"source": 13
										},
										{
											"begin": 1714,
											"end": 1771,
											"name": "PUSH [tag]",
											"source": 13,
											"value": "640"
										},
										{
											"begin": 1759,
											"end": 1761,
											"name": "PUSH",
											"source": 13,
											"value": "1F"
										},
										{
											"begin": 1738,
											"end": 1753,
											"name": "DUP5",
											"source": 13
										},
										{
											"begin": 1738,
											"end": 1753,
											"name": "ADD",
											"source": 13
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1F"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "NOT",
											"source": -1
										},
										{
											"begin": 1734,
											"end": 1763,
											"name": "AND",
											"source": 13
										},
										{
											"begin": 1765,
											"end": 1769,
											"name": "PUSH",
											"source": 13,
											"value": "20"
										},
										{
											"begin": 1730,
											"end": 1770,
											"name": "ADD",
											"source": 13
										},
										{
											"begin": 1714,
											"end": 1771,
											"name": "PUSH [tag]",
											"source": 13,
											"value": "611"
										},
										{
											"begin": 1714,
											"end": 1771,
											"name": "JUMP",
											"source": 13,
											"value": "[in]"
										},
										{
											"begin": 1714,
											"end": 1771,
											"name": "tag",
											"source": 13,
											"value": "640"
										},
										{
											"begin": 1714,
											"end": 1771,
											"name": "JUMPDEST",
											"source": 13
										},
										{
											"begin": 1705,
											"end": 1771,
											"name": "SWAP1",
											"source": 13
										},
										{
											"begin": 1705,
											"end": 1771,
											"name": "POP",
											"source": 13
										},
										{
											"begin": 1794,
											"end": 1800,
											"name": "DUP3",
											"source": 13
										},
										{
											"begin": 1787,
											"end": 1792,
											"name": "DUP2",
											"source": 13
										},
										{
											"begin": 1780,
											"end": 1801,
											"name": "MSTORE",
											"source": 13
										},
										{
											"begin": 1834,
											"end": 1837,
											"name": "DUP4",
											"source": 13
										},
										{
											"begin": 1825,
											"end": 1831,
											"name": "DUP4",
											"source": 13
										},
										{
											"begin": 1820,
											"end": 1823,
											"name": "DUP4",
											"source": 13
										},
										{
											"begin": 1816,
											"end": 1832,
											"name": "ADD",
											"source": 13
										},
										{
											"begin": 1813,
											"end": 1838,
											"name": "GT",
											"source": 13
										},
										{
											"begin": 1810,
											"end": 1855,
											"name": "ISZERO",
											"source": 13
										},
										{
											"begin": 1810,
											"end": 1855,
											"name": "PUSH [tag]",
											"source": 13,
											"value": "641"
										},
										{
											"begin": 1810,
											"end": 1855,
											"name": "JUMPI",
											"source": 13
										},
										{
											"begin": 1851,
											"end": 1852,
											"name": "PUSH",
											"source": 13,
											"value": "0"
										},
										{
											"begin": 1848,
											"end": 1849,
											"name": "DUP1",
											"source": 13
										},
										{
											"begin": 1841,
											"end": 1853,
											"name": "REVERT",
											"source": 13
										},
										{
											"begin": 1810,
											"end": 1855,
											"name": "tag",
											"source": 13,
											"value": "641"
										},
										{
											"begin": 1810,
											"end": 1855,
											"name": "JUMPDEST",
											"source": 13
										},
										{
											"begin": 1900,
											"end": 1906,
											"name": "DUP3",
											"source": 13
										},
										{
											"begin": 1895,
											"end": 1898,
											"name": "DUP3",
											"source": 13
										},
										{
											"begin": 1888,
											"end": 1892,
											"name": "PUSH",
											"source": 13,
											"value": "20"
										},
										{
											"begin": 1881,
											"end": 1886,
											"name": "DUP4",
											"source": 13
										},
										{
											"begin": 1877,
											"end": 1893,
											"name": "ADD",
											"source": 13
										},
										{
											"begin": 1864,
											"end": 1907,
											"name": "CALLDATACOPY",
											"source": 13
										},
										{
											"begin": 1954,
											"end": 1955,
											"name": "PUSH",
											"source": 13,
											"value": "0"
										},
										{
											"begin": 1947,
											"end": 1951,
											"name": "PUSH",
											"source": 13,
											"value": "20"
										},
										{
											"begin": 1938,
											"end": 1944,
											"name": "DUP5",
											"source": 13
										},
										{
											"begin": 1931,
											"end": 1936,
											"name": "DUP4",
											"source": 13
										},
										{
											"begin": 1927,
											"end": 1945,
											"name": "ADD",
											"source": 13
										},
										{
											"begin": 1923,
											"end": 1952,
											"name": "ADD",
											"source": 13
										},
										{
											"begin": 1916,
											"end": 1956,
											"name": "MSTORE",
											"source": 13
										},
										{
											"begin": 1555,
											"end": 1962,
											"name": "SWAP4",
											"source": 13
										},
										{
											"begin": 1555,
											"end": 1962,
											"name": "SWAP3",
											"source": 13
										},
										{
											"begin": 1555,
											"end": 1962,
											"name": "POP",
											"source": 13
										},
										{
											"begin": 1555,
											"end": 1962,
											"name": "POP",
											"source": 13
										},
										{
											"begin": 1555,
											"end": 1962,
											"name": "POP",
											"source": 13
										},
										{
											"begin": 1555,
											"end": 1962,
											"name": "JUMP",
											"source": 13,
											"value": "[out]"
										},
										{
											"begin": 1967,
											"end": 2418,
											"name": "tag",
											"source": 13,
											"value": "69"
										},
										{
											"begin": 1967,
											"end": 2418,
											"name": "JUMPDEST",
											"source": 13
										},
										{
											"begin": 2036,
											"end": 2042,
											"name": "PUSH",
											"source": 13,
											"value": "0"
										},
										{
											"begin": 2089,
											"end": 2091,
											"name": "PUSH",
											"source": 13,
											"value": "20"
										},
										{
											"begin": 2077,
											"end": 2086,
											"name": "DUP3",
											"source": 13
										},
										{
											"begin": 2068,
											"end": 2075,
											"name": "DUP5",
											"source": 13
										},
										{
											"begin": 2064,
											"end": 2087,
											"name": "SUB",
											"source": 13
										},
										{
											"begin": 2060,
											"end": 2092,
											"name": "SLT",
											"source": 13
										},
										{
											"begin": 2057,
											"end": 2109,
											"name": "ISZERO",
											"source": 13
										},
										{
											"begin": 2057,
											"end": 2109,
											"name": "PUSH [tag]",
											"source": 13,
											"value": "643"
										},
										{
											"begin": 2057,
											"end": 2109,
											"name": "JUMPI",
											"source": 13
										},
										{
											"begin": 2105,
											"end": 2106,
											"name": "PUSH",
											"source": 13,
											"value": "0"
										},
										{
											"begin": 2102,
											"end": 2103,
											"name": "DUP1",
											"source": 13
										},
										{
											"begin": 2095,
											"end": 2107,
											"name": "REVERT",
											"source": 13
										},
										{
											"begin": 2057,
											"end": 2109,
											"name": "tag",
											"source": 13,
											"value": "643"
										},
										{
											"begin": 2057,
											"end": 2109,
											"name": "JUMPDEST",
											"source": 13
										},
										{
											"begin": 2145,
											"end": 2154,
											"name": "DUP2",
											"source": 13
										},
										{
											"begin": 2132,
											"end": 2155,
											"name": "CALLDATALOAD",
											"source": 13
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "40"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SHL",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SUB",
											"source": -1
										},
										{
											"begin": 2170,
											"end": 2176,
											"name": "DUP2",
											"source": 13
										},
										{
											"begin": 2167,
											"end": 2197,
											"name": "GT",
											"source": 13
										},
										{
											"begin": 2164,
											"end": 2214,
											"name": "ISZERO",
											"source": 13
										},
										{
											"begin": 2164,
											"end": 2214,
											"name": "PUSH [tag]",
											"source": 13,
											"value": "644"
										},
										{
											"begin": 2164,
											"end": 2214,
											"name": "JUMPI",
											"source": 13
										},
										{
											"begin": 2210,
											"end": 2211,
											"name": "PUSH",
											"source": 13,
											"value": "0"
										},
										{
											"begin": 2207,
											"end": 2208,
											"name": "DUP1",
											"source": 13
										},
										{
											"begin": 2200,
											"end": 2212,
											"name": "REVERT",
											"source": 13
										},
										{
											"begin": 2164,
											"end": 2214,
											"name": "tag",
											"source": 13,
											"value": "644"
										},
										{
											"begin": 2164,
											"end": 2214,
											"name": "JUMPDEST",
											"source": 13
										},
										{
											"begin": 2233,
											"end": 2255,
											"name": "DUP3",
											"source": 13
										},
										{
											"begin": 2233,
											"end": 2255,
											"name": "ADD",
											"source": 13
										},
										{
											"begin": 2286,
											"end": 2290,
											"name": "PUSH",
											"source": 13,
											"value": "1F"
										},
										{
											"begin": 2278,
											"end": 2291,
											"name": "DUP2",
											"source": 13
										},
										{
											"begin": 2278,
											"end": 2291,
											"name": "ADD",
											"source": 13
										},
										{
											"begin": 2274,
											"end": 2301,
											"name": "DUP5",
											"source": 13
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SGT",
											"source": -1
										},
										{
											"begin": 2264,
											"end": 2319,
											"name": "PUSH [tag]",
											"source": 13,
											"value": "645"
										},
										{
											"begin": 2264,
											"end": 2319,
											"name": "JUMPI",
											"source": 13
										},
										{
											"begin": 2315,
											"end": 2316,
											"name": "PUSH",
											"source": 13,
											"value": "0"
										},
										{
											"begin": 2312,
											"end": 2313,
											"name": "DUP1",
											"source": 13
										},
										{
											"begin": 2305,
											"end": 2317,
											"name": "REVERT",
											"source": 13
										},
										{
											"begin": 2264,
											"end": 2319,
											"name": "tag",
											"source": 13,
											"value": "645"
										},
										{
											"begin": 2264,
											"end": 2319,
											"name": "JUMPDEST",
											"source": 13
										},
										{
											"begin": 2338,
											"end": 2412,
											"name": "PUSH [tag]",
											"source": 13,
											"value": "542"
										},
										{
											"begin": 2404,
											"end": 2411,
											"name": "DUP5",
											"source": 13
										},
										{
											"begin": 2399,
											"end": 2401,
											"name": "DUP3",
											"source": 13
										},
										{
											"begin": 2386,
											"end": 2402,
											"name": "CALLDATALOAD",
											"source": 13
										},
										{
											"begin": 2381,
											"end": 2383,
											"name": "PUSH",
											"source": 13,
											"value": "20"
										},
										{
											"begin": 2377,
											"end": 2379,
											"name": "DUP5",
											"source": 13
										},
										{
											"begin": 2373,
											"end": 2384,
											"name": "ADD",
											"source": 13
										},
										{
											"begin": 2338,
											"end": 2412,
											"name": "PUSH [tag]",
											"source": 13,
											"value": "612"
										},
										{
											"begin": 2338,
											"end": 2412,
											"name": "JUMP",
											"source": 13,
											"value": "[in]"
										},
										{
											"begin": 2423,
											"end": 2681,
											"name": "tag",
											"source": 13,
											"value": "613"
										},
										{
											"begin": 2423,
											"end": 2681,
											"name": "JUMPDEST",
											"source": 13
										},
										{
											"begin": 2495,
											"end": 2496,
											"name": "PUSH",
											"source": 13,
											"value": "0"
										},
										{
											"begin": 2505,
											"end": 2618,
											"name": "tag",
											"source": 13,
											"value": "648"
										},
										{
											"begin": 2505,
											"end": 2618,
											"name": "JUMPDEST",
											"source": 13
										},
										{
											"begin": 2519,
											"end": 2525,
											"name": "DUP4",
											"source": 13
										},
										{
											"begin": 2516,
											"end": 2517,
											"name": "DUP2",
											"source": 13
										},
										{
											"begin": 2513,
											"end": 2526,
											"name": "LT",
											"source": 13
										},
										{
											"begin": 2505,
											"end": 2618,
											"name": "ISZERO",
											"source": 13
										},
										{
											"begin": 2505,
											"end": 2618,
											"name": "PUSH [tag]",
											"source": 13,
											"value": "650"
										},
										{
											"begin": 2505,
											"end": 2618,
											"name": "JUMPI",
											"source": 13
										},
										{
											"begin": 2595,
											"end": 2606,
											"name": "DUP2",
											"source": 13
										},
										{
											"begin": 2595,
											"end": 2606,
											"name": "DUP2",
											"source": 13
										},
										{
											"begin": 2595,
											"end": 2606,
											"name": "ADD",
											"source": 13
										},
										{
											"begin": 2589,
											"end": 2607,
											"name": "MLOAD",
											"source": 13
										},
										{
											"begin": 2576,
											"end": 2587,
											"name": "DUP4",
											"source": 13
										},
										{
											"begin": 2576,
											"end": 2587,
											"name": "DUP3",
											"source": 13
										},
										{
											"begin": 2576,
											"end": 2587,
											"name": "ADD",
											"source": 13
										},
										{
											"begin": 2569,
											"end": 2608,
											"name": "MSTORE",
											"source": 13
										},
										{
											"begin": 2541,
											"end": 2543,
											"name": "PUSH",
											"source": 13,
											"value": "20"
										},
										{
											"begin": 2534,
											"end": 2544,
											"name": "ADD",
											"source": 13
										},
										{
											"begin": 2505,
											"end": 2618,
											"name": "PUSH [tag]",
											"source": 13,
											"value": "648"
										},
										{
											"begin": 2505,
											"end": 2618,
											"name": "JUMP",
											"source": 13
										},
										{
											"begin": 2505,
											"end": 2618,
											"name": "tag",
											"source": 13,
											"value": "650"
										},
										{
											"begin": 2505,
											"end": 2618,
											"name": "JUMPDEST",
											"source": 13
										},
										{
											"begin": 2636,
											"end": 2642,
											"name": "DUP4",
											"source": 13
										},
										{
											"begin": 2633,
											"end": 2634,
											"name": "DUP2",
											"source": 13
										},
										{
											"begin": 2630,
											"end": 2643,
											"name": "GT",
											"source": 13
										},
										{
											"begin": 2627,
											"end": 2675,
											"name": "ISZERO",
											"source": 13
										},
										{
											"begin": 2627,
											"end": 2675,
											"name": "PUSH [tag]",
											"source": 13,
											"value": "427"
										},
										{
											"begin": 2627,
											"end": 2675,
											"name": "JUMPI",
											"source": 13
										},
										{
											"begin": -1,
											"end": -1,
											"name": "POP",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "POP",
											"source": -1
										},
										{
											"begin": 2671,
											"end": 2672,
											"name": "PUSH",
											"source": 13,
											"value": "0"
										},
										{
											"begin": 2653,
											"end": 2669,
											"name": "SWAP2",
											"source": 13
										},
										{
											"begin": 2653,
											"end": 2669,
											"name": "ADD",
											"source": 13
										},
										{
											"begin": 2646,
											"end": 2673,
											"name": "MSTORE",
											"source": 13
										},
										{
											"begin": 2423,
											"end": 2681,
											"name": "JUMP",
											"source": 13,
											"value": "[out]"
										},
										{
											"begin": 2686,
											"end": 2955,
											"name": "tag",
											"source": 13,
											"value": "614"
										},
										{
											"begin": 2686,
											"end": 2955,
											"name": "JUMPDEST",
											"source": 13
										},
										{
											"begin": 2739,
											"end": 2742,
											"name": "PUSH",
											"source": 13,
											"value": "0"
										},
										{
											"begin": 2777,
											"end": 2782,
											"name": "DUP2",
											"source": 13
										},
										{
											"begin": 2771,
											"end": 2783,
											"name": "MLOAD",
											"source": 13
										},
										{
											"begin": 2804,
											"end": 2810,
											"name": "DUP1",
											"source": 13
										},
										{
											"begin": 2799,
											"end": 2802,
											"name": "DUP5",
											"source": 13
										},
										{
											"begin": 2792,
											"end": 2811,
											"name": "MSTORE",
											"source": 13
										},
										{
											"begin": 2820,
											"end": 2883,
											"name": "PUSH [tag]",
											"source": 13,
											"value": "653"
										},
										{
											"begin": 2876,
											"end": 2882,
											"name": "DUP2",
											"source": 13
										},
										{
											"begin": 2869,
											"end": 2873,
											"name": "PUSH",
											"source": 13,
											"value": "20"
										},
										{
											"begin": 2864,
											"end": 2867,
											"name": "DUP7",
											"source": 13
										},
										{
											"begin": 2860,
											"end": 2874,
											"name": "ADD",
											"source": 13
										},
										{
											"begin": 2853,
											"end": 2857,
											"name": "PUSH",
											"source": 13,
											"value": "20"
										},
										{
											"begin": 2846,
											"end": 2851,
											"name": "DUP7",
											"source": 13
										},
										{
											"begin": 2842,
											"end": 2858,
											"name": "ADD",
											"source": 13
										},
										{
											"begin": 2820,
											"end": 2883,
											"name": "PUSH [tag]",
											"source": 13,
											"value": "613"
										},
										{
											"begin": 2820,
											"end": 2883,
											"name": "JUMP",
											"source": 13,
											"value": "[in]"
										},
										{
											"begin": 2820,
											"end": 2883,
											"name": "tag",
											"source": 13,
											"value": "653"
										},
										{
											"begin": 2820,
											"end": 2883,
											"name": "JUMPDEST",
											"source": 13
										},
										{
											"begin": 2937,
											"end": 2939,
											"name": "PUSH",
											"source": 13,
											"value": "1F"
										},
										{
											"begin": 2916,
											"end": 2931,
											"name": "ADD",
											"source": 13
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1F"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "NOT",
											"source": -1
										},
										{
											"begin": 2912,
											"end": 2941,
											"name": "AND",
											"source": 13
										},
										{
											"begin": 2903,
											"end": 2942,
											"name": "SWAP3",
											"source": 13
										},
										{
											"begin": 2903,
											"end": 2942,
											"name": "SWAP1",
											"source": 13
										},
										{
											"begin": 2903,
											"end": 2942,
											"name": "SWAP3",
											"source": 13
										},
										{
											"begin": 2903,
											"end": 2942,
											"name": "ADD",
											"source": 13
										},
										{
											"begin": 2944,
											"end": 2948,
											"name": "PUSH",
											"source": 13,
											"value": "20"
										},
										{
											"begin": 2899,
											"end": 2949,
											"name": "ADD",
											"source": 13
										},
										{
											"begin": 2899,
											"end": 2949,
											"name": "SWAP3",
											"source": 13
										},
										{
											"begin": 2686,
											"end": 2955,
											"name": "SWAP2",
											"source": 13
										},
										{
											"begin": -1,
											"end": -1,
											"name": "POP",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "POP",
											"source": -1
										},
										{
											"begin": 2686,
											"end": 2955,
											"name": "JUMP",
											"source": 13,
											"value": "[out]"
										},
										{
											"begin": 2960,
											"end": 3191,
											"name": "tag",
											"source": 13,
											"value": "75"
										},
										{
											"begin": 2960,
											"end": 3191,
											"name": "JUMPDEST",
											"source": 13
										},
										{
											"begin": 3109,
											"end": 3111,
											"name": "PUSH",
											"source": 13,
											"value": "20"
										},
										{
											"begin": 3098,
											"end": 3107,
											"name": "DUP2",
											"source": 13
										},
										{
											"begin": 3091,
											"end": 3112,
											"name": "MSTORE",
											"source": 13
										},
										{
											"begin": 3072,
											"end": 3076,
											"name": "PUSH",
											"source": 13,
											"value": "0"
										},
										{
											"begin": 3129,
											"end": 3185,
											"name": "PUSH [tag]",
											"source": 13,
											"value": "458"
										},
										{
											"begin": 3181,
											"end": 3183,
											"name": "PUSH",
											"source": 13,
											"value": "20"
										},
										{
											"begin": 3170,
											"end": 3179,
											"name": "DUP4",
											"source": 13
										},
										{
											"begin": 3166,
											"end": 3184,
											"name": "ADD",
											"source": 13
										},
										{
											"begin": 3158,
											"end": 3164,
											"name": "DUP5",
											"source": 13
										},
										{
											"begin": 3129,
											"end": 3185,
											"name": "PUSH [tag]",
											"source": 13,
											"value": "614"
										},
										{
											"begin": 3129,
											"end": 3185,
											"name": "JUMP",
											"source": 13,
											"value": "[in]"
										},
										{
											"begin": 3196,
											"end": 3376,
											"name": "tag",
											"source": 13,
											"value": "83"
										},
										{
											"begin": 3196,
											"end": 3376,
											"name": "JUMPDEST",
											"source": 13
										},
										{
											"begin": 3255,
											"end": 3261,
											"name": "PUSH",
											"source": 13,
											"value": "0"
										},
										{
											"begin": 3308,
											"end": 3310,
											"name": "PUSH",
											"source": 13,
											"value": "20"
										},
										{
											"begin": 3296,
											"end": 3305,
											"name": "DUP3",
											"source": 13
										},
										{
											"begin": 3287,
											"end": 3294,
											"name": "DUP5",
											"source": 13
										},
										{
											"begin": 3283,
											"end": 3306,
											"name": "SUB",
											"source": 13
										},
										{
											"begin": 3279,
											"end": 3311,
											"name": "SLT",
											"source": 13
										},
										{
											"begin": 3276,
											"end": 3328,
											"name": "ISZERO",
											"source": 13
										},
										{
											"begin": 3276,
											"end": 3328,
											"name": "PUSH [tag]",
											"source": 13,
											"value": "657"
										},
										{
											"begin": 3276,
											"end": 3328,
											"name": "JUMPI",
											"source": 13
										},
										{
											"begin": 3324,
											"end": 3325,
											"name": "PUSH",
											"source": 13,
											"value": "0"
										},
										{
											"begin": 3321,
											"end": 3322,
											"name": "DUP1",
											"source": 13
										},
										{
											"begin": 3314,
											"end": 3326,
											"name": "REVERT",
											"source": 13
										},
										{
											"begin": 3276,
											"end": 3328,
											"name": "tag",
											"source": 13,
											"value": "657"
										},
										{
											"begin": 3276,
											"end": 3328,
											"name": "JUMPDEST",
											"source": 13
										},
										{
											"begin": -1,
											"end": -1,
											"name": "POP",
											"source": -1
										},
										{
											"begin": 3347,
											"end": 3370,
											"name": "CALLDATALOAD",
											"source": 13
										},
										{
											"begin": 3347,
											"end": 3370,
											"name": "SWAP2",
											"source": 13
										},
										{
											"begin": 3196,
											"end": 3376,
											"name": "SWAP1",
											"source": 13
										},
										{
											"begin": -1,
											"end": -1,
											"name": "POP",
											"source": -1
										},
										{
											"begin": 3196,
											"end": 3376,
											"name": "JUMP",
											"source": 13,
											"value": "[out]"
										},
										{
											"begin": 3589,
											"end": 3843,
											"name": "tag",
											"source": 13,
											"value": "90"
										},
										{
											"begin": 3589,
											"end": 3843,
											"name": "JUMPDEST",
											"source": 13
										},
										{
											"begin": 3657,
											"end": 3663,
											"name": "PUSH",
											"source": 13,
											"value": "0"
										},
										{
											"begin": 3665,
											"end": 3671,
											"name": "DUP1",
											"source": 13
										},
										{
											"begin": 3718,
											"end": 3720,
											"name": "PUSH",
											"source": 13,
											"value": "40"
										},
										{
											"begin": 3706,
											"end": 3715,
											"name": "DUP4",
											"source": 13
										},
										{
											"begin": 3697,
											"end": 3704,
											"name": "DUP6",
											"source": 13
										},
										{
											"begin": 3693,
											"end": 3716,
											"name": "SUB",
											"source": 13
										},
										{
											"begin": 3689,
											"end": 3721,
											"name": "SLT",
											"source": 13
										},
										{
											"begin": 3686,
											"end": 3738,
											"name": "ISZERO",
											"source": 13
										},
										{
											"begin": 3686,
											"end": 3738,
											"name": "PUSH [tag]",
											"source": 13,
											"value": "660"
										},
										{
											"begin": 3686,
											"end": 3738,
											"name": "JUMPI",
											"source": 13
										},
										{
											"begin": 3734,
											"end": 3735,
											"name": "PUSH",
											"source": 13,
											"value": "0"
										},
										{
											"begin": 3731,
											"end": 3732,
											"name": "DUP1",
											"source": 13
										},
										{
											"begin": 3724,
											"end": 3736,
											"name": "REVERT",
											"source": 13
										},
										{
											"begin": 3686,
											"end": 3738,
											"name": "tag",
											"source": 13,
											"value": "660"
										},
										{
											"begin": 3686,
											"end": 3738,
											"name": "JUMPDEST",
											"source": 13
										},
										{
											"begin": 3757,
											"end": 3786,
											"name": "PUSH [tag]",
											"source": 13,
											"value": "661"
										},
										{
											"begin": 3776,
											"end": 3785,
											"name": "DUP4",
											"source": 13
										},
										{
											"begin": 3757,
											"end": 3786,
											"name": "PUSH [tag]",
											"source": 13,
											"value": "610"
										},
										{
											"begin": 3757,
											"end": 3786,
											"name": "JUMP",
											"source": 13,
											"value": "[in]"
										},
										{
											"begin": 3757,
											"end": 3786,
											"name": "tag",
											"source": 13,
											"value": "661"
										},
										{
											"begin": 3757,
											"end": 3786,
											"name": "JUMPDEST",
											"source": 13
										},
										{
											"begin": 3747,
											"end": 3786,
											"name": "SWAP5",
											"source": 13
										},
										{
											"begin": 3833,
											"end": 3835,
											"name": "PUSH",
											"source": 13,
											"value": "20"
										},
										{
											"begin": 3818,
											"end": 3836,
											"name": "SWAP4",
											"source": 13
										},
										{
											"begin": 3818,
											"end": 3836,
											"name": "SWAP1",
											"source": 13
										},
										{
											"begin": 3818,
											"end": 3836,
											"name": "SWAP4",
											"source": 13
										},
										{
											"begin": 3818,
											"end": 3836,
											"name": "ADD",
											"source": 13
										},
										{
											"begin": 3805,
											"end": 3837,
											"name": "CALLDATALOAD",
											"source": 13
										},
										{
											"begin": 3805,
											"end": 3837,
											"name": "SWAP4",
											"source": 13
										},
										{
											"begin": -1,
											"end": -1,
											"name": "POP",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "POP",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "POP",
											"source": -1
										},
										{
											"begin": 3589,
											"end": 3843,
											"name": "JUMP",
											"source": 13,
											"value": "[out]"
										},
										{
											"begin": 3848,
											"end": 4176,
											"name": "tag",
											"source": 13,
											"value": "104"
										},
										{
											"begin": 3848,
											"end": 4176,
											"name": "JUMPDEST",
											"source": 13
										},
										{
											"begin": 3925,
											"end": 3931,
											"name": "PUSH",
											"source": 13,
											"value": "0"
										},
										{
											"begin": 3933,
											"end": 3939,
											"name": "DUP1",
											"source": 13
										},
										{
											"begin": 3941,
											"end": 3947,
											"name": "PUSH",
											"source": 13,
											"value": "0"
										},
										{
											"begin": 3994,
											"end": 3996,
											"name": "PUSH",
											"source": 13,
											"value": "60"
										},
										{
											"begin": 3982,
											"end": 3991,
											"name": "DUP5",
											"source": 13
										},
										{
											"begin": 3973,
											"end": 3980,
											"name": "DUP7",
											"source": 13
										},
										{
											"begin": 3969,
											"end": 3992,
											"name": "SUB",
											"source": 13
										},
										{
											"begin": 3965,
											"end": 3997,
											"name": "SLT",
											"source": 13
										},
										{
											"begin": 3962,
											"end": 4014,
											"name": "ISZERO",
											"source": 13
										},
										{
											"begin": 3962,
											"end": 4014,
											"name": "PUSH [tag]",
											"source": 13,
											"value": "663"
										},
										{
											"begin": 3962,
											"end": 4014,
											"name": "JUMPI",
											"source": 13
										},
										{
											"begin": 4010,
											"end": 4011,
											"name": "PUSH",
											"source": 13,
											"value": "0"
										},
										{
											"begin": 4007,
											"end": 4008,
											"name": "DUP1",
											"source": 13
										},
										{
											"begin": 4000,
											"end": 4012,
											"name": "REVERT",
											"source": 13
										},
										{
											"begin": 3962,
											"end": 4014,
											"name": "tag",
											"source": 13,
											"value": "663"
										},
										{
											"begin": 3962,
											"end": 4014,
											"name": "JUMPDEST",
											"source": 13
										},
										{
											"begin": 4033,
											"end": 4062,
											"name": "PUSH [tag]",
											"source": 13,
											"value": "664"
										},
										{
											"begin": 4052,
											"end": 4061,
											"name": "DUP5",
											"source": 13
										},
										{
											"begin": 4033,
											"end": 4062,
											"name": "PUSH [tag]",
											"source": 13,
											"value": "610"
										},
										{
											"begin": 4033,
											"end": 4062,
											"name": "JUMP",
											"source": 13,
											"value": "[in]"
										},
										{
											"begin": 4033,
											"end": 4062,
											"name": "tag",
											"source": 13,
											"value": "664"
										},
										{
											"begin": 4033,
											"end": 4062,
											"name": "JUMPDEST",
											"source": 13
										},
										{
											"begin": 4023,
											"end": 4062,
											"name": "SWAP3",
											"source": 13
										},
										{
											"begin": 4023,
											"end": 4062,
											"name": "POP",
											"source": 13
										},
										{
											"begin": 4081,
											"end": 4119,
											"name": "PUSH [tag]",
											"source": 13,
											"value": "665"
										},
										{
											"begin": 4115,
											"end": 4117,
											"name": "PUSH",
											"source": 13,
											"value": "20"
										},
										{
											"begin": 4104,
											"end": 4113,
											"name": "DUP6",
											"source": 13
										},
										{
											"begin": 4100,
											"end": 4118,
											"name": "ADD",
											"source": 13
										},
										{
											"begin": 4081,
											"end": 4119,
											"name": "PUSH [tag]",
											"source": 13,
											"value": "610"
										},
										{
											"begin": 4081,
											"end": 4119,
											"name": "JUMP",
											"source": 13,
											"value": "[in]"
										},
										{
											"begin": 4081,
											"end": 4119,
											"name": "tag",
											"source": 13,
											"value": "665"
										},
										{
											"begin": 4081,
											"end": 4119,
											"name": "JUMPDEST",
											"source": 13
										},
										{
											"begin": 4071,
											"end": 4119,
											"name": "SWAP2",
											"source": 13
										},
										{
											"begin": 4071,
											"end": 4119,
											"name": "POP",
											"source": 13
										},
										{
											"begin": 4166,
											"end": 4168,
											"name": "PUSH",
											"source": 13,
											"value": "40"
										},
										{
											"begin": 4155,
											"end": 4164,
											"name": "DUP5",
											"source": 13
										},
										{
											"begin": 4151,
											"end": 4169,
											"name": "ADD",
											"source": 13
										},
										{
											"begin": 4138,
											"end": 4170,
											"name": "CALLDATALOAD",
											"source": 13
										},
										{
											"begin": 4128,
											"end": 4170,
											"name": "SWAP1",
											"source": 13
										},
										{
											"begin": 4128,
											"end": 4170,
											"name": "POP",
											"source": 13
										},
										{
											"begin": 3848,
											"end": 4176,
											"name": "SWAP3",
											"source": 13
										},
										{
											"begin": 3848,
											"end": 4176,
											"name": "POP",
											"source": 13
										},
										{
											"begin": 3848,
											"end": 4176,
											"name": "SWAP3",
											"source": 13
										},
										{
											"begin": 3848,
											"end": 4176,
											"name": "POP",
											"source": 13
										},
										{
											"begin": 3848,
											"end": 4176,
											"name": "SWAP3",
											"source": 13
										},
										{
											"begin": 3848,
											"end": 4176,
											"name": "JUMP",
											"source": 13,
											"value": "[out]"
										},
										{
											"begin": 4181,
											"end": 5197,
											"name": "tag",
											"source": 13,
											"value": "108"
										},
										{
											"begin": 4181,
											"end": 5197,
											"name": "JUMPDEST",
											"source": 13
										},
										{
											"begin": 4274,
											"end": 4280,
											"name": "PUSH",
											"source": 13,
											"value": "0"
										},
										{
											"begin": 4282,
											"end": 4288,
											"name": "DUP1",
											"source": 13
										},
										{
											"begin": 4335,
											"end": 4337,
											"name": "PUSH",
											"source": 13,
											"value": "40"
										},
										{
											"begin": 4323,
											"end": 4332,
											"name": "DUP4",
											"source": 13
										},
										{
											"begin": 4314,
											"end": 4321,
											"name": "DUP6",
											"source": 13
										},
										{
											"begin": 4310,
											"end": 4333,
											"name": "SUB",
											"source": 13
										},
										{
											"begin": 4306,
											"end": 4338,
											"name": "SLT",
											"source": 13
										},
										{
											"begin": 4303,
											"end": 4355,
											"name": "ISZERO",
											"source": 13
										},
										{
											"begin": 4303,
											"end": 4355,
											"name": "PUSH [tag]",
											"source": 13,
											"value": "667"
										},
										{
											"begin": 4303,
											"end": 4355,
											"name": "JUMPI",
											"source": 13
										},
										{
											"begin": 4351,
											"end": 4352,
											"name": "PUSH",
											"source": 13,
											"value": "0"
										},
										{
											"begin": 4348,
											"end": 4349,
											"name": "DUP1",
											"source": 13
										},
										{
											"begin": 4341,
											"end": 4353,
											"name": "REVERT",
											"source": 13
										},
										{
											"begin": 4303,
											"end": 4355,
											"name": "tag",
											"source": 13,
											"value": "667"
										},
										{
											"begin": 4303,
											"end": 4355,
											"name": "JUMPDEST",
											"source": 13
										},
										{
											"begin": 4391,
											"end": 4400,
											"name": "DUP3",
											"source": 13
										},
										{
											"begin": 4378,
											"end": 4401,
											"name": "CALLDATALOAD",
											"source": 13
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "40"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SHL",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SUB",
											"source": -1
										},
										{
											"begin": 4461,
											"end": 4463,
											"name": "DUP1",
											"source": 13
										},
										{
											"begin": 4453,
											"end": 4459,
											"name": "DUP3",
											"source": 13
										},
										{
											"begin": 4450,
											"end": 4464,
											"name": "GT",
											"source": 13
										},
										{
											"begin": 4447,
											"end": 4481,
											"name": "ISZERO",
											"source": 13
										},
										{
											"begin": 4447,
											"end": 4481,
											"name": "PUSH [tag]",
											"source": 13,
											"value": "668"
										},
										{
											"begin": 4447,
											"end": 4481,
											"name": "JUMPI",
											"source": 13
										},
										{
											"begin": 4477,
											"end": 4478,
											"name": "PUSH",
											"source": 13,
											"value": "0"
										},
										{
											"begin": 4474,
											"end": 4475,
											"name": "DUP1",
											"source": 13
										},
										{
											"begin": 4467,
											"end": 4479,
											"name": "REVERT",
											"source": 13
										},
										{
											"begin": 4447,
											"end": 4481,
											"name": "tag",
											"source": 13,
											"value": "668"
										},
										{
											"begin": 4447,
											"end": 4481,
											"name": "JUMPDEST",
											"source": 13
										},
										{
											"begin": 4515,
											"end": 4521,
											"name": "DUP2",
											"source": 13
										},
										{
											"begin": 4504,
											"end": 4513,
											"name": "DUP6",
											"source": 13
										},
										{
											"begin": 4500,
											"end": 4522,
											"name": "ADD",
											"source": 13
										},
										{
											"begin": 4490,
											"end": 4522,
											"name": "SWAP2",
											"source": 13
										},
										{
											"begin": 4490,
											"end": 4522,
											"name": "POP",
											"source": 13
										},
										{
											"begin": 4560,
											"end": 4567,
											"name": "DUP6",
											"source": 13
										},
										{
											"begin": 4553,
											"end": 4557,
											"name": "PUSH",
											"source": 13,
											"value": "1F"
										},
										{
											"begin": 4549,
											"end": 4551,
											"name": "DUP4",
											"source": 13
										},
										{
											"begin": 4545,
											"end": 4558,
											"name": "ADD",
											"source": 13
										},
										{
											"begin": 4541,
											"end": 4568,
											"name": "SLT",
											"source": 13
										},
										{
											"begin": 4531,
											"end": 4586,
											"name": "PUSH [tag]",
											"source": 13,
											"value": "669"
										},
										{
											"begin": 4531,
											"end": 4586,
											"name": "JUMPI",
											"source": 13
										},
										{
											"begin": 4582,
											"end": 4583,
											"name": "PUSH",
											"source": 13,
											"value": "0"
										},
										{
											"begin": 4579,
											"end": 4580,
											"name": "DUP1",
											"source": 13
										},
										{
											"begin": 4572,
											"end": 4584,
											"name": "REVERT",
											"source": 13
										},
										{
											"begin": 4531,
											"end": 4586,
											"name": "tag",
											"source": 13,
											"value": "669"
										},
										{
											"begin": 4531,
											"end": 4586,
											"name": "JUMPDEST",
											"source": 13
										},
										{
											"begin": 4618,
											"end": 4620,
											"name": "DUP2",
											"source": 13
										},
										{
											"begin": 4605,
											"end": 4621,
											"name": "CALLDATALOAD",
											"source": 13
										},
										{
											"begin": 4640,
											"end": 4644,
											"name": "PUSH",
											"source": 13,
											"value": "20"
										},
										{
											"begin": 4663,
											"end": 4665,
											"name": "DUP3",
											"source": 13
										},
										{
											"begin": 4659,
											"end": 4661,
											"name": "DUP3",
											"source": 13
										},
										{
											"begin": 4656,
											"end": 4666,
											"name": "GT",
											"source": 13
										},
										{
											"begin": 4653,
											"end": 4689,
											"name": "ISZERO",
											"source": 13
										},
										{
											"begin": 4653,
											"end": 4689,
											"name": "PUSH [tag]",
											"source": 13,
											"value": "671"
										},
										{
											"begin": 4653,
											"end": 4689,
											"name": "JUMPI",
											"source": 13
										},
										{
											"begin": 4669,
											"end": 4687,
											"name": "PUSH [tag]",
											"source": 13,
											"value": "671"
										},
										{
											"begin": 4669,
											"end": 4687,
											"name": "PUSH [tag]",
											"source": 13,
											"value": "365"
										},
										{
											"begin": 4669,
											"end": 4687,
											"name": "JUMP",
											"source": 13,
											"value": "[in]"
										},
										{
											"begin": 4669,
											"end": 4687,
											"name": "tag",
											"source": 13,
											"value": "671"
										},
										{
											"begin": 4669,
											"end": 4687,
											"name": "JUMPDEST",
											"source": 13
										},
										{
											"begin": 4715,
											"end": 4717,
											"name": "DUP2",
											"source": 13
										},
										{
											"begin": 4712,
											"end": 4713,
											"name": "PUSH",
											"source": 13,
											"value": "5"
										},
										{
											"begin": 4708,
											"end": 4718,
											"name": "SHL",
											"source": 13
										},
										{
											"begin": 4698,
											"end": 4718,
											"name": "SWAP3",
											"source": 13
										},
										{
											"begin": 4698,
											"end": 4718,
											"name": "POP",
											"source": 13
										},
										{
											"begin": 4738,
											"end": 4766,
											"name": "PUSH [tag]",
											"source": 13,
											"value": "672"
										},
										{
											"begin": 4762,
											"end": 4764,
											"name": "DUP2",
											"source": 13
										},
										{
											"begin": 4758,
											"end": 4760,
											"name": "DUP5",
											"source": 13
										},
										{
											"begin": 4754,
											"end": 4765,
											"name": "ADD",
											"source": 13
										},
										{
											"begin": 4738,
											"end": 4766,
											"name": "PUSH [tag]",
											"source": 13,
											"value": "611"
										},
										{
											"begin": 4738,
											"end": 4766,
											"name": "JUMP",
											"source": 13,
											"value": "[in]"
										},
										{
											"begin": 4738,
											"end": 4766,
											"name": "tag",
											"source": 13,
											"value": "672"
										},
										{
											"begin": 4738,
											"end": 4766,
											"name": "JUMPDEST",
											"source": 13
										},
										{
											"begin": 4800,
											"end": 4815,
											"name": "DUP3",
											"source": 13
										},
										{
											"begin": 4800,
											"end": 4815,
											"name": "DUP2",
											"source": 13
										},
										{
											"begin": 4800,
											"end": 4815,
											"name": "MSTORE",
											"source": 13
										},
										{
											"begin": 4870,
											"end": 4881,
											"name": "SWAP3",
											"source": 13
										},
										{
											"begin": 4870,
											"end": 4881,
											"name": "DUP5",
											"source": 13
										},
										{
											"begin": 4870,
											"end": 4881,
											"name": "ADD",
											"source": 13
										},
										{
											"begin": 4866,
											"end": 4886,
											"name": "DUP2",
											"source": 13
										},
										{
											"begin": 4866,
											"end": 4886,
											"name": "ADD",
											"source": 13
										},
										{
											"begin": 4866,
											"end": 4886,
											"name": "SWAP3",
											"source": 13
										},
										{
											"begin": 4831,
											"end": 4843,
											"name": "DUP2",
											"source": 13
										},
										{
											"begin": 4831,
											"end": 4843,
											"name": "DUP2",
											"source": 13
										},
										{
											"begin": 4831,
											"end": 4843,
											"name": "ADD",
											"source": 13
										},
										{
											"begin": 4831,
											"end": 4843,
											"name": "SWAP1",
											"source": 13
										},
										{
											"begin": 4898,
											"end": 4917,
											"name": "DUP10",
											"source": 13
										},
										{
											"begin": 4898,
											"end": 4917,
											"name": "DUP6",
											"source": 13
										},
										{
											"begin": 4898,
											"end": 4917,
											"name": "GT",
											"source": 13
										},
										{
											"begin": 4895,
											"end": 4934,
											"name": "ISZERO",
											"source": 13
										},
										{
											"begin": 4895,
											"end": 4934,
											"name": "PUSH [tag]",
											"source": 13,
											"value": "673"
										},
										{
											"begin": 4895,
											"end": 4934,
											"name": "JUMPI",
											"source": 13
										},
										{
											"begin": 4930,
											"end": 4931,
											"name": "PUSH",
											"source": 13,
											"value": "0"
										},
										{
											"begin": 4927,
											"end": 4928,
											"name": "DUP1",
											"source": 13
										},
										{
											"begin": 4920,
											"end": 4932,
											"name": "REVERT",
											"source": 13
										},
										{
											"begin": 4895,
											"end": 4934,
											"name": "tag",
											"source": 13,
											"value": "673"
										},
										{
											"begin": 4895,
											"end": 4934,
											"name": "JUMPDEST",
											"source": 13
										},
										{
											"begin": 4954,
											"end": 4965,
											"name": "SWAP5",
											"source": 13
										},
										{
											"begin": 4954,
											"end": 4965,
											"name": "DUP3",
											"source": 13
										},
										{
											"begin": 4954,
											"end": 4965,
											"name": "ADD",
											"source": 13
										},
										{
											"begin": 4954,
											"end": 4965,
											"name": "SWAP5",
											"source": 13
										},
										{
											"begin": 4974,
											"end": 5116,
											"name": "tag",
											"source": 13,
											"value": "674"
										},
										{
											"begin": 4974,
											"end": 5116,
											"name": "JUMPDEST",
											"source": 13
										},
										{
											"begin": 4990,
											"end": 4996,
											"name": "DUP5",
											"source": 13
										},
										{
											"begin": 4985,
											"end": 4988,
											"name": "DUP7",
											"source": 13
										},
										{
											"begin": 4982,
											"end": 4997,
											"name": "LT",
											"source": 13
										},
										{
											"begin": 4974,
											"end": 5116,
											"name": "ISZERO",
											"source": 13
										},
										{
											"begin": 4974,
											"end": 5116,
											"name": "PUSH [tag]",
											"source": 13,
											"value": "676"
										},
										{
											"begin": 4974,
											"end": 5116,
											"name": "JUMPI",
											"source": 13
										},
										{
											"begin": 5056,
											"end": 5073,
											"name": "DUP6",
											"source": 13
										},
										{
											"begin": 5056,
											"end": 5073,
											"name": "CALLDATALOAD",
											"source": 13
										},
										{
											"begin": 5044,
											"end": 5074,
											"name": "DUP3",
											"source": 13
										},
										{
											"begin": 5044,
											"end": 5074,
											"name": "MSTORE",
											"source": 13
										},
										{
											"begin": 5007,
											"end": 5019,
											"name": "SWAP5",
											"source": 13
										},
										{
											"begin": 5007,
											"end": 5019,
											"name": "DUP3",
											"source": 13
										},
										{
											"begin": 5007,
											"end": 5019,
											"name": "ADD",
											"source": 13
										},
										{
											"begin": 5007,
											"end": 5019,
											"name": "SWAP5",
											"source": 13
										},
										{
											"begin": 5094,
											"end": 5106,
											"name": "SWAP1",
											"source": 13
										},
										{
											"begin": 5094,
											"end": 5106,
											"name": "DUP3",
											"source": 13
										},
										{
											"begin": 5094,
											"end": 5106,
											"name": "ADD",
											"source": 13
										},
										{
											"begin": 5094,
											"end": 5106,
											"name": "SWAP1",
											"source": 13
										},
										{
											"begin": 4974,
											"end": 5116,
											"name": "PUSH [tag]",
											"source": 13,
											"value": "674"
										},
										{
											"begin": 4974,
											"end": 5116,
											"name": "JUMP",
											"source": 13
										},
										{
											"begin": 4974,
											"end": 5116,
											"name": "tag",
											"source": 13,
											"value": "676"
										},
										{
											"begin": 4974,
											"end": 5116,
											"name": "JUMPDEST",
											"source": 13
										},
										{
											"begin": 5135,
											"end": 5140,
											"name": "SWAP10",
											"source": 13
										},
										{
											"begin": 5172,
											"end": 5190,
											"name": "SWAP8",
											"source": 13
										},
										{
											"begin": 5172,
											"end": 5190,
											"name": "SWAP1",
											"source": 13
										},
										{
											"begin": 5172,
											"end": 5190,
											"name": "SWAP2",
											"source": 13
										},
										{
											"begin": 5172,
											"end": 5190,
											"name": "ADD",
											"source": 13
										},
										{
											"begin": 5159,
											"end": 5191,
											"name": "CALLDATALOAD",
											"source": 13
										},
										{
											"begin": 5159,
											"end": 5191,
											"name": "SWAP8",
											"source": 13
										},
										{
											"begin": -1,
											"end": -1,
											"name": "POP",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "POP",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "POP",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "POP",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "POP",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "POP",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "POP",
											"source": -1
										},
										{
											"begin": 4181,
											"end": 5197,
											"name": "JUMP",
											"source": 13,
											"value": "[out]"
										},
										{
											"begin": 5569,
											"end": 6201,
											"name": "tag",
											"source": 13,
											"value": "167"
										},
										{
											"begin": 5569,
											"end": 6201,
											"name": "JUMPDEST",
											"source": 13
										},
										{
											"begin": 5740,
											"end": 5742,
											"name": "PUSH",
											"source": 13,
											"value": "20"
										},
										{
											"begin": 5792,
											"end": 5813,
											"name": "DUP1",
											"source": 13
										},
										{
											"begin": 5792,
											"end": 5813,
											"name": "DUP3",
											"source": 13
										},
										{
											"begin": 5792,
											"end": 5813,
											"name": "MSTORE",
											"source": 13
										},
										{
											"begin": 5862,
											"end": 5875,
											"name": "DUP3",
											"source": 13
										},
										{
											"begin": 5862,
											"end": 5875,
											"name": "MLOAD",
											"source": 13
										},
										{
											"begin": 5765,
											"end": 5783,
											"name": "DUP3",
											"source": 13
										},
										{
											"begin": 5765,
											"end": 5783,
											"name": "DUP3",
											"source": 13
										},
										{
											"begin": 5765,
											"end": 5783,
											"name": "ADD",
											"source": 13
										},
										{
											"begin": 5884,
											"end": 5906,
											"name": "DUP2",
											"source": 13
										},
										{
											"begin": 5884,
											"end": 5906,
											"name": "SWAP1",
											"source": 13
										},
										{
											"begin": 5884,
											"end": 5906,
											"name": "MSTORE",
											"source": 13
										},
										{
											"begin": 5711,
											"end": 5715,
											"name": "PUSH",
											"source": 13,
											"value": "0"
										},
										{
											"begin": 5711,
											"end": 5715,
											"name": "SWAP2",
											"source": 13
										},
										{
											"begin": 5740,
											"end": 5742,
											"name": "SWAP1",
											"source": 13
										},
										{
											"begin": 5963,
											"end": 5978,
											"name": "DUP5",
											"source": 13
										},
										{
											"begin": 5963,
											"end": 5978,
											"name": "DUP3",
											"source": 13
										},
										{
											"begin": 5963,
											"end": 5978,
											"name": "ADD",
											"source": 13
										},
										{
											"begin": 5963,
											"end": 5978,
											"name": "SWAP1",
											"source": 13
										},
										{
											"begin": 5937,
											"end": 5939,
											"name": "PUSH",
											"source": 13,
											"value": "40"
										},
										{
											"begin": 5922,
											"end": 5940,
											"name": "DUP6",
											"source": 13
										},
										{
											"begin": 5922,
											"end": 5940,
											"name": "ADD",
											"source": 13
										},
										{
											"begin": 5922,
											"end": 5940,
											"name": "SWAP1",
											"source": 13
										},
										{
											"begin": 5711,
											"end": 5715,
											"name": "DUP5",
											"source": 13
										},
										{
											"begin": 6006,
											"end": 6175,
											"name": "tag",
											"source": 13,
											"value": "681"
										},
										{
											"begin": 6006,
											"end": 6175,
											"name": "JUMPDEST",
											"source": 13
										},
										{
											"begin": 6020,
											"end": 6026,
											"name": "DUP2",
											"source": 13
										},
										{
											"begin": 6017,
											"end": 6018,
											"name": "DUP2",
											"source": 13
										},
										{
											"begin": 6014,
											"end": 6027,
											"name": "LT",
											"source": 13
										},
										{
											"begin": 6006,
											"end": 6175,
											"name": "ISZERO",
											"source": 13
										},
										{
											"begin": 6006,
											"end": 6175,
											"name": "PUSH [tag]",
											"source": 13,
											"value": "683"
										},
										{
											"begin": 6006,
											"end": 6175,
											"name": "JUMPI",
											"source": 13
										},
										{
											"begin": 6081,
											"end": 6094,
											"name": "DUP4",
											"source": 13
										},
										{
											"begin": 6081,
											"end": 6094,
											"name": "MLOAD",
											"source": 13
										},
										{
											"begin": 6069,
											"end": 6095,
											"name": "DUP4",
											"source": 13
										},
										{
											"begin": 6069,
											"end": 6095,
											"name": "MSTORE",
											"source": 13
										},
										{
											"begin": 6150,
											"end": 6165,
											"name": "SWAP3",
											"source": 13
										},
										{
											"begin": 6150,
											"end": 6165,
											"name": "DUP5",
											"source": 13
										},
										{
											"begin": 6150,
											"end": 6165,
											"name": "ADD",
											"source": 13
										},
										{
											"begin": 6150,
											"end": 6165,
											"name": "SWAP3",
											"source": 13
										},
										{
											"begin": 6115,
											"end": 6127,
											"name": "SWAP2",
											"source": 13
										},
										{
											"begin": 6115,
											"end": 6127,
											"name": "DUP5",
											"source": 13
										},
										{
											"begin": 6115,
											"end": 6127,
											"name": "ADD",
											"source": 13
										},
										{
											"begin": 6115,
											"end": 6127,
											"name": "SWAP2",
											"source": 13
										},
										{
											"begin": 6042,
											"end": 6043,
											"name": "PUSH",
											"source": 13,
											"value": "1"
										},
										{
											"begin": 6035,
											"end": 6044,
											"name": "ADD",
											"source": 13
										},
										{
											"begin": 6006,
											"end": 6175,
											"name": "PUSH [tag]",
											"source": 13,
											"value": "681"
										},
										{
											"begin": 6006,
											"end": 6175,
											"name": "JUMP",
											"source": 13
										},
										{
											"begin": 6006,
											"end": 6175,
											"name": "tag",
											"source": 13,
											"value": "683"
										},
										{
											"begin": 6006,
											"end": 6175,
											"name": "JUMPDEST",
											"source": 13
										},
										{
											"begin": -1,
											"end": -1,
											"name": "POP",
											"source": -1
										},
										{
											"begin": 6192,
											"end": 6195,
											"name": "SWAP1",
											"source": 13
										},
										{
											"begin": 6192,
											"end": 6195,
											"name": "SWAP7",
											"source": 13
										},
										{
											"begin": 5569,
											"end": 6201,
											"name": "SWAP6",
											"source": 13
										},
										{
											"begin": -1,
											"end": -1,
											"name": "POP",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "POP",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "POP",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "POP",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "POP",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "POP",
											"source": -1
										},
										{
											"begin": 5569,
											"end": 6201,
											"name": "JUMP",
											"source": 13,
											"value": "[out]"
										},
										{
											"begin": 6206,
											"end": 6553,
											"name": "tag",
											"source": 13,
											"value": "193"
										},
										{
											"begin": 6206,
											"end": 6553,
											"name": "JUMPDEST",
											"source": 13
										},
										{
											"begin": 6271,
											"end": 6277,
											"name": "PUSH",
											"source": 13,
											"value": "0"
										},
										{
											"begin": 6279,
											"end": 6285,
											"name": "DUP1",
											"source": 13
										},
										{
											"begin": 6332,
											"end": 6334,
											"name": "PUSH",
											"source": 13,
											"value": "40"
										},
										{
											"begin": 6320,
											"end": 6329,
											"name": "DUP4",
											"source": 13
										},
										{
											"begin": 6311,
											"end": 6318,
											"name": "DUP6",
											"source": 13
										},
										{
											"begin": 6307,
											"end": 6330,
											"name": "SUB",
											"source": 13
										},
										{
											"begin": 6303,
											"end": 6335,
											"name": "SLT",
											"source": 13
										},
										{
											"begin": 6300,
											"end": 6352,
											"name": "ISZERO",
											"source": 13
										},
										{
											"begin": 6300,
											"end": 6352,
											"name": "PUSH [tag]",
											"source": 13,
											"value": "685"
										},
										{
											"begin": 6300,
											"end": 6352,
											"name": "JUMPI",
											"source": 13
										},
										{
											"begin": 6348,
											"end": 6349,
											"name": "PUSH",
											"source": 13,
											"value": "0"
										},
										{
											"begin": 6345,
											"end": 6346,
											"name": "DUP1",
											"source": 13
										},
										{
											"begin": 6338,
											"end": 6350,
											"name": "REVERT",
											"source": 13
										},
										{
											"begin": 6300,
											"end": 6352,
											"name": "tag",
											"source": 13,
											"value": "685"
										},
										{
											"begin": 6300,
											"end": 6352,
											"name": "JUMPDEST",
											"source": 13
										},
										{
											"begin": 6371,
											"end": 6400,
											"name": "PUSH [tag]",
											"source": 13,
											"value": "686"
										},
										{
											"begin": 6390,
											"end": 6399,
											"name": "DUP4",
											"source": 13
										},
										{
											"begin": 6371,
											"end": 6400,
											"name": "PUSH [tag]",
											"source": 13,
											"value": "610"
										},
										{
											"begin": 6371,
											"end": 6400,
											"name": "JUMP",
											"source": 13,
											"value": "[in]"
										},
										{
											"begin": 6371,
											"end": 6400,
											"name": "tag",
											"source": 13,
											"value": "686"
										},
										{
											"begin": 6371,
											"end": 6400,
											"name": "JUMPDEST",
											"source": 13
										},
										{
											"begin": 6361,
											"end": 6400,
											"name": "SWAP2",
											"source": 13
										},
										{
											"begin": 6361,
											"end": 6400,
											"name": "POP",
											"source": 13
										},
										{
											"begin": 6450,
											"end": 6452,
											"name": "PUSH",
											"source": 13,
											"value": "20"
										},
										{
											"begin": 6439,
											"end": 6448,
											"name": "DUP4",
											"source": 13
										},
										{
											"begin": 6435,
											"end": 6453,
											"name": "ADD",
											"source": 13
										},
										{
											"begin": 6422,
											"end": 6454,
											"name": "CALLDATALOAD",
											"source": 13
										},
										{
											"begin": 6497,
											"end": 6502,
											"name": "DUP1",
											"source": 13
										},
										{
											"begin": 6490,
											"end": 6503,
											"name": "ISZERO",
											"source": 13
										},
										{
											"begin": 6483,
											"end": 6504,
											"name": "ISZERO",
											"source": 13
										},
										{
											"begin": 6476,
											"end": 6481,
											"name": "DUP2",
											"source": 13
										},
										{
											"begin": 6473,
											"end": 6505,
											"name": "EQ",
											"source": 13
										},
										{
											"begin": 6463,
											"end": 6523,
											"name": "PUSH [tag]",
											"source": 13,
											"value": "687"
										},
										{
											"begin": 6463,
											"end": 6523,
											"name": "JUMPI",
											"source": 13
										},
										{
											"begin": 6519,
											"end": 6520,
											"name": "PUSH",
											"source": 13,
											"value": "0"
										},
										{
											"begin": 6516,
											"end": 6517,
											"name": "DUP1",
											"source": 13
										},
										{
											"begin": 6509,
											"end": 6521,
											"name": "REVERT",
											"source": 13
										},
										{
											"begin": 6463,
											"end": 6523,
											"name": "tag",
											"source": 13,
											"value": "687"
										},
										{
											"begin": 6463,
											"end": 6523,
											"name": "JUMPDEST",
											"source": 13
										},
										{
											"begin": 6542,
											"end": 6547,
											"name": "DUP1",
											"source": 13
										},
										{
											"begin": 6532,
											"end": 6547,
											"name": "SWAP2",
											"source": 13
										},
										{
											"begin": 6532,
											"end": 6547,
											"name": "POP",
											"source": 13
										},
										{
											"begin": 6532,
											"end": 6547,
											"name": "POP",
											"source": 13
										},
										{
											"begin": 6206,
											"end": 6553,
											"name": "SWAP3",
											"source": 13
										},
										{
											"begin": 6206,
											"end": 6553,
											"name": "POP",
											"source": 13
										},
										{
											"begin": 6206,
											"end": 6553,
											"name": "SWAP3",
											"source": 13
										},
										{
											"begin": 6206,
											"end": 6553,
											"name": "SWAP1",
											"source": 13
										},
										{
											"begin": 6206,
											"end": 6553,
											"name": "POP",
											"source": 13
										},
										{
											"begin": 6206,
											"end": 6553,
											"name": "JUMP",
											"source": 13,
											"value": "[out]"
										},
										{
											"begin": 6558,
											"end": 7225,
											"name": "tag",
											"source": 13,
											"value": "202"
										},
										{
											"begin": 6558,
											"end": 7225,
											"name": "JUMPDEST",
											"source": 13
										},
										{
											"begin": 6653,
											"end": 6659,
											"name": "PUSH",
											"source": 13,
											"value": "0"
										},
										{
											"begin": 6661,
											"end": 6667,
											"name": "DUP1",
											"source": 13
										},
										{
											"begin": 6669,
											"end": 6675,
											"name": "PUSH",
											"source": 13,
											"value": "0"
										},
										{
											"begin": 6677,
											"end": 6683,
											"name": "DUP1",
											"source": 13
										},
										{
											"begin": 6730,
											"end": 6733,
											"name": "PUSH",
											"source": 13,
											"value": "80"
										},
										{
											"begin": 6718,
											"end": 6727,
											"name": "DUP6",
											"source": 13
										},
										{
											"begin": 6709,
											"end": 6716,
											"name": "DUP8",
											"source": 13
										},
										{
											"begin": 6705,
											"end": 6728,
											"name": "SUB",
											"source": 13
										},
										{
											"begin": 6701,
											"end": 6734,
											"name": "SLT",
											"source": 13
										},
										{
											"begin": 6698,
											"end": 6751,
											"name": "ISZERO",
											"source": 13
										},
										{
											"begin": 6698,
											"end": 6751,
											"name": "PUSH [tag]",
											"source": 13,
											"value": "689"
										},
										{
											"begin": 6698,
											"end": 6751,
											"name": "JUMPI",
											"source": 13
										},
										{
											"begin": 6747,
											"end": 6748,
											"name": "PUSH",
											"source": 13,
											"value": "0"
										},
										{
											"begin": 6744,
											"end": 6745,
											"name": "DUP1",
											"source": 13
										},
										{
											"begin": 6737,
											"end": 6749,
											"name": "REVERT",
											"source": 13
										},
										{
											"begin": 6698,
											"end": 6751,
											"name": "tag",
											"source": 13,
											"value": "689"
										},
										{
											"begin": 6698,
											"end": 6751,
											"name": "JUMPDEST",
											"source": 13
										},
										{
											"begin": 6770,
											"end": 6799,
											"name": "PUSH [tag]",
											"source": 13,
											"value": "690"
										},
										{
											"begin": 6789,
											"end": 6798,
											"name": "DUP6",
											"source": 13
										},
										{
											"begin": 6770,
											"end": 6799,
											"name": "PUSH [tag]",
											"source": 13,
											"value": "610"
										},
										{
											"begin": 6770,
											"end": 6799,
											"name": "JUMP",
											"source": 13,
											"value": "[in]"
										},
										{
											"begin": 6770,
											"end": 6799,
											"name": "tag",
											"source": 13,
											"value": "690"
										},
										{
											"begin": 6770,
											"end": 6799,
											"name": "JUMPDEST",
											"source": 13
										},
										{
											"begin": 6760,
											"end": 6799,
											"name": "SWAP4",
											"source": 13
										},
										{
											"begin": 6760,
											"end": 6799,
											"name": "POP",
											"source": 13
										},
										{
											"begin": 6818,
											"end": 6856,
											"name": "PUSH [tag]",
											"source": 13,
											"value": "691"
										},
										{
											"begin": 6852,
											"end": 6854,
											"name": "PUSH",
											"source": 13,
											"value": "20"
										},
										{
											"begin": 6841,
											"end": 6850,
											"name": "DUP7",
											"source": 13
										},
										{
											"begin": 6837,
											"end": 6855,
											"name": "ADD",
											"source": 13
										},
										{
											"begin": 6818,
											"end": 6856,
											"name": "PUSH [tag]",
											"source": 13,
											"value": "610"
										},
										{
											"begin": 6818,
											"end": 6856,
											"name": "JUMP",
											"source": 13,
											"value": "[in]"
										},
										{
											"begin": 6818,
											"end": 6856,
											"name": "tag",
											"source": 13,
											"value": "691"
										},
										{
											"begin": 6818,
											"end": 6856,
											"name": "JUMPDEST",
											"source": 13
										},
										{
											"begin": 6808,
											"end": 6856,
											"name": "SWAP3",
											"source": 13
										},
										{
											"begin": 6808,
											"end": 6856,
											"name": "POP",
											"source": 13
										},
										{
											"begin": 6903,
											"end": 6905,
											"name": "PUSH",
											"source": 13,
											"value": "40"
										},
										{
											"begin": 6892,
											"end": 6901,
											"name": "DUP6",
											"source": 13
										},
										{
											"begin": 6888,
											"end": 6906,
											"name": "ADD",
											"source": 13
										},
										{
											"begin": 6875,
											"end": 6907,
											"name": "CALLDATALOAD",
											"source": 13
										},
										{
											"begin": 6865,
											"end": 6907,
											"name": "SWAP2",
											"source": 13
										},
										{
											"begin": 6865,
											"end": 6907,
											"name": "POP",
											"source": 13
										},
										{
											"begin": 6958,
											"end": 6960,
											"name": "PUSH",
											"source": 13,
											"value": "60"
										},
										{
											"begin": 6947,
											"end": 6956,
											"name": "DUP6",
											"source": 13
										},
										{
											"begin": 6943,
											"end": 6961,
											"name": "ADD",
											"source": 13
										},
										{
											"begin": 6930,
											"end": 6962,
											"name": "CALLDATALOAD",
											"source": 13
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "40"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SHL",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SUB",
											"source": -1
										},
										{
											"begin": 6977,
											"end": 6983,
											"name": "DUP2",
											"source": 13
										},
										{
											"begin": 6974,
											"end": 7004,
											"name": "GT",
											"source": 13
										},
										{
											"begin": 6971,
											"end": 7021,
											"name": "ISZERO",
											"source": 13
										},
										{
											"begin": 6971,
											"end": 7021,
											"name": "PUSH [tag]",
											"source": 13,
											"value": "692"
										},
										{
											"begin": 6971,
											"end": 7021,
											"name": "JUMPI",
											"source": 13
										},
										{
											"begin": 7017,
											"end": 7018,
											"name": "PUSH",
											"source": 13,
											"value": "0"
										},
										{
											"begin": 7014,
											"end": 7015,
											"name": "DUP1",
											"source": 13
										},
										{
											"begin": 7007,
											"end": 7019,
											"name": "REVERT",
											"source": 13
										},
										{
											"begin": 6971,
											"end": 7021,
											"name": "tag",
											"source": 13,
											"value": "692"
										},
										{
											"begin": 6971,
											"end": 7021,
											"name": "JUMPDEST",
											"source": 13
										},
										{
											"begin": 7040,
											"end": 7062,
											"name": "DUP6",
											"source": 13
										},
										{
											"begin": 7040,
											"end": 7062,
											"name": "ADD",
											"source": 13
										},
										{
											"begin": 7093,
											"end": 7097,
											"name": "PUSH",
											"source": 13,
											"value": "1F"
										},
										{
											"begin": 7085,
											"end": 7098,
											"name": "DUP2",
											"source": 13
										},
										{
											"begin": 7085,
											"end": 7098,
											"name": "ADD",
											"source": 13
										},
										{
											"begin": 7081,
											"end": 7108,
											"name": "DUP8",
											"source": 13
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SGT",
											"source": -1
										},
										{
											"begin": 7071,
											"end": 7126,
											"name": "PUSH [tag]",
											"source": 13,
											"value": "693"
										},
										{
											"begin": 7071,
											"end": 7126,
											"name": "JUMPI",
											"source": 13
										},
										{
											"begin": 7122,
											"end": 7123,
											"name": "PUSH",
											"source": 13,
											"value": "0"
										},
										{
											"begin": 7119,
											"end": 7120,
											"name": "DUP1",
											"source": 13
										},
										{
											"begin": 7112,
											"end": 7124,
											"name": "REVERT",
											"source": 13
										},
										{
											"begin": 7071,
											"end": 7126,
											"name": "tag",
											"source": 13,
											"value": "693"
										},
										{
											"begin": 7071,
											"end": 7126,
											"name": "JUMPDEST",
											"source": 13
										},
										{
											"begin": 7145,
											"end": 7219,
											"name": "PUSH [tag]",
											"source": 13,
											"value": "694"
										},
										{
											"begin": 7211,
											"end": 7218,
											"name": "DUP8",
											"source": 13
										},
										{
											"begin": 7206,
											"end": 7208,
											"name": "DUP3",
											"source": 13
										},
										{
											"begin": 7193,
											"end": 7209,
											"name": "CALLDATALOAD",
											"source": 13
										},
										{
											"begin": 7188,
											"end": 7190,
											"name": "PUSH",
											"source": 13,
											"value": "20"
										},
										{
											"begin": 7184,
											"end": 7186,
											"name": "DUP5",
											"source": 13
										},
										{
											"begin": 7180,
											"end": 7191,
											"name": "ADD",
											"source": 13
										},
										{
											"begin": 7145,
											"end": 7219,
											"name": "PUSH [tag]",
											"source": 13,
											"value": "612"
										},
										{
											"begin": 7145,
											"end": 7219,
											"name": "JUMP",
											"source": 13,
											"value": "[in]"
										},
										{
											"begin": 7145,
											"end": 7219,
											"name": "tag",
											"source": 13,
											"value": "694"
										},
										{
											"begin": 7145,
											"end": 7219,
											"name": "JUMPDEST",
											"source": 13
										},
										{
											"begin": 7135,
											"end": 7219,
											"name": "SWAP2",
											"source": 13
										},
										{
											"begin": 7135,
											"end": 7219,
											"name": "POP",
											"source": 13
										},
										{
											"begin": 7135,
											"end": 7219,
											"name": "POP",
											"source": 13
										},
										{
											"begin": 6558,
											"end": 7225,
											"name": "SWAP3",
											"source": 13
										},
										{
											"begin": 6558,
											"end": 7225,
											"name": "SWAP6",
											"source": 13
										},
										{
											"begin": 6558,
											"end": 7225,
											"name": "SWAP2",
											"source": 13
										},
										{
											"begin": 6558,
											"end": 7225,
											"name": "SWAP5",
											"source": 13
										},
										{
											"begin": 6558,
											"end": 7225,
											"name": "POP",
											"source": 13
										},
										{
											"begin": 6558,
											"end": 7225,
											"name": "SWAP3",
											"source": 13
										},
										{
											"begin": 6558,
											"end": 7225,
											"name": "POP",
											"source": 13
										},
										{
											"begin": 6558,
											"end": 7225,
											"name": "JUMP",
											"source": 13,
											"value": "[out]"
										},
										{
											"begin": 7230,
											"end": 7490,
											"name": "tag",
											"source": 13,
											"value": "233"
										},
										{
											"begin": 7230,
											"end": 7490,
											"name": "JUMPDEST",
											"source": 13
										},
										{
											"begin": 7298,
											"end": 7304,
											"name": "PUSH",
											"source": 13,
											"value": "0"
										},
										{
											"begin": 7306,
											"end": 7312,
											"name": "DUP1",
											"source": 13
										},
										{
											"begin": 7359,
											"end": 7361,
											"name": "PUSH",
											"source": 13,
											"value": "40"
										},
										{
											"begin": 7347,
											"end": 7356,
											"name": "DUP4",
											"source": 13
										},
										{
											"begin": 7338,
											"end": 7345,
											"name": "DUP6",
											"source": 13
										},
										{
											"begin": 7334,
											"end": 7357,
											"name": "SUB",
											"source": 13
										},
										{
											"begin": 7330,
											"end": 7362,
											"name": "SLT",
											"source": 13
										},
										{
											"begin": 7327,
											"end": 7379,
											"name": "ISZERO",
											"source": 13
										},
										{
											"begin": 7327,
											"end": 7379,
											"name": "PUSH [tag]",
											"source": 13,
											"value": "696"
										},
										{
											"begin": 7327,
											"end": 7379,
											"name": "JUMPI",
											"source": 13
										},
										{
											"begin": 7375,
											"end": 7376,
											"name": "PUSH",
											"source": 13,
											"value": "0"
										},
										{
											"begin": 7372,
											"end": 7373,
											"name": "DUP1",
											"source": 13
										},
										{
											"begin": 7365,
											"end": 7377,
											"name": "REVERT",
											"source": 13
										},
										{
											"begin": 7327,
											"end": 7379,
											"name": "tag",
											"source": 13,
											"value": "696"
										},
										{
											"begin": 7327,
											"end": 7379,
											"name": "JUMPDEST",
											"source": 13
										},
										{
											"begin": 7398,
											"end": 7427,
											"name": "PUSH [tag]",
											"source": 13,
											"value": "697"
										},
										{
											"begin": 7417,
											"end": 7426,
											"name": "DUP4",
											"source": 13
										},
										{
											"begin": 7398,
											"end": 7427,
											"name": "PUSH [tag]",
											"source": 13,
											"value": "610"
										},
										{
											"begin": 7398,
											"end": 7427,
											"name": "JUMP",
											"source": 13,
											"value": "[in]"
										},
										{
											"begin": 7398,
											"end": 7427,
											"name": "tag",
											"source": 13,
											"value": "697"
										},
										{
											"begin": 7398,
											"end": 7427,
											"name": "JUMPDEST",
											"source": 13
										},
										{
											"begin": 7388,
											"end": 7427,
											"name": "SWAP2",
											"source": 13
										},
										{
											"begin": 7388,
											"end": 7427,
											"name": "POP",
											"source": 13
										},
										{
											"begin": 7446,
											"end": 7484,
											"name": "PUSH [tag]",
											"source": 13,
											"value": "698"
										},
										{
											"begin": 7480,
											"end": 7482,
											"name": "PUSH",
											"source": 13,
											"value": "20"
										},
										{
											"begin": 7469,
											"end": 7478,
											"name": "DUP5",
											"source": 13
										},
										{
											"begin": 7465,
											"end": 7483,
											"name": "ADD",
											"source": 13
										},
										{
											"begin": 7446,
											"end": 7484,
											"name": "PUSH [tag]",
											"source": 13,
											"value": "610"
										},
										{
											"begin": 7446,
											"end": 7484,
											"name": "JUMP",
											"source": 13,
											"value": "[in]"
										},
										{
											"begin": 7446,
											"end": 7484,
											"name": "tag",
											"source": 13,
											"value": "698"
										},
										{
											"begin": 7446,
											"end": 7484,
											"name": "JUMPDEST",
											"source": 13
										},
										{
											"begin": 7436,
											"end": 7484,
											"name": "SWAP1",
											"source": 13
										},
										{
											"begin": 7436,
											"end": 7484,
											"name": "POP",
											"source": 13
										},
										{
											"begin": 7230,
											"end": 7490,
											"name": "SWAP3",
											"source": 13
										},
										{
											"begin": 7230,
											"end": 7490,
											"name": "POP",
											"source": 13
										},
										{
											"begin": 7230,
											"end": 7490,
											"name": "SWAP3",
											"source": 13
										},
										{
											"begin": 7230,
											"end": 7490,
											"name": "SWAP1",
											"source": 13
										},
										{
											"begin": 7230,
											"end": 7490,
											"name": "POP",
											"source": 13
										},
										{
											"begin": 7230,
											"end": 7490,
											"name": "JUMP",
											"source": 13,
											"value": "[out]"
										},
										{
											"begin": 7495,
											"end": 7851,
											"name": "tag",
											"source": 13,
											"value": "251"
										},
										{
											"begin": 7495,
											"end": 7851,
											"name": "JUMPDEST",
											"source": 13
										},
										{
											"begin": 7697,
											"end": 7699,
											"name": "PUSH",
											"source": 13,
											"value": "20"
										},
										{
											"begin": 7679,
											"end": 7700,
											"name": "DUP1",
											"source": 13
										},
										{
											"begin": 7679,
											"end": 7700,
											"name": "DUP3",
											"source": 13
										},
										{
											"begin": 7679,
											"end": 7700,
											"name": "MSTORE",
											"source": 13
										},
										{
											"begin": 7716,
											"end": 7734,
											"name": "DUP2",
											"source": 13
										},
										{
											"begin": 7716,
											"end": 7734,
											"name": "DUP2",
											"source": 13
										},
										{
											"begin": 7716,
											"end": 7734,
											"name": "ADD",
											"source": 13
										},
										{
											"begin": 7709,
											"end": 7739,
											"name": "MSTORE",
											"source": 13
										},
										{
											"begin": 7775,
											"end": 7809,
											"name": "PUSH",
											"source": 13,
											"value": "4F776E61626C653A2063616C6C6572206973206E6F7420746865206F776E6572"
										},
										{
											"begin": 7770,
											"end": 7772,
											"name": "PUSH",
											"source": 13,
											"value": "40"
										},
										{
											"begin": 7755,
											"end": 7773,
											"name": "DUP3",
											"source": 13
										},
										{
											"begin": 7755,
											"end": 7773,
											"name": "ADD",
											"source": 13
										},
										{
											"begin": 7748,
											"end": 7810,
											"name": "MSTORE",
											"source": 13
										},
										{
											"begin": 7842,
											"end": 7844,
											"name": "PUSH",
											"source": 13,
											"value": "60"
										},
										{
											"begin": 7827,
											"end": 7845,
											"name": "ADD",
											"source": 13
										},
										{
											"begin": 7827,
											"end": 7845,
											"name": "SWAP1",
											"source": 13
										},
										{
											"begin": 7495,
											"end": 7851,
											"name": "JUMP",
											"source": 13,
											"value": "[out]"
										},
										{
											"begin": 7856,
											"end": 8236,
											"name": "tag",
											"source": 13,
											"value": "257"
										},
										{
											"begin": 7856,
											"end": 8236,
											"name": "JUMPDEST",
											"source": 13
										},
										{
											"begin": 7935,
											"end": 7936,
											"name": "PUSH",
											"source": 13,
											"value": "1"
										},
										{
											"begin": 7931,
											"end": 7943,
											"name": "DUP2",
											"source": 13
										},
										{
											"begin": 7931,
											"end": 7943,
											"name": "DUP2",
											"source": 13
										},
										{
											"begin": 7931,
											"end": 7943,
											"name": "SHR",
											"source": 13
										},
										{
											"begin": 7931,
											"end": 7943,
											"name": "SWAP1",
											"source": 13
										},
										{
											"begin": 7978,
											"end": 7990,
											"name": "DUP3",
											"source": 13
										},
										{
											"begin": 7978,
											"end": 7990,
											"name": "AND",
											"source": 13
										},
										{
											"begin": 7978,
											"end": 7990,
											"name": "DUP1",
											"source": 13
										},
										{
											"begin": 7999,
											"end": 8060,
											"name": "PUSH [tag]",
											"source": 13,
											"value": "701"
										},
										{
											"begin": 7999,
											"end": 8060,
											"name": "JUMPI",
											"source": 13
										},
										{
											"begin": 8053,
											"end": 8057,
											"name": "PUSH",
											"source": 13,
											"value": "7F"
										},
										{
											"begin": 8045,
											"end": 8051,
											"name": "DUP3",
											"source": 13
										},
										{
											"begin": 8041,
											"end": 8058,
											"name": "AND",
											"source": 13
										},
										{
											"begin": 8031,
											"end": 8058,
											"name": "SWAP2",
											"source": 13
										},
										{
											"begin": 8031,
											"end": 8058,
											"name": "POP",
											"source": 13
										},
										{
											"begin": 7999,
											"end": 8060,
											"name": "tag",
											"source": 13,
											"value": "701"
										},
										{
											"begin": 7999,
											"end": 8060,
											"name": "JUMPDEST",
											"source": 13
										},
										{
											"begin": 8106,
											"end": 8108,
											"name": "PUSH",
											"source": 13,
											"value": "20"
										},
										{
											"begin": 8098,
											"end": 8104,
											"name": "DUP3",
											"source": 13
										},
										{
											"begin": 8095,
											"end": 8109,
											"name": "LT",
											"source": 13
										},
										{
											"begin": 8075,
											"end": 8093,
											"name": "DUP2",
											"source": 13
										},
										{
											"begin": 8072,
											"end": 8110,
											"name": "EQ",
											"source": 13
										},
										{
											"begin": 8069,
											"end": 8230,
											"name": "ISZERO",
											"source": 13
										},
										{
											"begin": 8069,
											"end": 8230,
											"name": "PUSH [tag]",
											"source": 13,
											"value": "702"
										},
										{
											"begin": 8069,
											"end": 8230,
											"name": "JUMPI",
											"source": 13
										},
										{
											"begin": 8152,
											"end": 8162,
											"name": "PUSH",
											"source": 13,
											"value": "4E487B71"
										},
										{
											"begin": 8147,
											"end": 8150,
											"name": "PUSH",
											"source": 13,
											"value": "E0"
										},
										{
											"begin": 8143,
											"end": 8163,
											"name": "SHL",
											"source": 13
										},
										{
											"begin": 8140,
											"end": 8141,
											"name": "PUSH",
											"source": 13,
											"value": "0"
										},
										{
											"begin": 8133,
											"end": 8164,
											"name": "MSTORE",
											"source": 13
										},
										{
											"begin": 8187,
											"end": 8191,
											"name": "PUSH",
											"source": 13,
											"value": "22"
										},
										{
											"begin": 8184,
											"end": 8185,
											"name": "PUSH",
											"source": 13,
											"value": "4"
										},
										{
											"begin": 8177,
											"end": 8192,
											"name": "MSTORE",
											"source": 13
										},
										{
											"begin": 8215,
											"end": 8219,
											"name": "PUSH",
											"source": 13,
											"value": "24"
										},
										{
											"begin": 8212,
											"end": 8213,
											"name": "PUSH",
											"source": 13,
											"value": "0"
										},
										{
											"begin": 8205,
											"end": 8220,
											"name": "REVERT",
											"source": 13
										},
										{
											"begin": 8069,
											"end": 8230,
											"name": "tag",
											"source": 13,
											"value": "702"
										},
										{
											"begin": 8069,
											"end": 8230,
											"name": "JUMPDEST",
											"source": 13
										},
										{
											"begin": 8069,
											"end": 8230,
											"name": "POP",
											"source": 13
										},
										{
											"begin": 7856,
											"end": 8236,
											"name": "SWAP2",
											"source": 13
										},
										{
											"begin": 7856,
											"end": 8236,
											"name": "SWAP1",
											"source": 13
										},
										{
											"begin": 7856,
											"end": 8236,
											"name": "POP",
											"source": 13
										},
										{
											"begin": 7856,
											"end": 8236,
											"name": "JUMP",
											"source": 13,
											"value": "[out]"
										},
										{
											"begin": 8241,
											"end": 8653,
											"name": "tag",
											"source": 13,
											"value": "285"
										},
										{
											"begin": 8241,
											"end": 8653,
											"name": "JUMPDEST",
											"source": 13
										},
										{
											"begin": 8443,
											"end": 8445,
											"name": "PUSH",
											"source": 13,
											"value": "20"
										},
										{
											"begin": 8425,
											"end": 8446,
											"name": "DUP1",
											"source": 13
										},
										{
											"begin": 8425,
											"end": 8446,
											"name": "DUP3",
											"source": 13
										},
										{
											"begin": 8425,
											"end": 8446,
											"name": "MSTORE",
											"source": 13
										},
										{
											"begin": 8482,
											"end": 8484,
											"name": "PUSH",
											"source": 13,
											"value": "30"
										},
										{
											"begin": 8462,
											"end": 8480,
											"name": "SWAP1",
											"source": 13
										},
										{
											"begin": 8462,
											"end": 8480,
											"name": "DUP3",
											"source": 13
										},
										{
											"begin": 8462,
											"end": 8480,
											"name": "ADD",
											"source": 13
										},
										{
											"begin": 8455,
											"end": 8485,
											"name": "MSTORE",
											"source": 13
										},
										{
											"begin": 8521,
											"end": 8555,
											"name": "PUSH",
											"source": 13,
											"value": "43727970746F42756C6C446F6773203A3A2043616E6E6F742062652063616C6C"
										},
										{
											"begin": 8516,
											"end": 8518,
											"name": "PUSH",
											"source": 13,
											"value": "40"
										},
										{
											"begin": 8501,
											"end": 8519,
											"name": "DUP3",
											"source": 13
										},
										{
											"begin": 8501,
											"end": 8519,
											"name": "ADD",
											"source": 13
										},
										{
											"begin": 8494,
											"end": 8556,
											"name": "MSTORE",
											"source": 13
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "195908189E48184818DBDB9D1C9858DD"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "82"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SHL",
											"source": -1
										},
										{
											"begin": 8587,
											"end": 8589,
											"name": "PUSH",
											"source": 13,
											"value": "60"
										},
										{
											"begin": 8572,
											"end": 8590,
											"name": "DUP3",
											"source": 13
										},
										{
											"begin": 8572,
											"end": 8590,
											"name": "ADD",
											"source": 13
										},
										{
											"begin": 8565,
											"end": 8611,
											"name": "MSTORE",
											"source": 13
										},
										{
											"begin": 8643,
											"end": 8646,
											"name": "PUSH",
											"source": 13,
											"value": "80"
										},
										{
											"begin": 8628,
											"end": 8647,
											"name": "ADD",
											"source": 13
										},
										{
											"begin": 8628,
											"end": 8647,
											"name": "SWAP1",
											"source": 13
										},
										{
											"begin": 8241,
											"end": 8653,
											"name": "JUMP",
											"source": 13,
											"value": "[out]"
										},
										{
											"begin": 9064,
											"end": 9191,
											"name": "tag",
											"source": 13,
											"value": "615"
										},
										{
											"begin": 9064,
											"end": 9191,
											"name": "JUMPDEST",
											"source": 13
										},
										{
											"begin": 9125,
											"end": 9135,
											"name": "PUSH",
											"source": 13,
											"value": "4E487B71"
										},
										{
											"begin": 9120,
											"end": 9123,
											"name": "PUSH",
											"source": 13,
											"value": "E0"
										},
										{
											"begin": 9116,
											"end": 9136,
											"name": "SHL",
											"source": 13
										},
										{
											"begin": 9113,
											"end": 9114,
											"name": "PUSH",
											"source": 13,
											"value": "0"
										},
										{
											"begin": 9106,
											"end": 9137,
											"name": "MSTORE",
											"source": 13
										},
										{
											"begin": 9156,
											"end": 9160,
											"name": "PUSH",
											"source": 13,
											"value": "11"
										},
										{
											"begin": 9153,
											"end": 9154,
											"name": "PUSH",
											"source": 13,
											"value": "4"
										},
										{
											"begin": 9146,
											"end": 9161,
											"name": "MSTORE",
											"source": 13
										},
										{
											"begin": 9180,
											"end": 9184,
											"name": "PUSH",
											"source": 13,
											"value": "24"
										},
										{
											"begin": 9177,
											"end": 9178,
											"name": "PUSH",
											"source": 13,
											"value": "0"
										},
										{
											"begin": 9170,
											"end": 9185,
											"name": "REVERT",
											"source": 13
										},
										{
											"begin": 9196,
											"end": 9324,
											"name": "tag",
											"source": 13,
											"value": "292"
										},
										{
											"begin": 9196,
											"end": 9324,
											"name": "JUMPDEST",
											"source": 13
										},
										{
											"begin": 9236,
											"end": 9239,
											"name": "PUSH",
											"source": 13,
											"value": "0"
										},
										{
											"begin": 9267,
											"end": 9268,
											"name": "DUP3",
											"source": 13
										},
										{
											"begin": 9263,
											"end": 9269,
											"name": "NOT",
											"source": 13
										},
										{
											"begin": 9260,
											"end": 9261,
											"name": "DUP3",
											"source": 13
										},
										{
											"begin": 9257,
											"end": 9270,
											"name": "GT",
											"source": 13
										},
										{
											"begin": 9254,
											"end": 9293,
											"name": "ISZERO",
											"source": 13
										},
										{
											"begin": 9254,
											"end": 9293,
											"name": "PUSH [tag]",
											"source": 13,
											"value": "708"
										},
										{
											"begin": 9254,
											"end": 9293,
											"name": "JUMPI",
											"source": 13
										},
										{
											"begin": 9273,
											"end": 9291,
											"name": "PUSH [tag]",
											"source": 13,
											"value": "708"
										},
										{
											"begin": 9273,
											"end": 9291,
											"name": "PUSH [tag]",
											"source": 13,
											"value": "615"
										},
										{
											"begin": 9273,
											"end": 9291,
											"name": "JUMP",
											"source": 13,
											"value": "[in]"
										},
										{
											"begin": 9273,
											"end": 9291,
											"name": "tag",
											"source": 13,
											"value": "708"
										},
										{
											"begin": 9273,
											"end": 9291,
											"name": "JUMPDEST",
											"source": 13
										},
										{
											"begin": -1,
											"end": -1,
											"name": "POP",
											"source": -1
										},
										{
											"begin": 9309,
											"end": 9318,
											"name": "ADD",
											"source": 13
										},
										{
											"begin": 9309,
											"end": 9318,
											"name": "SWAP1",
											"source": 13
										},
										{
											"begin": 9196,
											"end": 9324,
											"name": "JUMP",
											"source": 13,
											"value": "[out]"
										},
										{
											"begin": 10169,
											"end": 10337,
											"name": "tag",
											"source": 13,
											"value": "301"
										},
										{
											"begin": 10169,
											"end": 10337,
											"name": "JUMPDEST",
											"source": 13
										},
										{
											"begin": 10209,
											"end": 10216,
											"name": "PUSH",
											"source": 13,
											"value": "0"
										},
										{
											"begin": 10275,
											"end": 10276,
											"name": "DUP2",
											"source": 13
										},
										{
											"begin": 10271,
											"end": 10272,
											"name": "PUSH",
											"source": 13,
											"value": "0"
										},
										{
											"begin": 10267,
											"end": 10273,
											"name": "NOT",
											"source": 13
										},
										{
											"begin": 10263,
											"end": 10277,
											"name": "DIV",
											"source": 13
										},
										{
											"begin": 10260,
											"end": 10261,
											"name": "DUP4",
											"source": 13
										},
										{
											"begin": 10257,
											"end": 10278,
											"name": "GT",
											"source": 13
										},
										{
											"begin": 10252,
											"end": 10253,
											"name": "DUP3",
											"source": 13
										},
										{
											"begin": 10245,
											"end": 10254,
											"name": "ISZERO",
											"source": 13
										},
										{
											"begin": 10238,
											"end": 10255,
											"name": "ISZERO",
											"source": 13
										},
										{
											"begin": 10234,
											"end": 10279,
											"name": "AND",
											"source": 13
										},
										{
											"begin": 10231,
											"end": 10302,
											"name": "ISZERO",
											"source": 13
										},
										{
											"begin": 10231,
											"end": 10302,
											"name": "PUSH [tag]",
											"source": 13,
											"value": "713"
										},
										{
											"begin": 10231,
											"end": 10302,
											"name": "JUMPI",
											"source": 13
										},
										{
											"begin": 10282,
											"end": 10300,
											"name": "PUSH [tag]",
											"source": 13,
											"value": "713"
										},
										{
											"begin": 10282,
											"end": 10300,
											"name": "PUSH [tag]",
											"source": 13,
											"value": "615"
										},
										{
											"begin": 10282,
											"end": 10300,
											"name": "JUMP",
											"source": 13,
											"value": "[in]"
										},
										{
											"begin": 10282,
											"end": 10300,
											"name": "tag",
											"source": 13,
											"value": "713"
										},
										{
											"begin": 10282,
											"end": 10300,
											"name": "JUMPDEST",
											"source": 13
										},
										{
											"begin": -1,
											"end": -1,
											"name": "POP",
											"source": -1
										},
										{
											"begin": 10322,
											"end": 10331,
											"name": "MUL",
											"source": 13
										},
										{
											"begin": 10322,
											"end": 10331,
											"name": "SWAP1",
											"source": 13
										},
										{
											"begin": 10169,
											"end": 10337,
											"name": "JUMP",
											"source": 13,
											"value": "[out]"
										},
										{
											"begin": 11399,
											"end": 11526,
											"name": "tag",
											"source": 13,
											"value": "616"
										},
										{
											"begin": 11399,
											"end": 11526,
											"name": "JUMPDEST",
											"source": 13
										},
										{
											"begin": 11460,
											"end": 11470,
											"name": "PUSH",
											"source": 13,
											"value": "4E487B71"
										},
										{
											"begin": 11455,
											"end": 11458,
											"name": "PUSH",
											"source": 13,
											"value": "E0"
										},
										{
											"begin": 11451,
											"end": 11471,
											"name": "SHL",
											"source": 13
										},
										{
											"begin": 11448,
											"end": 11449,
											"name": "PUSH",
											"source": 13,
											"value": "0"
										},
										{
											"begin": 11441,
											"end": 11472,
											"name": "MSTORE",
											"source": 13
										},
										{
											"begin": 11491,
											"end": 11495,
											"name": "PUSH",
											"source": 13,
											"value": "12"
										},
										{
											"begin": 11488,
											"end": 11489,
											"name": "PUSH",
											"source": 13,
											"value": "4"
										},
										{
											"begin": 11481,
											"end": 11496,
											"name": "MSTORE",
											"source": 13
										},
										{
											"begin": 11515,
											"end": 11519,
											"name": "PUSH",
											"source": 13,
											"value": "24"
										},
										{
											"begin": 11512,
											"end": 11513,
											"name": "PUSH",
											"source": 13,
											"value": "0"
										},
										{
											"begin": 11505,
											"end": 11520,
											"name": "REVERT",
											"source": 13
										},
										{
											"begin": 11531,
											"end": 11651,
											"name": "tag",
											"source": 13,
											"value": "323"
										},
										{
											"begin": 11531,
											"end": 11651,
											"name": "JUMPDEST",
											"source": 13
										},
										{
											"begin": 11571,
											"end": 11572,
											"name": "PUSH",
											"source": 13,
											"value": "0"
										},
										{
											"begin": 11597,
											"end": 11598,
											"name": "DUP3",
											"source": 13
										},
										{
											"begin": 11587,
											"end": 11622,
											"name": "PUSH [tag]",
											"source": 13,
											"value": "720"
										},
										{
											"begin": 11587,
											"end": 11622,
											"name": "JUMPI",
											"source": 13
										},
										{
											"begin": 11602,
											"end": 11620,
											"name": "PUSH [tag]",
											"source": 13,
											"value": "720"
										},
										{
											"begin": 11602,
											"end": 11620,
											"name": "PUSH [tag]",
											"source": 13,
											"value": "616"
										},
										{
											"begin": 11602,
											"end": 11620,
											"name": "JUMP",
											"source": 13,
											"value": "[in]"
										},
										{
											"begin": 11602,
											"end": 11620,
											"name": "tag",
											"source": 13,
											"value": "720"
										},
										{
											"begin": 11602,
											"end": 11620,
											"name": "JUMPDEST",
											"source": 13
										},
										{
											"begin": -1,
											"end": -1,
											"name": "POP",
											"source": -1
										},
										{
											"begin": 11636,
											"end": 11645,
											"name": "DIV",
											"source": 13
										},
										{
											"begin": 11636,
											"end": 11645,
											"name": "SWAP1",
											"source": 13
										},
										{
											"begin": 11531,
											"end": 11651,
											"name": "JUMP",
											"source": 13,
											"value": "[out]"
										},
										{
											"begin": 11656,
											"end": 11791,
											"name": "tag",
											"source": 13,
											"value": "371"
										},
										{
											"begin": 11656,
											"end": 11791,
											"name": "JUMPDEST",
											"source": 13
										},
										{
											"begin": 11695,
											"end": 11698,
											"name": "PUSH",
											"source": 13,
											"value": "0"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "0"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "NOT",
											"source": -1
										},
										{
											"begin": 11716,
											"end": 11733,
											"name": "DUP3",
											"source": 13
										},
										{
											"begin": 11716,
											"end": 11733,
											"name": "EQ",
											"source": 13
										},
										{
											"begin": 11713,
											"end": 11756,
											"name": "ISZERO",
											"source": 13
										},
										{
											"begin": 11713,
											"end": 11756,
											"name": "PUSH [tag]",
											"source": 13,
											"value": "723"
										},
										{
											"begin": 11713,
											"end": 11756,
											"name": "JUMPI",
											"source": 13
										},
										{
											"begin": 11736,
											"end": 11754,
											"name": "PUSH [tag]",
											"source": 13,
											"value": "723"
										},
										{
											"begin": 11736,
											"end": 11754,
											"name": "PUSH [tag]",
											"source": 13,
											"value": "615"
										},
										{
											"begin": 11736,
											"end": 11754,
											"name": "JUMP",
											"source": 13,
											"value": "[in]"
										},
										{
											"begin": 11736,
											"end": 11754,
											"name": "tag",
											"source": 13,
											"value": "723"
										},
										{
											"begin": 11736,
											"end": 11754,
											"name": "JUMPDEST",
											"source": 13
										},
										{
											"begin": -1,
											"end": -1,
											"name": "POP",
											"source": -1
										},
										{
											"begin": 11783,
											"end": 11784,
											"name": "PUSH",
											"source": 13,
											"value": "1"
										},
										{
											"begin": 11772,
											"end": 11785,
											"name": "ADD",
											"source": 13
										},
										{
											"begin": 11772,
											"end": 11785,
											"name": "SWAP1",
											"source": 13
										},
										{
											"begin": 11656,
											"end": 11791,
											"name": "JUMP",
											"source": 13,
											"value": "[out]"
										},
										{
											"begin": 14313,
											"end": 14498,
											"name": "tag",
											"source": 13,
											"value": "618"
										},
										{
											"begin": 14313,
											"end": 14498,
											"name": "JUMPDEST",
											"source": 13
										},
										{
											"begin": 14355,
											"end": 14358,
											"name": "PUSH",
											"source": 13,
											"value": "0"
										},
										{
											"begin": 14393,
											"end": 14398,
											"name": "DUP2",
											"source": 13
										},
										{
											"begin": 14387,
											"end": 14399,
											"name": "MLOAD",
											"source": 13
										},
										{
											"begin": 14408,
											"end": 14460,
											"name": "PUSH [tag]",
											"source": 13,
											"value": "732"
										},
										{
											"begin": 14453,
											"end": 14459,
											"name": "DUP2",
											"source": 13
										},
										{
											"begin": 14448,
											"end": 14451,
											"name": "DUP6",
											"source": 13
										},
										{
											"begin": 14441,
											"end": 14445,
											"name": "PUSH",
											"source": 13,
											"value": "20"
										},
										{
											"begin": 14434,
											"end": 14439,
											"name": "DUP7",
											"source": 13
										},
										{
											"begin": 14430,
											"end": 14446,
											"name": "ADD",
											"source": 13
										},
										{
											"begin": 14408,
											"end": 14460,
											"name": "PUSH [tag]",
											"source": 13,
											"value": "613"
										},
										{
											"begin": 14408,
											"end": 14460,
											"name": "JUMP",
											"source": 13,
											"value": "[in]"
										},
										{
											"begin": 14408,
											"end": 14460,
											"name": "tag",
											"source": 13,
											"value": "732"
										},
										{
											"begin": 14408,
											"end": 14460,
											"name": "JUMPDEST",
											"source": 13
										},
										{
											"begin": 14476,
											"end": 14492,
											"name": "SWAP3",
											"source": 13
										},
										{
											"begin": 14476,
											"end": 14492,
											"name": "SWAP1",
											"source": 13
										},
										{
											"begin": 14476,
											"end": 14492,
											"name": "SWAP3",
											"source": 13
										},
										{
											"begin": 14476,
											"end": 14492,
											"name": "ADD",
											"source": 13
										},
										{
											"begin": 14476,
											"end": 14492,
											"name": "SWAP3",
											"source": 13
										},
										{
											"begin": 14313,
											"end": 14498,
											"name": "SWAP2",
											"source": 13
										},
										{
											"begin": -1,
											"end": -1,
											"name": "POP",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "POP",
											"source": -1
										},
										{
											"begin": 14313,
											"end": 14498,
											"name": "JUMP",
											"source": 13,
											"value": "[out]"
										},
										{
											"begin": 14621,
											"end": 15922,
											"name": "tag",
											"source": 13,
											"value": "462"
										},
										{
											"begin": 14621,
											"end": 15922,
											"name": "JUMPDEST",
											"source": 13
										},
										{
											"begin": 14898,
											"end": 14901,
											"name": "PUSH",
											"source": 13,
											"value": "0"
										},
										{
											"begin": 14927,
											"end": 14928,
											"name": "DUP1",
											"source": 13
										},
										{
											"begin": 14960,
											"end": 14966,
											"name": "DUP5",
											"source": 13
										},
										{
											"begin": 14954,
											"end": 14967,
											"name": "SLOAD",
											"source": 13
										},
										{
											"begin": 14990,
											"end": 14993,
											"name": "DUP2",
											"source": 13
										},
										{
											"begin": 15012,
											"end": 15013,
											"name": "PUSH",
											"source": 13,
											"value": "1"
										},
										{
											"begin": 15040,
											"end": 15049,
											"name": "DUP3",
											"source": 13
										},
										{
											"begin": 15036,
											"end": 15038,
											"name": "DUP2",
											"source": 13
										},
										{
											"begin": 15032,
											"end": 15050,
											"name": "SHR",
											"source": 13
										},
										{
											"begin": 15022,
											"end": 15050,
											"name": "SWAP2",
											"source": 13
										},
										{
											"begin": 15022,
											"end": 15050,
											"name": "POP",
											"source": 13
										},
										{
											"begin": 15100,
											"end": 15102,
											"name": "DUP1",
											"source": 13
										},
										{
											"begin": 15089,
											"end": 15098,
											"name": "DUP4",
											"source": 13
										},
										{
											"begin": 15085,
											"end": 15103,
											"name": "AND",
											"source": 13
										},
										{
											"begin": 15122,
											"end": 15140,
											"name": "DUP1",
											"source": 13
										},
										{
											"begin": 15112,
											"end": 15173,
											"name": "PUSH [tag]",
											"source": 13,
											"value": "735"
										},
										{
											"begin": 15112,
											"end": 15173,
											"name": "JUMPI",
											"source": 13
										},
										{
											"begin": 15166,
											"end": 15170,
											"name": "PUSH",
											"source": 13,
											"value": "7F"
										},
										{
											"begin": 15158,
											"end": 15164,
											"name": "DUP4",
											"source": 13
										},
										{
											"begin": 15154,
											"end": 15171,
											"name": "AND",
											"source": 13
										},
										{
											"begin": 15144,
											"end": 15171,
											"name": "SWAP3",
											"source": 13
										},
										{
											"begin": 15144,
											"end": 15171,
											"name": "POP",
											"source": 13
										},
										{
											"begin": 15112,
											"end": 15173,
											"name": "tag",
											"source": 13,
											"value": "735"
										},
										{
											"begin": 15112,
											"end": 15173,
											"name": "JUMPDEST",
											"source": 13
										},
										{
											"begin": 15192,
											"end": 15194,
											"name": "PUSH",
											"source": 13,
											"value": "20"
										},
										{
											"begin": 15240,
											"end": 15242,
											"name": "DUP1",
											"source": 13
										},
										{
											"begin": 15232,
											"end": 15238,
											"name": "DUP5",
											"source": 13
										},
										{
											"begin": 15229,
											"end": 15243,
											"name": "LT",
											"source": 13
										},
										{
											"begin": 15209,
											"end": 15227,
											"name": "DUP3",
											"source": 13
										},
										{
											"begin": 15206,
											"end": 15244,
											"name": "EQ",
											"source": 13
										},
										{
											"begin": 15203,
											"end": 15368,
											"name": "ISZERO",
											"source": 13
										},
										{
											"begin": 15203,
											"end": 15368,
											"name": "PUSH [tag]",
											"source": 13,
											"value": "736"
										},
										{
											"begin": 15203,
											"end": 15368,
											"name": "JUMPI",
											"source": 13
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "4E487B71"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "E0"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SHL",
											"source": -1
										},
										{
											"begin": 15267,
											"end": 15300,
											"name": "DUP7",
											"source": 13
										},
										{
											"begin": 15267,
											"end": 15300,
											"name": "MSTORE",
											"source": 13
										},
										{
											"begin": 15323,
											"end": 15327,
											"name": "PUSH",
											"source": 13,
											"value": "22"
										},
										{
											"begin": 15320,
											"end": 15321,
											"name": "PUSH",
											"source": 13,
											"value": "4"
										},
										{
											"begin": 15313,
											"end": 15328,
											"name": "MSTORE",
											"source": 13
										},
										{
											"begin": 15353,
											"end": 15357,
											"name": "PUSH",
											"source": 13,
											"value": "24"
										},
										{
											"begin": 15274,
											"end": 15277,
											"name": "DUP7",
											"source": 13
										},
										{
											"begin": 15341,
											"end": 15358,
											"name": "REVERT",
											"source": 13
										},
										{
											"begin": 15203,
											"end": 15368,
											"name": "tag",
											"source": 13,
											"value": "736"
										},
										{
											"begin": 15203,
											"end": 15368,
											"name": "JUMPDEST",
											"source": 13
										},
										{
											"begin": 15384,
											"end": 15402,
											"name": "DUP2",
											"source": 13
										},
										{
											"begin": 15411,
											"end": 15515,
											"name": "DUP1",
											"source": 13
										},
										{
											"begin": 15411,
											"end": 15515,
											"name": "ISZERO",
											"source": 13
										},
										{
											"begin": 15411,
											"end": 15515,
											"name": "PUSH [tag]",
											"source": 13,
											"value": "738"
										},
										{
											"begin": 15411,
											"end": 15515,
											"name": "JUMPI",
											"source": 13
										},
										{
											"begin": 15529,
											"end": 15530,
											"name": "PUSH",
											"source": 13,
											"value": "1"
										},
										{
											"begin": 15524,
											"end": 15844,
											"name": "DUP2",
											"source": 13
										},
										{
											"begin": 15524,
											"end": 15844,
											"name": "EQ",
											"source": 13
										},
										{
											"begin": 15524,
											"end": 15844,
											"name": "PUSH [tag]",
											"source": 13,
											"value": "739"
										},
										{
											"begin": 15524,
											"end": 15844,
											"name": "JUMPI",
											"source": 13
										},
										{
											"begin": 15377,
											"end": 15844,
											"name": "PUSH [tag]",
											"source": 13,
											"value": "737"
										},
										{
											"begin": 15377,
											"end": 15844,
											"name": "JUMP",
											"source": 13
										},
										{
											"begin": 15411,
											"end": 15515,
											"name": "tag",
											"source": 13,
											"value": "738"
										},
										{
											"begin": 15411,
											"end": 15515,
											"name": "JUMPDEST",
											"source": 13
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "FF"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "NOT",
											"source": -1
										},
										{
											"begin": 15444,
											"end": 15468,
											"name": "DUP7",
											"source": 13
										},
										{
											"begin": 15444,
											"end": 15468,
											"name": "AND",
											"source": 13
										},
										{
											"begin": 15432,
											"end": 15469,
											"name": "DUP10",
											"source": 13
										},
										{
											"begin": 15432,
											"end": 15469,
											"name": "MSTORE",
											"source": 13
										},
										{
											"begin": 15489,
											"end": 15505,
											"name": "DUP5",
											"source": 13
										},
										{
											"begin": 15489,
											"end": 15505,
											"name": "DUP10",
											"source": 13
										},
										{
											"begin": 15489,
											"end": 15505,
											"name": "ADD",
											"source": 13
										},
										{
											"begin": 15489,
											"end": 15505,
											"name": "SWAP7",
											"source": 13
										},
										{
											"begin": -1,
											"end": -1,
											"name": "POP",
											"source": -1
										},
										{
											"begin": 15411,
											"end": 15515,
											"name": "PUSH [tag]",
											"source": 13,
											"value": "737"
										},
										{
											"begin": 15411,
											"end": 15515,
											"name": "JUMP",
											"source": 13
										},
										{
											"begin": 15524,
											"end": 15844,
											"name": "tag",
											"source": 13,
											"value": "739"
										},
										{
											"begin": 15524,
											"end": 15844,
											"name": "JUMPDEST",
											"source": 13
										},
										{
											"begin": 14260,
											"end": 14261,
											"name": "PUSH",
											"source": 13,
											"value": "0"
										},
										{
											"begin": 14253,
											"end": 14267,
											"name": "DUP12",
											"source": 13
										},
										{
											"begin": 14253,
											"end": 14267,
											"name": "DUP2",
											"source": 13
										},
										{
											"begin": 14253,
											"end": 14267,
											"name": "MSTORE",
											"source": 13
										},
										{
											"begin": 14297,
											"end": 14301,
											"name": "PUSH",
											"source": 13,
											"value": "20"
										},
										{
											"begin": 14284,
											"end": 14302,
											"name": "SWAP1",
											"source": 13
										},
										{
											"begin": 14284,
											"end": 14302,
											"name": "KECCAK256",
											"source": 13
										},
										{
											"begin": 15619,
											"end": 15620,
											"name": "PUSH",
											"source": 13,
											"value": "0"
										},
										{
											"begin": 15633,
											"end": 15798,
											"name": "tag",
											"source": 13,
											"value": "741"
										},
										{
											"begin": 15633,
											"end": 15798,
											"name": "JUMPDEST",
											"source": 13
										},
										{
											"begin": 15647,
											"end": 15653,
											"name": "DUP7",
											"source": 13
										},
										{
											"begin": 15644,
											"end": 15645,
											"name": "DUP2",
											"source": 13
										},
										{
											"begin": 15641,
											"end": 15654,
											"name": "LT",
											"source": 13
										},
										{
											"begin": 15633,
											"end": 15798,
											"name": "ISZERO",
											"source": 13
										},
										{
											"begin": 15633,
											"end": 15798,
											"name": "PUSH [tag]",
											"source": 13,
											"value": "743"
										},
										{
											"begin": 15633,
											"end": 15798,
											"name": "JUMPI",
											"source": 13
										},
										{
											"begin": 15725,
											"end": 15739,
											"name": "DUP2",
											"source": 13
										},
										{
											"begin": 15725,
											"end": 15739,
											"name": "SLOAD",
											"source": 13
										},
										{
											"begin": 15712,
											"end": 15723,
											"name": "DUP12",
											"source": 13
										},
										{
											"begin": 15712,
											"end": 15723,
											"name": "DUP3",
											"source": 13
										},
										{
											"begin": 15712,
											"end": 15723,
											"name": "ADD",
											"source": 13
										},
										{
											"begin": 15705,
											"end": 15740,
											"name": "MSTORE",
											"source": 13
										},
										{
											"begin": 15768,
											"end": 15784,
											"name": "SWAP1",
											"source": 13
										},
										{
											"begin": 15768,
											"end": 15784,
											"name": "DUP6",
											"source": 13
										},
										{
											"begin": 15768,
											"end": 15784,
											"name": "ADD",
											"source": 13
										},
										{
											"begin": 15768,
											"end": 15784,
											"name": "SWAP1",
											"source": 13
										},
										{
											"begin": 15662,
											"end": 15672,
											"name": "DUP4",
											"source": 13
										},
										{
											"begin": 15662,
											"end": 15672,
											"name": "ADD",
											"source": 13
										},
										{
											"begin": 15633,
											"end": 15798,
											"name": "PUSH [tag]",
											"source": 13,
											"value": "741"
										},
										{
											"begin": 15633,
											"end": 15798,
											"name": "JUMP",
											"source": 13
										},
										{
											"begin": 15633,
											"end": 15798,
											"name": "tag",
											"source": 13,
											"value": "743"
										},
										{
											"begin": 15633,
											"end": 15798,
											"name": "JUMPDEST",
											"source": 13
										},
										{
											"begin": 15637,
											"end": 15640,
											"name": "POP",
											"source": 13
										},
										{
											"begin": 15637,
											"end": 15640,
											"name": "POP",
											"source": 13
										},
										{
											"begin": 15827,
											"end": 15833,
											"name": "DUP5",
											"source": 13
										},
										{
											"begin": 15822,
											"end": 15825,
											"name": "DUP10",
											"source": 13
										},
										{
											"begin": 15818,
											"end": 15834,
											"name": "ADD",
											"source": 13
										},
										{
											"begin": 15811,
											"end": 15834,
											"name": "SWAP7",
											"source": 13
										},
										{
											"begin": 15811,
											"end": 15834,
											"name": "POP",
											"source": 13
										},
										{
											"begin": 15377,
											"end": 15844,
											"name": "tag",
											"source": 13,
											"value": "737"
										},
										{
											"begin": 15377,
											"end": 15844,
											"name": "JUMPDEST",
											"source": 13
										},
										{
											"begin": 15377,
											"end": 15844,
											"name": "POP",
											"source": 13
										},
										{
											"begin": 15377,
											"end": 15844,
											"name": "POP",
											"source": 13
										},
										{
											"begin": 15377,
											"end": 15844,
											"name": "POP",
											"source": 13
										},
										{
											"begin": 15377,
											"end": 15844,
											"name": "POP",
											"source": 13
										},
										{
											"begin": 15377,
											"end": 15844,
											"name": "POP",
											"source": 13
										},
										{
											"begin": 15377,
											"end": 15844,
											"name": "POP",
											"source": 13
										},
										{
											"begin": 15860,
											"end": 15916,
											"name": "PUSH [tag]",
											"source": 13,
											"value": "744"
										},
										{
											"begin": 15885,
											"end": 15915,
											"name": "PUSH [tag]",
											"source": 13,
											"value": "745"
										},
										{
											"begin": 15911,
											"end": 15914,
											"name": "DUP3",
											"source": 13
										},
										{
											"begin": 15903,
											"end": 15909,
											"name": "DUP7",
											"source": 13
										},
										{
											"begin": 15885,
											"end": 15915,
											"name": "PUSH [tag]",
											"source": 13,
											"value": "618"
										},
										{
											"begin": 15885,
											"end": 15915,
											"name": "JUMP",
											"source": 13,
											"value": "[in]"
										},
										{
											"begin": 15885,
											"end": 15915,
											"name": "tag",
											"source": 13,
											"value": "745"
										},
										{
											"begin": 15885,
											"end": 15915,
											"name": "JUMPDEST",
											"source": 13
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "173539B7B7"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "D9"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SHL",
											"source": -1
										},
										{
											"begin": 14563,
											"end": 14583,
											"name": "DUP2",
											"source": 13
										},
										{
											"begin": 14563,
											"end": 14583,
											"name": "MSTORE",
											"source": 13
										},
										{
											"begin": 14608,
											"end": 14609,
											"name": "PUSH",
											"source": 13,
											"value": "5"
										},
										{
											"begin": 14599,
											"end": 14610,
											"name": "ADD",
											"source": 13
										},
										{
											"begin": 14599,
											"end": 14610,
											"name": "SWAP1",
											"source": 13
										},
										{
											"begin": 14503,
											"end": 14616,
											"name": "JUMP",
											"source": 13
										},
										{
											"begin": 15860,
											"end": 15916,
											"name": "tag",
											"source": 13,
											"value": "744"
										},
										{
											"begin": 15860,
											"end": 15916,
											"name": "JUMPDEST",
											"source": 13
										},
										{
											"begin": 15853,
											"end": 15916,
											"name": "SWAP6",
											"source": 13
										},
										{
											"begin": 14621,
											"end": 15922,
											"name": "SWAP5",
											"source": 13
										},
										{
											"begin": -1,
											"end": -1,
											"name": "POP",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "POP",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "POP",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "POP",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "POP",
											"source": -1
										},
										{
											"begin": 14621,
											"end": 15922,
											"name": "JUMP",
											"source": 13,
											"value": "[out]"
										},
										{
											"begin": 16334,
											"end": 16834,
											"name": "tag",
											"source": 13,
											"value": "529"
										},
										{
											"begin": 16334,
											"end": 16834,
											"name": "JUMPDEST",
											"source": 13
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "A0"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SHL",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SUB",
											"source": -1
										},
										{
											"begin": 16603,
											"end": 16618,
											"name": "DUP6",
											"source": 13
										},
										{
											"begin": 16603,
											"end": 16618,
											"name": "DUP2",
											"source": 13
										},
										{
											"begin": 16603,
											"end": 16618,
											"name": "AND",
											"source": 13
										},
										{
											"begin": 16585,
											"end": 16619,
											"name": "DUP3",
											"source": 13
										},
										{
											"begin": 16585,
											"end": 16619,
											"name": "MSTORE",
											"source": 13
										},
										{
											"begin": 16655,
											"end": 16670,
											"name": "DUP5",
											"source": 13
										},
										{
											"begin": 16655,
											"end": 16670,
											"name": "AND",
											"source": 13
										},
										{
											"begin": 16650,
											"end": 16652,
											"name": "PUSH",
											"source": 13,
											"value": "20"
										},
										{
											"begin": 16635,
											"end": 16653,
											"name": "DUP3",
											"source": 13
										},
										{
											"begin": 16635,
											"end": 16653,
											"name": "ADD",
											"source": 13
										},
										{
											"begin": 16628,
											"end": 16671,
											"name": "MSTORE",
											"source": 13
										},
										{
											"begin": 16702,
											"end": 16704,
											"name": "PUSH",
											"source": 13,
											"value": "40"
										},
										{
											"begin": 16687,
											"end": 16705,
											"name": "DUP2",
											"source": 13
										},
										{
											"begin": 16687,
											"end": 16705,
											"name": "ADD",
											"source": 13
										},
										{
											"begin": 16680,
											"end": 16714,
											"name": "DUP4",
											"source": 13
										},
										{
											"begin": 16680,
											"end": 16714,
											"name": "SWAP1",
											"source": 13
										},
										{
											"begin": 16680,
											"end": 16714,
											"name": "MSTORE",
											"source": 13
										},
										{
											"begin": 16750,
											"end": 16753,
											"name": "PUSH",
											"source": 13,
											"value": "80"
										},
										{
											"begin": 16745,
											"end": 16747,
											"name": "PUSH",
											"source": 13,
											"value": "60"
										},
										{
											"begin": 16730,
											"end": 16748,
											"name": "DUP3",
											"source": 13
										},
										{
											"begin": 16730,
											"end": 16748,
											"name": "ADD",
											"source": 13
										},
										{
											"begin": 16723,
											"end": 16754,
											"name": "DUP2",
											"source": 13
										},
										{
											"begin": 16723,
											"end": 16754,
											"name": "SWAP1",
											"source": 13
										},
										{
											"begin": 16723,
											"end": 16754,
											"name": "MSTORE",
											"source": 13
										},
										{
											"begin": 16528,
											"end": 16532,
											"name": "PUSH",
											"source": 13,
											"value": "0"
										},
										{
											"begin": 16528,
											"end": 16532,
											"name": "SWAP1",
											"source": 13
										},
										{
											"begin": 16771,
											"end": 16828,
											"name": "PUSH [tag]",
											"source": 13,
											"value": "748"
										},
										{
											"begin": 16771,
											"end": 16828,
											"name": "SWAP1",
											"source": 13
										},
										{
											"begin": 16808,
											"end": 16827,
											"name": "DUP4",
											"source": 13
										},
										{
											"begin": 16808,
											"end": 16827,
											"name": "ADD",
											"source": 13
										},
										{
											"begin": 16800,
											"end": 16806,
											"name": "DUP5",
											"source": 13
										},
										{
											"begin": 16771,
											"end": 16828,
											"name": "PUSH [tag]",
											"source": 13,
											"value": "614"
										},
										{
											"begin": 16771,
											"end": 16828,
											"name": "JUMP",
											"source": 13,
											"value": "[in]"
										},
										{
											"begin": 16771,
											"end": 16828,
											"name": "tag",
											"source": 13,
											"value": "748"
										},
										{
											"begin": 16771,
											"end": 16828,
											"name": "JUMPDEST",
											"source": 13
										},
										{
											"begin": 16763,
											"end": 16828,
											"name": "SWAP7",
											"source": 13
										},
										{
											"begin": 16334,
											"end": 16834,
											"name": "SWAP6",
											"source": 13
										},
										{
											"begin": -1,
											"end": -1,
											"name": "POP",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "POP",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "POP",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "POP",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "POP",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "POP",
											"source": -1
										},
										{
											"begin": 16334,
											"end": 16834,
											"name": "JUMP",
											"source": 13,
											"value": "[out]"
										},
										{
											"begin": 16839,
											"end": 17088,
											"name": "tag",
											"source": 13,
											"value": "533"
										},
										{
											"begin": 16839,
											"end": 17088,
											"name": "JUMPDEST",
											"source": 13
										},
										{
											"begin": 16908,
											"end": 16914,
											"name": "PUSH",
											"source": 13,
											"value": "0"
										},
										{
											"begin": 16961,
											"end": 16963,
											"name": "PUSH",
											"source": 13,
											"value": "20"
										},
										{
											"begin": 16949,
											"end": 16958,
											"name": "DUP3",
											"source": 13
										},
										{
											"begin": 16940,
											"end": 16947,
											"name": "DUP5",
											"source": 13
										},
										{
											"begin": 16936,
											"end": 16959,
											"name": "SUB",
											"source": 13
										},
										{
											"begin": 16932,
											"end": 16964,
											"name": "SLT",
											"source": 13
										},
										{
											"begin": 16929,
											"end": 16981,
											"name": "ISZERO",
											"source": 13
										},
										{
											"begin": 16929,
											"end": 16981,
											"name": "PUSH [tag]",
											"source": 13,
											"value": "750"
										},
										{
											"begin": 16929,
											"end": 16981,
											"name": "JUMPI",
											"source": 13
										},
										{
											"begin": 16977,
											"end": 16978,
											"name": "PUSH",
											"source": 13,
											"value": "0"
										},
										{
											"begin": 16974,
											"end": 16975,
											"name": "DUP1",
											"source": 13
										},
										{
											"begin": 16967,
											"end": 16979,
											"name": "REVERT",
											"source": 13
										},
										{
											"begin": 16929,
											"end": 16981,
											"name": "tag",
											"source": 13,
											"value": "750"
										},
										{
											"begin": 16929,
											"end": 16981,
											"name": "JUMPDEST",
											"source": 13
										},
										{
											"begin": 17009,
											"end": 17018,
											"name": "DUP2",
											"source": 13
										},
										{
											"begin": 17003,
											"end": 17019,
											"name": "MLOAD",
											"source": 13
										},
										{
											"begin": 17028,
											"end": 17058,
											"name": "PUSH [tag]",
											"source": 13,
											"value": "458"
										},
										{
											"begin": 17052,
											"end": 17057,
											"name": "DUP2",
											"source": 13
										},
										{
											"begin": 17028,
											"end": 17058,
											"name": "PUSH [tag]",
											"source": 13,
											"value": "609"
										},
										{
											"begin": 17028,
											"end": 17058,
											"name": "JUMP",
											"source": 13,
											"value": "[in]"
										},
										{
											"begin": 17093,
											"end": 17218,
											"name": "tag",
											"source": 13,
											"value": "555"
										},
										{
											"begin": 17093,
											"end": 17218,
											"name": "JUMPDEST",
											"source": 13
										},
										{
											"begin": 17133,
											"end": 17137,
											"name": "PUSH",
											"source": 13,
											"value": "0"
										},
										{
											"begin": 17161,
											"end": 17162,
											"name": "DUP3",
											"source": 13
										},
										{
											"begin": 17158,
											"end": 17159,
											"name": "DUP3",
											"source": 13
										},
										{
											"begin": 17155,
											"end": 17163,
											"name": "LT",
											"source": 13
										},
										{
											"begin": 17152,
											"end": 17186,
											"name": "ISZERO",
											"source": 13
										},
										{
											"begin": 17152,
											"end": 17186,
											"name": "PUSH [tag]",
											"source": 13,
											"value": "754"
										},
										{
											"begin": 17152,
											"end": 17186,
											"name": "JUMPI",
											"source": 13
										},
										{
											"begin": 17166,
											"end": 17184,
											"name": "PUSH [tag]",
											"source": 13,
											"value": "754"
										},
										{
											"begin": 17166,
											"end": 17184,
											"name": "PUSH [tag]",
											"source": 13,
											"value": "615"
										},
										{
											"begin": 17166,
											"end": 17184,
											"name": "JUMP",
											"source": 13,
											"value": "[in]"
										},
										{
											"begin": 17166,
											"end": 17184,
											"name": "tag",
											"source": 13,
											"value": "754"
										},
										{
											"begin": 17166,
											"end": 17184,
											"name": "JUMPDEST",
											"source": 13
										},
										{
											"begin": -1,
											"end": -1,
											"name": "POP",
											"source": -1
										},
										{
											"begin": 17203,
											"end": 17212,
											"name": "SUB",
											"source": 13
										},
										{
											"begin": 17203,
											"end": 17212,
											"name": "SWAP1",
											"source": 13
										},
										{
											"begin": 17093,
											"end": 17218,
											"name": "JUMP",
											"source": 13,
											"value": "[out]"
										},
										{
											"begin": 17223,
											"end": 17335,
											"name": "tag",
											"source": 13,
											"value": "557"
										},
										{
											"begin": 17223,
											"end": 17335,
											"name": "JUMPDEST",
											"source": 13
										},
										{
											"begin": 17255,
											"end": 17256,
											"name": "PUSH",
											"source": 13,
											"value": "0"
										},
										{
											"begin": 17281,
											"end": 17282,
											"name": "DUP3",
											"source": 13
										},
										{
											"begin": 17271,
											"end": 17306,
											"name": "PUSH [tag]",
											"source": 13,
											"value": "757"
										},
										{
											"begin": 17271,
											"end": 17306,
											"name": "JUMPI",
											"source": 13
										},
										{
											"begin": 17286,
											"end": 17304,
											"name": "PUSH [tag]",
											"source": 13,
											"value": "757"
										},
										{
											"begin": 17286,
											"end": 17304,
											"name": "PUSH [tag]",
											"source": 13,
											"value": "616"
										},
										{
											"begin": 17286,
											"end": 17304,
											"name": "JUMP",
											"source": 13,
											"value": "[in]"
										},
										{
											"begin": 17286,
											"end": 17304,
											"name": "tag",
											"source": 13,
											"value": "757"
										},
										{
											"begin": 17286,
											"end": 17304,
											"name": "JUMPDEST",
											"source": 13
										},
										{
											"begin": -1,
											"end": -1,
											"name": "POP",
											"source": -1
										},
										{
											"begin": 17320,
											"end": 17329,
											"name": "MOD",
											"source": 13
										},
										{
											"begin": 17320,
											"end": 17329,
											"name": "SWAP1",
											"source": 13
										},
										{
											"begin": 17223,
											"end": 17335,
											"name": "JUMP",
											"source": 13,
											"value": "[out]"
										},
										{
											"begin": 17340,
											"end": 17467,
											"name": "tag",
											"source": 13,
											"value": "561"
										},
										{
											"begin": 17340,
											"end": 17467,
											"name": "JUMPDEST",
											"source": 13
										},
										{
											"begin": 17401,
											"end": 17411,
											"name": "PUSH",
											"source": 13,
											"value": "4E487B71"
										},
										{
											"begin": 17396,
											"end": 17399,
											"name": "PUSH",
											"source": 13,
											"value": "E0"
										},
										{
											"begin": 17392,
											"end": 17412,
											"name": "SHL",
											"source": 13
										},
										{
											"begin": 17389,
											"end": 17390,
											"name": "PUSH",
											"source": 13,
											"value": "0"
										},
										{
											"begin": 17382,
											"end": 17413,
											"name": "MSTORE",
											"source": 13
										},
										{
											"begin": 17432,
											"end": 17436,
											"name": "PUSH",
											"source": 13,
											"value": "32"
										},
										{
											"begin": 17429,
											"end": 17430,
											"name": "PUSH",
											"source": 13,
											"value": "4"
										},
										{
											"begin": 17422,
											"end": 17437,
											"name": "MSTORE",
											"source": 13
										},
										{
											"begin": 17456,
											"end": 17460,
											"name": "PUSH",
											"source": 13,
											"value": "24"
										},
										{
											"begin": 17453,
											"end": 17454,
											"name": "PUSH",
											"source": 13,
											"value": "0"
										},
										{
											"begin": 17446,
											"end": 17461,
											"name": "REVERT",
											"source": 13
										}
									]
								}
							}
						},
						"methodIdentifiers": {
							"MAX_PUBLIC_MINT()": "65f13097",
							"MAX_SUPPLY()": "32cb6b0c",
							"MAX_WHITELIST_MINT()": "c08dfd3c",
							"PUBLIC_SALE_PRICE()": "07e89ec0",
							"WHITELIST_SALE_PRICE()": "bc912e1a",
							"approve(address,uint256)": "095ea7b3",
							"balanceOf(address)": "70a08231",
							"getApproved(uint256)": "081812fc",
							"getMerkleRoot()": "49590657",
							"isApprovedForAll(address,address)": "e985e9c5",
							"isRevealed()": "54214f69",
							"mint(uint256)": "a0712d68",
							"name()": "06fdde03",
							"owner()": "8da5cb5b",
							"ownerOf(uint256)": "6352211e",
							"pause()": "8456cb59",
							"placeholderTokenUri()": "4cf5f7a4",
							"publicSale()": "33bc1c5c",
							"renounceOwnership()": "715018a6",
							"safeTransferFrom(address,address,uint256)": "42842e0e",
							"safeTransferFrom(address,address,uint256,bytes)": "b88d4fde",
							"setApprovalForAll(address,bool)": "a22cb465",
							"setMerkleRoot(bytes32)": "7cb64759",
							"setPlaceHolderUri(string)": "b0962c53",
							"setTokenUri(string)": "0675b7c6",
							"supportsInterface(bytes4)": "01ffc9a7",
							"symbol()": "95d89b41",
							"teamMint()": "ba7a86b8",
							"teamMinted()": "e8b5498d",
							"togglePause()": "c4ae3168",
							"togglePublicSale()": "e222c7f9",
							"toggleReveal()": "5b8ad429",
							"toggleWhiteListSale()": "8bb64a8c",
							"tokenURI(uint256)": "c87b56dd",
							"totalPublicMint(address)": "1c16521c",
							"totalSupply()": "18160ddd",
							"totalWhitelistMint(address)": "0345e3cb",
							"transferFrom(address,address,uint256)": "23b872dd",
							"transferOwnership(address)": "f2fde38b",
							"walletOf()": "83a974a2",
							"whiteListSale()": "86a173ee",
							"whitelistMint(bytes32[],uint256)": "2904e6d9",
							"withdraw()": "3ccfd60b"
						}
					},
					"metadata": "{\"compiler\":{\"version\":\"0.8.9+commit.e5eed63a\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"inputs\":[],\"name\":\"ApprovalCallerNotOwnerNorApproved\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"ApprovalQueryForNonexistentToken\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"ApprovalToCurrentOwner\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"ApproveToCaller\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"BalanceQueryForZeroAddress\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"MintToZeroAddress\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"MintZeroQuantity\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"OwnerQueryForNonexistentToken\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"TransferCallerNotOwnerNorApproved\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"TransferFromIncorrectOwner\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"TransferToNonERC721ReceiverImplementer\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"TransferToZeroAddress\",\"type\":\"error\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"approved\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"approved\",\"type\":\"bool\"}],\"name\":\"ApprovalForAll\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"MAX_PUBLIC_MINT\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"MAX_SUPPLY\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"MAX_WHITELIST_MINT\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"PUBLIC_SALE_PRICE\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"WHITELIST_SALE_PRICE\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"getApproved\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getMerkleRoot\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"}],\"name\":\"isApprovedForAll\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"isRevealed\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_quantity\",\"type\":\"uint256\"}],\"name\":\"mint\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"ownerOf\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"pause\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"placeholderTokenUri\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"publicSale\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"safeTransferFrom\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"_data\",\"type\":\"bytes\"}],\"name\":\"safeTransferFrom\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"approved\",\"type\":\"bool\"}],\"name\":\"setApprovalForAll\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"_merkleRoot\",\"type\":\"bytes32\"}],\"name\":\"setMerkleRoot\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"_placeholderTokenUri\",\"type\":\"string\"}],\"name\":\"setPlaceHolderUri\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"_baseTokenUri\",\"type\":\"string\"}],\"name\":\"setTokenUri\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes4\",\"name\":\"interfaceId\",\"type\":\"bytes4\"}],\"name\":\"supportsInterface\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"teamMint\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"teamMinted\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"togglePause\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"togglePublicSale\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"toggleReveal\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"toggleWhiteListSale\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"tokenURI\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"totalPublicMint\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"totalWhitelistMint\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"walletOf\",\"outputs\":[{\"internalType\":\"uint256[]\",\"name\":\"\",\"type\":\"uint256[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"whiteListSale\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32[]\",\"name\":\"_merkleProof\",\"type\":\"bytes32[]\"},{\"internalType\":\"uint256\",\"name\":\"_quantity\",\"type\":\"uint256\"}],\"name\":\"whitelistMint\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"withdraw\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{\"approve(address,uint256)\":{\"details\":\"See {IERC721-approve}.\"},\"balanceOf(address)\":{\"details\":\"See {IERC721-balanceOf}.\"},\"getApproved(uint256)\":{\"details\":\"See {IERC721-getApproved}.\"},\"isApprovedForAll(address,address)\":{\"details\":\"See {IERC721-isApprovedForAll}.\"},\"name()\":{\"details\":\"See {IERC721Metadata-name}.\"},\"owner()\":{\"details\":\"Returns the address of the current owner.\"},\"ownerOf(uint256)\":{\"details\":\"See {IERC721-ownerOf}.\"},\"renounceOwnership()\":{\"details\":\"Leaves the contract without owner. It will not be possible to call `onlyOwner` functions anymore. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby removing any functionality that is only available to the owner.\"},\"safeTransferFrom(address,address,uint256)\":{\"details\":\"See {IERC721-safeTransferFrom}.\"},\"safeTransferFrom(address,address,uint256,bytes)\":{\"details\":\"See {IERC721-safeTransferFrom}.\"},\"setApprovalForAll(address,bool)\":{\"details\":\"See {IERC721-setApprovalForAll}.\"},\"supportsInterface(bytes4)\":{\"details\":\"See {IERC165-supportsInterface}.\"},\"symbol()\":{\"details\":\"See {IERC721Metadata-symbol}.\"},\"tokenURI(uint256)\":{\"details\":\"See {IERC721Metadata-tokenURI}.\"},\"totalSupply()\":{\"details\":\"See {IERC721Enumerable-totalSupply}.Burned tokens are calculated here, use _totalMinted() if you want to count just minted tokens.\"},\"transferFrom(address,address,uint256)\":{\"details\":\"See {IERC721-transferFrom}.\"},\"transferOwnership(address)\":{\"details\":\"Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner.\"},\"walletOf()\":{\"details\":\"walletOf() function shouldn't be called on-chain due to gas consumption\"}},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contract/NewCryptoBullDogs.sol\":\"CryptoBullDogsOfficial\"},\"evmVersion\":\"london\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\"},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts/access/Ownable.sol\":{\"keccak256\":\"0x24e0364e503a9bbde94c715d26573a76f14cd2a202d45f96f52134ab806b67b9\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://e12cbaa7378fd9b62280e4e1d164bedcb4399ce238f5f98fc0eefb7e50577981\",\"dweb:/ipfs/QmXRoFGUgfsaRkoPT5bxNMtSayKTQ8GZATLPXf69HcRA51\"]},\"@openzeppelin/contracts/token/ERC721/IERC721.sol\":{\"keccak256\":\"0x516a22876c1fab47f49b1bc22b4614491cd05338af8bd2e7b382da090a079990\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://a439187f7126d31add4557f82d8aed6be0162007cd7182c48fd934dbab8f3849\",\"dweb:/ipfs/QmRPLguRFvrRJS7r6F1bcLvsx6q1VrgjEpZafyeL8D7xZh\"]},\"@openzeppelin/contracts/token/ERC721/IERC721Receiver.sol\":{\"keccak256\":\"0xd5fa74b4fb323776fa4a8158800fec9d5ac0fec0d6dd046dd93798632ada265f\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://33017a30a99cc5411a9e376622c31fc4a55cfc6a335e2f57f00cbf24a817ff3f\",\"dweb:/ipfs/QmWNQtWTPhA7Lo8nbxbc8KFMvZwbFYB8fSeEQ3vuapSV4a\"]},\"@openzeppelin/contracts/token/ERC721/extensions/IERC721Enumerable.sol\":{\"keccak256\":\"0xd1556954440b31c97a142c6ba07d5cade45f96fafd52091d33a14ebe365aecbf\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://26fef835622b46a5ba08b3ef6b46a22e94b5f285d0f0fb66b703bd30217d2c34\",\"dweb:/ipfs/QmZ548qdwfL1qF7aXz3xh1GCdTiST81kGGuKRqVUfYmPZR\"]},\"@openzeppelin/contracts/token/ERC721/extensions/IERC721Metadata.sol\":{\"keccak256\":\"0x75b829ff2f26c14355d1cba20e16fe7b29ca58eb5fef665ede48bc0f9c6c74b9\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://a0a107160525724f9e1bbbab031defc2f298296dd9e331f16a6f7130cec32146\",\"dweb:/ipfs/QmemujxSd7gX8A9M8UwmNbz4Ms3U9FG9QfudUgxwvTmPWf\"]},\"@openzeppelin/contracts/utils/Address.sol\":{\"keccak256\":\"0x2ccf9d2313a313d41a791505f2b5abfdc62191b5d4334f7f7a82691c088a1c87\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://b3a57d0854b2fdce6ebff933a48dca2445643d1eccfc27f00292e937f26c6a58\",\"dweb:/ipfs/QmW45rZooS9TqR4YXUbjRbtf2Bpb5ouSarBvfW1LdGprvV\"]},\"@openzeppelin/contracts/utils/Context.sol\":{\"keccak256\":\"0xe2e337e6dde9ef6b680e07338c493ebea1b5fd09b43424112868e9cc1706bca7\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://6df0ddf21ce9f58271bdfaa85cde98b200ef242a05a3f85c2bc10a8294800a92\",\"dweb:/ipfs/QmRK2Y5Yc6BK7tGKkgsgn3aJEQGi5aakeSPZvS65PV8Xp3\"]},\"@openzeppelin/contracts/utils/Strings.sol\":{\"keccak256\":\"0x32c202bd28995dd20c4347b7c6467a6d3241c74c8ad3edcbb610cd9205916c45\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://8179c356adb19e70d6b31a1eedc8c5c7f0c00e669e2540f4099e3844c6074d30\",\"dweb:/ipfs/QmWFbivarEobbqhS1go64ootVuHfVohBseerYy9FTEd1W2\"]},\"@openzeppelin/contracts/utils/cryptography/MerkleProof.sol\":{\"keccak256\":\"0xea64fbaccbf9d8c235cf6838240ddcebb97f9fc383660289e9dff32e4fb85f7a\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://1e8a1dd0eac2fa865dc9a052bee01eec31677d7bc01b5b5aa825d820f3f1b343\",\"dweb:/ipfs/QmR8WuNeoAvJhnL7msQfQwaZEkwVnNyNDUNBL3Y616ohYa\"]},\"@openzeppelin/contracts/utils/introspection/ERC165.sol\":{\"keccak256\":\"0xd10975de010d89fd1c78dc5e8a9a7e7f496198085c151648f20cba166b32582b\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://fb0048dee081f6fffa5f74afc3fb328483c2a30504e94a0ddd2a5114d731ec4d\",\"dweb:/ipfs/QmZptt1nmYoA5SgjwnSgWqgUSDgm4q52Yos3xhnMv3MV43\"]},\"@openzeppelin/contracts/utils/introspection/IERC165.sol\":{\"keccak256\":\"0x447a5f3ddc18419d41ff92b3773fb86471b1db25773e07f877f548918a185bf1\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://be161e54f24e5c6fae81a12db1a8ae87bc5ae1b0ddc805d82a1440a68455088f\",\"dweb:/ipfs/QmP7C3CHdY9urF4dEMb9wmsp1wMxHF6nhA2yQE5SKiPAdy\"]},\"contract/NewCryptoBullDogs.sol\":{\"keccak256\":\"0xf8869d90c6f3107344107b7208c4d7f29ea1ed0915a15652104d94b4f7a47e81\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://62e8d277a0ce2aec034e7a1ff26bc72288de83857e748d4f7d76f363ad5b51ec\",\"dweb:/ipfs/QmbSftZGZGnykL5JeTZ6P8vJgWByn1bsLM3uac945SLKEd\"]},\"erc721a/contracts/ERC721A.sol\":{\"keccak256\":\"0x5a3f70f309452b24ff4268be3c57c88f2c9aa7b8711b4951f0521fd0488b7b51\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://e2b72bf6e6556d459e5887094a2eeff26aa83d1031092f056a93ea746e02bcd0\",\"dweb:/ipfs/QmS9FvFwmUJvzsQqBUHQ7xFyXkoJwMtRcVmPmBMQn3QnVK\"]}},\"version\":1}",
					"userdoc": {
						"kind": "user",
						"methods": {},
						"version": 1
					}
				}
			},
			"erc721a/contracts/ERC721A.sol": {
				"ERC721A": {
					"abi": [
						{
							"inputs": [
								{
									"internalType": "string",
									"name": "name_",
									"type": "string"
								},
								{
									"internalType": "string",
									"name": "symbol_",
									"type": "string"
								}
							],
							"stateMutability": "nonpayable",
							"type": "constructor"
						},
						{
							"inputs": [],
							"name": "ApprovalCallerNotOwnerNorApproved",
							"type": "error"
						},
						{
							"inputs": [],
							"name": "ApprovalQueryForNonexistentToken",
							"type": "error"
						},
						{
							"inputs": [],
							"name": "ApprovalToCurrentOwner",
							"type": "error"
						},
						{
							"inputs": [],
							"name": "ApproveToCaller",
							"type": "error"
						},
						{
							"inputs": [],
							"name": "BalanceQueryForZeroAddress",
							"type": "error"
						},
						{
							"inputs": [],
							"name": "OwnerQueryForNonexistentToken",
							"type": "error"
						},
						{
							"inputs": [],
							"name": "TransferCallerNotOwnerNorApproved",
							"type": "error"
						},
						{
							"inputs": [],
							"name": "TransferFromIncorrectOwner",
							"type": "error"
						},
						{
							"inputs": [],
							"name": "TransferToNonERC721ReceiverImplementer",
							"type": "error"
						},
						{
							"inputs": [],
							"name": "TransferToZeroAddress",
							"type": "error"
						},
						{
							"inputs": [],
							"name": "URIQueryForNonexistentToken",
							"type": "error"
						},
						{
							"anonymous": false,
							"inputs": [
								{
									"indexed": true,
									"internalType": "address",
									"name": "owner",
									"type": "address"
								},
								{
									"indexed": true,
									"internalType": "address",
									"name": "approved",
									"type": "address"
								},
								{
									"indexed": true,
									"internalType": "uint256",
									"name": "tokenId",
									"type": "uint256"
								}
							],
							"name": "Approval",
							"type": "event"
						},
						{
							"anonymous": false,
							"inputs": [
								{
									"indexed": true,
									"internalType": "address",
									"name": "owner",
									"type": "address"
								},
								{
									"indexed": true,
									"internalType": "address",
									"name": "operator",
									"type": "address"
								},
								{
									"indexed": false,
									"internalType": "bool",
									"name": "approved",
									"type": "bool"
								}
							],
							"name": "ApprovalForAll",
							"type": "event"
						},
						{
							"anonymous": false,
							"inputs": [
								{
									"indexed": true,
									"internalType": "address",
									"name": "from",
									"type": "address"
								},
								{
									"indexed": true,
									"internalType": "address",
									"name": "to",
									"type": "address"
								},
								{
									"indexed": true,
									"internalType": "uint256",
									"name": "tokenId",
									"type": "uint256"
								}
							],
							"name": "Transfer",
							"type": "event"
						},
						{
							"inputs": [
								{
									"internalType": "address",
									"name": "to",
									"type": "address"
								},
								{
									"internalType": "uint256",
									"name": "tokenId",
									"type": "uint256"
								}
							],
							"name": "approve",
							"outputs": [],
							"stateMutability": "nonpayable",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "address",
									"name": "owner",
									"type": "address"
								}
							],
							"name": "balanceOf",
							"outputs": [
								{
									"internalType": "uint256",
									"name": "",
									"type": "uint256"
								}
							],
							"stateMutability": "view",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "uint256",
									"name": "tokenId",
									"type": "uint256"
								}
							],
							"name": "getApproved",
							"outputs": [
								{
									"internalType": "address",
									"name": "",
									"type": "address"
								}
							],
							"stateMutability": "view",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "address",
									"name": "owner",
									"type": "address"
								},
								{
									"internalType": "address",
									"name": "operator",
									"type": "address"
								}
							],
							"name": "isApprovedForAll",
							"outputs": [
								{
									"internalType": "bool",
									"name": "",
									"type": "bool"
								}
							],
							"stateMutability": "view",
							"type": "function"
						},
						{
							"inputs": [],
							"name": "name",
							"outputs": [
								{
									"internalType": "string",
									"name": "",
									"type": "string"
								}
							],
							"stateMutability": "view",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "uint256",
									"name": "tokenId",
									"type": "uint256"
								}
							],
							"name": "ownerOf",
							"outputs": [
								{
									"internalType": "address",
									"name": "",
									"type": "address"
								}
							],
							"stateMutability": "view",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "address",
									"name": "from",
									"type": "address"
								},
								{
									"internalType": "address",
									"name": "to",
									"type": "address"
								},
								{
									"internalType": "uint256",
									"name": "tokenId",
									"type": "uint256"
								}
							],
							"name": "safeTransferFrom",
							"outputs": [],
							"stateMutability": "nonpayable",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "address",
									"name": "from",
									"type": "address"
								},
								{
									"internalType": "address",
									"name": "to",
									"type": "address"
								},
								{
									"internalType": "uint256",
									"name": "tokenId",
									"type": "uint256"
								},
								{
									"internalType": "bytes",
									"name": "_data",
									"type": "bytes"
								}
							],
							"name": "safeTransferFrom",
							"outputs": [],
							"stateMutability": "nonpayable",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "address",
									"name": "operator",
									"type": "address"
								},
								{
									"internalType": "bool",
									"name": "approved",
									"type": "bool"
								}
							],
							"name": "setApprovalForAll",
							"outputs": [],
							"stateMutability": "nonpayable",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "bytes4",
									"name": "interfaceId",
									"type": "bytes4"
								}
							],
							"name": "supportsInterface",
							"outputs": [
								{
									"internalType": "bool",
									"name": "",
									"type": "bool"
								}
							],
							"stateMutability": "view",
							"type": "function"
						},
						{
							"inputs": [],
							"name": "symbol",
							"outputs": [
								{
									"internalType": "string",
									"name": "",
									"type": "string"
								}
							],
							"stateMutability": "view",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "uint256",
									"name": "tokenId",
									"type": "uint256"
								}
							],
							"name": "tokenURI",
							"outputs": [
								{
									"internalType": "string",
									"name": "",
									"type": "string"
								}
							],
							"stateMutability": "view",
							"type": "function"
						},
						{
							"inputs": [],
							"name": "totalSupply",
							"outputs": [
								{
									"internalType": "uint256",
									"name": "",
									"type": "uint256"
								}
							],
							"stateMutability": "view",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "address",
									"name": "from",
									"type": "address"
								},
								{
									"internalType": "address",
									"name": "to",
									"type": "address"
								},
								{
									"internalType": "uint256",
									"name": "tokenId",
									"type": "uint256"
								}
							],
							"name": "transferFrom",
							"outputs": [],
							"stateMutability": "nonpayable",
							"type": "function"
						}
					],
					"devdoc": {
						"details": "Implementation of https://eips.ethereum.org/EIPS/eip-721[ERC721] Non-Fungible Token Standard, including the Metadata extension. Built to optimize for lower gas during batch mints. Assumes serials are sequentially minted starting at _startTokenId() (defaults to 0, e.g. 0, 1, 2, 3..). Assumes that an owner cannot have more than 2**64 - 1 (max value of uint64) of supply. Assumes that the maximum token id cannot exceed 2**256 - 1 (max value of uint256).",
						"kind": "dev",
						"methods": {
							"approve(address,uint256)": {
								"details": "See {IERC721-approve}."
							},
							"balanceOf(address)": {
								"details": "See {IERC721-balanceOf}."
							},
							"getApproved(uint256)": {
								"details": "See {IERC721-getApproved}."
							},
							"isApprovedForAll(address,address)": {
								"details": "See {IERC721-isApprovedForAll}."
							},
							"name()": {
								"details": "See {IERC721Metadata-name}."
							},
							"ownerOf(uint256)": {
								"details": "See {IERC721-ownerOf}."
							},
							"safeTransferFrom(address,address,uint256)": {
								"details": "See {IERC721-safeTransferFrom}."
							},
							"safeTransferFrom(address,address,uint256,bytes)": {
								"details": "See {IERC721-safeTransferFrom}."
							},
							"setApprovalForAll(address,bool)": {
								"details": "See {IERC721-setApprovalForAll}."
							},
							"supportsInterface(bytes4)": {
								"details": "See {IERC165-supportsInterface}."
							},
							"symbol()": {
								"details": "See {IERC721Metadata-symbol}."
							},
							"tokenURI(uint256)": {
								"details": "See {IERC721Metadata-tokenURI}."
							},
							"totalSupply()": {
								"details": "See {IERC721Enumerable-totalSupply}.Burned tokens are calculated here, use _totalMinted() if you want to count just minted tokens."
							},
							"transferFrom(address,address,uint256)": {
								"details": "See {IERC721-transferFrom}."
							}
						},
						"version": 1
					},
					"evm": {
						"assembly": "    /* \"erc721a/contracts/ERC721A.sol\":1708:21823  contract ERC721A is Context, ERC165, IERC721, IERC721Metadata {... */\n  mstore(0x40, 0x80)\n    /* \"erc721a/contracts/ERC721A.sol\":3600:3754  constructor(string memory name_, string memory symbol_) {... */\n  callvalue\n  dup1\n  iszero\n  tag_1\n  jumpi\n  0x00\n  dup1\n  revert\ntag_1:\n  pop\n  mload(0x40)\n  sub(codesize, bytecodeSize)\n  dup1\n  bytecodeSize\n  dup4\n  codecopy\n  dup2\n  add\n  0x40\n  dup2\n  swap1\n  mstore\n  tag_2\n  swap2\n  tag_3\n  jump\t// in\ntag_2:\n    /* \"erc721a/contracts/ERC721A.sol\":3666:3679  _name = name_ */\n  dup2\n  mload\n  tag_6\n  swap1\n    /* \"erc721a/contracts/ERC721A.sol\":3666:3671  _name */\n  0x02\n  swap1\n    /* \"erc721a/contracts/ERC721A.sol\":3666:3679  _name = name_ */\n  0x20\n  dup6\n  add\n  swap1\n  tag_7\n  jump\t// in\ntag_6:\n  pop\n    /* \"erc721a/contracts/ERC721A.sol\":3689:3706  _symbol = symbol_ */\n  dup1\n  mload\n  tag_8\n  swap1\n    /* \"erc721a/contracts/ERC721A.sol\":3689:3696  _symbol */\n  0x03\n  swap1\n    /* \"erc721a/contracts/ERC721A.sol\":3689:3706  _symbol = symbol_ */\n  0x20\n  dup5\n  add\n  swap1\n  tag_7\n  jump\t// in\ntag_8:\n  pop\n  pop\n    /* \"erc721a/contracts/ERC721A.sol\":3902:3909  uint256 */\n  0x00\n    /* \"erc721a/contracts/ERC721A.sol\":3716:3747  _currentIndex = _startTokenId() */\n  dup1\n  sstore\n  pop\n    /* \"erc721a/contracts/ERC721A.sol\":1708:21823  contract ERC721A is Context, ERC165, IERC721, IERC721Metadata {... */\n  jump(tag_26)\ntag_7:\n  dup3\n  dup1\n  sload\n  tag_13\n  swap1\n  tag_14\n  jump\t// in\ntag_13:\n  swap1\n  0x00\n  mstore\n  keccak256(0x00, 0x20)\n  swap1\n  0x1f\n  add\n  0x20\n  swap1\n  div\n  dup2\n  add\n  swap3\n  dup3\n  tag_16\n  jumpi\n  0x00\n  dup6\n  sstore\n  jump(tag_19)\ntag_16:\n  dup3\n  0x1f\n  lt\n  tag_17\n  jumpi\n  dup1\n  mload\n  not(0xff)\n  and\n  dup4\n  dup1\n  add\n  or\n  dup6\n  sstore\n  jump(tag_19)\ntag_17:\n  dup3\n  dup1\n  add\n  0x01\n  add\n  dup6\n  sstore\n  dup3\n  iszero\n  tag_19\n  jumpi\n  swap2\n  dup3\n  add\ntag_18:\n  dup3\n  dup2\n  gt\n  iszero\n  tag_19\n  jumpi\n  dup3\n  mload\n  dup3\n  sstore\n  swap2\n  0x20\n  add\n  swap2\n  swap1\n  0x01\n  add\n  swap1\n  jump(tag_18)\ntag_19:\n  pop\n  tag_20\n  swap3\n  swap2\n  pop\n  tag_21\n  jump\t// in\ntag_20:\n  pop\n  swap1\n  jump\t// out\ntag_21:\ntag_22:\n  dup1\n  dup3\n  gt\n  iszero\n  tag_20\n  jumpi\n  0x00\n  dup2\n  sstore\n  0x01\n  add\n  jump(tag_22)\n    /* \"#utility.yul\":14:141   */\ntag_24:\n    /* \"#utility.yul\":75:85   */\n  0x4e487b71\n    /* \"#utility.yul\":70:73   */\n  0xe0\n    /* \"#utility.yul\":66:86   */\n  shl\n    /* \"#utility.yul\":63:64   */\n  0x00\n    /* \"#utility.yul\":56:87   */\n  mstore\n    /* \"#utility.yul\":106:110   */\n  0x41\n    /* \"#utility.yul\":103:104   */\n  0x04\n    /* \"#utility.yul\":96:111   */\n  mstore\n    /* \"#utility.yul\":130:134   */\n  0x24\n    /* \"#utility.yul\":127:128   */\n  0x00\n    /* \"#utility.yul\":120:135   */\n  revert\n    /* \"#utility.yul\":146:1031   */\ntag_25:\n    /* \"#utility.yul\":200:205   */\n  0x00\n    /* \"#utility.yul\":253:256   */\n  dup3\n    /* \"#utility.yul\":246:250   */\n  0x1f\n    /* \"#utility.yul\":238:244   */\n  dup4\n    /* \"#utility.yul\":234:251   */\n  add\n    /* \"#utility.yul\":230:257   */\n  slt\n    /* \"#utility.yul\":220:275   */\n  tag_29\n  jumpi\n    /* \"#utility.yul\":271:272   */\n  0x00\n    /* \"#utility.yul\":268:269   */\n  dup1\n    /* \"#utility.yul\":261:273   */\n  revert\n    /* \"#utility.yul\":220:275   */\ntag_29:\n    /* \"#utility.yul\":294:307   */\n  dup2\n  mload\n  sub(shl(0x40, 0x01), 0x01)\n    /* \"#utility.yul\":356:366   */\n  dup1\n  dup3\n  gt\n    /* \"#utility.yul\":353:389   */\n  iszero\n  tag_31\n  jumpi\n    /* \"#utility.yul\":369:387   */\n  tag_31\n  tag_24\n  jump\t// in\ntag_31:\n    /* \"#utility.yul\":444:446   */\n  0x40\n    /* \"#utility.yul\":438:447   */\n  mload\n    /* \"#utility.yul\":412:414   */\n  0x1f\n    /* \"#utility.yul\":498:511   */\n  dup4\n  add\n  not(0x1f)\n    /* \"#utility.yul\":494:516   */\n  swap1\n  dup2\n  and\n    /* \"#utility.yul\":518:520   */\n  0x3f\n    /* \"#utility.yul\":490:521   */\n  add\n    /* \"#utility.yul\":486:526   */\n  and\n    /* \"#utility.yul\":474:527   */\n  dup2\n  add\n  swap1\n    /* \"#utility.yul\":542:560   */\n  dup3\n  dup3\n  gt\n    /* \"#utility.yul\":562:584   */\n  dup2\n  dup4\n  lt\n    /* \"#utility.yul\":539:585   */\n  or\n    /* \"#utility.yul\":536:608   */\n  iszero\n  tag_33\n  jumpi\n    /* \"#utility.yul\":588:606   */\n  tag_33\n  tag_24\n  jump\t// in\ntag_33:\n    /* \"#utility.yul\":628:638   */\n  dup2\n    /* \"#utility.yul\":624:626   */\n  0x40\n    /* \"#utility.yul\":617:639   */\n  mstore\n    /* \"#utility.yul\":663:665   */\n  dup4\n    /* \"#utility.yul\":655:661   */\n  dup2\n    /* \"#utility.yul\":648:666   */\n  mstore\n    /* \"#utility.yul\":685:689   */\n  0x20\n    /* \"#utility.yul\":675:689   */\n  swap3\n  pop\n    /* \"#utility.yul\":730:733   */\n  dup7\n    /* \"#utility.yul\":725:727   */\n  dup4\n    /* \"#utility.yul\":720:722   */\n  dup6\n    /* \"#utility.yul\":712:718   */\n  dup9\n    /* \"#utility.yul\":708:723   */\n  add\n    /* \"#utility.yul\":704:728   */\n  add\n    /* \"#utility.yul\":701:734   */\n  gt\n    /* \"#utility.yul\":698:751   */\n  iszero\n  tag_34\n  jumpi\n    /* \"#utility.yul\":747:748   */\n  0x00\n    /* \"#utility.yul\":744:745   */\n  dup1\n    /* \"#utility.yul\":737:749   */\n  revert\n    /* \"#utility.yul\":698:751   */\ntag_34:\n    /* \"#utility.yul\":769:770   */\n  0x00\n    /* \"#utility.yul\":760:770   */\n  swap2\n  pop\n    /* \"#utility.yul\":779:912   */\ntag_35:\n    /* \"#utility.yul\":793:795   */\n  dup4\n    /* \"#utility.yul\":790:791   */\n  dup3\n    /* \"#utility.yul\":787:796   */\n  lt\n    /* \"#utility.yul\":779:912   */\n  iszero\n  tag_37\n  jumpi\n    /* \"#utility.yul\":881:895   */\n  dup6\n  dup3\n  add\n    /* \"#utility.yul\":877:900   */\n  dup4\n  add\n    /* \"#utility.yul\":871:901   */\n  mload\n    /* \"#utility.yul\":850:864   */\n  dup2\n  dup4\n  add\n    /* \"#utility.yul\":846:869   */\n  dup5\n  add\n    /* \"#utility.yul\":839:902   */\n  mstore\n    /* \"#utility.yul\":804:814   */\n  swap1\n  dup3\n  add\n  swap1\n    /* \"#utility.yul\":779:912   */\n  jump(tag_35)\ntag_37:\n    /* \"#utility.yul\":930:932   */\n  dup4\n    /* \"#utility.yul\":927:928   */\n  dup3\n    /* \"#utility.yul\":924:933   */\n  gt\n    /* \"#utility.yul\":921:1001   */\n  iszero\n  tag_38\n  jumpi\n    /* \"#utility.yul\":989:990   */\n  0x00\n    /* \"#utility.yul\":984:986   */\n  dup4\n    /* \"#utility.yul\":979:981   */\n  dup6\n    /* \"#utility.yul\":971:977   */\n  dup4\n    /* \"#utility.yul\":967:982   */\n  add\n    /* \"#utility.yul\":963:987   */\n  add\n    /* \"#utility.yul\":956:991   */\n  mstore\n    /* \"#utility.yul\":921:1001   */\ntag_38:\n    /* \"#utility.yul\":1019:1025   */\n  swap7\n    /* \"#utility.yul\":146:1031   */\n  swap6\n  pop\n  pop\n  pop\n  pop\n  pop\n  pop\n  jump\t// out\n    /* \"#utility.yul\":1036:1598   */\ntag_3:\n    /* \"#utility.yul\":1135:1141   */\n  0x00\n    /* \"#utility.yul\":1143:1149   */\n  dup1\n    /* \"#utility.yul\":1196:1198   */\n  0x40\n    /* \"#utility.yul\":1184:1193   */\n  dup4\n    /* \"#utility.yul\":1175:1182   */\n  dup6\n    /* \"#utility.yul\":1171:1194   */\n  sub\n    /* \"#utility.yul\":1167:1199   */\n  slt\n    /* \"#utility.yul\":1164:1216   */\n  iszero\n  tag_40\n  jumpi\n    /* \"#utility.yul\":1212:1213   */\n  0x00\n    /* \"#utility.yul\":1209:1210   */\n  dup1\n    /* \"#utility.yul\":1202:1214   */\n  revert\n    /* \"#utility.yul\":1164:1216   */\ntag_40:\n    /* \"#utility.yul\":1239:1255   */\n  dup3\n  mload\n  sub(shl(0x40, 0x01), 0x01)\n    /* \"#utility.yul\":1304:1318   */\n  dup1\n  dup3\n  gt\n    /* \"#utility.yul\":1301:1335   */\n  iszero\n  tag_41\n  jumpi\n    /* \"#utility.yul\":1331:1332   */\n  0x00\n    /* \"#utility.yul\":1328:1329   */\n  dup1\n    /* \"#utility.yul\":1321:1333   */\n  revert\n    /* \"#utility.yul\":1301:1335   */\ntag_41:\n    /* \"#utility.yul\":1354:1415   */\n  tag_42\n    /* \"#utility.yul\":1407:1414   */\n  dup7\n    /* \"#utility.yul\":1398:1404   */\n  dup4\n    /* \"#utility.yul\":1387:1396   */\n  dup8\n    /* \"#utility.yul\":1383:1405   */\n  add\n    /* \"#utility.yul\":1354:1415   */\n  tag_25\n  jump\t// in\ntag_42:\n    /* \"#utility.yul\":1344:1415   */\n  swap4\n  pop\n    /* \"#utility.yul\":1461:1463   */\n  0x20\n    /* \"#utility.yul\":1450:1459   */\n  dup6\n    /* \"#utility.yul\":1446:1464   */\n  add\n    /* \"#utility.yul\":1440:1465   */\n  mload\n    /* \"#utility.yul\":1424:1465   */\n  swap2\n  pop\n    /* \"#utility.yul\":1490:1492   */\n  dup1\n    /* \"#utility.yul\":1480:1488   */\n  dup3\n    /* \"#utility.yul\":1477:1493   */\n  gt\n    /* \"#utility.yul\":1474:1510   */\n  iszero\n  tag_43\n  jumpi\n    /* \"#utility.yul\":1506:1507   */\n  0x00\n    /* \"#utility.yul\":1503:1504   */\n  dup1\n    /* \"#utility.yul\":1496:1508   */\n  revert\n    /* \"#utility.yul\":1474:1510   */\ntag_43:\n  pop\n    /* \"#utility.yul\":1529:1592   */\n  tag_44\n    /* \"#utility.yul\":1584:1591   */\n  dup6\n    /* \"#utility.yul\":1573:1581   */\n  dup3\n    /* \"#utility.yul\":1562:1571   */\n  dup7\n    /* \"#utility.yul\":1558:1582   */\n  add\n    /* \"#utility.yul\":1529:1592   */\n  tag_25\n  jump\t// in\ntag_44:\n    /* \"#utility.yul\":1519:1592   */\n  swap2\n  pop\n  pop\n    /* \"#utility.yul\":1036:1598   */\n  swap3\n  pop\n  swap3\n  swap1\n  pop\n  jump\t// out\n    /* \"#utility.yul\":1603:1983   */\ntag_14:\n    /* \"#utility.yul\":1682:1683   */\n  0x01\n    /* \"#utility.yul\":1678:1690   */\n  dup2\n  dup2\n  shr\n  swap1\n    /* \"#utility.yul\":1725:1737   */\n  dup3\n  and\n  dup1\n    /* \"#utility.yul\":1746:1807   */\n  tag_46\n  jumpi\n    /* \"#utility.yul\":1800:1804   */\n  0x7f\n    /* \"#utility.yul\":1792:1798   */\n  dup3\n    /* \"#utility.yul\":1788:1805   */\n  and\n    /* \"#utility.yul\":1778:1805   */\n  swap2\n  pop\n    /* \"#utility.yul\":1746:1807   */\ntag_46:\n    /* \"#utility.yul\":1853:1855   */\n  0x20\n    /* \"#utility.yul\":1845:1851   */\n  dup3\n    /* \"#utility.yul\":1842:1856   */\n  lt\n    /* \"#utility.yul\":1822:1840   */\n  dup2\n    /* \"#utility.yul\":1819:1857   */\n  eq\n    /* \"#utility.yul\":1816:1977   */\n  iszero\n  tag_47\n  jumpi\n    /* \"#utility.yul\":1899:1909   */\n  0x4e487b71\n    /* \"#utility.yul\":1894:1897   */\n  0xe0\n    /* \"#utility.yul\":1890:1910   */\n  shl\n    /* \"#utility.yul\":1887:1888   */\n  0x00\n    /* \"#utility.yul\":1880:1911   */\n  mstore\n    /* \"#utility.yul\":1934:1938   */\n  0x22\n    /* \"#utility.yul\":1931:1932   */\n  0x04\n    /* \"#utility.yul\":1924:1939   */\n  mstore\n    /* \"#utility.yul\":1962:1966   */\n  0x24\n    /* \"#utility.yul\":1959:1960   */\n  0x00\n    /* \"#utility.yul\":1952:1967   */\n  revert\n    /* \"#utility.yul\":1816:1977   */\ntag_47:\n  pop\n    /* \"#utility.yul\":1603:1983   */\n  swap2\n  swap1\n  pop\n  jump\t// out\ntag_26:\n    /* \"erc721a/contracts/ERC721A.sol\":1708:21823  contract ERC721A is Context, ERC165, IERC721, IERC721Metadata {... */\n  dataSize(sub_0)\n  dup1\n  dataOffset(sub_0)\n  0x00\n  codecopy\n  0x00\n  return\nstop\n\nsub_0: assembly {\n        /* \"erc721a/contracts/ERC721A.sol\":1708:21823  contract ERC721A is Context, ERC165, IERC721, IERC721Metadata {... */\n      mstore(0x40, 0x80)\n      callvalue\n      dup1\n      iszero\n      tag_1\n      jumpi\n      0x00\n      dup1\n      revert\n    tag_1:\n      pop\n      jumpi(tag_2, lt(calldatasize, 0x04))\n      shr(0xe0, calldataload(0x00))\n      dup1\n      0x6352211e\n      gt\n      tag_17\n      jumpi\n      dup1\n      0xa22cb465\n      gt\n      tag_18\n      jumpi\n      dup1\n      0xa22cb465\n      eq\n      tag_13\n      jumpi\n      dup1\n      0xb88d4fde\n      eq\n      tag_14\n      jumpi\n      dup1\n      0xc87b56dd\n      eq\n      tag_15\n      jumpi\n      dup1\n      0xe985e9c5\n      eq\n      tag_16\n      jumpi\n      0x00\n      dup1\n      revert\n    tag_18:\n      dup1\n      0x6352211e\n      eq\n      tag_10\n      jumpi\n      dup1\n      0x70a08231\n      eq\n      tag_11\n      jumpi\n      dup1\n      0x95d89b41\n      eq\n      tag_12\n      jumpi\n      0x00\n      dup1\n      revert\n    tag_17:\n      dup1\n      0x095ea7b3\n      gt\n      tag_19\n      jumpi\n      dup1\n      0x095ea7b3\n      eq\n      tag_6\n      jumpi\n      dup1\n      0x18160ddd\n      eq\n      tag_7\n      jumpi\n      dup1\n      0x23b872dd\n      eq\n      tag_8\n      jumpi\n      dup1\n      0x42842e0e\n      eq\n      tag_9\n      jumpi\n      0x00\n      dup1\n      revert\n    tag_19:\n      dup1\n      0x01ffc9a7\n      eq\n      tag_3\n      jumpi\n      dup1\n      0x06fdde03\n      eq\n      tag_4\n      jumpi\n      dup1\n      0x081812fc\n      eq\n      tag_5\n      jumpi\n    tag_2:\n      0x00\n      dup1\n      revert\n        /* \"erc721a/contracts/ERC721A.sol\":4843:5143  function supportsInterface(bytes4 interfaceId) public view virtual override(ERC165, IERC165) returns (bool) {... */\n    tag_3:\n      tag_20\n      tag_21\n      calldatasize\n      0x04\n      tag_22\n      jump\t// in\n    tag_21:\n      tag_23\n      jump\t// in\n    tag_20:\n      mload(0x40)\n        /* \"#utility.yul\":565:579   */\n      swap1\n      iszero\n        /* \"#utility.yul\":558:580   */\n      iszero\n        /* \"#utility.yul\":540:581   */\n      dup2\n      mstore\n        /* \"#utility.yul\":528:530   */\n      0x20\n        /* \"#utility.yul\":513:531   */\n      add\n        /* \"erc721a/contracts/ERC721A.sol\":4843:5143  function supportsInterface(bytes4 interfaceId) public view virtual override(ERC165, IERC165) returns (bool) {... */\n    tag_24:\n      mload(0x40)\n      dup1\n      swap2\n      sub\n      swap1\n      return\n        /* \"erc721a/contracts/ERC721A.sol\":8139:8237  function name() public view virtual override returns (string memory) {... */\n    tag_4:\n      tag_26\n      tag_27\n      jump\t// in\n    tag_26:\n      mload(0x40)\n      tag_24\n      swap2\n      swap1\n      tag_29\n      jump\t// in\n        /* \"erc721a/contracts/ERC721A.sol\":9595:9795  function getApproved(uint256 tokenId) public view override returns (address) {... */\n    tag_5:\n      tag_30\n      tag_31\n      calldatasize\n      0x04\n      tag_32\n      jump\t// in\n    tag_31:\n      tag_33\n      jump\t// in\n    tag_30:\n      mload(0x40)\n      sub(shl(0xa0, 0x01), 0x01)\n        /* \"#utility.yul\":1692:1724   */\n      swap1\n      swap2\n      and\n        /* \"#utility.yul\":1674:1725   */\n      dup2\n      mstore\n        /* \"#utility.yul\":1662:1664   */\n      0x20\n        /* \"#utility.yul\":1647:1665   */\n      add\n        /* \"erc721a/contracts/ERC721A.sol\":9595:9795  function getApproved(uint256 tokenId) public view override returns (address) {... */\n      tag_24\n        /* \"#utility.yul\":1528:1731   */\n      jump\n        /* \"erc721a/contracts/ERC721A.sol\":9172:9534  function approve(address to, uint256 tokenId) public override {... */\n    tag_6:\n      tag_36\n      tag_37\n      calldatasize\n      0x04\n      tag_38\n      jump\t// in\n    tag_37:\n      tag_39\n      jump\t// in\n    tag_36:\n      stop\n        /* \"erc721a/contracts/ERC721A.sol\":4114:4411  function totalSupply() public view returns (uint256) {... */\n    tag_7:\n        /* \"erc721a/contracts/ERC721A.sol\":4364:4376  _burnCounter */\n      sload(0x01)\n        /* \"erc721a/contracts/ERC721A.sol\":4158:4165  uint256 */\n      0x00\n        /* \"erc721a/contracts/ERC721A.sol\":4348:4361  _currentIndex */\n      sload\n        /* \"erc721a/contracts/ERC721A.sol\":4348:4376  _currentIndex - _burnCounter */\n      sub\n        /* \"erc721a/contracts/ERC721A.sol\":4114:4411  function totalSupply() public view returns (uint256) {... */\n    tag_40:\n      mload(0x40)\n        /* \"#utility.yul\":2319:2344   */\n      swap1\n      dup2\n      mstore\n        /* \"#utility.yul\":2307:2309   */\n      0x20\n        /* \"#utility.yul\":2292:2310   */\n      add\n        /* \"erc721a/contracts/ERC721A.sol\":4114:4411  function totalSupply() public view returns (uint256) {... */\n      tag_24\n        /* \"#utility.yul\":2173:2350   */\n      jump\n        /* \"erc721a/contracts/ERC721A.sol\":10426:10590  function transferFrom(... */\n    tag_8:\n      tag_36\n      tag_45\n      calldatasize\n      0x04\n      tag_46\n      jump\t// in\n    tag_45:\n      tag_47\n      jump\t// in\n        /* \"erc721a/contracts/ERC721A.sol\":10656:10835  function safeTransferFrom(... */\n    tag_9:\n      tag_36\n      tag_49\n      calldatasize\n      0x04\n      tag_46\n      jump\t// in\n    tag_49:\n      tag_50\n      jump\t// in\n        /* \"erc721a/contracts/ERC721A.sol\":7955:8077  function ownerOf(uint256 tokenId) public view override returns (address) {... */\n    tag_10:\n      tag_30\n      tag_52\n      calldatasize\n      0x04\n      tag_32\n      jump\t// in\n    tag_52:\n      tag_53\n      jump\t// in\n        /* \"erc721a/contracts/ERC721A.sol\":5202:5405  function balanceOf(address owner) public view override returns (uint256) {... */\n    tag_11:\n      tag_40\n      tag_56\n      calldatasize\n      0x04\n      tag_57\n      jump\t// in\n    tag_56:\n      tag_58\n      jump\t// in\n        /* \"erc721a/contracts/ERC721A.sol\":8301:8403  function symbol() public view virtual override returns (string memory) {... */\n    tag_12:\n      tag_26\n      tag_61\n      jump\t// in\n        /* \"erc721a/contracts/ERC721A.sol\":9862:10136  function setApprovalForAll(address operator, bool approved) public override {... */\n    tag_13:\n      tag_36\n      tag_64\n      calldatasize\n      0x04\n      tag_65\n      jump\t// in\n    tag_64:\n      tag_66\n      jump\t// in\n        /* \"erc721a/contracts/ERC721A.sol\":10901:11260  function safeTransferFrom(... */\n    tag_14:\n      tag_36\n      tag_68\n      calldatasize\n      0x04\n      tag_69\n      jump\t// in\n    tag_68:\n      tag_70\n      jump\t// in\n        /* \"erc721a/contracts/ERC721A.sol\":8469:8782  function tokenURI(uint256 tokenId) public view virtual override returns (string memory) {... */\n    tag_15:\n      tag_26\n      tag_72\n      calldatasize\n      0x04\n      tag_32\n      jump\t// in\n    tag_72:\n      tag_73\n      jump\t// in\n        /* \"erc721a/contracts/ERC721A.sol\":10202:10364  function isApprovedForAll(address owner, address operator) public view virtual override returns (bool) {... */\n    tag_16:\n      tag_20\n      tag_76\n      calldatasize\n      0x04\n      tag_77\n      jump\t// in\n    tag_76:\n      sub(shl(0xa0, 0x01), 0x01)\n        /* \"erc721a/contracts/ERC721A.sol\":10322:10347  _operatorApprovals[owner] */\n      swap2\n      dup3\n      and\n        /* \"erc721a/contracts/ERC721A.sol\":10299:10303  bool */\n      0x00\n        /* \"erc721a/contracts/ERC721A.sol\":10322:10347  _operatorApprovals[owner] */\n      swap1\n      dup2\n      mstore\n        /* \"erc721a/contracts/ERC721A.sol\":10322:10340  _operatorApprovals */\n      0x07\n        /* \"erc721a/contracts/ERC721A.sol\":10322:10347  _operatorApprovals[owner] */\n      0x20\n      swap1\n      dup2\n      mstore\n      0x40\n      dup1\n      dup4\n      keccak256\n        /* \"erc721a/contracts/ERC721A.sol\":10322:10357  _operatorApprovals[owner][operator] */\n      swap4\n      swap1\n      swap5\n      and\n      dup3\n      mstore\n      swap2\n      swap1\n      swap2\n      mstore\n      keccak256\n      sload\n      0xff\n      and\n      swap1\n        /* \"erc721a/contracts/ERC721A.sol\":10202:10364  function isApprovedForAll(address owner, address operator) public view virtual override returns (bool) {... */\n      jump\n        /* \"erc721a/contracts/ERC721A.sol\":4843:5143  function supportsInterface(bytes4 interfaceId) public view virtual override(ERC165, IERC165) returns (bool) {... */\n    tag_23:\n        /* \"erc721a/contracts/ERC721A.sol\":4945:4949  bool */\n      0x00\n      not(sub(shl(0xe0, 0x01), 0x01))\n        /* \"erc721a/contracts/ERC721A.sol\":4980:5020  interfaceId == type(IERC721).interfaceId */\n      dup3\n      and\n      shl(0xe0, 0x80ac58cd)\n      eq\n      dup1\n        /* \"erc721a/contracts/ERC721A.sol\":4980:5084  interfaceId == type(IERC721).interfaceId ||... */\n      tag_81\n      jumpi\n      pop\n      not(sub(shl(0xe0, 0x01), 0x01))\n        /* \"erc721a/contracts/ERC721A.sol\":5036:5084  interfaceId == type(IERC721Metadata).interfaceId */\n      dup3\n      and\n      shl(0xe0, 0x5b5e139f)\n      eq\n        /* \"erc721a/contracts/ERC721A.sol\":4980:5084  interfaceId == type(IERC721).interfaceId ||... */\n    tag_81:\n        /* \"erc721a/contracts/ERC721A.sol\":4980:5136  interfaceId == type(IERC721).interfaceId ||... */\n      dup1\n      tag_83\n      jumpi\n      pop\n      shl(0xe0, 0x01ffc9a7)\n      not(sub(shl(0xe0, 0x01), 0x01))\n        /* \"@openzeppelin/contracts/utils/introspection/ERC165.sol\":937:977  interfaceId == type(IERC165).interfaceId */\n      dup4\n      and\n      eq\n        /* \"erc721a/contracts/ERC721A.sol\":5100:5136  super.supportsInterface(interfaceId) */\n    tag_83:\n        /* \"erc721a/contracts/ERC721A.sol\":4961:5136  return... */\n      swap3\n        /* \"erc721a/contracts/ERC721A.sol\":4843:5143  function supportsInterface(bytes4 interfaceId) public view virtual override(ERC165, IERC165) returns (bool) {... */\n      swap2\n      pop\n      pop\n      jump\t// out\n        /* \"erc721a/contracts/ERC721A.sol\":8139:8237  function name() public view virtual override returns (string memory) {... */\n    tag_27:\n        /* \"erc721a/contracts/ERC721A.sol\":8193:8206  string memory */\n      0x60\n        /* \"erc721a/contracts/ERC721A.sol\":8225:8230  _name */\n      0x02\n        /* \"erc721a/contracts/ERC721A.sol\":8218:8230  return _name */\n      dup1\n      sload\n      tag_86\n      swap1\n      tag_87\n      jump\t// in\n    tag_86:\n      dup1\n      0x1f\n      add\n      0x20\n      dup1\n      swap2\n      div\n      mul\n      0x20\n      add\n      mload(0x40)\n      swap1\n      dup2\n      add\n      0x40\n      mstore\n      dup1\n      swap3\n      swap2\n      swap1\n      dup2\n      dup2\n      mstore\n      0x20\n      add\n      dup3\n      dup1\n      sload\n      tag_88\n      swap1\n      tag_87\n      jump\t// in\n    tag_88:\n      dup1\n      iszero\n      tag_89\n      jumpi\n      dup1\n      0x1f\n      lt\n      tag_90\n      jumpi\n      0x0100\n      dup1\n      dup4\n      sload\n      div\n      mul\n      dup4\n      mstore\n      swap2\n      0x20\n      add\n      swap2\n      jump(tag_89)\n    tag_90:\n      dup3\n      add\n      swap2\n      swap1\n      0x00\n      mstore\n      keccak256(0x00, 0x20)\n      swap1\n    tag_91:\n      dup2\n      sload\n      dup2\n      mstore\n      swap1\n      0x01\n      add\n      swap1\n      0x20\n      add\n      dup1\n      dup4\n      gt\n      tag_91\n      jumpi\n      dup3\n      swap1\n      sub\n      0x1f\n      and\n      dup3\n      add\n      swap2\n    tag_89:\n      pop\n      pop\n      pop\n      pop\n      pop\n      swap1\n      pop\n        /* \"erc721a/contracts/ERC721A.sol\":8139:8237  function name() public view virtual override returns (string memory) {... */\n      swap1\n      jump\t// out\n        /* \"erc721a/contracts/ERC721A.sol\":9595:9795  function getApproved(uint256 tokenId) public view override returns (address) {... */\n    tag_33:\n        /* \"erc721a/contracts/ERC721A.sol\":9663:9670  address */\n      0x00\n        /* \"erc721a/contracts/ERC721A.sol\":9687:9703  _exists(tokenId) */\n      tag_93\n        /* \"erc721a/contracts/ERC721A.sol\":9695:9702  tokenId */\n      dup3\n        /* \"erc721a/contracts/ERC721A.sol\":9687:9694  _exists */\n      tag_94\n        /* \"erc721a/contracts/ERC721A.sol\":9687:9703  _exists(tokenId) */\n      jump\t// in\n    tag_93:\n        /* \"erc721a/contracts/ERC721A.sol\":9682:9746  if (!_exists(tokenId)) revert ApprovalQueryForNonexistentToken() */\n      tag_95\n      jumpi\n        /* \"erc721a/contracts/ERC721A.sol\":9712:9746  ApprovalQueryForNonexistentToken() */\n      mload(0x40)\n      shl(0xe2, 0x33d1c039)\n      dup2\n      mstore\n      0x04\n      add\n      mload(0x40)\n      dup1\n      swap2\n      sub\n      swap1\n      revert\n        /* \"erc721a/contracts/ERC721A.sol\":9682:9746  if (!_exists(tokenId)) revert ApprovalQueryForNonexistentToken() */\n    tag_95:\n      pop\n        /* \"erc721a/contracts/ERC721A.sol\":9764:9788  _tokenApprovals[tokenId] */\n      0x00\n      swap1\n      dup2\n      mstore\n        /* \"erc721a/contracts/ERC721A.sol\":9764:9779  _tokenApprovals */\n      0x06\n        /* \"erc721a/contracts/ERC721A.sol\":9764:9788  _tokenApprovals[tokenId] */\n      0x20\n      mstore\n      0x40\n      swap1\n      keccak256\n      sload\n      sub(shl(0xa0, 0x01), 0x01)\n      and\n      swap1\n        /* \"erc721a/contracts/ERC721A.sol\":9595:9795  function getApproved(uint256 tokenId) public view override returns (address) {... */\n      jump\t// out\n        /* \"erc721a/contracts/ERC721A.sol\":9172:9534  function approve(address to, uint256 tokenId) public override {... */\n    tag_39:\n        /* \"erc721a/contracts/ERC721A.sol\":9244:9257  address owner */\n      0x00\n        /* \"erc721a/contracts/ERC721A.sol\":9260:9284  ERC721A.ownerOf(tokenId) */\n      tag_97\n        /* \"erc721a/contracts/ERC721A.sol\":9276:9283  tokenId */\n      dup3\n        /* \"erc721a/contracts/ERC721A.sol\":9260:9275  ERC721A.ownerOf */\n      tag_53\n        /* \"erc721a/contracts/ERC721A.sol\":9260:9284  ERC721A.ownerOf(tokenId) */\n      jump\t// in\n    tag_97:\n        /* \"erc721a/contracts/ERC721A.sol\":9244:9284  address owner = ERC721A.ownerOf(tokenId) */\n      swap1\n      pop\n        /* \"erc721a/contracts/ERC721A.sol\":9304:9309  owner */\n      dup1\n      sub(shl(0xa0, 0x01), 0x01)\n        /* \"erc721a/contracts/ERC721A.sol\":9298:9309  to == owner */\n      and\n        /* \"erc721a/contracts/ERC721A.sol\":9298:9300  to */\n      dup4\n      sub(shl(0xa0, 0x01), 0x01)\n        /* \"erc721a/contracts/ERC721A.sol\":9298:9309  to == owner */\n      and\n      eq\n        /* \"erc721a/contracts/ERC721A.sol\":9294:9342  if (to == owner) revert ApprovalToCurrentOwner() */\n      iszero\n      tag_98\n      jumpi\n        /* \"erc721a/contracts/ERC721A.sol\":9318:9342  ApprovalToCurrentOwner() */\n      mload(0x40)\n      shl(0xe2, 0x250fdee3)\n      dup2\n      mstore\n      0x04\n      add\n      mload(0x40)\n      dup1\n      swap2\n      sub\n      swap1\n      revert\n        /* \"erc721a/contracts/ERC721A.sol\":9294:9342  if (to == owner) revert ApprovalToCurrentOwner() */\n    tag_98:\n        /* \"@openzeppelin/contracts/utils/Context.sol\":719:729  msg.sender */\n      caller\n      sub(shl(0xa0, 0x01), 0x01)\n        /* \"erc721a/contracts/ERC721A.sol\":9357:9378  _msgSender() != owner */\n      dup3\n      and\n      eq\n      dup1\n      iszero\n      swap1\n        /* \"erc721a/contracts/ERC721A.sol\":9357:9420  _msgSender() != owner && !isApprovedForAll(owner, _msgSender()) */\n      tag_101\n      jumpi\n      pop\n        /* \"erc721a/contracts/ERC721A.sol\":9383:9420  isApprovedForAll(owner, _msgSender()) */\n      tag_102\n        /* \"erc721a/contracts/ERC721A.sol\":9400:9405  owner */\n      dup2\n        /* \"@openzeppelin/contracts/utils/Context.sol\":719:729  msg.sender */\n      caller\n        /* \"erc721a/contracts/ERC721A.sol\":10202:10364  function isApprovedForAll(address owner, address operator) public view virtual override returns (bool) {... */\n      tag_76\n      jump\t// in\n        /* \"erc721a/contracts/ERC721A.sol\":9383:9420  isApprovedForAll(owner, _msgSender()) */\n    tag_102:\n        /* \"erc721a/contracts/ERC721A.sol\":9382:9420  !isApprovedForAll(owner, _msgSender()) */\n      iszero\n        /* \"erc721a/contracts/ERC721A.sol\":9357:9420  _msgSender() != owner && !isApprovedForAll(owner, _msgSender()) */\n    tag_101:\n        /* \"erc721a/contracts/ERC721A.sol\":9353:9489  if (_msgSender() != owner && !isApprovedForAll(owner, _msgSender())) {... */\n      iszero\n      tag_104\n      jumpi\n        /* \"erc721a/contracts/ERC721A.sol\":9443:9478  ApprovalCallerNotOwnerNorApproved() */\n      mload(0x40)\n      shl(0xe1, 0x67d9dca1)\n      dup2\n      mstore\n      0x04\n      add\n      mload(0x40)\n      dup1\n      swap2\n      sub\n      swap1\n      revert\n        /* \"erc721a/contracts/ERC721A.sol\":9353:9489  if (_msgSender() != owner && !isApprovedForAll(owner, _msgSender())) {... */\n    tag_104:\n        /* \"erc721a/contracts/ERC721A.sol\":9499:9527  _approve(to, tokenId, owner) */\n      tag_105\n        /* \"erc721a/contracts/ERC721A.sol\":9508:9510  to */\n      dup4\n        /* \"erc721a/contracts/ERC721A.sol\":9512:9519  tokenId */\n      dup4\n        /* \"erc721a/contracts/ERC721A.sol\":9521:9526  owner */\n      dup4\n        /* \"erc721a/contracts/ERC721A.sol\":9499:9507  _approve */\n      tag_106\n        /* \"erc721a/contracts/ERC721A.sol\":9499:9527  _approve(to, tokenId, owner) */\n      jump\t// in\n    tag_105:\n        /* \"erc721a/contracts/ERC721A.sol\":9234:9534  {... */\n      pop\n        /* \"erc721a/contracts/ERC721A.sol\":9172:9534  function approve(address to, uint256 tokenId) public override {... */\n      pop\n      pop\n      jump\t// out\n        /* \"erc721a/contracts/ERC721A.sol\":10426:10590  function transferFrom(... */\n    tag_47:\n        /* \"erc721a/contracts/ERC721A.sol\":10555:10583  _transfer(from, to, tokenId) */\n      tag_105\n        /* \"erc721a/contracts/ERC721A.sol\":10565:10569  from */\n      dup4\n        /* \"erc721a/contracts/ERC721A.sol\":10571:10573  to */\n      dup4\n        /* \"erc721a/contracts/ERC721A.sol\":10575:10582  tokenId */\n      dup4\n        /* \"erc721a/contracts/ERC721A.sol\":10555:10564  _transfer */\n      tag_112\n        /* \"erc721a/contracts/ERC721A.sol\":10555:10583  _transfer(from, to, tokenId) */\n      jump\t// in\n        /* \"erc721a/contracts/ERC721A.sol\":10656:10835  function safeTransferFrom(... */\n    tag_50:\n        /* \"erc721a/contracts/ERC721A.sol\":10789:10828  safeTransferFrom(from, to, tokenId, '') */\n      tag_105\n        /* \"erc721a/contracts/ERC721A.sol\":10806:10810  from */\n      dup4\n        /* \"erc721a/contracts/ERC721A.sol\":10812:10814  to */\n      dup4\n        /* \"erc721a/contracts/ERC721A.sol\":10816:10823  tokenId */\n      dup4\n        /* \"erc721a/contracts/ERC721A.sol\":10789:10828  safeTransferFrom(from, to, tokenId, '') */\n      mload(0x40)\n      dup1\n      0x20\n      add\n      0x40\n      mstore\n      dup1\n      0x00\n      dup2\n      mstore\n      pop\n        /* \"erc721a/contracts/ERC721A.sol\":10789:10805  safeTransferFrom */\n      tag_70\n        /* \"erc721a/contracts/ERC721A.sol\":10789:10828  safeTransferFrom(from, to, tokenId, '') */\n      jump\t// in\n        /* \"erc721a/contracts/ERC721A.sol\":7955:8077  function ownerOf(uint256 tokenId) public view override returns (address) {... */\n    tag_53:\n        /* \"erc721a/contracts/ERC721A.sol\":8019:8026  address */\n      0x00\n        /* \"erc721a/contracts/ERC721A.sol\":8045:8065  ownershipOf(tokenId) */\n      tag_116\n        /* \"erc721a/contracts/ERC721A.sol\":8057:8064  tokenId */\n      dup3\n        /* \"erc721a/contracts/ERC721A.sol\":8045:8056  ownershipOf */\n      tag_117\n        /* \"erc721a/contracts/ERC721A.sol\":8045:8065  ownershipOf(tokenId) */\n      jump\t// in\n    tag_116:\n        /* \"erc721a/contracts/ERC721A.sol\":8045:8070  ownershipOf(tokenId).addr */\n      mload\n      swap3\n        /* \"erc721a/contracts/ERC721A.sol\":7955:8077  function ownerOf(uint256 tokenId) public view override returns (address) {... */\n      swap2\n      pop\n      pop\n      jump\t// out\n        /* \"erc721a/contracts/ERC721A.sol\":5202:5405  function balanceOf(address owner) public view override returns (uint256) {... */\n    tag_58:\n        /* \"erc721a/contracts/ERC721A.sol\":5266:5273  uint256 */\n      0x00\n      sub(shl(0xa0, 0x01), 0x01)\n        /* \"erc721a/contracts/ERC721A.sol\":5289:5308  owner == address(0) */\n      dup3\n      and\n        /* \"erc721a/contracts/ERC721A.sol\":5285:5345  if (owner == address(0)) revert BalanceQueryForZeroAddress() */\n      tag_119\n      jumpi\n        /* \"erc721a/contracts/ERC721A.sol\":5317:5345  BalanceQueryForZeroAddress() */\n      mload(0x40)\n      shl(0xe2, 0x23d3ad81)\n      dup2\n      mstore\n      0x04\n      add\n      mload(0x40)\n      dup1\n      swap2\n      sub\n      swap1\n      revert\n        /* \"erc721a/contracts/ERC721A.sol\":5285:5345  if (owner == address(0)) revert BalanceQueryForZeroAddress() */\n    tag_119:\n      pop\n      sub(shl(0xa0, 0x01), 0x01)\n        /* \"erc721a/contracts/ERC721A.sol\":5370:5389  _addressData[owner] */\n      and\n      0x00\n      swap1\n      dup2\n      mstore\n        /* \"erc721a/contracts/ERC721A.sol\":5370:5382  _addressData */\n      0x05\n        /* \"erc721a/contracts/ERC721A.sol\":5370:5389  _addressData[owner] */\n      0x20\n      mstore\n      0x40\n      swap1\n      keccak256\n        /* \"erc721a/contracts/ERC721A.sol\":5370:5397  _addressData[owner].balance */\n      sload\n      0xffffffffffffffff\n      and\n      swap1\n        /* \"erc721a/contracts/ERC721A.sol\":5202:5405  function balanceOf(address owner) public view override returns (uint256) {... */\n      jump\t// out\n        /* \"erc721a/contracts/ERC721A.sol\":8301:8403  function symbol() public view virtual override returns (string memory) {... */\n    tag_61:\n        /* \"erc721a/contracts/ERC721A.sol\":8357:8370  string memory */\n      0x60\n        /* \"erc721a/contracts/ERC721A.sol\":8389:8396  _symbol */\n      0x03\n        /* \"erc721a/contracts/ERC721A.sol\":8382:8396  return _symbol */\n      dup1\n      sload\n      tag_86\n      swap1\n      tag_87\n      jump\t// in\n        /* \"erc721a/contracts/ERC721A.sol\":9862:10136  function setApprovalForAll(address operator, bool approved) public override {... */\n    tag_66:\n      sub(shl(0xa0, 0x01), 0x01)\n        /* \"erc721a/contracts/ERC721A.sol\":9952:9976  operator == _msgSender() */\n      dup3\n      and\n        /* \"@openzeppelin/contracts/utils/Context.sol\":719:729  msg.sender */\n      caller\n        /* \"erc721a/contracts/ERC721A.sol\":9952:9976  operator == _msgSender() */\n      eq\n        /* \"erc721a/contracts/ERC721A.sol\":9948:10002  if (operator == _msgSender()) revert ApproveToCaller() */\n      iszero\n      tag_128\n      jumpi\n        /* \"erc721a/contracts/ERC721A.sol\":9985:10002  ApproveToCaller() */\n      mload(0x40)\n      shl(0xe0, 0xb06307db)\n      dup2\n      mstore\n      0x04\n      add\n      mload(0x40)\n      dup1\n      swap2\n      sub\n      swap1\n      revert\n        /* \"erc721a/contracts/ERC721A.sol\":9948:10002  if (operator == _msgSender()) revert ApproveToCaller() */\n    tag_128:\n        /* \"@openzeppelin/contracts/utils/Context.sol\":719:729  msg.sender */\n      caller\n        /* \"erc721a/contracts/ERC721A.sol\":10013:10045  _operatorApprovals[_msgSender()] */\n      0x00\n      dup2\n      dup2\n      mstore\n        /* \"erc721a/contracts/ERC721A.sol\":10013:10031  _operatorApprovals */\n      0x07\n        /* \"erc721a/contracts/ERC721A.sol\":10013:10045  _operatorApprovals[_msgSender()] */\n      0x20\n      swap1\n      dup2\n      mstore\n      0x40\n      dup1\n      dup4\n      keccak256\n      sub(shl(0xa0, 0x01), 0x01)\n        /* \"erc721a/contracts/ERC721A.sol\":10013:10055  _operatorApprovals[_msgSender()][operator] */\n      dup8\n      and\n      dup1\n      dup6\n      mstore\n      swap1\n      dup4\n      mstore\n      swap3\n      dup2\n      swap1\n      keccak256\n        /* \"erc721a/contracts/ERC721A.sol\":10013:10066  _operatorApprovals[_msgSender()][operator] = approved */\n      dup1\n      sload\n      not(0xff)\n      and\n      dup7\n      iszero\n      iszero\n      swap1\n      dup2\n      or\n      swap1\n      swap2\n      sstore\n        /* \"erc721a/contracts/ERC721A.sol\":10081:10129  ApprovalForAll(_msgSender(), operator, approved) */\n      swap1\n      mload\n        /* \"#utility.yul\":540:581   */\n      swap1\n      dup2\n      mstore\n        /* \"erc721a/contracts/ERC721A.sol\":10013:10055  _operatorApprovals[_msgSender()][operator] */\n      swap2\n      swap3\n        /* \"@openzeppelin/contracts/utils/Context.sol\":719:729  msg.sender */\n      swap2\n        /* \"erc721a/contracts/ERC721A.sol\":10081:10129  ApprovalForAll(_msgSender(), operator, approved) */\n      0x17307eab39ab6107e8899845ad3d59bd9653f200f220920489ca2b5937696c31\n      swap2\n        /* \"#utility.yul\":513:531   */\n      add\n        /* \"erc721a/contracts/ERC721A.sol\":10081:10129  ApprovalForAll(_msgSender(), operator, approved) */\n      mload(0x40)\n      dup1\n      swap2\n      sub\n      swap1\n      log3\n        /* \"erc721a/contracts/ERC721A.sol\":9862:10136  function setApprovalForAll(address operator, bool approved) public override {... */\n      pop\n      pop\n      jump\t// out\n        /* \"erc721a/contracts/ERC721A.sol\":10901:11260  function safeTransferFrom(... */\n    tag_70:\n        /* \"erc721a/contracts/ERC721A.sol\":11062:11090  _transfer(from, to, tokenId) */\n      tag_133\n        /* \"erc721a/contracts/ERC721A.sol\":11072:11076  from */\n      dup5\n        /* \"erc721a/contracts/ERC721A.sol\":11078:11080  to */\n      dup5\n        /* \"erc721a/contracts/ERC721A.sol\":11082:11089  tokenId */\n      dup5\n        /* \"erc721a/contracts/ERC721A.sol\":11062:11071  _transfer */\n      tag_112\n        /* \"erc721a/contracts/ERC721A.sol\":11062:11090  _transfer(from, to, tokenId) */\n      jump\t// in\n    tag_133:\n      sub(shl(0xa0, 0x01), 0x01)\n        /* \"erc721a/contracts/ERC721A.sol\":11104:11117  to.isContract */\n      dup4\n      and\n        /* \"@openzeppelin/contracts/utils/Address.sol\":1465:1484  account.code.length */\n      extcodesize\n        /* \"@openzeppelin/contracts/utils/Address.sol\":1465:1488  account.code.length > 0 */\n      iszero\n      iszero\n        /* \"erc721a/contracts/ERC721A.sol\":11104:11180  to.isContract() && !_checkContractOnERC721Received(from, to, tokenId, _data) */\n      dup1\n      iszero\n      tag_136\n      jumpi\n      pop\n        /* \"erc721a/contracts/ERC721A.sol\":11124:11180  _checkContractOnERC721Received(from, to, tokenId, _data) */\n      tag_137\n        /* \"erc721a/contracts/ERC721A.sol\":11155:11159  from */\n      dup5\n        /* \"erc721a/contracts/ERC721A.sol\":11161:11163  to */\n      dup5\n        /* \"erc721a/contracts/ERC721A.sol\":11165:11172  tokenId */\n      dup5\n        /* \"erc721a/contracts/ERC721A.sol\":11174:11179  _data */\n      dup5\n        /* \"erc721a/contracts/ERC721A.sol\":11124:11154  _checkContractOnERC721Received */\n      tag_138\n        /* \"erc721a/contracts/ERC721A.sol\":11124:11180  _checkContractOnERC721Received(from, to, tokenId, _data) */\n      jump\t// in\n    tag_137:\n        /* \"erc721a/contracts/ERC721A.sol\":11123:11180  !_checkContractOnERC721Received(from, to, tokenId, _data) */\n      iszero\n        /* \"erc721a/contracts/ERC721A.sol\":11104:11180  to.isContract() && !_checkContractOnERC721Received(from, to, tokenId, _data) */\n    tag_136:\n        /* \"erc721a/contracts/ERC721A.sol\":11100:11254  if (to.isContract() && !_checkContractOnERC721Received(from, to, tokenId, _data)) {... */\n      iszero\n      tag_139\n      jumpi\n        /* \"erc721a/contracts/ERC721A.sol\":11203:11243  TransferToNonERC721ReceiverImplementer() */\n      mload(0x40)\n      shl(0xe1, 0x68d2bf6b)\n      dup2\n      mstore\n      0x04\n      add\n      mload(0x40)\n      dup1\n      swap2\n      sub\n      swap1\n      revert\n        /* \"erc721a/contracts/ERC721A.sol\":11100:11254  if (to.isContract() && !_checkContractOnERC721Received(from, to, tokenId, _data)) {... */\n    tag_139:\n        /* \"erc721a/contracts/ERC721A.sol\":10901:11260  function safeTransferFrom(... */\n      pop\n      pop\n      pop\n      pop\n      jump\t// out\n        /* \"erc721a/contracts/ERC721A.sol\":8469:8782  function tokenURI(uint256 tokenId) public view virtual override returns (string memory) {... */\n    tag_73:\n        /* \"erc721a/contracts/ERC721A.sol\":8542:8555  string memory */\n      0x60\n        /* \"erc721a/contracts/ERC721A.sol\":8572:8588  _exists(tokenId) */\n      tag_141\n        /* \"erc721a/contracts/ERC721A.sol\":8580:8587  tokenId */\n      dup3\n        /* \"erc721a/contracts/ERC721A.sol\":8572:8579  _exists */\n      tag_94\n        /* \"erc721a/contracts/ERC721A.sol\":8572:8588  _exists(tokenId) */\n      jump\t// in\n    tag_141:\n        /* \"erc721a/contracts/ERC721A.sol\":8567:8626  if (!_exists(tokenId)) revert URIQueryForNonexistentToken() */\n      tag_142\n      jumpi\n        /* \"erc721a/contracts/ERC721A.sol\":8597:8626  URIQueryForNonexistentToken() */\n      mload(0x40)\n      shl(0xe4, 0x0a14c4b5)\n      dup2\n      mstore\n      0x04\n      add\n      mload(0x40)\n      dup1\n      swap2\n      sub\n      swap1\n      revert\n        /* \"erc721a/contracts/ERC721A.sol\":8567:8626  if (!_exists(tokenId)) revert URIQueryForNonexistentToken() */\n    tag_142:\n        /* \"erc721a/contracts/ERC721A.sol\":8637:8658  string memory baseURI */\n      0x00\n        /* \"erc721a/contracts/ERC721A.sol\":8661:8671  _baseURI() */\n      tag_143\n        /* \"erc721a/contracts/ERC721A.sol\":9099:9108  return '' */\n      0x40\n      dup1\n      mload\n      0x20\n      dup2\n      add\n      swap1\n      swap2\n      mstore\n      0x00\n      dup2\n      mstore\n      swap1\n        /* \"erc721a/contracts/ERC721A.sol\":9023:9115  function _baseURI() internal view virtual returns (string memory) {... */\n      jump\n        /* \"erc721a/contracts/ERC721A.sol\":8661:8671  _baseURI() */\n    tag_143:\n        /* \"erc721a/contracts/ERC721A.sol\":8637:8671  string memory baseURI = _baseURI() */\n      swap1\n      pop\n        /* \"erc721a/contracts/ERC721A.sol\":8694:8701  baseURI */\n      dup1\n        /* \"erc721a/contracts/ERC721A.sol\":8688:8709  bytes(baseURI).length */\n      mload\n        /* \"erc721a/contracts/ERC721A.sol\":8713:8714  0 */\n      0x00\n        /* \"erc721a/contracts/ERC721A.sol\":8688:8714  bytes(baseURI).length != 0 */\n      eq\n      iszero\n        /* \"erc721a/contracts/ERC721A.sol\":8688:8775  bytes(baseURI).length != 0 ? string(abi.encodePacked(baseURI, tokenId.toString())) : '' */\n      tag_145\n      jumpi\n      mload(0x40)\n      dup1\n      0x20\n      add\n      0x40\n      mstore\n      dup1\n      0x00\n      dup2\n      mstore\n      pop\n      jump(tag_146)\n    tag_145:\n        /* \"erc721a/contracts/ERC721A.sol\":8741:8748  baseURI */\n      dup1\n        /* \"erc721a/contracts/ERC721A.sol\":8750:8768  tokenId.toString() */\n      tag_147\n        /* \"erc721a/contracts/ERC721A.sol\":8750:8757  tokenId */\n      dup5\n        /* \"erc721a/contracts/ERC721A.sol\":8750:8766  tokenId.toString */\n      tag_148\n        /* \"erc721a/contracts/ERC721A.sol\":8750:8768  tokenId.toString() */\n      jump\t// in\n    tag_147:\n        /* \"erc721a/contracts/ERC721A.sol\":8724:8769  abi.encodePacked(baseURI, tokenId.toString()) */\n      add(0x20, mload(0x40))\n      tag_149\n      swap3\n      swap2\n      swap1\n      tag_150\n      jump\t// in\n    tag_149:\n      mload(0x40)\n      0x20\n      dup2\n      dup4\n      sub\n      sub\n      dup2\n      mstore\n      swap1\n      0x40\n      mstore\n        /* \"erc721a/contracts/ERC721A.sol\":8688:8775  bytes(baseURI).length != 0 ? string(abi.encodePacked(baseURI, tokenId.toString())) : '' */\n    tag_146:\n        /* \"erc721a/contracts/ERC721A.sol\":8681:8775  return bytes(baseURI).length != 0 ? string(abi.encodePacked(baseURI, tokenId.toString())) : '' */\n      swap4\n        /* \"erc721a/contracts/ERC721A.sol\":8469:8782  function tokenURI(uint256 tokenId) public view virtual override returns (string memory) {... */\n      swap3\n      pop\n      pop\n      pop\n      jump\t// out\n        /* \"erc721a/contracts/ERC721A.sol\":11506:11690  function _exists(uint256 tokenId) internal view returns (bool) {... */\n    tag_94:\n        /* \"erc721a/contracts/ERC721A.sol\":11563:11567  bool */\n      0x00\n        /* \"erc721a/contracts/ERC721A.sol\":11626:11639  _currentIndex */\n      dup1\n      sload\n        /* \"erc721a/contracts/ERC721A.sol\":11616:11623  tokenId */\n      dup3\n        /* \"erc721a/contracts/ERC721A.sol\":11616:11639  tokenId < _currentIndex */\n      lt\n        /* \"erc721a/contracts/ERC721A.sol\":11586:11683  _startTokenId() <= tokenId && tokenId < _currentIndex &&... */\n      dup1\n      iszero\n      tag_83\n      jumpi\n      pop\n      pop\n        /* \"erc721a/contracts/ERC721A.sol\":11656:11676  _ownerships[tokenId] */\n      0x00\n      swap1\n      dup2\n      mstore\n        /* \"erc721a/contracts/ERC721A.sol\":11656:11667  _ownerships */\n      0x04\n        /* \"erc721a/contracts/ERC721A.sol\":11656:11676  _ownerships[tokenId] */\n      0x20\n      mstore\n      0x40\n      swap1\n      keccak256\n        /* \"erc721a/contracts/ERC721A.sol\":11656:11683  _ownerships[tokenId].burned */\n      sload\n      shl(0xe0, 0x01)\n      swap1\n      div\n      0xff\n      and\n        /* \"erc721a/contracts/ERC721A.sol\":11655:11683  !_ownerships[tokenId].burned */\n      iszero\n      swap1\n        /* \"erc721a/contracts/ERC721A.sol\":11506:11690  function _exists(uint256 tokenId) internal view returns (bool) {... */\n      jump\t// out\n        /* \"erc721a/contracts/ERC721A.sol\":18922:19111  function _approve(... */\n    tag_106:\n        /* \"erc721a/contracts/ERC721A.sol\":19032:19056  _tokenApprovals[tokenId] */\n      0x00\n      dup3\n      dup2\n      mstore\n        /* \"erc721a/contracts/ERC721A.sol\":19032:19047  _tokenApprovals */\n      0x06\n        /* \"erc721a/contracts/ERC721A.sol\":19032:19056  _tokenApprovals[tokenId] */\n      0x20\n      mstore\n      0x40\n      dup1\n      dup3\n      keccak256\n        /* \"erc721a/contracts/ERC721A.sol\":19032:19061  _tokenApprovals[tokenId] = to */\n      dup1\n      sload\n      not(sub(shl(0xa0, 0x01), 0x01))\n      and\n      sub(shl(0xa0, 0x01), 0x01)\n      dup8\n      dup2\n      and\n      swap2\n      dup3\n      or\n      swap1\n      swap3\n      sstore\n        /* \"erc721a/contracts/ERC721A.sol\":19076:19104  Approval(owner, to, tokenId) */\n      swap2\n      mload\n        /* \"erc721a/contracts/ERC721A.sol\":19032:19056  _tokenApprovals[tokenId] */\n      dup6\n      swap4\n        /* \"erc721a/contracts/ERC721A.sol\":19076:19104  Approval(owner, to, tokenId) */\n      swap2\n      dup6\n      and\n      swap2\n      0x8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b925\n      swap2\n      log4\n        /* \"erc721a/contracts/ERC721A.sol\":18922:19111  function _approve(... */\n      pop\n      pop\n      pop\n      jump\t// out\n        /* \"erc721a/contracts/ERC721A.sol\":14528:16595  function _transfer(... */\n    tag_112:\n        /* \"erc721a/contracts/ERC721A.sol\":14638:14673  TokenOwnership memory prevOwnership */\n      0x00\n        /* \"erc721a/contracts/ERC721A.sol\":14676:14696  ownershipOf(tokenId) */\n      tag_161\n        /* \"erc721a/contracts/ERC721A.sol\":14688:14695  tokenId */\n      dup3\n        /* \"erc721a/contracts/ERC721A.sol\":14676:14687  ownershipOf */\n      tag_117\n        /* \"erc721a/contracts/ERC721A.sol\":14676:14696  ownershipOf(tokenId) */\n      jump\t// in\n    tag_161:\n        /* \"erc721a/contracts/ERC721A.sol\":14749:14767  prevOwnership.addr */\n      dup1\n      mload\n        /* \"erc721a/contracts/ERC721A.sol\":14638:14696  TokenOwnership memory prevOwnership = ownershipOf(tokenId) */\n      swap1\n      swap2\n      pop\n        /* \"erc721a/contracts/ERC721A.sol\":14707:14729  bool isApprovedOrOwner */\n      0x00\n      swap1\n      sub(shl(0xa0, 0x01), 0x01)\n        /* \"erc721a/contracts/ERC721A.sol\":14733:14767  _msgSender() == prevOwnership.addr */\n      and\n        /* \"@openzeppelin/contracts/utils/Context.sol\":719:729  msg.sender */\n      caller\n      sub(shl(0xa0, 0x01), 0x01)\n        /* \"erc721a/contracts/ERC721A.sol\":14733:14767  _msgSender() == prevOwnership.addr */\n      and\n      eq\n        /* \"erc721a/contracts/ERC721A.sol\":14733:14833  _msgSender() == prevOwnership.addr ||... */\n      dup1\n      tag_164\n      jumpi\n      pop\n        /* \"erc721a/contracts/ERC721A.sol\":14800:14818  prevOwnership.addr */\n      dup2\n      mload\n        /* \"erc721a/contracts/ERC721A.sol\":14783:14833  isApprovedForAll(prevOwnership.addr, _msgSender()) */\n      tag_164\n      swap1\n        /* \"@openzeppelin/contracts/utils/Context.sol\":719:729  msg.sender */\n      caller\n        /* \"erc721a/contracts/ERC721A.sol\":10202:10364  function isApprovedForAll(address owner, address operator) public view virtual override returns (bool) {... */\n      tag_76\n      jump\t// in\n        /* \"erc721a/contracts/ERC721A.sol\":14783:14833  isApprovedForAll(prevOwnership.addr, _msgSender()) */\n    tag_164:\n        /* \"erc721a/contracts/ERC721A.sol\":14733:14885  _msgSender() == prevOwnership.addr ||... */\n      dup1\n      tag_166\n      jumpi\n      pop\n        /* \"@openzeppelin/contracts/utils/Context.sol\":719:729  msg.sender */\n      caller\n        /* \"erc721a/contracts/ERC721A.sol\":14849:14869  getApproved(tokenId) */\n      tag_168\n        /* \"erc721a/contracts/ERC721A.sol\":14861:14868  tokenId */\n      dup5\n        /* \"erc721a/contracts/ERC721A.sol\":14849:14860  getApproved */\n      tag_33\n        /* \"erc721a/contracts/ERC721A.sol\":14849:14869  getApproved(tokenId) */\n      jump\t// in\n    tag_168:\n      sub(shl(0xa0, 0x01), 0x01)\n        /* \"erc721a/contracts/ERC721A.sol\":14849:14885  getApproved(tokenId) == _msgSender() */\n      and\n      eq\n        /* \"erc721a/contracts/ERC721A.sol\":14733:14885  _msgSender() == prevOwnership.addr ||... */\n    tag_166:\n        /* \"erc721a/contracts/ERC721A.sol\":14707:14886  bool isApprovedOrOwner = (_msgSender() == prevOwnership.addr ||... */\n      swap1\n      pop\n        /* \"erc721a/contracts/ERC721A.sol\":14902:14919  isApprovedOrOwner */\n      dup1\n        /* \"erc721a/contracts/ERC721A.sol\":14897:14963  if (!isApprovedOrOwner) revert TransferCallerNotOwnerNorApproved() */\n      tag_169\n      jumpi\n        /* \"erc721a/contracts/ERC721A.sol\":14928:14963  TransferCallerNotOwnerNorApproved() */\n      mload(0x40)\n      shl(0xe1, 0x2ce44b5f)\n      dup2\n      mstore\n      0x04\n      add\n      mload(0x40)\n      dup1\n      swap2\n      sub\n      swap1\n      revert\n        /* \"erc721a/contracts/ERC721A.sol\":14897:14963  if (!isApprovedOrOwner) revert TransferCallerNotOwnerNorApproved() */\n    tag_169:\n        /* \"erc721a/contracts/ERC721A.sol\":14999:15003  from */\n      dup5\n      sub(shl(0xa0, 0x01), 0x01)\n        /* \"erc721a/contracts/ERC721A.sol\":14977:15003  prevOwnership.addr != from */\n      and\n        /* \"erc721a/contracts/ERC721A.sol\":14977:14990  prevOwnership */\n      dup3\n        /* \"erc721a/contracts/ERC721A.sol\":14977:14995  prevOwnership.addr */\n      0x00\n      add\n      mload\n      sub(shl(0xa0, 0x01), 0x01)\n        /* \"erc721a/contracts/ERC721A.sol\":14977:15003  prevOwnership.addr != from */\n      and\n      eq\n        /* \"erc721a/contracts/ERC721A.sol\":14973:15040  if (prevOwnership.addr != from) revert TransferFromIncorrectOwner() */\n      tag_170\n      jumpi\n        /* \"erc721a/contracts/ERC721A.sol\":15012:15040  TransferFromIncorrectOwner() */\n      mload(0x40)\n      shl(0xe8, 0xa11481)\n      dup2\n      mstore\n      0x04\n      add\n      mload(0x40)\n      dup1\n      swap2\n      sub\n      swap1\n      revert\n        /* \"erc721a/contracts/ERC721A.sol\":14973:15040  if (prevOwnership.addr != from) revert TransferFromIncorrectOwner() */\n    tag_170:\n      sub(shl(0xa0, 0x01), 0x01)\n        /* \"erc721a/contracts/ERC721A.sol\":15054:15070  to == address(0) */\n      dup5\n      and\n        /* \"erc721a/contracts/ERC721A.sol\":15050:15102  if (to == address(0)) revert TransferToZeroAddress() */\n      tag_171\n      jumpi\n        /* \"erc721a/contracts/ERC721A.sol\":15079:15102  TransferToZeroAddress() */\n      mload(0x40)\n      shl(0xe2, 0x3a954ecd)\n      dup2\n      mstore\n      0x04\n      add\n      mload(0x40)\n      dup1\n      swap2\n      sub\n      swap1\n      revert\n        /* \"erc721a/contracts/ERC721A.sol\":15050:15102  if (to == address(0)) revert TransferToZeroAddress() */\n    tag_171:\n        /* \"erc721a/contracts/ERC721A.sol\":15218:15267  _approve(address(0), tokenId, prevOwnership.addr) */\n      tag_174\n        /* \"erc721a/contracts/ERC721A.sol\":15235:15236  0 */\n      0x00\n        /* \"erc721a/contracts/ERC721A.sol\":15239:15246  tokenId */\n      dup5\n        /* \"erc721a/contracts/ERC721A.sol\":15248:15261  prevOwnership */\n      dup5\n        /* \"erc721a/contracts/ERC721A.sol\":15248:15266  prevOwnership.addr */\n      0x00\n      add\n      mload\n        /* \"erc721a/contracts/ERC721A.sol\":15218:15226  _approve */\n      tag_106\n        /* \"erc721a/contracts/ERC721A.sol\":15218:15267  _approve(address(0), tokenId, prevOwnership.addr) */\n      jump\t// in\n    tag_174:\n      sub(shl(0xa0, 0x01), 0x01)\n        /* \"erc721a/contracts/ERC721A.sol\":15557:15575  _addressData[from] */\n      dup6\n      dup2\n      and\n      0x00\n      swap1\n      dup2\n      mstore\n        /* \"erc721a/contracts/ERC721A.sol\":15557:15569  _addressData */\n      0x05\n        /* \"erc721a/contracts/ERC721A.sol\":15557:15575  _addressData[from] */\n      0x20\n      swap1\n      dup2\n      mstore\n      0x40\n      dup1\n      dup4\n      keccak256\n        /* \"erc721a/contracts/ERC721A.sol\":15557:15588  _addressData[from].balance -= 1 */\n      dup1\n      sload\n      not(0xffffffffffffffff)\n      dup1\n      dup3\n      and\n      0xffffffffffffffff\n      swap3\n      dup4\n      and\n      not(0x00)\n      add\n      dup4\n      and\n      or\n      swap1\n      swap3\n      sstore\n        /* \"erc721a/contracts/ERC721A.sol\":15602:15618  _addressData[to] */\n      dup10\n      dup7\n      and\n      dup1\n      dup7\n      mstore\n      dup4\n      dup7\n      keccak256\n        /* \"erc721a/contracts/ERC721A.sol\":15602:15631  _addressData[to].balance += 1 */\n      dup1\n      sload\n      swap4\n      dup5\n      and\n      swap4\n      dup4\n      and\n      0x01\n      swap1\n      dup2\n      add\n      dup5\n      and\n      swap5\n      swap1\n      swap5\n      or\n      swap1\n      sstore\n        /* \"erc721a/contracts/ERC721A.sol\":15646:15666  _ownerships[tokenId] */\n      dup10\n      dup7\n      mstore\n        /* \"erc721a/contracts/ERC721A.sol\":15646:15657  _ownerships */\n      0x04\n        /* \"erc721a/contracts/ERC721A.sol\":15646:15666  _ownerships[tokenId] */\n      swap1\n      swap5\n      mstore\n      dup3\n      dup6\n      keccak256\n        /* \"erc721a/contracts/ERC721A.sol\":15646:15676  _ownerships[tokenId].addr = to */\n      dup1\n      sload\n      not(sub(shl(0xe0, 0x01), 0x01))\n        /* \"erc721a/contracts/ERC721A.sol\":15690:15751  _ownerships[tokenId].startTimestamp = uint64(block.timestamp) */\n      and\n      swap1\n      swap5\n      or\n      shl(0xa0, 0x01)\n        /* \"erc721a/contracts/ERC721A.sol\":15735:15750  block.timestamp */\n      timestamp\n        /* \"erc721a/contracts/ERC721A.sol\":15690:15751  _ownerships[tokenId].startTimestamp = uint64(block.timestamp) */\n      swap1\n      swap3\n      and\n      swap2\n      swap1\n      swap2\n      mul\n      or\n      swap1\n      swap3\n      sstore\n        /* \"erc721a/contracts/ERC721A.sol\":16021:16032  tokenId + 1 */\n      swap1\n      dup7\n      add\n        /* \"erc721a/contracts/ERC721A.sol\":16050:16074  _ownerships[nextTokenId] */\n      dup1\n      dup4\n      mstore\n      swap2\n      keccak256\n        /* \"erc721a/contracts/ERC721A.sol\":16050:16079  _ownerships[nextTokenId].addr */\n      sload\n        /* \"erc721a/contracts/ERC721A.sol\":16021:16032  tokenId + 1 */\n      swap1\n      swap2\n        /* \"erc721a/contracts/ERC721A.sol\":16050:16079  _ownerships[nextTokenId].addr */\n      and\n        /* \"erc721a/contracts/ERC721A.sol\":16046:16484  if (_ownerships[nextTokenId].addr == address(0)) {... */\n      tag_176\n      jumpi\n        /* \"erc721a/contracts/ERC721A.sol\":16272:16285  _currentIndex */\n      sload(0x00)\n        /* \"erc721a/contracts/ERC721A.sol\":16258:16269  nextTokenId */\n      dup2\n        /* \"erc721a/contracts/ERC721A.sol\":16258:16285  nextTokenId < _currentIndex */\n      lt\n        /* \"erc721a/contracts/ERC721A.sol\":16254:16470  if (nextTokenId < _currentIndex) {... */\n      iszero\n      tag_176\n      jumpi\n        /* \"erc721a/contracts/ERC721A.sol\":16341:16359  prevOwnership.addr */\n      dup3\n      mload\n      0x00\n        /* \"erc721a/contracts/ERC721A.sol\":16309:16333  _ownerships[nextTokenId] */\n      dup3\n      dup2\n      mstore\n        /* \"erc721a/contracts/ERC721A.sol\":16309:16320  _ownerships */\n      0x04\n        /* \"erc721a/contracts/ERC721A.sol\":16309:16333  _ownerships[nextTokenId] */\n      0x20\n      swap1\n      dup2\n      mstore\n      0x40\n      swap1\n      swap2\n      keccak256\n        /* \"erc721a/contracts/ERC721A.sol\":16309:16359  _ownerships[nextTokenId].addr = prevOwnership.addr */\n      dup1\n      sload\n        /* \"erc721a/contracts/ERC721A.sol\":16423:16451  prevOwnership.startTimestamp */\n      swap2\n      dup7\n      add\n      mload\n        /* \"erc721a/contracts/ERC721A.sol\":16381:16451  _ownerships[nextTokenId].startTimestamp = prevOwnership.startTimestamp */\n      0xffffffffffffffff\n      and\n      shl(0xa0, 0x01)\n      mul\n      not(sub(shl(0xe0, 0x01), 0x01))\n      swap1\n      swap3\n      and\n      sub(shl(0xa0, 0x01), 0x01)\n        /* \"erc721a/contracts/ERC721A.sol\":16309:16359  _ownerships[nextTokenId].addr = prevOwnership.addr */\n      swap1\n      swap4\n      and\n        /* \"erc721a/contracts/ERC721A.sol\":16381:16451  _ownerships[nextTokenId].startTimestamp = prevOwnership.startTimestamp */\n      swap3\n      swap1\n      swap3\n      or\n      or\n      swap1\n      sstore\n        /* \"erc721a/contracts/ERC721A.sol\":16254:16470  if (nextTokenId < _currentIndex) {... */\n    tag_176:\n        /* \"erc721a/contracts/ERC721A.sol\":15533:16494  unchecked {... */\n      pop\n        /* \"erc721a/contracts/ERC721A.sol\":16528:16535  tokenId */\n      dup3\n        /* \"erc721a/contracts/ERC721A.sol\":16524:16526  to */\n      dup5\n      sub(shl(0xa0, 0x01), 0x01)\n        /* \"erc721a/contracts/ERC721A.sol\":16509:16536  Transfer(from, to, tokenId) */\n      and\n        /* \"erc721a/contracts/ERC721A.sol\":16518:16522  from */\n      dup7\n      sub(shl(0xa0, 0x01), 0x01)\n        /* \"erc721a/contracts/ERC721A.sol\":16509:16536  Transfer(from, to, tokenId) */\n      and\n      0xddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef\n      mload(0x40)\n      mload(0x40)\n      dup1\n      swap2\n      sub\n      swap1\n      log4\n        /* \"erc721a/contracts/ERC721A.sol\":14628:16595  {... */\n      pop\n      pop\n        /* \"erc721a/contracts/ERC721A.sol\":14528:16595  function _transfer(... */\n      pop\n      pop\n      pop\n      jump\t// out\n        /* \"erc721a/contracts/ERC721A.sol\":6815:7898  function ownershipOf(uint256 tokenId) internal view returns (TokenOwnership memory) {... */\n    tag_117:\n      0x40\n      dup1\n      mload\n      0x60\n      dup2\n      add\n      dup3\n      mstore\n      0x00\n      dup1\n      dup3\n      mstore\n      0x20\n      dup3\n      add\n      dup2\n      swap1\n      mstore\n      swap2\n      dup2\n      add\n      swap2\n      swap1\n      swap2\n      mstore\n        /* \"erc721a/contracts/ERC721A.sol\":6924:6931  tokenId */\n      dup2\n        /* \"erc721a/contracts/ERC721A.sol\":7004:7017  _currentIndex */\n      sload(0x00)\n        /* \"erc721a/contracts/ERC721A.sol\":6997:7001  curr */\n      dup2\n        /* \"erc721a/contracts/ERC721A.sol\":6997:7017  curr < _currentIndex */\n      lt\n        /* \"erc721a/contracts/ERC721A.sol\":6966:7834  if (_startTokenId() <= curr && curr < _currentIndex) {... */\n      iszero\n      tag_184\n      jumpi\n        /* \"erc721a/contracts/ERC721A.sol\":7037:7068  TokenOwnership memory ownership */\n      0x00\n        /* \"erc721a/contracts/ERC721A.sol\":7071:7088  _ownerships[curr] */\n      dup2\n      dup2\n      mstore\n        /* \"erc721a/contracts/ERC721A.sol\":7071:7082  _ownerships */\n      0x04\n        /* \"erc721a/contracts/ERC721A.sol\":7071:7088  _ownerships[curr] */\n      0x20\n      swap1\n      dup2\n      mstore\n      0x40\n      swap2\n      dup3\n      swap1\n      keccak256\n        /* \"erc721a/contracts/ERC721A.sol\":7037:7088  TokenOwnership memory ownership = _ownerships[curr] */\n      dup3\n      mload\n      0x60\n      dup2\n      add\n      dup5\n      mstore\n      swap1\n      sload\n      sub(shl(0xa0, 0x01), 0x01)\n      dup2\n      and\n      dup3\n      mstore\n      shl(0xa0, 0x01)\n      dup2\n      div\n      0xffffffffffffffff\n      and\n      swap3\n      dup3\n      add\n      swap3\n      swap1\n      swap3\n      mstore\n      shl(0xe0, 0x01)\n      swap1\n      swap2\n      div\n      0xff\n      and\n      iszero\n      iszero\n      swap2\n      dup2\n      add\n      dup3\n      swap1\n      mstore\n      swap1\n        /* \"erc721a/contracts/ERC721A.sol\":7106:7820  if (!ownership.burned) {... */\n      tag_188\n      jumpi\n        /* \"erc721a/contracts/ERC721A.sol\":7155:7169  ownership.addr */\n      dup1\n      mload\n      sub(shl(0xa0, 0x01), 0x01)\n        /* \"erc721a/contracts/ERC721A.sol\":7155:7183  ownership.addr != address(0) */\n      and\n      iszero\n        /* \"erc721a/contracts/ERC721A.sol\":7151:7250  if (ownership.addr != address(0)) {... */\n      tag_186\n      jumpi\n        /* \"erc721a/contracts/ERC721A.sol\":7218:7227  ownership */\n      swap4\n        /* \"erc721a/contracts/ERC721A.sol\":6815:7898  function ownershipOf(uint256 tokenId) internal view returns (TokenOwnership memory) {... */\n      swap3\n      pop\n      pop\n      pop\n      jump\t// out\n        /* \"erc721a/contracts/ERC721A.sol\":7151:7250  if (ownership.addr != address(0)) {... */\n    tag_186:\n      pop\n      not(0x00)\n        /* \"erc721a/contracts/ERC721A.sol\":7586:7592  curr-- */\n      add\n        /* \"erc721a/contracts/ERC721A.sol\":7630:7647  _ownerships[curr] */\n      0x00\n      dup2\n      dup2\n      mstore\n        /* \"erc721a/contracts/ERC721A.sol\":7630:7641  _ownerships */\n      0x04\n        /* \"erc721a/contracts/ERC721A.sol\":7630:7647  _ownerships[curr] */\n      0x20\n      swap1\n      dup2\n      mstore\n      0x40\n      swap2\n      dup3\n      swap1\n      keccak256\n        /* \"erc721a/contracts/ERC721A.sol\":7618:7647  ownership = _ownerships[curr] */\n      dup3\n      mload\n      0x60\n      dup2\n      add\n      dup5\n      mstore\n      swap1\n      sload\n      sub(shl(0xa0, 0x01), 0x01)\n      dup2\n      and\n      dup1\n      dup4\n      mstore\n      shl(0xa0, 0x01)\n      dup3\n      div\n      0xffffffffffffffff\n      and\n      swap4\n      dup4\n      add\n      swap4\n      swap1\n      swap4\n      mstore\n      shl(0xe0, 0x01)\n      swap1\n      div\n      0xff\n      and\n      iszero\n      iszero\n      swap3\n      dup2\n      add\n      swap3\n      swap1\n      swap3\n      mstore\n        /* \"erc721a/contracts/ERC721A.sol\":7677:7705  ownership.addr != address(0) */\n      iszero\n        /* \"erc721a/contracts/ERC721A.sol\":7673:7780  if (ownership.addr != address(0)) {... */\n      tag_189\n      jumpi\n        /* \"erc721a/contracts/ERC721A.sol\":7744:7753  ownership */\n      swap4\n        /* \"erc721a/contracts/ERC721A.sol\":6815:7898  function ownershipOf(uint256 tokenId) internal view returns (TokenOwnership memory) {... */\n      swap3\n      pop\n      pop\n      pop\n      jump\t// out\n        /* \"erc721a/contracts/ERC721A.sol\":7673:7780  if (ownership.addr != address(0)) {... */\n    tag_189:\n        /* \"erc721a/contracts/ERC721A.sol\":7547:7802  while (true) {... */\n      jump(tag_186)\n    tag_188:\n        /* \"erc721a/contracts/ERC721A.sol\":7019:7834  {... */\n      pop\n        /* \"erc721a/contracts/ERC721A.sol\":6966:7834  if (_startTokenId() <= curr && curr < _currentIndex) {... */\n    tag_184:\n        /* \"erc721a/contracts/ERC721A.sol\":7860:7891  OwnerQueryForNonexistentToken() */\n      mload(0x40)\n      shl(0xe1, 0x6f96cda1)\n      dup2\n      mstore\n      0x04\n      add\n      mload(0x40)\n      dup1\n      swap2\n      sub\n      swap1\n      revert\n        /* \"erc721a/contracts/ERC721A.sol\":19592:20242  function _checkContractOnERC721Received(... */\n    tag_138:\n        /* \"erc721a/contracts/ERC721A.sol\":19770:19842  IERC721Receiver(to).onERC721Received(_msgSender(), from, tokenId, _data) */\n      mload(0x40)\n      shl(0xe1, 0x0a85bd01)\n      dup2\n      mstore\n        /* \"erc721a/contracts/ERC721A.sol\":19750:19754  bool */\n      0x00\n      swap1\n      sub(shl(0xa0, 0x01), 0x01)\n        /* \"erc721a/contracts/ERC721A.sol\":19770:19806  IERC721Receiver(to).onERC721Received */\n      dup6\n      and\n      swap1\n      0x150b7a02\n      swap1\n        /* \"erc721a/contracts/ERC721A.sol\":19770:19842  IERC721Receiver(to).onERC721Received(_msgSender(), from, tokenId, _data) */\n      tag_193\n      swap1\n        /* \"@openzeppelin/contracts/utils/Context.sol\":719:729  msg.sender */\n      caller\n      swap1\n        /* \"erc721a/contracts/ERC721A.sol\":19821:19825  from */\n      dup10\n      swap1\n        /* \"erc721a/contracts/ERC721A.sol\":19827:19834  tokenId */\n      dup9\n      swap1\n        /* \"erc721a/contracts/ERC721A.sol\":19836:19841  _data */\n      dup9\n      swap1\n        /* \"erc721a/contracts/ERC721A.sol\":19770:19842  IERC721Receiver(to).onERC721Received(_msgSender(), from, tokenId, _data) */\n      0x04\n      add\n      tag_194\n      jump\t// in\n    tag_193:\n      0x20\n      mload(0x40)\n      dup1\n      dup4\n      sub\n      dup2\n      0x00\n      dup8\n      dup1\n      extcodesize\n      iszero\n      dup1\n      iszero\n      tag_195\n      jumpi\n      0x00\n      dup1\n      revert\n    tag_195:\n      pop\n      gas\n      call\n      swap3\n      pop\n      pop\n      pop\n      dup1\n      iszero\n      tag_196\n      jumpi\n      pop\n      0x40\n      dup1\n      mload\n      0x1f\n      returndatasize\n      swap1\n      dup2\n      add\n      not(0x1f)\n      and\n      dup3\n      add\n      swap1\n      swap3\n      mstore\n      tag_197\n      swap2\n      dup2\n      add\n      swap1\n      tag_198\n      jump\t// in\n    tag_197:\n      0x01\n    tag_196:\n        /* \"erc721a/contracts/ERC721A.sol\":19766:20236  try IERC721Receiver(to).onERC721Received(_msgSender(), from, tokenId, _data) returns (bytes4 retval) {... */\n      tag_199\n      jumpi\n      returndatasize\n      dup1\n      dup1\n      iszero\n      tag_204\n      jumpi\n      mload(0x40)\n      swap2\n      pop\n      and(add(returndatasize, 0x3f), not(0x1f))\n      dup3\n      add\n      0x40\n      mstore\n      returndatasize\n      dup3\n      mstore\n      returndatasize\n      0x00\n      0x20\n      dup5\n      add\n      returndatacopy\n      jump(tag_203)\n    tag_204:\n      0x60\n      swap2\n      pop\n    tag_203:\n      pop\n        /* \"erc721a/contracts/ERC721A.sol\":20001:20014  reason.length */\n      dup1\n      mload\n        /* \"erc721a/contracts/ERC721A.sol\":19997:20226  if (reason.length == 0) {... */\n      tag_205\n      jumpi\n        /* \"erc721a/contracts/ERC721A.sol\":20046:20086  TransferToNonERC721ReceiverImplementer() */\n      mload(0x40)\n      shl(0xe1, 0x68d2bf6b)\n      dup2\n      mstore\n      0x04\n      add\n      mload(0x40)\n      dup1\n      swap2\n      sub\n      swap1\n      revert\n        /* \"erc721a/contracts/ERC721A.sol\":19997:20226  if (reason.length == 0) {... */\n    tag_205:\n        /* \"erc721a/contracts/ERC721A.sol\":20186:20192  reason */\n      dup1\n        /* \"erc721a/contracts/ERC721A.sol\":20180:20193  mload(reason) */\n      mload\n        /* \"erc721a/contracts/ERC721A.sol\":20171:20177  reason */\n      dup2\n        /* \"erc721a/contracts/ERC721A.sol\":20167:20169  32 */\n      0x20\n        /* \"erc721a/contracts/ERC721A.sol\":20163:20178  add(32, reason) */\n      add\n        /* \"erc721a/contracts/ERC721A.sol\":20156:20194  revert(add(32, reason), mload(reason)) */\n      revert\n        /* \"erc721a/contracts/ERC721A.sol\":19766:20236  try IERC721Receiver(to).onERC721Received(_msgSender(), from, tokenId, _data) returns (bytes4 retval) {... */\n    tag_199:\n      not(sub(shl(0xe0, 0x01), 0x01))\n        /* \"erc721a/contracts/ERC721A.sol\":19888:19943  retval == IERC721Receiver(to).onERC721Received.selector */\n      and\n      shl(0xe1, 0x0a85bd01)\n      eq\n      swap1\n      pop\n        /* \"erc721a/contracts/ERC721A.sol\":19766:20236  try IERC721Receiver(to).onERC721Received(_msgSender(), from, tokenId, _data) returns (bytes4 retval) {... */\n    tag_207:\n        /* \"erc721a/contracts/ERC721A.sol\":19592:20242  function _checkContractOnERC721Received(... */\n      swap5\n      swap4\n      pop\n      pop\n      pop\n      pop\n      jump\t// out\n        /* \"@openzeppelin/contracts/utils/Strings.sol\":328:1031  function toString(uint256 value) internal pure returns (string memory) {... */\n    tag_148:\n        /* \"@openzeppelin/contracts/utils/Strings.sol\":384:397  string memory */\n      0x60\n        /* \"@openzeppelin/contracts/utils/Strings.sol\":601:611  value == 0 */\n      dup2\n        /* \"@openzeppelin/contracts/utils/Strings.sol\":597:648  if (value == 0) {... */\n      tag_210\n      jumpi\n      pop\n      pop\n        /* \"@openzeppelin/contracts/utils/Strings.sol\":627:637  return \"0\" */\n      0x40\n      dup1\n      mload\n      dup1\n      dup3\n      add\n      swap1\n      swap2\n      mstore\n      0x01\n      dup2\n      mstore\n      shl(0xfc, 0x03)\n      0x20\n      dup3\n      add\n      mstore\n      swap1\n        /* \"@openzeppelin/contracts/utils/Strings.sol\":328:1031  function toString(uint256 value) internal pure returns (string memory) {... */\n      jump\t// out\n        /* \"@openzeppelin/contracts/utils/Strings.sol\":597:648  if (value == 0) {... */\n    tag_210:\n        /* \"@openzeppelin/contracts/utils/Strings.sol\":672:677  value */\n      dup2\n        /* \"@openzeppelin/contracts/utils/Strings.sol\":657:669  uint256 temp */\n      0x00\n        /* \"@openzeppelin/contracts/utils/Strings.sol\":711:786  while (temp != 0) {... */\n    tag_211:\n        /* \"@openzeppelin/contracts/utils/Strings.sol\":718:727  temp != 0 */\n      dup2\n      iszero\n        /* \"@openzeppelin/contracts/utils/Strings.sol\":711:786  while (temp != 0) {... */\n      tag_212\n      jumpi\n        /* \"@openzeppelin/contracts/utils/Strings.sol\":743:751  digits++ */\n      dup1\n      tag_213\n      dup2\n      tag_214\n      jump\t// in\n    tag_213:\n      swap2\n      pop\n        /* \"@openzeppelin/contracts/utils/Strings.sol\":765:775  temp /= 10 */\n      tag_215\n      swap1\n      pop\n        /* \"@openzeppelin/contracts/utils/Strings.sol\":773:775  10 */\n      0x0a\n        /* \"@openzeppelin/contracts/utils/Strings.sol\":765:775  temp /= 10 */\n      dup4\n      tag_216\n      jump\t// in\n    tag_215:\n      swap2\n      pop\n        /* \"@openzeppelin/contracts/utils/Strings.sol\":711:786  while (temp != 0) {... */\n      jump(tag_211)\n    tag_212:\n        /* \"@openzeppelin/contracts/utils/Strings.sol\":795:814  bytes memory buffer */\n      0x00\n        /* \"@openzeppelin/contracts/utils/Strings.sol\":827:833  digits */\n      dup2\n        /* \"@openzeppelin/contracts/utils/Strings.sol\":817:834  new bytes(digits) */\n      0xffffffffffffffff\n      dup2\n      gt\n      iszero\n      tag_218\n      jumpi\n      tag_218\n      tag_219\n      jump\t// in\n    tag_218:\n      mload(0x40)\n      swap1\n      dup1\n      dup3\n      mstore\n      dup1\n      0x1f\n      add\n      not(0x1f)\n      and\n      0x20\n      add\n      dup3\n      add\n      0x40\n      mstore\n      dup1\n      iszero\n      tag_220\n      jumpi\n      0x20\n      dup3\n      add\n      dup2\n      dup1\n      calldatasize\n      dup4\n      calldatacopy\n      add\n      swap1\n      pop\n    tag_220:\n      pop\n        /* \"@openzeppelin/contracts/utils/Strings.sol\":795:834  bytes memory buffer = new bytes(digits) */\n      swap1\n      pop\n        /* \"@openzeppelin/contracts/utils/Strings.sol\":844:994  while (value != 0) {... */\n    tag_221:\n        /* \"@openzeppelin/contracts/utils/Strings.sol\":851:861  value != 0 */\n      dup5\n      iszero\n        /* \"@openzeppelin/contracts/utils/Strings.sol\":844:994  while (value != 0) {... */\n      tag_207\n      jumpi\n        /* \"@openzeppelin/contracts/utils/Strings.sol\":877:888  digits -= 1 */\n      tag_223\n        /* \"@openzeppelin/contracts/utils/Strings.sol\":887:888  1 */\n      0x01\n        /* \"@openzeppelin/contracts/utils/Strings.sol\":877:888  digits -= 1 */\n      dup4\n      tag_224\n      jump\t// in\n    tag_223:\n      swap2\n      pop\n        /* \"@openzeppelin/contracts/utils/Strings.sol\":945:955  value % 10 */\n      tag_225\n        /* \"@openzeppelin/contracts/utils/Strings.sol\":953:955  10 */\n      0x0a\n        /* \"@openzeppelin/contracts/utils/Strings.sol\":945:950  value */\n      dup7\n        /* \"@openzeppelin/contracts/utils/Strings.sol\":945:955  value % 10 */\n      tag_226\n      jump\t// in\n    tag_225:\n        /* \"@openzeppelin/contracts/utils/Strings.sol\":932:956  48 + uint256(value % 10) */\n      tag_227\n      swap1\n        /* \"@openzeppelin/contracts/utils/Strings.sol\":932:934  48 */\n      0x30\n        /* \"@openzeppelin/contracts/utils/Strings.sol\":932:956  48 + uint256(value % 10) */\n      tag_228\n      jump\t// in\n    tag_227:\n        /* \"@openzeppelin/contracts/utils/Strings.sol\":919:958  bytes1(uint8(48 + uint256(value % 10))) */\n      0xf8\n      shl\n        /* \"@openzeppelin/contracts/utils/Strings.sol\":902:908  buffer */\n      dup2\n        /* \"@openzeppelin/contracts/utils/Strings.sol\":909:915  digits */\n      dup4\n        /* \"@openzeppelin/contracts/utils/Strings.sol\":902:916  buffer[digits] */\n      dup2\n      mload\n      dup2\n      lt\n      tag_230\n      jumpi\n      tag_230\n      tag_231\n      jump\t// in\n    tag_230:\n      0x20\n      add\n      add\n        /* \"@openzeppelin/contracts/utils/Strings.sol\":902:958  buffer[digits] = bytes1(uint8(48 + uint256(value % 10))) */\n      swap1\n      not(sub(shl(0xf8, 0x01), 0x01))\n      and\n      swap1\n      dup2\n      0x00\n      byte\n      swap1\n      mstore8\n      pop\n        /* \"@openzeppelin/contracts/utils/Strings.sol\":972:983  value /= 10 */\n      tag_232\n        /* \"@openzeppelin/contracts/utils/Strings.sol\":981:983  10 */\n      0x0a\n        /* \"@openzeppelin/contracts/utils/Strings.sol\":972:983  value /= 10 */\n      dup7\n      tag_216\n      jump\t// in\n    tag_232:\n      swap5\n      pop\n        /* \"@openzeppelin/contracts/utils/Strings.sol\":844:994  while (value != 0) {... */\n      jump(tag_221)\n        /* \"#utility.yul\":14:145   */\n    tag_235:\n      not(sub(shl(0xe0, 0x01), 0x01))\n        /* \"#utility.yul\":88:120   */\n      dup2\n      and\n        /* \"#utility.yul\":78:121   */\n      dup2\n      eq\n        /* \"#utility.yul\":68:139   */\n      tag_243\n      jumpi\n        /* \"#utility.yul\":135:136   */\n      0x00\n        /* \"#utility.yul\":132:133   */\n      dup1\n        /* \"#utility.yul\":125:137   */\n      revert\n        /* \"#utility.yul\":68:139   */\n    tag_243:\n        /* \"#utility.yul\":14:145   */\n      pop\n      jump\t// out\n        /* \"#utility.yul\":150:395   */\n    tag_22:\n        /* \"#utility.yul\":208:214   */\n      0x00\n        /* \"#utility.yul\":261:263   */\n      0x20\n        /* \"#utility.yul\":249:258   */\n      dup3\n        /* \"#utility.yul\":240:247   */\n      dup5\n        /* \"#utility.yul\":236:259   */\n      sub\n        /* \"#utility.yul\":232:264   */\n      slt\n        /* \"#utility.yul\":229:281   */\n      iszero\n      tag_245\n      jumpi\n        /* \"#utility.yul\":277:278   */\n      0x00\n        /* \"#utility.yul\":274:275   */\n      dup1\n        /* \"#utility.yul\":267:279   */\n      revert\n        /* \"#utility.yul\":229:281   */\n    tag_245:\n        /* \"#utility.yul\":316:325   */\n      dup2\n        /* \"#utility.yul\":303:326   */\n      calldataload\n        /* \"#utility.yul\":335:365   */\n      tag_146\n        /* \"#utility.yul\":359:364   */\n      dup2\n        /* \"#utility.yul\":335:365   */\n      tag_235\n      jump\t// in\n        /* \"#utility.yul\":592:850   */\n    tag_236:\n        /* \"#utility.yul\":664:665   */\n      0x00\n        /* \"#utility.yul\":674:787   */\n    tag_249:\n        /* \"#utility.yul\":688:694   */\n      dup4\n        /* \"#utility.yul\":685:686   */\n      dup2\n        /* \"#utility.yul\":682:695   */\n      lt\n        /* \"#utility.yul\":674:787   */\n      iszero\n      tag_251\n      jumpi\n        /* \"#utility.yul\":764:775   */\n      dup2\n      dup2\n      add\n        /* \"#utility.yul\":758:776   */\n      mload\n        /* \"#utility.yul\":745:756   */\n      dup4\n      dup3\n      add\n        /* \"#utility.yul\":738:777   */\n      mstore\n        /* \"#utility.yul\":710:712   */\n      0x20\n        /* \"#utility.yul\":703:713   */\n      add\n        /* \"#utility.yul\":674:787   */\n      jump(tag_249)\n    tag_251:\n        /* \"#utility.yul\":805:811   */\n      dup4\n        /* \"#utility.yul\":802:803   */\n      dup2\n        /* \"#utility.yul\":799:812   */\n      gt\n        /* \"#utility.yul\":796:844   */\n      iszero\n      tag_139\n      jumpi\n      pop\n      pop\n        /* \"#utility.yul\":840:841   */\n      0x00\n        /* \"#utility.yul\":822:838   */\n      swap2\n      add\n        /* \"#utility.yul\":815:842   */\n      mstore\n        /* \"#utility.yul\":592:850   */\n      jump\t// out\n        /* \"#utility.yul\":855:1113   */\n    tag_237:\n        /* \"#utility.yul\":897:900   */\n      0x00\n        /* \"#utility.yul\":935:940   */\n      dup2\n        /* \"#utility.yul\":929:941   */\n      mload\n        /* \"#utility.yul\":962:968   */\n      dup1\n        /* \"#utility.yul\":957:960   */\n      dup5\n        /* \"#utility.yul\":950:969   */\n      mstore\n        /* \"#utility.yul\":978:1041   */\n      tag_254\n        /* \"#utility.yul\":1034:1040   */\n      dup2\n        /* \"#utility.yul\":1027:1031   */\n      0x20\n        /* \"#utility.yul\":1022:1025   */\n      dup7\n        /* \"#utility.yul\":1018:1032   */\n      add\n        /* \"#utility.yul\":1011:1015   */\n      0x20\n        /* \"#utility.yul\":1004:1009   */\n      dup7\n        /* \"#utility.yul\":1000:1016   */\n      add\n        /* \"#utility.yul\":978:1041   */\n      tag_236\n      jump\t// in\n    tag_254:\n        /* \"#utility.yul\":1095:1097   */\n      0x1f\n        /* \"#utility.yul\":1074:1089   */\n      add\n      not(0x1f)\n        /* \"#utility.yul\":1070:1099   */\n      and\n        /* \"#utility.yul\":1061:1100   */\n      swap3\n      swap1\n      swap3\n      add\n        /* \"#utility.yul\":1102:1106   */\n      0x20\n        /* \"#utility.yul\":1057:1107   */\n      add\n      swap3\n        /* \"#utility.yul\":855:1113   */\n      swap2\n      pop\n      pop\n      jump\t// out\n        /* \"#utility.yul\":1118:1338   */\n    tag_29:\n        /* \"#utility.yul\":1267:1269   */\n      0x20\n        /* \"#utility.yul\":1256:1265   */\n      dup2\n        /* \"#utility.yul\":1249:1270   */\n      mstore\n        /* \"#utility.yul\":1230:1234   */\n      0x00\n        /* \"#utility.yul\":1287:1332   */\n      tag_146\n        /* \"#utility.yul\":1328:1330   */\n      0x20\n        /* \"#utility.yul\":1317:1326   */\n      dup4\n        /* \"#utility.yul\":1313:1331   */\n      add\n        /* \"#utility.yul\":1305:1311   */\n      dup5\n        /* \"#utility.yul\":1287:1332   */\n      tag_237\n      jump\t// in\n        /* \"#utility.yul\":1343:1523   */\n    tag_32:\n        /* \"#utility.yul\":1402:1408   */\n      0x00\n        /* \"#utility.yul\":1455:1457   */\n      0x20\n        /* \"#utility.yul\":1443:1452   */\n      dup3\n        /* \"#utility.yul\":1434:1441   */\n      dup5\n        /* \"#utility.yul\":1430:1453   */\n      sub\n        /* \"#utility.yul\":1426:1458   */\n      slt\n        /* \"#utility.yul\":1423:1475   */\n      iszero\n      tag_258\n      jumpi\n        /* \"#utility.yul\":1471:1472   */\n      0x00\n        /* \"#utility.yul\":1468:1469   */\n      dup1\n        /* \"#utility.yul\":1461:1473   */\n      revert\n        /* \"#utility.yul\":1423:1475   */\n    tag_258:\n      pop\n        /* \"#utility.yul\":1494:1517   */\n      calldataload\n      swap2\n        /* \"#utility.yul\":1343:1523   */\n      swap1\n      pop\n      jump\t// out\n        /* \"#utility.yul\":1736:1909   */\n    tag_238:\n        /* \"#utility.yul\":1804:1824   */\n      dup1\n      calldataload\n      sub(shl(0xa0, 0x01), 0x01)\n        /* \"#utility.yul\":1853:1884   */\n      dup2\n      and\n        /* \"#utility.yul\":1843:1885   */\n      dup2\n      eq\n        /* \"#utility.yul\":1833:1903   */\n      tag_261\n      jumpi\n        /* \"#utility.yul\":1899:1900   */\n      0x00\n        /* \"#utility.yul\":1896:1897   */\n      dup1\n        /* \"#utility.yul\":1889:1901   */\n      revert\n        /* \"#utility.yul\":1833:1903   */\n    tag_261:\n        /* \"#utility.yul\":1736:1909   */\n      swap2\n      swap1\n      pop\n      jump\t// out\n        /* \"#utility.yul\":1914:2168   */\n    tag_38:\n        /* \"#utility.yul\":1982:1988   */\n      0x00\n        /* \"#utility.yul\":1990:1996   */\n      dup1\n        /* \"#utility.yul\":2043:2045   */\n      0x40\n        /* \"#utility.yul\":2031:2040   */\n      dup4\n        /* \"#utility.yul\":2022:2029   */\n      dup6\n        /* \"#utility.yul\":2018:2041   */\n      sub\n        /* \"#utility.yul\":2014:2046   */\n      slt\n        /* \"#utility.yul\":2011:2063   */\n      iszero\n      tag_263\n      jumpi\n        /* \"#utility.yul\":2059:2060   */\n      0x00\n        /* \"#utility.yul\":2056:2057   */\n      dup1\n        /* \"#utility.yul\":2049:2061   */\n      revert\n        /* \"#utility.yul\":2011:2063   */\n    tag_263:\n        /* \"#utility.yul\":2082:2111   */\n      tag_264\n        /* \"#utility.yul\":2101:2110   */\n      dup4\n        /* \"#utility.yul\":2082:2111   */\n      tag_238\n      jump\t// in\n    tag_264:\n        /* \"#utility.yul\":2072:2111   */\n      swap5\n        /* \"#utility.yul\":2158:2160   */\n      0x20\n        /* \"#utility.yul\":2143:2161   */\n      swap4\n      swap1\n      swap4\n      add\n        /* \"#utility.yul\":2130:2162   */\n      calldataload\n      swap4\n      pop\n      pop\n      pop\n        /* \"#utility.yul\":1914:2168   */\n      jump\t// out\n        /* \"#utility.yul\":2355:2683   */\n    tag_46:\n        /* \"#utility.yul\":2432:2438   */\n      0x00\n        /* \"#utility.yul\":2440:2446   */\n      dup1\n        /* \"#utility.yul\":2448:2454   */\n      0x00\n        /* \"#utility.yul\":2501:2503   */\n      0x60\n        /* \"#utility.yul\":2489:2498   */\n      dup5\n        /* \"#utility.yul\":2480:2487   */\n      dup7\n        /* \"#utility.yul\":2476:2499   */\n      sub\n        /* \"#utility.yul\":2472:2504   */\n      slt\n        /* \"#utility.yul\":2469:2521   */\n      iszero\n      tag_267\n      jumpi\n        /* \"#utility.yul\":2517:2518   */\n      0x00\n        /* \"#utility.yul\":2514:2515   */\n      dup1\n        /* \"#utility.yul\":2507:2519   */\n      revert\n        /* \"#utility.yul\":2469:2521   */\n    tag_267:\n        /* \"#utility.yul\":2540:2569   */\n      tag_268\n        /* \"#utility.yul\":2559:2568   */\n      dup5\n        /* \"#utility.yul\":2540:2569   */\n      tag_238\n      jump\t// in\n    tag_268:\n        /* \"#utility.yul\":2530:2569   */\n      swap3\n      pop\n        /* \"#utility.yul\":2588:2626   */\n      tag_269\n        /* \"#utility.yul\":2622:2624   */\n      0x20\n        /* \"#utility.yul\":2611:2620   */\n      dup6\n        /* \"#utility.yul\":2607:2625   */\n      add\n        /* \"#utility.yul\":2588:2626   */\n      tag_238\n      jump\t// in\n    tag_269:\n        /* \"#utility.yul\":2578:2626   */\n      swap2\n      pop\n        /* \"#utility.yul\":2673:2675   */\n      0x40\n        /* \"#utility.yul\":2662:2671   */\n      dup5\n        /* \"#utility.yul\":2658:2676   */\n      add\n        /* \"#utility.yul\":2645:2677   */\n      calldataload\n        /* \"#utility.yul\":2635:2677   */\n      swap1\n      pop\n        /* \"#utility.yul\":2355:2683   */\n      swap3\n      pop\n      swap3\n      pop\n      swap3\n      jump\t// out\n        /* \"#utility.yul\":2688:2874   */\n    tag_57:\n        /* \"#utility.yul\":2747:2753   */\n      0x00\n        /* \"#utility.yul\":2800:2802   */\n      0x20\n        /* \"#utility.yul\":2788:2797   */\n      dup3\n        /* \"#utility.yul\":2779:2786   */\n      dup5\n        /* \"#utility.yul\":2775:2798   */\n      sub\n        /* \"#utility.yul\":2771:2803   */\n      slt\n        /* \"#utility.yul\":2768:2820   */\n      iszero\n      tag_271\n      jumpi\n        /* \"#utility.yul\":2816:2817   */\n      0x00\n        /* \"#utility.yul\":2813:2814   */\n      dup1\n        /* \"#utility.yul\":2806:2818   */\n      revert\n        /* \"#utility.yul\":2768:2820   */\n    tag_271:\n        /* \"#utility.yul\":2839:2868   */\n      tag_146\n        /* \"#utility.yul\":2858:2867   */\n      dup3\n        /* \"#utility.yul\":2839:2868   */\n      tag_238\n      jump\t// in\n        /* \"#utility.yul\":2879:3226   */\n    tag_65:\n        /* \"#utility.yul\":2944:2950   */\n      0x00\n        /* \"#utility.yul\":2952:2958   */\n      dup1\n        /* \"#utility.yul\":3005:3007   */\n      0x40\n        /* \"#utility.yul\":2993:3002   */\n      dup4\n        /* \"#utility.yul\":2984:2991   */\n      dup6\n        /* \"#utility.yul\":2980:3003   */\n      sub\n        /* \"#utility.yul\":2976:3008   */\n      slt\n        /* \"#utility.yul\":2973:3025   */\n      iszero\n      tag_274\n      jumpi\n        /* \"#utility.yul\":3021:3022   */\n      0x00\n        /* \"#utility.yul\":3018:3019   */\n      dup1\n        /* \"#utility.yul\":3011:3023   */\n      revert\n        /* \"#utility.yul\":2973:3025   */\n    tag_274:\n        /* \"#utility.yul\":3044:3073   */\n      tag_275\n        /* \"#utility.yul\":3063:3072   */\n      dup4\n        /* \"#utility.yul\":3044:3073   */\n      tag_238\n      jump\t// in\n    tag_275:\n        /* \"#utility.yul\":3034:3073   */\n      swap2\n      pop\n        /* \"#utility.yul\":3123:3125   */\n      0x20\n        /* \"#utility.yul\":3112:3121   */\n      dup4\n        /* \"#utility.yul\":3108:3126   */\n      add\n        /* \"#utility.yul\":3095:3127   */\n      calldataload\n        /* \"#utility.yul\":3170:3175   */\n      dup1\n        /* \"#utility.yul\":3163:3176   */\n      iszero\n        /* \"#utility.yul\":3156:3177   */\n      iszero\n        /* \"#utility.yul\":3149:3154   */\n      dup2\n        /* \"#utility.yul\":3146:3178   */\n      eq\n        /* \"#utility.yul\":3136:3196   */\n      tag_276\n      jumpi\n        /* \"#utility.yul\":3192:3193   */\n      0x00\n        /* \"#utility.yul\":3189:3190   */\n      dup1\n        /* \"#utility.yul\":3182:3194   */\n      revert\n        /* \"#utility.yul\":3136:3196   */\n    tag_276:\n        /* \"#utility.yul\":3215:3220   */\n      dup1\n        /* \"#utility.yul\":3205:3220   */\n      swap2\n      pop\n      pop\n        /* \"#utility.yul\":2879:3226   */\n      swap3\n      pop\n      swap3\n      swap1\n      pop\n      jump\t// out\n        /* \"#utility.yul\":3231:3358   */\n    tag_219:\n        /* \"#utility.yul\":3292:3302   */\n      0x4e487b71\n        /* \"#utility.yul\":3287:3290   */\n      0xe0\n        /* \"#utility.yul\":3283:3303   */\n      shl\n        /* \"#utility.yul\":3280:3281   */\n      0x00\n        /* \"#utility.yul\":3273:3304   */\n      mstore\n        /* \"#utility.yul\":3323:3327   */\n      0x41\n        /* \"#utility.yul\":3320:3321   */\n      0x04\n        /* \"#utility.yul\":3313:3328   */\n      mstore\n        /* \"#utility.yul\":3347:3351   */\n      0x24\n        /* \"#utility.yul\":3344:3345   */\n      0x00\n        /* \"#utility.yul\":3337:3352   */\n      revert\n        /* \"#utility.yul\":3363:4501   */\n    tag_69:\n        /* \"#utility.yul\":3458:3464   */\n      0x00\n        /* \"#utility.yul\":3466:3472   */\n      dup1\n        /* \"#utility.yul\":3474:3480   */\n      0x00\n        /* \"#utility.yul\":3482:3488   */\n      dup1\n        /* \"#utility.yul\":3535:3538   */\n      0x80\n        /* \"#utility.yul\":3523:3532   */\n      dup6\n        /* \"#utility.yul\":3514:3521   */\n      dup8\n        /* \"#utility.yul\":3510:3533   */\n      sub\n        /* \"#utility.yul\":3506:3539   */\n      slt\n        /* \"#utility.yul\":3503:3556   */\n      iszero\n      tag_279\n      jumpi\n        /* \"#utility.yul\":3552:3553   */\n      0x00\n        /* \"#utility.yul\":3549:3550   */\n      dup1\n        /* \"#utility.yul\":3542:3554   */\n      revert\n        /* \"#utility.yul\":3503:3556   */\n    tag_279:\n        /* \"#utility.yul\":3575:3604   */\n      tag_280\n        /* \"#utility.yul\":3594:3603   */\n      dup6\n        /* \"#utility.yul\":3575:3604   */\n      tag_238\n      jump\t// in\n    tag_280:\n        /* \"#utility.yul\":3565:3604   */\n      swap4\n      pop\n        /* \"#utility.yul\":3623:3661   */\n      tag_281\n        /* \"#utility.yul\":3657:3659   */\n      0x20\n        /* \"#utility.yul\":3646:3655   */\n      dup7\n        /* \"#utility.yul\":3642:3660   */\n      add\n        /* \"#utility.yul\":3623:3661   */\n      tag_238\n      jump\t// in\n    tag_281:\n        /* \"#utility.yul\":3613:3661   */\n      swap3\n      pop\n        /* \"#utility.yul\":3708:3710   */\n      0x40\n        /* \"#utility.yul\":3697:3706   */\n      dup6\n        /* \"#utility.yul\":3693:3711   */\n      add\n        /* \"#utility.yul\":3680:3712   */\n      calldataload\n        /* \"#utility.yul\":3670:3712   */\n      swap2\n      pop\n        /* \"#utility.yul\":3763:3765   */\n      0x60\n        /* \"#utility.yul\":3752:3761   */\n      dup6\n        /* \"#utility.yul\":3748:3766   */\n      add\n        /* \"#utility.yul\":3735:3767   */\n      calldataload\n        /* \"#utility.yul\":3786:3804   */\n      0xffffffffffffffff\n        /* \"#utility.yul\":3827:3829   */\n      dup1\n        /* \"#utility.yul\":3819:3825   */\n      dup3\n        /* \"#utility.yul\":3816:3830   */\n      gt\n        /* \"#utility.yul\":3813:3847   */\n      iszero\n      tag_282\n      jumpi\n        /* \"#utility.yul\":3843:3844   */\n      0x00\n        /* \"#utility.yul\":3840:3841   */\n      dup1\n        /* \"#utility.yul\":3833:3845   */\n      revert\n        /* \"#utility.yul\":3813:3847   */\n    tag_282:\n        /* \"#utility.yul\":3881:3887   */\n      dup2\n        /* \"#utility.yul\":3870:3879   */\n      dup8\n        /* \"#utility.yul\":3866:3888   */\n      add\n        /* \"#utility.yul\":3856:3888   */\n      swap2\n      pop\n        /* \"#utility.yul\":3926:3933   */\n      dup8\n        /* \"#utility.yul\":3919:3923   */\n      0x1f\n        /* \"#utility.yul\":3915:3917   */\n      dup4\n        /* \"#utility.yul\":3911:3924   */\n      add\n        /* \"#utility.yul\":3907:3934   */\n      slt\n        /* \"#utility.yul\":3897:3952   */\n      tag_283\n      jumpi\n        /* \"#utility.yul\":3948:3949   */\n      0x00\n        /* \"#utility.yul\":3945:3946   */\n      dup1\n        /* \"#utility.yul\":3938:3950   */\n      revert\n        /* \"#utility.yul\":3897:3952   */\n    tag_283:\n        /* \"#utility.yul\":3984:3986   */\n      dup2\n        /* \"#utility.yul\":3971:3987   */\n      calldataload\n        /* \"#utility.yul\":4006:4008   */\n      dup2\n        /* \"#utility.yul\":4002:4004   */\n      dup2\n        /* \"#utility.yul\":3999:4009   */\n      gt\n        /* \"#utility.yul\":3996:4032   */\n      iszero\n      tag_285\n      jumpi\n        /* \"#utility.yul\":4012:4030   */\n      tag_285\n      tag_219\n      jump\t// in\n    tag_285:\n        /* \"#utility.yul\":4087:4089   */\n      0x40\n        /* \"#utility.yul\":4081:4090   */\n      mload\n        /* \"#utility.yul\":4055:4057   */\n      0x1f\n        /* \"#utility.yul\":4141:4154   */\n      dup3\n      add\n      not(0x1f)\n        /* \"#utility.yul\":4137:4159   */\n      swap1\n      dup2\n      and\n        /* \"#utility.yul\":4161:4163   */\n      0x3f\n        /* \"#utility.yul\":4133:4164   */\n      add\n        /* \"#utility.yul\":4129:4169   */\n      and\n        /* \"#utility.yul\":4117:4170   */\n      dup2\n      add\n      swap1\n        /* \"#utility.yul\":4185:4203   */\n      dup4\n      dup3\n      gt\n        /* \"#utility.yul\":4205:4227   */\n      dup2\n      dup4\n      lt\n        /* \"#utility.yul\":4182:4228   */\n      or\n        /* \"#utility.yul\":4179:4251   */\n      iszero\n      tag_287\n      jumpi\n        /* \"#utility.yul\":4231:4249   */\n      tag_287\n      tag_219\n      jump\t// in\n    tag_287:\n        /* \"#utility.yul\":4271:4281   */\n      dup2\n        /* \"#utility.yul\":4267:4269   */\n      0x40\n        /* \"#utility.yul\":4260:4282   */\n      mstore\n        /* \"#utility.yul\":4306:4308   */\n      dup3\n        /* \"#utility.yul\":4298:4304   */\n      dup2\n        /* \"#utility.yul\":4291:4309   */\n      mstore\n        /* \"#utility.yul\":4346:4353   */\n      dup11\n        /* \"#utility.yul\":4341:4343   */\n      0x20\n        /* \"#utility.yul\":4336:4338   */\n      dup5\n        /* \"#utility.yul\":4332:4334   */\n      dup8\n        /* \"#utility.yul\":4328:4339   */\n      add\n        /* \"#utility.yul\":4324:4344   */\n      add\n        /* \"#utility.yul\":4321:4354   */\n      gt\n        /* \"#utility.yul\":4318:4371   */\n      iszero\n      tag_288\n      jumpi\n        /* \"#utility.yul\":4367:4368   */\n      0x00\n        /* \"#utility.yul\":4364:4365   */\n      dup1\n        /* \"#utility.yul\":4357:4369   */\n      revert\n        /* \"#utility.yul\":4318:4371   */\n    tag_288:\n        /* \"#utility.yul\":4423:4425   */\n      dup3\n        /* \"#utility.yul\":4418:4420   */\n      0x20\n        /* \"#utility.yul\":4414:4416   */\n      dup7\n        /* \"#utility.yul\":4410:4421   */\n      add\n        /* \"#utility.yul\":4405:4407   */\n      0x20\n        /* \"#utility.yul\":4397:4403   */\n      dup4\n        /* \"#utility.yul\":4393:4408   */\n      add\n        /* \"#utility.yul\":4380:4426   */\n      calldatacopy\n        /* \"#utility.yul\":4468:4469   */\n      0x00\n        /* \"#utility.yul\":4463:4465   */\n      0x20\n        /* \"#utility.yul\":4458:4460   */\n      dup5\n        /* \"#utility.yul\":4450:4456   */\n      dup4\n        /* \"#utility.yul\":4446:4461   */\n      add\n        /* \"#utility.yul\":4442:4466   */\n      add\n        /* \"#utility.yul\":4435:4470   */\n      mstore\n        /* \"#utility.yul\":4489:4495   */\n      dup1\n        /* \"#utility.yul\":4479:4495   */\n      swap6\n      pop\n      pop\n      pop\n      pop\n      pop\n      pop\n        /* \"#utility.yul\":3363:4501   */\n      swap3\n      swap6\n      swap2\n      swap5\n      pop\n      swap3\n      pop\n      jump\t// out\n        /* \"#utility.yul\":4506:4766   */\n    tag_77:\n        /* \"#utility.yul\":4574:4580   */\n      0x00\n        /* \"#utility.yul\":4582:4588   */\n      dup1\n        /* \"#utility.yul\":4635:4637   */\n      0x40\n        /* \"#utility.yul\":4623:4632   */\n      dup4\n        /* \"#utility.yul\":4614:4621   */\n      dup6\n        /* \"#utility.yul\":4610:4633   */\n      sub\n        /* \"#utility.yul\":4606:4638   */\n      slt\n        /* \"#utility.yul\":4603:4655   */\n      iszero\n      tag_290\n      jumpi\n        /* \"#utility.yul\":4651:4652   */\n      0x00\n        /* \"#utility.yul\":4648:4649   */\n      dup1\n        /* \"#utility.yul\":4641:4653   */\n      revert\n        /* \"#utility.yul\":4603:4655   */\n    tag_290:\n        /* \"#utility.yul\":4674:4703   */\n      tag_291\n        /* \"#utility.yul\":4693:4702   */\n      dup4\n        /* \"#utility.yul\":4674:4703   */\n      tag_238\n      jump\t// in\n    tag_291:\n        /* \"#utility.yul\":4664:4703   */\n      swap2\n      pop\n        /* \"#utility.yul\":4722:4760   */\n      tag_292\n        /* \"#utility.yul\":4756:4758   */\n      0x20\n        /* \"#utility.yul\":4745:4754   */\n      dup5\n        /* \"#utility.yul\":4741:4759   */\n      add\n        /* \"#utility.yul\":4722:4760   */\n      tag_238\n      jump\t// in\n    tag_292:\n        /* \"#utility.yul\":4712:4760   */\n      swap1\n      pop\n        /* \"#utility.yul\":4506:4766   */\n      swap3\n      pop\n      swap3\n      swap1\n      pop\n      jump\t// out\n        /* \"#utility.yul\":4771:5151   */\n    tag_87:\n        /* \"#utility.yul\":4850:4851   */\n      0x01\n        /* \"#utility.yul\":4846:4858   */\n      dup2\n      dup2\n      shr\n      swap1\n        /* \"#utility.yul\":4893:4905   */\n      dup3\n      and\n      dup1\n        /* \"#utility.yul\":4914:4975   */\n      tag_294\n      jumpi\n        /* \"#utility.yul\":4968:4972   */\n      0x7f\n        /* \"#utility.yul\":4960:4966   */\n      dup3\n        /* \"#utility.yul\":4956:4973   */\n      and\n        /* \"#utility.yul\":4946:4973   */\n      swap2\n      pop\n        /* \"#utility.yul\":4914:4975   */\n    tag_294:\n        /* \"#utility.yul\":5021:5023   */\n      0x20\n        /* \"#utility.yul\":5013:5019   */\n      dup3\n        /* \"#utility.yul\":5010:5024   */\n      lt\n        /* \"#utility.yul\":4990:5008   */\n      dup2\n        /* \"#utility.yul\":4987:5025   */\n      eq\n        /* \"#utility.yul\":4984:5145   */\n      iszero\n      tag_295\n      jumpi\n        /* \"#utility.yul\":5067:5077   */\n      0x4e487b71\n        /* \"#utility.yul\":5062:5065   */\n      0xe0\n        /* \"#utility.yul\":5058:5078   */\n      shl\n        /* \"#utility.yul\":5055:5056   */\n      0x00\n        /* \"#utility.yul\":5048:5079   */\n      mstore\n        /* \"#utility.yul\":5102:5106   */\n      0x22\n        /* \"#utility.yul\":5099:5100   */\n      0x04\n        /* \"#utility.yul\":5092:5107   */\n      mstore\n        /* \"#utility.yul\":5130:5134   */\n      0x24\n        /* \"#utility.yul\":5127:5128   */\n      0x00\n        /* \"#utility.yul\":5120:5135   */\n      revert\n        /* \"#utility.yul\":4984:5145   */\n    tag_295:\n      pop\n        /* \"#utility.yul\":4771:5151   */\n      swap2\n      swap1\n      pop\n      jump\t// out\n        /* \"#utility.yul\":5156:5626   */\n    tag_150:\n        /* \"#utility.yul\":5335:5338   */\n      0x00\n        /* \"#utility.yul\":5373:5379   */\n      dup4\n        /* \"#utility.yul\":5367:5380   */\n      mload\n        /* \"#utility.yul\":5389:5442   */\n      tag_297\n        /* \"#utility.yul\":5435:5441   */\n      dup2\n        /* \"#utility.yul\":5430:5433   */\n      dup5\n        /* \"#utility.yul\":5423:5427   */\n      0x20\n        /* \"#utility.yul\":5415:5421   */\n      dup9\n        /* \"#utility.yul\":5411:5428   */\n      add\n        /* \"#utility.yul\":5389:5442   */\n      tag_236\n      jump\t// in\n    tag_297:\n        /* \"#utility.yul\":5505:5518   */\n      dup4\n      mload\n        /* \"#utility.yul\":5464:5480   */\n      swap1\n      dup4\n      add\n      swap1\n        /* \"#utility.yul\":5527:5584   */\n      tag_298\n        /* \"#utility.yul\":5505:5518   */\n      dup2\n        /* \"#utility.yul\":5464:5480   */\n      dup4\n        /* \"#utility.yul\":5561:5565   */\n      0x20\n        /* \"#utility.yul\":5549:5566   */\n      dup9\n      add\n        /* \"#utility.yul\":5527:5584   */\n      tag_236\n      jump\t// in\n    tag_298:\n        /* \"#utility.yul\":5600:5620   */\n      add\n      swap5\n        /* \"#utility.yul\":5156:5626   */\n      swap4\n      pop\n      pop\n      pop\n      pop\n      jump\t// out\n        /* \"#utility.yul\":5631:6120   */\n    tag_194:\n      sub(shl(0xa0, 0x01), 0x01)\n        /* \"#utility.yul\":5900:5915   */\n      dup6\n      dup2\n      and\n        /* \"#utility.yul\":5882:5916   */\n      dup3\n      mstore\n        /* \"#utility.yul\":5952:5967   */\n      dup5\n      and\n        /* \"#utility.yul\":5947:5949   */\n      0x20\n        /* \"#utility.yul\":5932:5950   */\n      dup3\n      add\n        /* \"#utility.yul\":5925:5968   */\n      mstore\n        /* \"#utility.yul\":5999:6001   */\n      0x40\n        /* \"#utility.yul\":5984:6002   */\n      dup2\n      add\n        /* \"#utility.yul\":5977:6011   */\n      dup4\n      swap1\n      mstore\n        /* \"#utility.yul\":6047:6050   */\n      0x80\n        /* \"#utility.yul\":6042:6044   */\n      0x60\n        /* \"#utility.yul\":6027:6045   */\n      dup3\n      add\n        /* \"#utility.yul\":6020:6051   */\n      dup2\n      swap1\n      mstore\n        /* \"#utility.yul\":5825:5829   */\n      0x00\n      swap1\n        /* \"#utility.yul\":6068:6114   */\n      tag_300\n      swap1\n        /* \"#utility.yul\":6094:6113   */\n      dup4\n      add\n        /* \"#utility.yul\":6086:6092   */\n      dup5\n        /* \"#utility.yul\":6068:6114   */\n      tag_237\n      jump\t// in\n    tag_300:\n        /* \"#utility.yul\":6060:6114   */\n      swap7\n        /* \"#utility.yul\":5631:6120   */\n      swap6\n      pop\n      pop\n      pop\n      pop\n      pop\n      pop\n      jump\t// out\n        /* \"#utility.yul\":6125:6374   */\n    tag_198:\n        /* \"#utility.yul\":6194:6200   */\n      0x00\n        /* \"#utility.yul\":6247:6249   */\n      0x20\n        /* \"#utility.yul\":6235:6244   */\n      dup3\n        /* \"#utility.yul\":6226:6233   */\n      dup5\n        /* \"#utility.yul\":6222:6245   */\n      sub\n        /* \"#utility.yul\":6218:6250   */\n      slt\n        /* \"#utility.yul\":6215:6267   */\n      iszero\n      tag_302\n      jumpi\n        /* \"#utility.yul\":6263:6264   */\n      0x00\n        /* \"#utility.yul\":6260:6261   */\n      dup1\n        /* \"#utility.yul\":6253:6265   */\n      revert\n        /* \"#utility.yul\":6215:6267   */\n    tag_302:\n        /* \"#utility.yul\":6295:6304   */\n      dup2\n        /* \"#utility.yul\":6289:6305   */\n      mload\n        /* \"#utility.yul\":6314:6344   */\n      tag_146\n        /* \"#utility.yul\":6338:6343   */\n      dup2\n        /* \"#utility.yul\":6314:6344   */\n      tag_235\n      jump\t// in\n        /* \"#utility.yul\":6379:6506   */\n    tag_239:\n        /* \"#utility.yul\":6440:6450   */\n      0x4e487b71\n        /* \"#utility.yul\":6435:6438   */\n      0xe0\n        /* \"#utility.yul\":6431:6451   */\n      shl\n        /* \"#utility.yul\":6428:6429   */\n      0x00\n        /* \"#utility.yul\":6421:6452   */\n      mstore\n        /* \"#utility.yul\":6471:6475   */\n      0x11\n        /* \"#utility.yul\":6468:6469   */\n      0x04\n        /* \"#utility.yul\":6461:6476   */\n      mstore\n        /* \"#utility.yul\":6495:6499   */\n      0x24\n        /* \"#utility.yul\":6492:6493   */\n      0x00\n        /* \"#utility.yul\":6485:6500   */\n      revert\n        /* \"#utility.yul\":6511:6646   */\n    tag_214:\n        /* \"#utility.yul\":6550:6553   */\n      0x00\n      not(0x00)\n        /* \"#utility.yul\":6571:6588   */\n      dup3\n      eq\n        /* \"#utility.yul\":6568:6611   */\n      iszero\n      tag_307\n      jumpi\n        /* \"#utility.yul\":6591:6609   */\n      tag_307\n      tag_239\n      jump\t// in\n    tag_307:\n      pop\n        /* \"#utility.yul\":6638:6639   */\n      0x01\n        /* \"#utility.yul\":6627:6640   */\n      add\n      swap1\n        /* \"#utility.yul\":6511:6646   */\n      jump\t// out\n        /* \"#utility.yul\":6651:6778   */\n    tag_240:\n        /* \"#utility.yul\":6712:6722   */\n      0x4e487b71\n        /* \"#utility.yul\":6707:6710   */\n      0xe0\n        /* \"#utility.yul\":6703:6723   */\n      shl\n        /* \"#utility.yul\":6700:6701   */\n      0x00\n        /* \"#utility.yul\":6693:6724   */\n      mstore\n        /* \"#utility.yul\":6743:6747   */\n      0x12\n        /* \"#utility.yul\":6740:6741   */\n      0x04\n        /* \"#utility.yul\":6733:6748   */\n      mstore\n        /* \"#utility.yul\":6767:6771   */\n      0x24\n        /* \"#utility.yul\":6764:6765   */\n      0x00\n        /* \"#utility.yul\":6757:6772   */\n      revert\n        /* \"#utility.yul\":6783:6903   */\n    tag_216:\n        /* \"#utility.yul\":6823:6824   */\n      0x00\n        /* \"#utility.yul\":6849:6850   */\n      dup3\n        /* \"#utility.yul\":6839:6874   */\n      tag_311\n      jumpi\n        /* \"#utility.yul\":6854:6872   */\n      tag_311\n      tag_240\n      jump\t// in\n    tag_311:\n      pop\n        /* \"#utility.yul\":6888:6897   */\n      div\n      swap1\n        /* \"#utility.yul\":6783:6903   */\n      jump\t// out\n        /* \"#utility.yul\":6908:7033   */\n    tag_224:\n        /* \"#utility.yul\":6948:6952   */\n      0x00\n        /* \"#utility.yul\":6976:6977   */\n      dup3\n        /* \"#utility.yul\":6973:6974   */\n      dup3\n        /* \"#utility.yul\":6970:6978   */\n      lt\n        /* \"#utility.yul\":6967:7001   */\n      iszero\n      tag_314\n      jumpi\n        /* \"#utility.yul\":6981:6999   */\n      tag_314\n      tag_239\n      jump\t// in\n    tag_314:\n      pop\n        /* \"#utility.yul\":7018:7027   */\n      sub\n      swap1\n        /* \"#utility.yul\":6908:7033   */\n      jump\t// out\n        /* \"#utility.yul\":7038:7150   */\n    tag_226:\n        /* \"#utility.yul\":7070:7071   */\n      0x00\n        /* \"#utility.yul\":7096:7097   */\n      dup3\n        /* \"#utility.yul\":7086:7121   */\n      tag_317\n      jumpi\n        /* \"#utility.yul\":7101:7119   */\n      tag_317\n      tag_240\n      jump\t// in\n    tag_317:\n      pop\n        /* \"#utility.yul\":7135:7144   */\n      mod\n      swap1\n        /* \"#utility.yul\":7038:7150   */\n      jump\t// out\n        /* \"#utility.yul\":7155:7283   */\n    tag_228:\n        /* \"#utility.yul\":7195:7198   */\n      0x00\n        /* \"#utility.yul\":7226:7227   */\n      dup3\n        /* \"#utility.yul\":7222:7228   */\n      not\n        /* \"#utility.yul\":7219:7220   */\n      dup3\n        /* \"#utility.yul\":7216:7229   */\n      gt\n        /* \"#utility.yul\":7213:7252   */\n      iszero\n      tag_320\n      jumpi\n        /* \"#utility.yul\":7232:7250   */\n      tag_320\n      tag_239\n      jump\t// in\n    tag_320:\n      pop\n        /* \"#utility.yul\":7268:7277   */\n      add\n      swap1\n        /* \"#utility.yul\":7155:7283   */\n      jump\t// out\n        /* \"#utility.yul\":7288:7415   */\n    tag_231:\n        /* \"#utility.yul\":7349:7359   */\n      0x4e487b71\n        /* \"#utility.yul\":7344:7347   */\n      0xe0\n        /* \"#utility.yul\":7340:7360   */\n      shl\n        /* \"#utility.yul\":7337:7338   */\n      0x00\n        /* \"#utility.yul\":7330:7361   */\n      mstore\n        /* \"#utility.yul\":7380:7384   */\n      0x32\n        /* \"#utility.yul\":7377:7378   */\n      0x04\n        /* \"#utility.yul\":7370:7385   */\n      mstore\n        /* \"#utility.yul\":7404:7408   */\n      0x24\n        /* \"#utility.yul\":7401:7402   */\n      0x00\n        /* \"#utility.yul\":7394:7409   */\n      revert\n\n    auxdata: 0xa2646970667358221220340639a51a4acb793db0b70a664b822ec286f6d1f20a48ffbc513a8664f4a81e64736f6c63430008090033\n}\n",
						"bytecode": {
							"functionDebugData": {
								"@_1540": {
									"entryPoint": null,
									"id": 1540,
									"parameterSlots": 2,
									"returnSlots": 0
								},
								"@_startTokenId_1549": {
									"entryPoint": null,
									"id": 1549,
									"parameterSlots": 0,
									"returnSlots": 1
								},
								"abi_decode_string_fromMemory": {
									"entryPoint": 296,
									"id": null,
									"parameterSlots": 2,
									"returnSlots": 1
								},
								"abi_decode_tuple_t_string_memory_ptrt_string_memory_ptr_fromMemory": {
									"entryPoint": 479,
									"id": null,
									"parameterSlots": 2,
									"returnSlots": 2
								},
								"extract_byte_array_length": {
									"entryPoint": 585,
									"id": null,
									"parameterSlots": 1,
									"returnSlots": 1
								},
								"panic_error_0x41": {
									"entryPoint": 274,
									"id": null,
									"parameterSlots": 0,
									"returnSlots": 0
								}
							},
							"generatedSources": [
								{
									"ast": {
										"nodeType": "YulBlock",
										"src": "0:1985:13",
										"statements": [
											{
												"nodeType": "YulBlock",
												"src": "6:3:13",
												"statements": []
											},
											{
												"body": {
													"nodeType": "YulBlock",
													"src": "46:95:13",
													"statements": [
														{
															"expression": {
																"arguments": [
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "63:1:13",
																		"type": "",
																		"value": "0"
																	},
																	{
																		"arguments": [
																			{
																				"kind": "number",
																				"nodeType": "YulLiteral",
																				"src": "70:3:13",
																				"type": "",
																				"value": "224"
																			},
																			{
																				"kind": "number",
																				"nodeType": "YulLiteral",
																				"src": "75:10:13",
																				"type": "",
																				"value": "0x4e487b71"
																			}
																		],
																		"functionName": {
																			"name": "shl",
																			"nodeType": "YulIdentifier",
																			"src": "66:3:13"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "66:20:13"
																	}
																],
																"functionName": {
																	"name": "mstore",
																	"nodeType": "YulIdentifier",
																	"src": "56:6:13"
																},
																"nodeType": "YulFunctionCall",
																"src": "56:31:13"
															},
															"nodeType": "YulExpressionStatement",
															"src": "56:31:13"
														},
														{
															"expression": {
																"arguments": [
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "103:1:13",
																		"type": "",
																		"value": "4"
																	},
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "106:4:13",
																		"type": "",
																		"value": "0x41"
																	}
																],
																"functionName": {
																	"name": "mstore",
																	"nodeType": "YulIdentifier",
																	"src": "96:6:13"
																},
																"nodeType": "YulFunctionCall",
																"src": "96:15:13"
															},
															"nodeType": "YulExpressionStatement",
															"src": "96:15:13"
														},
														{
															"expression": {
																"arguments": [
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "127:1:13",
																		"type": "",
																		"value": "0"
																	},
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "130:4:13",
																		"type": "",
																		"value": "0x24"
																	}
																],
																"functionName": {
																	"name": "revert",
																	"nodeType": "YulIdentifier",
																	"src": "120:6:13"
																},
																"nodeType": "YulFunctionCall",
																"src": "120:15:13"
															},
															"nodeType": "YulExpressionStatement",
															"src": "120:15:13"
														}
													]
												},
												"name": "panic_error_0x41",
												"nodeType": "YulFunctionDefinition",
												"src": "14:127:13"
											},
											{
												"body": {
													"nodeType": "YulBlock",
													"src": "210:821:13",
													"statements": [
														{
															"body": {
																"nodeType": "YulBlock",
																"src": "259:16:13",
																"statements": [
																	{
																		"expression": {
																			"arguments": [
																				{
																					"kind": "number",
																					"nodeType": "YulLiteral",
																					"src": "268:1:13",
																					"type": "",
																					"value": "0"
																				},
																				{
																					"kind": "number",
																					"nodeType": "YulLiteral",
																					"src": "271:1:13",
																					"type": "",
																					"value": "0"
																				}
																			],
																			"functionName": {
																				"name": "revert",
																				"nodeType": "YulIdentifier",
																				"src": "261:6:13"
																			},
																			"nodeType": "YulFunctionCall",
																			"src": "261:12:13"
																		},
																		"nodeType": "YulExpressionStatement",
																		"src": "261:12:13"
																	}
																]
															},
															"condition": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"arguments": [
																					{
																						"name": "offset",
																						"nodeType": "YulIdentifier",
																						"src": "238:6:13"
																					},
																					{
																						"kind": "number",
																						"nodeType": "YulLiteral",
																						"src": "246:4:13",
																						"type": "",
																						"value": "0x1f"
																					}
																				],
																				"functionName": {
																					"name": "add",
																					"nodeType": "YulIdentifier",
																					"src": "234:3:13"
																				},
																				"nodeType": "YulFunctionCall",
																				"src": "234:17:13"
																			},
																			{
																				"name": "end",
																				"nodeType": "YulIdentifier",
																				"src": "253:3:13"
																			}
																		],
																		"functionName": {
																			"name": "slt",
																			"nodeType": "YulIdentifier",
																			"src": "230:3:13"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "230:27:13"
																	}
																],
																"functionName": {
																	"name": "iszero",
																	"nodeType": "YulIdentifier",
																	"src": "223:6:13"
																},
																"nodeType": "YulFunctionCall",
																"src": "223:35:13"
															},
															"nodeType": "YulIf",
															"src": "220:55:13"
														},
														{
															"nodeType": "YulVariableDeclaration",
															"src": "284:23:13",
															"value": {
																"arguments": [
																	{
																		"name": "offset",
																		"nodeType": "YulIdentifier",
																		"src": "300:6:13"
																	}
																],
																"functionName": {
																	"name": "mload",
																	"nodeType": "YulIdentifier",
																	"src": "294:5:13"
																},
																"nodeType": "YulFunctionCall",
																"src": "294:13:13"
															},
															"variables": [
																{
																	"name": "_1",
																	"nodeType": "YulTypedName",
																	"src": "288:2:13",
																	"type": ""
																}
															]
														},
														{
															"nodeType": "YulVariableDeclaration",
															"src": "316:28:13",
															"value": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"kind": "number",
																				"nodeType": "YulLiteral",
																				"src": "334:2:13",
																				"type": "",
																				"value": "64"
																			},
																			{
																				"kind": "number",
																				"nodeType": "YulLiteral",
																				"src": "338:1:13",
																				"type": "",
																				"value": "1"
																			}
																		],
																		"functionName": {
																			"name": "shl",
																			"nodeType": "YulIdentifier",
																			"src": "330:3:13"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "330:10:13"
																	},
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "342:1:13",
																		"type": "",
																		"value": "1"
																	}
																],
																"functionName": {
																	"name": "sub",
																	"nodeType": "YulIdentifier",
																	"src": "326:3:13"
																},
																"nodeType": "YulFunctionCall",
																"src": "326:18:13"
															},
															"variables": [
																{
																	"name": "_2",
																	"nodeType": "YulTypedName",
																	"src": "320:2:13",
																	"type": ""
																}
															]
														},
														{
															"body": {
																"nodeType": "YulBlock",
																"src": "367:22:13",
																"statements": [
																	{
																		"expression": {
																			"arguments": [],
																			"functionName": {
																				"name": "panic_error_0x41",
																				"nodeType": "YulIdentifier",
																				"src": "369:16:13"
																			},
																			"nodeType": "YulFunctionCall",
																			"src": "369:18:13"
																		},
																		"nodeType": "YulExpressionStatement",
																		"src": "369:18:13"
																	}
																]
															},
															"condition": {
																"arguments": [
																	{
																		"name": "_1",
																		"nodeType": "YulIdentifier",
																		"src": "359:2:13"
																	},
																	{
																		"name": "_2",
																		"nodeType": "YulIdentifier",
																		"src": "363:2:13"
																	}
																],
																"functionName": {
																	"name": "gt",
																	"nodeType": "YulIdentifier",
																	"src": "356:2:13"
																},
																"nodeType": "YulFunctionCall",
																"src": "356:10:13"
															},
															"nodeType": "YulIf",
															"src": "353:36:13"
														},
														{
															"nodeType": "YulVariableDeclaration",
															"src": "398:17:13",
															"value": {
																"arguments": [
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "412:2:13",
																		"type": "",
																		"value": "31"
																	}
																],
																"functionName": {
																	"name": "not",
																	"nodeType": "YulIdentifier",
																	"src": "408:3:13"
																},
																"nodeType": "YulFunctionCall",
																"src": "408:7:13"
															},
															"variables": [
																{
																	"name": "_3",
																	"nodeType": "YulTypedName",
																	"src": "402:2:13",
																	"type": ""
																}
															]
														},
														{
															"nodeType": "YulVariableDeclaration",
															"src": "424:23:13",
															"value": {
																"arguments": [
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "444:2:13",
																		"type": "",
																		"value": "64"
																	}
																],
																"functionName": {
																	"name": "mload",
																	"nodeType": "YulIdentifier",
																	"src": "438:5:13"
																},
																"nodeType": "YulFunctionCall",
																"src": "438:9:13"
															},
															"variables": [
																{
																	"name": "memPtr",
																	"nodeType": "YulTypedName",
																	"src": "428:6:13",
																	"type": ""
																}
															]
														},
														{
															"nodeType": "YulVariableDeclaration",
															"src": "456:71:13",
															"value": {
																"arguments": [
																	{
																		"name": "memPtr",
																		"nodeType": "YulIdentifier",
																		"src": "478:6:13"
																	},
																	{
																		"arguments": [
																			{
																				"arguments": [
																					{
																						"arguments": [
																							{
																								"arguments": [
																									{
																										"name": "_1",
																										"nodeType": "YulIdentifier",
																										"src": "502:2:13"
																									},
																									{
																										"kind": "number",
																										"nodeType": "YulLiteral",
																										"src": "506:4:13",
																										"type": "",
																										"value": "0x1f"
																									}
																								],
																								"functionName": {
																									"name": "add",
																									"nodeType": "YulIdentifier",
																									"src": "498:3:13"
																								},
																								"nodeType": "YulFunctionCall",
																								"src": "498:13:13"
																							},
																							{
																								"name": "_3",
																								"nodeType": "YulIdentifier",
																								"src": "513:2:13"
																							}
																						],
																						"functionName": {
																							"name": "and",
																							"nodeType": "YulIdentifier",
																							"src": "494:3:13"
																						},
																						"nodeType": "YulFunctionCall",
																						"src": "494:22:13"
																					},
																					{
																						"kind": "number",
																						"nodeType": "YulLiteral",
																						"src": "518:2:13",
																						"type": "",
																						"value": "63"
																					}
																				],
																				"functionName": {
																					"name": "add",
																					"nodeType": "YulIdentifier",
																					"src": "490:3:13"
																				},
																				"nodeType": "YulFunctionCall",
																				"src": "490:31:13"
																			},
																			{
																				"name": "_3",
																				"nodeType": "YulIdentifier",
																				"src": "523:2:13"
																			}
																		],
																		"functionName": {
																			"name": "and",
																			"nodeType": "YulIdentifier",
																			"src": "486:3:13"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "486:40:13"
																	}
																],
																"functionName": {
																	"name": "add",
																	"nodeType": "YulIdentifier",
																	"src": "474:3:13"
																},
																"nodeType": "YulFunctionCall",
																"src": "474:53:13"
															},
															"variables": [
																{
																	"name": "newFreePtr",
																	"nodeType": "YulTypedName",
																	"src": "460:10:13",
																	"type": ""
																}
															]
														},
														{
															"body": {
																"nodeType": "YulBlock",
																"src": "586:22:13",
																"statements": [
																	{
																		"expression": {
																			"arguments": [],
																			"functionName": {
																				"name": "panic_error_0x41",
																				"nodeType": "YulIdentifier",
																				"src": "588:16:13"
																			},
																			"nodeType": "YulFunctionCall",
																			"src": "588:18:13"
																		},
																		"nodeType": "YulExpressionStatement",
																		"src": "588:18:13"
																	}
																]
															},
															"condition": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"name": "newFreePtr",
																				"nodeType": "YulIdentifier",
																				"src": "545:10:13"
																			},
																			{
																				"name": "_2",
																				"nodeType": "YulIdentifier",
																				"src": "557:2:13"
																			}
																		],
																		"functionName": {
																			"name": "gt",
																			"nodeType": "YulIdentifier",
																			"src": "542:2:13"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "542:18:13"
																	},
																	{
																		"arguments": [
																			{
																				"name": "newFreePtr",
																				"nodeType": "YulIdentifier",
																				"src": "565:10:13"
																			},
																			{
																				"name": "memPtr",
																				"nodeType": "YulIdentifier",
																				"src": "577:6:13"
																			}
																		],
																		"functionName": {
																			"name": "lt",
																			"nodeType": "YulIdentifier",
																			"src": "562:2:13"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "562:22:13"
																	}
																],
																"functionName": {
																	"name": "or",
																	"nodeType": "YulIdentifier",
																	"src": "539:2:13"
																},
																"nodeType": "YulFunctionCall",
																"src": "539:46:13"
															},
															"nodeType": "YulIf",
															"src": "536:72:13"
														},
														{
															"expression": {
																"arguments": [
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "624:2:13",
																		"type": "",
																		"value": "64"
																	},
																	{
																		"name": "newFreePtr",
																		"nodeType": "YulIdentifier",
																		"src": "628:10:13"
																	}
																],
																"functionName": {
																	"name": "mstore",
																	"nodeType": "YulIdentifier",
																	"src": "617:6:13"
																},
																"nodeType": "YulFunctionCall",
																"src": "617:22:13"
															},
															"nodeType": "YulExpressionStatement",
															"src": "617:22:13"
														},
														{
															"expression": {
																"arguments": [
																	{
																		"name": "memPtr",
																		"nodeType": "YulIdentifier",
																		"src": "655:6:13"
																	},
																	{
																		"name": "_1",
																		"nodeType": "YulIdentifier",
																		"src": "663:2:13"
																	}
																],
																"functionName": {
																	"name": "mstore",
																	"nodeType": "YulIdentifier",
																	"src": "648:6:13"
																},
																"nodeType": "YulFunctionCall",
																"src": "648:18:13"
															},
															"nodeType": "YulExpressionStatement",
															"src": "648:18:13"
														},
														{
															"nodeType": "YulVariableDeclaration",
															"src": "675:14:13",
															"value": {
																"kind": "number",
																"nodeType": "YulLiteral",
																"src": "685:4:13",
																"type": "",
																"value": "0x20"
															},
															"variables": [
																{
																	"name": "_4",
																	"nodeType": "YulTypedName",
																	"src": "679:2:13",
																	"type": ""
																}
															]
														},
														{
															"body": {
																"nodeType": "YulBlock",
																"src": "735:16:13",
																"statements": [
																	{
																		"expression": {
																			"arguments": [
																				{
																					"kind": "number",
																					"nodeType": "YulLiteral",
																					"src": "744:1:13",
																					"type": "",
																					"value": "0"
																				},
																				{
																					"kind": "number",
																					"nodeType": "YulLiteral",
																					"src": "747:1:13",
																					"type": "",
																					"value": "0"
																				}
																			],
																			"functionName": {
																				"name": "revert",
																				"nodeType": "YulIdentifier",
																				"src": "737:6:13"
																			},
																			"nodeType": "YulFunctionCall",
																			"src": "737:12:13"
																		},
																		"nodeType": "YulExpressionStatement",
																		"src": "737:12:13"
																	}
																]
															},
															"condition": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"arguments": [
																					{
																						"name": "offset",
																						"nodeType": "YulIdentifier",
																						"src": "712:6:13"
																					},
																					{
																						"name": "_1",
																						"nodeType": "YulIdentifier",
																						"src": "720:2:13"
																					}
																				],
																				"functionName": {
																					"name": "add",
																					"nodeType": "YulIdentifier",
																					"src": "708:3:13"
																				},
																				"nodeType": "YulFunctionCall",
																				"src": "708:15:13"
																			},
																			{
																				"name": "_4",
																				"nodeType": "YulIdentifier",
																				"src": "725:2:13"
																			}
																		],
																		"functionName": {
																			"name": "add",
																			"nodeType": "YulIdentifier",
																			"src": "704:3:13"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "704:24:13"
																	},
																	{
																		"name": "end",
																		"nodeType": "YulIdentifier",
																		"src": "730:3:13"
																	}
																],
																"functionName": {
																	"name": "gt",
																	"nodeType": "YulIdentifier",
																	"src": "701:2:13"
																},
																"nodeType": "YulFunctionCall",
																"src": "701:33:13"
															},
															"nodeType": "YulIf",
															"src": "698:53:13"
														},
														{
															"nodeType": "YulVariableDeclaration",
															"src": "760:10:13",
															"value": {
																"kind": "number",
																"nodeType": "YulLiteral",
																"src": "769:1:13",
																"type": "",
																"value": "0"
															},
															"variables": [
																{
																	"name": "i",
																	"nodeType": "YulTypedName",
																	"src": "764:1:13",
																	"type": ""
																}
															]
														},
														{
															"body": {
																"nodeType": "YulBlock",
																"src": "825:87:13",
																"statements": [
																	{
																		"expression": {
																			"arguments": [
																				{
																					"arguments": [
																						{
																							"arguments": [
																								{
																									"name": "memPtr",
																									"nodeType": "YulIdentifier",
																									"src": "854:6:13"
																								},
																								{
																									"name": "i",
																									"nodeType": "YulIdentifier",
																									"src": "862:1:13"
																								}
																							],
																							"functionName": {
																								"name": "add",
																								"nodeType": "YulIdentifier",
																								"src": "850:3:13"
																							},
																							"nodeType": "YulFunctionCall",
																							"src": "850:14:13"
																						},
																						{
																							"name": "_4",
																							"nodeType": "YulIdentifier",
																							"src": "866:2:13"
																						}
																					],
																					"functionName": {
																						"name": "add",
																						"nodeType": "YulIdentifier",
																						"src": "846:3:13"
																					},
																					"nodeType": "YulFunctionCall",
																					"src": "846:23:13"
																				},
																				{
																					"arguments": [
																						{
																							"arguments": [
																								{
																									"arguments": [
																										{
																											"name": "offset",
																											"nodeType": "YulIdentifier",
																											"src": "885:6:13"
																										},
																										{
																											"name": "i",
																											"nodeType": "YulIdentifier",
																											"src": "893:1:13"
																										}
																									],
																									"functionName": {
																										"name": "add",
																										"nodeType": "YulIdentifier",
																										"src": "881:3:13"
																									},
																									"nodeType": "YulFunctionCall",
																									"src": "881:14:13"
																								},
																								{
																									"name": "_4",
																									"nodeType": "YulIdentifier",
																									"src": "897:2:13"
																								}
																							],
																							"functionName": {
																								"name": "add",
																								"nodeType": "YulIdentifier",
																								"src": "877:3:13"
																							},
																							"nodeType": "YulFunctionCall",
																							"src": "877:23:13"
																						}
																					],
																					"functionName": {
																						"name": "mload",
																						"nodeType": "YulIdentifier",
																						"src": "871:5:13"
																					},
																					"nodeType": "YulFunctionCall",
																					"src": "871:30:13"
																				}
																			],
																			"functionName": {
																				"name": "mstore",
																				"nodeType": "YulIdentifier",
																				"src": "839:6:13"
																			},
																			"nodeType": "YulFunctionCall",
																			"src": "839:63:13"
																		},
																		"nodeType": "YulExpressionStatement",
																		"src": "839:63:13"
																	}
																]
															},
															"condition": {
																"arguments": [
																	{
																		"name": "i",
																		"nodeType": "YulIdentifier",
																		"src": "790:1:13"
																	},
																	{
																		"name": "_1",
																		"nodeType": "YulIdentifier",
																		"src": "793:2:13"
																	}
																],
																"functionName": {
																	"name": "lt",
																	"nodeType": "YulIdentifier",
																	"src": "787:2:13"
																},
																"nodeType": "YulFunctionCall",
																"src": "787:9:13"
															},
															"nodeType": "YulForLoop",
															"post": {
																"nodeType": "YulBlock",
																"src": "797:19:13",
																"statements": [
																	{
																		"nodeType": "YulAssignment",
																		"src": "799:15:13",
																		"value": {
																			"arguments": [
																				{
																					"name": "i",
																					"nodeType": "YulIdentifier",
																					"src": "808:1:13"
																				},
																				{
																					"name": "_4",
																					"nodeType": "YulIdentifier",
																					"src": "811:2:13"
																				}
																			],
																			"functionName": {
																				"name": "add",
																				"nodeType": "YulIdentifier",
																				"src": "804:3:13"
																			},
																			"nodeType": "YulFunctionCall",
																			"src": "804:10:13"
																		},
																		"variableNames": [
																			{
																				"name": "i",
																				"nodeType": "YulIdentifier",
																				"src": "799:1:13"
																			}
																		]
																	}
																]
															},
															"pre": {
																"nodeType": "YulBlock",
																"src": "783:3:13",
																"statements": []
															},
															"src": "779:133:13"
														},
														{
															"body": {
																"nodeType": "YulBlock",
																"src": "942:59:13",
																"statements": [
																	{
																		"expression": {
																			"arguments": [
																				{
																					"arguments": [
																						{
																							"arguments": [
																								{
																									"name": "memPtr",
																									"nodeType": "YulIdentifier",
																									"src": "971:6:13"
																								},
																								{
																									"name": "_1",
																									"nodeType": "YulIdentifier",
																									"src": "979:2:13"
																								}
																							],
																							"functionName": {
																								"name": "add",
																								"nodeType": "YulIdentifier",
																								"src": "967:3:13"
																							},
																							"nodeType": "YulFunctionCall",
																							"src": "967:15:13"
																						},
																						{
																							"name": "_4",
																							"nodeType": "YulIdentifier",
																							"src": "984:2:13"
																						}
																					],
																					"functionName": {
																						"name": "add",
																						"nodeType": "YulIdentifier",
																						"src": "963:3:13"
																					},
																					"nodeType": "YulFunctionCall",
																					"src": "963:24:13"
																				},
																				{
																					"kind": "number",
																					"nodeType": "YulLiteral",
																					"src": "989:1:13",
																					"type": "",
																					"value": "0"
																				}
																			],
																			"functionName": {
																				"name": "mstore",
																				"nodeType": "YulIdentifier",
																				"src": "956:6:13"
																			},
																			"nodeType": "YulFunctionCall",
																			"src": "956:35:13"
																		},
																		"nodeType": "YulExpressionStatement",
																		"src": "956:35:13"
																	}
																]
															},
															"condition": {
																"arguments": [
																	{
																		"name": "i",
																		"nodeType": "YulIdentifier",
																		"src": "927:1:13"
																	},
																	{
																		"name": "_1",
																		"nodeType": "YulIdentifier",
																		"src": "930:2:13"
																	}
																],
																"functionName": {
																	"name": "gt",
																	"nodeType": "YulIdentifier",
																	"src": "924:2:13"
																},
																"nodeType": "YulFunctionCall",
																"src": "924:9:13"
															},
															"nodeType": "YulIf",
															"src": "921:80:13"
														},
														{
															"nodeType": "YulAssignment",
															"src": "1010:15:13",
															"value": {
																"name": "memPtr",
																"nodeType": "YulIdentifier",
																"src": "1019:6:13"
															},
															"variableNames": [
																{
																	"name": "array",
																	"nodeType": "YulIdentifier",
																	"src": "1010:5:13"
																}
															]
														}
													]
												},
												"name": "abi_decode_string_fromMemory",
												"nodeType": "YulFunctionDefinition",
												"parameters": [
													{
														"name": "offset",
														"nodeType": "YulTypedName",
														"src": "184:6:13",
														"type": ""
													},
													{
														"name": "end",
														"nodeType": "YulTypedName",
														"src": "192:3:13",
														"type": ""
													}
												],
												"returnVariables": [
													{
														"name": "array",
														"nodeType": "YulTypedName",
														"src": "200:5:13",
														"type": ""
													}
												],
												"src": "146:885:13"
											},
											{
												"body": {
													"nodeType": "YulBlock",
													"src": "1154:444:13",
													"statements": [
														{
															"body": {
																"nodeType": "YulBlock",
																"src": "1200:16:13",
																"statements": [
																	{
																		"expression": {
																			"arguments": [
																				{
																					"kind": "number",
																					"nodeType": "YulLiteral",
																					"src": "1209:1:13",
																					"type": "",
																					"value": "0"
																				},
																				{
																					"kind": "number",
																					"nodeType": "YulLiteral",
																					"src": "1212:1:13",
																					"type": "",
																					"value": "0"
																				}
																			],
																			"functionName": {
																				"name": "revert",
																				"nodeType": "YulIdentifier",
																				"src": "1202:6:13"
																			},
																			"nodeType": "YulFunctionCall",
																			"src": "1202:12:13"
																		},
																		"nodeType": "YulExpressionStatement",
																		"src": "1202:12:13"
																	}
																]
															},
															"condition": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"name": "dataEnd",
																				"nodeType": "YulIdentifier",
																				"src": "1175:7:13"
																			},
																			{
																				"name": "headStart",
																				"nodeType": "YulIdentifier",
																				"src": "1184:9:13"
																			}
																		],
																		"functionName": {
																			"name": "sub",
																			"nodeType": "YulIdentifier",
																			"src": "1171:3:13"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "1171:23:13"
																	},
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "1196:2:13",
																		"type": "",
																		"value": "64"
																	}
																],
																"functionName": {
																	"name": "slt",
																	"nodeType": "YulIdentifier",
																	"src": "1167:3:13"
																},
																"nodeType": "YulFunctionCall",
																"src": "1167:32:13"
															},
															"nodeType": "YulIf",
															"src": "1164:52:13"
														},
														{
															"nodeType": "YulVariableDeclaration",
															"src": "1225:30:13",
															"value": {
																"arguments": [
																	{
																		"name": "headStart",
																		"nodeType": "YulIdentifier",
																		"src": "1245:9:13"
																	}
																],
																"functionName": {
																	"name": "mload",
																	"nodeType": "YulIdentifier",
																	"src": "1239:5:13"
																},
																"nodeType": "YulFunctionCall",
																"src": "1239:16:13"
															},
															"variables": [
																{
																	"name": "offset",
																	"nodeType": "YulTypedName",
																	"src": "1229:6:13",
																	"type": ""
																}
															]
														},
														{
															"nodeType": "YulVariableDeclaration",
															"src": "1264:28:13",
															"value": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"kind": "number",
																				"nodeType": "YulLiteral",
																				"src": "1282:2:13",
																				"type": "",
																				"value": "64"
																			},
																			{
																				"kind": "number",
																				"nodeType": "YulLiteral",
																				"src": "1286:1:13",
																				"type": "",
																				"value": "1"
																			}
																		],
																		"functionName": {
																			"name": "shl",
																			"nodeType": "YulIdentifier",
																			"src": "1278:3:13"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "1278:10:13"
																	},
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "1290:1:13",
																		"type": "",
																		"value": "1"
																	}
																],
																"functionName": {
																	"name": "sub",
																	"nodeType": "YulIdentifier",
																	"src": "1274:3:13"
																},
																"nodeType": "YulFunctionCall",
																"src": "1274:18:13"
															},
															"variables": [
																{
																	"name": "_1",
																	"nodeType": "YulTypedName",
																	"src": "1268:2:13",
																	"type": ""
																}
															]
														},
														{
															"body": {
																"nodeType": "YulBlock",
																"src": "1319:16:13",
																"statements": [
																	{
																		"expression": {
																			"arguments": [
																				{
																					"kind": "number",
																					"nodeType": "YulLiteral",
																					"src": "1328:1:13",
																					"type": "",
																					"value": "0"
																				},
																				{
																					"kind": "number",
																					"nodeType": "YulLiteral",
																					"src": "1331:1:13",
																					"type": "",
																					"value": "0"
																				}
																			],
																			"functionName": {
																				"name": "revert",
																				"nodeType": "YulIdentifier",
																				"src": "1321:6:13"
																			},
																			"nodeType": "YulFunctionCall",
																			"src": "1321:12:13"
																		},
																		"nodeType": "YulExpressionStatement",
																		"src": "1321:12:13"
																	}
																]
															},
															"condition": {
																"arguments": [
																	{
																		"name": "offset",
																		"nodeType": "YulIdentifier",
																		"src": "1307:6:13"
																	},
																	{
																		"name": "_1",
																		"nodeType": "YulIdentifier",
																		"src": "1315:2:13"
																	}
																],
																"functionName": {
																	"name": "gt",
																	"nodeType": "YulIdentifier",
																	"src": "1304:2:13"
																},
																"nodeType": "YulFunctionCall",
																"src": "1304:14:13"
															},
															"nodeType": "YulIf",
															"src": "1301:34:13"
														},
														{
															"nodeType": "YulAssignment",
															"src": "1344:71:13",
															"value": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"name": "headStart",
																				"nodeType": "YulIdentifier",
																				"src": "1387:9:13"
																			},
																			{
																				"name": "offset",
																				"nodeType": "YulIdentifier",
																				"src": "1398:6:13"
																			}
																		],
																		"functionName": {
																			"name": "add",
																			"nodeType": "YulIdentifier",
																			"src": "1383:3:13"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "1383:22:13"
																	},
																	{
																		"name": "dataEnd",
																		"nodeType": "YulIdentifier",
																		"src": "1407:7:13"
																	}
																],
																"functionName": {
																	"name": "abi_decode_string_fromMemory",
																	"nodeType": "YulIdentifier",
																	"src": "1354:28:13"
																},
																"nodeType": "YulFunctionCall",
																"src": "1354:61:13"
															},
															"variableNames": [
																{
																	"name": "value0",
																	"nodeType": "YulIdentifier",
																	"src": "1344:6:13"
																}
															]
														},
														{
															"nodeType": "YulVariableDeclaration",
															"src": "1424:41:13",
															"value": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"name": "headStart",
																				"nodeType": "YulIdentifier",
																				"src": "1450:9:13"
																			},
																			{
																				"kind": "number",
																				"nodeType": "YulLiteral",
																				"src": "1461:2:13",
																				"type": "",
																				"value": "32"
																			}
																		],
																		"functionName": {
																			"name": "add",
																			"nodeType": "YulIdentifier",
																			"src": "1446:3:13"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "1446:18:13"
																	}
																],
																"functionName": {
																	"name": "mload",
																	"nodeType": "YulIdentifier",
																	"src": "1440:5:13"
																},
																"nodeType": "YulFunctionCall",
																"src": "1440:25:13"
															},
															"variables": [
																{
																	"name": "offset_1",
																	"nodeType": "YulTypedName",
																	"src": "1428:8:13",
																	"type": ""
																}
															]
														},
														{
															"body": {
																"nodeType": "YulBlock",
																"src": "1494:16:13",
																"statements": [
																	{
																		"expression": {
																			"arguments": [
																				{
																					"kind": "number",
																					"nodeType": "YulLiteral",
																					"src": "1503:1:13",
																					"type": "",
																					"value": "0"
																				},
																				{
																					"kind": "number",
																					"nodeType": "YulLiteral",
																					"src": "1506:1:13",
																					"type": "",
																					"value": "0"
																				}
																			],
																			"functionName": {
																				"name": "revert",
																				"nodeType": "YulIdentifier",
																				"src": "1496:6:13"
																			},
																			"nodeType": "YulFunctionCall",
																			"src": "1496:12:13"
																		},
																		"nodeType": "YulExpressionStatement",
																		"src": "1496:12:13"
																	}
																]
															},
															"condition": {
																"arguments": [
																	{
																		"name": "offset_1",
																		"nodeType": "YulIdentifier",
																		"src": "1480:8:13"
																	},
																	{
																		"name": "_1",
																		"nodeType": "YulIdentifier",
																		"src": "1490:2:13"
																	}
																],
																"functionName": {
																	"name": "gt",
																	"nodeType": "YulIdentifier",
																	"src": "1477:2:13"
																},
																"nodeType": "YulFunctionCall",
																"src": "1477:16:13"
															},
															"nodeType": "YulIf",
															"src": "1474:36:13"
														},
														{
															"nodeType": "YulAssignment",
															"src": "1519:73:13",
															"value": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"name": "headStart",
																				"nodeType": "YulIdentifier",
																				"src": "1562:9:13"
																			},
																			{
																				"name": "offset_1",
																				"nodeType": "YulIdentifier",
																				"src": "1573:8:13"
																			}
																		],
																		"functionName": {
																			"name": "add",
																			"nodeType": "YulIdentifier",
																			"src": "1558:3:13"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "1558:24:13"
																	},
																	{
																		"name": "dataEnd",
																		"nodeType": "YulIdentifier",
																		"src": "1584:7:13"
																	}
																],
																"functionName": {
																	"name": "abi_decode_string_fromMemory",
																	"nodeType": "YulIdentifier",
																	"src": "1529:28:13"
																},
																"nodeType": "YulFunctionCall",
																"src": "1529:63:13"
															},
															"variableNames": [
																{
																	"name": "value1",
																	"nodeType": "YulIdentifier",
																	"src": "1519:6:13"
																}
															]
														}
													]
												},
												"name": "abi_decode_tuple_t_string_memory_ptrt_string_memory_ptr_fromMemory",
												"nodeType": "YulFunctionDefinition",
												"parameters": [
													{
														"name": "headStart",
														"nodeType": "YulTypedName",
														"src": "1112:9:13",
														"type": ""
													},
													{
														"name": "dataEnd",
														"nodeType": "YulTypedName",
														"src": "1123:7:13",
														"type": ""
													}
												],
												"returnVariables": [
													{
														"name": "value0",
														"nodeType": "YulTypedName",
														"src": "1135:6:13",
														"type": ""
													},
													{
														"name": "value1",
														"nodeType": "YulTypedName",
														"src": "1143:6:13",
														"type": ""
													}
												],
												"src": "1036:562:13"
											},
											{
												"body": {
													"nodeType": "YulBlock",
													"src": "1658:325:13",
													"statements": [
														{
															"nodeType": "YulAssignment",
															"src": "1668:22:13",
															"value": {
																"arguments": [
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "1682:1:13",
																		"type": "",
																		"value": "1"
																	},
																	{
																		"name": "data",
																		"nodeType": "YulIdentifier",
																		"src": "1685:4:13"
																	}
																],
																"functionName": {
																	"name": "shr",
																	"nodeType": "YulIdentifier",
																	"src": "1678:3:13"
																},
																"nodeType": "YulFunctionCall",
																"src": "1678:12:13"
															},
															"variableNames": [
																{
																	"name": "length",
																	"nodeType": "YulIdentifier",
																	"src": "1668:6:13"
																}
															]
														},
														{
															"nodeType": "YulVariableDeclaration",
															"src": "1699:38:13",
															"value": {
																"arguments": [
																	{
																		"name": "data",
																		"nodeType": "YulIdentifier",
																		"src": "1729:4:13"
																	},
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "1735:1:13",
																		"type": "",
																		"value": "1"
																	}
																],
																"functionName": {
																	"name": "and",
																	"nodeType": "YulIdentifier",
																	"src": "1725:3:13"
																},
																"nodeType": "YulFunctionCall",
																"src": "1725:12:13"
															},
															"variables": [
																{
																	"name": "outOfPlaceEncoding",
																	"nodeType": "YulTypedName",
																	"src": "1703:18:13",
																	"type": ""
																}
															]
														},
														{
															"body": {
																"nodeType": "YulBlock",
																"src": "1776:31:13",
																"statements": [
																	{
																		"nodeType": "YulAssignment",
																		"src": "1778:27:13",
																		"value": {
																			"arguments": [
																				{
																					"name": "length",
																					"nodeType": "YulIdentifier",
																					"src": "1792:6:13"
																				},
																				{
																					"kind": "number",
																					"nodeType": "YulLiteral",
																					"src": "1800:4:13",
																					"type": "",
																					"value": "0x7f"
																				}
																			],
																			"functionName": {
																				"name": "and",
																				"nodeType": "YulIdentifier",
																				"src": "1788:3:13"
																			},
																			"nodeType": "YulFunctionCall",
																			"src": "1788:17:13"
																		},
																		"variableNames": [
																			{
																				"name": "length",
																				"nodeType": "YulIdentifier",
																				"src": "1778:6:13"
																			}
																		]
																	}
																]
															},
															"condition": {
																"arguments": [
																	{
																		"name": "outOfPlaceEncoding",
																		"nodeType": "YulIdentifier",
																		"src": "1756:18:13"
																	}
																],
																"functionName": {
																	"name": "iszero",
																	"nodeType": "YulIdentifier",
																	"src": "1749:6:13"
																},
																"nodeType": "YulFunctionCall",
																"src": "1749:26:13"
															},
															"nodeType": "YulIf",
															"src": "1746:61:13"
														},
														{
															"body": {
																"nodeType": "YulBlock",
																"src": "1866:111:13",
																"statements": [
																	{
																		"expression": {
																			"arguments": [
																				{
																					"kind": "number",
																					"nodeType": "YulLiteral",
																					"src": "1887:1:13",
																					"type": "",
																					"value": "0"
																				},
																				{
																					"arguments": [
																						{
																							"kind": "number",
																							"nodeType": "YulLiteral",
																							"src": "1894:3:13",
																							"type": "",
																							"value": "224"
																						},
																						{
																							"kind": "number",
																							"nodeType": "YulLiteral",
																							"src": "1899:10:13",
																							"type": "",
																							"value": "0x4e487b71"
																						}
																					],
																					"functionName": {
																						"name": "shl",
																						"nodeType": "YulIdentifier",
																						"src": "1890:3:13"
																					},
																					"nodeType": "YulFunctionCall",
																					"src": "1890:20:13"
																				}
																			],
																			"functionName": {
																				"name": "mstore",
																				"nodeType": "YulIdentifier",
																				"src": "1880:6:13"
																			},
																			"nodeType": "YulFunctionCall",
																			"src": "1880:31:13"
																		},
																		"nodeType": "YulExpressionStatement",
																		"src": "1880:31:13"
																	},
																	{
																		"expression": {
																			"arguments": [
																				{
																					"kind": "number",
																					"nodeType": "YulLiteral",
																					"src": "1931:1:13",
																					"type": "",
																					"value": "4"
																				},
																				{
																					"kind": "number",
																					"nodeType": "YulLiteral",
																					"src": "1934:4:13",
																					"type": "",
																					"value": "0x22"
																				}
																			],
																			"functionName": {
																				"name": "mstore",
																				"nodeType": "YulIdentifier",
																				"src": "1924:6:13"
																			},
																			"nodeType": "YulFunctionCall",
																			"src": "1924:15:13"
																		},
																		"nodeType": "YulExpressionStatement",
																		"src": "1924:15:13"
																	},
																	{
																		"expression": {
																			"arguments": [
																				{
																					"kind": "number",
																					"nodeType": "YulLiteral",
																					"src": "1959:1:13",
																					"type": "",
																					"value": "0"
																				},
																				{
																					"kind": "number",
																					"nodeType": "YulLiteral",
																					"src": "1962:4:13",
																					"type": "",
																					"value": "0x24"
																				}
																			],
																			"functionName": {
																				"name": "revert",
																				"nodeType": "YulIdentifier",
																				"src": "1952:6:13"
																			},
																			"nodeType": "YulFunctionCall",
																			"src": "1952:15:13"
																		},
																		"nodeType": "YulExpressionStatement",
																		"src": "1952:15:13"
																	}
																]
															},
															"condition": {
																"arguments": [
																	{
																		"name": "outOfPlaceEncoding",
																		"nodeType": "YulIdentifier",
																		"src": "1822:18:13"
																	},
																	{
																		"arguments": [
																			{
																				"name": "length",
																				"nodeType": "YulIdentifier",
																				"src": "1845:6:13"
																			},
																			{
																				"kind": "number",
																				"nodeType": "YulLiteral",
																				"src": "1853:2:13",
																				"type": "",
																				"value": "32"
																			}
																		],
																		"functionName": {
																			"name": "lt",
																			"nodeType": "YulIdentifier",
																			"src": "1842:2:13"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "1842:14:13"
																	}
																],
																"functionName": {
																	"name": "eq",
																	"nodeType": "YulIdentifier",
																	"src": "1819:2:13"
																},
																"nodeType": "YulFunctionCall",
																"src": "1819:38:13"
															},
															"nodeType": "YulIf",
															"src": "1816:161:13"
														}
													]
												},
												"name": "extract_byte_array_length",
												"nodeType": "YulFunctionDefinition",
												"parameters": [
													{
														"name": "data",
														"nodeType": "YulTypedName",
														"src": "1638:4:13",
														"type": ""
													}
												],
												"returnVariables": [
													{
														"name": "length",
														"nodeType": "YulTypedName",
														"src": "1647:6:13",
														"type": ""
													}
												],
												"src": "1603:380:13"
											}
										]
									},
									"contents": "{\n    { }\n    function panic_error_0x41()\n    {\n        mstore(0, shl(224, 0x4e487b71))\n        mstore(4, 0x41)\n        revert(0, 0x24)\n    }\n    function abi_decode_string_fromMemory(offset, end) -> array\n    {\n        if iszero(slt(add(offset, 0x1f), end)) { revert(0, 0) }\n        let _1 := mload(offset)\n        let _2 := sub(shl(64, 1), 1)\n        if gt(_1, _2) { panic_error_0x41() }\n        let _3 := not(31)\n        let memPtr := mload(64)\n        let newFreePtr := add(memPtr, and(add(and(add(_1, 0x1f), _3), 63), _3))\n        if or(gt(newFreePtr, _2), lt(newFreePtr, memPtr)) { panic_error_0x41() }\n        mstore(64, newFreePtr)\n        mstore(memPtr, _1)\n        let _4 := 0x20\n        if gt(add(add(offset, _1), _4), end) { revert(0, 0) }\n        let i := 0\n        for { } lt(i, _1) { i := add(i, _4) }\n        {\n            mstore(add(add(memPtr, i), _4), mload(add(add(offset, i), _4)))\n        }\n        if gt(i, _1)\n        {\n            mstore(add(add(memPtr, _1), _4), 0)\n        }\n        array := memPtr\n    }\n    function abi_decode_tuple_t_string_memory_ptrt_string_memory_ptr_fromMemory(headStart, dataEnd) -> value0, value1\n    {\n        if slt(sub(dataEnd, headStart), 64) { revert(0, 0) }\n        let offset := mload(headStart)\n        let _1 := sub(shl(64, 1), 1)\n        if gt(offset, _1) { revert(0, 0) }\n        value0 := abi_decode_string_fromMemory(add(headStart, offset), dataEnd)\n        let offset_1 := mload(add(headStart, 32))\n        if gt(offset_1, _1) { revert(0, 0) }\n        value1 := abi_decode_string_fromMemory(add(headStart, offset_1), dataEnd)\n    }\n    function extract_byte_array_length(data) -> length\n    {\n        length := shr(1, data)\n        let outOfPlaceEncoding := and(data, 1)\n        if iszero(outOfPlaceEncoding) { length := and(length, 0x7f) }\n        if eq(outOfPlaceEncoding, lt(length, 32))\n        {\n            mstore(0, shl(224, 0x4e487b71))\n            mstore(4, 0x22)\n            revert(0, 0x24)\n        }\n    }\n}",
									"id": 13,
									"language": "Yul",
									"name": "#utility.yul"
								}
							],
							"linkReferences": {},
							"object": "60806040523480156200001157600080fd5b50604051620012ba380380620012ba8339810160408190526200003491620001df565b8151620000499060029060208501906200006c565b5080516200005f9060039060208401906200006c565b5050600080555062000286565b8280546200007a9062000249565b90600052602060002090601f0160209004810192826200009e5760008555620000e9565b82601f10620000b957805160ff1916838001178555620000e9565b82800160010185558215620000e9579182015b82811115620000e9578251825591602001919060010190620000cc565b50620000f7929150620000fb565b5090565b5b80821115620000f75760008155600101620000fc565b634e487b7160e01b600052604160045260246000fd5b600082601f8301126200013a57600080fd5b81516001600160401b038082111562000157576200015762000112565b604051601f8301601f19908116603f0116810190828211818310171562000182576200018262000112565b816040528381526020925086838588010111156200019f57600080fd5b600091505b83821015620001c35785820183015181830184015290820190620001a4565b83821115620001d55760008385830101525b9695505050505050565b60008060408385031215620001f357600080fd5b82516001600160401b03808211156200020b57600080fd5b620002198683870162000128565b935060208501519150808211156200023057600080fd5b506200023f8582860162000128565b9150509250929050565b600181811c908216806200025e57607f821691505b602082108114156200028057634e487b7160e01b600052602260045260246000fd5b50919050565b61102480620002966000396000f3fe608060405234801561001057600080fd5b50600436106100ea5760003560e01c80636352211e1161008c578063a22cb46511610066578063a22cb465146101d6578063b88d4fde146101e9578063c87b56dd146101fc578063e985e9c51461020f57600080fd5b80636352211e146101a857806370a08231146101bb57806395d89b41146101ce57600080fd5b8063095ea7b3116100c8578063095ea7b31461015757806318160ddd1461016c57806323b872dd1461018257806342842e0e1461019557600080fd5b806301ffc9a7146100ef57806306fdde0314610117578063081812fc1461012c575b600080fd5b6101026100fd366004610bd7565b61024b565b60405190151581526020015b60405180910390f35b61011f61029d565b60405161010e9190610c4c565b61013f61013a366004610c5f565b61032f565b6040516001600160a01b03909116815260200161010e565b61016a610165366004610c94565b610373565b005b600154600054035b60405190815260200161010e565b61016a610190366004610cbe565b610401565b61016a6101a3366004610cbe565b61040c565b61013f6101b6366004610c5f565b610427565b6101746101c9366004610cfa565b610439565b61011f610488565b61016a6101e4366004610d15565b610497565b61016a6101f7366004610d67565b61052d565b61011f61020a366004610c5f565b61057e565b61010261021d366004610e43565b6001600160a01b03918216600090815260076020908152604080832093909416825291909152205460ff1690565b60006001600160e01b031982166380ac58cd60e01b148061027c57506001600160e01b03198216635b5e139f60e01b145b8061029757506301ffc9a760e01b6001600160e01b03198316145b92915050565b6060600280546102ac90610e76565b80601f01602080910402602001604051908101604052809291908181526020018280546102d890610e76565b80156103255780601f106102fa57610100808354040283529160200191610325565b820191906000526020600020905b81548152906001019060200180831161030857829003601f168201915b5050505050905090565b600061033a82610610565b610357576040516333d1c03960e21b815260040160405180910390fd5b506000908152600660205260409020546001600160a01b031690565b600061037e82610427565b9050806001600160a01b0316836001600160a01b031614156103b35760405163250fdee360e21b815260040160405180910390fd5b336001600160a01b038216148015906103d357506103d1813361021d565b155b156103f1576040516367d9dca160e11b815260040160405180910390fd5b6103fc83838361063b565b505050565b6103fc838383610697565b6103fc8383836040518060200160405280600081525061052d565b6000610432826108ac565b5192915050565b60006001600160a01b038216610462576040516323d3ad8160e21b815260040160405180910390fd5b506001600160a01b031660009081526005602052604090205467ffffffffffffffff1690565b6060600380546102ac90610e76565b6001600160a01b0382163314156104c15760405163b06307db60e01b815260040160405180910390fd5b3360008181526007602090815260408083206001600160a01b03871680855290835292819020805460ff191686151590811790915590519081529192917f17307eab39ab6107e8899845ad3d59bd9653f200f220920489ca2b5937696c31910160405180910390a35050565b610538848484610697565b6001600160a01b0383163b1515801561055a5750610558848484846109c8565b155b15610578576040516368d2bf6b60e11b815260040160405180910390fd5b50505050565b606061058982610610565b6105a657604051630a14c4b560e41b815260040160405180910390fd5b60006105bd60408051602081019091526000815290565b90508051600014156105de5760405180602001604052806000815250610609565b806105e884610ac0565b6040516020016105f9929190610eb1565b6040516020818303038152906040525b9392505050565b6000805482108015610297575050600090815260046020526040902054600160e01b900460ff161590565b60008281526006602052604080822080546001600160a01b0319166001600160a01b0387811691821790925591518593918516917f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b92591a4505050565b60006106a2826108ac565b80519091506000906001600160a01b0316336001600160a01b031614806106d0575081516106d0903361021d565b806106eb5750336106e08461032f565b6001600160a01b0316145b90508061070b57604051632ce44b5f60e11b815260040160405180910390fd5b846001600160a01b031682600001516001600160a01b0316146107405760405162a1148160e81b815260040160405180910390fd5b6001600160a01b03841661076757604051633a954ecd60e21b815260040160405180910390fd5b610777600084846000015161063b565b6001600160a01b038581166000908152600560209081526040808320805467ffffffffffffffff1980821667ffffffffffffffff92831660001901831617909255898616808652838620805493841693831660019081018416949094179055898652600490945282852080546001600160e01b031916909417600160a01b42909216919091021790925590860180835291205490911661086357600054811015610863578251600082815260046020908152604090912080549186015167ffffffffffffffff16600160a01b026001600160e01b03199092166001600160a01b03909316929092171790555b5082846001600160a01b0316866001600160a01b03167fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef60405160405180910390a45050505050565b6040805160608101825260008082526020820181905291810191909152816000548110156109af57600081815260046020908152604091829020825160608101845290546001600160a01b0381168252600160a01b810467ffffffffffffffff1692820192909252600160e01b90910460ff161515918101829052906109ad5780516001600160a01b031615610943579392505050565b5060001901600081815260046020908152604091829020825160608101845290546001600160a01b038116808352600160a01b820467ffffffffffffffff1693830193909352600160e01b900460ff16151592810192909252156109a8579392505050565b610943565b505b604051636f96cda160e11b815260040160405180910390fd5b604051630a85bd0160e11b81526000906001600160a01b0385169063150b7a02906109fd903390899088908890600401610ee0565b602060405180830381600087803b158015610a1757600080fd5b505af1925050508015610a47575060408051601f3d908101601f19168201909252610a4491810190610f1d565b60015b610aa2573d808015610a75576040519150601f19603f3d011682016040523d82523d6000602084013e610a7a565b606091505b508051610a9a576040516368d2bf6b60e11b815260040160405180910390fd5b805181602001fd5b6001600160e01b031916630a85bd0160e11b1490505b949350505050565b606081610ae45750506040805180820190915260018152600360fc1b602082015290565b8160005b8115610b0e5780610af881610f50565b9150610b079050600a83610f81565b9150610ae8565b60008167ffffffffffffffff811115610b2957610b29610d51565b6040519080825280601f01601f191660200182016040528015610b53576020820181803683370190505b5090505b8415610ab857610b68600183610f95565b9150610b75600a86610fac565b610b80906030610fc0565b60f81b818381518110610b9557610b95610fd8565b60200101906001600160f81b031916908160001a905350610bb7600a86610f81565b9450610b57565b6001600160e01b031981168114610bd457600080fd5b50565b600060208284031215610be957600080fd5b813561060981610bbe565b60005b83811015610c0f578181015183820152602001610bf7565b838111156105785750506000910152565b60008151808452610c38816020860160208601610bf4565b601f01601f19169290920160200192915050565b6020815260006106096020830184610c20565b600060208284031215610c7157600080fd5b5035919050565b80356001600160a01b0381168114610c8f57600080fd5b919050565b60008060408385031215610ca757600080fd5b610cb083610c78565b946020939093013593505050565b600080600060608486031215610cd357600080fd5b610cdc84610c78565b9250610cea60208501610c78565b9150604084013590509250925092565b600060208284031215610d0c57600080fd5b61060982610c78565b60008060408385031215610d2857600080fd5b610d3183610c78565b915060208301358015158114610d4657600080fd5b809150509250929050565b634e487b7160e01b600052604160045260246000fd5b60008060008060808587031215610d7d57600080fd5b610d8685610c78565b9350610d9460208601610c78565b925060408501359150606085013567ffffffffffffffff80821115610db857600080fd5b818701915087601f830112610dcc57600080fd5b813581811115610dde57610dde610d51565b604051601f8201601f19908116603f01168101908382118183101715610e0657610e06610d51565b816040528281528a6020848701011115610e1f57600080fd5b82602086016020830137600060208483010152809550505050505092959194509250565b60008060408385031215610e5657600080fd5b610e5f83610c78565b9150610e6d60208401610c78565b90509250929050565b600181811c90821680610e8a57607f821691505b60208210811415610eab57634e487b7160e01b600052602260045260246000fd5b50919050565b60008351610ec3818460208801610bf4565b835190830190610ed7818360208801610bf4565b01949350505050565b6001600160a01b0385811682528416602082015260408101839052608060608201819052600090610f1390830184610c20565b9695505050505050565b600060208284031215610f2f57600080fd5b815161060981610bbe565b634e487b7160e01b600052601160045260246000fd5b6000600019821415610f6457610f64610f3a565b5060010190565b634e487b7160e01b600052601260045260246000fd5b600082610f9057610f90610f6b565b500490565b600082821015610fa757610fa7610f3a565b500390565b600082610fbb57610fbb610f6b565b500690565b60008219821115610fd357610fd3610f3a565b500190565b634e487b7160e01b600052603260045260246000fdfea2646970667358221220340639a51a4acb793db0b70a664b822ec286f6d1f20a48ffbc513a8664f4a81e64736f6c63430008090033",
							"opcodes": "PUSH1 0x80 PUSH1 0x40 MSTORE CALLVALUE DUP1 ISZERO PUSH3 0x11 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH1 0x40 MLOAD PUSH3 0x12BA CODESIZE SUB DUP1 PUSH3 0x12BA DUP4 CODECOPY DUP2 ADD PUSH1 0x40 DUP2 SWAP1 MSTORE PUSH3 0x34 SWAP2 PUSH3 0x1DF JUMP JUMPDEST DUP2 MLOAD PUSH3 0x49 SWAP1 PUSH1 0x2 SWAP1 PUSH1 0x20 DUP6 ADD SWAP1 PUSH3 0x6C JUMP JUMPDEST POP DUP1 MLOAD PUSH3 0x5F SWAP1 PUSH1 0x3 SWAP1 PUSH1 0x20 DUP5 ADD SWAP1 PUSH3 0x6C JUMP JUMPDEST POP POP PUSH1 0x0 DUP1 SSTORE POP PUSH3 0x286 JUMP JUMPDEST DUP3 DUP1 SLOAD PUSH3 0x7A SWAP1 PUSH3 0x249 JUMP JUMPDEST SWAP1 PUSH1 0x0 MSTORE PUSH1 0x20 PUSH1 0x0 KECCAK256 SWAP1 PUSH1 0x1F ADD PUSH1 0x20 SWAP1 DIV DUP2 ADD SWAP3 DUP3 PUSH3 0x9E JUMPI PUSH1 0x0 DUP6 SSTORE PUSH3 0xE9 JUMP JUMPDEST DUP3 PUSH1 0x1F LT PUSH3 0xB9 JUMPI DUP1 MLOAD PUSH1 0xFF NOT AND DUP4 DUP1 ADD OR DUP6 SSTORE PUSH3 0xE9 JUMP JUMPDEST DUP3 DUP1 ADD PUSH1 0x1 ADD DUP6 SSTORE DUP3 ISZERO PUSH3 0xE9 JUMPI SWAP2 DUP3 ADD JUMPDEST DUP3 DUP2 GT ISZERO PUSH3 0xE9 JUMPI DUP3 MLOAD DUP3 SSTORE SWAP2 PUSH1 0x20 ADD SWAP2 SWAP1 PUSH1 0x1 ADD SWAP1 PUSH3 0xCC JUMP JUMPDEST POP PUSH3 0xF7 SWAP3 SWAP2 POP PUSH3 0xFB JUMP JUMPDEST POP SWAP1 JUMP JUMPDEST JUMPDEST DUP1 DUP3 GT ISZERO PUSH3 0xF7 JUMPI PUSH1 0x0 DUP2 SSTORE PUSH1 0x1 ADD PUSH3 0xFC JUMP JUMPDEST PUSH4 0x4E487B71 PUSH1 0xE0 SHL PUSH1 0x0 MSTORE PUSH1 0x41 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH1 0x0 REVERT JUMPDEST PUSH1 0x0 DUP3 PUSH1 0x1F DUP4 ADD SLT PUSH3 0x13A JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP2 MLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0x40 SHL SUB DUP1 DUP3 GT ISZERO PUSH3 0x157 JUMPI PUSH3 0x157 PUSH3 0x112 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH1 0x1F DUP4 ADD PUSH1 0x1F NOT SWAP1 DUP2 AND PUSH1 0x3F ADD AND DUP2 ADD SWAP1 DUP3 DUP3 GT DUP2 DUP4 LT OR ISZERO PUSH3 0x182 JUMPI PUSH3 0x182 PUSH3 0x112 JUMP JUMPDEST DUP2 PUSH1 0x40 MSTORE DUP4 DUP2 MSTORE PUSH1 0x20 SWAP3 POP DUP7 DUP4 DUP6 DUP9 ADD ADD GT ISZERO PUSH3 0x19F JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH1 0x0 SWAP2 POP JUMPDEST DUP4 DUP3 LT ISZERO PUSH3 0x1C3 JUMPI DUP6 DUP3 ADD DUP4 ADD MLOAD DUP2 DUP4 ADD DUP5 ADD MSTORE SWAP1 DUP3 ADD SWAP1 PUSH3 0x1A4 JUMP JUMPDEST DUP4 DUP3 GT ISZERO PUSH3 0x1D5 JUMPI PUSH1 0x0 DUP4 DUP6 DUP4 ADD ADD MSTORE JUMPDEST SWAP7 SWAP6 POP POP POP POP POP POP JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x40 DUP4 DUP6 SUB SLT ISZERO PUSH3 0x1F3 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP3 MLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0x40 SHL SUB DUP1 DUP3 GT ISZERO PUSH3 0x20B JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH3 0x219 DUP7 DUP4 DUP8 ADD PUSH3 0x128 JUMP JUMPDEST SWAP4 POP PUSH1 0x20 DUP6 ADD MLOAD SWAP2 POP DUP1 DUP3 GT ISZERO PUSH3 0x230 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH3 0x23F DUP6 DUP3 DUP7 ADD PUSH3 0x128 JUMP JUMPDEST SWAP2 POP POP SWAP3 POP SWAP3 SWAP1 POP JUMP JUMPDEST PUSH1 0x1 DUP2 DUP2 SHR SWAP1 DUP3 AND DUP1 PUSH3 0x25E JUMPI PUSH1 0x7F DUP3 AND SWAP2 POP JUMPDEST PUSH1 0x20 DUP3 LT DUP2 EQ ISZERO PUSH3 0x280 JUMPI PUSH4 0x4E487B71 PUSH1 0xE0 SHL PUSH1 0x0 MSTORE PUSH1 0x22 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH1 0x0 REVERT JUMPDEST POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH2 0x1024 DUP1 PUSH3 0x296 PUSH1 0x0 CODECOPY PUSH1 0x0 RETURN INVALID PUSH1 0x80 PUSH1 0x40 MSTORE CALLVALUE DUP1 ISZERO PUSH2 0x10 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH1 0x4 CALLDATASIZE LT PUSH2 0xEA JUMPI PUSH1 0x0 CALLDATALOAD PUSH1 0xE0 SHR DUP1 PUSH4 0x6352211E GT PUSH2 0x8C JUMPI DUP1 PUSH4 0xA22CB465 GT PUSH2 0x66 JUMPI DUP1 PUSH4 0xA22CB465 EQ PUSH2 0x1D6 JUMPI DUP1 PUSH4 0xB88D4FDE EQ PUSH2 0x1E9 JUMPI DUP1 PUSH4 0xC87B56DD EQ PUSH2 0x1FC JUMPI DUP1 PUSH4 0xE985E9C5 EQ PUSH2 0x20F JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP1 PUSH4 0x6352211E EQ PUSH2 0x1A8 JUMPI DUP1 PUSH4 0x70A08231 EQ PUSH2 0x1BB JUMPI DUP1 PUSH4 0x95D89B41 EQ PUSH2 0x1CE JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP1 PUSH4 0x95EA7B3 GT PUSH2 0xC8 JUMPI DUP1 PUSH4 0x95EA7B3 EQ PUSH2 0x157 JUMPI DUP1 PUSH4 0x18160DDD EQ PUSH2 0x16C JUMPI DUP1 PUSH4 0x23B872DD EQ PUSH2 0x182 JUMPI DUP1 PUSH4 0x42842E0E EQ PUSH2 0x195 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP1 PUSH4 0x1FFC9A7 EQ PUSH2 0xEF JUMPI DUP1 PUSH4 0x6FDDE03 EQ PUSH2 0x117 JUMPI DUP1 PUSH4 0x81812FC EQ PUSH2 0x12C JUMPI JUMPDEST PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH2 0x102 PUSH2 0xFD CALLDATASIZE PUSH1 0x4 PUSH2 0xBD7 JUMP JUMPDEST PUSH2 0x24B JUMP JUMPDEST PUSH1 0x40 MLOAD SWAP1 ISZERO ISZERO DUP2 MSTORE PUSH1 0x20 ADD JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST PUSH2 0x11F PUSH2 0x29D JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH2 0x10E SWAP2 SWAP1 PUSH2 0xC4C JUMP JUMPDEST PUSH2 0x13F PUSH2 0x13A CALLDATASIZE PUSH1 0x4 PUSH2 0xC5F JUMP JUMPDEST PUSH2 0x32F JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB SWAP1 SWAP2 AND DUP2 MSTORE PUSH1 0x20 ADD PUSH2 0x10E JUMP JUMPDEST PUSH2 0x16A PUSH2 0x165 CALLDATASIZE PUSH1 0x4 PUSH2 0xC94 JUMP JUMPDEST PUSH2 0x373 JUMP JUMPDEST STOP JUMPDEST PUSH1 0x1 SLOAD PUSH1 0x0 SLOAD SUB JUMPDEST PUSH1 0x40 MLOAD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH2 0x10E JUMP JUMPDEST PUSH2 0x16A PUSH2 0x190 CALLDATASIZE PUSH1 0x4 PUSH2 0xCBE JUMP JUMPDEST PUSH2 0x401 JUMP JUMPDEST PUSH2 0x16A PUSH2 0x1A3 CALLDATASIZE PUSH1 0x4 PUSH2 0xCBE JUMP JUMPDEST PUSH2 0x40C JUMP JUMPDEST PUSH2 0x13F PUSH2 0x1B6 CALLDATASIZE PUSH1 0x4 PUSH2 0xC5F JUMP JUMPDEST PUSH2 0x427 JUMP JUMPDEST PUSH2 0x174 PUSH2 0x1C9 CALLDATASIZE PUSH1 0x4 PUSH2 0xCFA JUMP JUMPDEST PUSH2 0x439 JUMP JUMPDEST PUSH2 0x11F PUSH2 0x488 JUMP JUMPDEST PUSH2 0x16A PUSH2 0x1E4 CALLDATASIZE PUSH1 0x4 PUSH2 0xD15 JUMP JUMPDEST PUSH2 0x497 JUMP JUMPDEST PUSH2 0x16A PUSH2 0x1F7 CALLDATASIZE PUSH1 0x4 PUSH2 0xD67 JUMP JUMPDEST PUSH2 0x52D JUMP JUMPDEST PUSH2 0x11F PUSH2 0x20A CALLDATASIZE PUSH1 0x4 PUSH2 0xC5F JUMP JUMPDEST PUSH2 0x57E JUMP JUMPDEST PUSH2 0x102 PUSH2 0x21D CALLDATASIZE PUSH1 0x4 PUSH2 0xE43 JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB SWAP2 DUP3 AND PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0x7 PUSH1 0x20 SWAP1 DUP2 MSTORE PUSH1 0x40 DUP1 DUP4 KECCAK256 SWAP4 SWAP1 SWAP5 AND DUP3 MSTORE SWAP2 SWAP1 SWAP2 MSTORE KECCAK256 SLOAD PUSH1 0xFF AND SWAP1 JUMP JUMPDEST PUSH1 0x0 PUSH1 0x1 PUSH1 0x1 PUSH1 0xE0 SHL SUB NOT DUP3 AND PUSH4 0x80AC58CD PUSH1 0xE0 SHL EQ DUP1 PUSH2 0x27C JUMPI POP PUSH1 0x1 PUSH1 0x1 PUSH1 0xE0 SHL SUB NOT DUP3 AND PUSH4 0x5B5E139F PUSH1 0xE0 SHL EQ JUMPDEST DUP1 PUSH2 0x297 JUMPI POP PUSH4 0x1FFC9A7 PUSH1 0xE0 SHL PUSH1 0x1 PUSH1 0x1 PUSH1 0xE0 SHL SUB NOT DUP4 AND EQ JUMPDEST SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x60 PUSH1 0x2 DUP1 SLOAD PUSH2 0x2AC SWAP1 PUSH2 0xE76 JUMP JUMPDEST DUP1 PUSH1 0x1F ADD PUSH1 0x20 DUP1 SWAP2 DIV MUL PUSH1 0x20 ADD PUSH1 0x40 MLOAD SWAP1 DUP2 ADD PUSH1 0x40 MSTORE DUP1 SWAP3 SWAP2 SWAP1 DUP2 DUP2 MSTORE PUSH1 0x20 ADD DUP3 DUP1 SLOAD PUSH2 0x2D8 SWAP1 PUSH2 0xE76 JUMP JUMPDEST DUP1 ISZERO PUSH2 0x325 JUMPI DUP1 PUSH1 0x1F LT PUSH2 0x2FA JUMPI PUSH2 0x100 DUP1 DUP4 SLOAD DIV MUL DUP4 MSTORE SWAP2 PUSH1 0x20 ADD SWAP2 PUSH2 0x325 JUMP JUMPDEST DUP3 ADD SWAP2 SWAP1 PUSH1 0x0 MSTORE PUSH1 0x20 PUSH1 0x0 KECCAK256 SWAP1 JUMPDEST DUP2 SLOAD DUP2 MSTORE SWAP1 PUSH1 0x1 ADD SWAP1 PUSH1 0x20 ADD DUP1 DUP4 GT PUSH2 0x308 JUMPI DUP3 SWAP1 SUB PUSH1 0x1F AND DUP3 ADD SWAP2 JUMPDEST POP POP POP POP POP SWAP1 POP SWAP1 JUMP JUMPDEST PUSH1 0x0 PUSH2 0x33A DUP3 PUSH2 0x610 JUMP JUMPDEST PUSH2 0x357 JUMPI PUSH1 0x40 MLOAD PUSH4 0x33D1C039 PUSH1 0xE2 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST POP PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0x6 PUSH1 0x20 MSTORE PUSH1 0x40 SWAP1 KECCAK256 SLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND SWAP1 JUMP JUMPDEST PUSH1 0x0 PUSH2 0x37E DUP3 PUSH2 0x427 JUMP JUMPDEST SWAP1 POP DUP1 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND DUP4 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND EQ ISZERO PUSH2 0x3B3 JUMPI PUSH1 0x40 MLOAD PUSH4 0x250FDEE3 PUSH1 0xE2 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST CALLER PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP3 AND EQ DUP1 ISZERO SWAP1 PUSH2 0x3D3 JUMPI POP PUSH2 0x3D1 DUP2 CALLER PUSH2 0x21D JUMP JUMPDEST ISZERO JUMPDEST ISZERO PUSH2 0x3F1 JUMPI PUSH1 0x40 MLOAD PUSH4 0x67D9DCA1 PUSH1 0xE1 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST PUSH2 0x3FC DUP4 DUP4 DUP4 PUSH2 0x63B JUMP JUMPDEST POP POP POP JUMP JUMPDEST PUSH2 0x3FC DUP4 DUP4 DUP4 PUSH2 0x697 JUMP JUMPDEST PUSH2 0x3FC DUP4 DUP4 DUP4 PUSH1 0x40 MLOAD DUP1 PUSH1 0x20 ADD PUSH1 0x40 MSTORE DUP1 PUSH1 0x0 DUP2 MSTORE POP PUSH2 0x52D JUMP JUMPDEST PUSH1 0x0 PUSH2 0x432 DUP3 PUSH2 0x8AC JUMP JUMPDEST MLOAD SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP3 AND PUSH2 0x462 JUMPI PUSH1 0x40 MLOAD PUSH4 0x23D3AD81 PUSH1 0xE2 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST POP PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0x5 PUSH1 0x20 MSTORE PUSH1 0x40 SWAP1 KECCAK256 SLOAD PUSH8 0xFFFFFFFFFFFFFFFF AND SWAP1 JUMP JUMPDEST PUSH1 0x60 PUSH1 0x3 DUP1 SLOAD PUSH2 0x2AC SWAP1 PUSH2 0xE76 JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP3 AND CALLER EQ ISZERO PUSH2 0x4C1 JUMPI PUSH1 0x40 MLOAD PUSH4 0xB06307DB PUSH1 0xE0 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST CALLER PUSH1 0x0 DUP2 DUP2 MSTORE PUSH1 0x7 PUSH1 0x20 SWAP1 DUP2 MSTORE PUSH1 0x40 DUP1 DUP4 KECCAK256 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP8 AND DUP1 DUP6 MSTORE SWAP1 DUP4 MSTORE SWAP3 DUP2 SWAP1 KECCAK256 DUP1 SLOAD PUSH1 0xFF NOT AND DUP7 ISZERO ISZERO SWAP1 DUP2 OR SWAP1 SWAP2 SSTORE SWAP1 MLOAD SWAP1 DUP2 MSTORE SWAP2 SWAP3 SWAP2 PUSH32 0x17307EAB39AB6107E8899845AD3D59BD9653F200F220920489CA2B5937696C31 SWAP2 ADD PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 LOG3 POP POP JUMP JUMPDEST PUSH2 0x538 DUP5 DUP5 DUP5 PUSH2 0x697 JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP4 AND EXTCODESIZE ISZERO ISZERO DUP1 ISZERO PUSH2 0x55A JUMPI POP PUSH2 0x558 DUP5 DUP5 DUP5 DUP5 PUSH2 0x9C8 JUMP JUMPDEST ISZERO JUMPDEST ISZERO PUSH2 0x578 JUMPI PUSH1 0x40 MLOAD PUSH4 0x68D2BF6B PUSH1 0xE1 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST POP POP POP POP JUMP JUMPDEST PUSH1 0x60 PUSH2 0x589 DUP3 PUSH2 0x610 JUMP JUMPDEST PUSH2 0x5A6 JUMPI PUSH1 0x40 MLOAD PUSH4 0xA14C4B5 PUSH1 0xE4 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST PUSH1 0x0 PUSH2 0x5BD PUSH1 0x40 DUP1 MLOAD PUSH1 0x20 DUP2 ADD SWAP1 SWAP2 MSTORE PUSH1 0x0 DUP2 MSTORE SWAP1 JUMP JUMPDEST SWAP1 POP DUP1 MLOAD PUSH1 0x0 EQ ISZERO PUSH2 0x5DE JUMPI PUSH1 0x40 MLOAD DUP1 PUSH1 0x20 ADD PUSH1 0x40 MSTORE DUP1 PUSH1 0x0 DUP2 MSTORE POP PUSH2 0x609 JUMP JUMPDEST DUP1 PUSH2 0x5E8 DUP5 PUSH2 0xAC0 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH1 0x20 ADD PUSH2 0x5F9 SWAP3 SWAP2 SWAP1 PUSH2 0xEB1 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH1 0x20 DUP2 DUP4 SUB SUB DUP2 MSTORE SWAP1 PUSH1 0x40 MSTORE JUMPDEST SWAP4 SWAP3 POP POP POP JUMP JUMPDEST PUSH1 0x0 DUP1 SLOAD DUP3 LT DUP1 ISZERO PUSH2 0x297 JUMPI POP POP PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0x4 PUSH1 0x20 MSTORE PUSH1 0x40 SWAP1 KECCAK256 SLOAD PUSH1 0x1 PUSH1 0xE0 SHL SWAP1 DIV PUSH1 0xFF AND ISZERO SWAP1 JUMP JUMPDEST PUSH1 0x0 DUP3 DUP2 MSTORE PUSH1 0x6 PUSH1 0x20 MSTORE PUSH1 0x40 DUP1 DUP3 KECCAK256 DUP1 SLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB NOT AND PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP8 DUP2 AND SWAP2 DUP3 OR SWAP1 SWAP3 SSTORE SWAP2 MLOAD DUP6 SWAP4 SWAP2 DUP6 AND SWAP2 PUSH32 0x8C5BE1E5EBEC7D5BD14F71427D1E84F3DD0314C0F7B2291E5B200AC8C7C3B925 SWAP2 LOG4 POP POP POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x6A2 DUP3 PUSH2 0x8AC JUMP JUMPDEST DUP1 MLOAD SWAP1 SWAP2 POP PUSH1 0x0 SWAP1 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND CALLER PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND EQ DUP1 PUSH2 0x6D0 JUMPI POP DUP2 MLOAD PUSH2 0x6D0 SWAP1 CALLER PUSH2 0x21D JUMP JUMPDEST DUP1 PUSH2 0x6EB JUMPI POP CALLER PUSH2 0x6E0 DUP5 PUSH2 0x32F JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND EQ JUMPDEST SWAP1 POP DUP1 PUSH2 0x70B JUMPI PUSH1 0x40 MLOAD PUSH4 0x2CE44B5F PUSH1 0xE1 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST DUP5 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND DUP3 PUSH1 0x0 ADD MLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND EQ PUSH2 0x740 JUMPI PUSH1 0x40 MLOAD PUSH3 0xA11481 PUSH1 0xE8 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP5 AND PUSH2 0x767 JUMPI PUSH1 0x40 MLOAD PUSH4 0x3A954ECD PUSH1 0xE2 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST PUSH2 0x777 PUSH1 0x0 DUP5 DUP5 PUSH1 0x0 ADD MLOAD PUSH2 0x63B JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP6 DUP2 AND PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0x5 PUSH1 0x20 SWAP1 DUP2 MSTORE PUSH1 0x40 DUP1 DUP4 KECCAK256 DUP1 SLOAD PUSH8 0xFFFFFFFFFFFFFFFF NOT DUP1 DUP3 AND PUSH8 0xFFFFFFFFFFFFFFFF SWAP3 DUP4 AND PUSH1 0x0 NOT ADD DUP4 AND OR SWAP1 SWAP3 SSTORE DUP10 DUP7 AND DUP1 DUP7 MSTORE DUP4 DUP7 KECCAK256 DUP1 SLOAD SWAP4 DUP5 AND SWAP4 DUP4 AND PUSH1 0x1 SWAP1 DUP2 ADD DUP5 AND SWAP5 SWAP1 SWAP5 OR SWAP1 SSTORE DUP10 DUP7 MSTORE PUSH1 0x4 SWAP1 SWAP5 MSTORE DUP3 DUP6 KECCAK256 DUP1 SLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xE0 SHL SUB NOT AND SWAP1 SWAP5 OR PUSH1 0x1 PUSH1 0xA0 SHL TIMESTAMP SWAP1 SWAP3 AND SWAP2 SWAP1 SWAP2 MUL OR SWAP1 SWAP3 SSTORE SWAP1 DUP7 ADD DUP1 DUP4 MSTORE SWAP2 KECCAK256 SLOAD SWAP1 SWAP2 AND PUSH2 0x863 JUMPI PUSH1 0x0 SLOAD DUP2 LT ISZERO PUSH2 0x863 JUMPI DUP3 MLOAD PUSH1 0x0 DUP3 DUP2 MSTORE PUSH1 0x4 PUSH1 0x20 SWAP1 DUP2 MSTORE PUSH1 0x40 SWAP1 SWAP2 KECCAK256 DUP1 SLOAD SWAP2 DUP7 ADD MLOAD PUSH8 0xFFFFFFFFFFFFFFFF AND PUSH1 0x1 PUSH1 0xA0 SHL MUL PUSH1 0x1 PUSH1 0x1 PUSH1 0xE0 SHL SUB NOT SWAP1 SWAP3 AND PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB SWAP1 SWAP4 AND SWAP3 SWAP1 SWAP3 OR OR SWAP1 SSTORE JUMPDEST POP DUP3 DUP5 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND DUP7 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND PUSH32 0xDDF252AD1BE2C89B69C2B068FC378DAA952BA7F163C4A11628F55A4DF523B3EF PUSH1 0x40 MLOAD PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 LOG4 POP POP POP POP POP JUMP JUMPDEST PUSH1 0x40 DUP1 MLOAD PUSH1 0x60 DUP2 ADD DUP3 MSTORE PUSH1 0x0 DUP1 DUP3 MSTORE PUSH1 0x20 DUP3 ADD DUP2 SWAP1 MSTORE SWAP2 DUP2 ADD SWAP2 SWAP1 SWAP2 MSTORE DUP2 PUSH1 0x0 SLOAD DUP2 LT ISZERO PUSH2 0x9AF JUMPI PUSH1 0x0 DUP2 DUP2 MSTORE PUSH1 0x4 PUSH1 0x20 SWAP1 DUP2 MSTORE PUSH1 0x40 SWAP2 DUP3 SWAP1 KECCAK256 DUP3 MLOAD PUSH1 0x60 DUP2 ADD DUP5 MSTORE SWAP1 SLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP2 AND DUP3 MSTORE PUSH1 0x1 PUSH1 0xA0 SHL DUP2 DIV PUSH8 0xFFFFFFFFFFFFFFFF AND SWAP3 DUP3 ADD SWAP3 SWAP1 SWAP3 MSTORE PUSH1 0x1 PUSH1 0xE0 SHL SWAP1 SWAP2 DIV PUSH1 0xFF AND ISZERO ISZERO SWAP2 DUP2 ADD DUP3 SWAP1 MSTORE SWAP1 PUSH2 0x9AD JUMPI DUP1 MLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND ISZERO PUSH2 0x943 JUMPI SWAP4 SWAP3 POP POP POP JUMP JUMPDEST POP PUSH1 0x0 NOT ADD PUSH1 0x0 DUP2 DUP2 MSTORE PUSH1 0x4 PUSH1 0x20 SWAP1 DUP2 MSTORE PUSH1 0x40 SWAP2 DUP3 SWAP1 KECCAK256 DUP3 MLOAD PUSH1 0x60 DUP2 ADD DUP5 MSTORE SWAP1 SLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP2 AND DUP1 DUP4 MSTORE PUSH1 0x1 PUSH1 0xA0 SHL DUP3 DIV PUSH8 0xFFFFFFFFFFFFFFFF AND SWAP4 DUP4 ADD SWAP4 SWAP1 SWAP4 MSTORE PUSH1 0x1 PUSH1 0xE0 SHL SWAP1 DIV PUSH1 0xFF AND ISZERO ISZERO SWAP3 DUP2 ADD SWAP3 SWAP1 SWAP3 MSTORE ISZERO PUSH2 0x9A8 JUMPI SWAP4 SWAP3 POP POP POP JUMP JUMPDEST PUSH2 0x943 JUMP JUMPDEST POP JUMPDEST PUSH1 0x40 MLOAD PUSH4 0x6F96CDA1 PUSH1 0xE1 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST PUSH1 0x40 MLOAD PUSH4 0xA85BD01 PUSH1 0xE1 SHL DUP2 MSTORE PUSH1 0x0 SWAP1 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP6 AND SWAP1 PUSH4 0x150B7A02 SWAP1 PUSH2 0x9FD SWAP1 CALLER SWAP1 DUP10 SWAP1 DUP9 SWAP1 DUP9 SWAP1 PUSH1 0x4 ADD PUSH2 0xEE0 JUMP JUMPDEST PUSH1 0x20 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 PUSH1 0x0 DUP8 DUP1 EXTCODESIZE ISZERO DUP1 ISZERO PUSH2 0xA17 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP GAS CALL SWAP3 POP POP POP DUP1 ISZERO PUSH2 0xA47 JUMPI POP PUSH1 0x40 DUP1 MLOAD PUSH1 0x1F RETURNDATASIZE SWAP1 DUP2 ADD PUSH1 0x1F NOT AND DUP3 ADD SWAP1 SWAP3 MSTORE PUSH2 0xA44 SWAP2 DUP2 ADD SWAP1 PUSH2 0xF1D JUMP JUMPDEST PUSH1 0x1 JUMPDEST PUSH2 0xAA2 JUMPI RETURNDATASIZE DUP1 DUP1 ISZERO PUSH2 0xA75 JUMPI PUSH1 0x40 MLOAD SWAP2 POP PUSH1 0x1F NOT PUSH1 0x3F RETURNDATASIZE ADD AND DUP3 ADD PUSH1 0x40 MSTORE RETURNDATASIZE DUP3 MSTORE RETURNDATASIZE PUSH1 0x0 PUSH1 0x20 DUP5 ADD RETURNDATACOPY PUSH2 0xA7A JUMP JUMPDEST PUSH1 0x60 SWAP2 POP JUMPDEST POP DUP1 MLOAD PUSH2 0xA9A JUMPI PUSH1 0x40 MLOAD PUSH4 0x68D2BF6B PUSH1 0xE1 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST DUP1 MLOAD DUP2 PUSH1 0x20 ADD REVERT JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xE0 SHL SUB NOT AND PUSH4 0xA85BD01 PUSH1 0xE1 SHL EQ SWAP1 POP JUMPDEST SWAP5 SWAP4 POP POP POP POP JUMP JUMPDEST PUSH1 0x60 DUP2 PUSH2 0xAE4 JUMPI POP POP PUSH1 0x40 DUP1 MLOAD DUP1 DUP3 ADD SWAP1 SWAP2 MSTORE PUSH1 0x1 DUP2 MSTORE PUSH1 0x3 PUSH1 0xFC SHL PUSH1 0x20 DUP3 ADD MSTORE SWAP1 JUMP JUMPDEST DUP2 PUSH1 0x0 JUMPDEST DUP2 ISZERO PUSH2 0xB0E JUMPI DUP1 PUSH2 0xAF8 DUP2 PUSH2 0xF50 JUMP JUMPDEST SWAP2 POP PUSH2 0xB07 SWAP1 POP PUSH1 0xA DUP4 PUSH2 0xF81 JUMP JUMPDEST SWAP2 POP PUSH2 0xAE8 JUMP JUMPDEST PUSH1 0x0 DUP2 PUSH8 0xFFFFFFFFFFFFFFFF DUP2 GT ISZERO PUSH2 0xB29 JUMPI PUSH2 0xB29 PUSH2 0xD51 JUMP JUMPDEST PUSH1 0x40 MLOAD SWAP1 DUP1 DUP3 MSTORE DUP1 PUSH1 0x1F ADD PUSH1 0x1F NOT AND PUSH1 0x20 ADD DUP3 ADD PUSH1 0x40 MSTORE DUP1 ISZERO PUSH2 0xB53 JUMPI PUSH1 0x20 DUP3 ADD DUP2 DUP1 CALLDATASIZE DUP4 CALLDATACOPY ADD SWAP1 POP JUMPDEST POP SWAP1 POP JUMPDEST DUP5 ISZERO PUSH2 0xAB8 JUMPI PUSH2 0xB68 PUSH1 0x1 DUP4 PUSH2 0xF95 JUMP JUMPDEST SWAP2 POP PUSH2 0xB75 PUSH1 0xA DUP7 PUSH2 0xFAC JUMP JUMPDEST PUSH2 0xB80 SWAP1 PUSH1 0x30 PUSH2 0xFC0 JUMP JUMPDEST PUSH1 0xF8 SHL DUP2 DUP4 DUP2 MLOAD DUP2 LT PUSH2 0xB95 JUMPI PUSH2 0xB95 PUSH2 0xFD8 JUMP JUMPDEST PUSH1 0x20 ADD ADD SWAP1 PUSH1 0x1 PUSH1 0x1 PUSH1 0xF8 SHL SUB NOT AND SWAP1 DUP2 PUSH1 0x0 BYTE SWAP1 MSTORE8 POP PUSH2 0xBB7 PUSH1 0xA DUP7 PUSH2 0xF81 JUMP JUMPDEST SWAP5 POP PUSH2 0xB57 JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xE0 SHL SUB NOT DUP2 AND DUP2 EQ PUSH2 0xBD4 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 DUP5 SUB SLT ISZERO PUSH2 0xBE9 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP2 CALLDATALOAD PUSH2 0x609 DUP2 PUSH2 0xBBE JUMP JUMPDEST PUSH1 0x0 JUMPDEST DUP4 DUP2 LT ISZERO PUSH2 0xC0F JUMPI DUP2 DUP2 ADD MLOAD DUP4 DUP3 ADD MSTORE PUSH1 0x20 ADD PUSH2 0xBF7 JUMP JUMPDEST DUP4 DUP2 GT ISZERO PUSH2 0x578 JUMPI POP POP PUSH1 0x0 SWAP2 ADD MSTORE JUMP JUMPDEST PUSH1 0x0 DUP2 MLOAD DUP1 DUP5 MSTORE PUSH2 0xC38 DUP2 PUSH1 0x20 DUP7 ADD PUSH1 0x20 DUP7 ADD PUSH2 0xBF4 JUMP JUMPDEST PUSH1 0x1F ADD PUSH1 0x1F NOT AND SWAP3 SWAP1 SWAP3 ADD PUSH1 0x20 ADD SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x20 DUP2 MSTORE PUSH1 0x0 PUSH2 0x609 PUSH1 0x20 DUP4 ADD DUP5 PUSH2 0xC20 JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 DUP5 SUB SLT ISZERO PUSH2 0xC71 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP CALLDATALOAD SWAP2 SWAP1 POP JUMP JUMPDEST DUP1 CALLDATALOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP2 AND DUP2 EQ PUSH2 0xC8F JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x40 DUP4 DUP6 SUB SLT ISZERO PUSH2 0xCA7 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH2 0xCB0 DUP4 PUSH2 0xC78 JUMP JUMPDEST SWAP5 PUSH1 0x20 SWAP4 SWAP1 SWAP4 ADD CALLDATALOAD SWAP4 POP POP POP JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x0 PUSH1 0x60 DUP5 DUP7 SUB SLT ISZERO PUSH2 0xCD3 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH2 0xCDC DUP5 PUSH2 0xC78 JUMP JUMPDEST SWAP3 POP PUSH2 0xCEA PUSH1 0x20 DUP6 ADD PUSH2 0xC78 JUMP JUMPDEST SWAP2 POP PUSH1 0x40 DUP5 ADD CALLDATALOAD SWAP1 POP SWAP3 POP SWAP3 POP SWAP3 JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 DUP5 SUB SLT ISZERO PUSH2 0xD0C JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH2 0x609 DUP3 PUSH2 0xC78 JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x40 DUP4 DUP6 SUB SLT ISZERO PUSH2 0xD28 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH2 0xD31 DUP4 PUSH2 0xC78 JUMP JUMPDEST SWAP2 POP PUSH1 0x20 DUP4 ADD CALLDATALOAD DUP1 ISZERO ISZERO DUP2 EQ PUSH2 0xD46 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP1 SWAP2 POP POP SWAP3 POP SWAP3 SWAP1 POP JUMP JUMPDEST PUSH4 0x4E487B71 PUSH1 0xE0 SHL PUSH1 0x0 MSTORE PUSH1 0x41 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH1 0x0 REVERT JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x0 DUP1 PUSH1 0x80 DUP6 DUP8 SUB SLT ISZERO PUSH2 0xD7D JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH2 0xD86 DUP6 PUSH2 0xC78 JUMP JUMPDEST SWAP4 POP PUSH2 0xD94 PUSH1 0x20 DUP7 ADD PUSH2 0xC78 JUMP JUMPDEST SWAP3 POP PUSH1 0x40 DUP6 ADD CALLDATALOAD SWAP2 POP PUSH1 0x60 DUP6 ADD CALLDATALOAD PUSH8 0xFFFFFFFFFFFFFFFF DUP1 DUP3 GT ISZERO PUSH2 0xDB8 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP2 DUP8 ADD SWAP2 POP DUP8 PUSH1 0x1F DUP4 ADD SLT PUSH2 0xDCC JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP2 CALLDATALOAD DUP2 DUP2 GT ISZERO PUSH2 0xDDE JUMPI PUSH2 0xDDE PUSH2 0xD51 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH1 0x1F DUP3 ADD PUSH1 0x1F NOT SWAP1 DUP2 AND PUSH1 0x3F ADD AND DUP2 ADD SWAP1 DUP4 DUP3 GT DUP2 DUP4 LT OR ISZERO PUSH2 0xE06 JUMPI PUSH2 0xE06 PUSH2 0xD51 JUMP JUMPDEST DUP2 PUSH1 0x40 MSTORE DUP3 DUP2 MSTORE DUP11 PUSH1 0x20 DUP5 DUP8 ADD ADD GT ISZERO PUSH2 0xE1F JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP3 PUSH1 0x20 DUP7 ADD PUSH1 0x20 DUP4 ADD CALLDATACOPY PUSH1 0x0 PUSH1 0x20 DUP5 DUP4 ADD ADD MSTORE DUP1 SWAP6 POP POP POP POP POP POP SWAP3 SWAP6 SWAP2 SWAP5 POP SWAP3 POP JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x40 DUP4 DUP6 SUB SLT ISZERO PUSH2 0xE56 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH2 0xE5F DUP4 PUSH2 0xC78 JUMP JUMPDEST SWAP2 POP PUSH2 0xE6D PUSH1 0x20 DUP5 ADD PUSH2 0xC78 JUMP JUMPDEST SWAP1 POP SWAP3 POP SWAP3 SWAP1 POP JUMP JUMPDEST PUSH1 0x1 DUP2 DUP2 SHR SWAP1 DUP3 AND DUP1 PUSH2 0xE8A JUMPI PUSH1 0x7F DUP3 AND SWAP2 POP JUMPDEST PUSH1 0x20 DUP3 LT DUP2 EQ ISZERO PUSH2 0xEAB JUMPI PUSH4 0x4E487B71 PUSH1 0xE0 SHL PUSH1 0x0 MSTORE PUSH1 0x22 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH1 0x0 REVERT JUMPDEST POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 DUP4 MLOAD PUSH2 0xEC3 DUP2 DUP5 PUSH1 0x20 DUP9 ADD PUSH2 0xBF4 JUMP JUMPDEST DUP4 MLOAD SWAP1 DUP4 ADD SWAP1 PUSH2 0xED7 DUP2 DUP4 PUSH1 0x20 DUP9 ADD PUSH2 0xBF4 JUMP JUMPDEST ADD SWAP5 SWAP4 POP POP POP POP JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP6 DUP2 AND DUP3 MSTORE DUP5 AND PUSH1 0x20 DUP3 ADD MSTORE PUSH1 0x40 DUP2 ADD DUP4 SWAP1 MSTORE PUSH1 0x80 PUSH1 0x60 DUP3 ADD DUP2 SWAP1 MSTORE PUSH1 0x0 SWAP1 PUSH2 0xF13 SWAP1 DUP4 ADD DUP5 PUSH2 0xC20 JUMP JUMPDEST SWAP7 SWAP6 POP POP POP POP POP POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 DUP5 SUB SLT ISZERO PUSH2 0xF2F JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP2 MLOAD PUSH2 0x609 DUP2 PUSH2 0xBBE JUMP JUMPDEST PUSH4 0x4E487B71 PUSH1 0xE0 SHL PUSH1 0x0 MSTORE PUSH1 0x11 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH1 0x0 REVERT JUMPDEST PUSH1 0x0 PUSH1 0x0 NOT DUP3 EQ ISZERO PUSH2 0xF64 JUMPI PUSH2 0xF64 PUSH2 0xF3A JUMP JUMPDEST POP PUSH1 0x1 ADD SWAP1 JUMP JUMPDEST PUSH4 0x4E487B71 PUSH1 0xE0 SHL PUSH1 0x0 MSTORE PUSH1 0x12 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH1 0x0 REVERT JUMPDEST PUSH1 0x0 DUP3 PUSH2 0xF90 JUMPI PUSH2 0xF90 PUSH2 0xF6B JUMP JUMPDEST POP DIV SWAP1 JUMP JUMPDEST PUSH1 0x0 DUP3 DUP3 LT ISZERO PUSH2 0xFA7 JUMPI PUSH2 0xFA7 PUSH2 0xF3A JUMP JUMPDEST POP SUB SWAP1 JUMP JUMPDEST PUSH1 0x0 DUP3 PUSH2 0xFBB JUMPI PUSH2 0xFBB PUSH2 0xF6B JUMP JUMPDEST POP MOD SWAP1 JUMP JUMPDEST PUSH1 0x0 DUP3 NOT DUP3 GT ISZERO PUSH2 0xFD3 JUMPI PUSH2 0xFD3 PUSH2 0xF3A JUMP JUMPDEST POP ADD SWAP1 JUMP JUMPDEST PUSH4 0x4E487B71 PUSH1 0xE0 SHL PUSH1 0x0 MSTORE PUSH1 0x32 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH1 0x0 REVERT INVALID LOG2 PUSH5 0x6970667358 0x22 SLT KECCAK256 CALLVALUE MOD CODECOPY 0xA5 BYTE 0x4A 0xCB PUSH26 0x3DB0B70A664B822EC286F6D1F20A48FFBC513A8664F4A81E6473 PUSH16 0x6C634300080900330000000000000000 ",
							"sourceMap": "1708:20115:12:-:0;;;3600:154;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;3666:13;;;;:5;;:13;;;;;:::i;:::-;-1:-1:-1;3689:17:12;;;;:7;;:17;;;;;:::i;:::-;-1:-1:-1;;3902:7:12;3716:31;;-1:-1:-1;1708:20115:12;;;;;;;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;-1:-1:-1;1708:20115:12;;;-1:-1:-1;1708:20115:12;:::i;:::-;;;:::o;:::-;;;;;;;;;;;;;;;14:127:13;75:10;70:3;66:20;63:1;56:31;106:4;103:1;96:15;130:4;127:1;120:15;146:885;200:5;253:3;246:4;238:6;234:17;230:27;220:55;;271:1;268;261:12;220:55;294:13;;-1:-1:-1;;;;;356:10:13;;;353:36;;;369:18;;:::i;:::-;444:2;438:9;412:2;498:13;;-1:-1:-1;;494:22:13;;;518:2;490:31;486:40;474:53;;;542:18;;;562:22;;;539:46;536:72;;;588:18;;:::i;:::-;628:10;624:2;617:22;663:2;655:6;648:18;685:4;675:14;;730:3;725:2;720;712:6;708:15;704:24;701:33;698:53;;;747:1;744;737:12;698:53;769:1;760:10;;779:133;793:2;790:1;787:9;779:133;;;881:14;;;877:23;;871:30;850:14;;;846:23;;839:63;804:10;;;;779:133;;;930:2;927:1;924:9;921:80;;;989:1;984:2;979;971:6;967:15;963:24;956:35;921:80;1019:6;146:885;-1:-1:-1;;;;;;146:885:13:o;1036:562::-;1135:6;1143;1196:2;1184:9;1175:7;1171:23;1167:32;1164:52;;;1212:1;1209;1202:12;1164:52;1239:16;;-1:-1:-1;;;;;1304:14:13;;;1301:34;;;1331:1;1328;1321:12;1301:34;1354:61;1407:7;1398:6;1387:9;1383:22;1354:61;:::i;:::-;1344:71;;1461:2;1450:9;1446:18;1440:25;1424:41;;1490:2;1480:8;1477:16;1474:36;;;1506:1;1503;1496:12;1474:36;;1529:63;1584:7;1573:8;1562:9;1558:24;1529:63;:::i;:::-;1519:73;;;1036:562;;;;;:::o;1603:380::-;1682:1;1678:12;;;;1725;;;1746:61;;1800:4;1792:6;1788:17;1778:27;;1746:61;1853:2;1845:6;1842:14;1822:18;1819:38;1816:161;;;1899:10;1894:3;1890:20;1887:1;1880:31;1934:4;1931:1;1924:15;1962:4;1959:1;1952:15;1816:161;;1603:380;;;:::o;:::-;1708:20115:12;;;;;;"
						},
						"deployedBytecode": {
							"functionDebugData": {
								"@_afterTokenTransfers_2728": {
									"entryPoint": null,
									"id": 2728,
									"parameterSlots": 4,
									"returnSlots": 0
								},
								"@_approve_2647": {
									"entryPoint": 1595,
									"id": 2647,
									"parameterSlots": 3,
									"returnSlots": 0
								},
								"@_baseURI_1901": {
									"entryPoint": null,
									"id": 1901,
									"parameterSlots": 0,
									"returnSlots": 1
								},
								"@_beforeTokenTransfers_2715": {
									"entryPoint": null,
									"id": 2715,
									"parameterSlots": 4,
									"returnSlots": 0
								},
								"@_checkContractOnERC721Received_2702": {
									"entryPoint": 2504,
									"id": 2702,
									"parameterSlots": 4,
									"returnSlots": 1
								},
								"@_exists_2118": {
									"entryPoint": 1552,
									"id": 2118,
									"parameterSlots": 1,
									"returnSlots": 1
								},
								"@_msgSender_603": {
									"entryPoint": null,
									"id": 603,
									"parameterSlots": 0,
									"returnSlots": 1
								},
								"@_startTokenId_1549": {
									"entryPoint": null,
									"id": 1549,
									"parameterSlots": 0,
									"returnSlots": 1
								},
								"@_transfer_2483": {
									"entryPoint": 1687,
									"id": 2483,
									"parameterSlots": 3,
									"returnSlots": 0
								},
								"@approve_1947": {
									"entryPoint": 883,
									"id": 1947,
									"parameterSlots": 2,
									"returnSlots": 0
								},
								"@balanceOf_1636": {
									"entryPoint": 1081,
									"id": 1636,
									"parameterSlots": 1,
									"returnSlots": 1
								},
								"@getApproved_1969": {
									"entryPoint": 815,
									"id": 1969,
									"parameterSlots": 1,
									"returnSlots": 1
								},
								"@isApprovedForAll_2021": {
									"entryPoint": null,
									"id": 2021,
									"parameterSlots": 2,
									"returnSlots": 1
								},
								"@isContract_314": {
									"entryPoint": null,
									"id": 314,
									"parameterSlots": 1,
									"returnSlots": 1
								},
								"@name_1839": {
									"entryPoint": 669,
									"id": 1839,
									"parameterSlots": 0,
									"returnSlots": 1
								},
								"@ownerOf_1829": {
									"entryPoint": 1063,
									"id": 1829,
									"parameterSlots": 1,
									"returnSlots": 1
								},
								"@ownershipOf_1814": {
									"entryPoint": 2220,
									"id": 1814,
									"parameterSlots": 1,
									"returnSlots": 1
								},
								"@safeTransferFrom_2058": {
									"entryPoint": 1036,
									"id": 2058,
									"parameterSlots": 3,
									"returnSlots": 0
								},
								"@safeTransferFrom_2094": {
									"entryPoint": 1325,
									"id": 2094,
									"parameterSlots": 4,
									"returnSlots": 0
								},
								"@setApprovalForAll_2003": {
									"entryPoint": 1175,
									"id": 2003,
									"parameterSlots": 2,
									"returnSlots": 0
								},
								"@supportsInterface_1608": {
									"entryPoint": 587,
									"id": 1608,
									"parameterSlots": 1,
									"returnSlots": 1
								},
								"@supportsInterface_932": {
									"entryPoint": null,
									"id": 932,
									"parameterSlots": 1,
									"returnSlots": 1
								},
								"@symbol_1849": {
									"entryPoint": 1160,
									"id": 1849,
									"parameterSlots": 0,
									"returnSlots": 1
								},
								"@toString_698": {
									"entryPoint": 2752,
									"id": 698,
									"parameterSlots": 1,
									"returnSlots": 1
								},
								"@tokenURI_1892": {
									"entryPoint": 1406,
									"id": 1892,
									"parameterSlots": 1,
									"returnSlots": 1
								},
								"@totalSupply_1564": {
									"entryPoint": null,
									"id": 1564,
									"parameterSlots": 0,
									"returnSlots": 1
								},
								"@transferFrom_2039": {
									"entryPoint": 1025,
									"id": 2039,
									"parameterSlots": 3,
									"returnSlots": 0
								},
								"abi_decode_address": {
									"entryPoint": 3192,
									"id": null,
									"parameterSlots": 1,
									"returnSlots": 1
								},
								"abi_decode_tuple_t_address": {
									"entryPoint": 3322,
									"id": null,
									"parameterSlots": 2,
									"returnSlots": 1
								},
								"abi_decode_tuple_t_addresst_address": {
									"entryPoint": 3651,
									"id": null,
									"parameterSlots": 2,
									"returnSlots": 2
								},
								"abi_decode_tuple_t_addresst_addresst_uint256": {
									"entryPoint": 3262,
									"id": null,
									"parameterSlots": 2,
									"returnSlots": 3
								},
								"abi_decode_tuple_t_addresst_addresst_uint256t_bytes_memory_ptr": {
									"entryPoint": 3431,
									"id": null,
									"parameterSlots": 2,
									"returnSlots": 4
								},
								"abi_decode_tuple_t_addresst_bool": {
									"entryPoint": 3349,
									"id": null,
									"parameterSlots": 2,
									"returnSlots": 2
								},
								"abi_decode_tuple_t_addresst_uint256": {
									"entryPoint": 3220,
									"id": null,
									"parameterSlots": 2,
									"returnSlots": 2
								},
								"abi_decode_tuple_t_bytes4": {
									"entryPoint": 3031,
									"id": null,
									"parameterSlots": 2,
									"returnSlots": 1
								},
								"abi_decode_tuple_t_bytes4_fromMemory": {
									"entryPoint": 3869,
									"id": null,
									"parameterSlots": 2,
									"returnSlots": 1
								},
								"abi_decode_tuple_t_uint256": {
									"entryPoint": 3167,
									"id": null,
									"parameterSlots": 2,
									"returnSlots": 1
								},
								"abi_encode_string": {
									"entryPoint": 3104,
									"id": null,
									"parameterSlots": 2,
									"returnSlots": 1
								},
								"abi_encode_tuple_packed_t_string_memory_ptr_t_string_memory_ptr__to_t_string_memory_ptr_t_string_memory_ptr__nonPadded_inplace_fromStack_reversed": {
									"entryPoint": 3761,
									"id": null,
									"parameterSlots": 3,
									"returnSlots": 1
								},
								"abi_encode_tuple_t_address__to_t_address__fromStack_reversed": {
									"entryPoint": null,
									"id": null,
									"parameterSlots": 2,
									"returnSlots": 1
								},
								"abi_encode_tuple_t_address_t_address_t_uint256_t_bytes_memory_ptr__to_t_address_t_address_t_uint256_t_bytes_memory_ptr__fromStack_reversed": {
									"entryPoint": 3808,
									"id": null,
									"parameterSlots": 5,
									"returnSlots": 1
								},
								"abi_encode_tuple_t_bool__to_t_bool__fromStack_reversed": {
									"entryPoint": null,
									"id": null,
									"parameterSlots": 2,
									"returnSlots": 1
								},
								"abi_encode_tuple_t_string_memory_ptr__to_t_string_memory_ptr__fromStack_reversed": {
									"entryPoint": 3148,
									"id": null,
									"parameterSlots": 2,
									"returnSlots": 1
								},
								"abi_encode_tuple_t_uint256__to_t_uint256__fromStack_reversed": {
									"entryPoint": null,
									"id": null,
									"parameterSlots": 2,
									"returnSlots": 1
								},
								"checked_add_t_uint256": {
									"entryPoint": 4032,
									"id": null,
									"parameterSlots": 2,
									"returnSlots": 1
								},
								"checked_div_t_uint256": {
									"entryPoint": 3969,
									"id": null,
									"parameterSlots": 2,
									"returnSlots": 1
								},
								"checked_sub_t_uint256": {
									"entryPoint": 3989,
									"id": null,
									"parameterSlots": 2,
									"returnSlots": 1
								},
								"copy_memory_to_memory": {
									"entryPoint": 3060,
									"id": null,
									"parameterSlots": 3,
									"returnSlots": 0
								},
								"extract_byte_array_length": {
									"entryPoint": 3702,
									"id": null,
									"parameterSlots": 1,
									"returnSlots": 1
								},
								"increment_t_uint256": {
									"entryPoint": 3920,
									"id": null,
									"parameterSlots": 1,
									"returnSlots": 1
								},
								"mod_t_uint256": {
									"entryPoint": 4012,
									"id": null,
									"parameterSlots": 2,
									"returnSlots": 1
								},
								"panic_error_0x11": {
									"entryPoint": 3898,
									"id": null,
									"parameterSlots": 0,
									"returnSlots": 0
								},
								"panic_error_0x12": {
									"entryPoint": 3947,
									"id": null,
									"parameterSlots": 0,
									"returnSlots": 0
								},
								"panic_error_0x32": {
									"entryPoint": 4056,
									"id": null,
									"parameterSlots": 0,
									"returnSlots": 0
								},
								"panic_error_0x41": {
									"entryPoint": 3409,
									"id": null,
									"parameterSlots": 0,
									"returnSlots": 0
								},
								"validator_revert_bytes4": {
									"entryPoint": 3006,
									"id": null,
									"parameterSlots": 1,
									"returnSlots": 0
								}
							},
							"generatedSources": [
								{
									"ast": {
										"nodeType": "YulBlock",
										"src": "0:7417:13",
										"statements": [
											{
												"nodeType": "YulBlock",
												"src": "6:3:13",
												"statements": []
											},
											{
												"body": {
													"nodeType": "YulBlock",
													"src": "58:87:13",
													"statements": [
														{
															"body": {
																"nodeType": "YulBlock",
																"src": "123:16:13",
																"statements": [
																	{
																		"expression": {
																			"arguments": [
																				{
																					"kind": "number",
																					"nodeType": "YulLiteral",
																					"src": "132:1:13",
																					"type": "",
																					"value": "0"
																				},
																				{
																					"kind": "number",
																					"nodeType": "YulLiteral",
																					"src": "135:1:13",
																					"type": "",
																					"value": "0"
																				}
																			],
																			"functionName": {
																				"name": "revert",
																				"nodeType": "YulIdentifier",
																				"src": "125:6:13"
																			},
																			"nodeType": "YulFunctionCall",
																			"src": "125:12:13"
																		},
																		"nodeType": "YulExpressionStatement",
																		"src": "125:12:13"
																	}
																]
															},
															"condition": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"name": "value",
																				"nodeType": "YulIdentifier",
																				"src": "81:5:13"
																			},
																			{
																				"arguments": [
																					{
																						"name": "value",
																						"nodeType": "YulIdentifier",
																						"src": "92:5:13"
																					},
																					{
																						"arguments": [
																							{
																								"kind": "number",
																								"nodeType": "YulLiteral",
																								"src": "103:3:13",
																								"type": "",
																								"value": "224"
																							},
																							{
																								"kind": "number",
																								"nodeType": "YulLiteral",
																								"src": "108:10:13",
																								"type": "",
																								"value": "0xffffffff"
																							}
																						],
																						"functionName": {
																							"name": "shl",
																							"nodeType": "YulIdentifier",
																							"src": "99:3:13"
																						},
																						"nodeType": "YulFunctionCall",
																						"src": "99:20:13"
																					}
																				],
																				"functionName": {
																					"name": "and",
																					"nodeType": "YulIdentifier",
																					"src": "88:3:13"
																				},
																				"nodeType": "YulFunctionCall",
																				"src": "88:32:13"
																			}
																		],
																		"functionName": {
																			"name": "eq",
																			"nodeType": "YulIdentifier",
																			"src": "78:2:13"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "78:43:13"
																	}
																],
																"functionName": {
																	"name": "iszero",
																	"nodeType": "YulIdentifier",
																	"src": "71:6:13"
																},
																"nodeType": "YulFunctionCall",
																"src": "71:51:13"
															},
															"nodeType": "YulIf",
															"src": "68:71:13"
														}
													]
												},
												"name": "validator_revert_bytes4",
												"nodeType": "YulFunctionDefinition",
												"parameters": [
													{
														"name": "value",
														"nodeType": "YulTypedName",
														"src": "47:5:13",
														"type": ""
													}
												],
												"src": "14:131:13"
											},
											{
												"body": {
													"nodeType": "YulBlock",
													"src": "219:176:13",
													"statements": [
														{
															"body": {
																"nodeType": "YulBlock",
																"src": "265:16:13",
																"statements": [
																	{
																		"expression": {
																			"arguments": [
																				{
																					"kind": "number",
																					"nodeType": "YulLiteral",
																					"src": "274:1:13",
																					"type": "",
																					"value": "0"
																				},
																				{
																					"kind": "number",
																					"nodeType": "YulLiteral",
																					"src": "277:1:13",
																					"type": "",
																					"value": "0"
																				}
																			],
																			"functionName": {
																				"name": "revert",
																				"nodeType": "YulIdentifier",
																				"src": "267:6:13"
																			},
																			"nodeType": "YulFunctionCall",
																			"src": "267:12:13"
																		},
																		"nodeType": "YulExpressionStatement",
																		"src": "267:12:13"
																	}
																]
															},
															"condition": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"name": "dataEnd",
																				"nodeType": "YulIdentifier",
																				"src": "240:7:13"
																			},
																			{
																				"name": "headStart",
																				"nodeType": "YulIdentifier",
																				"src": "249:9:13"
																			}
																		],
																		"functionName": {
																			"name": "sub",
																			"nodeType": "YulIdentifier",
																			"src": "236:3:13"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "236:23:13"
																	},
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "261:2:13",
																		"type": "",
																		"value": "32"
																	}
																],
																"functionName": {
																	"name": "slt",
																	"nodeType": "YulIdentifier",
																	"src": "232:3:13"
																},
																"nodeType": "YulFunctionCall",
																"src": "232:32:13"
															},
															"nodeType": "YulIf",
															"src": "229:52:13"
														},
														{
															"nodeType": "YulVariableDeclaration",
															"src": "290:36:13",
															"value": {
																"arguments": [
																	{
																		"name": "headStart",
																		"nodeType": "YulIdentifier",
																		"src": "316:9:13"
																	}
																],
																"functionName": {
																	"name": "calldataload",
																	"nodeType": "YulIdentifier",
																	"src": "303:12:13"
																},
																"nodeType": "YulFunctionCall",
																"src": "303:23:13"
															},
															"variables": [
																{
																	"name": "value",
																	"nodeType": "YulTypedName",
																	"src": "294:5:13",
																	"type": ""
																}
															]
														},
														{
															"expression": {
																"arguments": [
																	{
																		"name": "value",
																		"nodeType": "YulIdentifier",
																		"src": "359:5:13"
																	}
																],
																"functionName": {
																	"name": "validator_revert_bytes4",
																	"nodeType": "YulIdentifier",
																	"src": "335:23:13"
																},
																"nodeType": "YulFunctionCall",
																"src": "335:30:13"
															},
															"nodeType": "YulExpressionStatement",
															"src": "335:30:13"
														},
														{
															"nodeType": "YulAssignment",
															"src": "374:15:13",
															"value": {
																"name": "value",
																"nodeType": "YulIdentifier",
																"src": "384:5:13"
															},
															"variableNames": [
																{
																	"name": "value0",
																	"nodeType": "YulIdentifier",
																	"src": "374:6:13"
																}
															]
														}
													]
												},
												"name": "abi_decode_tuple_t_bytes4",
												"nodeType": "YulFunctionDefinition",
												"parameters": [
													{
														"name": "headStart",
														"nodeType": "YulTypedName",
														"src": "185:9:13",
														"type": ""
													},
													{
														"name": "dataEnd",
														"nodeType": "YulTypedName",
														"src": "196:7:13",
														"type": ""
													}
												],
												"returnVariables": [
													{
														"name": "value0",
														"nodeType": "YulTypedName",
														"src": "208:6:13",
														"type": ""
													}
												],
												"src": "150:245:13"
											},
											{
												"body": {
													"nodeType": "YulBlock",
													"src": "495:92:13",
													"statements": [
														{
															"nodeType": "YulAssignment",
															"src": "505:26:13",
															"value": {
																"arguments": [
																	{
																		"name": "headStart",
																		"nodeType": "YulIdentifier",
																		"src": "517:9:13"
																	},
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "528:2:13",
																		"type": "",
																		"value": "32"
																	}
																],
																"functionName": {
																	"name": "add",
																	"nodeType": "YulIdentifier",
																	"src": "513:3:13"
																},
																"nodeType": "YulFunctionCall",
																"src": "513:18:13"
															},
															"variableNames": [
																{
																	"name": "tail",
																	"nodeType": "YulIdentifier",
																	"src": "505:4:13"
																}
															]
														},
														{
															"expression": {
																"arguments": [
																	{
																		"name": "headStart",
																		"nodeType": "YulIdentifier",
																		"src": "547:9:13"
																	},
																	{
																		"arguments": [
																			{
																				"arguments": [
																					{
																						"name": "value0",
																						"nodeType": "YulIdentifier",
																						"src": "572:6:13"
																					}
																				],
																				"functionName": {
																					"name": "iszero",
																					"nodeType": "YulIdentifier",
																					"src": "565:6:13"
																				},
																				"nodeType": "YulFunctionCall",
																				"src": "565:14:13"
																			}
																		],
																		"functionName": {
																			"name": "iszero",
																			"nodeType": "YulIdentifier",
																			"src": "558:6:13"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "558:22:13"
																	}
																],
																"functionName": {
																	"name": "mstore",
																	"nodeType": "YulIdentifier",
																	"src": "540:6:13"
																},
																"nodeType": "YulFunctionCall",
																"src": "540:41:13"
															},
															"nodeType": "YulExpressionStatement",
															"src": "540:41:13"
														}
													]
												},
												"name": "abi_encode_tuple_t_bool__to_t_bool__fromStack_reversed",
												"nodeType": "YulFunctionDefinition",
												"parameters": [
													{
														"name": "headStart",
														"nodeType": "YulTypedName",
														"src": "464:9:13",
														"type": ""
													},
													{
														"name": "value0",
														"nodeType": "YulTypedName",
														"src": "475:6:13",
														"type": ""
													}
												],
												"returnVariables": [
													{
														"name": "tail",
														"nodeType": "YulTypedName",
														"src": "486:4:13",
														"type": ""
													}
												],
												"src": "400:187:13"
											},
											{
												"body": {
													"nodeType": "YulBlock",
													"src": "645:205:13",
													"statements": [
														{
															"nodeType": "YulVariableDeclaration",
															"src": "655:10:13",
															"value": {
																"kind": "number",
																"nodeType": "YulLiteral",
																"src": "664:1:13",
																"type": "",
																"value": "0"
															},
															"variables": [
																{
																	"name": "i",
																	"nodeType": "YulTypedName",
																	"src": "659:1:13",
																	"type": ""
																}
															]
														},
														{
															"body": {
																"nodeType": "YulBlock",
																"src": "724:63:13",
																"statements": [
																	{
																		"expression": {
																			"arguments": [
																				{
																					"arguments": [
																						{
																							"name": "dst",
																							"nodeType": "YulIdentifier",
																							"src": "749:3:13"
																						},
																						{
																							"name": "i",
																							"nodeType": "YulIdentifier",
																							"src": "754:1:13"
																						}
																					],
																					"functionName": {
																						"name": "add",
																						"nodeType": "YulIdentifier",
																						"src": "745:3:13"
																					},
																					"nodeType": "YulFunctionCall",
																					"src": "745:11:13"
																				},
																				{
																					"arguments": [
																						{
																							"arguments": [
																								{
																									"name": "src",
																									"nodeType": "YulIdentifier",
																									"src": "768:3:13"
																								},
																								{
																									"name": "i",
																									"nodeType": "YulIdentifier",
																									"src": "773:1:13"
																								}
																							],
																							"functionName": {
																								"name": "add",
																								"nodeType": "YulIdentifier",
																								"src": "764:3:13"
																							},
																							"nodeType": "YulFunctionCall",
																							"src": "764:11:13"
																						}
																					],
																					"functionName": {
																						"name": "mload",
																						"nodeType": "YulIdentifier",
																						"src": "758:5:13"
																					},
																					"nodeType": "YulFunctionCall",
																					"src": "758:18:13"
																				}
																			],
																			"functionName": {
																				"name": "mstore",
																				"nodeType": "YulIdentifier",
																				"src": "738:6:13"
																			},
																			"nodeType": "YulFunctionCall",
																			"src": "738:39:13"
																		},
																		"nodeType": "YulExpressionStatement",
																		"src": "738:39:13"
																	}
																]
															},
															"condition": {
																"arguments": [
																	{
																		"name": "i",
																		"nodeType": "YulIdentifier",
																		"src": "685:1:13"
																	},
																	{
																		"name": "length",
																		"nodeType": "YulIdentifier",
																		"src": "688:6:13"
																	}
																],
																"functionName": {
																	"name": "lt",
																	"nodeType": "YulIdentifier",
																	"src": "682:2:13"
																},
																"nodeType": "YulFunctionCall",
																"src": "682:13:13"
															},
															"nodeType": "YulForLoop",
															"post": {
																"nodeType": "YulBlock",
																"src": "696:19:13",
																"statements": [
																	{
																		"nodeType": "YulAssignment",
																		"src": "698:15:13",
																		"value": {
																			"arguments": [
																				{
																					"name": "i",
																					"nodeType": "YulIdentifier",
																					"src": "707:1:13"
																				},
																				{
																					"kind": "number",
																					"nodeType": "YulLiteral",
																					"src": "710:2:13",
																					"type": "",
																					"value": "32"
																				}
																			],
																			"functionName": {
																				"name": "add",
																				"nodeType": "YulIdentifier",
																				"src": "703:3:13"
																			},
																			"nodeType": "YulFunctionCall",
																			"src": "703:10:13"
																		},
																		"variableNames": [
																			{
																				"name": "i",
																				"nodeType": "YulIdentifier",
																				"src": "698:1:13"
																			}
																		]
																	}
																]
															},
															"pre": {
																"nodeType": "YulBlock",
																"src": "678:3:13",
																"statements": []
															},
															"src": "674:113:13"
														},
														{
															"body": {
																"nodeType": "YulBlock",
																"src": "813:31:13",
																"statements": [
																	{
																		"expression": {
																			"arguments": [
																				{
																					"arguments": [
																						{
																							"name": "dst",
																							"nodeType": "YulIdentifier",
																							"src": "826:3:13"
																						},
																						{
																							"name": "length",
																							"nodeType": "YulIdentifier",
																							"src": "831:6:13"
																						}
																					],
																					"functionName": {
																						"name": "add",
																						"nodeType": "YulIdentifier",
																						"src": "822:3:13"
																					},
																					"nodeType": "YulFunctionCall",
																					"src": "822:16:13"
																				},
																				{
																					"kind": "number",
																					"nodeType": "YulLiteral",
																					"src": "840:1:13",
																					"type": "",
																					"value": "0"
																				}
																			],
																			"functionName": {
																				"name": "mstore",
																				"nodeType": "YulIdentifier",
																				"src": "815:6:13"
																			},
																			"nodeType": "YulFunctionCall",
																			"src": "815:27:13"
																		},
																		"nodeType": "YulExpressionStatement",
																		"src": "815:27:13"
																	}
																]
															},
															"condition": {
																"arguments": [
																	{
																		"name": "i",
																		"nodeType": "YulIdentifier",
																		"src": "802:1:13"
																	},
																	{
																		"name": "length",
																		"nodeType": "YulIdentifier",
																		"src": "805:6:13"
																	}
																],
																"functionName": {
																	"name": "gt",
																	"nodeType": "YulIdentifier",
																	"src": "799:2:13"
																},
																"nodeType": "YulFunctionCall",
																"src": "799:13:13"
															},
															"nodeType": "YulIf",
															"src": "796:48:13"
														}
													]
												},
												"name": "copy_memory_to_memory",
												"nodeType": "YulFunctionDefinition",
												"parameters": [
													{
														"name": "src",
														"nodeType": "YulTypedName",
														"src": "623:3:13",
														"type": ""
													},
													{
														"name": "dst",
														"nodeType": "YulTypedName",
														"src": "628:3:13",
														"type": ""
													},
													{
														"name": "length",
														"nodeType": "YulTypedName",
														"src": "633:6:13",
														"type": ""
													}
												],
												"src": "592:258:13"
											},
											{
												"body": {
													"nodeType": "YulBlock",
													"src": "905:208:13",
													"statements": [
														{
															"nodeType": "YulVariableDeclaration",
															"src": "915:26:13",
															"value": {
																"arguments": [
																	{
																		"name": "value",
																		"nodeType": "YulIdentifier",
																		"src": "935:5:13"
																	}
																],
																"functionName": {
																	"name": "mload",
																	"nodeType": "YulIdentifier",
																	"src": "929:5:13"
																},
																"nodeType": "YulFunctionCall",
																"src": "929:12:13"
															},
															"variables": [
																{
																	"name": "length",
																	"nodeType": "YulTypedName",
																	"src": "919:6:13",
																	"type": ""
																}
															]
														},
														{
															"expression": {
																"arguments": [
																	{
																		"name": "pos",
																		"nodeType": "YulIdentifier",
																		"src": "957:3:13"
																	},
																	{
																		"name": "length",
																		"nodeType": "YulIdentifier",
																		"src": "962:6:13"
																	}
																],
																"functionName": {
																	"name": "mstore",
																	"nodeType": "YulIdentifier",
																	"src": "950:6:13"
																},
																"nodeType": "YulFunctionCall",
																"src": "950:19:13"
															},
															"nodeType": "YulExpressionStatement",
															"src": "950:19:13"
														},
														{
															"expression": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"name": "value",
																				"nodeType": "YulIdentifier",
																				"src": "1004:5:13"
																			},
																			{
																				"kind": "number",
																				"nodeType": "YulLiteral",
																				"src": "1011:4:13",
																				"type": "",
																				"value": "0x20"
																			}
																		],
																		"functionName": {
																			"name": "add",
																			"nodeType": "YulIdentifier",
																			"src": "1000:3:13"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "1000:16:13"
																	},
																	{
																		"arguments": [
																			{
																				"name": "pos",
																				"nodeType": "YulIdentifier",
																				"src": "1022:3:13"
																			},
																			{
																				"kind": "number",
																				"nodeType": "YulLiteral",
																				"src": "1027:4:13",
																				"type": "",
																				"value": "0x20"
																			}
																		],
																		"functionName": {
																			"name": "add",
																			"nodeType": "YulIdentifier",
																			"src": "1018:3:13"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "1018:14:13"
																	},
																	{
																		"name": "length",
																		"nodeType": "YulIdentifier",
																		"src": "1034:6:13"
																	}
																],
																"functionName": {
																	"name": "copy_memory_to_memory",
																	"nodeType": "YulIdentifier",
																	"src": "978:21:13"
																},
																"nodeType": "YulFunctionCall",
																"src": "978:63:13"
															},
															"nodeType": "YulExpressionStatement",
															"src": "978:63:13"
														},
														{
															"nodeType": "YulAssignment",
															"src": "1050:57:13",
															"value": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"name": "pos",
																				"nodeType": "YulIdentifier",
																				"src": "1065:3:13"
																			},
																			{
																				"arguments": [
																					{
																						"arguments": [
																							{
																								"name": "length",
																								"nodeType": "YulIdentifier",
																								"src": "1078:6:13"
																							},
																							{
																								"kind": "number",
																								"nodeType": "YulLiteral",
																								"src": "1086:2:13",
																								"type": "",
																								"value": "31"
																							}
																						],
																						"functionName": {
																							"name": "add",
																							"nodeType": "YulIdentifier",
																							"src": "1074:3:13"
																						},
																						"nodeType": "YulFunctionCall",
																						"src": "1074:15:13"
																					},
																					{
																						"arguments": [
																							{
																								"kind": "number",
																								"nodeType": "YulLiteral",
																								"src": "1095:2:13",
																								"type": "",
																								"value": "31"
																							}
																						],
																						"functionName": {
																							"name": "not",
																							"nodeType": "YulIdentifier",
																							"src": "1091:3:13"
																						},
																						"nodeType": "YulFunctionCall",
																						"src": "1091:7:13"
																					}
																				],
																				"functionName": {
																					"name": "and",
																					"nodeType": "YulIdentifier",
																					"src": "1070:3:13"
																				},
																				"nodeType": "YulFunctionCall",
																				"src": "1070:29:13"
																			}
																		],
																		"functionName": {
																			"name": "add",
																			"nodeType": "YulIdentifier",
																			"src": "1061:3:13"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "1061:39:13"
																	},
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "1102:4:13",
																		"type": "",
																		"value": "0x20"
																	}
																],
																"functionName": {
																	"name": "add",
																	"nodeType": "YulIdentifier",
																	"src": "1057:3:13"
																},
																"nodeType": "YulFunctionCall",
																"src": "1057:50:13"
															},
															"variableNames": [
																{
																	"name": "end",
																	"nodeType": "YulIdentifier",
																	"src": "1050:3:13"
																}
															]
														}
													]
												},
												"name": "abi_encode_string",
												"nodeType": "YulFunctionDefinition",
												"parameters": [
													{
														"name": "value",
														"nodeType": "YulTypedName",
														"src": "882:5:13",
														"type": ""
													},
													{
														"name": "pos",
														"nodeType": "YulTypedName",
														"src": "889:3:13",
														"type": ""
													}
												],
												"returnVariables": [
													{
														"name": "end",
														"nodeType": "YulTypedName",
														"src": "897:3:13",
														"type": ""
													}
												],
												"src": "855:258:13"
											},
											{
												"body": {
													"nodeType": "YulBlock",
													"src": "1239:99:13",
													"statements": [
														{
															"expression": {
																"arguments": [
																	{
																		"name": "headStart",
																		"nodeType": "YulIdentifier",
																		"src": "1256:9:13"
																	},
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "1267:2:13",
																		"type": "",
																		"value": "32"
																	}
																],
																"functionName": {
																	"name": "mstore",
																	"nodeType": "YulIdentifier",
																	"src": "1249:6:13"
																},
																"nodeType": "YulFunctionCall",
																"src": "1249:21:13"
															},
															"nodeType": "YulExpressionStatement",
															"src": "1249:21:13"
														},
														{
															"nodeType": "YulAssignment",
															"src": "1279:53:13",
															"value": {
																"arguments": [
																	{
																		"name": "value0",
																		"nodeType": "YulIdentifier",
																		"src": "1305:6:13"
																	},
																	{
																		"arguments": [
																			{
																				"name": "headStart",
																				"nodeType": "YulIdentifier",
																				"src": "1317:9:13"
																			},
																			{
																				"kind": "number",
																				"nodeType": "YulLiteral",
																				"src": "1328:2:13",
																				"type": "",
																				"value": "32"
																			}
																		],
																		"functionName": {
																			"name": "add",
																			"nodeType": "YulIdentifier",
																			"src": "1313:3:13"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "1313:18:13"
																	}
																],
																"functionName": {
																	"name": "abi_encode_string",
																	"nodeType": "YulIdentifier",
																	"src": "1287:17:13"
																},
																"nodeType": "YulFunctionCall",
																"src": "1287:45:13"
															},
															"variableNames": [
																{
																	"name": "tail",
																	"nodeType": "YulIdentifier",
																	"src": "1279:4:13"
																}
															]
														}
													]
												},
												"name": "abi_encode_tuple_t_string_memory_ptr__to_t_string_memory_ptr__fromStack_reversed",
												"nodeType": "YulFunctionDefinition",
												"parameters": [
													{
														"name": "headStart",
														"nodeType": "YulTypedName",
														"src": "1208:9:13",
														"type": ""
													},
													{
														"name": "value0",
														"nodeType": "YulTypedName",
														"src": "1219:6:13",
														"type": ""
													}
												],
												"returnVariables": [
													{
														"name": "tail",
														"nodeType": "YulTypedName",
														"src": "1230:4:13",
														"type": ""
													}
												],
												"src": "1118:220:13"
											},
											{
												"body": {
													"nodeType": "YulBlock",
													"src": "1413:110:13",
													"statements": [
														{
															"body": {
																"nodeType": "YulBlock",
																"src": "1459:16:13",
																"statements": [
																	{
																		"expression": {
																			"arguments": [
																				{
																					"kind": "number",
																					"nodeType": "YulLiteral",
																					"src": "1468:1:13",
																					"type": "",
																					"value": "0"
																				},
																				{
																					"kind": "number",
																					"nodeType": "YulLiteral",
																					"src": "1471:1:13",
																					"type": "",
																					"value": "0"
																				}
																			],
																			"functionName": {
																				"name": "revert",
																				"nodeType": "YulIdentifier",
																				"src": "1461:6:13"
																			},
																			"nodeType": "YulFunctionCall",
																			"src": "1461:12:13"
																		},
																		"nodeType": "YulExpressionStatement",
																		"src": "1461:12:13"
																	}
																]
															},
															"condition": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"name": "dataEnd",
																				"nodeType": "YulIdentifier",
																				"src": "1434:7:13"
																			},
																			{
																				"name": "headStart",
																				"nodeType": "YulIdentifier",
																				"src": "1443:9:13"
																			}
																		],
																		"functionName": {
																			"name": "sub",
																			"nodeType": "YulIdentifier",
																			"src": "1430:3:13"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "1430:23:13"
																	},
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "1455:2:13",
																		"type": "",
																		"value": "32"
																	}
																],
																"functionName": {
																	"name": "slt",
																	"nodeType": "YulIdentifier",
																	"src": "1426:3:13"
																},
																"nodeType": "YulFunctionCall",
																"src": "1426:32:13"
															},
															"nodeType": "YulIf",
															"src": "1423:52:13"
														},
														{
															"nodeType": "YulAssignment",
															"src": "1484:33:13",
															"value": {
																"arguments": [
																	{
																		"name": "headStart",
																		"nodeType": "YulIdentifier",
																		"src": "1507:9:13"
																	}
																],
																"functionName": {
																	"name": "calldataload",
																	"nodeType": "YulIdentifier",
																	"src": "1494:12:13"
																},
																"nodeType": "YulFunctionCall",
																"src": "1494:23:13"
															},
															"variableNames": [
																{
																	"name": "value0",
																	"nodeType": "YulIdentifier",
																	"src": "1484:6:13"
																}
															]
														}
													]
												},
												"name": "abi_decode_tuple_t_uint256",
												"nodeType": "YulFunctionDefinition",
												"parameters": [
													{
														"name": "headStart",
														"nodeType": "YulTypedName",
														"src": "1379:9:13",
														"type": ""
													},
													{
														"name": "dataEnd",
														"nodeType": "YulTypedName",
														"src": "1390:7:13",
														"type": ""
													}
												],
												"returnVariables": [
													{
														"name": "value0",
														"nodeType": "YulTypedName",
														"src": "1402:6:13",
														"type": ""
													}
												],
												"src": "1343:180:13"
											},
											{
												"body": {
													"nodeType": "YulBlock",
													"src": "1629:102:13",
													"statements": [
														{
															"nodeType": "YulAssignment",
															"src": "1639:26:13",
															"value": {
																"arguments": [
																	{
																		"name": "headStart",
																		"nodeType": "YulIdentifier",
																		"src": "1651:9:13"
																	},
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "1662:2:13",
																		"type": "",
																		"value": "32"
																	}
																],
																"functionName": {
																	"name": "add",
																	"nodeType": "YulIdentifier",
																	"src": "1647:3:13"
																},
																"nodeType": "YulFunctionCall",
																"src": "1647:18:13"
															},
															"variableNames": [
																{
																	"name": "tail",
																	"nodeType": "YulIdentifier",
																	"src": "1639:4:13"
																}
															]
														},
														{
															"expression": {
																"arguments": [
																	{
																		"name": "headStart",
																		"nodeType": "YulIdentifier",
																		"src": "1681:9:13"
																	},
																	{
																		"arguments": [
																			{
																				"name": "value0",
																				"nodeType": "YulIdentifier",
																				"src": "1696:6:13"
																			},
																			{
																				"arguments": [
																					{
																						"arguments": [
																							{
																								"kind": "number",
																								"nodeType": "YulLiteral",
																								"src": "1712:3:13",
																								"type": "",
																								"value": "160"
																							},
																							{
																								"kind": "number",
																								"nodeType": "YulLiteral",
																								"src": "1717:1:13",
																								"type": "",
																								"value": "1"
																							}
																						],
																						"functionName": {
																							"name": "shl",
																							"nodeType": "YulIdentifier",
																							"src": "1708:3:13"
																						},
																						"nodeType": "YulFunctionCall",
																						"src": "1708:11:13"
																					},
																					{
																						"kind": "number",
																						"nodeType": "YulLiteral",
																						"src": "1721:1:13",
																						"type": "",
																						"value": "1"
																					}
																				],
																				"functionName": {
																					"name": "sub",
																					"nodeType": "YulIdentifier",
																					"src": "1704:3:13"
																				},
																				"nodeType": "YulFunctionCall",
																				"src": "1704:19:13"
																			}
																		],
																		"functionName": {
																			"name": "and",
																			"nodeType": "YulIdentifier",
																			"src": "1692:3:13"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "1692:32:13"
																	}
																],
																"functionName": {
																	"name": "mstore",
																	"nodeType": "YulIdentifier",
																	"src": "1674:6:13"
																},
																"nodeType": "YulFunctionCall",
																"src": "1674:51:13"
															},
															"nodeType": "YulExpressionStatement",
															"src": "1674:51:13"
														}
													]
												},
												"name": "abi_encode_tuple_t_address__to_t_address__fromStack_reversed",
												"nodeType": "YulFunctionDefinition",
												"parameters": [
													{
														"name": "headStart",
														"nodeType": "YulTypedName",
														"src": "1598:9:13",
														"type": ""
													},
													{
														"name": "value0",
														"nodeType": "YulTypedName",
														"src": "1609:6:13",
														"type": ""
													}
												],
												"returnVariables": [
													{
														"name": "tail",
														"nodeType": "YulTypedName",
														"src": "1620:4:13",
														"type": ""
													}
												],
												"src": "1528:203:13"
											},
											{
												"body": {
													"nodeType": "YulBlock",
													"src": "1785:124:13",
													"statements": [
														{
															"nodeType": "YulAssignment",
															"src": "1795:29:13",
															"value": {
																"arguments": [
																	{
																		"name": "offset",
																		"nodeType": "YulIdentifier",
																		"src": "1817:6:13"
																	}
																],
																"functionName": {
																	"name": "calldataload",
																	"nodeType": "YulIdentifier",
																	"src": "1804:12:13"
																},
																"nodeType": "YulFunctionCall",
																"src": "1804:20:13"
															},
															"variableNames": [
																{
																	"name": "value",
																	"nodeType": "YulIdentifier",
																	"src": "1795:5:13"
																}
															]
														},
														{
															"body": {
																"nodeType": "YulBlock",
																"src": "1887:16:13",
																"statements": [
																	{
																		"expression": {
																			"arguments": [
																				{
																					"kind": "number",
																					"nodeType": "YulLiteral",
																					"src": "1896:1:13",
																					"type": "",
																					"value": "0"
																				},
																				{
																					"kind": "number",
																					"nodeType": "YulLiteral",
																					"src": "1899:1:13",
																					"type": "",
																					"value": "0"
																				}
																			],
																			"functionName": {
																				"name": "revert",
																				"nodeType": "YulIdentifier",
																				"src": "1889:6:13"
																			},
																			"nodeType": "YulFunctionCall",
																			"src": "1889:12:13"
																		},
																		"nodeType": "YulExpressionStatement",
																		"src": "1889:12:13"
																	}
																]
															},
															"condition": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"name": "value",
																				"nodeType": "YulIdentifier",
																				"src": "1846:5:13"
																			},
																			{
																				"arguments": [
																					{
																						"name": "value",
																						"nodeType": "YulIdentifier",
																						"src": "1857:5:13"
																					},
																					{
																						"arguments": [
																							{
																								"arguments": [
																									{
																										"kind": "number",
																										"nodeType": "YulLiteral",
																										"src": "1872:3:13",
																										"type": "",
																										"value": "160"
																									},
																									{
																										"kind": "number",
																										"nodeType": "YulLiteral",
																										"src": "1877:1:13",
																										"type": "",
																										"value": "1"
																									}
																								],
																								"functionName": {
																									"name": "shl",
																									"nodeType": "YulIdentifier",
																									"src": "1868:3:13"
																								},
																								"nodeType": "YulFunctionCall",
																								"src": "1868:11:13"
																							},
																							{
																								"kind": "number",
																								"nodeType": "YulLiteral",
																								"src": "1881:1:13",
																								"type": "",
																								"value": "1"
																							}
																						],
																						"functionName": {
																							"name": "sub",
																							"nodeType": "YulIdentifier",
																							"src": "1864:3:13"
																						},
																						"nodeType": "YulFunctionCall",
																						"src": "1864:19:13"
																					}
																				],
																				"functionName": {
																					"name": "and",
																					"nodeType": "YulIdentifier",
																					"src": "1853:3:13"
																				},
																				"nodeType": "YulFunctionCall",
																				"src": "1853:31:13"
																			}
																		],
																		"functionName": {
																			"name": "eq",
																			"nodeType": "YulIdentifier",
																			"src": "1843:2:13"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "1843:42:13"
																	}
																],
																"functionName": {
																	"name": "iszero",
																	"nodeType": "YulIdentifier",
																	"src": "1836:6:13"
																},
																"nodeType": "YulFunctionCall",
																"src": "1836:50:13"
															},
															"nodeType": "YulIf",
															"src": "1833:70:13"
														}
													]
												},
												"name": "abi_decode_address",
												"nodeType": "YulFunctionDefinition",
												"parameters": [
													{
														"name": "offset",
														"nodeType": "YulTypedName",
														"src": "1764:6:13",
														"type": ""
													}
												],
												"returnVariables": [
													{
														"name": "value",
														"nodeType": "YulTypedName",
														"src": "1775:5:13",
														"type": ""
													}
												],
												"src": "1736:173:13"
											},
											{
												"body": {
													"nodeType": "YulBlock",
													"src": "2001:167:13",
													"statements": [
														{
															"body": {
																"nodeType": "YulBlock",
																"src": "2047:16:13",
																"statements": [
																	{
																		"expression": {
																			"arguments": [
																				{
																					"kind": "number",
																					"nodeType": "YulLiteral",
																					"src": "2056:1:13",
																					"type": "",
																					"value": "0"
																				},
																				{
																					"kind": "number",
																					"nodeType": "YulLiteral",
																					"src": "2059:1:13",
																					"type": "",
																					"value": "0"
																				}
																			],
																			"functionName": {
																				"name": "revert",
																				"nodeType": "YulIdentifier",
																				"src": "2049:6:13"
																			},
																			"nodeType": "YulFunctionCall",
																			"src": "2049:12:13"
																		},
																		"nodeType": "YulExpressionStatement",
																		"src": "2049:12:13"
																	}
																]
															},
															"condition": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"name": "dataEnd",
																				"nodeType": "YulIdentifier",
																				"src": "2022:7:13"
																			},
																			{
																				"name": "headStart",
																				"nodeType": "YulIdentifier",
																				"src": "2031:9:13"
																			}
																		],
																		"functionName": {
																			"name": "sub",
																			"nodeType": "YulIdentifier",
																			"src": "2018:3:13"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "2018:23:13"
																	},
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "2043:2:13",
																		"type": "",
																		"value": "64"
																	}
																],
																"functionName": {
																	"name": "slt",
																	"nodeType": "YulIdentifier",
																	"src": "2014:3:13"
																},
																"nodeType": "YulFunctionCall",
																"src": "2014:32:13"
															},
															"nodeType": "YulIf",
															"src": "2011:52:13"
														},
														{
															"nodeType": "YulAssignment",
															"src": "2072:39:13",
															"value": {
																"arguments": [
																	{
																		"name": "headStart",
																		"nodeType": "YulIdentifier",
																		"src": "2101:9:13"
																	}
																],
																"functionName": {
																	"name": "abi_decode_address",
																	"nodeType": "YulIdentifier",
																	"src": "2082:18:13"
																},
																"nodeType": "YulFunctionCall",
																"src": "2082:29:13"
															},
															"variableNames": [
																{
																	"name": "value0",
																	"nodeType": "YulIdentifier",
																	"src": "2072:6:13"
																}
															]
														},
														{
															"nodeType": "YulAssignment",
															"src": "2120:42:13",
															"value": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"name": "headStart",
																				"nodeType": "YulIdentifier",
																				"src": "2147:9:13"
																			},
																			{
																				"kind": "number",
																				"nodeType": "YulLiteral",
																				"src": "2158:2:13",
																				"type": "",
																				"value": "32"
																			}
																		],
																		"functionName": {
																			"name": "add",
																			"nodeType": "YulIdentifier",
																			"src": "2143:3:13"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "2143:18:13"
																	}
																],
																"functionName": {
																	"name": "calldataload",
																	"nodeType": "YulIdentifier",
																	"src": "2130:12:13"
																},
																"nodeType": "YulFunctionCall",
																"src": "2130:32:13"
															},
															"variableNames": [
																{
																	"name": "value1",
																	"nodeType": "YulIdentifier",
																	"src": "2120:6:13"
																}
															]
														}
													]
												},
												"name": "abi_decode_tuple_t_addresst_uint256",
												"nodeType": "YulFunctionDefinition",
												"parameters": [
													{
														"name": "headStart",
														"nodeType": "YulTypedName",
														"src": "1959:9:13",
														"type": ""
													},
													{
														"name": "dataEnd",
														"nodeType": "YulTypedName",
														"src": "1970:7:13",
														"type": ""
													}
												],
												"returnVariables": [
													{
														"name": "value0",
														"nodeType": "YulTypedName",
														"src": "1982:6:13",
														"type": ""
													},
													{
														"name": "value1",
														"nodeType": "YulTypedName",
														"src": "1990:6:13",
														"type": ""
													}
												],
												"src": "1914:254:13"
											},
											{
												"body": {
													"nodeType": "YulBlock",
													"src": "2274:76:13",
													"statements": [
														{
															"nodeType": "YulAssignment",
															"src": "2284:26:13",
															"value": {
																"arguments": [
																	{
																		"name": "headStart",
																		"nodeType": "YulIdentifier",
																		"src": "2296:9:13"
																	},
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "2307:2:13",
																		"type": "",
																		"value": "32"
																	}
																],
																"functionName": {
																	"name": "add",
																	"nodeType": "YulIdentifier",
																	"src": "2292:3:13"
																},
																"nodeType": "YulFunctionCall",
																"src": "2292:18:13"
															},
															"variableNames": [
																{
																	"name": "tail",
																	"nodeType": "YulIdentifier",
																	"src": "2284:4:13"
																}
															]
														},
														{
															"expression": {
																"arguments": [
																	{
																		"name": "headStart",
																		"nodeType": "YulIdentifier",
																		"src": "2326:9:13"
																	},
																	{
																		"name": "value0",
																		"nodeType": "YulIdentifier",
																		"src": "2337:6:13"
																	}
																],
																"functionName": {
																	"name": "mstore",
																	"nodeType": "YulIdentifier",
																	"src": "2319:6:13"
																},
																"nodeType": "YulFunctionCall",
																"src": "2319:25:13"
															},
															"nodeType": "YulExpressionStatement",
															"src": "2319:25:13"
														}
													]
												},
												"name": "abi_encode_tuple_t_uint256__to_t_uint256__fromStack_reversed",
												"nodeType": "YulFunctionDefinition",
												"parameters": [
													{
														"name": "headStart",
														"nodeType": "YulTypedName",
														"src": "2243:9:13",
														"type": ""
													},
													{
														"name": "value0",
														"nodeType": "YulTypedName",
														"src": "2254:6:13",
														"type": ""
													}
												],
												"returnVariables": [
													{
														"name": "tail",
														"nodeType": "YulTypedName",
														"src": "2265:4:13",
														"type": ""
													}
												],
												"src": "2173:177:13"
											},
											{
												"body": {
													"nodeType": "YulBlock",
													"src": "2459:224:13",
													"statements": [
														{
															"body": {
																"nodeType": "YulBlock",
																"src": "2505:16:13",
																"statements": [
																	{
																		"expression": {
																			"arguments": [
																				{
																					"kind": "number",
																					"nodeType": "YulLiteral",
																					"src": "2514:1:13",
																					"type": "",
																					"value": "0"
																				},
																				{
																					"kind": "number",
																					"nodeType": "YulLiteral",
																					"src": "2517:1:13",
																					"type": "",
																					"value": "0"
																				}
																			],
																			"functionName": {
																				"name": "revert",
																				"nodeType": "YulIdentifier",
																				"src": "2507:6:13"
																			},
																			"nodeType": "YulFunctionCall",
																			"src": "2507:12:13"
																		},
																		"nodeType": "YulExpressionStatement",
																		"src": "2507:12:13"
																	}
																]
															},
															"condition": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"name": "dataEnd",
																				"nodeType": "YulIdentifier",
																				"src": "2480:7:13"
																			},
																			{
																				"name": "headStart",
																				"nodeType": "YulIdentifier",
																				"src": "2489:9:13"
																			}
																		],
																		"functionName": {
																			"name": "sub",
																			"nodeType": "YulIdentifier",
																			"src": "2476:3:13"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "2476:23:13"
																	},
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "2501:2:13",
																		"type": "",
																		"value": "96"
																	}
																],
																"functionName": {
																	"name": "slt",
																	"nodeType": "YulIdentifier",
																	"src": "2472:3:13"
																},
																"nodeType": "YulFunctionCall",
																"src": "2472:32:13"
															},
															"nodeType": "YulIf",
															"src": "2469:52:13"
														},
														{
															"nodeType": "YulAssignment",
															"src": "2530:39:13",
															"value": {
																"arguments": [
																	{
																		"name": "headStart",
																		"nodeType": "YulIdentifier",
																		"src": "2559:9:13"
																	}
																],
																"functionName": {
																	"name": "abi_decode_address",
																	"nodeType": "YulIdentifier",
																	"src": "2540:18:13"
																},
																"nodeType": "YulFunctionCall",
																"src": "2540:29:13"
															},
															"variableNames": [
																{
																	"name": "value0",
																	"nodeType": "YulIdentifier",
																	"src": "2530:6:13"
																}
															]
														},
														{
															"nodeType": "YulAssignment",
															"src": "2578:48:13",
															"value": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"name": "headStart",
																				"nodeType": "YulIdentifier",
																				"src": "2611:9:13"
																			},
																			{
																				"kind": "number",
																				"nodeType": "YulLiteral",
																				"src": "2622:2:13",
																				"type": "",
																				"value": "32"
																			}
																		],
																		"functionName": {
																			"name": "add",
																			"nodeType": "YulIdentifier",
																			"src": "2607:3:13"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "2607:18:13"
																	}
																],
																"functionName": {
																	"name": "abi_decode_address",
																	"nodeType": "YulIdentifier",
																	"src": "2588:18:13"
																},
																"nodeType": "YulFunctionCall",
																"src": "2588:38:13"
															},
															"variableNames": [
																{
																	"name": "value1",
																	"nodeType": "YulIdentifier",
																	"src": "2578:6:13"
																}
															]
														},
														{
															"nodeType": "YulAssignment",
															"src": "2635:42:13",
															"value": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"name": "headStart",
																				"nodeType": "YulIdentifier",
																				"src": "2662:9:13"
																			},
																			{
																				"kind": "number",
																				"nodeType": "YulLiteral",
																				"src": "2673:2:13",
																				"type": "",
																				"value": "64"
																			}
																		],
																		"functionName": {
																			"name": "add",
																			"nodeType": "YulIdentifier",
																			"src": "2658:3:13"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "2658:18:13"
																	}
																],
																"functionName": {
																	"name": "calldataload",
																	"nodeType": "YulIdentifier",
																	"src": "2645:12:13"
																},
																"nodeType": "YulFunctionCall",
																"src": "2645:32:13"
															},
															"variableNames": [
																{
																	"name": "value2",
																	"nodeType": "YulIdentifier",
																	"src": "2635:6:13"
																}
															]
														}
													]
												},
												"name": "abi_decode_tuple_t_addresst_addresst_uint256",
												"nodeType": "YulFunctionDefinition",
												"parameters": [
													{
														"name": "headStart",
														"nodeType": "YulTypedName",
														"src": "2409:9:13",
														"type": ""
													},
													{
														"name": "dataEnd",
														"nodeType": "YulTypedName",
														"src": "2420:7:13",
														"type": ""
													}
												],
												"returnVariables": [
													{
														"name": "value0",
														"nodeType": "YulTypedName",
														"src": "2432:6:13",
														"type": ""
													},
													{
														"name": "value1",
														"nodeType": "YulTypedName",
														"src": "2440:6:13",
														"type": ""
													},
													{
														"name": "value2",
														"nodeType": "YulTypedName",
														"src": "2448:6:13",
														"type": ""
													}
												],
												"src": "2355:328:13"
											},
											{
												"body": {
													"nodeType": "YulBlock",
													"src": "2758:116:13",
													"statements": [
														{
															"body": {
																"nodeType": "YulBlock",
																"src": "2804:16:13",
																"statements": [
																	{
																		"expression": {
																			"arguments": [
																				{
																					"kind": "number",
																					"nodeType": "YulLiteral",
																					"src": "2813:1:13",
																					"type": "",
																					"value": "0"
																				},
																				{
																					"kind": "number",
																					"nodeType": "YulLiteral",
																					"src": "2816:1:13",
																					"type": "",
																					"value": "0"
																				}
																			],
																			"functionName": {
																				"name": "revert",
																				"nodeType": "YulIdentifier",
																				"src": "2806:6:13"
																			},
																			"nodeType": "YulFunctionCall",
																			"src": "2806:12:13"
																		},
																		"nodeType": "YulExpressionStatement",
																		"src": "2806:12:13"
																	}
																]
															},
															"condition": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"name": "dataEnd",
																				"nodeType": "YulIdentifier",
																				"src": "2779:7:13"
																			},
																			{
																				"name": "headStart",
																				"nodeType": "YulIdentifier",
																				"src": "2788:9:13"
																			}
																		],
																		"functionName": {
																			"name": "sub",
																			"nodeType": "YulIdentifier",
																			"src": "2775:3:13"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "2775:23:13"
																	},
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "2800:2:13",
																		"type": "",
																		"value": "32"
																	}
																],
																"functionName": {
																	"name": "slt",
																	"nodeType": "YulIdentifier",
																	"src": "2771:3:13"
																},
																"nodeType": "YulFunctionCall",
																"src": "2771:32:13"
															},
															"nodeType": "YulIf",
															"src": "2768:52:13"
														},
														{
															"nodeType": "YulAssignment",
															"src": "2829:39:13",
															"value": {
																"arguments": [
																	{
																		"name": "headStart",
																		"nodeType": "YulIdentifier",
																		"src": "2858:9:13"
																	}
																],
																"functionName": {
																	"name": "abi_decode_address",
																	"nodeType": "YulIdentifier",
																	"src": "2839:18:13"
																},
																"nodeType": "YulFunctionCall",
																"src": "2839:29:13"
															},
															"variableNames": [
																{
																	"name": "value0",
																	"nodeType": "YulIdentifier",
																	"src": "2829:6:13"
																}
															]
														}
													]
												},
												"name": "abi_decode_tuple_t_address",
												"nodeType": "YulFunctionDefinition",
												"parameters": [
													{
														"name": "headStart",
														"nodeType": "YulTypedName",
														"src": "2724:9:13",
														"type": ""
													},
													{
														"name": "dataEnd",
														"nodeType": "YulTypedName",
														"src": "2735:7:13",
														"type": ""
													}
												],
												"returnVariables": [
													{
														"name": "value0",
														"nodeType": "YulTypedName",
														"src": "2747:6:13",
														"type": ""
													}
												],
												"src": "2688:186:13"
											},
											{
												"body": {
													"nodeType": "YulBlock",
													"src": "2963:263:13",
													"statements": [
														{
															"body": {
																"nodeType": "YulBlock",
																"src": "3009:16:13",
																"statements": [
																	{
																		"expression": {
																			"arguments": [
																				{
																					"kind": "number",
																					"nodeType": "YulLiteral",
																					"src": "3018:1:13",
																					"type": "",
																					"value": "0"
																				},
																				{
																					"kind": "number",
																					"nodeType": "YulLiteral",
																					"src": "3021:1:13",
																					"type": "",
																					"value": "0"
																				}
																			],
																			"functionName": {
																				"name": "revert",
																				"nodeType": "YulIdentifier",
																				"src": "3011:6:13"
																			},
																			"nodeType": "YulFunctionCall",
																			"src": "3011:12:13"
																		},
																		"nodeType": "YulExpressionStatement",
																		"src": "3011:12:13"
																	}
																]
															},
															"condition": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"name": "dataEnd",
																				"nodeType": "YulIdentifier",
																				"src": "2984:7:13"
																			},
																			{
																				"name": "headStart",
																				"nodeType": "YulIdentifier",
																				"src": "2993:9:13"
																			}
																		],
																		"functionName": {
																			"name": "sub",
																			"nodeType": "YulIdentifier",
																			"src": "2980:3:13"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "2980:23:13"
																	},
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "3005:2:13",
																		"type": "",
																		"value": "64"
																	}
																],
																"functionName": {
																	"name": "slt",
																	"nodeType": "YulIdentifier",
																	"src": "2976:3:13"
																},
																"nodeType": "YulFunctionCall",
																"src": "2976:32:13"
															},
															"nodeType": "YulIf",
															"src": "2973:52:13"
														},
														{
															"nodeType": "YulAssignment",
															"src": "3034:39:13",
															"value": {
																"arguments": [
																	{
																		"name": "headStart",
																		"nodeType": "YulIdentifier",
																		"src": "3063:9:13"
																	}
																],
																"functionName": {
																	"name": "abi_decode_address",
																	"nodeType": "YulIdentifier",
																	"src": "3044:18:13"
																},
																"nodeType": "YulFunctionCall",
																"src": "3044:29:13"
															},
															"variableNames": [
																{
																	"name": "value0",
																	"nodeType": "YulIdentifier",
																	"src": "3034:6:13"
																}
															]
														},
														{
															"nodeType": "YulVariableDeclaration",
															"src": "3082:45:13",
															"value": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"name": "headStart",
																				"nodeType": "YulIdentifier",
																				"src": "3112:9:13"
																			},
																			{
																				"kind": "number",
																				"nodeType": "YulLiteral",
																				"src": "3123:2:13",
																				"type": "",
																				"value": "32"
																			}
																		],
																		"functionName": {
																			"name": "add",
																			"nodeType": "YulIdentifier",
																			"src": "3108:3:13"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "3108:18:13"
																	}
																],
																"functionName": {
																	"name": "calldataload",
																	"nodeType": "YulIdentifier",
																	"src": "3095:12:13"
																},
																"nodeType": "YulFunctionCall",
																"src": "3095:32:13"
															},
															"variables": [
																{
																	"name": "value",
																	"nodeType": "YulTypedName",
																	"src": "3086:5:13",
																	"type": ""
																}
															]
														},
														{
															"body": {
																"nodeType": "YulBlock",
																"src": "3180:16:13",
																"statements": [
																	{
																		"expression": {
																			"arguments": [
																				{
																					"kind": "number",
																					"nodeType": "YulLiteral",
																					"src": "3189:1:13",
																					"type": "",
																					"value": "0"
																				},
																				{
																					"kind": "number",
																					"nodeType": "YulLiteral",
																					"src": "3192:1:13",
																					"type": "",
																					"value": "0"
																				}
																			],
																			"functionName": {
																				"name": "revert",
																				"nodeType": "YulIdentifier",
																				"src": "3182:6:13"
																			},
																			"nodeType": "YulFunctionCall",
																			"src": "3182:12:13"
																		},
																		"nodeType": "YulExpressionStatement",
																		"src": "3182:12:13"
																	}
																]
															},
															"condition": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"name": "value",
																				"nodeType": "YulIdentifier",
																				"src": "3149:5:13"
																			},
																			{
																				"arguments": [
																					{
																						"arguments": [
																							{
																								"name": "value",
																								"nodeType": "YulIdentifier",
																								"src": "3170:5:13"
																							}
																						],
																						"functionName": {
																							"name": "iszero",
																							"nodeType": "YulIdentifier",
																							"src": "3163:6:13"
																						},
																						"nodeType": "YulFunctionCall",
																						"src": "3163:13:13"
																					}
																				],
																				"functionName": {
																					"name": "iszero",
																					"nodeType": "YulIdentifier",
																					"src": "3156:6:13"
																				},
																				"nodeType": "YulFunctionCall",
																				"src": "3156:21:13"
																			}
																		],
																		"functionName": {
																			"name": "eq",
																			"nodeType": "YulIdentifier",
																			"src": "3146:2:13"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "3146:32:13"
																	}
																],
																"functionName": {
																	"name": "iszero",
																	"nodeType": "YulIdentifier",
																	"src": "3139:6:13"
																},
																"nodeType": "YulFunctionCall",
																"src": "3139:40:13"
															},
															"nodeType": "YulIf",
															"src": "3136:60:13"
														},
														{
															"nodeType": "YulAssignment",
															"src": "3205:15:13",
															"value": {
																"name": "value",
																"nodeType": "YulIdentifier",
																"src": "3215:5:13"
															},
															"variableNames": [
																{
																	"name": "value1",
																	"nodeType": "YulIdentifier",
																	"src": "3205:6:13"
																}
															]
														}
													]
												},
												"name": "abi_decode_tuple_t_addresst_bool",
												"nodeType": "YulFunctionDefinition",
												"parameters": [
													{
														"name": "headStart",
														"nodeType": "YulTypedName",
														"src": "2921:9:13",
														"type": ""
													},
													{
														"name": "dataEnd",
														"nodeType": "YulTypedName",
														"src": "2932:7:13",
														"type": ""
													}
												],
												"returnVariables": [
													{
														"name": "value0",
														"nodeType": "YulTypedName",
														"src": "2944:6:13",
														"type": ""
													},
													{
														"name": "value1",
														"nodeType": "YulTypedName",
														"src": "2952:6:13",
														"type": ""
													}
												],
												"src": "2879:347:13"
											},
											{
												"body": {
													"nodeType": "YulBlock",
													"src": "3263:95:13",
													"statements": [
														{
															"expression": {
																"arguments": [
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "3280:1:13",
																		"type": "",
																		"value": "0"
																	},
																	{
																		"arguments": [
																			{
																				"kind": "number",
																				"nodeType": "YulLiteral",
																				"src": "3287:3:13",
																				"type": "",
																				"value": "224"
																			},
																			{
																				"kind": "number",
																				"nodeType": "YulLiteral",
																				"src": "3292:10:13",
																				"type": "",
																				"value": "0x4e487b71"
																			}
																		],
																		"functionName": {
																			"name": "shl",
																			"nodeType": "YulIdentifier",
																			"src": "3283:3:13"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "3283:20:13"
																	}
																],
																"functionName": {
																	"name": "mstore",
																	"nodeType": "YulIdentifier",
																	"src": "3273:6:13"
																},
																"nodeType": "YulFunctionCall",
																"src": "3273:31:13"
															},
															"nodeType": "YulExpressionStatement",
															"src": "3273:31:13"
														},
														{
															"expression": {
																"arguments": [
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "3320:1:13",
																		"type": "",
																		"value": "4"
																	},
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "3323:4:13",
																		"type": "",
																		"value": "0x41"
																	}
																],
																"functionName": {
																	"name": "mstore",
																	"nodeType": "YulIdentifier",
																	"src": "3313:6:13"
																},
																"nodeType": "YulFunctionCall",
																"src": "3313:15:13"
															},
															"nodeType": "YulExpressionStatement",
															"src": "3313:15:13"
														},
														{
															"expression": {
																"arguments": [
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "3344:1:13",
																		"type": "",
																		"value": "0"
																	},
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "3347:4:13",
																		"type": "",
																		"value": "0x24"
																	}
																],
																"functionName": {
																	"name": "revert",
																	"nodeType": "YulIdentifier",
																	"src": "3337:6:13"
																},
																"nodeType": "YulFunctionCall",
																"src": "3337:15:13"
															},
															"nodeType": "YulExpressionStatement",
															"src": "3337:15:13"
														}
													]
												},
												"name": "panic_error_0x41",
												"nodeType": "YulFunctionDefinition",
												"src": "3231:127:13"
											},
											{
												"body": {
													"nodeType": "YulBlock",
													"src": "3493:1008:13",
													"statements": [
														{
															"body": {
																"nodeType": "YulBlock",
																"src": "3540:16:13",
																"statements": [
																	{
																		"expression": {
																			"arguments": [
																				{
																					"kind": "number",
																					"nodeType": "YulLiteral",
																					"src": "3549:1:13",
																					"type": "",
																					"value": "0"
																				},
																				{
																					"kind": "number",
																					"nodeType": "YulLiteral",
																					"src": "3552:1:13",
																					"type": "",
																					"value": "0"
																				}
																			],
																			"functionName": {
																				"name": "revert",
																				"nodeType": "YulIdentifier",
																				"src": "3542:6:13"
																			},
																			"nodeType": "YulFunctionCall",
																			"src": "3542:12:13"
																		},
																		"nodeType": "YulExpressionStatement",
																		"src": "3542:12:13"
																	}
																]
															},
															"condition": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"name": "dataEnd",
																				"nodeType": "YulIdentifier",
																				"src": "3514:7:13"
																			},
																			{
																				"name": "headStart",
																				"nodeType": "YulIdentifier",
																				"src": "3523:9:13"
																			}
																		],
																		"functionName": {
																			"name": "sub",
																			"nodeType": "YulIdentifier",
																			"src": "3510:3:13"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "3510:23:13"
																	},
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "3535:3:13",
																		"type": "",
																		"value": "128"
																	}
																],
																"functionName": {
																	"name": "slt",
																	"nodeType": "YulIdentifier",
																	"src": "3506:3:13"
																},
																"nodeType": "YulFunctionCall",
																"src": "3506:33:13"
															},
															"nodeType": "YulIf",
															"src": "3503:53:13"
														},
														{
															"nodeType": "YulAssignment",
															"src": "3565:39:13",
															"value": {
																"arguments": [
																	{
																		"name": "headStart",
																		"nodeType": "YulIdentifier",
																		"src": "3594:9:13"
																	}
																],
																"functionName": {
																	"name": "abi_decode_address",
																	"nodeType": "YulIdentifier",
																	"src": "3575:18:13"
																},
																"nodeType": "YulFunctionCall",
																"src": "3575:29:13"
															},
															"variableNames": [
																{
																	"name": "value0",
																	"nodeType": "YulIdentifier",
																	"src": "3565:6:13"
																}
															]
														},
														{
															"nodeType": "YulAssignment",
															"src": "3613:48:13",
															"value": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"name": "headStart",
																				"nodeType": "YulIdentifier",
																				"src": "3646:9:13"
																			},
																			{
																				"kind": "number",
																				"nodeType": "YulLiteral",
																				"src": "3657:2:13",
																				"type": "",
																				"value": "32"
																			}
																		],
																		"functionName": {
																			"name": "add",
																			"nodeType": "YulIdentifier",
																			"src": "3642:3:13"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "3642:18:13"
																	}
																],
																"functionName": {
																	"name": "abi_decode_address",
																	"nodeType": "YulIdentifier",
																	"src": "3623:18:13"
																},
																"nodeType": "YulFunctionCall",
																"src": "3623:38:13"
															},
															"variableNames": [
																{
																	"name": "value1",
																	"nodeType": "YulIdentifier",
																	"src": "3613:6:13"
																}
															]
														},
														{
															"nodeType": "YulAssignment",
															"src": "3670:42:13",
															"value": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"name": "headStart",
																				"nodeType": "YulIdentifier",
																				"src": "3697:9:13"
																			},
																			{
																				"kind": "number",
																				"nodeType": "YulLiteral",
																				"src": "3708:2:13",
																				"type": "",
																				"value": "64"
																			}
																		],
																		"functionName": {
																			"name": "add",
																			"nodeType": "YulIdentifier",
																			"src": "3693:3:13"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "3693:18:13"
																	}
																],
																"functionName": {
																	"name": "calldataload",
																	"nodeType": "YulIdentifier",
																	"src": "3680:12:13"
																},
																"nodeType": "YulFunctionCall",
																"src": "3680:32:13"
															},
															"variableNames": [
																{
																	"name": "value2",
																	"nodeType": "YulIdentifier",
																	"src": "3670:6:13"
																}
															]
														},
														{
															"nodeType": "YulVariableDeclaration",
															"src": "3721:46:13",
															"value": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"name": "headStart",
																				"nodeType": "YulIdentifier",
																				"src": "3752:9:13"
																			},
																			{
																				"kind": "number",
																				"nodeType": "YulLiteral",
																				"src": "3763:2:13",
																				"type": "",
																				"value": "96"
																			}
																		],
																		"functionName": {
																			"name": "add",
																			"nodeType": "YulIdentifier",
																			"src": "3748:3:13"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "3748:18:13"
																	}
																],
																"functionName": {
																	"name": "calldataload",
																	"nodeType": "YulIdentifier",
																	"src": "3735:12:13"
																},
																"nodeType": "YulFunctionCall",
																"src": "3735:32:13"
															},
															"variables": [
																{
																	"name": "offset",
																	"nodeType": "YulTypedName",
																	"src": "3725:6:13",
																	"type": ""
																}
															]
														},
														{
															"nodeType": "YulVariableDeclaration",
															"src": "3776:28:13",
															"value": {
																"kind": "number",
																"nodeType": "YulLiteral",
																"src": "3786:18:13",
																"type": "",
																"value": "0xffffffffffffffff"
															},
															"variables": [
																{
																	"name": "_1",
																	"nodeType": "YulTypedName",
																	"src": "3780:2:13",
																	"type": ""
																}
															]
														},
														{
															"body": {
																"nodeType": "YulBlock",
																"src": "3831:16:13",
																"statements": [
																	{
																		"expression": {
																			"arguments": [
																				{
																					"kind": "number",
																					"nodeType": "YulLiteral",
																					"src": "3840:1:13",
																					"type": "",
																					"value": "0"
																				},
																				{
																					"kind": "number",
																					"nodeType": "YulLiteral",
																					"src": "3843:1:13",
																					"type": "",
																					"value": "0"
																				}
																			],
																			"functionName": {
																				"name": "revert",
																				"nodeType": "YulIdentifier",
																				"src": "3833:6:13"
																			},
																			"nodeType": "YulFunctionCall",
																			"src": "3833:12:13"
																		},
																		"nodeType": "YulExpressionStatement",
																		"src": "3833:12:13"
																	}
																]
															},
															"condition": {
																"arguments": [
																	{
																		"name": "offset",
																		"nodeType": "YulIdentifier",
																		"src": "3819:6:13"
																	},
																	{
																		"name": "_1",
																		"nodeType": "YulIdentifier",
																		"src": "3827:2:13"
																	}
																],
																"functionName": {
																	"name": "gt",
																	"nodeType": "YulIdentifier",
																	"src": "3816:2:13"
																},
																"nodeType": "YulFunctionCall",
																"src": "3816:14:13"
															},
															"nodeType": "YulIf",
															"src": "3813:34:13"
														},
														{
															"nodeType": "YulVariableDeclaration",
															"src": "3856:32:13",
															"value": {
																"arguments": [
																	{
																		"name": "headStart",
																		"nodeType": "YulIdentifier",
																		"src": "3870:9:13"
																	},
																	{
																		"name": "offset",
																		"nodeType": "YulIdentifier",
																		"src": "3881:6:13"
																	}
																],
																"functionName": {
																	"name": "add",
																	"nodeType": "YulIdentifier",
																	"src": "3866:3:13"
																},
																"nodeType": "YulFunctionCall",
																"src": "3866:22:13"
															},
															"variables": [
																{
																	"name": "_2",
																	"nodeType": "YulTypedName",
																	"src": "3860:2:13",
																	"type": ""
																}
															]
														},
														{
															"body": {
																"nodeType": "YulBlock",
																"src": "3936:16:13",
																"statements": [
																	{
																		"expression": {
																			"arguments": [
																				{
																					"kind": "number",
																					"nodeType": "YulLiteral",
																					"src": "3945:1:13",
																					"type": "",
																					"value": "0"
																				},
																				{
																					"kind": "number",
																					"nodeType": "YulLiteral",
																					"src": "3948:1:13",
																					"type": "",
																					"value": "0"
																				}
																			],
																			"functionName": {
																				"name": "revert",
																				"nodeType": "YulIdentifier",
																				"src": "3938:6:13"
																			},
																			"nodeType": "YulFunctionCall",
																			"src": "3938:12:13"
																		},
																		"nodeType": "YulExpressionStatement",
																		"src": "3938:12:13"
																	}
																]
															},
															"condition": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"arguments": [
																					{
																						"name": "_2",
																						"nodeType": "YulIdentifier",
																						"src": "3915:2:13"
																					},
																					{
																						"kind": "number",
																						"nodeType": "YulLiteral",
																						"src": "3919:4:13",
																						"type": "",
																						"value": "0x1f"
																					}
																				],
																				"functionName": {
																					"name": "add",
																					"nodeType": "YulIdentifier",
																					"src": "3911:3:13"
																				},
																				"nodeType": "YulFunctionCall",
																				"src": "3911:13:13"
																			},
																			{
																				"name": "dataEnd",
																				"nodeType": "YulIdentifier",
																				"src": "3926:7:13"
																			}
																		],
																		"functionName": {
																			"name": "slt",
																			"nodeType": "YulIdentifier",
																			"src": "3907:3:13"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "3907:27:13"
																	}
																],
																"functionName": {
																	"name": "iszero",
																	"nodeType": "YulIdentifier",
																	"src": "3900:6:13"
																},
																"nodeType": "YulFunctionCall",
																"src": "3900:35:13"
															},
															"nodeType": "YulIf",
															"src": "3897:55:13"
														},
														{
															"nodeType": "YulVariableDeclaration",
															"src": "3961:26:13",
															"value": {
																"arguments": [
																	{
																		"name": "_2",
																		"nodeType": "YulIdentifier",
																		"src": "3984:2:13"
																	}
																],
																"functionName": {
																	"name": "calldataload",
																	"nodeType": "YulIdentifier",
																	"src": "3971:12:13"
																},
																"nodeType": "YulFunctionCall",
																"src": "3971:16:13"
															},
															"variables": [
																{
																	"name": "_3",
																	"nodeType": "YulTypedName",
																	"src": "3965:2:13",
																	"type": ""
																}
															]
														},
														{
															"body": {
																"nodeType": "YulBlock",
																"src": "4010:22:13",
																"statements": [
																	{
																		"expression": {
																			"arguments": [],
																			"functionName": {
																				"name": "panic_error_0x41",
																				"nodeType": "YulIdentifier",
																				"src": "4012:16:13"
																			},
																			"nodeType": "YulFunctionCall",
																			"src": "4012:18:13"
																		},
																		"nodeType": "YulExpressionStatement",
																		"src": "4012:18:13"
																	}
																]
															},
															"condition": {
																"arguments": [
																	{
																		"name": "_3",
																		"nodeType": "YulIdentifier",
																		"src": "4002:2:13"
																	},
																	{
																		"name": "_1",
																		"nodeType": "YulIdentifier",
																		"src": "4006:2:13"
																	}
																],
																"functionName": {
																	"name": "gt",
																	"nodeType": "YulIdentifier",
																	"src": "3999:2:13"
																},
																"nodeType": "YulFunctionCall",
																"src": "3999:10:13"
															},
															"nodeType": "YulIf",
															"src": "3996:36:13"
														},
														{
															"nodeType": "YulVariableDeclaration",
															"src": "4041:17:13",
															"value": {
																"arguments": [
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "4055:2:13",
																		"type": "",
																		"value": "31"
																	}
																],
																"functionName": {
																	"name": "not",
																	"nodeType": "YulIdentifier",
																	"src": "4051:3:13"
																},
																"nodeType": "YulFunctionCall",
																"src": "4051:7:13"
															},
															"variables": [
																{
																	"name": "_4",
																	"nodeType": "YulTypedName",
																	"src": "4045:2:13",
																	"type": ""
																}
															]
														},
														{
															"nodeType": "YulVariableDeclaration",
															"src": "4067:23:13",
															"value": {
																"arguments": [
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "4087:2:13",
																		"type": "",
																		"value": "64"
																	}
																],
																"functionName": {
																	"name": "mload",
																	"nodeType": "YulIdentifier",
																	"src": "4081:5:13"
																},
																"nodeType": "YulFunctionCall",
																"src": "4081:9:13"
															},
															"variables": [
																{
																	"name": "memPtr",
																	"nodeType": "YulTypedName",
																	"src": "4071:6:13",
																	"type": ""
																}
															]
														},
														{
															"nodeType": "YulVariableDeclaration",
															"src": "4099:71:13",
															"value": {
																"arguments": [
																	{
																		"name": "memPtr",
																		"nodeType": "YulIdentifier",
																		"src": "4121:6:13"
																	},
																	{
																		"arguments": [
																			{
																				"arguments": [
																					{
																						"arguments": [
																							{
																								"arguments": [
																									{
																										"name": "_3",
																										"nodeType": "YulIdentifier",
																										"src": "4145:2:13"
																									},
																									{
																										"kind": "number",
																										"nodeType": "YulLiteral",
																										"src": "4149:4:13",
																										"type": "",
																										"value": "0x1f"
																									}
																								],
																								"functionName": {
																									"name": "add",
																									"nodeType": "YulIdentifier",
																									"src": "4141:3:13"
																								},
																								"nodeType": "YulFunctionCall",
																								"src": "4141:13:13"
																							},
																							{
																								"name": "_4",
																								"nodeType": "YulIdentifier",
																								"src": "4156:2:13"
																							}
																						],
																						"functionName": {
																							"name": "and",
																							"nodeType": "YulIdentifier",
																							"src": "4137:3:13"
																						},
																						"nodeType": "YulFunctionCall",
																						"src": "4137:22:13"
																					},
																					{
																						"kind": "number",
																						"nodeType": "YulLiteral",
																						"src": "4161:2:13",
																						"type": "",
																						"value": "63"
																					}
																				],
																				"functionName": {
																					"name": "add",
																					"nodeType": "YulIdentifier",
																					"src": "4133:3:13"
																				},
																				"nodeType": "YulFunctionCall",
																				"src": "4133:31:13"
																			},
																			{
																				"name": "_4",
																				"nodeType": "YulIdentifier",
																				"src": "4166:2:13"
																			}
																		],
																		"functionName": {
																			"name": "and",
																			"nodeType": "YulIdentifier",
																			"src": "4129:3:13"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "4129:40:13"
																	}
																],
																"functionName": {
																	"name": "add",
																	"nodeType": "YulIdentifier",
																	"src": "4117:3:13"
																},
																"nodeType": "YulFunctionCall",
																"src": "4117:53:13"
															},
															"variables": [
																{
																	"name": "newFreePtr",
																	"nodeType": "YulTypedName",
																	"src": "4103:10:13",
																	"type": ""
																}
															]
														},
														{
															"body": {
																"nodeType": "YulBlock",
																"src": "4229:22:13",
																"statements": [
																	{
																		"expression": {
																			"arguments": [],
																			"functionName": {
																				"name": "panic_error_0x41",
																				"nodeType": "YulIdentifier",
																				"src": "4231:16:13"
																			},
																			"nodeType": "YulFunctionCall",
																			"src": "4231:18:13"
																		},
																		"nodeType": "YulExpressionStatement",
																		"src": "4231:18:13"
																	}
																]
															},
															"condition": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"name": "newFreePtr",
																				"nodeType": "YulIdentifier",
																				"src": "4188:10:13"
																			},
																			{
																				"name": "_1",
																				"nodeType": "YulIdentifier",
																				"src": "4200:2:13"
																			}
																		],
																		"functionName": {
																			"name": "gt",
																			"nodeType": "YulIdentifier",
																			"src": "4185:2:13"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "4185:18:13"
																	},
																	{
																		"arguments": [
																			{
																				"name": "newFreePtr",
																				"nodeType": "YulIdentifier",
																				"src": "4208:10:13"
																			},
																			{
																				"name": "memPtr",
																				"nodeType": "YulIdentifier",
																				"src": "4220:6:13"
																			}
																		],
																		"functionName": {
																			"name": "lt",
																			"nodeType": "YulIdentifier",
																			"src": "4205:2:13"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "4205:22:13"
																	}
																],
																"functionName": {
																	"name": "or",
																	"nodeType": "YulIdentifier",
																	"src": "4182:2:13"
																},
																"nodeType": "YulFunctionCall",
																"src": "4182:46:13"
															},
															"nodeType": "YulIf",
															"src": "4179:72:13"
														},
														{
															"expression": {
																"arguments": [
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "4267:2:13",
																		"type": "",
																		"value": "64"
																	},
																	{
																		"name": "newFreePtr",
																		"nodeType": "YulIdentifier",
																		"src": "4271:10:13"
																	}
																],
																"functionName": {
																	"name": "mstore",
																	"nodeType": "YulIdentifier",
																	"src": "4260:6:13"
																},
																"nodeType": "YulFunctionCall",
																"src": "4260:22:13"
															},
															"nodeType": "YulExpressionStatement",
															"src": "4260:22:13"
														},
														{
															"expression": {
																"arguments": [
																	{
																		"name": "memPtr",
																		"nodeType": "YulIdentifier",
																		"src": "4298:6:13"
																	},
																	{
																		"name": "_3",
																		"nodeType": "YulIdentifier",
																		"src": "4306:2:13"
																	}
																],
																"functionName": {
																	"name": "mstore",
																	"nodeType": "YulIdentifier",
																	"src": "4291:6:13"
																},
																"nodeType": "YulFunctionCall",
																"src": "4291:18:13"
															},
															"nodeType": "YulExpressionStatement",
															"src": "4291:18:13"
														},
														{
															"body": {
																"nodeType": "YulBlock",
																"src": "4355:16:13",
																"statements": [
																	{
																		"expression": {
																			"arguments": [
																				{
																					"kind": "number",
																					"nodeType": "YulLiteral",
																					"src": "4364:1:13",
																					"type": "",
																					"value": "0"
																				},
																				{
																					"kind": "number",
																					"nodeType": "YulLiteral",
																					"src": "4367:1:13",
																					"type": "",
																					"value": "0"
																				}
																			],
																			"functionName": {
																				"name": "revert",
																				"nodeType": "YulIdentifier",
																				"src": "4357:6:13"
																			},
																			"nodeType": "YulFunctionCall",
																			"src": "4357:12:13"
																		},
																		"nodeType": "YulExpressionStatement",
																		"src": "4357:12:13"
																	}
																]
															},
															"condition": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"arguments": [
																					{
																						"name": "_2",
																						"nodeType": "YulIdentifier",
																						"src": "4332:2:13"
																					},
																					{
																						"name": "_3",
																						"nodeType": "YulIdentifier",
																						"src": "4336:2:13"
																					}
																				],
																				"functionName": {
																					"name": "add",
																					"nodeType": "YulIdentifier",
																					"src": "4328:3:13"
																				},
																				"nodeType": "YulFunctionCall",
																				"src": "4328:11:13"
																			},
																			{
																				"kind": "number",
																				"nodeType": "YulLiteral",
																				"src": "4341:2:13",
																				"type": "",
																				"value": "32"
																			}
																		],
																		"functionName": {
																			"name": "add",
																			"nodeType": "YulIdentifier",
																			"src": "4324:3:13"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "4324:20:13"
																	},
																	{
																		"name": "dataEnd",
																		"nodeType": "YulIdentifier",
																		"src": "4346:7:13"
																	}
																],
																"functionName": {
																	"name": "gt",
																	"nodeType": "YulIdentifier",
																	"src": "4321:2:13"
																},
																"nodeType": "YulFunctionCall",
																"src": "4321:33:13"
															},
															"nodeType": "YulIf",
															"src": "4318:53:13"
														},
														{
															"expression": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"name": "memPtr",
																				"nodeType": "YulIdentifier",
																				"src": "4397:6:13"
																			},
																			{
																				"kind": "number",
																				"nodeType": "YulLiteral",
																				"src": "4405:2:13",
																				"type": "",
																				"value": "32"
																			}
																		],
																		"functionName": {
																			"name": "add",
																			"nodeType": "YulIdentifier",
																			"src": "4393:3:13"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "4393:15:13"
																	},
																	{
																		"arguments": [
																			{
																				"name": "_2",
																				"nodeType": "YulIdentifier",
																				"src": "4414:2:13"
																			},
																			{
																				"kind": "number",
																				"nodeType": "YulLiteral",
																				"src": "4418:2:13",
																				"type": "",
																				"value": "32"
																			}
																		],
																		"functionName": {
																			"name": "add",
																			"nodeType": "YulIdentifier",
																			"src": "4410:3:13"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "4410:11:13"
																	},
																	{
																		"name": "_3",
																		"nodeType": "YulIdentifier",
																		"src": "4423:2:13"
																	}
																],
																"functionName": {
																	"name": "calldatacopy",
																	"nodeType": "YulIdentifier",
																	"src": "4380:12:13"
																},
																"nodeType": "YulFunctionCall",
																"src": "4380:46:13"
															},
															"nodeType": "YulExpressionStatement",
															"src": "4380:46:13"
														},
														{
															"expression": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"arguments": [
																					{
																						"name": "memPtr",
																						"nodeType": "YulIdentifier",
																						"src": "4450:6:13"
																					},
																					{
																						"name": "_3",
																						"nodeType": "YulIdentifier",
																						"src": "4458:2:13"
																					}
																				],
																				"functionName": {
																					"name": "add",
																					"nodeType": "YulIdentifier",
																					"src": "4446:3:13"
																				},
																				"nodeType": "YulFunctionCall",
																				"src": "4446:15:13"
																			},
																			{
																				"kind": "number",
																				"nodeType": "YulLiteral",
																				"src": "4463:2:13",
																				"type": "",
																				"value": "32"
																			}
																		],
																		"functionName": {
																			"name": "add",
																			"nodeType": "YulIdentifier",
																			"src": "4442:3:13"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "4442:24:13"
																	},
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "4468:1:13",
																		"type": "",
																		"value": "0"
																	}
																],
																"functionName": {
																	"name": "mstore",
																	"nodeType": "YulIdentifier",
																	"src": "4435:6:13"
																},
																"nodeType": "YulFunctionCall",
																"src": "4435:35:13"
															},
															"nodeType": "YulExpressionStatement",
															"src": "4435:35:13"
														},
														{
															"nodeType": "YulAssignment",
															"src": "4479:16:13",
															"value": {
																"name": "memPtr",
																"nodeType": "YulIdentifier",
																"src": "4489:6:13"
															},
															"variableNames": [
																{
																	"name": "value3",
																	"nodeType": "YulIdentifier",
																	"src": "4479:6:13"
																}
															]
														}
													]
												},
												"name": "abi_decode_tuple_t_addresst_addresst_uint256t_bytes_memory_ptr",
												"nodeType": "YulFunctionDefinition",
												"parameters": [
													{
														"name": "headStart",
														"nodeType": "YulTypedName",
														"src": "3435:9:13",
														"type": ""
													},
													{
														"name": "dataEnd",
														"nodeType": "YulTypedName",
														"src": "3446:7:13",
														"type": ""
													}
												],
												"returnVariables": [
													{
														"name": "value0",
														"nodeType": "YulTypedName",
														"src": "3458:6:13",
														"type": ""
													},
													{
														"name": "value1",
														"nodeType": "YulTypedName",
														"src": "3466:6:13",
														"type": ""
													},
													{
														"name": "value2",
														"nodeType": "YulTypedName",
														"src": "3474:6:13",
														"type": ""
													},
													{
														"name": "value3",
														"nodeType": "YulTypedName",
														"src": "3482:6:13",
														"type": ""
													}
												],
												"src": "3363:1138:13"
											},
											{
												"body": {
													"nodeType": "YulBlock",
													"src": "4593:173:13",
													"statements": [
														{
															"body": {
																"nodeType": "YulBlock",
																"src": "4639:16:13",
																"statements": [
																	{
																		"expression": {
																			"arguments": [
																				{
																					"kind": "number",
																					"nodeType": "YulLiteral",
																					"src": "4648:1:13",
																					"type": "",
																					"value": "0"
																				},
																				{
																					"kind": "number",
																					"nodeType": "YulLiteral",
																					"src": "4651:1:13",
																					"type": "",
																					"value": "0"
																				}
																			],
																			"functionName": {
																				"name": "revert",
																				"nodeType": "YulIdentifier",
																				"src": "4641:6:13"
																			},
																			"nodeType": "YulFunctionCall",
																			"src": "4641:12:13"
																		},
																		"nodeType": "YulExpressionStatement",
																		"src": "4641:12:13"
																	}
																]
															},
															"condition": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"name": "dataEnd",
																				"nodeType": "YulIdentifier",
																				"src": "4614:7:13"
																			},
																			{
																				"name": "headStart",
																				"nodeType": "YulIdentifier",
																				"src": "4623:9:13"
																			}
																		],
																		"functionName": {
																			"name": "sub",
																			"nodeType": "YulIdentifier",
																			"src": "4610:3:13"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "4610:23:13"
																	},
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "4635:2:13",
																		"type": "",
																		"value": "64"
																	}
																],
																"functionName": {
																	"name": "slt",
																	"nodeType": "YulIdentifier",
																	"src": "4606:3:13"
																},
																"nodeType": "YulFunctionCall",
																"src": "4606:32:13"
															},
															"nodeType": "YulIf",
															"src": "4603:52:13"
														},
														{
															"nodeType": "YulAssignment",
															"src": "4664:39:13",
															"value": {
																"arguments": [
																	{
																		"name": "headStart",
																		"nodeType": "YulIdentifier",
																		"src": "4693:9:13"
																	}
																],
																"functionName": {
																	"name": "abi_decode_address",
																	"nodeType": "YulIdentifier",
																	"src": "4674:18:13"
																},
																"nodeType": "YulFunctionCall",
																"src": "4674:29:13"
															},
															"variableNames": [
																{
																	"name": "value0",
																	"nodeType": "YulIdentifier",
																	"src": "4664:6:13"
																}
															]
														},
														{
															"nodeType": "YulAssignment",
															"src": "4712:48:13",
															"value": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"name": "headStart",
																				"nodeType": "YulIdentifier",
																				"src": "4745:9:13"
																			},
																			{
																				"kind": "number",
																				"nodeType": "YulLiteral",
																				"src": "4756:2:13",
																				"type": "",
																				"value": "32"
																			}
																		],
																		"functionName": {
																			"name": "add",
																			"nodeType": "YulIdentifier",
																			"src": "4741:3:13"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "4741:18:13"
																	}
																],
																"functionName": {
																	"name": "abi_decode_address",
																	"nodeType": "YulIdentifier",
																	"src": "4722:18:13"
																},
																"nodeType": "YulFunctionCall",
																"src": "4722:38:13"
															},
															"variableNames": [
																{
																	"name": "value1",
																	"nodeType": "YulIdentifier",
																	"src": "4712:6:13"
																}
															]
														}
													]
												},
												"name": "abi_decode_tuple_t_addresst_address",
												"nodeType": "YulFunctionDefinition",
												"parameters": [
													{
														"name": "headStart",
														"nodeType": "YulTypedName",
														"src": "4551:9:13",
														"type": ""
													},
													{
														"name": "dataEnd",
														"nodeType": "YulTypedName",
														"src": "4562:7:13",
														"type": ""
													}
												],
												"returnVariables": [
													{
														"name": "value0",
														"nodeType": "YulTypedName",
														"src": "4574:6:13",
														"type": ""
													},
													{
														"name": "value1",
														"nodeType": "YulTypedName",
														"src": "4582:6:13",
														"type": ""
													}
												],
												"src": "4506:260:13"
											},
											{
												"body": {
													"nodeType": "YulBlock",
													"src": "4826:325:13",
													"statements": [
														{
															"nodeType": "YulAssignment",
															"src": "4836:22:13",
															"value": {
																"arguments": [
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "4850:1:13",
																		"type": "",
																		"value": "1"
																	},
																	{
																		"name": "data",
																		"nodeType": "YulIdentifier",
																		"src": "4853:4:13"
																	}
																],
																"functionName": {
																	"name": "shr",
																	"nodeType": "YulIdentifier",
																	"src": "4846:3:13"
																},
																"nodeType": "YulFunctionCall",
																"src": "4846:12:13"
															},
															"variableNames": [
																{
																	"name": "length",
																	"nodeType": "YulIdentifier",
																	"src": "4836:6:13"
																}
															]
														},
														{
															"nodeType": "YulVariableDeclaration",
															"src": "4867:38:13",
															"value": {
																"arguments": [
																	{
																		"name": "data",
																		"nodeType": "YulIdentifier",
																		"src": "4897:4:13"
																	},
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "4903:1:13",
																		"type": "",
																		"value": "1"
																	}
																],
																"functionName": {
																	"name": "and",
																	"nodeType": "YulIdentifier",
																	"src": "4893:3:13"
																},
																"nodeType": "YulFunctionCall",
																"src": "4893:12:13"
															},
															"variables": [
																{
																	"name": "outOfPlaceEncoding",
																	"nodeType": "YulTypedName",
																	"src": "4871:18:13",
																	"type": ""
																}
															]
														},
														{
															"body": {
																"nodeType": "YulBlock",
																"src": "4944:31:13",
																"statements": [
																	{
																		"nodeType": "YulAssignment",
																		"src": "4946:27:13",
																		"value": {
																			"arguments": [
																				{
																					"name": "length",
																					"nodeType": "YulIdentifier",
																					"src": "4960:6:13"
																				},
																				{
																					"kind": "number",
																					"nodeType": "YulLiteral",
																					"src": "4968:4:13",
																					"type": "",
																					"value": "0x7f"
																				}
																			],
																			"functionName": {
																				"name": "and",
																				"nodeType": "YulIdentifier",
																				"src": "4956:3:13"
																			},
																			"nodeType": "YulFunctionCall",
																			"src": "4956:17:13"
																		},
																		"variableNames": [
																			{
																				"name": "length",
																				"nodeType": "YulIdentifier",
																				"src": "4946:6:13"
																			}
																		]
																	}
																]
															},
															"condition": {
																"arguments": [
																	{
																		"name": "outOfPlaceEncoding",
																		"nodeType": "YulIdentifier",
																		"src": "4924:18:13"
																	}
																],
																"functionName": {
																	"name": "iszero",
																	"nodeType": "YulIdentifier",
																	"src": "4917:6:13"
																},
																"nodeType": "YulFunctionCall",
																"src": "4917:26:13"
															},
															"nodeType": "YulIf",
															"src": "4914:61:13"
														},
														{
															"body": {
																"nodeType": "YulBlock",
																"src": "5034:111:13",
																"statements": [
																	{
																		"expression": {
																			"arguments": [
																				{
																					"kind": "number",
																					"nodeType": "YulLiteral",
																					"src": "5055:1:13",
																					"type": "",
																					"value": "0"
																				},
																				{
																					"arguments": [
																						{
																							"kind": "number",
																							"nodeType": "YulLiteral",
																							"src": "5062:3:13",
																							"type": "",
																							"value": "224"
																						},
																						{
																							"kind": "number",
																							"nodeType": "YulLiteral",
																							"src": "5067:10:13",
																							"type": "",
																							"value": "0x4e487b71"
																						}
																					],
																					"functionName": {
																						"name": "shl",
																						"nodeType": "YulIdentifier",
																						"src": "5058:3:13"
																					},
																					"nodeType": "YulFunctionCall",
																					"src": "5058:20:13"
																				}
																			],
																			"functionName": {
																				"name": "mstore",
																				"nodeType": "YulIdentifier",
																				"src": "5048:6:13"
																			},
																			"nodeType": "YulFunctionCall",
																			"src": "5048:31:13"
																		},
																		"nodeType": "YulExpressionStatement",
																		"src": "5048:31:13"
																	},
																	{
																		"expression": {
																			"arguments": [
																				{
																					"kind": "number",
																					"nodeType": "YulLiteral",
																					"src": "5099:1:13",
																					"type": "",
																					"value": "4"
																				},
																				{
																					"kind": "number",
																					"nodeType": "YulLiteral",
																					"src": "5102:4:13",
																					"type": "",
																					"value": "0x22"
																				}
																			],
																			"functionName": {
																				"name": "mstore",
																				"nodeType": "YulIdentifier",
																				"src": "5092:6:13"
																			},
																			"nodeType": "YulFunctionCall",
																			"src": "5092:15:13"
																		},
																		"nodeType": "YulExpressionStatement",
																		"src": "5092:15:13"
																	},
																	{
																		"expression": {
																			"arguments": [
																				{
																					"kind": "number",
																					"nodeType": "YulLiteral",
																					"src": "5127:1:13",
																					"type": "",
																					"value": "0"
																				},
																				{
																					"kind": "number",
																					"nodeType": "YulLiteral",
																					"src": "5130:4:13",
																					"type": "",
																					"value": "0x24"
																				}
																			],
																			"functionName": {
																				"name": "revert",
																				"nodeType": "YulIdentifier",
																				"src": "5120:6:13"
																			},
																			"nodeType": "YulFunctionCall",
																			"src": "5120:15:13"
																		},
																		"nodeType": "YulExpressionStatement",
																		"src": "5120:15:13"
																	}
																]
															},
															"condition": {
																"arguments": [
																	{
																		"name": "outOfPlaceEncoding",
																		"nodeType": "YulIdentifier",
																		"src": "4990:18:13"
																	},
																	{
																		"arguments": [
																			{
																				"name": "length",
																				"nodeType": "YulIdentifier",
																				"src": "5013:6:13"
																			},
																			{
																				"kind": "number",
																				"nodeType": "YulLiteral",
																				"src": "5021:2:13",
																				"type": "",
																				"value": "32"
																			}
																		],
																		"functionName": {
																			"name": "lt",
																			"nodeType": "YulIdentifier",
																			"src": "5010:2:13"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "5010:14:13"
																	}
																],
																"functionName": {
																	"name": "eq",
																	"nodeType": "YulIdentifier",
																	"src": "4987:2:13"
																},
																"nodeType": "YulFunctionCall",
																"src": "4987:38:13"
															},
															"nodeType": "YulIf",
															"src": "4984:161:13"
														}
													]
												},
												"name": "extract_byte_array_length",
												"nodeType": "YulFunctionDefinition",
												"parameters": [
													{
														"name": "data",
														"nodeType": "YulTypedName",
														"src": "4806:4:13",
														"type": ""
													}
												],
												"returnVariables": [
													{
														"name": "length",
														"nodeType": "YulTypedName",
														"src": "4815:6:13",
														"type": ""
													}
												],
												"src": "4771:380:13"
											},
											{
												"body": {
													"nodeType": "YulBlock",
													"src": "5343:283:13",
													"statements": [
														{
															"nodeType": "YulVariableDeclaration",
															"src": "5353:27:13",
															"value": {
																"arguments": [
																	{
																		"name": "value0",
																		"nodeType": "YulIdentifier",
																		"src": "5373:6:13"
																	}
																],
																"functionName": {
																	"name": "mload",
																	"nodeType": "YulIdentifier",
																	"src": "5367:5:13"
																},
																"nodeType": "YulFunctionCall",
																"src": "5367:13:13"
															},
															"variables": [
																{
																	"name": "length",
																	"nodeType": "YulTypedName",
																	"src": "5357:6:13",
																	"type": ""
																}
															]
														},
														{
															"expression": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"name": "value0",
																				"nodeType": "YulIdentifier",
																				"src": "5415:6:13"
																			},
																			{
																				"kind": "number",
																				"nodeType": "YulLiteral",
																				"src": "5423:4:13",
																				"type": "",
																				"value": "0x20"
																			}
																		],
																		"functionName": {
																			"name": "add",
																			"nodeType": "YulIdentifier",
																			"src": "5411:3:13"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "5411:17:13"
																	},
																	{
																		"name": "pos",
																		"nodeType": "YulIdentifier",
																		"src": "5430:3:13"
																	},
																	{
																		"name": "length",
																		"nodeType": "YulIdentifier",
																		"src": "5435:6:13"
																	}
																],
																"functionName": {
																	"name": "copy_memory_to_memory",
																	"nodeType": "YulIdentifier",
																	"src": "5389:21:13"
																},
																"nodeType": "YulFunctionCall",
																"src": "5389:53:13"
															},
															"nodeType": "YulExpressionStatement",
															"src": "5389:53:13"
														},
														{
															"nodeType": "YulVariableDeclaration",
															"src": "5451:29:13",
															"value": {
																"arguments": [
																	{
																		"name": "pos",
																		"nodeType": "YulIdentifier",
																		"src": "5468:3:13"
																	},
																	{
																		"name": "length",
																		"nodeType": "YulIdentifier",
																		"src": "5473:6:13"
																	}
																],
																"functionName": {
																	"name": "add",
																	"nodeType": "YulIdentifier",
																	"src": "5464:3:13"
																},
																"nodeType": "YulFunctionCall",
																"src": "5464:16:13"
															},
															"variables": [
																{
																	"name": "end_1",
																	"nodeType": "YulTypedName",
																	"src": "5455:5:13",
																	"type": ""
																}
															]
														},
														{
															"nodeType": "YulVariableDeclaration",
															"src": "5489:29:13",
															"value": {
																"arguments": [
																	{
																		"name": "value1",
																		"nodeType": "YulIdentifier",
																		"src": "5511:6:13"
																	}
																],
																"functionName": {
																	"name": "mload",
																	"nodeType": "YulIdentifier",
																	"src": "5505:5:13"
																},
																"nodeType": "YulFunctionCall",
																"src": "5505:13:13"
															},
															"variables": [
																{
																	"name": "length_1",
																	"nodeType": "YulTypedName",
																	"src": "5493:8:13",
																	"type": ""
																}
															]
														},
														{
															"expression": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"name": "value1",
																				"nodeType": "YulIdentifier",
																				"src": "5553:6:13"
																			},
																			{
																				"kind": "number",
																				"nodeType": "YulLiteral",
																				"src": "5561:4:13",
																				"type": "",
																				"value": "0x20"
																			}
																		],
																		"functionName": {
																			"name": "add",
																			"nodeType": "YulIdentifier",
																			"src": "5549:3:13"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "5549:17:13"
																	},
																	{
																		"name": "end_1",
																		"nodeType": "YulIdentifier",
																		"src": "5568:5:13"
																	},
																	{
																		"name": "length_1",
																		"nodeType": "YulIdentifier",
																		"src": "5575:8:13"
																	}
																],
																"functionName": {
																	"name": "copy_memory_to_memory",
																	"nodeType": "YulIdentifier",
																	"src": "5527:21:13"
																},
																"nodeType": "YulFunctionCall",
																"src": "5527:57:13"
															},
															"nodeType": "YulExpressionStatement",
															"src": "5527:57:13"
														},
														{
															"nodeType": "YulAssignment",
															"src": "5593:27:13",
															"value": {
																"arguments": [
																	{
																		"name": "end_1",
																		"nodeType": "YulIdentifier",
																		"src": "5604:5:13"
																	},
																	{
																		"name": "length_1",
																		"nodeType": "YulIdentifier",
																		"src": "5611:8:13"
																	}
																],
																"functionName": {
																	"name": "add",
																	"nodeType": "YulIdentifier",
																	"src": "5600:3:13"
																},
																"nodeType": "YulFunctionCall",
																"src": "5600:20:13"
															},
															"variableNames": [
																{
																	"name": "end",
																	"nodeType": "YulIdentifier",
																	"src": "5593:3:13"
																}
															]
														}
													]
												},
												"name": "abi_encode_tuple_packed_t_string_memory_ptr_t_string_memory_ptr__to_t_string_memory_ptr_t_string_memory_ptr__nonPadded_inplace_fromStack_reversed",
												"nodeType": "YulFunctionDefinition",
												"parameters": [
													{
														"name": "pos",
														"nodeType": "YulTypedName",
														"src": "5311:3:13",
														"type": ""
													},
													{
														"name": "value1",
														"nodeType": "YulTypedName",
														"src": "5316:6:13",
														"type": ""
													},
													{
														"name": "value0",
														"nodeType": "YulTypedName",
														"src": "5324:6:13",
														"type": ""
													}
												],
												"returnVariables": [
													{
														"name": "end",
														"nodeType": "YulTypedName",
														"src": "5335:3:13",
														"type": ""
													}
												],
												"src": "5156:470:13"
											},
											{
												"body": {
													"nodeType": "YulBlock",
													"src": "5834:286:13",
													"statements": [
														{
															"nodeType": "YulVariableDeclaration",
															"src": "5844:29:13",
															"value": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"kind": "number",
																				"nodeType": "YulLiteral",
																				"src": "5862:3:13",
																				"type": "",
																				"value": "160"
																			},
																			{
																				"kind": "number",
																				"nodeType": "YulLiteral",
																				"src": "5867:1:13",
																				"type": "",
																				"value": "1"
																			}
																		],
																		"functionName": {
																			"name": "shl",
																			"nodeType": "YulIdentifier",
																			"src": "5858:3:13"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "5858:11:13"
																	},
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "5871:1:13",
																		"type": "",
																		"value": "1"
																	}
																],
																"functionName": {
																	"name": "sub",
																	"nodeType": "YulIdentifier",
																	"src": "5854:3:13"
																},
																"nodeType": "YulFunctionCall",
																"src": "5854:19:13"
															},
															"variables": [
																{
																	"name": "_1",
																	"nodeType": "YulTypedName",
																	"src": "5848:2:13",
																	"type": ""
																}
															]
														},
														{
															"expression": {
																"arguments": [
																	{
																		"name": "headStart",
																		"nodeType": "YulIdentifier",
																		"src": "5889:9:13"
																	},
																	{
																		"arguments": [
																			{
																				"name": "value0",
																				"nodeType": "YulIdentifier",
																				"src": "5904:6:13"
																			},
																			{
																				"name": "_1",
																				"nodeType": "YulIdentifier",
																				"src": "5912:2:13"
																			}
																		],
																		"functionName": {
																			"name": "and",
																			"nodeType": "YulIdentifier",
																			"src": "5900:3:13"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "5900:15:13"
																	}
																],
																"functionName": {
																	"name": "mstore",
																	"nodeType": "YulIdentifier",
																	"src": "5882:6:13"
																},
																"nodeType": "YulFunctionCall",
																"src": "5882:34:13"
															},
															"nodeType": "YulExpressionStatement",
															"src": "5882:34:13"
														},
														{
															"expression": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"name": "headStart",
																				"nodeType": "YulIdentifier",
																				"src": "5936:9:13"
																			},
																			{
																				"kind": "number",
																				"nodeType": "YulLiteral",
																				"src": "5947:2:13",
																				"type": "",
																				"value": "32"
																			}
																		],
																		"functionName": {
																			"name": "add",
																			"nodeType": "YulIdentifier",
																			"src": "5932:3:13"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "5932:18:13"
																	},
																	{
																		"arguments": [
																			{
																				"name": "value1",
																				"nodeType": "YulIdentifier",
																				"src": "5956:6:13"
																			},
																			{
																				"name": "_1",
																				"nodeType": "YulIdentifier",
																				"src": "5964:2:13"
																			}
																		],
																		"functionName": {
																			"name": "and",
																			"nodeType": "YulIdentifier",
																			"src": "5952:3:13"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "5952:15:13"
																	}
																],
																"functionName": {
																	"name": "mstore",
																	"nodeType": "YulIdentifier",
																	"src": "5925:6:13"
																},
																"nodeType": "YulFunctionCall",
																"src": "5925:43:13"
															},
															"nodeType": "YulExpressionStatement",
															"src": "5925:43:13"
														},
														{
															"expression": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"name": "headStart",
																				"nodeType": "YulIdentifier",
																				"src": "5988:9:13"
																			},
																			{
																				"kind": "number",
																				"nodeType": "YulLiteral",
																				"src": "5999:2:13",
																				"type": "",
																				"value": "64"
																			}
																		],
																		"functionName": {
																			"name": "add",
																			"nodeType": "YulIdentifier",
																			"src": "5984:3:13"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "5984:18:13"
																	},
																	{
																		"name": "value2",
																		"nodeType": "YulIdentifier",
																		"src": "6004:6:13"
																	}
																],
																"functionName": {
																	"name": "mstore",
																	"nodeType": "YulIdentifier",
																	"src": "5977:6:13"
																},
																"nodeType": "YulFunctionCall",
																"src": "5977:34:13"
															},
															"nodeType": "YulExpressionStatement",
															"src": "5977:34:13"
														},
														{
															"expression": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"name": "headStart",
																				"nodeType": "YulIdentifier",
																				"src": "6031:9:13"
																			},
																			{
																				"kind": "number",
																				"nodeType": "YulLiteral",
																				"src": "6042:2:13",
																				"type": "",
																				"value": "96"
																			}
																		],
																		"functionName": {
																			"name": "add",
																			"nodeType": "YulIdentifier",
																			"src": "6027:3:13"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "6027:18:13"
																	},
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "6047:3:13",
																		"type": "",
																		"value": "128"
																	}
																],
																"functionName": {
																	"name": "mstore",
																	"nodeType": "YulIdentifier",
																	"src": "6020:6:13"
																},
																"nodeType": "YulFunctionCall",
																"src": "6020:31:13"
															},
															"nodeType": "YulExpressionStatement",
															"src": "6020:31:13"
														},
														{
															"nodeType": "YulAssignment",
															"src": "6060:54:13",
															"value": {
																"arguments": [
																	{
																		"name": "value3",
																		"nodeType": "YulIdentifier",
																		"src": "6086:6:13"
																	},
																	{
																		"arguments": [
																			{
																				"name": "headStart",
																				"nodeType": "YulIdentifier",
																				"src": "6098:9:13"
																			},
																			{
																				"kind": "number",
																				"nodeType": "YulLiteral",
																				"src": "6109:3:13",
																				"type": "",
																				"value": "128"
																			}
																		],
																		"functionName": {
																			"name": "add",
																			"nodeType": "YulIdentifier",
																			"src": "6094:3:13"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "6094:19:13"
																	}
																],
																"functionName": {
																	"name": "abi_encode_string",
																	"nodeType": "YulIdentifier",
																	"src": "6068:17:13"
																},
																"nodeType": "YulFunctionCall",
																"src": "6068:46:13"
															},
															"variableNames": [
																{
																	"name": "tail",
																	"nodeType": "YulIdentifier",
																	"src": "6060:4:13"
																}
															]
														}
													]
												},
												"name": "abi_encode_tuple_t_address_t_address_t_uint256_t_bytes_memory_ptr__to_t_address_t_address_t_uint256_t_bytes_memory_ptr__fromStack_reversed",
												"nodeType": "YulFunctionDefinition",
												"parameters": [
													{
														"name": "headStart",
														"nodeType": "YulTypedName",
														"src": "5779:9:13",
														"type": ""
													},
													{
														"name": "value3",
														"nodeType": "YulTypedName",
														"src": "5790:6:13",
														"type": ""
													},
													{
														"name": "value2",
														"nodeType": "YulTypedName",
														"src": "5798:6:13",
														"type": ""
													},
													{
														"name": "value1",
														"nodeType": "YulTypedName",
														"src": "5806:6:13",
														"type": ""
													},
													{
														"name": "value0",
														"nodeType": "YulTypedName",
														"src": "5814:6:13",
														"type": ""
													}
												],
												"returnVariables": [
													{
														"name": "tail",
														"nodeType": "YulTypedName",
														"src": "5825:4:13",
														"type": ""
													}
												],
												"src": "5631:489:13"
											},
											{
												"body": {
													"nodeType": "YulBlock",
													"src": "6205:169:13",
													"statements": [
														{
															"body": {
																"nodeType": "YulBlock",
																"src": "6251:16:13",
																"statements": [
																	{
																		"expression": {
																			"arguments": [
																				{
																					"kind": "number",
																					"nodeType": "YulLiteral",
																					"src": "6260:1:13",
																					"type": "",
																					"value": "0"
																				},
																				{
																					"kind": "number",
																					"nodeType": "YulLiteral",
																					"src": "6263:1:13",
																					"type": "",
																					"value": "0"
																				}
																			],
																			"functionName": {
																				"name": "revert",
																				"nodeType": "YulIdentifier",
																				"src": "6253:6:13"
																			},
																			"nodeType": "YulFunctionCall",
																			"src": "6253:12:13"
																		},
																		"nodeType": "YulExpressionStatement",
																		"src": "6253:12:13"
																	}
																]
															},
															"condition": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"name": "dataEnd",
																				"nodeType": "YulIdentifier",
																				"src": "6226:7:13"
																			},
																			{
																				"name": "headStart",
																				"nodeType": "YulIdentifier",
																				"src": "6235:9:13"
																			}
																		],
																		"functionName": {
																			"name": "sub",
																			"nodeType": "YulIdentifier",
																			"src": "6222:3:13"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "6222:23:13"
																	},
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "6247:2:13",
																		"type": "",
																		"value": "32"
																	}
																],
																"functionName": {
																	"name": "slt",
																	"nodeType": "YulIdentifier",
																	"src": "6218:3:13"
																},
																"nodeType": "YulFunctionCall",
																"src": "6218:32:13"
															},
															"nodeType": "YulIf",
															"src": "6215:52:13"
														},
														{
															"nodeType": "YulVariableDeclaration",
															"src": "6276:29:13",
															"value": {
																"arguments": [
																	{
																		"name": "headStart",
																		"nodeType": "YulIdentifier",
																		"src": "6295:9:13"
																	}
																],
																"functionName": {
																	"name": "mload",
																	"nodeType": "YulIdentifier",
																	"src": "6289:5:13"
																},
																"nodeType": "YulFunctionCall",
																"src": "6289:16:13"
															},
															"variables": [
																{
																	"name": "value",
																	"nodeType": "YulTypedName",
																	"src": "6280:5:13",
																	"type": ""
																}
															]
														},
														{
															"expression": {
																"arguments": [
																	{
																		"name": "value",
																		"nodeType": "YulIdentifier",
																		"src": "6338:5:13"
																	}
																],
																"functionName": {
																	"name": "validator_revert_bytes4",
																	"nodeType": "YulIdentifier",
																	"src": "6314:23:13"
																},
																"nodeType": "YulFunctionCall",
																"src": "6314:30:13"
															},
															"nodeType": "YulExpressionStatement",
															"src": "6314:30:13"
														},
														{
															"nodeType": "YulAssignment",
															"src": "6353:15:13",
															"value": {
																"name": "value",
																"nodeType": "YulIdentifier",
																"src": "6363:5:13"
															},
															"variableNames": [
																{
																	"name": "value0",
																	"nodeType": "YulIdentifier",
																	"src": "6353:6:13"
																}
															]
														}
													]
												},
												"name": "abi_decode_tuple_t_bytes4_fromMemory",
												"nodeType": "YulFunctionDefinition",
												"parameters": [
													{
														"name": "headStart",
														"nodeType": "YulTypedName",
														"src": "6171:9:13",
														"type": ""
													},
													{
														"name": "dataEnd",
														"nodeType": "YulTypedName",
														"src": "6182:7:13",
														"type": ""
													}
												],
												"returnVariables": [
													{
														"name": "value0",
														"nodeType": "YulTypedName",
														"src": "6194:6:13",
														"type": ""
													}
												],
												"src": "6125:249:13"
											},
											{
												"body": {
													"nodeType": "YulBlock",
													"src": "6411:95:13",
													"statements": [
														{
															"expression": {
																"arguments": [
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "6428:1:13",
																		"type": "",
																		"value": "0"
																	},
																	{
																		"arguments": [
																			{
																				"kind": "number",
																				"nodeType": "YulLiteral",
																				"src": "6435:3:13",
																				"type": "",
																				"value": "224"
																			},
																			{
																				"kind": "number",
																				"nodeType": "YulLiteral",
																				"src": "6440:10:13",
																				"type": "",
																				"value": "0x4e487b71"
																			}
																		],
																		"functionName": {
																			"name": "shl",
																			"nodeType": "YulIdentifier",
																			"src": "6431:3:13"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "6431:20:13"
																	}
																],
																"functionName": {
																	"name": "mstore",
																	"nodeType": "YulIdentifier",
																	"src": "6421:6:13"
																},
																"nodeType": "YulFunctionCall",
																"src": "6421:31:13"
															},
															"nodeType": "YulExpressionStatement",
															"src": "6421:31:13"
														},
														{
															"expression": {
																"arguments": [
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "6468:1:13",
																		"type": "",
																		"value": "4"
																	},
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "6471:4:13",
																		"type": "",
																		"value": "0x11"
																	}
																],
																"functionName": {
																	"name": "mstore",
																	"nodeType": "YulIdentifier",
																	"src": "6461:6:13"
																},
																"nodeType": "YulFunctionCall",
																"src": "6461:15:13"
															},
															"nodeType": "YulExpressionStatement",
															"src": "6461:15:13"
														},
														{
															"expression": {
																"arguments": [
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "6492:1:13",
																		"type": "",
																		"value": "0"
																	},
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "6495:4:13",
																		"type": "",
																		"value": "0x24"
																	}
																],
																"functionName": {
																	"name": "revert",
																	"nodeType": "YulIdentifier",
																	"src": "6485:6:13"
																},
																"nodeType": "YulFunctionCall",
																"src": "6485:15:13"
															},
															"nodeType": "YulExpressionStatement",
															"src": "6485:15:13"
														}
													]
												},
												"name": "panic_error_0x11",
												"nodeType": "YulFunctionDefinition",
												"src": "6379:127:13"
											},
											{
												"body": {
													"nodeType": "YulBlock",
													"src": "6558:88:13",
													"statements": [
														{
															"body": {
																"nodeType": "YulBlock",
																"src": "6589:22:13",
																"statements": [
																	{
																		"expression": {
																			"arguments": [],
																			"functionName": {
																				"name": "panic_error_0x11",
																				"nodeType": "YulIdentifier",
																				"src": "6591:16:13"
																			},
																			"nodeType": "YulFunctionCall",
																			"src": "6591:18:13"
																		},
																		"nodeType": "YulExpressionStatement",
																		"src": "6591:18:13"
																	}
																]
															},
															"condition": {
																"arguments": [
																	{
																		"name": "value",
																		"nodeType": "YulIdentifier",
																		"src": "6574:5:13"
																	},
																	{
																		"arguments": [
																			{
																				"kind": "number",
																				"nodeType": "YulLiteral",
																				"src": "6585:1:13",
																				"type": "",
																				"value": "0"
																			}
																		],
																		"functionName": {
																			"name": "not",
																			"nodeType": "YulIdentifier",
																			"src": "6581:3:13"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "6581:6:13"
																	}
																],
																"functionName": {
																	"name": "eq",
																	"nodeType": "YulIdentifier",
																	"src": "6571:2:13"
																},
																"nodeType": "YulFunctionCall",
																"src": "6571:17:13"
															},
															"nodeType": "YulIf",
															"src": "6568:43:13"
														},
														{
															"nodeType": "YulAssignment",
															"src": "6620:20:13",
															"value": {
																"arguments": [
																	{
																		"name": "value",
																		"nodeType": "YulIdentifier",
																		"src": "6631:5:13"
																	},
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "6638:1:13",
																		"type": "",
																		"value": "1"
																	}
																],
																"functionName": {
																	"name": "add",
																	"nodeType": "YulIdentifier",
																	"src": "6627:3:13"
																},
																"nodeType": "YulFunctionCall",
																"src": "6627:13:13"
															},
															"variableNames": [
																{
																	"name": "ret",
																	"nodeType": "YulIdentifier",
																	"src": "6620:3:13"
																}
															]
														}
													]
												},
												"name": "increment_t_uint256",
												"nodeType": "YulFunctionDefinition",
												"parameters": [
													{
														"name": "value",
														"nodeType": "YulTypedName",
														"src": "6540:5:13",
														"type": ""
													}
												],
												"returnVariables": [
													{
														"name": "ret",
														"nodeType": "YulTypedName",
														"src": "6550:3:13",
														"type": ""
													}
												],
												"src": "6511:135:13"
											},
											{
												"body": {
													"nodeType": "YulBlock",
													"src": "6683:95:13",
													"statements": [
														{
															"expression": {
																"arguments": [
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "6700:1:13",
																		"type": "",
																		"value": "0"
																	},
																	{
																		"arguments": [
																			{
																				"kind": "number",
																				"nodeType": "YulLiteral",
																				"src": "6707:3:13",
																				"type": "",
																				"value": "224"
																			},
																			{
																				"kind": "number",
																				"nodeType": "YulLiteral",
																				"src": "6712:10:13",
																				"type": "",
																				"value": "0x4e487b71"
																			}
																		],
																		"functionName": {
																			"name": "shl",
																			"nodeType": "YulIdentifier",
																			"src": "6703:3:13"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "6703:20:13"
																	}
																],
																"functionName": {
																	"name": "mstore",
																	"nodeType": "YulIdentifier",
																	"src": "6693:6:13"
																},
																"nodeType": "YulFunctionCall",
																"src": "6693:31:13"
															},
															"nodeType": "YulExpressionStatement",
															"src": "6693:31:13"
														},
														{
															"expression": {
																"arguments": [
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "6740:1:13",
																		"type": "",
																		"value": "4"
																	},
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "6743:4:13",
																		"type": "",
																		"value": "0x12"
																	}
																],
																"functionName": {
																	"name": "mstore",
																	"nodeType": "YulIdentifier",
																	"src": "6733:6:13"
																},
																"nodeType": "YulFunctionCall",
																"src": "6733:15:13"
															},
															"nodeType": "YulExpressionStatement",
															"src": "6733:15:13"
														},
														{
															"expression": {
																"arguments": [
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "6764:1:13",
																		"type": "",
																		"value": "0"
																	},
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "6767:4:13",
																		"type": "",
																		"value": "0x24"
																	}
																],
																"functionName": {
																	"name": "revert",
																	"nodeType": "YulIdentifier",
																	"src": "6757:6:13"
																},
																"nodeType": "YulFunctionCall",
																"src": "6757:15:13"
															},
															"nodeType": "YulExpressionStatement",
															"src": "6757:15:13"
														}
													]
												},
												"name": "panic_error_0x12",
												"nodeType": "YulFunctionDefinition",
												"src": "6651:127:13"
											},
											{
												"body": {
													"nodeType": "YulBlock",
													"src": "6829:74:13",
													"statements": [
														{
															"body": {
																"nodeType": "YulBlock",
																"src": "6852:22:13",
																"statements": [
																	{
																		"expression": {
																			"arguments": [],
																			"functionName": {
																				"name": "panic_error_0x12",
																				"nodeType": "YulIdentifier",
																				"src": "6854:16:13"
																			},
																			"nodeType": "YulFunctionCall",
																			"src": "6854:18:13"
																		},
																		"nodeType": "YulExpressionStatement",
																		"src": "6854:18:13"
																	}
																]
															},
															"condition": {
																"arguments": [
																	{
																		"name": "y",
																		"nodeType": "YulIdentifier",
																		"src": "6849:1:13"
																	}
																],
																"functionName": {
																	"name": "iszero",
																	"nodeType": "YulIdentifier",
																	"src": "6842:6:13"
																},
																"nodeType": "YulFunctionCall",
																"src": "6842:9:13"
															},
															"nodeType": "YulIf",
															"src": "6839:35:13"
														},
														{
															"nodeType": "YulAssignment",
															"src": "6883:14:13",
															"value": {
																"arguments": [
																	{
																		"name": "x",
																		"nodeType": "YulIdentifier",
																		"src": "6892:1:13"
																	},
																	{
																		"name": "y",
																		"nodeType": "YulIdentifier",
																		"src": "6895:1:13"
																	}
																],
																"functionName": {
																	"name": "div",
																	"nodeType": "YulIdentifier",
																	"src": "6888:3:13"
																},
																"nodeType": "YulFunctionCall",
																"src": "6888:9:13"
															},
															"variableNames": [
																{
																	"name": "r",
																	"nodeType": "YulIdentifier",
																	"src": "6883:1:13"
																}
															]
														}
													]
												},
												"name": "checked_div_t_uint256",
												"nodeType": "YulFunctionDefinition",
												"parameters": [
													{
														"name": "x",
														"nodeType": "YulTypedName",
														"src": "6814:1:13",
														"type": ""
													},
													{
														"name": "y",
														"nodeType": "YulTypedName",
														"src": "6817:1:13",
														"type": ""
													}
												],
												"returnVariables": [
													{
														"name": "r",
														"nodeType": "YulTypedName",
														"src": "6823:1:13",
														"type": ""
													}
												],
												"src": "6783:120:13"
											},
											{
												"body": {
													"nodeType": "YulBlock",
													"src": "6957:76:13",
													"statements": [
														{
															"body": {
																"nodeType": "YulBlock",
																"src": "6979:22:13",
																"statements": [
																	{
																		"expression": {
																			"arguments": [],
																			"functionName": {
																				"name": "panic_error_0x11",
																				"nodeType": "YulIdentifier",
																				"src": "6981:16:13"
																			},
																			"nodeType": "YulFunctionCall",
																			"src": "6981:18:13"
																		},
																		"nodeType": "YulExpressionStatement",
																		"src": "6981:18:13"
																	}
																]
															},
															"condition": {
																"arguments": [
																	{
																		"name": "x",
																		"nodeType": "YulIdentifier",
																		"src": "6973:1:13"
																	},
																	{
																		"name": "y",
																		"nodeType": "YulIdentifier",
																		"src": "6976:1:13"
																	}
																],
																"functionName": {
																	"name": "lt",
																	"nodeType": "YulIdentifier",
																	"src": "6970:2:13"
																},
																"nodeType": "YulFunctionCall",
																"src": "6970:8:13"
															},
															"nodeType": "YulIf",
															"src": "6967:34:13"
														},
														{
															"nodeType": "YulAssignment",
															"src": "7010:17:13",
															"value": {
																"arguments": [
																	{
																		"name": "x",
																		"nodeType": "YulIdentifier",
																		"src": "7022:1:13"
																	},
																	{
																		"name": "y",
																		"nodeType": "YulIdentifier",
																		"src": "7025:1:13"
																	}
																],
																"functionName": {
																	"name": "sub",
																	"nodeType": "YulIdentifier",
																	"src": "7018:3:13"
																},
																"nodeType": "YulFunctionCall",
																"src": "7018:9:13"
															},
															"variableNames": [
																{
																	"name": "diff",
																	"nodeType": "YulIdentifier",
																	"src": "7010:4:13"
																}
															]
														}
													]
												},
												"name": "checked_sub_t_uint256",
												"nodeType": "YulFunctionDefinition",
												"parameters": [
													{
														"name": "x",
														"nodeType": "YulTypedName",
														"src": "6939:1:13",
														"type": ""
													},
													{
														"name": "y",
														"nodeType": "YulTypedName",
														"src": "6942:1:13",
														"type": ""
													}
												],
												"returnVariables": [
													{
														"name": "diff",
														"nodeType": "YulTypedName",
														"src": "6948:4:13",
														"type": ""
													}
												],
												"src": "6908:125:13"
											},
											{
												"body": {
													"nodeType": "YulBlock",
													"src": "7076:74:13",
													"statements": [
														{
															"body": {
																"nodeType": "YulBlock",
																"src": "7099:22:13",
																"statements": [
																	{
																		"expression": {
																			"arguments": [],
																			"functionName": {
																				"name": "panic_error_0x12",
																				"nodeType": "YulIdentifier",
																				"src": "7101:16:13"
																			},
																			"nodeType": "YulFunctionCall",
																			"src": "7101:18:13"
																		},
																		"nodeType": "YulExpressionStatement",
																		"src": "7101:18:13"
																	}
																]
															},
															"condition": {
																"arguments": [
																	{
																		"name": "y",
																		"nodeType": "YulIdentifier",
																		"src": "7096:1:13"
																	}
																],
																"functionName": {
																	"name": "iszero",
																	"nodeType": "YulIdentifier",
																	"src": "7089:6:13"
																},
																"nodeType": "YulFunctionCall",
																"src": "7089:9:13"
															},
															"nodeType": "YulIf",
															"src": "7086:35:13"
														},
														{
															"nodeType": "YulAssignment",
															"src": "7130:14:13",
															"value": {
																"arguments": [
																	{
																		"name": "x",
																		"nodeType": "YulIdentifier",
																		"src": "7139:1:13"
																	},
																	{
																		"name": "y",
																		"nodeType": "YulIdentifier",
																		"src": "7142:1:13"
																	}
																],
																"functionName": {
																	"name": "mod",
																	"nodeType": "YulIdentifier",
																	"src": "7135:3:13"
																},
																"nodeType": "YulFunctionCall",
																"src": "7135:9:13"
															},
															"variableNames": [
																{
																	"name": "r",
																	"nodeType": "YulIdentifier",
																	"src": "7130:1:13"
																}
															]
														}
													]
												},
												"name": "mod_t_uint256",
												"nodeType": "YulFunctionDefinition",
												"parameters": [
													{
														"name": "x",
														"nodeType": "YulTypedName",
														"src": "7061:1:13",
														"type": ""
													},
													{
														"name": "y",
														"nodeType": "YulTypedName",
														"src": "7064:1:13",
														"type": ""
													}
												],
												"returnVariables": [
													{
														"name": "r",
														"nodeType": "YulTypedName",
														"src": "7070:1:13",
														"type": ""
													}
												],
												"src": "7038:112:13"
											},
											{
												"body": {
													"nodeType": "YulBlock",
													"src": "7203:80:13",
													"statements": [
														{
															"body": {
																"nodeType": "YulBlock",
																"src": "7230:22:13",
																"statements": [
																	{
																		"expression": {
																			"arguments": [],
																			"functionName": {
																				"name": "panic_error_0x11",
																				"nodeType": "YulIdentifier",
																				"src": "7232:16:13"
																			},
																			"nodeType": "YulFunctionCall",
																			"src": "7232:18:13"
																		},
																		"nodeType": "YulExpressionStatement",
																		"src": "7232:18:13"
																	}
																]
															},
															"condition": {
																"arguments": [
																	{
																		"name": "x",
																		"nodeType": "YulIdentifier",
																		"src": "7219:1:13"
																	},
																	{
																		"arguments": [
																			{
																				"name": "y",
																				"nodeType": "YulIdentifier",
																				"src": "7226:1:13"
																			}
																		],
																		"functionName": {
																			"name": "not",
																			"nodeType": "YulIdentifier",
																			"src": "7222:3:13"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "7222:6:13"
																	}
																],
																"functionName": {
																	"name": "gt",
																	"nodeType": "YulIdentifier",
																	"src": "7216:2:13"
																},
																"nodeType": "YulFunctionCall",
																"src": "7216:13:13"
															},
															"nodeType": "YulIf",
															"src": "7213:39:13"
														},
														{
															"nodeType": "YulAssignment",
															"src": "7261:16:13",
															"value": {
																"arguments": [
																	{
																		"name": "x",
																		"nodeType": "YulIdentifier",
																		"src": "7272:1:13"
																	},
																	{
																		"name": "y",
																		"nodeType": "YulIdentifier",
																		"src": "7275:1:13"
																	}
																],
																"functionName": {
																	"name": "add",
																	"nodeType": "YulIdentifier",
																	"src": "7268:3:13"
																},
																"nodeType": "YulFunctionCall",
																"src": "7268:9:13"
															},
															"variableNames": [
																{
																	"name": "sum",
																	"nodeType": "YulIdentifier",
																	"src": "7261:3:13"
																}
															]
														}
													]
												},
												"name": "checked_add_t_uint256",
												"nodeType": "YulFunctionDefinition",
												"parameters": [
													{
														"name": "x",
														"nodeType": "YulTypedName",
														"src": "7186:1:13",
														"type": ""
													},
													{
														"name": "y",
														"nodeType": "YulTypedName",
														"src": "7189:1:13",
														"type": ""
													}
												],
												"returnVariables": [
													{
														"name": "sum",
														"nodeType": "YulTypedName",
														"src": "7195:3:13",
														"type": ""
													}
												],
												"src": "7155:128:13"
											},
											{
												"body": {
													"nodeType": "YulBlock",
													"src": "7320:95:13",
													"statements": [
														{
															"expression": {
																"arguments": [
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "7337:1:13",
																		"type": "",
																		"value": "0"
																	},
																	{
																		"arguments": [
																			{
																				"kind": "number",
																				"nodeType": "YulLiteral",
																				"src": "7344:3:13",
																				"type": "",
																				"value": "224"
																			},
																			{
																				"kind": "number",
																				"nodeType": "YulLiteral",
																				"src": "7349:10:13",
																				"type": "",
																				"value": "0x4e487b71"
																			}
																		],
																		"functionName": {
																			"name": "shl",
																			"nodeType": "YulIdentifier",
																			"src": "7340:3:13"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "7340:20:13"
																	}
																],
																"functionName": {
																	"name": "mstore",
																	"nodeType": "YulIdentifier",
																	"src": "7330:6:13"
																},
																"nodeType": "YulFunctionCall",
																"src": "7330:31:13"
															},
															"nodeType": "YulExpressionStatement",
															"src": "7330:31:13"
														},
														{
															"expression": {
																"arguments": [
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "7377:1:13",
																		"type": "",
																		"value": "4"
																	},
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "7380:4:13",
																		"type": "",
																		"value": "0x32"
																	}
																],
																"functionName": {
																	"name": "mstore",
																	"nodeType": "YulIdentifier",
																	"src": "7370:6:13"
																},
																"nodeType": "YulFunctionCall",
																"src": "7370:15:13"
															},
															"nodeType": "YulExpressionStatement",
															"src": "7370:15:13"
														},
														{
															"expression": {
																"arguments": [
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "7401:1:13",
																		"type": "",
																		"value": "0"
																	},
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "7404:4:13",
																		"type": "",
																		"value": "0x24"
																	}
																],
																"functionName": {
																	"name": "revert",
																	"nodeType": "YulIdentifier",
																	"src": "7394:6:13"
																},
																"nodeType": "YulFunctionCall",
																"src": "7394:15:13"
															},
															"nodeType": "YulExpressionStatement",
															"src": "7394:15:13"
														}
													]
												},
												"name": "panic_error_0x32",
												"nodeType": "YulFunctionDefinition",
												"src": "7288:127:13"
											}
										]
									},
									"contents": "{\n    { }\n    function validator_revert_bytes4(value)\n    {\n        if iszero(eq(value, and(value, shl(224, 0xffffffff)))) { revert(0, 0) }\n    }\n    function abi_decode_tuple_t_bytes4(headStart, dataEnd) -> value0\n    {\n        if slt(sub(dataEnd, headStart), 32) { revert(0, 0) }\n        let value := calldataload(headStart)\n        validator_revert_bytes4(value)\n        value0 := value\n    }\n    function abi_encode_tuple_t_bool__to_t_bool__fromStack_reversed(headStart, value0) -> tail\n    {\n        tail := add(headStart, 32)\n        mstore(headStart, iszero(iszero(value0)))\n    }\n    function copy_memory_to_memory(src, dst, length)\n    {\n        let i := 0\n        for { } lt(i, length) { i := add(i, 32) }\n        {\n            mstore(add(dst, i), mload(add(src, i)))\n        }\n        if gt(i, length) { mstore(add(dst, length), 0) }\n    }\n    function abi_encode_string(value, pos) -> end\n    {\n        let length := mload(value)\n        mstore(pos, length)\n        copy_memory_to_memory(add(value, 0x20), add(pos, 0x20), length)\n        end := add(add(pos, and(add(length, 31), not(31))), 0x20)\n    }\n    function abi_encode_tuple_t_string_memory_ptr__to_t_string_memory_ptr__fromStack_reversed(headStart, value0) -> tail\n    {\n        mstore(headStart, 32)\n        tail := abi_encode_string(value0, add(headStart, 32))\n    }\n    function abi_decode_tuple_t_uint256(headStart, dataEnd) -> value0\n    {\n        if slt(sub(dataEnd, headStart), 32) { revert(0, 0) }\n        value0 := calldataload(headStart)\n    }\n    function abi_encode_tuple_t_address__to_t_address__fromStack_reversed(headStart, value0) -> tail\n    {\n        tail := add(headStart, 32)\n        mstore(headStart, and(value0, sub(shl(160, 1), 1)))\n    }\n    function abi_decode_address(offset) -> value\n    {\n        value := calldataload(offset)\n        if iszero(eq(value, and(value, sub(shl(160, 1), 1)))) { revert(0, 0) }\n    }\n    function abi_decode_tuple_t_addresst_uint256(headStart, dataEnd) -> value0, value1\n    {\n        if slt(sub(dataEnd, headStart), 64) { revert(0, 0) }\n        value0 := abi_decode_address(headStart)\n        value1 := calldataload(add(headStart, 32))\n    }\n    function abi_encode_tuple_t_uint256__to_t_uint256__fromStack_reversed(headStart, value0) -> tail\n    {\n        tail := add(headStart, 32)\n        mstore(headStart, value0)\n    }\n    function abi_decode_tuple_t_addresst_addresst_uint256(headStart, dataEnd) -> value0, value1, value2\n    {\n        if slt(sub(dataEnd, headStart), 96) { revert(0, 0) }\n        value0 := abi_decode_address(headStart)\n        value1 := abi_decode_address(add(headStart, 32))\n        value2 := calldataload(add(headStart, 64))\n    }\n    function abi_decode_tuple_t_address(headStart, dataEnd) -> value0\n    {\n        if slt(sub(dataEnd, headStart), 32) { revert(0, 0) }\n        value0 := abi_decode_address(headStart)\n    }\n    function abi_decode_tuple_t_addresst_bool(headStart, dataEnd) -> value0, value1\n    {\n        if slt(sub(dataEnd, headStart), 64) { revert(0, 0) }\n        value0 := abi_decode_address(headStart)\n        let value := calldataload(add(headStart, 32))\n        if iszero(eq(value, iszero(iszero(value)))) { revert(0, 0) }\n        value1 := value\n    }\n    function panic_error_0x41()\n    {\n        mstore(0, shl(224, 0x4e487b71))\n        mstore(4, 0x41)\n        revert(0, 0x24)\n    }\n    function abi_decode_tuple_t_addresst_addresst_uint256t_bytes_memory_ptr(headStart, dataEnd) -> value0, value1, value2, value3\n    {\n        if slt(sub(dataEnd, headStart), 128) { revert(0, 0) }\n        value0 := abi_decode_address(headStart)\n        value1 := abi_decode_address(add(headStart, 32))\n        value2 := calldataload(add(headStart, 64))\n        let offset := calldataload(add(headStart, 96))\n        let _1 := 0xffffffffffffffff\n        if gt(offset, _1) { revert(0, 0) }\n        let _2 := add(headStart, offset)\n        if iszero(slt(add(_2, 0x1f), dataEnd)) { revert(0, 0) }\n        let _3 := calldataload(_2)\n        if gt(_3, _1) { panic_error_0x41() }\n        let _4 := not(31)\n        let memPtr := mload(64)\n        let newFreePtr := add(memPtr, and(add(and(add(_3, 0x1f), _4), 63), _4))\n        if or(gt(newFreePtr, _1), lt(newFreePtr, memPtr)) { panic_error_0x41() }\n        mstore(64, newFreePtr)\n        mstore(memPtr, _3)\n        if gt(add(add(_2, _3), 32), dataEnd) { revert(0, 0) }\n        calldatacopy(add(memPtr, 32), add(_2, 32), _3)\n        mstore(add(add(memPtr, _3), 32), 0)\n        value3 := memPtr\n    }\n    function abi_decode_tuple_t_addresst_address(headStart, dataEnd) -> value0, value1\n    {\n        if slt(sub(dataEnd, headStart), 64) { revert(0, 0) }\n        value0 := abi_decode_address(headStart)\n        value1 := abi_decode_address(add(headStart, 32))\n    }\n    function extract_byte_array_length(data) -> length\n    {\n        length := shr(1, data)\n        let outOfPlaceEncoding := and(data, 1)\n        if iszero(outOfPlaceEncoding) { length := and(length, 0x7f) }\n        if eq(outOfPlaceEncoding, lt(length, 32))\n        {\n            mstore(0, shl(224, 0x4e487b71))\n            mstore(4, 0x22)\n            revert(0, 0x24)\n        }\n    }\n    function abi_encode_tuple_packed_t_string_memory_ptr_t_string_memory_ptr__to_t_string_memory_ptr_t_string_memory_ptr__nonPadded_inplace_fromStack_reversed(pos, value1, value0) -> end\n    {\n        let length := mload(value0)\n        copy_memory_to_memory(add(value0, 0x20), pos, length)\n        let end_1 := add(pos, length)\n        let length_1 := mload(value1)\n        copy_memory_to_memory(add(value1, 0x20), end_1, length_1)\n        end := add(end_1, length_1)\n    }\n    function abi_encode_tuple_t_address_t_address_t_uint256_t_bytes_memory_ptr__to_t_address_t_address_t_uint256_t_bytes_memory_ptr__fromStack_reversed(headStart, value3, value2, value1, value0) -> tail\n    {\n        let _1 := sub(shl(160, 1), 1)\n        mstore(headStart, and(value0, _1))\n        mstore(add(headStart, 32), and(value1, _1))\n        mstore(add(headStart, 64), value2)\n        mstore(add(headStart, 96), 128)\n        tail := abi_encode_string(value3, add(headStart, 128))\n    }\n    function abi_decode_tuple_t_bytes4_fromMemory(headStart, dataEnd) -> value0\n    {\n        if slt(sub(dataEnd, headStart), 32) { revert(0, 0) }\n        let value := mload(headStart)\n        validator_revert_bytes4(value)\n        value0 := value\n    }\n    function panic_error_0x11()\n    {\n        mstore(0, shl(224, 0x4e487b71))\n        mstore(4, 0x11)\n        revert(0, 0x24)\n    }\n    function increment_t_uint256(value) -> ret\n    {\n        if eq(value, not(0)) { panic_error_0x11() }\n        ret := add(value, 1)\n    }\n    function panic_error_0x12()\n    {\n        mstore(0, shl(224, 0x4e487b71))\n        mstore(4, 0x12)\n        revert(0, 0x24)\n    }\n    function checked_div_t_uint256(x, y) -> r\n    {\n        if iszero(y) { panic_error_0x12() }\n        r := div(x, y)\n    }\n    function checked_sub_t_uint256(x, y) -> diff\n    {\n        if lt(x, y) { panic_error_0x11() }\n        diff := sub(x, y)\n    }\n    function mod_t_uint256(x, y) -> r\n    {\n        if iszero(y) { panic_error_0x12() }\n        r := mod(x, y)\n    }\n    function checked_add_t_uint256(x, y) -> sum\n    {\n        if gt(x, not(y)) { panic_error_0x11() }\n        sum := add(x, y)\n    }\n    function panic_error_0x32()\n    {\n        mstore(0, shl(224, 0x4e487b71))\n        mstore(4, 0x32)\n        revert(0, 0x24)\n    }\n}",
									"id": 13,
									"language": "Yul",
									"name": "#utility.yul"
								}
							],
							"immutableReferences": {},
							"linkReferences": {},
							"object": "",
							"opcodes": "PUSH1 0x80 PUSH1 0x40 MSTORE CALLVALUE DUP1 ISZERO PUSH2 0x10 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH1 0x4 CALLDATASIZE LT PUSH2 0xEA JUMPI PUSH1 0x0 CALLDATALOAD PUSH1 0xE0 SHR DUP1 PUSH4 0x6352211E GT PUSH2 0x8C JUMPI DUP1 PUSH4 0xA22CB465 GT PUSH2 0x66 JUMPI DUP1 PUSH4 0xA22CB465 EQ PUSH2 0x1D6 JUMPI DUP1 PUSH4 0xB88D4FDE EQ PUSH2 0x1E9 JUMPI DUP1 PUSH4 0xC87B56DD EQ PUSH2 0x1FC JUMPI DUP1 PUSH4 0xE985E9C5 EQ PUSH2 0x20F JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP1 PUSH4 0x6352211E EQ PUSH2 0x1A8 JUMPI DUP1 PUSH4 0x70A08231 EQ PUSH2 0x1BB JUMPI DUP1 PUSH4 0x95D89B41 EQ PUSH2 0x1CE JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP1 PUSH4 0x95EA7B3 GT PUSH2 0xC8 JUMPI DUP1 PUSH4 0x95EA7B3 EQ PUSH2 0x157 JUMPI DUP1 PUSH4 0x18160DDD EQ PUSH2 0x16C JUMPI DUP1 PUSH4 0x23B872DD EQ PUSH2 0x182 JUMPI DUP1 PUSH4 0x42842E0E EQ PUSH2 0x195 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP1 PUSH4 0x1FFC9A7 EQ PUSH2 0xEF JUMPI DUP1 PUSH4 0x6FDDE03 EQ PUSH2 0x117 JUMPI DUP1 PUSH4 0x81812FC EQ PUSH2 0x12C JUMPI JUMPDEST PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH2 0x102 PUSH2 0xFD CALLDATASIZE PUSH1 0x4 PUSH2 0xBD7 JUMP JUMPDEST PUSH2 0x24B JUMP JUMPDEST PUSH1 0x40 MLOAD SWAP1 ISZERO ISZERO DUP2 MSTORE PUSH1 0x20 ADD JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST PUSH2 0x11F PUSH2 0x29D JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH2 0x10E SWAP2 SWAP1 PUSH2 0xC4C JUMP JUMPDEST PUSH2 0x13F PUSH2 0x13A CALLDATASIZE PUSH1 0x4 PUSH2 0xC5F JUMP JUMPDEST PUSH2 0x32F JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB SWAP1 SWAP2 AND DUP2 MSTORE PUSH1 0x20 ADD PUSH2 0x10E JUMP JUMPDEST PUSH2 0x16A PUSH2 0x165 CALLDATASIZE PUSH1 0x4 PUSH2 0xC94 JUMP JUMPDEST PUSH2 0x373 JUMP JUMPDEST STOP JUMPDEST PUSH1 0x1 SLOAD PUSH1 0x0 SLOAD SUB JUMPDEST PUSH1 0x40 MLOAD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH2 0x10E JUMP JUMPDEST PUSH2 0x16A PUSH2 0x190 CALLDATASIZE PUSH1 0x4 PUSH2 0xCBE JUMP JUMPDEST PUSH2 0x401 JUMP JUMPDEST PUSH2 0x16A PUSH2 0x1A3 CALLDATASIZE PUSH1 0x4 PUSH2 0xCBE JUMP JUMPDEST PUSH2 0x40C JUMP JUMPDEST PUSH2 0x13F PUSH2 0x1B6 CALLDATASIZE PUSH1 0x4 PUSH2 0xC5F JUMP JUMPDEST PUSH2 0x427 JUMP JUMPDEST PUSH2 0x174 PUSH2 0x1C9 CALLDATASIZE PUSH1 0x4 PUSH2 0xCFA JUMP JUMPDEST PUSH2 0x439 JUMP JUMPDEST PUSH2 0x11F PUSH2 0x488 JUMP JUMPDEST PUSH2 0x16A PUSH2 0x1E4 CALLDATASIZE PUSH1 0x4 PUSH2 0xD15 JUMP JUMPDEST PUSH2 0x497 JUMP JUMPDEST PUSH2 0x16A PUSH2 0x1F7 CALLDATASIZE PUSH1 0x4 PUSH2 0xD67 JUMP JUMPDEST PUSH2 0x52D JUMP JUMPDEST PUSH2 0x11F PUSH2 0x20A CALLDATASIZE PUSH1 0x4 PUSH2 0xC5F JUMP JUMPDEST PUSH2 0x57E JUMP JUMPDEST PUSH2 0x102 PUSH2 0x21D CALLDATASIZE PUSH1 0x4 PUSH2 0xE43 JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB SWAP2 DUP3 AND PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0x7 PUSH1 0x20 SWAP1 DUP2 MSTORE PUSH1 0x40 DUP1 DUP4 KECCAK256 SWAP4 SWAP1 SWAP5 AND DUP3 MSTORE SWAP2 SWAP1 SWAP2 MSTORE KECCAK256 SLOAD PUSH1 0xFF AND SWAP1 JUMP JUMPDEST PUSH1 0x0 PUSH1 0x1 PUSH1 0x1 PUSH1 0xE0 SHL SUB NOT DUP3 AND PUSH4 0x80AC58CD PUSH1 0xE0 SHL EQ DUP1 PUSH2 0x27C JUMPI POP PUSH1 0x1 PUSH1 0x1 PUSH1 0xE0 SHL SUB NOT DUP3 AND PUSH4 0x5B5E139F PUSH1 0xE0 SHL EQ JUMPDEST DUP1 PUSH2 0x297 JUMPI POP PUSH4 0x1FFC9A7 PUSH1 0xE0 SHL PUSH1 0x1 PUSH1 0x1 PUSH1 0xE0 SHL SUB NOT DUP4 AND EQ JUMPDEST SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x60 PUSH1 0x2 DUP1 SLOAD PUSH2 0x2AC SWAP1 PUSH2 0xE76 JUMP JUMPDEST DUP1 PUSH1 0x1F ADD PUSH1 0x20 DUP1 SWAP2 DIV MUL PUSH1 0x20 ADD PUSH1 0x40 MLOAD SWAP1 DUP2 ADD PUSH1 0x40 MSTORE DUP1 SWAP3 SWAP2 SWAP1 DUP2 DUP2 MSTORE PUSH1 0x20 ADD DUP3 DUP1 SLOAD PUSH2 0x2D8 SWAP1 PUSH2 0xE76 JUMP JUMPDEST DUP1 ISZERO PUSH2 0x325 JUMPI DUP1 PUSH1 0x1F LT PUSH2 0x2FA JUMPI PUSH2 0x100 DUP1 DUP4 SLOAD DIV MUL DUP4 MSTORE SWAP2 PUSH1 0x20 ADD SWAP2 PUSH2 0x325 JUMP JUMPDEST DUP3 ADD SWAP2 SWAP1 PUSH1 0x0 MSTORE PUSH1 0x20 PUSH1 0x0 KECCAK256 SWAP1 JUMPDEST DUP2 SLOAD DUP2 MSTORE SWAP1 PUSH1 0x1 ADD SWAP1 PUSH1 0x20 ADD DUP1 DUP4 GT PUSH2 0x308 JUMPI DUP3 SWAP1 SUB PUSH1 0x1F AND DUP3 ADD SWAP2 JUMPDEST POP POP POP POP POP SWAP1 POP SWAP1 JUMP JUMPDEST PUSH1 0x0 PUSH2 0x33A DUP3 PUSH2 0x610 JUMP JUMPDEST PUSH2 0x357 JUMPI PUSH1 0x40 MLOAD PUSH4 0x33D1C039 PUSH1 0xE2 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST POP PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0x6 PUSH1 0x20 MSTORE PUSH1 0x40 SWAP1 KECCAK256 SLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND SWAP1 JUMP JUMPDEST PUSH1 0x0 PUSH2 0x37E DUP3 PUSH2 0x427 JUMP JUMPDEST SWAP1 POP DUP1 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND DUP4 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND EQ ISZERO PUSH2 0x3B3 JUMPI PUSH1 0x40 MLOAD PUSH4 0x250FDEE3 PUSH1 0xE2 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST CALLER PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP3 AND EQ DUP1 ISZERO SWAP1 PUSH2 0x3D3 JUMPI POP PUSH2 0x3D1 DUP2 CALLER PUSH2 0x21D JUMP JUMPDEST ISZERO JUMPDEST ISZERO PUSH2 0x3F1 JUMPI PUSH1 0x40 MLOAD PUSH4 0x67D9DCA1 PUSH1 0xE1 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST PUSH2 0x3FC DUP4 DUP4 DUP4 PUSH2 0x63B JUMP JUMPDEST POP POP POP JUMP JUMPDEST PUSH2 0x3FC DUP4 DUP4 DUP4 PUSH2 0x697 JUMP JUMPDEST PUSH2 0x3FC DUP4 DUP4 DUP4 PUSH1 0x40 MLOAD DUP1 PUSH1 0x20 ADD PUSH1 0x40 MSTORE DUP1 PUSH1 0x0 DUP2 MSTORE POP PUSH2 0x52D JUMP JUMPDEST PUSH1 0x0 PUSH2 0x432 DUP3 PUSH2 0x8AC JUMP JUMPDEST MLOAD SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP3 AND PUSH2 0x462 JUMPI PUSH1 0x40 MLOAD PUSH4 0x23D3AD81 PUSH1 0xE2 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST POP PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0x5 PUSH1 0x20 MSTORE PUSH1 0x40 SWAP1 KECCAK256 SLOAD PUSH8 0xFFFFFFFFFFFFFFFF AND SWAP1 JUMP JUMPDEST PUSH1 0x60 PUSH1 0x3 DUP1 SLOAD PUSH2 0x2AC SWAP1 PUSH2 0xE76 JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP3 AND CALLER EQ ISZERO PUSH2 0x4C1 JUMPI PUSH1 0x40 MLOAD PUSH4 0xB06307DB PUSH1 0xE0 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST CALLER PUSH1 0x0 DUP2 DUP2 MSTORE PUSH1 0x7 PUSH1 0x20 SWAP1 DUP2 MSTORE PUSH1 0x40 DUP1 DUP4 KECCAK256 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP8 AND DUP1 DUP6 MSTORE SWAP1 DUP4 MSTORE SWAP3 DUP2 SWAP1 KECCAK256 DUP1 SLOAD PUSH1 0xFF NOT AND DUP7 ISZERO ISZERO SWAP1 DUP2 OR SWAP1 SWAP2 SSTORE SWAP1 MLOAD SWAP1 DUP2 MSTORE SWAP2 SWAP3 SWAP2 PUSH32 0x17307EAB39AB6107E8899845AD3D59BD9653F200F220920489CA2B5937696C31 SWAP2 ADD PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 LOG3 POP POP JUMP JUMPDEST PUSH2 0x538 DUP5 DUP5 DUP5 PUSH2 0x697 JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP4 AND EXTCODESIZE ISZERO ISZERO DUP1 ISZERO PUSH2 0x55A JUMPI POP PUSH2 0x558 DUP5 DUP5 DUP5 DUP5 PUSH2 0x9C8 JUMP JUMPDEST ISZERO JUMPDEST ISZERO PUSH2 0x578 JUMPI PUSH1 0x40 MLOAD PUSH4 0x68D2BF6B PUSH1 0xE1 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST POP POP POP POP JUMP JUMPDEST PUSH1 0x60 PUSH2 0x589 DUP3 PUSH2 0x610 JUMP JUMPDEST PUSH2 0x5A6 JUMPI PUSH1 0x40 MLOAD PUSH4 0xA14C4B5 PUSH1 0xE4 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST PUSH1 0x0 PUSH2 0x5BD PUSH1 0x40 DUP1 MLOAD PUSH1 0x20 DUP2 ADD SWAP1 SWAP2 MSTORE PUSH1 0x0 DUP2 MSTORE SWAP1 JUMP JUMPDEST SWAP1 POP DUP1 MLOAD PUSH1 0x0 EQ ISZERO PUSH2 0x5DE JUMPI PUSH1 0x40 MLOAD DUP1 PUSH1 0x20 ADD PUSH1 0x40 MSTORE DUP1 PUSH1 0x0 DUP2 MSTORE POP PUSH2 0x609 JUMP JUMPDEST DUP1 PUSH2 0x5E8 DUP5 PUSH2 0xAC0 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH1 0x20 ADD PUSH2 0x5F9 SWAP3 SWAP2 SWAP1 PUSH2 0xEB1 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH1 0x20 DUP2 DUP4 SUB SUB DUP2 MSTORE SWAP1 PUSH1 0x40 MSTORE JUMPDEST SWAP4 SWAP3 POP POP POP JUMP JUMPDEST PUSH1 0x0 DUP1 SLOAD DUP3 LT DUP1 ISZERO PUSH2 0x297 JUMPI POP POP PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0x4 PUSH1 0x20 MSTORE PUSH1 0x40 SWAP1 KECCAK256 SLOAD PUSH1 0x1 PUSH1 0xE0 SHL SWAP1 DIV PUSH1 0xFF AND ISZERO SWAP1 JUMP JUMPDEST PUSH1 0x0 DUP3 DUP2 MSTORE PUSH1 0x6 PUSH1 0x20 MSTORE PUSH1 0x40 DUP1 DUP3 KECCAK256 DUP1 SLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB NOT AND PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP8 DUP2 AND SWAP2 DUP3 OR SWAP1 SWAP3 SSTORE SWAP2 MLOAD DUP6 SWAP4 SWAP2 DUP6 AND SWAP2 PUSH32 0x8C5BE1E5EBEC7D5BD14F71427D1E84F3DD0314C0F7B2291E5B200AC8C7C3B925 SWAP2 LOG4 POP POP POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x6A2 DUP3 PUSH2 0x8AC JUMP JUMPDEST DUP1 MLOAD SWAP1 SWAP2 POP PUSH1 0x0 SWAP1 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND CALLER PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND EQ DUP1 PUSH2 0x6D0 JUMPI POP DUP2 MLOAD PUSH2 0x6D0 SWAP1 CALLER PUSH2 0x21D JUMP JUMPDEST DUP1 PUSH2 0x6EB JUMPI POP CALLER PUSH2 0x6E0 DUP5 PUSH2 0x32F JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND EQ JUMPDEST SWAP1 POP DUP1 PUSH2 0x70B JUMPI PUSH1 0x40 MLOAD PUSH4 0x2CE44B5F PUSH1 0xE1 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST DUP5 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND DUP3 PUSH1 0x0 ADD MLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND EQ PUSH2 0x740 JUMPI PUSH1 0x40 MLOAD PUSH3 0xA11481 PUSH1 0xE8 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP5 AND PUSH2 0x767 JUMPI PUSH1 0x40 MLOAD PUSH4 0x3A954ECD PUSH1 0xE2 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST PUSH2 0x777 PUSH1 0x0 DUP5 DUP5 PUSH1 0x0 ADD MLOAD PUSH2 0x63B JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP6 DUP2 AND PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0x5 PUSH1 0x20 SWAP1 DUP2 MSTORE PUSH1 0x40 DUP1 DUP4 KECCAK256 DUP1 SLOAD PUSH8 0xFFFFFFFFFFFFFFFF NOT DUP1 DUP3 AND PUSH8 0xFFFFFFFFFFFFFFFF SWAP3 DUP4 AND PUSH1 0x0 NOT ADD DUP4 AND OR SWAP1 SWAP3 SSTORE DUP10 DUP7 AND DUP1 DUP7 MSTORE DUP4 DUP7 KECCAK256 DUP1 SLOAD SWAP4 DUP5 AND SWAP4 DUP4 AND PUSH1 0x1 SWAP1 DUP2 ADD DUP5 AND SWAP5 SWAP1 SWAP5 OR SWAP1 SSTORE DUP10 DUP7 MSTORE PUSH1 0x4 SWAP1 SWAP5 MSTORE DUP3 DUP6 KECCAK256 DUP1 SLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xE0 SHL SUB NOT AND SWAP1 SWAP5 OR PUSH1 0x1 PUSH1 0xA0 SHL TIMESTAMP SWAP1 SWAP3 AND SWAP2 SWAP1 SWAP2 MUL OR SWAP1 SWAP3 SSTORE SWAP1 DUP7 ADD DUP1 DUP4 MSTORE SWAP2 KECCAK256 SLOAD SWAP1 SWAP2 AND PUSH2 0x863 JUMPI PUSH1 0x0 SLOAD DUP2 LT ISZERO PUSH2 0x863 JUMPI DUP3 MLOAD PUSH1 0x0 DUP3 DUP2 MSTORE PUSH1 0x4 PUSH1 0x20 SWAP1 DUP2 MSTORE PUSH1 0x40 SWAP1 SWAP2 KECCAK256 DUP1 SLOAD SWAP2 DUP7 ADD MLOAD PUSH8 0xFFFFFFFFFFFFFFFF AND PUSH1 0x1 PUSH1 0xA0 SHL MUL PUSH1 0x1 PUSH1 0x1 PUSH1 0xE0 SHL SUB NOT SWAP1 SWAP3 AND PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB SWAP1 SWAP4 AND SWAP3 SWAP1 SWAP3 OR OR SWAP1 SSTORE JUMPDEST POP DUP3 DUP5 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND DUP7 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND PUSH32 0xDDF252AD1BE2C89B69C2B068FC378DAA952BA7F163C4A11628F55A4DF523B3EF PUSH1 0x40 MLOAD PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 LOG4 POP POP POP POP POP JUMP JUMPDEST PUSH1 0x40 DUP1 MLOAD PUSH1 0x60 DUP2 ADD DUP3 MSTORE PUSH1 0x0 DUP1 DUP3 MSTORE PUSH1 0x20 DUP3 ADD DUP2 SWAP1 MSTORE SWAP2 DUP2 ADD SWAP2 SWAP1 SWAP2 MSTORE DUP2 PUSH1 0x0 SLOAD DUP2 LT ISZERO PUSH2 0x9AF JUMPI PUSH1 0x0 DUP2 DUP2 MSTORE PUSH1 0x4 PUSH1 0x20 SWAP1 DUP2 MSTORE PUSH1 0x40 SWAP2 DUP3 SWAP1 KECCAK256 DUP3 MLOAD PUSH1 0x60 DUP2 ADD DUP5 MSTORE SWAP1 SLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP2 AND DUP3 MSTORE PUSH1 0x1 PUSH1 0xA0 SHL DUP2 DIV PUSH8 0xFFFFFFFFFFFFFFFF AND SWAP3 DUP3 ADD SWAP3 SWAP1 SWAP3 MSTORE PUSH1 0x1 PUSH1 0xE0 SHL SWAP1 SWAP2 DIV PUSH1 0xFF AND ISZERO ISZERO SWAP2 DUP2 ADD DUP3 SWAP1 MSTORE SWAP1 PUSH2 0x9AD JUMPI DUP1 MLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND ISZERO PUSH2 0x943 JUMPI SWAP4 SWAP3 POP POP POP JUMP JUMPDEST POP PUSH1 0x0 NOT ADD PUSH1 0x0 DUP2 DUP2 MSTORE PUSH1 0x4 PUSH1 0x20 SWAP1 DUP2 MSTORE PUSH1 0x40 SWAP2 DUP3 SWAP1 KECCAK256 DUP3 MLOAD PUSH1 0x60 DUP2 ADD DUP5 MSTORE SWAP1 SLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP2 AND DUP1 DUP4 MSTORE PUSH1 0x1 PUSH1 0xA0 SHL DUP3 DIV PUSH8 0xFFFFFFFFFFFFFFFF AND SWAP4 DUP4 ADD SWAP4 SWAP1 SWAP4 MSTORE PUSH1 0x1 PUSH1 0xE0 SHL SWAP1 DIV PUSH1 0xFF AND ISZERO ISZERO SWAP3 DUP2 ADD SWAP3 SWAP1 SWAP3 MSTORE ISZERO PUSH2 0x9A8 JUMPI SWAP4 SWAP3 POP POP POP JUMP JUMPDEST PUSH2 0x943 JUMP JUMPDEST POP JUMPDEST PUSH1 0x40 MLOAD PUSH4 0x6F96CDA1 PUSH1 0xE1 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST PUSH1 0x40 MLOAD PUSH4 0xA85BD01 PUSH1 0xE1 SHL DUP2 MSTORE PUSH1 0x0 SWAP1 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP6 AND SWAP1 PUSH4 0x150B7A02 SWAP1 PUSH2 0x9FD SWAP1 CALLER SWAP1 DUP10 SWAP1 DUP9 SWAP1 DUP9 SWAP1 PUSH1 0x4 ADD PUSH2 0xEE0 JUMP JUMPDEST PUSH1 0x20 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 PUSH1 0x0 DUP8 DUP1 EXTCODESIZE ISZERO DUP1 ISZERO PUSH2 0xA17 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP GAS CALL SWAP3 POP POP POP DUP1 ISZERO PUSH2 0xA47 JUMPI POP PUSH1 0x40 DUP1 MLOAD PUSH1 0x1F RETURNDATASIZE SWAP1 DUP2 ADD PUSH1 0x1F NOT AND DUP3 ADD SWAP1 SWAP3 MSTORE PUSH2 0xA44 SWAP2 DUP2 ADD SWAP1 PUSH2 0xF1D JUMP JUMPDEST PUSH1 0x1 JUMPDEST PUSH2 0xAA2 JUMPI RETURNDATASIZE DUP1 DUP1 ISZERO PUSH2 0xA75 JUMPI PUSH1 0x40 MLOAD SWAP2 POP PUSH1 0x1F NOT PUSH1 0x3F RETURNDATASIZE ADD AND DUP3 ADD PUSH1 0x40 MSTORE RETURNDATASIZE DUP3 MSTORE RETURNDATASIZE PUSH1 0x0 PUSH1 0x20 DUP5 ADD RETURNDATACOPY PUSH2 0xA7A JUMP JUMPDEST PUSH1 0x60 SWAP2 POP JUMPDEST POP DUP1 MLOAD PUSH2 0xA9A JUMPI PUSH1 0x40 MLOAD PUSH4 0x68D2BF6B PUSH1 0xE1 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST DUP1 MLOAD DUP2 PUSH1 0x20 ADD REVERT JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xE0 SHL SUB NOT AND PUSH4 0xA85BD01 PUSH1 0xE1 SHL EQ SWAP1 POP JUMPDEST SWAP5 SWAP4 POP POP POP POP JUMP JUMPDEST PUSH1 0x60 DUP2 PUSH2 0xAE4 JUMPI POP POP PUSH1 0x40 DUP1 MLOAD DUP1 DUP3 ADD SWAP1 SWAP2 MSTORE PUSH1 0x1 DUP2 MSTORE PUSH1 0x3 PUSH1 0xFC SHL PUSH1 0x20 DUP3 ADD MSTORE SWAP1 JUMP JUMPDEST DUP2 PUSH1 0x0 JUMPDEST DUP2 ISZERO PUSH2 0xB0E JUMPI DUP1 PUSH2 0xAF8 DUP2 PUSH2 0xF50 JUMP JUMPDEST SWAP2 POP PUSH2 0xB07 SWAP1 POP PUSH1 0xA DUP4 PUSH2 0xF81 JUMP JUMPDEST SWAP2 POP PUSH2 0xAE8 JUMP JUMPDEST PUSH1 0x0 DUP2 PUSH8 0xFFFFFFFFFFFFFFFF DUP2 GT ISZERO PUSH2 0xB29 JUMPI PUSH2 0xB29 PUSH2 0xD51 JUMP JUMPDEST PUSH1 0x40 MLOAD SWAP1 DUP1 DUP3 MSTORE DUP1 PUSH1 0x1F ADD PUSH1 0x1F NOT AND PUSH1 0x20 ADD DUP3 ADD PUSH1 0x40 MSTORE DUP1 ISZERO PUSH2 0xB53 JUMPI PUSH1 0x20 DUP3 ADD DUP2 DUP1 CALLDATASIZE DUP4 CALLDATACOPY ADD SWAP1 POP JUMPDEST POP SWAP1 POP JUMPDEST DUP5 ISZERO PUSH2 0xAB8 JUMPI PUSH2 0xB68 PUSH1 0x1 DUP4 PUSH2 0xF95 JUMP JUMPDEST SWAP2 POP PUSH2 0xB75 PUSH1 0xA DUP7 PUSH2 0xFAC JUMP JUMPDEST PUSH2 0xB80 SWAP1 PUSH1 0x30 PUSH2 0xFC0 JUMP JUMPDEST PUSH1 0xF8 SHL DUP2 DUP4 DUP2 MLOAD DUP2 LT PUSH2 0xB95 JUMPI PUSH2 0xB95 PUSH2 0xFD8 JUMP JUMPDEST PUSH1 0x20 ADD ADD SWAP1 PUSH1 0x1 PUSH1 0x1 PUSH1 0xF8 SHL SUB NOT AND SWAP1 DUP2 PUSH1 0x0 BYTE SWAP1 MSTORE8 POP PUSH2 0xBB7 PUSH1 0xA DUP7 PUSH2 0xF81 JUMP JUMPDEST SWAP5 POP PUSH2 0xB57 JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xE0 SHL SUB NOT DUP2 AND DUP2 EQ PUSH2 0xBD4 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 DUP5 SUB SLT ISZERO PUSH2 0xBE9 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP2 CALLDATALOAD PUSH2 0x609 DUP2 PUSH2 0xBBE JUMP JUMPDEST PUSH1 0x0 JUMPDEST DUP4 DUP2 LT ISZERO PUSH2 0xC0F JUMPI DUP2 DUP2 ADD MLOAD DUP4 DUP3 ADD MSTORE PUSH1 0x20 ADD PUSH2 0xBF7 JUMP JUMPDEST DUP4 DUP2 GT ISZERO PUSH2 0x578 JUMPI POP POP PUSH1 0x0 SWAP2 ADD MSTORE JUMP JUMPDEST PUSH1 0x0 DUP2 MLOAD DUP1 DUP5 MSTORE PUSH2 0xC38 DUP2 PUSH1 0x20 DUP7 ADD PUSH1 0x20 DUP7 ADD PUSH2 0xBF4 JUMP JUMPDEST PUSH1 0x1F ADD PUSH1 0x1F NOT AND SWAP3 SWAP1 SWAP3 ADD PUSH1 0x20 ADD SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x20 DUP2 MSTORE PUSH1 0x0 PUSH2 0x609 PUSH1 0x20 DUP4 ADD DUP5 PUSH2 0xC20 JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 DUP5 SUB SLT ISZERO PUSH2 0xC71 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP CALLDATALOAD SWAP2 SWAP1 POP JUMP JUMPDEST DUP1 CALLDATALOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP2 AND DUP2 EQ PUSH2 0xC8F JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x40 DUP4 DUP6 SUB SLT ISZERO PUSH2 0xCA7 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH2 0xCB0 DUP4 PUSH2 0xC78 JUMP JUMPDEST SWAP5 PUSH1 0x20 SWAP4 SWAP1 SWAP4 ADD CALLDATALOAD SWAP4 POP POP POP JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x0 PUSH1 0x60 DUP5 DUP7 SUB SLT ISZERO PUSH2 0xCD3 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH2 0xCDC DUP5 PUSH2 0xC78 JUMP JUMPDEST SWAP3 POP PUSH2 0xCEA PUSH1 0x20 DUP6 ADD PUSH2 0xC78 JUMP JUMPDEST SWAP2 POP PUSH1 0x40 DUP5 ADD CALLDATALOAD SWAP1 POP SWAP3 POP SWAP3 POP SWAP3 JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 DUP5 SUB SLT ISZERO PUSH2 0xD0C JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH2 0x609 DUP3 PUSH2 0xC78 JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x40 DUP4 DUP6 SUB SLT ISZERO PUSH2 0xD28 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH2 0xD31 DUP4 PUSH2 0xC78 JUMP JUMPDEST SWAP2 POP PUSH1 0x20 DUP4 ADD CALLDATALOAD DUP1 ISZERO ISZERO DUP2 EQ PUSH2 0xD46 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP1 SWAP2 POP POP SWAP3 POP SWAP3 SWAP1 POP JUMP JUMPDEST PUSH4 0x4E487B71 PUSH1 0xE0 SHL PUSH1 0x0 MSTORE PUSH1 0x41 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH1 0x0 REVERT JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x0 DUP1 PUSH1 0x80 DUP6 DUP8 SUB SLT ISZERO PUSH2 0xD7D JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH2 0xD86 DUP6 PUSH2 0xC78 JUMP JUMPDEST SWAP4 POP PUSH2 0xD94 PUSH1 0x20 DUP7 ADD PUSH2 0xC78 JUMP JUMPDEST SWAP3 POP PUSH1 0x40 DUP6 ADD CALLDATALOAD SWAP2 POP PUSH1 0x60 DUP6 ADD CALLDATALOAD PUSH8 0xFFFFFFFFFFFFFFFF DUP1 DUP3 GT ISZERO PUSH2 0xDB8 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP2 DUP8 ADD SWAP2 POP DUP8 PUSH1 0x1F DUP4 ADD SLT PUSH2 0xDCC JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP2 CALLDATALOAD DUP2 DUP2 GT ISZERO PUSH2 0xDDE JUMPI PUSH2 0xDDE PUSH2 0xD51 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH1 0x1F DUP3 ADD PUSH1 0x1F NOT SWAP1 DUP2 AND PUSH1 0x3F ADD AND DUP2 ADD SWAP1 DUP4 DUP3 GT DUP2 DUP4 LT OR ISZERO PUSH2 0xE06 JUMPI PUSH2 0xE06 PUSH2 0xD51 JUMP JUMPDEST DUP2 PUSH1 0x40 MSTORE DUP3 DUP2 MSTORE DUP11 PUSH1 0x20 DUP5 DUP8 ADD ADD GT ISZERO PUSH2 0xE1F JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP3 PUSH1 0x20 DUP7 ADD PUSH1 0x20 DUP4 ADD CALLDATACOPY PUSH1 0x0 PUSH1 0x20 DUP5 DUP4 ADD ADD MSTORE DUP1 SWAP6 POP POP POP POP POP POP SWAP3 SWAP6 SWAP2 SWAP5 POP SWAP3 POP JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x40 DUP4 DUP6 SUB SLT ISZERO PUSH2 0xE56 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH2 0xE5F DUP4 PUSH2 0xC78 JUMP JUMPDEST SWAP2 POP PUSH2 0xE6D PUSH1 0x20 DUP5 ADD PUSH2 0xC78 JUMP JUMPDEST SWAP1 POP SWAP3 POP SWAP3 SWAP1 POP JUMP JUMPDEST PUSH1 0x1 DUP2 DUP2 SHR SWAP1 DUP3 AND DUP1 PUSH2 0xE8A JUMPI PUSH1 0x7F DUP3 AND SWAP2 POP JUMPDEST PUSH1 0x20 DUP3 LT DUP2 EQ ISZERO PUSH2 0xEAB JUMPI PUSH4 0x4E487B71 PUSH1 0xE0 SHL PUSH1 0x0 MSTORE PUSH1 0x22 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH1 0x0 REVERT JUMPDEST POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 DUP4 MLOAD PUSH2 0xEC3 DUP2 DUP5 PUSH1 0x20 DUP9 ADD PUSH2 0xBF4 JUMP JUMPDEST DUP4 MLOAD SWAP1 DUP4 ADD SWAP1 PUSH2 0xED7 DUP2 DUP4 PUSH1 0x20 DUP9 ADD PUSH2 0xBF4 JUMP JUMPDEST ADD SWAP5 SWAP4 POP POP POP POP JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP6 DUP2 AND DUP3 MSTORE DUP5 AND PUSH1 0x20 DUP3 ADD MSTORE PUSH1 0x40 DUP2 ADD DUP4 SWAP1 MSTORE PUSH1 0x80 PUSH1 0x60 DUP3 ADD DUP2 SWAP1 MSTORE PUSH1 0x0 SWAP1 PUSH2 0xF13 SWAP1 DUP4 ADD DUP5 PUSH2 0xC20 JUMP JUMPDEST SWAP7 SWAP6 POP POP POP POP POP POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 DUP5 SUB SLT ISZERO PUSH2 0xF2F JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP2 MLOAD PUSH2 0x609 DUP2 PUSH2 0xBBE JUMP JUMPDEST PUSH4 0x4E487B71 PUSH1 0xE0 SHL PUSH1 0x0 MSTORE PUSH1 0x11 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH1 0x0 REVERT JUMPDEST PUSH1 0x0 PUSH1 0x0 NOT DUP3 EQ ISZERO PUSH2 0xF64 JUMPI PUSH2 0xF64 PUSH2 0xF3A JUMP JUMPDEST POP PUSH1 0x1 ADD SWAP1 JUMP JUMPDEST PUSH4 0x4E487B71 PUSH1 0xE0 SHL PUSH1 0x0 MSTORE PUSH1 0x12 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH1 0x0 REVERT JUMPDEST PUSH1 0x0 DUP3 PUSH2 0xF90 JUMPI PUSH2 0xF90 PUSH2 0xF6B JUMP JUMPDEST POP DIV SWAP1 JUMP JUMPDEST PUSH1 0x0 DUP3 DUP3 LT ISZERO PUSH2 0xFA7 JUMPI PUSH2 0xFA7 PUSH2 0xF3A JUMP JUMPDEST POP SUB SWAP1 JUMP JUMPDEST PUSH1 0x0 DUP3 PUSH2 0xFBB JUMPI PUSH2 0xFBB PUSH2 0xF6B JUMP JUMPDEST POP MOD SWAP1 JUMP JUMPDEST PUSH1 0x0 DUP3 NOT DUP3 GT ISZERO PUSH2 0xFD3 JUMPI PUSH2 0xFD3 PUSH2 0xF3A JUMP JUMPDEST POP ADD SWAP1 JUMP JUMPDEST PUSH4 0x4E487B71 PUSH1 0xE0 SHL PUSH1 0x0 MSTORE PUSH1 0x32 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH1 0x0 REVERT INVALID LOG2 PUSH5 0x6970667358 0x22 SLT KECCAK256 CALLVALUE MOD CODECOPY 0xA5 BYTE 0x4A 0xCB PUSH26 0x3DB0B70A664B822EC286F6D1F20A48FFBC513A8664F4A81E6473 PUSH16 0x6C634300080900330000000000000000 ",
							"sourceMap": "1708:20115:12:-:0;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;4843:300;;;;;;:::i;:::-;;:::i;:::-;;;565:14:13;;558:22;540:41;;528:2;513:18;4843:300:12;;;;;;;;8139:98;;;:::i;:::-;;;;;;;:::i;9595:200::-;;;;;;:::i;:::-;;:::i;:::-;;;-1:-1:-1;;;;;1692:32:13;;;1674:51;;1662:2;1647:18;9595:200:12;1528:203:13;9172:362:12;;;;;;:::i;:::-;;:::i;:::-;;4114:297;4364:12;;4158:7;4348:13;:28;4114:297;;;2319:25:13;;;2307:2;2292:18;4114:297:12;2173:177:13;10426:164:12;;;;;;:::i;:::-;;:::i;10656:179::-;;;;;;:::i;:::-;;:::i;7955:122::-;;;;;;:::i;:::-;;:::i;5202:203::-;;;;;;:::i;:::-;;:::i;8301:102::-;;;:::i;9862:274::-;;;;;;:::i;:::-;;:::i;10901:359::-;;;;;;:::i;:::-;;:::i;8469:313::-;;;;;;:::i;:::-;;:::i;10202:162::-;;;;;;:::i;:::-;-1:-1:-1;;;;;10322:25:12;;;10299:4;10322:25;;;:18;:25;;;;;;;;:35;;;;;;;;;;;;;;;10202:162;4843:300;4945:4;-1:-1:-1;;;;;;4980:40:12;;-1:-1:-1;;;4980:40:12;;:104;;-1:-1:-1;;;;;;;5036:48:12;;-1:-1:-1;;;5036:48:12;4980:104;:156;;;-1:-1:-1;;;;;;;;;;937:40:9;;;5100:36:12;4961:175;4843:300;-1:-1:-1;;4843:300:12:o;8139:98::-;8193:13;8225:5;8218:12;;;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;8139:98;:::o;9595:200::-;9663:7;9687:16;9695:7;9687;:16::i;:::-;9682:64;;9712:34;;-1:-1:-1;;;9712:34:12;;;;;;;;;;;9682:64;-1:-1:-1;9764:24:12;;;;:15;:24;;;;;;-1:-1:-1;;;;;9764:24:12;;9595:200::o;9172:362::-;9244:13;9260:24;9276:7;9260:15;:24::i;:::-;9244:40;;9304:5;-1:-1:-1;;;;;9298:11:12;:2;-1:-1:-1;;;;;9298:11:12;;9294:48;;;9318:24;;-1:-1:-1;;;9318:24:12;;;;;;;;;;;9294:48;719:10:6;-1:-1:-1;;;;;9357:21:12;;;;;;:63;;-1:-1:-1;9383:37:12;9400:5;719:10:6;10202:162:12;:::i;9383:37::-;9382:38;9357:63;9353:136;;;9443:35;;-1:-1:-1;;;9443:35:12;;;;;;;;;;;9353:136;9499:28;9508:2;9512:7;9521:5;9499:8;:28::i;:::-;9234:300;9172:362;;:::o;10426:164::-;10555:28;10565:4;10571:2;10575:7;10555:9;:28::i;10656:179::-;10789:39;10806:4;10812:2;10816:7;10789:39;;;;;;;;;;;;:16;:39::i;7955:122::-;8019:7;8045:20;8057:7;8045:11;:20::i;:::-;:25;;7955:122;-1:-1:-1;;7955:122:12:o;5202:203::-;5266:7;-1:-1:-1;;;;;5289:19:12;;5285:60;;5317:28;;-1:-1:-1;;;5317:28:12;;;;;;;;;;;5285:60;-1:-1:-1;;;;;;5370:19:12;;;;;:12;:19;;;;;:27;;;;5202:203::o;8301:102::-;8357:13;8389:7;8382:14;;;;;:::i;9862:274::-;-1:-1:-1;;;;;9952:24:12;;719:10:6;9952:24:12;9948:54;;;9985:17;;-1:-1:-1;;;9985:17:12;;;;;;;;;;;9948:54;719:10:6;10013:32:12;;;;:18;:32;;;;;;;;-1:-1:-1;;;;;10013:42:12;;;;;;;;;;;;:53;;-1:-1:-1;;10013:53:12;;;;;;;;;;10081:48;;540:41:13;;;10013:42:12;;719:10:6;10081:48:12;;513:18:13;10081:48:12;;;;;;;9862:274;;:::o;10901:359::-;11062:28;11072:4;11078:2;11082:7;11062:9;:28::i;:::-;-1:-1:-1;;;;;11104:13:12;;1465:19:5;:23;;11104:76:12;;;;;11124:56;11155:4;11161:2;11165:7;11174:5;11124:30;:56::i;:::-;11123:57;11104:76;11100:154;;;11203:40;;-1:-1:-1;;;11203:40:12;;;;;;;;;;;11100:154;10901:359;;;;:::o;8469:313::-;8542:13;8572:16;8580:7;8572;:16::i;:::-;8567:59;;8597:29;;-1:-1:-1;;;8597:29:12;;;;;;;;;;;8567:59;8637:21;8661:10;9099:9;;;;;;;;;-1:-1:-1;9099:9:12;;;9023:92;8661:10;8637:34;;8694:7;8688:21;8713:1;8688:26;;:87;;;;;;;;;;;;;;;;;8741:7;8750:18;:7;:16;:18::i;:::-;8724:45;;;;;;;;;:::i;:::-;;;;;;;;;;;;;8688:87;8681:94;8469:313;-1:-1:-1;;;8469:313:12:o;11506:184::-;11563:4;11626:13;;11616:7;:23;11586:97;;;;-1:-1:-1;;11656:20:12;;;;:11;:20;;;;;:27;-1:-1:-1;;;11656:27:12;;;;11655:28;;11506:184::o;18922:189::-;19032:24;;;;:15;:24;;;;;;:29;;-1:-1:-1;;;;;;19032:29:12;-1:-1:-1;;;;;19032:29:12;;;;;;;;;19076:28;;19032:24;;19076:28;;;;;;;18922:189;;;:::o;14528:2067::-;14638:35;14676:20;14688:7;14676:11;:20::i;:::-;14749:18;;14638:58;;-1:-1:-1;14707:22:12;;-1:-1:-1;;;;;14733:34:12;719:10:6;-1:-1:-1;;;;;14733:34:12;;:100;;;-1:-1:-1;14800:18:12;;14783:50;;719:10:6;10202:162:12;:::i;14783:50::-;14733:152;;;-1:-1:-1;719:10:6;14849:20:12;14861:7;14849:11;:20::i;:::-;-1:-1:-1;;;;;14849:36:12;;14733:152;14707:179;;14902:17;14897:66;;14928:35;;-1:-1:-1;;;14928:35:12;;;;;;;;;;;14897:66;14999:4;-1:-1:-1;;;;;14977:26:12;:13;:18;;;-1:-1:-1;;;;;14977:26:12;;14973:67;;15012:28;;-1:-1:-1;;;15012:28:12;;;;;;;;;;;14973:67;-1:-1:-1;;;;;15054:16:12;;15050:52;;15079:23;;-1:-1:-1;;;15079:23:12;;;;;;;;;;;15050:52;15218:49;15235:1;15239:7;15248:13;:18;;;15218:8;:49::i;:::-;-1:-1:-1;;;;;15557:18:12;;;;;;;:12;:18;;;;;;;;:31;;-1:-1:-1;;15557:31:12;;;;;;;-1:-1:-1;;15557:31:12;;;;;;;15602:16;;;;;;;;;:29;;;;;;;;-1:-1:-1;15602:29:12;;;;;;;;;;;15646:20;;;:11;:20;;;;;;:30;;-1:-1:-1;;;;;;15690:61:12;;;;-1:-1:-1;;;15735:15:12;15690:61;;;;;;;;;;;16021:11;;;16050:24;;;;;:29;16021:11;;16050:29;16046:438;;16272:13;;16258:11;:27;16254:216;;;16341:18;;;16309:24;;;:11;:24;;;;;;;;:50;;16423:28;;;;16381:70;;-1:-1:-1;;;16381:70:12;-1:-1:-1;;;;;;16381:70:12;;;-1:-1:-1;;;;;16309:50:12;;;16381:70;;;;;;;16254:216;15533:961;16528:7;16524:2;-1:-1:-1;;;;;16509:27:12;16518:4;-1:-1:-1;;;;;16509:27:12;;;;;;;;;;;14628:1967;;14528:2067;;;:::o;6815:1083::-;-1:-1:-1;;;;;;;;;;;;;;;;;;;;;;;;;6924:7:12;7004:13;;6997:4;:20;6966:868;;;7037:31;7071:17;;;:11;:17;;;;;;;;;7037:51;;;;;;;;;-1:-1:-1;;;;;7037:51:12;;;;-1:-1:-1;;;7037:51:12;;;;;;;;;;;-1:-1:-1;;;7037:51:12;;;;;;;;;;;;;;7106:714;;7155:14;;-1:-1:-1;;;;;7155:28:12;;7151:99;;7218:9;6815:1083;-1:-1:-1;;;6815:1083:12:o;7151:99::-;-1:-1:-1;;;7586:6:12;7630:17;;;;:11;:17;;;;;;;;;7618:29;;;;;;;;;-1:-1:-1;;;;;7618:29:12;;;;;-1:-1:-1;;;7618:29:12;;;;;;;;;;;-1:-1:-1;;;7618:29:12;;;;;;;;;;;;;7677:28;7673:107;;7744:9;6815:1083;-1:-1:-1;;;6815:1083:12:o;7673:107::-;7547:255;;;7019:815;6966:868;7860:31;;-1:-1:-1;;;7860:31:12;;;;;;;;;;;19592:650;19770:72;;-1:-1:-1;;;19770:72:12;;19750:4;;-1:-1:-1;;;;;19770:36:12;;;;;:72;;719:10:6;;19821:4:12;;19827:7;;19836:5;;19770:72;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;-1:-1:-1;19770:72:12;;;;;;;;-1:-1:-1;;19770:72:12;;;;;;;;;;;;:::i;:::-;;;19766:470;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;-1:-1:-1;20001:13:12;;19997:229;;20046:40;;-1:-1:-1;;;20046:40:12;;;;;;;;;;;19997:229;20186:6;20180:13;20171:6;20167:2;20163:15;20156:38;19766:470;-1:-1:-1;;;;;;19888:55:12;-1:-1:-1;;;19888:55:12;;-1:-1:-1;19766:470:12;19592:650;;;;;;:::o;328:703:7:-;384:13;601:10;597:51;;-1:-1:-1;;627:10:7;;;;;;;;;;;;-1:-1:-1;;;627:10:7;;;;;328:703::o;597:51::-;672:5;657:12;711:75;718:9;;711:75;;743:8;;;;:::i;:::-;;-1:-1:-1;765:10:7;;-1:-1:-1;773:2:7;765:10;;:::i;:::-;;;711:75;;;795:19;827:6;817:17;;;;;;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;-1:-1:-1;817:17:7;;795:39;;844:150;851:10;;844:150;;877:11;887:1;877:11;;:::i;:::-;;-1:-1:-1;945:10:7;953:2;945:5;:10;:::i;:::-;932:24;;:2;:24;:::i;:::-;919:39;;902:6;909;902:14;;;;;;;;:::i;:::-;;;;:56;-1:-1:-1;;;;;902:56:7;;;;;;;;-1:-1:-1;972:11:7;981:2;972:11;;:::i;:::-;;;844:150;;14:131:13;-1:-1:-1;;;;;;88:32:13;;78:43;;68:71;;135:1;132;125:12;68:71;14:131;:::o;150:245::-;208:6;261:2;249:9;240:7;236:23;232:32;229:52;;;277:1;274;267:12;229:52;316:9;303:23;335:30;359:5;335:30;:::i;592:258::-;664:1;674:113;688:6;685:1;682:13;674:113;;;764:11;;;758:18;745:11;;;738:39;710:2;703:10;674:113;;;805:6;802:1;799:13;796:48;;;-1:-1:-1;;840:1:13;822:16;;815:27;592:258::o;855:::-;897:3;935:5;929:12;962:6;957:3;950:19;978:63;1034:6;1027:4;1022:3;1018:14;1011:4;1004:5;1000:16;978:63;:::i;:::-;1095:2;1074:15;-1:-1:-1;;1070:29:13;1061:39;;;;1102:4;1057:50;;855:258;-1:-1:-1;;855:258:13:o;1118:220::-;1267:2;1256:9;1249:21;1230:4;1287:45;1328:2;1317:9;1313:18;1305:6;1287:45;:::i;1343:180::-;1402:6;1455:2;1443:9;1434:7;1430:23;1426:32;1423:52;;;1471:1;1468;1461:12;1423:52;-1:-1:-1;1494:23:13;;1343:180;-1:-1:-1;1343:180:13:o;1736:173::-;1804:20;;-1:-1:-1;;;;;1853:31:13;;1843:42;;1833:70;;1899:1;1896;1889:12;1833:70;1736:173;;;:::o;1914:254::-;1982:6;1990;2043:2;2031:9;2022:7;2018:23;2014:32;2011:52;;;2059:1;2056;2049:12;2011:52;2082:29;2101:9;2082:29;:::i;:::-;2072:39;2158:2;2143:18;;;;2130:32;;-1:-1:-1;;;1914:254:13:o;2355:328::-;2432:6;2440;2448;2501:2;2489:9;2480:7;2476:23;2472:32;2469:52;;;2517:1;2514;2507:12;2469:52;2540:29;2559:9;2540:29;:::i;:::-;2530:39;;2588:38;2622:2;2611:9;2607:18;2588:38;:::i;:::-;2578:48;;2673:2;2662:9;2658:18;2645:32;2635:42;;2355:328;;;;;:::o;2688:186::-;2747:6;2800:2;2788:9;2779:7;2775:23;2771:32;2768:52;;;2816:1;2813;2806:12;2768:52;2839:29;2858:9;2839:29;:::i;2879:347::-;2944:6;2952;3005:2;2993:9;2984:7;2980:23;2976:32;2973:52;;;3021:1;3018;3011:12;2973:52;3044:29;3063:9;3044:29;:::i;:::-;3034:39;;3123:2;3112:9;3108:18;3095:32;3170:5;3163:13;3156:21;3149:5;3146:32;3136:60;;3192:1;3189;3182:12;3136:60;3215:5;3205:15;;;2879:347;;;;;:::o;3231:127::-;3292:10;3287:3;3283:20;3280:1;3273:31;3323:4;3320:1;3313:15;3347:4;3344:1;3337:15;3363:1138;3458:6;3466;3474;3482;3535:3;3523:9;3514:7;3510:23;3506:33;3503:53;;;3552:1;3549;3542:12;3503:53;3575:29;3594:9;3575:29;:::i;:::-;3565:39;;3623:38;3657:2;3646:9;3642:18;3623:38;:::i;:::-;3613:48;;3708:2;3697:9;3693:18;3680:32;3670:42;;3763:2;3752:9;3748:18;3735:32;3786:18;3827:2;3819:6;3816:14;3813:34;;;3843:1;3840;3833:12;3813:34;3881:6;3870:9;3866:22;3856:32;;3926:7;3919:4;3915:2;3911:13;3907:27;3897:55;;3948:1;3945;3938:12;3897:55;3984:2;3971:16;4006:2;4002;3999:10;3996:36;;;4012:18;;:::i;:::-;4087:2;4081:9;4055:2;4141:13;;-1:-1:-1;;4137:22:13;;;4161:2;4133:31;4129:40;4117:53;;;4185:18;;;4205:22;;;4182:46;4179:72;;;4231:18;;:::i;:::-;4271:10;4267:2;4260:22;4306:2;4298:6;4291:18;4346:7;4341:2;4336;4332;4328:11;4324:20;4321:33;4318:53;;;4367:1;4364;4357:12;4318:53;4423:2;4418;4414;4410:11;4405:2;4397:6;4393:15;4380:46;4468:1;4463:2;4458;4450:6;4446:15;4442:24;4435:35;4489:6;4479:16;;;;;;;3363:1138;;;;;;;:::o;4506:260::-;4574:6;4582;4635:2;4623:9;4614:7;4610:23;4606:32;4603:52;;;4651:1;4648;4641:12;4603:52;4674:29;4693:9;4674:29;:::i;:::-;4664:39;;4722:38;4756:2;4745:9;4741:18;4722:38;:::i;:::-;4712:48;;4506:260;;;;;:::o;4771:380::-;4850:1;4846:12;;;;4893;;;4914:61;;4968:4;4960:6;4956:17;4946:27;;4914:61;5021:2;5013:6;5010:14;4990:18;4987:38;4984:161;;;5067:10;5062:3;5058:20;5055:1;5048:31;5102:4;5099:1;5092:15;5130:4;5127:1;5120:15;4984:161;;4771:380;;;:::o;5156:470::-;5335:3;5373:6;5367:13;5389:53;5435:6;5430:3;5423:4;5415:6;5411:17;5389:53;:::i;:::-;5505:13;;5464:16;;;;5527:57;5505:13;5464:16;5561:4;5549:17;;5527:57;:::i;:::-;5600:20;;5156:470;-1:-1:-1;;;;5156:470:13:o;5631:489::-;-1:-1:-1;;;;;5900:15:13;;;5882:34;;5952:15;;5947:2;5932:18;;5925:43;5999:2;5984:18;;5977:34;;;6047:3;6042:2;6027:18;;6020:31;;;5825:4;;6068:46;;6094:19;;6086:6;6068:46;:::i;:::-;6060:54;5631:489;-1:-1:-1;;;;;;5631:489:13:o;6125:249::-;6194:6;6247:2;6235:9;6226:7;6222:23;6218:32;6215:52;;;6263:1;6260;6253:12;6215:52;6295:9;6289:16;6314:30;6338:5;6314:30;:::i;6379:127::-;6440:10;6435:3;6431:20;6428:1;6421:31;6471:4;6468:1;6461:15;6495:4;6492:1;6485:15;6511:135;6550:3;-1:-1:-1;;6571:17:13;;6568:43;;;6591:18;;:::i;:::-;-1:-1:-1;6638:1:13;6627:13;;6511:135::o;6651:127::-;6712:10;6707:3;6703:20;6700:1;6693:31;6743:4;6740:1;6733:15;6767:4;6764:1;6757:15;6783:120;6823:1;6849;6839:35;;6854:18;;:::i;:::-;-1:-1:-1;6888:9:13;;6783:120::o;6908:125::-;6948:4;6976:1;6973;6970:8;6967:34;;;6981:18;;:::i;:::-;-1:-1:-1;7018:9:13;;6908:125::o;7038:112::-;7070:1;7096;7086:35;;7101:18;;:::i;:::-;-1:-1:-1;7135:9:13;;7038:112::o;7155:128::-;7195:3;7226:1;7222:6;7219:1;7216:13;7213:39;;;7232:18;;:::i;:::-;-1:-1:-1;7268:9:13;;7155:128::o;7288:127::-;7349:10;7344:3;7340:20;7337:1;7330:31;7380:4;7377:1;7370:15;7404:4;7401:1;7394:15"
						},
						"gasEstimates": {
							"creation": {
								"codeDepositCost": "826400",
								"executionCost": "infinite",
								"totalCost": "infinite"
							},
							"external": {
								"approve(address,uint256)": "infinite",
								"balanceOf(address)": "2640",
								"getApproved(uint256)": "6936",
								"isApprovedForAll(address,address)": "infinite",
								"name()": "infinite",
								"ownerOf(uint256)": "infinite",
								"safeTransferFrom(address,address,uint256)": "infinite",
								"safeTransferFrom(address,address,uint256,bytes)": "infinite",
								"setApprovalForAll(address,bool)": "26650",
								"supportsInterface(bytes4)": "534",
								"symbol()": "infinite",
								"tokenURI(uint256)": "infinite",
								"totalSupply()": "4432",
								"transferFrom(address,address,uint256)": "infinite"
							},
							"internal": {
								"_afterTokenTransfers(address,address,uint256,uint256)": "infinite",
								"_approve(address,uint256,address)": "26264",
								"_baseURI()": "infinite",
								"_beforeTokenTransfers(address,address,uint256,uint256)": "infinite",
								"_burn(uint256)": "infinite",
								"_checkContractOnERC721Received(address,address,uint256,bytes memory)": "infinite",
								"_exists(uint256)": "4348",
								"_getAux(address)": "infinite",
								"_mint(address,uint256,bytes memory,bool)": "infinite",
								"_numberBurned(address)": "infinite",
								"_numberMinted(address)": "infinite",
								"_safeMint(address,uint256)": "infinite",
								"_safeMint(address,uint256,bytes memory)": "infinite",
								"_setAux(address,uint64)": "infinite",
								"_startTokenId()": "infinite",
								"_totalMinted()": "infinite",
								"_transfer(address,address,uint256)": "infinite",
								"ownershipOf(uint256)": "infinite"
							}
						},
						"legacyAssembly": {
							".code": [
								{
									"begin": 1708,
									"end": 21823,
									"name": "PUSH",
									"source": 12,
									"value": "80"
								},
								{
									"begin": 1708,
									"end": 21823,
									"name": "PUSH",
									"source": 12,
									"value": "40"
								},
								{
									"begin": 1708,
									"end": 21823,
									"name": "MSTORE",
									"source": 12
								},
								{
									"begin": 3600,
									"end": 3754,
									"name": "CALLVALUE",
									"source": 12
								},
								{
									"begin": 3600,
									"end": 3754,
									"name": "DUP1",
									"source": 12
								},
								{
									"begin": 3600,
									"end": 3754,
									"name": "ISZERO",
									"source": 12
								},
								{
									"begin": 3600,
									"end": 3754,
									"name": "PUSH [tag]",
									"source": 12,
									"value": "1"
								},
								{
									"begin": 3600,
									"end": 3754,
									"name": "JUMPI",
									"source": 12
								},
								{
									"begin": 3600,
									"end": 3754,
									"name": "PUSH",
									"source": 12,
									"value": "0"
								},
								{
									"begin": 3600,
									"end": 3754,
									"name": "DUP1",
									"source": 12
								},
								{
									"begin": 3600,
									"end": 3754,
									"name": "REVERT",
									"source": 12
								},
								{
									"begin": 3600,
									"end": 3754,
									"name": "tag",
									"source": 12,
									"value": "1"
								},
								{
									"begin": 3600,
									"end": 3754,
									"name": "JUMPDEST",
									"source": 12
								},
								{
									"begin": 3600,
									"end": 3754,
									"name": "POP",
									"source": 12
								},
								{
									"begin": 3600,
									"end": 3754,
									"name": "PUSH",
									"source": 12,
									"value": "40"
								},
								{
									"begin": 3600,
									"end": 3754,
									"name": "MLOAD",
									"source": 12
								},
								{
									"begin": 3600,
									"end": 3754,
									"name": "PUSHSIZE",
									"source": 12
								},
								{
									"begin": 3600,
									"end": 3754,
									"name": "CODESIZE",
									"source": 12
								},
								{
									"begin": 3600,
									"end": 3754,
									"name": "SUB",
									"source": 12
								},
								{
									"begin": 3600,
									"end": 3754,
									"name": "DUP1",
									"source": 12
								},
								{
									"begin": 3600,
									"end": 3754,
									"name": "PUSHSIZE",
									"source": 12
								},
								{
									"begin": 3600,
									"end": 3754,
									"name": "DUP4",
									"source": 12
								},
								{
									"begin": 3600,
									"end": 3754,
									"name": "CODECOPY",
									"source": 12
								},
								{
									"begin": 3600,
									"end": 3754,
									"name": "DUP2",
									"source": 12
								},
								{
									"begin": 3600,
									"end": 3754,
									"name": "ADD",
									"source": 12
								},
								{
									"begin": 3600,
									"end": 3754,
									"name": "PUSH",
									"source": 12,
									"value": "40"
								},
								{
									"begin": 3600,
									"end": 3754,
									"name": "DUP2",
									"source": 12
								},
								{
									"begin": 3600,
									"end": 3754,
									"name": "SWAP1",
									"source": 12
								},
								{
									"begin": 3600,
									"end": 3754,
									"name": "MSTORE",
									"source": 12
								},
								{
									"begin": 3600,
									"end": 3754,
									"name": "PUSH [tag]",
									"source": 12,
									"value": "2"
								},
								{
									"begin": 3600,
									"end": 3754,
									"name": "SWAP2",
									"source": 12
								},
								{
									"begin": 3600,
									"end": 3754,
									"name": "PUSH [tag]",
									"source": 12,
									"value": "3"
								},
								{
									"begin": 3600,
									"end": 3754,
									"name": "JUMP",
									"source": 12,
									"value": "[in]"
								},
								{
									"begin": 3600,
									"end": 3754,
									"name": "tag",
									"source": 12,
									"value": "2"
								},
								{
									"begin": 3600,
									"end": 3754,
									"name": "JUMPDEST",
									"source": 12
								},
								{
									"begin": 3666,
									"end": 3679,
									"name": "DUP2",
									"source": 12
								},
								{
									"begin": 3666,
									"end": 3679,
									"name": "MLOAD",
									"source": 12
								},
								{
									"begin": 3666,
									"end": 3679,
									"name": "PUSH [tag]",
									"source": 12,
									"value": "6"
								},
								{
									"begin": 3666,
									"end": 3679,
									"name": "SWAP1",
									"source": 12
								},
								{
									"begin": 3666,
									"end": 3671,
									"name": "PUSH",
									"source": 12,
									"value": "2"
								},
								{
									"begin": 3666,
									"end": 3671,
									"name": "SWAP1",
									"source": 12
								},
								{
									"begin": 3666,
									"end": 3679,
									"name": "PUSH",
									"source": 12,
									"value": "20"
								},
								{
									"begin": 3666,
									"end": 3679,
									"name": "DUP6",
									"source": 12
								},
								{
									"begin": 3666,
									"end": 3679,
									"name": "ADD",
									"source": 12
								},
								{
									"begin": 3666,
									"end": 3679,
									"name": "SWAP1",
									"source": 12
								},
								{
									"begin": 3666,
									"end": 3679,
									"name": "PUSH [tag]",
									"source": 12,
									"value": "7"
								},
								{
									"begin": 3666,
									"end": 3679,
									"name": "JUMP",
									"source": 12,
									"value": "[in]"
								},
								{
									"begin": 3666,
									"end": 3679,
									"name": "tag",
									"source": 12,
									"value": "6"
								},
								{
									"begin": 3666,
									"end": 3679,
									"name": "JUMPDEST",
									"source": 12
								},
								{
									"begin": -1,
									"end": -1,
									"name": "POP",
									"source": -1
								},
								{
									"begin": 3689,
									"end": 3706,
									"name": "DUP1",
									"source": 12
								},
								{
									"begin": 3689,
									"end": 3706,
									"name": "MLOAD",
									"source": 12
								},
								{
									"begin": 3689,
									"end": 3706,
									"name": "PUSH [tag]",
									"source": 12,
									"value": "8"
								},
								{
									"begin": 3689,
									"end": 3706,
									"name": "SWAP1",
									"source": 12
								},
								{
									"begin": 3689,
									"end": 3696,
									"name": "PUSH",
									"source": 12,
									"value": "3"
								},
								{
									"begin": 3689,
									"end": 3696,
									"name": "SWAP1",
									"source": 12
								},
								{
									"begin": 3689,
									"end": 3706,
									"name": "PUSH",
									"source": 12,
									"value": "20"
								},
								{
									"begin": 3689,
									"end": 3706,
									"name": "DUP5",
									"source": 12
								},
								{
									"begin": 3689,
									"end": 3706,
									"name": "ADD",
									"source": 12
								},
								{
									"begin": 3689,
									"end": 3706,
									"name": "SWAP1",
									"source": 12
								},
								{
									"begin": 3689,
									"end": 3706,
									"name": "PUSH [tag]",
									"source": 12,
									"value": "7"
								},
								{
									"begin": 3689,
									"end": 3706,
									"name": "JUMP",
									"source": 12,
									"value": "[in]"
								},
								{
									"begin": 3689,
									"end": 3706,
									"name": "tag",
									"source": 12,
									"value": "8"
								},
								{
									"begin": 3689,
									"end": 3706,
									"name": "JUMPDEST",
									"source": 12
								},
								{
									"begin": -1,
									"end": -1,
									"name": "POP",
									"source": -1
								},
								{
									"begin": -1,
									"end": -1,
									"name": "POP",
									"source": -1
								},
								{
									"begin": 3902,
									"end": 3909,
									"name": "PUSH",
									"source": 12,
									"value": "0"
								},
								{
									"begin": 3716,
									"end": 3747,
									"name": "DUP1",
									"source": 12
								},
								{
									"begin": 3716,
									"end": 3747,
									"name": "SSTORE",
									"source": 12
								},
								{
									"begin": -1,
									"end": -1,
									"name": "POP",
									"source": -1
								},
								{
									"begin": 1708,
									"end": 21823,
									"name": "PUSH [tag]",
									"source": 12,
									"value": "26"
								},
								{
									"begin": 1708,
									"end": 21823,
									"name": "JUMP",
									"source": 12
								},
								{
									"begin": 1708,
									"end": 21823,
									"name": "tag",
									"source": 12,
									"value": "7"
								},
								{
									"begin": 1708,
									"end": 21823,
									"name": "JUMPDEST",
									"source": 12
								},
								{
									"begin": 1708,
									"end": 21823,
									"name": "DUP3",
									"source": 12
								},
								{
									"begin": 1708,
									"end": 21823,
									"name": "DUP1",
									"source": 12
								},
								{
									"begin": 1708,
									"end": 21823,
									"name": "SLOAD",
									"source": 12
								},
								{
									"begin": 1708,
									"end": 21823,
									"name": "PUSH [tag]",
									"source": 12,
									"value": "13"
								},
								{
									"begin": 1708,
									"end": 21823,
									"name": "SWAP1",
									"source": 12
								},
								{
									"begin": 1708,
									"end": 21823,
									"name": "PUSH [tag]",
									"source": 12,
									"value": "14"
								},
								{
									"begin": 1708,
									"end": 21823,
									"name": "JUMP",
									"source": 12,
									"value": "[in]"
								},
								{
									"begin": 1708,
									"end": 21823,
									"name": "tag",
									"source": 12,
									"value": "13"
								},
								{
									"begin": 1708,
									"end": 21823,
									"name": "JUMPDEST",
									"source": 12
								},
								{
									"begin": 1708,
									"end": 21823,
									"name": "SWAP1",
									"source": 12
								},
								{
									"begin": 1708,
									"end": 21823,
									"name": "PUSH",
									"source": 12,
									"value": "0"
								},
								{
									"begin": 1708,
									"end": 21823,
									"name": "MSTORE",
									"source": 12
								},
								{
									"begin": 1708,
									"end": 21823,
									"name": "PUSH",
									"source": 12,
									"value": "20"
								},
								{
									"begin": 1708,
									"end": 21823,
									"name": "PUSH",
									"source": 12,
									"value": "0"
								},
								{
									"begin": 1708,
									"end": 21823,
									"name": "KECCAK256",
									"source": 12
								},
								{
									"begin": 1708,
									"end": 21823,
									"name": "SWAP1",
									"source": 12
								},
								{
									"begin": 1708,
									"end": 21823,
									"name": "PUSH",
									"source": 12,
									"value": "1F"
								},
								{
									"begin": 1708,
									"end": 21823,
									"name": "ADD",
									"source": 12
								},
								{
									"begin": 1708,
									"end": 21823,
									"name": "PUSH",
									"source": 12,
									"value": "20"
								},
								{
									"begin": 1708,
									"end": 21823,
									"name": "SWAP1",
									"source": 12
								},
								{
									"begin": 1708,
									"end": 21823,
									"name": "DIV",
									"source": 12
								},
								{
									"begin": 1708,
									"end": 21823,
									"name": "DUP2",
									"source": 12
								},
								{
									"begin": 1708,
									"end": 21823,
									"name": "ADD",
									"source": 12
								},
								{
									"begin": 1708,
									"end": 21823,
									"name": "SWAP3",
									"source": 12
								},
								{
									"begin": 1708,
									"end": 21823,
									"name": "DUP3",
									"source": 12
								},
								{
									"begin": 1708,
									"end": 21823,
									"name": "PUSH [tag]",
									"source": 12,
									"value": "16"
								},
								{
									"begin": 1708,
									"end": 21823,
									"name": "JUMPI",
									"source": 12
								},
								{
									"begin": 1708,
									"end": 21823,
									"name": "PUSH",
									"source": 12,
									"value": "0"
								},
								{
									"begin": 1708,
									"end": 21823,
									"name": "DUP6",
									"source": 12
								},
								{
									"begin": 1708,
									"end": 21823,
									"name": "SSTORE",
									"source": 12
								},
								{
									"begin": 1708,
									"end": 21823,
									"name": "PUSH [tag]",
									"source": 12,
									"value": "19"
								},
								{
									"begin": 1708,
									"end": 21823,
									"name": "JUMP",
									"source": 12
								},
								{
									"begin": 1708,
									"end": 21823,
									"name": "tag",
									"source": 12,
									"value": "16"
								},
								{
									"begin": 1708,
									"end": 21823,
									"name": "JUMPDEST",
									"source": 12
								},
								{
									"begin": 1708,
									"end": 21823,
									"name": "DUP3",
									"source": 12
								},
								{
									"begin": 1708,
									"end": 21823,
									"name": "PUSH",
									"source": 12,
									"value": "1F"
								},
								{
									"begin": 1708,
									"end": 21823,
									"name": "LT",
									"source": 12
								},
								{
									"begin": 1708,
									"end": 21823,
									"name": "PUSH [tag]",
									"source": 12,
									"value": "17"
								},
								{
									"begin": 1708,
									"end": 21823,
									"name": "JUMPI",
									"source": 12
								},
								{
									"begin": 1708,
									"end": 21823,
									"name": "DUP1",
									"source": 12
								},
								{
									"begin": 1708,
									"end": 21823,
									"name": "MLOAD",
									"source": 12
								},
								{
									"begin": 1708,
									"end": 21823,
									"name": "PUSH",
									"source": 12,
									"value": "FF"
								},
								{
									"begin": 1708,
									"end": 21823,
									"name": "NOT",
									"source": 12
								},
								{
									"begin": 1708,
									"end": 21823,
									"name": "AND",
									"source": 12
								},
								{
									"begin": 1708,
									"end": 21823,
									"name": "DUP4",
									"source": 12
								},
								{
									"begin": 1708,
									"end": 21823,
									"name": "DUP1",
									"source": 12
								},
								{
									"begin": 1708,
									"end": 21823,
									"name": "ADD",
									"source": 12
								},
								{
									"begin": 1708,
									"end": 21823,
									"name": "OR",
									"source": 12
								},
								{
									"begin": 1708,
									"end": 21823,
									"name": "DUP6",
									"source": 12
								},
								{
									"begin": 1708,
									"end": 21823,
									"name": "SSTORE",
									"source": 12
								},
								{
									"begin": 1708,
									"end": 21823,
									"name": "PUSH [tag]",
									"source": 12,
									"value": "19"
								},
								{
									"begin": 1708,
									"end": 21823,
									"name": "JUMP",
									"source": 12
								},
								{
									"begin": 1708,
									"end": 21823,
									"name": "tag",
									"source": 12,
									"value": "17"
								},
								{
									"begin": 1708,
									"end": 21823,
									"name": "JUMPDEST",
									"source": 12
								},
								{
									"begin": 1708,
									"end": 21823,
									"name": "DUP3",
									"source": 12
								},
								{
									"begin": 1708,
									"end": 21823,
									"name": "DUP1",
									"source": 12
								},
								{
									"begin": 1708,
									"end": 21823,
									"name": "ADD",
									"source": 12
								},
								{
									"begin": 1708,
									"end": 21823,
									"name": "PUSH",
									"source": 12,
									"value": "1"
								},
								{
									"begin": 1708,
									"end": 21823,
									"name": "ADD",
									"source": 12
								},
								{
									"begin": 1708,
									"end": 21823,
									"name": "DUP6",
									"source": 12
								},
								{
									"begin": 1708,
									"end": 21823,
									"name": "SSTORE",
									"source": 12
								},
								{
									"begin": 1708,
									"end": 21823,
									"name": "DUP3",
									"source": 12
								},
								{
									"begin": 1708,
									"end": 21823,
									"name": "ISZERO",
									"source": 12
								},
								{
									"begin": 1708,
									"end": 21823,
									"name": "PUSH [tag]",
									"source": 12,
									"value": "19"
								},
								{
									"begin": 1708,
									"end": 21823,
									"name": "JUMPI",
									"source": 12
								},
								{
									"begin": 1708,
									"end": 21823,
									"name": "SWAP2",
									"source": 12
								},
								{
									"begin": 1708,
									"end": 21823,
									"name": "DUP3",
									"source": 12
								},
								{
									"begin": 1708,
									"end": 21823,
									"name": "ADD",
									"source": 12
								},
								{
									"begin": 1708,
									"end": 21823,
									"name": "tag",
									"source": 12,
									"value": "18"
								},
								{
									"begin": 1708,
									"end": 21823,
									"name": "JUMPDEST",
									"source": 12
								},
								{
									"begin": 1708,
									"end": 21823,
									"name": "DUP3",
									"source": 12
								},
								{
									"begin": 1708,
									"end": 21823,
									"name": "DUP2",
									"source": 12
								},
								{
									"begin": 1708,
									"end": 21823,
									"name": "GT",
									"source": 12
								},
								{
									"begin": 1708,
									"end": 21823,
									"name": "ISZERO",
									"source": 12
								},
								{
									"begin": 1708,
									"end": 21823,
									"name": "PUSH [tag]",
									"source": 12,
									"value": "19"
								},
								{
									"begin": 1708,
									"end": 21823,
									"name": "JUMPI",
									"source": 12
								},
								{
									"begin": 1708,
									"end": 21823,
									"name": "DUP3",
									"source": 12
								},
								{
									"begin": 1708,
									"end": 21823,
									"name": "MLOAD",
									"source": 12
								},
								{
									"begin": 1708,
									"end": 21823,
									"name": "DUP3",
									"source": 12
								},
								{
									"begin": 1708,
									"end": 21823,
									"name": "SSTORE",
									"source": 12
								},
								{
									"begin": 1708,
									"end": 21823,
									"name": "SWAP2",
									"source": 12
								},
								{
									"begin": 1708,
									"end": 21823,
									"name": "PUSH",
									"source": 12,
									"value": "20"
								},
								{
									"begin": 1708,
									"end": 21823,
									"name": "ADD",
									"source": 12
								},
								{
									"begin": 1708,
									"end": 21823,
									"name": "SWAP2",
									"source": 12
								},
								{
									"begin": 1708,
									"end": 21823,
									"name": "SWAP1",
									"source": 12
								},
								{
									"begin": 1708,
									"end": 21823,
									"name": "PUSH",
									"source": 12,
									"value": "1"
								},
								{
									"begin": 1708,
									"end": 21823,
									"name": "ADD",
									"source": 12
								},
								{
									"begin": 1708,
									"end": 21823,
									"name": "SWAP1",
									"source": 12
								},
								{
									"begin": 1708,
									"end": 21823,
									"name": "PUSH [tag]",
									"source": 12,
									"value": "18"
								},
								{
									"begin": 1708,
									"end": 21823,
									"name": "JUMP",
									"source": 12
								},
								{
									"begin": 1708,
									"end": 21823,
									"name": "tag",
									"source": 12,
									"value": "19"
								},
								{
									"begin": 1708,
									"end": 21823,
									"name": "JUMPDEST",
									"source": 12
								},
								{
									"begin": -1,
									"end": -1,
									"name": "POP",
									"source": -1
								},
								{
									"begin": 1708,
									"end": 21823,
									"name": "PUSH [tag]",
									"source": 12,
									"value": "20"
								},
								{
									"begin": 1708,
									"end": 21823,
									"name": "SWAP3",
									"source": 12
								},
								{
									"begin": 1708,
									"end": 21823,
									"name": "SWAP2",
									"source": 12
								},
								{
									"begin": -1,
									"end": -1,
									"name": "POP",
									"source": -1
								},
								{
									"begin": 1708,
									"end": 21823,
									"name": "PUSH [tag]",
									"source": 12,
									"value": "21"
								},
								{
									"begin": 1708,
									"end": 21823,
									"name": "JUMP",
									"source": 12,
									"value": "[in]"
								},
								{
									"begin": 1708,
									"end": 21823,
									"name": "tag",
									"source": 12,
									"value": "20"
								},
								{
									"begin": 1708,
									"end": 21823,
									"name": "JUMPDEST",
									"source": 12
								},
								{
									"begin": 1708,
									"end": 21823,
									"name": "POP",
									"source": 12
								},
								{
									"begin": 1708,
									"end": 21823,
									"name": "SWAP1",
									"source": 12
								},
								{
									"begin": 1708,
									"end": 21823,
									"name": "JUMP",
									"source": 12,
									"value": "[out]"
								},
								{
									"begin": 1708,
									"end": 21823,
									"name": "tag",
									"source": 12,
									"value": "21"
								},
								{
									"begin": 1708,
									"end": 21823,
									"name": "JUMPDEST",
									"source": 12
								},
								{
									"begin": 1708,
									"end": 21823,
									"name": "tag",
									"source": 12,
									"value": "22"
								},
								{
									"begin": 1708,
									"end": 21823,
									"name": "JUMPDEST",
									"source": 12
								},
								{
									"begin": 1708,
									"end": 21823,
									"name": "DUP1",
									"source": 12
								},
								{
									"begin": 1708,
									"end": 21823,
									"name": "DUP3",
									"source": 12
								},
								{
									"begin": 1708,
									"end": 21823,
									"name": "GT",
									"source": 12
								},
								{
									"begin": 1708,
									"end": 21823,
									"name": "ISZERO",
									"source": 12
								},
								{
									"begin": 1708,
									"end": 21823,
									"name": "PUSH [tag]",
									"source": 12,
									"value": "20"
								},
								{
									"begin": 1708,
									"end": 21823,
									"name": "JUMPI",
									"source": 12
								},
								{
									"begin": 1708,
									"end": 21823,
									"name": "PUSH",
									"source": 12,
									"value": "0"
								},
								{
									"begin": 1708,
									"end": 21823,
									"name": "DUP2",
									"source": 12
								},
								{
									"begin": 1708,
									"end": 21823,
									"name": "SSTORE",
									"source": 12
								},
								{
									"begin": 1708,
									"end": 21823,
									"name": "PUSH",
									"source": 12,
									"value": "1"
								},
								{
									"begin": 1708,
									"end": 21823,
									"name": "ADD",
									"source": 12
								},
								{
									"begin": 1708,
									"end": 21823,
									"name": "PUSH [tag]",
									"source": 12,
									"value": "22"
								},
								{
									"begin": 1708,
									"end": 21823,
									"name": "JUMP",
									"source": 12
								},
								{
									"begin": 14,
									"end": 141,
									"name": "tag",
									"source": 13,
									"value": "24"
								},
								{
									"begin": 14,
									"end": 141,
									"name": "JUMPDEST",
									"source": 13
								},
								{
									"begin": 75,
									"end": 85,
									"name": "PUSH",
									"source": 13,
									"value": "4E487B71"
								},
								{
									"begin": 70,
									"end": 73,
									"name": "PUSH",
									"source": 13,
									"value": "E0"
								},
								{
									"begin": 66,
									"end": 86,
									"name": "SHL",
									"source": 13
								},
								{
									"begin": 63,
									"end": 64,
									"name": "PUSH",
									"source": 13,
									"value": "0"
								},
								{
									"begin": 56,
									"end": 87,
									"name": "MSTORE",
									"source": 13
								},
								{
									"begin": 106,
									"end": 110,
									"name": "PUSH",
									"source": 13,
									"value": "41"
								},
								{
									"begin": 103,
									"end": 104,
									"name": "PUSH",
									"source": 13,
									"value": "4"
								},
								{
									"begin": 96,
									"end": 111,
									"name": "MSTORE",
									"source": 13
								},
								{
									"begin": 130,
									"end": 134,
									"name": "PUSH",
									"source": 13,
									"value": "24"
								},
								{
									"begin": 127,
									"end": 128,
									"name": "PUSH",
									"source": 13,
									"value": "0"
								},
								{
									"begin": 120,
									"end": 135,
									"name": "REVERT",
									"source": 13
								},
								{
									"begin": 146,
									"end": 1031,
									"name": "tag",
									"source": 13,
									"value": "25"
								},
								{
									"begin": 146,
									"end": 1031,
									"name": "JUMPDEST",
									"source": 13
								},
								{
									"begin": 200,
									"end": 205,
									"name": "PUSH",
									"source": 13,
									"value": "0"
								},
								{
									"begin": 253,
									"end": 256,
									"name": "DUP3",
									"source": 13
								},
								{
									"begin": 246,
									"end": 250,
									"name": "PUSH",
									"source": 13,
									"value": "1F"
								},
								{
									"begin": 238,
									"end": 244,
									"name": "DUP4",
									"source": 13
								},
								{
									"begin": 234,
									"end": 251,
									"name": "ADD",
									"source": 13
								},
								{
									"begin": 230,
									"end": 257,
									"name": "SLT",
									"source": 13
								},
								{
									"begin": 220,
									"end": 275,
									"name": "PUSH [tag]",
									"source": 13,
									"value": "29"
								},
								{
									"begin": 220,
									"end": 275,
									"name": "JUMPI",
									"source": 13
								},
								{
									"begin": 271,
									"end": 272,
									"name": "PUSH",
									"source": 13,
									"value": "0"
								},
								{
									"begin": 268,
									"end": 269,
									"name": "DUP1",
									"source": 13
								},
								{
									"begin": 261,
									"end": 273,
									"name": "REVERT",
									"source": 13
								},
								{
									"begin": 220,
									"end": 275,
									"name": "tag",
									"source": 13,
									"value": "29"
								},
								{
									"begin": 220,
									"end": 275,
									"name": "JUMPDEST",
									"source": 13
								},
								{
									"begin": 294,
									"end": 307,
									"name": "DUP2",
									"source": 13
								},
								{
									"begin": 294,
									"end": 307,
									"name": "MLOAD",
									"source": 13
								},
								{
									"begin": -1,
									"end": -1,
									"name": "PUSH",
									"source": -1,
									"value": "1"
								},
								{
									"begin": -1,
									"end": -1,
									"name": "PUSH",
									"source": -1,
									"value": "1"
								},
								{
									"begin": -1,
									"end": -1,
									"name": "PUSH",
									"source": -1,
									"value": "40"
								},
								{
									"begin": -1,
									"end": -1,
									"name": "SHL",
									"source": -1
								},
								{
									"begin": -1,
									"end": -1,
									"name": "SUB",
									"source": -1
								},
								{
									"begin": 356,
									"end": 366,
									"name": "DUP1",
									"source": 13
								},
								{
									"begin": 356,
									"end": 366,
									"name": "DUP3",
									"source": 13
								},
								{
									"begin": 356,
									"end": 366,
									"name": "GT",
									"source": 13
								},
								{
									"begin": 353,
									"end": 389,
									"name": "ISZERO",
									"source": 13
								},
								{
									"begin": 353,
									"end": 389,
									"name": "PUSH [tag]",
									"source": 13,
									"value": "31"
								},
								{
									"begin": 353,
									"end": 389,
									"name": "JUMPI",
									"source": 13
								},
								{
									"begin": 369,
									"end": 387,
									"name": "PUSH [tag]",
									"source": 13,
									"value": "31"
								},
								{
									"begin": 369,
									"end": 387,
									"name": "PUSH [tag]",
									"source": 13,
									"value": "24"
								},
								{
									"begin": 369,
									"end": 387,
									"name": "JUMP",
									"source": 13,
									"value": "[in]"
								},
								{
									"begin": 369,
									"end": 387,
									"name": "tag",
									"source": 13,
									"value": "31"
								},
								{
									"begin": 369,
									"end": 387,
									"name": "JUMPDEST",
									"source": 13
								},
								{
									"begin": 444,
									"end": 446,
									"name": "PUSH",
									"source": 13,
									"value": "40"
								},
								{
									"begin": 438,
									"end": 447,
									"name": "MLOAD",
									"source": 13
								},
								{
									"begin": 412,
									"end": 414,
									"name": "PUSH",
									"source": 13,
									"value": "1F"
								},
								{
									"begin": 498,
									"end": 511,
									"name": "DUP4",
									"source": 13
								},
								{
									"begin": 498,
									"end": 511,
									"name": "ADD",
									"source": 13
								},
								{
									"begin": -1,
									"end": -1,
									"name": "PUSH",
									"source": -1,
									"value": "1F"
								},
								{
									"begin": -1,
									"end": -1,
									"name": "NOT",
									"source": -1
								},
								{
									"begin": 494,
									"end": 516,
									"name": "SWAP1",
									"source": 13
								},
								{
									"begin": 494,
									"end": 516,
									"name": "DUP2",
									"source": 13
								},
								{
									"begin": 494,
									"end": 516,
									"name": "AND",
									"source": 13
								},
								{
									"begin": 518,
									"end": 520,
									"name": "PUSH",
									"source": 13,
									"value": "3F"
								},
								{
									"begin": 490,
									"end": 521,
									"name": "ADD",
									"source": 13
								},
								{
									"begin": 486,
									"end": 526,
									"name": "AND",
									"source": 13
								},
								{
									"begin": 474,
									"end": 527,
									"name": "DUP2",
									"source": 13
								},
								{
									"begin": 474,
									"end": 527,
									"name": "ADD",
									"source": 13
								},
								{
									"begin": 474,
									"end": 527,
									"name": "SWAP1",
									"source": 13
								},
								{
									"begin": 542,
									"end": 560,
									"name": "DUP3",
									"source": 13
								},
								{
									"begin": 542,
									"end": 560,
									"name": "DUP3",
									"source": 13
								},
								{
									"begin": 542,
									"end": 560,
									"name": "GT",
									"source": 13
								},
								{
									"begin": 562,
									"end": 584,
									"name": "DUP2",
									"source": 13
								},
								{
									"begin": 562,
									"end": 584,
									"name": "DUP4",
									"source": 13
								},
								{
									"begin": 562,
									"end": 584,
									"name": "LT",
									"source": 13
								},
								{
									"begin": 539,
									"end": 585,
									"name": "OR",
									"source": 13
								},
								{
									"begin": 536,
									"end": 608,
									"name": "ISZERO",
									"source": 13
								},
								{
									"begin": 536,
									"end": 608,
									"name": "PUSH [tag]",
									"source": 13,
									"value": "33"
								},
								{
									"begin": 536,
									"end": 608,
									"name": "JUMPI",
									"source": 13
								},
								{
									"begin": 588,
									"end": 606,
									"name": "PUSH [tag]",
									"source": 13,
									"value": "33"
								},
								{
									"begin": 588,
									"end": 606,
									"name": "PUSH [tag]",
									"source": 13,
									"value": "24"
								},
								{
									"begin": 588,
									"end": 606,
									"name": "JUMP",
									"source": 13,
									"value": "[in]"
								},
								{
									"begin": 588,
									"end": 606,
									"name": "tag",
									"source": 13,
									"value": "33"
								},
								{
									"begin": 588,
									"end": 606,
									"name": "JUMPDEST",
									"source": 13
								},
								{
									"begin": 628,
									"end": 638,
									"name": "DUP2",
									"source": 13
								},
								{
									"begin": 624,
									"end": 626,
									"name": "PUSH",
									"source": 13,
									"value": "40"
								},
								{
									"begin": 617,
									"end": 639,
									"name": "MSTORE",
									"source": 13
								},
								{
									"begin": 663,
									"end": 665,
									"name": "DUP4",
									"source": 13
								},
								{
									"begin": 655,
									"end": 661,
									"name": "DUP2",
									"source": 13
								},
								{
									"begin": 648,
									"end": 666,
									"name": "MSTORE",
									"source": 13
								},
								{
									"begin": 685,
									"end": 689,
									"name": "PUSH",
									"source": 13,
									"value": "20"
								},
								{
									"begin": 675,
									"end": 689,
									"name": "SWAP3",
									"source": 13
								},
								{
									"begin": 675,
									"end": 689,
									"name": "POP",
									"source": 13
								},
								{
									"begin": 730,
									"end": 733,
									"name": "DUP7",
									"source": 13
								},
								{
									"begin": 725,
									"end": 727,
									"name": "DUP4",
									"source": 13
								},
								{
									"begin": 720,
									"end": 722,
									"name": "DUP6",
									"source": 13
								},
								{
									"begin": 712,
									"end": 718,
									"name": "DUP9",
									"source": 13
								},
								{
									"begin": 708,
									"end": 723,
									"name": "ADD",
									"source": 13
								},
								{
									"begin": 704,
									"end": 728,
									"name": "ADD",
									"source": 13
								},
								{
									"begin": 701,
									"end": 734,
									"name": "GT",
									"source": 13
								},
								{
									"begin": 698,
									"end": 751,
									"name": "ISZERO",
									"source": 13
								},
								{
									"begin": 698,
									"end": 751,
									"name": "PUSH [tag]",
									"source": 13,
									"value": "34"
								},
								{
									"begin": 698,
									"end": 751,
									"name": "JUMPI",
									"source": 13
								},
								{
									"begin": 747,
									"end": 748,
									"name": "PUSH",
									"source": 13,
									"value": "0"
								},
								{
									"begin": 744,
									"end": 745,
									"name": "DUP1",
									"source": 13
								},
								{
									"begin": 737,
									"end": 749,
									"name": "REVERT",
									"source": 13
								},
								{
									"begin": 698,
									"end": 751,
									"name": "tag",
									"source": 13,
									"value": "34"
								},
								{
									"begin": 698,
									"end": 751,
									"name": "JUMPDEST",
									"source": 13
								},
								{
									"begin": 769,
									"end": 770,
									"name": "PUSH",
									"source": 13,
									"value": "0"
								},
								{
									"begin": 760,
									"end": 770,
									"name": "SWAP2",
									"source": 13
								},
								{
									"begin": 760,
									"end": 770,
									"name": "POP",
									"source": 13
								},
								{
									"begin": 779,
									"end": 912,
									"name": "tag",
									"source": 13,
									"value": "35"
								},
								{
									"begin": 779,
									"end": 912,
									"name": "JUMPDEST",
									"source": 13
								},
								{
									"begin": 793,
									"end": 795,
									"name": "DUP4",
									"source": 13
								},
								{
									"begin": 790,
									"end": 791,
									"name": "DUP3",
									"source": 13
								},
								{
									"begin": 787,
									"end": 796,
									"name": "LT",
									"source": 13
								},
								{
									"begin": 779,
									"end": 912,
									"name": "ISZERO",
									"source": 13
								},
								{
									"begin": 779,
									"end": 912,
									"name": "PUSH [tag]",
									"source": 13,
									"value": "37"
								},
								{
									"begin": 779,
									"end": 912,
									"name": "JUMPI",
									"source": 13
								},
								{
									"begin": 881,
									"end": 895,
									"name": "DUP6",
									"source": 13
								},
								{
									"begin": 881,
									"end": 895,
									"name": "DUP3",
									"source": 13
								},
								{
									"begin": 881,
									"end": 895,
									"name": "ADD",
									"source": 13
								},
								{
									"begin": 877,
									"end": 900,
									"name": "DUP4",
									"source": 13
								},
								{
									"begin": 877,
									"end": 900,
									"name": "ADD",
									"source": 13
								},
								{
									"begin": 871,
									"end": 901,
									"name": "MLOAD",
									"source": 13
								},
								{
									"begin": 850,
									"end": 864,
									"name": "DUP2",
									"source": 13
								},
								{
									"begin": 850,
									"end": 864,
									"name": "DUP4",
									"source": 13
								},
								{
									"begin": 850,
									"end": 864,
									"name": "ADD",
									"source": 13
								},
								{
									"begin": 846,
									"end": 869,
									"name": "DUP5",
									"source": 13
								},
								{
									"begin": 846,
									"end": 869,
									"name": "ADD",
									"source": 13
								},
								{
									"begin": 839,
									"end": 902,
									"name": "MSTORE",
									"source": 13
								},
								{
									"begin": 804,
									"end": 814,
									"name": "SWAP1",
									"source": 13
								},
								{
									"begin": 804,
									"end": 814,
									"name": "DUP3",
									"source": 13
								},
								{
									"begin": 804,
									"end": 814,
									"name": "ADD",
									"source": 13
								},
								{
									"begin": 804,
									"end": 814,
									"name": "SWAP1",
									"source": 13
								},
								{
									"begin": 779,
									"end": 912,
									"name": "PUSH [tag]",
									"source": 13,
									"value": "35"
								},
								{
									"begin": 779,
									"end": 912,
									"name": "JUMP",
									"source": 13
								},
								{
									"begin": 779,
									"end": 912,
									"name": "tag",
									"source": 13,
									"value": "37"
								},
								{
									"begin": 779,
									"end": 912,
									"name": "JUMPDEST",
									"source": 13
								},
								{
									"begin": 930,
									"end": 932,
									"name": "DUP4",
									"source": 13
								},
								{
									"begin": 927,
									"end": 928,
									"name": "DUP3",
									"source": 13
								},
								{
									"begin": 924,
									"end": 933,
									"name": "GT",
									"source": 13
								},
								{
									"begin": 921,
									"end": 1001,
									"name": "ISZERO",
									"source": 13
								},
								{
									"begin": 921,
									"end": 1001,
									"name": "PUSH [tag]",
									"source": 13,
									"value": "38"
								},
								{
									"begin": 921,
									"end": 1001,
									"name": "JUMPI",
									"source": 13
								},
								{
									"begin": 989,
									"end": 990,
									"name": "PUSH",
									"source": 13,
									"value": "0"
								},
								{
									"begin": 984,
									"end": 986,
									"name": "DUP4",
									"source": 13
								},
								{
									"begin": 979,
									"end": 981,
									"name": "DUP6",
									"source": 13
								},
								{
									"begin": 971,
									"end": 977,
									"name": "DUP4",
									"source": 13
								},
								{
									"begin": 967,
									"end": 982,
									"name": "ADD",
									"source": 13
								},
								{
									"begin": 963,
									"end": 987,
									"name": "ADD",
									"source": 13
								},
								{
									"begin": 956,
									"end": 991,
									"name": "MSTORE",
									"source": 13
								},
								{
									"begin": 921,
									"end": 1001,
									"name": "tag",
									"source": 13,
									"value": "38"
								},
								{
									"begin": 921,
									"end": 1001,
									"name": "JUMPDEST",
									"source": 13
								},
								{
									"begin": 1019,
									"end": 1025,
									"name": "SWAP7",
									"source": 13
								},
								{
									"begin": 146,
									"end": 1031,
									"name": "SWAP6",
									"source": 13
								},
								{
									"begin": -1,
									"end": -1,
									"name": "POP",
									"source": -1
								},
								{
									"begin": -1,
									"end": -1,
									"name": "POP",
									"source": -1
								},
								{
									"begin": -1,
									"end": -1,
									"name": "POP",
									"source": -1
								},
								{
									"begin": -1,
									"end": -1,
									"name": "POP",
									"source": -1
								},
								{
									"begin": -1,
									"end": -1,
									"name": "POP",
									"source": -1
								},
								{
									"begin": -1,
									"end": -1,
									"name": "POP",
									"source": -1
								},
								{
									"begin": 146,
									"end": 1031,
									"name": "JUMP",
									"source": 13,
									"value": "[out]"
								},
								{
									"begin": 1036,
									"end": 1598,
									"name": "tag",
									"source": 13,
									"value": "3"
								},
								{
									"begin": 1036,
									"end": 1598,
									"name": "JUMPDEST",
									"source": 13
								},
								{
									"begin": 1135,
									"end": 1141,
									"name": "PUSH",
									"source": 13,
									"value": "0"
								},
								{
									"begin": 1143,
									"end": 1149,
									"name": "DUP1",
									"source": 13
								},
								{
									"begin": 1196,
									"end": 1198,
									"name": "PUSH",
									"source": 13,
									"value": "40"
								},
								{
									"begin": 1184,
									"end": 1193,
									"name": "DUP4",
									"source": 13
								},
								{
									"begin": 1175,
									"end": 1182,
									"name": "DUP6",
									"source": 13
								},
								{
									"begin": 1171,
									"end": 1194,
									"name": "SUB",
									"source": 13
								},
								{
									"begin": 1167,
									"end": 1199,
									"name": "SLT",
									"source": 13
								},
								{
									"begin": 1164,
									"end": 1216,
									"name": "ISZERO",
									"source": 13
								},
								{
									"begin": 1164,
									"end": 1216,
									"name": "PUSH [tag]",
									"source": 13,
									"value": "40"
								},
								{
									"begin": 1164,
									"end": 1216,
									"name": "JUMPI",
									"source": 13
								},
								{
									"begin": 1212,
									"end": 1213,
									"name": "PUSH",
									"source": 13,
									"value": "0"
								},
								{
									"begin": 1209,
									"end": 1210,
									"name": "DUP1",
									"source": 13
								},
								{
									"begin": 1202,
									"end": 1214,
									"name": "REVERT",
									"source": 13
								},
								{
									"begin": 1164,
									"end": 1216,
									"name": "tag",
									"source": 13,
									"value": "40"
								},
								{
									"begin": 1164,
									"end": 1216,
									"name": "JUMPDEST",
									"source": 13
								},
								{
									"begin": 1239,
									"end": 1255,
									"name": "DUP3",
									"source": 13
								},
								{
									"begin": 1239,
									"end": 1255,
									"name": "MLOAD",
									"source": 13
								},
								{
									"begin": -1,
									"end": -1,
									"name": "PUSH",
									"source": -1,
									"value": "1"
								},
								{
									"begin": -1,
									"end": -1,
									"name": "PUSH",
									"source": -1,
									"value": "1"
								},
								{
									"begin": -1,
									"end": -1,
									"name": "PUSH",
									"source": -1,
									"value": "40"
								},
								{
									"begin": -1,
									"end": -1,
									"name": "SHL",
									"source": -1
								},
								{
									"begin": -1,
									"end": -1,
									"name": "SUB",
									"source": -1
								},
								{
									"begin": 1304,
									"end": 1318,
									"name": "DUP1",
									"source": 13
								},
								{
									"begin": 1304,
									"end": 1318,
									"name": "DUP3",
									"source": 13
								},
								{
									"begin": 1304,
									"end": 1318,
									"name": "GT",
									"source": 13
								},
								{
									"begin": 1301,
									"end": 1335,
									"name": "ISZERO",
									"source": 13
								},
								{
									"begin": 1301,
									"end": 1335,
									"name": "PUSH [tag]",
									"source": 13,
									"value": "41"
								},
								{
									"begin": 1301,
									"end": 1335,
									"name": "JUMPI",
									"source": 13
								},
								{
									"begin": 1331,
									"end": 1332,
									"name": "PUSH",
									"source": 13,
									"value": "0"
								},
								{
									"begin": 1328,
									"end": 1329,
									"name": "DUP1",
									"source": 13
								},
								{
									"begin": 1321,
									"end": 1333,
									"name": "REVERT",
									"source": 13
								},
								{
									"begin": 1301,
									"end": 1335,
									"name": "tag",
									"source": 13,
									"value": "41"
								},
								{
									"begin": 1301,
									"end": 1335,
									"name": "JUMPDEST",
									"source": 13
								},
								{
									"begin": 1354,
									"end": 1415,
									"name": "PUSH [tag]",
									"source": 13,
									"value": "42"
								},
								{
									"begin": 1407,
									"end": 1414,
									"name": "DUP7",
									"source": 13
								},
								{
									"begin": 1398,
									"end": 1404,
									"name": "DUP4",
									"source": 13
								},
								{
									"begin": 1387,
									"end": 1396,
									"name": "DUP8",
									"source": 13
								},
								{
									"begin": 1383,
									"end": 1405,
									"name": "ADD",
									"source": 13
								},
								{
									"begin": 1354,
									"end": 1415,
									"name": "PUSH [tag]",
									"source": 13,
									"value": "25"
								},
								{
									"begin": 1354,
									"end": 1415,
									"name": "JUMP",
									"source": 13,
									"value": "[in]"
								},
								{
									"begin": 1354,
									"end": 1415,
									"name": "tag",
									"source": 13,
									"value": "42"
								},
								{
									"begin": 1354,
									"end": 1415,
									"name": "JUMPDEST",
									"source": 13
								},
								{
									"begin": 1344,
									"end": 1415,
									"name": "SWAP4",
									"source": 13
								},
								{
									"begin": 1344,
									"end": 1415,
									"name": "POP",
									"source": 13
								},
								{
									"begin": 1461,
									"end": 1463,
									"name": "PUSH",
									"source": 13,
									"value": "20"
								},
								{
									"begin": 1450,
									"end": 1459,
									"name": "DUP6",
									"source": 13
								},
								{
									"begin": 1446,
									"end": 1464,
									"name": "ADD",
									"source": 13
								},
								{
									"begin": 1440,
									"end": 1465,
									"name": "MLOAD",
									"source": 13
								},
								{
									"begin": 1424,
									"end": 1465,
									"name": "SWAP2",
									"source": 13
								},
								{
									"begin": 1424,
									"end": 1465,
									"name": "POP",
									"source": 13
								},
								{
									"begin": 1490,
									"end": 1492,
									"name": "DUP1",
									"source": 13
								},
								{
									"begin": 1480,
									"end": 1488,
									"name": "DUP3",
									"source": 13
								},
								{
									"begin": 1477,
									"end": 1493,
									"name": "GT",
									"source": 13
								},
								{
									"begin": 1474,
									"end": 1510,
									"name": "ISZERO",
									"source": 13
								},
								{
									"begin": 1474,
									"end": 1510,
									"name": "PUSH [tag]",
									"source": 13,
									"value": "43"
								},
								{
									"begin": 1474,
									"end": 1510,
									"name": "JUMPI",
									"source": 13
								},
								{
									"begin": 1506,
									"end": 1507,
									"name": "PUSH",
									"source": 13,
									"value": "0"
								},
								{
									"begin": 1503,
									"end": 1504,
									"name": "DUP1",
									"source": 13
								},
								{
									"begin": 1496,
									"end": 1508,
									"name": "REVERT",
									"source": 13
								},
								{
									"begin": 1474,
									"end": 1510,
									"name": "tag",
									"source": 13,
									"value": "43"
								},
								{
									"begin": 1474,
									"end": 1510,
									"name": "JUMPDEST",
									"source": 13
								},
								{
									"begin": 1474,
									"end": 1510,
									"name": "POP",
									"source": 13
								},
								{
									"begin": 1529,
									"end": 1592,
									"name": "PUSH [tag]",
									"source": 13,
									"value": "44"
								},
								{
									"begin": 1584,
									"end": 1591,
									"name": "DUP6",
									"source": 13
								},
								{
									"begin": 1573,
									"end": 1581,
									"name": "DUP3",
									"source": 13
								},
								{
									"begin": 1562,
									"end": 1571,
									"name": "DUP7",
									"source": 13
								},
								{
									"begin": 1558,
									"end": 1582,
									"name": "ADD",
									"source": 13
								},
								{
									"begin": 1529,
									"end": 1592,
									"name": "PUSH [tag]",
									"source": 13,
									"value": "25"
								},
								{
									"begin": 1529,
									"end": 1592,
									"name": "JUMP",
									"source": 13,
									"value": "[in]"
								},
								{
									"begin": 1529,
									"end": 1592,
									"name": "tag",
									"source": 13,
									"value": "44"
								},
								{
									"begin": 1529,
									"end": 1592,
									"name": "JUMPDEST",
									"source": 13
								},
								{
									"begin": 1519,
									"end": 1592,
									"name": "SWAP2",
									"source": 13
								},
								{
									"begin": 1519,
									"end": 1592,
									"name": "POP",
									"source": 13
								},
								{
									"begin": 1519,
									"end": 1592,
									"name": "POP",
									"source": 13
								},
								{
									"begin": 1036,
									"end": 1598,
									"name": "SWAP3",
									"source": 13
								},
								{
									"begin": 1036,
									"end": 1598,
									"name": "POP",
									"source": 13
								},
								{
									"begin": 1036,
									"end": 1598,
									"name": "SWAP3",
									"source": 13
								},
								{
									"begin": 1036,
									"end": 1598,
									"name": "SWAP1",
									"source": 13
								},
								{
									"begin": 1036,
									"end": 1598,
									"name": "POP",
									"source": 13
								},
								{
									"begin": 1036,
									"end": 1598,
									"name": "JUMP",
									"source": 13,
									"value": "[out]"
								},
								{
									"begin": 1603,
									"end": 1983,
									"name": "tag",
									"source": 13,
									"value": "14"
								},
								{
									"begin": 1603,
									"end": 1983,
									"name": "JUMPDEST",
									"source": 13
								},
								{
									"begin": 1682,
									"end": 1683,
									"name": "PUSH",
									"source": 13,
									"value": "1"
								},
								{
									"begin": 1678,
									"end": 1690,
									"name": "DUP2",
									"source": 13
								},
								{
									"begin": 1678,
									"end": 1690,
									"name": "DUP2",
									"source": 13
								},
								{
									"begin": 1678,
									"end": 1690,
									"name": "SHR",
									"source": 13
								},
								{
									"begin": 1678,
									"end": 1690,
									"name": "SWAP1",
									"source": 13
								},
								{
									"begin": 1725,
									"end": 1737,
									"name": "DUP3",
									"source": 13
								},
								{
									"begin": 1725,
									"end": 1737,
									"name": "AND",
									"source": 13
								},
								{
									"begin": 1725,
									"end": 1737,
									"name": "DUP1",
									"source": 13
								},
								{
									"begin": 1746,
									"end": 1807,
									"name": "PUSH [tag]",
									"source": 13,
									"value": "46"
								},
								{
									"begin": 1746,
									"end": 1807,
									"name": "JUMPI",
									"source": 13
								},
								{
									"begin": 1800,
									"end": 1804,
									"name": "PUSH",
									"source": 13,
									"value": "7F"
								},
								{
									"begin": 1792,
									"end": 1798,
									"name": "DUP3",
									"source": 13
								},
								{
									"begin": 1788,
									"end": 1805,
									"name": "AND",
									"source": 13
								},
								{
									"begin": 1778,
									"end": 1805,
									"name": "SWAP2",
									"source": 13
								},
								{
									"begin": 1778,
									"end": 1805,
									"name": "POP",
									"source": 13
								},
								{
									"begin": 1746,
									"end": 1807,
									"name": "tag",
									"source": 13,
									"value": "46"
								},
								{
									"begin": 1746,
									"end": 1807,
									"name": "JUMPDEST",
									"source": 13
								},
								{
									"begin": 1853,
									"end": 1855,
									"name": "PUSH",
									"source": 13,
									"value": "20"
								},
								{
									"begin": 1845,
									"end": 1851,
									"name": "DUP3",
									"source": 13
								},
								{
									"begin": 1842,
									"end": 1856,
									"name": "LT",
									"source": 13
								},
								{
									"begin": 1822,
									"end": 1840,
									"name": "DUP2",
									"source": 13
								},
								{
									"begin": 1819,
									"end": 1857,
									"name": "EQ",
									"source": 13
								},
								{
									"begin": 1816,
									"end": 1977,
									"name": "ISZERO",
									"source": 13
								},
								{
									"begin": 1816,
									"end": 1977,
									"name": "PUSH [tag]",
									"source": 13,
									"value": "47"
								},
								{
									"begin": 1816,
									"end": 1977,
									"name": "JUMPI",
									"source": 13
								},
								{
									"begin": 1899,
									"end": 1909,
									"name": "PUSH",
									"source": 13,
									"value": "4E487B71"
								},
								{
									"begin": 1894,
									"end": 1897,
									"name": "PUSH",
									"source": 13,
									"value": "E0"
								},
								{
									"begin": 1890,
									"end": 1910,
									"name": "SHL",
									"source": 13
								},
								{
									"begin": 1887,
									"end": 1888,
									"name": "PUSH",
									"source": 13,
									"value": "0"
								},
								{
									"begin": 1880,
									"end": 1911,
									"name": "MSTORE",
									"source": 13
								},
								{
									"begin": 1934,
									"end": 1938,
									"name": "PUSH",
									"source": 13,
									"value": "22"
								},
								{
									"begin": 1931,
									"end": 1932,
									"name": "PUSH",
									"source": 13,
									"value": "4"
								},
								{
									"begin": 1924,
									"end": 1939,
									"name": "MSTORE",
									"source": 13
								},
								{
									"begin": 1962,
									"end": 1966,
									"name": "PUSH",
									"source": 13,
									"value": "24"
								},
								{
									"begin": 1959,
									"end": 1960,
									"name": "PUSH",
									"source": 13,
									"value": "0"
								},
								{
									"begin": 1952,
									"end": 1967,
									"name": "REVERT",
									"source": 13
								},
								{
									"begin": 1816,
									"end": 1977,
									"name": "tag",
									"source": 13,
									"value": "47"
								},
								{
									"begin": 1816,
									"end": 1977,
									"name": "JUMPDEST",
									"source": 13
								},
								{
									"begin": 1816,
									"end": 1977,
									"name": "POP",
									"source": 13
								},
								{
									"begin": 1603,
									"end": 1983,
									"name": "SWAP2",
									"source": 13
								},
								{
									"begin": 1603,
									"end": 1983,
									"name": "SWAP1",
									"source": 13
								},
								{
									"begin": 1603,
									"end": 1983,
									"name": "POP",
									"source": 13
								},
								{
									"begin": 1603,
									"end": 1983,
									"name": "JUMP",
									"source": 13,
									"value": "[out]"
								},
								{
									"begin": 1603,
									"end": 1983,
									"name": "tag",
									"source": 13,
									"value": "26"
								},
								{
									"begin": 1603,
									"end": 1983,
									"name": "JUMPDEST",
									"source": 13
								},
								{
									"begin": 1708,
									"end": 21823,
									"name": "PUSH #[$]",
									"source": 12,
									"value": "0000000000000000000000000000000000000000000000000000000000000000"
								},
								{
									"begin": 1708,
									"end": 21823,
									"name": "DUP1",
									"source": 12
								},
								{
									"begin": 1708,
									"end": 21823,
									"name": "PUSH [$]",
									"source": 12,
									"value": "0000000000000000000000000000000000000000000000000000000000000000"
								},
								{
									"begin": 1708,
									"end": 21823,
									"name": "PUSH",
									"source": 12,
									"value": "0"
								},
								{
									"begin": 1708,
									"end": 21823,
									"name": "CODECOPY",
									"source": 12
								},
								{
									"begin": 1708,
									"end": 21823,
									"name": "PUSH",
									"source": 12,
									"value": "0"
								},
								{
									"begin": 1708,
									"end": 21823,
									"name": "RETURN",
									"source": 12
								}
							],
							".data": {
								"0": {
									".auxdata": "a2646970667358221220340639a51a4acb793db0b70a664b822ec286f6d1f20a48ffbc513a8664f4a81e64736f6c63430008090033",
									".code": [
										{
											"begin": 1708,
											"end": 21823,
											"name": "PUSH",
											"source": 12,
											"value": "80"
										},
										{
											"begin": 1708,
											"end": 21823,
											"name": "PUSH",
											"source": 12,
											"value": "40"
										},
										{
											"begin": 1708,
											"end": 21823,
											"name": "MSTORE",
											"source": 12
										},
										{
											"begin": 1708,
											"end": 21823,
											"name": "CALLVALUE",
											"source": 12
										},
										{
											"begin": 1708,
											"end": 21823,
											"name": "DUP1",
											"source": 12
										},
										{
											"begin": 1708,
											"end": 21823,
											"name": "ISZERO",
											"source": 12
										},
										{
											"begin": 1708,
											"end": 21823,
											"name": "PUSH [tag]",
											"source": 12,
											"value": "1"
										},
										{
											"begin": 1708,
											"end": 21823,
											"name": "JUMPI",
											"source": 12
										},
										{
											"begin": 1708,
											"end": 21823,
											"name": "PUSH",
											"source": 12,
											"value": "0"
										},
										{
											"begin": 1708,
											"end": 21823,
											"name": "DUP1",
											"source": 12
										},
										{
											"begin": 1708,
											"end": 21823,
											"name": "REVERT",
											"source": 12
										},
										{
											"begin": 1708,
											"end": 21823,
											"name": "tag",
											"source": 12,
											"value": "1"
										},
										{
											"begin": 1708,
											"end": 21823,
											"name": "JUMPDEST",
											"source": 12
										},
										{
											"begin": 1708,
											"end": 21823,
											"name": "POP",
											"source": 12
										},
										{
											"begin": 1708,
											"end": 21823,
											"name": "PUSH",
											"source": 12,
											"value": "4"
										},
										{
											"begin": 1708,
											"end": 21823,
											"name": "CALLDATASIZE",
											"source": 12
										},
										{
											"begin": 1708,
											"end": 21823,
											"name": "LT",
											"source": 12
										},
										{
											"begin": 1708,
											"end": 21823,
											"name": "PUSH [tag]",
											"source": 12,
											"value": "2"
										},
										{
											"begin": 1708,
											"end": 21823,
											"name": "JUMPI",
											"source": 12
										},
										{
											"begin": 1708,
											"end": 21823,
											"name": "PUSH",
											"source": 12,
											"value": "0"
										},
										{
											"begin": 1708,
											"end": 21823,
											"name": "CALLDATALOAD",
											"source": 12
										},
										{
											"begin": 1708,
											"end": 21823,
											"name": "PUSH",
											"source": 12,
											"value": "E0"
										},
										{
											"begin": 1708,
											"end": 21823,
											"name": "SHR",
											"source": 12
										},
										{
											"begin": 1708,
											"end": 21823,
											"name": "DUP1",
											"source": 12
										},
										{
											"begin": 1708,
											"end": 21823,
											"name": "PUSH",
											"source": 12,
											"value": "6352211E"
										},
										{
											"begin": 1708,
											"end": 21823,
											"name": "GT",
											"source": 12
										},
										{
											"begin": 1708,
											"end": 21823,
											"name": "PUSH [tag]",
											"source": 12,
											"value": "17"
										},
										{
											"begin": 1708,
											"end": 21823,
											"name": "JUMPI",
											"source": 12
										},
										{
											"begin": 1708,
											"end": 21823,
											"name": "DUP1",
											"source": 12
										},
										{
											"begin": 1708,
											"end": 21823,
											"name": "PUSH",
											"source": 12,
											"value": "A22CB465"
										},
										{
											"begin": 1708,
											"end": 21823,
											"name": "GT",
											"source": 12
										},
										{
											"begin": 1708,
											"end": 21823,
											"name": "PUSH [tag]",
											"source": 12,
											"value": "18"
										},
										{
											"begin": 1708,
											"end": 21823,
											"name": "JUMPI",
											"source": 12
										},
										{
											"begin": 1708,
											"end": 21823,
											"name": "DUP1",
											"source": 12
										},
										{
											"begin": 1708,
											"end": 21823,
											"name": "PUSH",
											"source": 12,
											"value": "A22CB465"
										},
										{
											"begin": 1708,
											"end": 21823,
											"name": "EQ",
											"source": 12
										},
										{
											"begin": 1708,
											"end": 21823,
											"name": "PUSH [tag]",
											"source": 12,
											"value": "13"
										},
										{
											"begin": 1708,
											"end": 21823,
											"name": "JUMPI",
											"source": 12
										},
										{
											"begin": 1708,
											"end": 21823,
											"name": "DUP1",
											"source": 12
										},
										{
											"begin": 1708,
											"end": 21823,
											"name": "PUSH",
											"source": 12,
											"value": "B88D4FDE"
										},
										{
											"begin": 1708,
											"end": 21823,
											"name": "EQ",
											"source": 12
										},
										{
											"begin": 1708,
											"end": 21823,
											"name": "PUSH [tag]",
											"source": 12,
											"value": "14"
										},
										{
											"begin": 1708,
											"end": 21823,
											"name": "JUMPI",
											"source": 12
										},
										{
											"begin": 1708,
											"end": 21823,
											"name": "DUP1",
											"source": 12
										},
										{
											"begin": 1708,
											"end": 21823,
											"name": "PUSH",
											"source": 12,
											"value": "C87B56DD"
										},
										{
											"begin": 1708,
											"end": 21823,
											"name": "EQ",
											"source": 12
										},
										{
											"begin": 1708,
											"end": 21823,
											"name": "PUSH [tag]",
											"source": 12,
											"value": "15"
										},
										{
											"begin": 1708,
											"end": 21823,
											"name": "JUMPI",
											"source": 12
										},
										{
											"begin": 1708,
											"end": 21823,
											"name": "DUP1",
											"source": 12
										},
										{
											"begin": 1708,
											"end": 21823,
											"name": "PUSH",
											"source": 12,
											"value": "E985E9C5"
										},
										{
											"begin": 1708,
											"end": 21823,
											"name": "EQ",
											"source": 12
										},
										{
											"begin": 1708,
											"end": 21823,
											"name": "PUSH [tag]",
											"source": 12,
											"value": "16"
										},
										{
											"begin": 1708,
											"end": 21823,
											"name": "JUMPI",
											"source": 12
										},
										{
											"begin": 1708,
											"end": 21823,
											"name": "PUSH",
											"source": 12,
											"value": "0"
										},
										{
											"begin": 1708,
											"end": 21823,
											"name": "DUP1",
											"source": 12
										},
										{
											"begin": 1708,
											"end": 21823,
											"name": "REVERT",
											"source": 12
										},
										{
											"begin": 1708,
											"end": 21823,
											"name": "tag",
											"source": 12,
											"value": "18"
										},
										{
											"begin": 1708,
											"end": 21823,
											"name": "JUMPDEST",
											"source": 12
										},
										{
											"begin": 1708,
											"end": 21823,
											"name": "DUP1",
											"source": 12
										},
										{
											"begin": 1708,
											"end": 21823,
											"name": "PUSH",
											"source": 12,
											"value": "6352211E"
										},
										{
											"begin": 1708,
											"end": 21823,
											"name": "EQ",
											"source": 12
										},
										{
											"begin": 1708,
											"end": 21823,
											"name": "PUSH [tag]",
											"source": 12,
											"value": "10"
										},
										{
											"begin": 1708,
											"end": 21823,
											"name": "JUMPI",
											"source": 12
										},
										{
											"begin": 1708,
											"end": 21823,
											"name": "DUP1",
											"source": 12
										},
										{
											"begin": 1708,
											"end": 21823,
											"name": "PUSH",
											"source": 12,
											"value": "70A08231"
										},
										{
											"begin": 1708,
											"end": 21823,
											"name": "EQ",
											"source": 12
										},
										{
											"begin": 1708,
											"end": 21823,
											"name": "PUSH [tag]",
											"source": 12,
											"value": "11"
										},
										{
											"begin": 1708,
											"end": 21823,
											"name": "JUMPI",
											"source": 12
										},
										{
											"begin": 1708,
											"end": 21823,
											"name": "DUP1",
											"source": 12
										},
										{
											"begin": 1708,
											"end": 21823,
											"name": "PUSH",
											"source": 12,
											"value": "95D89B41"
										},
										{
											"begin": 1708,
											"end": 21823,
											"name": "EQ",
											"source": 12
										},
										{
											"begin": 1708,
											"end": 21823,
											"name": "PUSH [tag]",
											"source": 12,
											"value": "12"
										},
										{
											"begin": 1708,
											"end": 21823,
											"name": "JUMPI",
											"source": 12
										},
										{
											"begin": 1708,
											"end": 21823,
											"name": "PUSH",
											"source": 12,
											"value": "0"
										},
										{
											"begin": 1708,
											"end": 21823,
											"name": "DUP1",
											"source": 12
										},
										{
											"begin": 1708,
											"end": 21823,
											"name": "REVERT",
											"source": 12
										},
										{
											"begin": 1708,
											"end": 21823,
											"name": "tag",
											"source": 12,
											"value": "17"
										},
										{
											"begin": 1708,
											"end": 21823,
											"name": "JUMPDEST",
											"source": 12
										},
										{
											"begin": 1708,
											"end": 21823,
											"name": "DUP1",
											"source": 12
										},
										{
											"begin": 1708,
											"end": 21823,
											"name": "PUSH",
											"source": 12,
											"value": "95EA7B3"
										},
										{
											"begin": 1708,
											"end": 21823,
											"name": "GT",
											"source": 12
										},
										{
											"begin": 1708,
											"end": 21823,
											"name": "PUSH [tag]",
											"source": 12,
											"value": "19"
										},
										{
											"begin": 1708,
											"end": 21823,
											"name": "JUMPI",
											"source": 12
										},
										{
											"begin": 1708,
											"end": 21823,
											"name": "DUP1",
											"source": 12
										},
										{
											"begin": 1708,
											"end": 21823,
											"name": "PUSH",
											"source": 12,
											"value": "95EA7B3"
										},
										{
											"begin": 1708,
											"end": 21823,
											"name": "EQ",
											"source": 12
										},
										{
											"begin": 1708,
											"end": 21823,
											"name": "PUSH [tag]",
											"source": 12,
											"value": "6"
										},
										{
											"begin": 1708,
											"end": 21823,
											"name": "JUMPI",
											"source": 12
										},
										{
											"begin": 1708,
											"end": 21823,
											"name": "DUP1",
											"source": 12
										},
										{
											"begin": 1708,
											"end": 21823,
											"name": "PUSH",
											"source": 12,
											"value": "18160DDD"
										},
										{
											"begin": 1708,
											"end": 21823,
											"name": "EQ",
											"source": 12
										},
										{
											"begin": 1708,
											"end": 21823,
											"name": "PUSH [tag]",
											"source": 12,
											"value": "7"
										},
										{
											"begin": 1708,
											"end": 21823,
											"name": "JUMPI",
											"source": 12
										},
										{
											"begin": 1708,
											"end": 21823,
											"name": "DUP1",
											"source": 12
										},
										{
											"begin": 1708,
											"end": 21823,
											"name": "PUSH",
											"source": 12,
											"value": "23B872DD"
										},
										{
											"begin": 1708,
											"end": 21823,
											"name": "EQ",
											"source": 12
										},
										{
											"begin": 1708,
											"end": 21823,
											"name": "PUSH [tag]",
											"source": 12,
											"value": "8"
										},
										{
											"begin": 1708,
											"end": 21823,
											"name": "JUMPI",
											"source": 12
										},
										{
											"begin": 1708,
											"end": 21823,
											"name": "DUP1",
											"source": 12
										},
										{
											"begin": 1708,
											"end": 21823,
											"name": "PUSH",
											"source": 12,
											"value": "42842E0E"
										},
										{
											"begin": 1708,
											"end": 21823,
											"name": "EQ",
											"source": 12
										},
										{
											"begin": 1708,
											"end": 21823,
											"name": "PUSH [tag]",
											"source": 12,
											"value": "9"
										},
										{
											"begin": 1708,
											"end": 21823,
											"name": "JUMPI",
											"source": 12
										},
										{
											"begin": 1708,
											"end": 21823,
											"name": "PUSH",
											"source": 12,
											"value": "0"
										},
										{
											"begin": 1708,
											"end": 21823,
											"name": "DUP1",
											"source": 12
										},
										{
											"begin": 1708,
											"end": 21823,
											"name": "REVERT",
											"source": 12
										},
										{
											"begin": 1708,
											"end": 21823,
											"name": "tag",
											"source": 12,
											"value": "19"
										},
										{
											"begin": 1708,
											"end": 21823,
											"name": "JUMPDEST",
											"source": 12
										},
										{
											"begin": 1708,
											"end": 21823,
											"name": "DUP1",
											"source": 12
										},
										{
											"begin": 1708,
											"end": 21823,
											"name": "PUSH",
											"source": 12,
											"value": "1FFC9A7"
										},
										{
											"begin": 1708,
											"end": 21823,
											"name": "EQ",
											"source": 12
										},
										{
											"begin": 1708,
											"end": 21823,
											"name": "PUSH [tag]",
											"source": 12,
											"value": "3"
										},
										{
											"begin": 1708,
											"end": 21823,
											"name": "JUMPI",
											"source": 12
										},
										{
											"begin": 1708,
											"end": 21823,
											"name": "DUP1",
											"source": 12
										},
										{
											"begin": 1708,
											"end": 21823,
											"name": "PUSH",
											"source": 12,
											"value": "6FDDE03"
										},
										{
											"begin": 1708,
											"end": 21823,
											"name": "EQ",
											"source": 12
										},
										{
											"begin": 1708,
											"end": 21823,
											"name": "PUSH [tag]",
											"source": 12,
											"value": "4"
										},
										{
											"begin": 1708,
											"end": 21823,
											"name": "JUMPI",
											"source": 12
										},
										{
											"begin": 1708,
											"end": 21823,
											"name": "DUP1",
											"source": 12
										},
										{
											"begin": 1708,
											"end": 21823,
											"name": "PUSH",
											"source": 12,
											"value": "81812FC"
										},
										{
											"begin": 1708,
											"end": 21823,
											"name": "EQ",
											"source": 12
										},
										{
											"begin": 1708,
											"end": 21823,
											"name": "PUSH [tag]",
											"source": 12,
											"value": "5"
										},
										{
											"begin": 1708,
											"end": 21823,
											"name": "JUMPI",
											"source": 12
										},
										{
											"begin": 1708,
											"end": 21823,
											"name": "tag",
											"source": 12,
											"value": "2"
										},
										{
											"begin": 1708,
											"end": 21823,
											"name": "JUMPDEST",
											"source": 12
										},
										{
											"begin": 1708,
											"end": 21823,
											"name": "PUSH",
											"source": 12,
											"value": "0"
										},
										{
											"begin": 1708,
											"end": 21823,
											"name": "DUP1",
											"source": 12
										},
										{
											"begin": 1708,
											"end": 21823,
											"name": "REVERT",
											"source": 12
										},
										{
											"begin": 4843,
											"end": 5143,
											"name": "tag",
											"source": 12,
											"value": "3"
										},
										{
											"begin": 4843,
											"end": 5143,
											"name": "JUMPDEST",
											"source": 12
										},
										{
											"begin": 4843,
											"end": 5143,
											"name": "PUSH [tag]",
											"source": 12,
											"value": "20"
										},
										{
											"begin": 4843,
											"end": 5143,
											"name": "PUSH [tag]",
											"source": 12,
											"value": "21"
										},
										{
											"begin": 4843,
											"end": 5143,
											"name": "CALLDATASIZE",
											"source": 12
										},
										{
											"begin": 4843,
											"end": 5143,
											"name": "PUSH",
											"source": 12,
											"value": "4"
										},
										{
											"begin": 4843,
											"end": 5143,
											"name": "PUSH [tag]",
											"source": 12,
											"value": "22"
										},
										{
											"begin": 4843,
											"end": 5143,
											"name": "JUMP",
											"source": 12,
											"value": "[in]"
										},
										{
											"begin": 4843,
											"end": 5143,
											"name": "tag",
											"source": 12,
											"value": "21"
										},
										{
											"begin": 4843,
											"end": 5143,
											"name": "JUMPDEST",
											"source": 12
										},
										{
											"begin": 4843,
											"end": 5143,
											"name": "PUSH [tag]",
											"source": 12,
											"value": "23"
										},
										{
											"begin": 4843,
											"end": 5143,
											"name": "JUMP",
											"source": 12,
											"value": "[in]"
										},
										{
											"begin": 4843,
											"end": 5143,
											"name": "tag",
											"source": 12,
											"value": "20"
										},
										{
											"begin": 4843,
											"end": 5143,
											"name": "JUMPDEST",
											"source": 12
										},
										{
											"begin": 4843,
											"end": 5143,
											"name": "PUSH",
											"source": 12,
											"value": "40"
										},
										{
											"begin": 4843,
											"end": 5143,
											"name": "MLOAD",
											"source": 12
										},
										{
											"begin": 565,
											"end": 579,
											"name": "SWAP1",
											"source": 13
										},
										{
											"begin": 565,
											"end": 579,
											"name": "ISZERO",
											"source": 13
										},
										{
											"begin": 558,
											"end": 580,
											"name": "ISZERO",
											"source": 13
										},
										{
											"begin": 540,
											"end": 581,
											"name": "DUP2",
											"source": 13
										},
										{
											"begin": 540,
											"end": 581,
											"name": "MSTORE",
											"source": 13
										},
										{
											"begin": 528,
											"end": 530,
											"name": "PUSH",
											"source": 13,
											"value": "20"
										},
										{
											"begin": 513,
											"end": 531,
											"name": "ADD",
											"source": 13
										},
										{
											"begin": 4843,
											"end": 5143,
											"name": "tag",
											"source": 12,
											"value": "24"
										},
										{
											"begin": 4843,
											"end": 5143,
											"name": "JUMPDEST",
											"source": 12
										},
										{
											"begin": 4843,
											"end": 5143,
											"name": "PUSH",
											"source": 12,
											"value": "40"
										},
										{
											"begin": 4843,
											"end": 5143,
											"name": "MLOAD",
											"source": 12
										},
										{
											"begin": 4843,
											"end": 5143,
											"name": "DUP1",
											"source": 12
										},
										{
											"begin": 4843,
											"end": 5143,
											"name": "SWAP2",
											"source": 12
										},
										{
											"begin": 4843,
											"end": 5143,
											"name": "SUB",
											"source": 12
										},
										{
											"begin": 4843,
											"end": 5143,
											"name": "SWAP1",
											"source": 12
										},
										{
											"begin": 4843,
											"end": 5143,
											"name": "RETURN",
											"source": 12
										},
										{
											"begin": 8139,
											"end": 8237,
											"name": "tag",
											"source": 12,
											"value": "4"
										},
										{
											"begin": 8139,
											"end": 8237,
											"name": "JUMPDEST",
											"source": 12
										},
										{
											"begin": 8139,
											"end": 8237,
											"name": "PUSH [tag]",
											"source": 12,
											"value": "26"
										},
										{
											"begin": 8139,
											"end": 8237,
											"name": "PUSH [tag]",
											"source": 12,
											"value": "27"
										},
										{
											"begin": 8139,
											"end": 8237,
											"name": "JUMP",
											"source": 12,
											"value": "[in]"
										},
										{
											"begin": 8139,
											"end": 8237,
											"name": "tag",
											"source": 12,
											"value": "26"
										},
										{
											"begin": 8139,
											"end": 8237,
											"name": "JUMPDEST",
											"source": 12
										},
										{
											"begin": 8139,
											"end": 8237,
											"name": "PUSH",
											"source": 12,
											"value": "40"
										},
										{
											"begin": 8139,
											"end": 8237,
											"name": "MLOAD",
											"source": 12
										},
										{
											"begin": 8139,
											"end": 8237,
											"name": "PUSH [tag]",
											"source": 12,
											"value": "24"
										},
										{
											"begin": 8139,
											"end": 8237,
											"name": "SWAP2",
											"source": 12
										},
										{
											"begin": 8139,
											"end": 8237,
											"name": "SWAP1",
											"source": 12
										},
										{
											"begin": 8139,
											"end": 8237,
											"name": "PUSH [tag]",
											"source": 12,
											"value": "29"
										},
										{
											"begin": 8139,
											"end": 8237,
											"name": "JUMP",
											"source": 12,
											"value": "[in]"
										},
										{
											"begin": 9595,
											"end": 9795,
											"name": "tag",
											"source": 12,
											"value": "5"
										},
										{
											"begin": 9595,
											"end": 9795,
											"name": "JUMPDEST",
											"source": 12
										},
										{
											"begin": 9595,
											"end": 9795,
											"name": "PUSH [tag]",
											"source": 12,
											"value": "30"
										},
										{
											"begin": 9595,
											"end": 9795,
											"name": "PUSH [tag]",
											"source": 12,
											"value": "31"
										},
										{
											"begin": 9595,
											"end": 9795,
											"name": "CALLDATASIZE",
											"source": 12
										},
										{
											"begin": 9595,
											"end": 9795,
											"name": "PUSH",
											"source": 12,
											"value": "4"
										},
										{
											"begin": 9595,
											"end": 9795,
											"name": "PUSH [tag]",
											"source": 12,
											"value": "32"
										},
										{
											"begin": 9595,
											"end": 9795,
											"name": "JUMP",
											"source": 12,
											"value": "[in]"
										},
										{
											"begin": 9595,
											"end": 9795,
											"name": "tag",
											"source": 12,
											"value": "31"
										},
										{
											"begin": 9595,
											"end": 9795,
											"name": "JUMPDEST",
											"source": 12
										},
										{
											"begin": 9595,
											"end": 9795,
											"name": "PUSH [tag]",
											"source": 12,
											"value": "33"
										},
										{
											"begin": 9595,
											"end": 9795,
											"name": "JUMP",
											"source": 12,
											"value": "[in]"
										},
										{
											"begin": 9595,
											"end": 9795,
											"name": "tag",
											"source": 12,
											"value": "30"
										},
										{
											"begin": 9595,
											"end": 9795,
											"name": "JUMPDEST",
											"source": 12
										},
										{
											"begin": 9595,
											"end": 9795,
											"name": "PUSH",
											"source": 12,
											"value": "40"
										},
										{
											"begin": 9595,
											"end": 9795,
											"name": "MLOAD",
											"source": 12
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "A0"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SHL",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SUB",
											"source": -1
										},
										{
											"begin": 1692,
											"end": 1724,
											"name": "SWAP1",
											"source": 13
										},
										{
											"begin": 1692,
											"end": 1724,
											"name": "SWAP2",
											"source": 13
										},
										{
											"begin": 1692,
											"end": 1724,
											"name": "AND",
											"source": 13
										},
										{
											"begin": 1674,
											"end": 1725,
											"name": "DUP2",
											"source": 13
										},
										{
											"begin": 1674,
											"end": 1725,
											"name": "MSTORE",
											"source": 13
										},
										{
											"begin": 1662,
											"end": 1664,
											"name": "PUSH",
											"source": 13,
											"value": "20"
										},
										{
											"begin": 1647,
											"end": 1665,
											"name": "ADD",
											"source": 13
										},
										{
											"begin": 9595,
											"end": 9795,
											"name": "PUSH [tag]",
											"source": 12,
											"value": "24"
										},
										{
											"begin": 1528,
											"end": 1731,
											"name": "JUMP",
											"source": 13
										},
										{
											"begin": 9172,
											"end": 9534,
											"name": "tag",
											"source": 12,
											"value": "6"
										},
										{
											"begin": 9172,
											"end": 9534,
											"name": "JUMPDEST",
											"source": 12
										},
										{
											"begin": 9172,
											"end": 9534,
											"name": "PUSH [tag]",
											"source": 12,
											"value": "36"
										},
										{
											"begin": 9172,
											"end": 9534,
											"name": "PUSH [tag]",
											"source": 12,
											"value": "37"
										},
										{
											"begin": 9172,
											"end": 9534,
											"name": "CALLDATASIZE",
											"source": 12
										},
										{
											"begin": 9172,
											"end": 9534,
											"name": "PUSH",
											"source": 12,
											"value": "4"
										},
										{
											"begin": 9172,
											"end": 9534,
											"name": "PUSH [tag]",
											"source": 12,
											"value": "38"
										},
										{
											"begin": 9172,
											"end": 9534,
											"name": "JUMP",
											"source": 12,
											"value": "[in]"
										},
										{
											"begin": 9172,
											"end": 9534,
											"name": "tag",
											"source": 12,
											"value": "37"
										},
										{
											"begin": 9172,
											"end": 9534,
											"name": "JUMPDEST",
											"source": 12
										},
										{
											"begin": 9172,
											"end": 9534,
											"name": "PUSH [tag]",
											"source": 12,
											"value": "39"
										},
										{
											"begin": 9172,
											"end": 9534,
											"name": "JUMP",
											"source": 12,
											"value": "[in]"
										},
										{
											"begin": 9172,
											"end": 9534,
											"name": "tag",
											"source": 12,
											"value": "36"
										},
										{
											"begin": 9172,
											"end": 9534,
											"name": "JUMPDEST",
											"source": 12
										},
										{
											"begin": 9172,
											"end": 9534,
											"name": "STOP",
											"source": 12
										},
										{
											"begin": 4114,
											"end": 4411,
											"name": "tag",
											"source": 12,
											"value": "7"
										},
										{
											"begin": 4114,
											"end": 4411,
											"name": "JUMPDEST",
											"source": 12
										},
										{
											"begin": 4364,
											"end": 4376,
											"name": "PUSH",
											"source": 12,
											"value": "1"
										},
										{
											"begin": 4364,
											"end": 4376,
											"name": "SLOAD",
											"source": 12
										},
										{
											"begin": 4158,
											"end": 4165,
											"name": "PUSH",
											"source": 12,
											"value": "0"
										},
										{
											"begin": 4348,
											"end": 4361,
											"name": "SLOAD",
											"source": 12
										},
										{
											"begin": 4348,
											"end": 4376,
											"name": "SUB",
											"source": 12
										},
										{
											"begin": 4114,
											"end": 4411,
											"name": "tag",
											"source": 12,
											"value": "40"
										},
										{
											"begin": 4114,
											"end": 4411,
											"name": "JUMPDEST",
											"source": 12
										},
										{
											"begin": 4114,
											"end": 4411,
											"name": "PUSH",
											"source": 12,
											"value": "40"
										},
										{
											"begin": 4114,
											"end": 4411,
											"name": "MLOAD",
											"source": 12
										},
										{
											"begin": 2319,
											"end": 2344,
											"name": "SWAP1",
											"source": 13
										},
										{
											"begin": 2319,
											"end": 2344,
											"name": "DUP2",
											"source": 13
										},
										{
											"begin": 2319,
											"end": 2344,
											"name": "MSTORE",
											"source": 13
										},
										{
											"begin": 2307,
											"end": 2309,
											"name": "PUSH",
											"source": 13,
											"value": "20"
										},
										{
											"begin": 2292,
											"end": 2310,
											"name": "ADD",
											"source": 13
										},
										{
											"begin": 4114,
											"end": 4411,
											"name": "PUSH [tag]",
											"source": 12,
											"value": "24"
										},
										{
											"begin": 2173,
											"end": 2350,
											"name": "JUMP",
											"source": 13
										},
										{
											"begin": 10426,
											"end": 10590,
											"name": "tag",
											"source": 12,
											"value": "8"
										},
										{
											"begin": 10426,
											"end": 10590,
											"name": "JUMPDEST",
											"source": 12
										},
										{
											"begin": 10426,
											"end": 10590,
											"name": "PUSH [tag]",
											"source": 12,
											"value": "36"
										},
										{
											"begin": 10426,
											"end": 10590,
											"name": "PUSH [tag]",
											"source": 12,
											"value": "45"
										},
										{
											"begin": 10426,
											"end": 10590,
											"name": "CALLDATASIZE",
											"source": 12
										},
										{
											"begin": 10426,
											"end": 10590,
											"name": "PUSH",
											"source": 12,
											"value": "4"
										},
										{
											"begin": 10426,
											"end": 10590,
											"name": "PUSH [tag]",
											"source": 12,
											"value": "46"
										},
										{
											"begin": 10426,
											"end": 10590,
											"name": "JUMP",
											"source": 12,
											"value": "[in]"
										},
										{
											"begin": 10426,
											"end": 10590,
											"name": "tag",
											"source": 12,
											"value": "45"
										},
										{
											"begin": 10426,
											"end": 10590,
											"name": "JUMPDEST",
											"source": 12
										},
										{
											"begin": 10426,
											"end": 10590,
											"name": "PUSH [tag]",
											"source": 12,
											"value": "47"
										},
										{
											"begin": 10426,
											"end": 10590,
											"name": "JUMP",
											"source": 12,
											"value": "[in]"
										},
										{
											"begin": 10656,
											"end": 10835,
											"name": "tag",
											"source": 12,
											"value": "9"
										},
										{
											"begin": 10656,
											"end": 10835,
											"name": "JUMPDEST",
											"source": 12
										},
										{
											"begin": 10656,
											"end": 10835,
											"name": "PUSH [tag]",
											"source": 12,
											"value": "36"
										},
										{
											"begin": 10656,
											"end": 10835,
											"name": "PUSH [tag]",
											"source": 12,
											"value": "49"
										},
										{
											"begin": 10656,
											"end": 10835,
											"name": "CALLDATASIZE",
											"source": 12
										},
										{
											"begin": 10656,
											"end": 10835,
											"name": "PUSH",
											"source": 12,
											"value": "4"
										},
										{
											"begin": 10656,
											"end": 10835,
											"name": "PUSH [tag]",
											"source": 12,
											"value": "46"
										},
										{
											"begin": 10656,
											"end": 10835,
											"name": "JUMP",
											"source": 12,
											"value": "[in]"
										},
										{
											"begin": 10656,
											"end": 10835,
											"name": "tag",
											"source": 12,
											"value": "49"
										},
										{
											"begin": 10656,
											"end": 10835,
											"name": "JUMPDEST",
											"source": 12
										},
										{
											"begin": 10656,
											"end": 10835,
											"name": "PUSH [tag]",
											"source": 12,
											"value": "50"
										},
										{
											"begin": 10656,
											"end": 10835,
											"name": "JUMP",
											"source": 12,
											"value": "[in]"
										},
										{
											"begin": 7955,
											"end": 8077,
											"name": "tag",
											"source": 12,
											"value": "10"
										},
										{
											"begin": 7955,
											"end": 8077,
											"name": "JUMPDEST",
											"source": 12
										},
										{
											"begin": 7955,
											"end": 8077,
											"name": "PUSH [tag]",
											"source": 12,
											"value": "30"
										},
										{
											"begin": 7955,
											"end": 8077,
											"name": "PUSH [tag]",
											"source": 12,
											"value": "52"
										},
										{
											"begin": 7955,
											"end": 8077,
											"name": "CALLDATASIZE",
											"source": 12
										},
										{
											"begin": 7955,
											"end": 8077,
											"name": "PUSH",
											"source": 12,
											"value": "4"
										},
										{
											"begin": 7955,
											"end": 8077,
											"name": "PUSH [tag]",
											"source": 12,
											"value": "32"
										},
										{
											"begin": 7955,
											"end": 8077,
											"name": "JUMP",
											"source": 12,
											"value": "[in]"
										},
										{
											"begin": 7955,
											"end": 8077,
											"name": "tag",
											"source": 12,
											"value": "52"
										},
										{
											"begin": 7955,
											"end": 8077,
											"name": "JUMPDEST",
											"source": 12
										},
										{
											"begin": 7955,
											"end": 8077,
											"name": "PUSH [tag]",
											"source": 12,
											"value": "53"
										},
										{
											"begin": 7955,
											"end": 8077,
											"name": "JUMP",
											"source": 12,
											"value": "[in]"
										},
										{
											"begin": 5202,
											"end": 5405,
											"name": "tag",
											"source": 12,
											"value": "11"
										},
										{
											"begin": 5202,
											"end": 5405,
											"name": "JUMPDEST",
											"source": 12
										},
										{
											"begin": 5202,
											"end": 5405,
											"name": "PUSH [tag]",
											"source": 12,
											"value": "40"
										},
										{
											"begin": 5202,
											"end": 5405,
											"name": "PUSH [tag]",
											"source": 12,
											"value": "56"
										},
										{
											"begin": 5202,
											"end": 5405,
											"name": "CALLDATASIZE",
											"source": 12
										},
										{
											"begin": 5202,
											"end": 5405,
											"name": "PUSH",
											"source": 12,
											"value": "4"
										},
										{
											"begin": 5202,
											"end": 5405,
											"name": "PUSH [tag]",
											"source": 12,
											"value": "57"
										},
										{
											"begin": 5202,
											"end": 5405,
											"name": "JUMP",
											"source": 12,
											"value": "[in]"
										},
										{
											"begin": 5202,
											"end": 5405,
											"name": "tag",
											"source": 12,
											"value": "56"
										},
										{
											"begin": 5202,
											"end": 5405,
											"name": "JUMPDEST",
											"source": 12
										},
										{
											"begin": 5202,
											"end": 5405,
											"name": "PUSH [tag]",
											"source": 12,
											"value": "58"
										},
										{
											"begin": 5202,
											"end": 5405,
											"name": "JUMP",
											"source": 12,
											"value": "[in]"
										},
										{
											"begin": 8301,
											"end": 8403,
											"name": "tag",
											"source": 12,
											"value": "12"
										},
										{
											"begin": 8301,
											"end": 8403,
											"name": "JUMPDEST",
											"source": 12
										},
										{
											"begin": 8301,
											"end": 8403,
											"name": "PUSH [tag]",
											"source": 12,
											"value": "26"
										},
										{
											"begin": 8301,
											"end": 8403,
											"name": "PUSH [tag]",
											"source": 12,
											"value": "61"
										},
										{
											"begin": 8301,
											"end": 8403,
											"name": "JUMP",
											"source": 12,
											"value": "[in]"
										},
										{
											"begin": 9862,
											"end": 10136,
											"name": "tag",
											"source": 12,
											"value": "13"
										},
										{
											"begin": 9862,
											"end": 10136,
											"name": "JUMPDEST",
											"source": 12
										},
										{
											"begin": 9862,
											"end": 10136,
											"name": "PUSH [tag]",
											"source": 12,
											"value": "36"
										},
										{
											"begin": 9862,
											"end": 10136,
											"name": "PUSH [tag]",
											"source": 12,
											"value": "64"
										},
										{
											"begin": 9862,
											"end": 10136,
											"name": "CALLDATASIZE",
											"source": 12
										},
										{
											"begin": 9862,
											"end": 10136,
											"name": "PUSH",
											"source": 12,
											"value": "4"
										},
										{
											"begin": 9862,
											"end": 10136,
											"name": "PUSH [tag]",
											"source": 12,
											"value": "65"
										},
										{
											"begin": 9862,
											"end": 10136,
											"name": "JUMP",
											"source": 12,
											"value": "[in]"
										},
										{
											"begin": 9862,
											"end": 10136,
											"name": "tag",
											"source": 12,
											"value": "64"
										},
										{
											"begin": 9862,
											"end": 10136,
											"name": "JUMPDEST",
											"source": 12
										},
										{
											"begin": 9862,
											"end": 10136,
											"name": "PUSH [tag]",
											"source": 12,
											"value": "66"
										},
										{
											"begin": 9862,
											"end": 10136,
											"name": "JUMP",
											"source": 12,
											"value": "[in]"
										},
										{
											"begin": 10901,
											"end": 11260,
											"name": "tag",
											"source": 12,
											"value": "14"
										},
										{
											"begin": 10901,
											"end": 11260,
											"name": "JUMPDEST",
											"source": 12
										},
										{
											"begin": 10901,
											"end": 11260,
											"name": "PUSH [tag]",
											"source": 12,
											"value": "36"
										},
										{
											"begin": 10901,
											"end": 11260,
											"name": "PUSH [tag]",
											"source": 12,
											"value": "68"
										},
										{
											"begin": 10901,
											"end": 11260,
											"name": "CALLDATASIZE",
											"source": 12
										},
										{
											"begin": 10901,
											"end": 11260,
											"name": "PUSH",
											"source": 12,
											"value": "4"
										},
										{
											"begin": 10901,
											"end": 11260,
											"name": "PUSH [tag]",
											"source": 12,
											"value": "69"
										},
										{
											"begin": 10901,
											"end": 11260,
											"name": "JUMP",
											"source": 12,
											"value": "[in]"
										},
										{
											"begin": 10901,
											"end": 11260,
											"name": "tag",
											"source": 12,
											"value": "68"
										},
										{
											"begin": 10901,
											"end": 11260,
											"name": "JUMPDEST",
											"source": 12
										},
										{
											"begin": 10901,
											"end": 11260,
											"name": "PUSH [tag]",
											"source": 12,
											"value": "70"
										},
										{
											"begin": 10901,
											"end": 11260,
											"name": "JUMP",
											"source": 12,
											"value": "[in]"
										},
										{
											"begin": 8469,
											"end": 8782,
											"name": "tag",
											"source": 12,
											"value": "15"
										},
										{
											"begin": 8469,
											"end": 8782,
											"name": "JUMPDEST",
											"source": 12
										},
										{
											"begin": 8469,
											"end": 8782,
											"name": "PUSH [tag]",
											"source": 12,
											"value": "26"
										},
										{
											"begin": 8469,
											"end": 8782,
											"name": "PUSH [tag]",
											"source": 12,
											"value": "72"
										},
										{
											"begin": 8469,
											"end": 8782,
											"name": "CALLDATASIZE",
											"source": 12
										},
										{
											"begin": 8469,
											"end": 8782,
											"name": "PUSH",
											"source": 12,
											"value": "4"
										},
										{
											"begin": 8469,
											"end": 8782,
											"name": "PUSH [tag]",
											"source": 12,
											"value": "32"
										},
										{
											"begin": 8469,
											"end": 8782,
											"name": "JUMP",
											"source": 12,
											"value": "[in]"
										},
										{
											"begin": 8469,
											"end": 8782,
											"name": "tag",
											"source": 12,
											"value": "72"
										},
										{
											"begin": 8469,
											"end": 8782,
											"name": "JUMPDEST",
											"source": 12
										},
										{
											"begin": 8469,
											"end": 8782,
											"name": "PUSH [tag]",
											"source": 12,
											"value": "73"
										},
										{
											"begin": 8469,
											"end": 8782,
											"name": "JUMP",
											"source": 12,
											"value": "[in]"
										},
										{
											"begin": 10202,
											"end": 10364,
											"name": "tag",
											"source": 12,
											"value": "16"
										},
										{
											"begin": 10202,
											"end": 10364,
											"name": "JUMPDEST",
											"source": 12
										},
										{
											"begin": 10202,
											"end": 10364,
											"name": "PUSH [tag]",
											"source": 12,
											"value": "20"
										},
										{
											"begin": 10202,
											"end": 10364,
											"name": "PUSH [tag]",
											"source": 12,
											"value": "76"
										},
										{
											"begin": 10202,
											"end": 10364,
											"name": "CALLDATASIZE",
											"source": 12
										},
										{
											"begin": 10202,
											"end": 10364,
											"name": "PUSH",
											"source": 12,
											"value": "4"
										},
										{
											"begin": 10202,
											"end": 10364,
											"name": "PUSH [tag]",
											"source": 12,
											"value": "77"
										},
										{
											"begin": 10202,
											"end": 10364,
											"name": "JUMP",
											"source": 12,
											"value": "[in]"
										},
										{
											"begin": 10202,
											"end": 10364,
											"name": "tag",
											"source": 12,
											"value": "76"
										},
										{
											"begin": 10202,
											"end": 10364,
											"name": "JUMPDEST",
											"source": 12
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "A0"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SHL",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SUB",
											"source": -1
										},
										{
											"begin": 10322,
											"end": 10347,
											"name": "SWAP2",
											"source": 12
										},
										{
											"begin": 10322,
											"end": 10347,
											"name": "DUP3",
											"source": 12
										},
										{
											"begin": 10322,
											"end": 10347,
											"name": "AND",
											"source": 12
										},
										{
											"begin": 10299,
											"end": 10303,
											"name": "PUSH",
											"source": 12,
											"value": "0"
										},
										{
											"begin": 10322,
											"end": 10347,
											"name": "SWAP1",
											"source": 12
										},
										{
											"begin": 10322,
											"end": 10347,
											"name": "DUP2",
											"source": 12
										},
										{
											"begin": 10322,
											"end": 10347,
											"name": "MSTORE",
											"source": 12
										},
										{
											"begin": 10322,
											"end": 10340,
											"name": "PUSH",
											"source": 12,
											"value": "7"
										},
										{
											"begin": 10322,
											"end": 10347,
											"name": "PUSH",
											"source": 12,
											"value": "20"
										},
										{
											"begin": 10322,
											"end": 10347,
											"name": "SWAP1",
											"source": 12
										},
										{
											"begin": 10322,
											"end": 10347,
											"name": "DUP2",
											"source": 12
										},
										{
											"begin": 10322,
											"end": 10347,
											"name": "MSTORE",
											"source": 12
										},
										{
											"begin": 10322,
											"end": 10347,
											"name": "PUSH",
											"source": 12,
											"value": "40"
										},
										{
											"begin": 10322,
											"end": 10347,
											"name": "DUP1",
											"source": 12
										},
										{
											"begin": 10322,
											"end": 10347,
											"name": "DUP4",
											"source": 12
										},
										{
											"begin": 10322,
											"end": 10347,
											"name": "KECCAK256",
											"source": 12
										},
										{
											"begin": 10322,
											"end": 10357,
											"name": "SWAP4",
											"source": 12
										},
										{
											"begin": 10322,
											"end": 10357,
											"name": "SWAP1",
											"source": 12
										},
										{
											"begin": 10322,
											"end": 10357,
											"name": "SWAP5",
											"source": 12
										},
										{
											"begin": 10322,
											"end": 10357,
											"name": "AND",
											"source": 12
										},
										{
											"begin": 10322,
											"end": 10357,
											"name": "DUP3",
											"source": 12
										},
										{
											"begin": 10322,
											"end": 10357,
											"name": "MSTORE",
											"source": 12
										},
										{
											"begin": 10322,
											"end": 10357,
											"name": "SWAP2",
											"source": 12
										},
										{
											"begin": 10322,
											"end": 10357,
											"name": "SWAP1",
											"source": 12
										},
										{
											"begin": 10322,
											"end": 10357,
											"name": "SWAP2",
											"source": 12
										},
										{
											"begin": 10322,
											"end": 10357,
											"name": "MSTORE",
											"source": 12
										},
										{
											"begin": 10322,
											"end": 10357,
											"name": "KECCAK256",
											"source": 12
										},
										{
											"begin": 10322,
											"end": 10357,
											"name": "SLOAD",
											"source": 12
										},
										{
											"begin": 10322,
											"end": 10357,
											"name": "PUSH",
											"source": 12,
											"value": "FF"
										},
										{
											"begin": 10322,
											"end": 10357,
											"name": "AND",
											"source": 12
										},
										{
											"begin": 10322,
											"end": 10357,
											"name": "SWAP1",
											"source": 12
										},
										{
											"begin": 10202,
											"end": 10364,
											"name": "JUMP",
											"source": 12
										},
										{
											"begin": 4843,
											"end": 5143,
											"name": "tag",
											"source": 12,
											"value": "23"
										},
										{
											"begin": 4843,
											"end": 5143,
											"name": "JUMPDEST",
											"source": 12
										},
										{
											"begin": 4945,
											"end": 4949,
											"name": "PUSH",
											"source": 12,
											"value": "0"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "E0"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SHL",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SUB",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "NOT",
											"source": -1
										},
										{
											"begin": 4980,
											"end": 5020,
											"name": "DUP3",
											"source": 12
										},
										{
											"begin": 4980,
											"end": 5020,
											"name": "AND",
											"source": 12
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "80AC58CD"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "E0"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SHL",
											"source": -1
										},
										{
											"begin": 4980,
											"end": 5020,
											"name": "EQ",
											"source": 12
										},
										{
											"begin": 4980,
											"end": 5020,
											"name": "DUP1",
											"source": 12
										},
										{
											"begin": 4980,
											"end": 5084,
											"name": "PUSH [tag]",
											"source": 12,
											"value": "81"
										},
										{
											"begin": 4980,
											"end": 5084,
											"name": "JUMPI",
											"source": 12
										},
										{
											"begin": -1,
											"end": -1,
											"name": "POP",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "E0"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SHL",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SUB",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "NOT",
											"source": -1
										},
										{
											"begin": 5036,
											"end": 5084,
											"name": "DUP3",
											"source": 12
										},
										{
											"begin": 5036,
											"end": 5084,
											"name": "AND",
											"source": 12
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "5B5E139F"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "E0"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SHL",
											"source": -1
										},
										{
											"begin": 5036,
											"end": 5084,
											"name": "EQ",
											"source": 12
										},
										{
											"begin": 4980,
											"end": 5084,
											"name": "tag",
											"source": 12,
											"value": "81"
										},
										{
											"begin": 4980,
											"end": 5084,
											"name": "JUMPDEST",
											"source": 12
										},
										{
											"begin": 4980,
											"end": 5136,
											"name": "DUP1",
											"source": 12
										},
										{
											"begin": 4980,
											"end": 5136,
											"name": "PUSH [tag]",
											"source": 12,
											"value": "83"
										},
										{
											"begin": 4980,
											"end": 5136,
											"name": "JUMPI",
											"source": 12
										},
										{
											"begin": -1,
											"end": -1,
											"name": "POP",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1FFC9A7"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "E0"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SHL",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "E0"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SHL",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SUB",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "NOT",
											"source": -1
										},
										{
											"begin": 937,
											"end": 977,
											"name": "DUP4",
											"source": 9
										},
										{
											"begin": 937,
											"end": 977,
											"name": "AND",
											"source": 9
										},
										{
											"begin": 937,
											"end": 977,
											"name": "EQ",
											"source": 9
										},
										{
											"begin": 5100,
											"end": 5136,
											"name": "tag",
											"source": 12,
											"value": "83"
										},
										{
											"begin": 5100,
											"end": 5136,
											"name": "JUMPDEST",
											"source": 12
										},
										{
											"begin": 4961,
											"end": 5136,
											"name": "SWAP3",
											"source": 12
										},
										{
											"begin": 4843,
											"end": 5143,
											"name": "SWAP2",
											"source": 12
										},
										{
											"begin": -1,
											"end": -1,
											"name": "POP",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "POP",
											"source": -1
										},
										{
											"begin": 4843,
											"end": 5143,
											"name": "JUMP",
											"source": 12,
											"value": "[out]"
										},
										{
											"begin": 8139,
											"end": 8237,
											"name": "tag",
											"source": 12,
											"value": "27"
										},
										{
											"begin": 8139,
											"end": 8237,
											"name": "JUMPDEST",
											"source": 12
										},
										{
											"begin": 8193,
											"end": 8206,
											"name": "PUSH",
											"source": 12,
											"value": "60"
										},
										{
											"begin": 8225,
											"end": 8230,
											"name": "PUSH",
											"source": 12,
											"value": "2"
										},
										{
											"begin": 8218,
											"end": 8230,
											"name": "DUP1",
											"source": 12
										},
										{
											"begin": 8218,
											"end": 8230,
											"name": "SLOAD",
											"source": 12
										},
										{
											"begin": 8218,
											"end": 8230,
											"name": "PUSH [tag]",
											"source": 12,
											"value": "86"
										},
										{
											"begin": 8218,
											"end": 8230,
											"name": "SWAP1",
											"source": 12
										},
										{
											"begin": 8218,
											"end": 8230,
											"name": "PUSH [tag]",
											"source": 12,
											"value": "87"
										},
										{
											"begin": 8218,
											"end": 8230,
											"name": "JUMP",
											"source": 12,
											"value": "[in]"
										},
										{
											"begin": 8218,
											"end": 8230,
											"name": "tag",
											"source": 12,
											"value": "86"
										},
										{
											"begin": 8218,
											"end": 8230,
											"name": "JUMPDEST",
											"source": 12
										},
										{
											"begin": 8218,
											"end": 8230,
											"name": "DUP1",
											"source": 12
										},
										{
											"begin": 8218,
											"end": 8230,
											"name": "PUSH",
											"source": 12,
											"value": "1F"
										},
										{
											"begin": 8218,
											"end": 8230,
											"name": "ADD",
											"source": 12
										},
										{
											"begin": 8218,
											"end": 8230,
											"name": "PUSH",
											"source": 12,
											"value": "20"
										},
										{
											"begin": 8218,
											"end": 8230,
											"name": "DUP1",
											"source": 12
										},
										{
											"begin": 8218,
											"end": 8230,
											"name": "SWAP2",
											"source": 12
										},
										{
											"begin": 8218,
											"end": 8230,
											"name": "DIV",
											"source": 12
										},
										{
											"begin": 8218,
											"end": 8230,
											"name": "MUL",
											"source": 12
										},
										{
											"begin": 8218,
											"end": 8230,
											"name": "PUSH",
											"source": 12,
											"value": "20"
										},
										{
											"begin": 8218,
											"end": 8230,
											"name": "ADD",
											"source": 12
										},
										{
											"begin": 8218,
											"end": 8230,
											"name": "PUSH",
											"source": 12,
											"value": "40"
										},
										{
											"begin": 8218,
											"end": 8230,
											"name": "MLOAD",
											"source": 12
										},
										{
											"begin": 8218,
											"end": 8230,
											"name": "SWAP1",
											"source": 12
										},
										{
											"begin": 8218,
											"end": 8230,
											"name": "DUP2",
											"source": 12
										},
										{
											"begin": 8218,
											"end": 8230,
											"name": "ADD",
											"source": 12
										},
										{
											"begin": 8218,
											"end": 8230,
											"name": "PUSH",
											"source": 12,
											"value": "40"
										},
										{
											"begin": 8218,
											"end": 8230,
											"name": "MSTORE",
											"source": 12
										},
										{
											"begin": 8218,
											"end": 8230,
											"name": "DUP1",
											"source": 12
										},
										{
											"begin": 8218,
											"end": 8230,
											"name": "SWAP3",
											"source": 12
										},
										{
											"begin": 8218,
											"end": 8230,
											"name": "SWAP2",
											"source": 12
										},
										{
											"begin": 8218,
											"end": 8230,
											"name": "SWAP1",
											"source": 12
										},
										{
											"begin": 8218,
											"end": 8230,
											"name": "DUP2",
											"source": 12
										},
										{
											"begin": 8218,
											"end": 8230,
											"name": "DUP2",
											"source": 12
										},
										{
											"begin": 8218,
											"end": 8230,
											"name": "MSTORE",
											"source": 12
										},
										{
											"begin": 8218,
											"end": 8230,
											"name": "PUSH",
											"source": 12,
											"value": "20"
										},
										{
											"begin": 8218,
											"end": 8230,
											"name": "ADD",
											"source": 12
										},
										{
											"begin": 8218,
											"end": 8230,
											"name": "DUP3",
											"source": 12
										},
										{
											"begin": 8218,
											"end": 8230,
											"name": "DUP1",
											"source": 12
										},
										{
											"begin": 8218,
											"end": 8230,
											"name": "SLOAD",
											"source": 12
										},
										{
											"begin": 8218,
											"end": 8230,
											"name": "PUSH [tag]",
											"source": 12,
											"value": "88"
										},
										{
											"begin": 8218,
											"end": 8230,
											"name": "SWAP1",
											"source": 12
										},
										{
											"begin": 8218,
											"end": 8230,
											"name": "PUSH [tag]",
											"source": 12,
											"value": "87"
										},
										{
											"begin": 8218,
											"end": 8230,
											"name": "JUMP",
											"source": 12,
											"value": "[in]"
										},
										{
											"begin": 8218,
											"end": 8230,
											"name": "tag",
											"source": 12,
											"value": "88"
										},
										{
											"begin": 8218,
											"end": 8230,
											"name": "JUMPDEST",
											"source": 12
										},
										{
											"begin": 8218,
											"end": 8230,
											"name": "DUP1",
											"source": 12
										},
										{
											"begin": 8218,
											"end": 8230,
											"name": "ISZERO",
											"source": 12
										},
										{
											"begin": 8218,
											"end": 8230,
											"name": "PUSH [tag]",
											"source": 12,
											"value": "89"
										},
										{
											"begin": 8218,
											"end": 8230,
											"name": "JUMPI",
											"source": 12
										},
										{
											"begin": 8218,
											"end": 8230,
											"name": "DUP1",
											"source": 12
										},
										{
											"begin": 8218,
											"end": 8230,
											"name": "PUSH",
											"source": 12,
											"value": "1F"
										},
										{
											"begin": 8218,
											"end": 8230,
											"name": "LT",
											"source": 12
										},
										{
											"begin": 8218,
											"end": 8230,
											"name": "PUSH [tag]",
											"source": 12,
											"value": "90"
										},
										{
											"begin": 8218,
											"end": 8230,
											"name": "JUMPI",
											"source": 12
										},
										{
											"begin": 8218,
											"end": 8230,
											"name": "PUSH",
											"source": 12,
											"value": "100"
										},
										{
											"begin": 8218,
											"end": 8230,
											"name": "DUP1",
											"source": 12
										},
										{
											"begin": 8218,
											"end": 8230,
											"name": "DUP4",
											"source": 12
										},
										{
											"begin": 8218,
											"end": 8230,
											"name": "SLOAD",
											"source": 12
										},
										{
											"begin": 8218,
											"end": 8230,
											"name": "DIV",
											"source": 12
										},
										{
											"begin": 8218,
											"end": 8230,
											"name": "MUL",
											"source": 12
										},
										{
											"begin": 8218,
											"end": 8230,
											"name": "DUP4",
											"source": 12
										},
										{
											"begin": 8218,
											"end": 8230,
											"name": "MSTORE",
											"source": 12
										},
										{
											"begin": 8218,
											"end": 8230,
											"name": "SWAP2",
											"source": 12
										},
										{
											"begin": 8218,
											"end": 8230,
											"name": "PUSH",
											"source": 12,
											"value": "20"
										},
										{
											"begin": 8218,
											"end": 8230,
											"name": "ADD",
											"source": 12
										},
										{
											"begin": 8218,
											"end": 8230,
											"name": "SWAP2",
											"source": 12
										},
										{
											"begin": 8218,
											"end": 8230,
											"name": "PUSH [tag]",
											"source": 12,
											"value": "89"
										},
										{
											"begin": 8218,
											"end": 8230,
											"name": "JUMP",
											"source": 12
										},
										{
											"begin": 8218,
											"end": 8230,
											"name": "tag",
											"source": 12,
											"value": "90"
										},
										{
											"begin": 8218,
											"end": 8230,
											"name": "JUMPDEST",
											"source": 12
										},
										{
											"begin": 8218,
											"end": 8230,
											"name": "DUP3",
											"source": 12
										},
										{
											"begin": 8218,
											"end": 8230,
											"name": "ADD",
											"source": 12
										},
										{
											"begin": 8218,
											"end": 8230,
											"name": "SWAP2",
											"source": 12
										},
										{
											"begin": 8218,
											"end": 8230,
											"name": "SWAP1",
											"source": 12
										},
										{
											"begin": 8218,
											"end": 8230,
											"name": "PUSH",
											"source": 12,
											"value": "0"
										},
										{
											"begin": 8218,
											"end": 8230,
											"name": "MSTORE",
											"source": 12
										},
										{
											"begin": 8218,
											"end": 8230,
											"name": "PUSH",
											"source": 12,
											"value": "20"
										},
										{
											"begin": 8218,
											"end": 8230,
											"name": "PUSH",
											"source": 12,
											"value": "0"
										},
										{
											"begin": 8218,
											"end": 8230,
											"name": "KECCAK256",
											"source": 12
										},
										{
											"begin": 8218,
											"end": 8230,
											"name": "SWAP1",
											"source": 12
										},
										{
											"begin": 8218,
											"end": 8230,
											"name": "tag",
											"source": 12,
											"value": "91"
										},
										{
											"begin": 8218,
											"end": 8230,
											"name": "JUMPDEST",
											"source": 12
										},
										{
											"begin": 8218,
											"end": 8230,
											"name": "DUP2",
											"source": 12
										},
										{
											"begin": 8218,
											"end": 8230,
											"name": "SLOAD",
											"source": 12
										},
										{
											"begin": 8218,
											"end": 8230,
											"name": "DUP2",
											"source": 12
										},
										{
											"begin": 8218,
											"end": 8230,
											"name": "MSTORE",
											"source": 12
										},
										{
											"begin": 8218,
											"end": 8230,
											"name": "SWAP1",
											"source": 12
										},
										{
											"begin": 8218,
											"end": 8230,
											"name": "PUSH",
											"source": 12,
											"value": "1"
										},
										{
											"begin": 8218,
											"end": 8230,
											"name": "ADD",
											"source": 12
										},
										{
											"begin": 8218,
											"end": 8230,
											"name": "SWAP1",
											"source": 12
										},
										{
											"begin": 8218,
											"end": 8230,
											"name": "PUSH",
											"source": 12,
											"value": "20"
										},
										{
											"begin": 8218,
											"end": 8230,
											"name": "ADD",
											"source": 12
										},
										{
											"begin": 8218,
											"end": 8230,
											"name": "DUP1",
											"source": 12
										},
										{
											"begin": 8218,
											"end": 8230,
											"name": "DUP4",
											"source": 12
										},
										{
											"begin": 8218,
											"end": 8230,
											"name": "GT",
											"source": 12
										},
										{
											"begin": 8218,
											"end": 8230,
											"name": "PUSH [tag]",
											"source": 12,
											"value": "91"
										},
										{
											"begin": 8218,
											"end": 8230,
											"name": "JUMPI",
											"source": 12
										},
										{
											"begin": 8218,
											"end": 8230,
											"name": "DUP3",
											"source": 12
										},
										{
											"begin": 8218,
											"end": 8230,
											"name": "SWAP1",
											"source": 12
										},
										{
											"begin": 8218,
											"end": 8230,
											"name": "SUB",
											"source": 12
										},
										{
											"begin": 8218,
											"end": 8230,
											"name": "PUSH",
											"source": 12,
											"value": "1F"
										},
										{
											"begin": 8218,
											"end": 8230,
											"name": "AND",
											"source": 12
										},
										{
											"begin": 8218,
											"end": 8230,
											"name": "DUP3",
											"source": 12
										},
										{
											"begin": 8218,
											"end": 8230,
											"name": "ADD",
											"source": 12
										},
										{
											"begin": 8218,
											"end": 8230,
											"name": "SWAP2",
											"source": 12
										},
										{
											"begin": 8218,
											"end": 8230,
											"name": "tag",
											"source": 12,
											"value": "89"
										},
										{
											"begin": 8218,
											"end": 8230,
											"name": "JUMPDEST",
											"source": 12
										},
										{
											"begin": 8218,
											"end": 8230,
											"name": "POP",
											"source": 12
										},
										{
											"begin": 8218,
											"end": 8230,
											"name": "POP",
											"source": 12
										},
										{
											"begin": 8218,
											"end": 8230,
											"name": "POP",
											"source": 12
										},
										{
											"begin": 8218,
											"end": 8230,
											"name": "POP",
											"source": 12
										},
										{
											"begin": 8218,
											"end": 8230,
											"name": "POP",
											"source": 12
										},
										{
											"begin": 8218,
											"end": 8230,
											"name": "SWAP1",
											"source": 12
										},
										{
											"begin": 8218,
											"end": 8230,
											"name": "POP",
											"source": 12
										},
										{
											"begin": 8139,
											"end": 8237,
											"name": "SWAP1",
											"source": 12
										},
										{
											"begin": 8139,
											"end": 8237,
											"name": "JUMP",
											"source": 12,
											"value": "[out]"
										},
										{
											"begin": 9595,
											"end": 9795,
											"name": "tag",
											"source": 12,
											"value": "33"
										},
										{
											"begin": 9595,
											"end": 9795,
											"name": "JUMPDEST",
											"source": 12
										},
										{
											"begin": 9663,
											"end": 9670,
											"name": "PUSH",
											"source": 12,
											"value": "0"
										},
										{
											"begin": 9687,
											"end": 9703,
											"name": "PUSH [tag]",
											"source": 12,
											"value": "93"
										},
										{
											"begin": 9695,
											"end": 9702,
											"name": "DUP3",
											"source": 12
										},
										{
											"begin": 9687,
											"end": 9694,
											"name": "PUSH [tag]",
											"source": 12,
											"value": "94"
										},
										{
											"begin": 9687,
											"end": 9703,
											"name": "JUMP",
											"source": 12,
											"value": "[in]"
										},
										{
											"begin": 9687,
											"end": 9703,
											"name": "tag",
											"source": 12,
											"value": "93"
										},
										{
											"begin": 9687,
											"end": 9703,
											"name": "JUMPDEST",
											"source": 12
										},
										{
											"begin": 9682,
											"end": 9746,
											"name": "PUSH [tag]",
											"source": 12,
											"value": "95"
										},
										{
											"begin": 9682,
											"end": 9746,
											"name": "JUMPI",
											"source": 12
										},
										{
											"begin": 9712,
											"end": 9746,
											"name": "PUSH",
											"source": 12,
											"value": "40"
										},
										{
											"begin": 9712,
											"end": 9746,
											"name": "MLOAD",
											"source": 12
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "33D1C039"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "E2"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SHL",
											"source": -1
										},
										{
											"begin": 9712,
											"end": 9746,
											"name": "DUP2",
											"source": 12
										},
										{
											"begin": 9712,
											"end": 9746,
											"name": "MSTORE",
											"source": 12
										},
										{
											"begin": 9712,
											"end": 9746,
											"name": "PUSH",
											"source": 12,
											"value": "4"
										},
										{
											"begin": 9712,
											"end": 9746,
											"name": "ADD",
											"source": 12
										},
										{
											"begin": 9712,
											"end": 9746,
											"name": "PUSH",
											"source": 12,
											"value": "40"
										},
										{
											"begin": 9712,
											"end": 9746,
											"name": "MLOAD",
											"source": 12
										},
										{
											"begin": 9712,
											"end": 9746,
											"name": "DUP1",
											"source": 12
										},
										{
											"begin": 9712,
											"end": 9746,
											"name": "SWAP2",
											"source": 12
										},
										{
											"begin": 9712,
											"end": 9746,
											"name": "SUB",
											"source": 12
										},
										{
											"begin": 9712,
											"end": 9746,
											"name": "SWAP1",
											"source": 12
										},
										{
											"begin": 9712,
											"end": 9746,
											"name": "REVERT",
											"source": 12
										},
										{
											"begin": 9682,
											"end": 9746,
											"name": "tag",
											"source": 12,
											"value": "95"
										},
										{
											"begin": 9682,
											"end": 9746,
											"name": "JUMPDEST",
											"source": 12
										},
										{
											"begin": -1,
											"end": -1,
											"name": "POP",
											"source": -1
										},
										{
											"begin": 9764,
											"end": 9788,
											"name": "PUSH",
											"source": 12,
											"value": "0"
										},
										{
											"begin": 9764,
											"end": 9788,
											"name": "SWAP1",
											"source": 12
										},
										{
											"begin": 9764,
											"end": 9788,
											"name": "DUP2",
											"source": 12
										},
										{
											"begin": 9764,
											"end": 9788,
											"name": "MSTORE",
											"source": 12
										},
										{
											"begin": 9764,
											"end": 9779,
											"name": "PUSH",
											"source": 12,
											"value": "6"
										},
										{
											"begin": 9764,
											"end": 9788,
											"name": "PUSH",
											"source": 12,
											"value": "20"
										},
										{
											"begin": 9764,
											"end": 9788,
											"name": "MSTORE",
											"source": 12
										},
										{
											"begin": 9764,
											"end": 9788,
											"name": "PUSH",
											"source": 12,
											"value": "40"
										},
										{
											"begin": 9764,
											"end": 9788,
											"name": "SWAP1",
											"source": 12
										},
										{
											"begin": 9764,
											"end": 9788,
											"name": "KECCAK256",
											"source": 12
										},
										{
											"begin": 9764,
											"end": 9788,
											"name": "SLOAD",
											"source": 12
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "A0"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SHL",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SUB",
											"source": -1
										},
										{
											"begin": 9764,
											"end": 9788,
											"name": "AND",
											"source": 12
										},
										{
											"begin": 9764,
											"end": 9788,
											"name": "SWAP1",
											"source": 12
										},
										{
											"begin": 9595,
											"end": 9795,
											"name": "JUMP",
											"source": 12,
											"value": "[out]"
										},
										{
											"begin": 9172,
											"end": 9534,
											"name": "tag",
											"source": 12,
											"value": "39"
										},
										{
											"begin": 9172,
											"end": 9534,
											"name": "JUMPDEST",
											"source": 12
										},
										{
											"begin": 9244,
											"end": 9257,
											"name": "PUSH",
											"source": 12,
											"value": "0"
										},
										{
											"begin": 9260,
											"end": 9284,
											"name": "PUSH [tag]",
											"source": 12,
											"value": "97"
										},
										{
											"begin": 9276,
											"end": 9283,
											"name": "DUP3",
											"source": 12
										},
										{
											"begin": 9260,
											"end": 9275,
											"name": "PUSH [tag]",
											"source": 12,
											"value": "53"
										},
										{
											"begin": 9260,
											"end": 9284,
											"name": "JUMP",
											"source": 12,
											"value": "[in]"
										},
										{
											"begin": 9260,
											"end": 9284,
											"name": "tag",
											"source": 12,
											"value": "97"
										},
										{
											"begin": 9260,
											"end": 9284,
											"name": "JUMPDEST",
											"source": 12
										},
										{
											"begin": 9244,
											"end": 9284,
											"name": "SWAP1",
											"source": 12
										},
										{
											"begin": 9244,
											"end": 9284,
											"name": "POP",
											"source": 12
										},
										{
											"begin": 9304,
											"end": 9309,
											"name": "DUP1",
											"source": 12
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "A0"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SHL",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SUB",
											"source": -1
										},
										{
											"begin": 9298,
											"end": 9309,
											"name": "AND",
											"source": 12
										},
										{
											"begin": 9298,
											"end": 9300,
											"name": "DUP4",
											"source": 12
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "A0"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SHL",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SUB",
											"source": -1
										},
										{
											"begin": 9298,
											"end": 9309,
											"name": "AND",
											"source": 12
										},
										{
											"begin": 9298,
											"end": 9309,
											"name": "EQ",
											"source": 12
										},
										{
											"begin": 9294,
											"end": 9342,
											"name": "ISZERO",
											"source": 12
										},
										{
											"begin": 9294,
											"end": 9342,
											"name": "PUSH [tag]",
											"source": 12,
											"value": "98"
										},
										{
											"begin": 9294,
											"end": 9342,
											"name": "JUMPI",
											"source": 12
										},
										{
											"begin": 9318,
											"end": 9342,
											"name": "PUSH",
											"source": 12,
											"value": "40"
										},
										{
											"begin": 9318,
											"end": 9342,
											"name": "MLOAD",
											"source": 12
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "250FDEE3"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "E2"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SHL",
											"source": -1
										},
										{
											"begin": 9318,
											"end": 9342,
											"name": "DUP2",
											"source": 12
										},
										{
											"begin": 9318,
											"end": 9342,
											"name": "MSTORE",
											"source": 12
										},
										{
											"begin": 9318,
											"end": 9342,
											"name": "PUSH",
											"source": 12,
											"value": "4"
										},
										{
											"begin": 9318,
											"end": 9342,
											"name": "ADD",
											"source": 12
										},
										{
											"begin": 9318,
											"end": 9342,
											"name": "PUSH",
											"source": 12,
											"value": "40"
										},
										{
											"begin": 9318,
											"end": 9342,
											"name": "MLOAD",
											"source": 12
										},
										{
											"begin": 9318,
											"end": 9342,
											"name": "DUP1",
											"source": 12
										},
										{
											"begin": 9318,
											"end": 9342,
											"name": "SWAP2",
											"source": 12
										},
										{
											"begin": 9318,
											"end": 9342,
											"name": "SUB",
											"source": 12
										},
										{
											"begin": 9318,
											"end": 9342,
											"name": "SWAP1",
											"source": 12
										},
										{
											"begin": 9318,
											"end": 9342,
											"name": "REVERT",
											"source": 12
										},
										{
											"begin": 9294,
											"end": 9342,
											"name": "tag",
											"source": 12,
											"value": "98"
										},
										{
											"begin": 9294,
											"end": 9342,
											"name": "JUMPDEST",
											"source": 12
										},
										{
											"begin": 719,
											"end": 729,
											"name": "CALLER",
											"source": 6
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "A0"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SHL",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SUB",
											"source": -1
										},
										{
											"begin": 9357,
											"end": 9378,
											"name": "DUP3",
											"source": 12
										},
										{
											"begin": 9357,
											"end": 9378,
											"name": "AND",
											"source": 12
										},
										{
											"begin": 9357,
											"end": 9378,
											"name": "EQ",
											"source": 12
										},
										{
											"begin": 9357,
											"end": 9378,
											"name": "DUP1",
											"source": 12
										},
										{
											"begin": 9357,
											"end": 9378,
											"name": "ISZERO",
											"source": 12
										},
										{
											"begin": 9357,
											"end": 9378,
											"name": "SWAP1",
											"source": 12
										},
										{
											"begin": 9357,
											"end": 9420,
											"name": "PUSH [tag]",
											"source": 12,
											"value": "101"
										},
										{
											"begin": 9357,
											"end": 9420,
											"name": "JUMPI",
											"source": 12
										},
										{
											"begin": -1,
											"end": -1,
											"name": "POP",
											"source": -1
										},
										{
											"begin": 9383,
											"end": 9420,
											"name": "PUSH [tag]",
											"source": 12,
											"value": "102"
										},
										{
											"begin": 9400,
											"end": 9405,
											"name": "DUP2",
											"source": 12
										},
										{
											"begin": 719,
											"end": 729,
											"name": "CALLER",
											"source": 6
										},
										{
											"begin": 10202,
											"end": 10364,
											"name": "PUSH [tag]",
											"source": 12,
											"value": "76"
										},
										{
											"begin": 10202,
											"end": 10364,
											"name": "JUMP",
											"source": 12,
											"value": "[in]"
										},
										{
											"begin": 9383,
											"end": 9420,
											"name": "tag",
											"source": 12,
											"value": "102"
										},
										{
											"begin": 9383,
											"end": 9420,
											"name": "JUMPDEST",
											"source": 12
										},
										{
											"begin": 9382,
											"end": 9420,
											"name": "ISZERO",
											"source": 12
										},
										{
											"begin": 9357,
											"end": 9420,
											"name": "tag",
											"source": 12,
											"value": "101"
										},
										{
											"begin": 9357,
											"end": 9420,
											"name": "JUMPDEST",
											"source": 12
										},
										{
											"begin": 9353,
											"end": 9489,
											"name": "ISZERO",
											"source": 12
										},
										{
											"begin": 9353,
											"end": 9489,
											"name": "PUSH [tag]",
											"source": 12,
											"value": "104"
										},
										{
											"begin": 9353,
											"end": 9489,
											"name": "JUMPI",
											"source": 12
										},
										{
											"begin": 9443,
											"end": 9478,
											"name": "PUSH",
											"source": 12,
											"value": "40"
										},
										{
											"begin": 9443,
											"end": 9478,
											"name": "MLOAD",
											"source": 12
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "67D9DCA1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "E1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SHL",
											"source": -1
										},
										{
											"begin": 9443,
											"end": 9478,
											"name": "DUP2",
											"source": 12
										},
										{
											"begin": 9443,
											"end": 9478,
											"name": "MSTORE",
											"source": 12
										},
										{
											"begin": 9443,
											"end": 9478,
											"name": "PUSH",
											"source": 12,
											"value": "4"
										},
										{
											"begin": 9443,
											"end": 9478,
											"name": "ADD",
											"source": 12
										},
										{
											"begin": 9443,
											"end": 9478,
											"name": "PUSH",
											"source": 12,
											"value": "40"
										},
										{
											"begin": 9443,
											"end": 9478,
											"name": "MLOAD",
											"source": 12
										},
										{
											"begin": 9443,
											"end": 9478,
											"name": "DUP1",
											"source": 12
										},
										{
											"begin": 9443,
											"end": 9478,
											"name": "SWAP2",
											"source": 12
										},
										{
											"begin": 9443,
											"end": 9478,
											"name": "SUB",
											"source": 12
										},
										{
											"begin": 9443,
											"end": 9478,
											"name": "SWAP1",
											"source": 12
										},
										{
											"begin": 9443,
											"end": 9478,
											"name": "REVERT",
											"source": 12
										},
										{
											"begin": 9353,
											"end": 9489,
											"name": "tag",
											"source": 12,
											"value": "104"
										},
										{
											"begin": 9353,
											"end": 9489,
											"name": "JUMPDEST",
											"source": 12
										},
										{
											"begin": 9499,
											"end": 9527,
											"name": "PUSH [tag]",
											"source": 12,
											"value": "105"
										},
										{
											"begin": 9508,
											"end": 9510,
											"name": "DUP4",
											"source": 12
										},
										{
											"begin": 9512,
											"end": 9519,
											"name": "DUP4",
											"source": 12
										},
										{
											"begin": 9521,
											"end": 9526,
											"name": "DUP4",
											"source": 12
										},
										{
											"begin": 9499,
											"end": 9507,
											"name": "PUSH [tag]",
											"source": 12,
											"value": "106"
										},
										{
											"begin": 9499,
											"end": 9527,
											"name": "JUMP",
											"source": 12,
											"value": "[in]"
										},
										{
											"begin": 9499,
											"end": 9527,
											"name": "tag",
											"source": 12,
											"value": "105"
										},
										{
											"begin": 9499,
											"end": 9527,
											"name": "JUMPDEST",
											"source": 12
										},
										{
											"begin": 9234,
											"end": 9534,
											"name": "POP",
											"source": 12
										},
										{
											"begin": 9172,
											"end": 9534,
											"name": "POP",
											"source": 12
										},
										{
											"begin": 9172,
											"end": 9534,
											"name": "POP",
											"source": 12
										},
										{
											"begin": 9172,
											"end": 9534,
											"name": "JUMP",
											"source": 12,
											"value": "[out]"
										},
										{
											"begin": 10426,
											"end": 10590,
											"name": "tag",
											"source": 12,
											"value": "47"
										},
										{
											"begin": 10426,
											"end": 10590,
											"name": "JUMPDEST",
											"source": 12
										},
										{
											"begin": 10555,
											"end": 10583,
											"name": "PUSH [tag]",
											"source": 12,
											"value": "105"
										},
										{
											"begin": 10565,
											"end": 10569,
											"name": "DUP4",
											"source": 12
										},
										{
											"begin": 10571,
											"end": 10573,
											"name": "DUP4",
											"source": 12
										},
										{
											"begin": 10575,
											"end": 10582,
											"name": "DUP4",
											"source": 12
										},
										{
											"begin": 10555,
											"end": 10564,
											"name": "PUSH [tag]",
											"source": 12,
											"value": "112"
										},
										{
											"begin": 10555,
											"end": 10583,
											"name": "JUMP",
											"source": 12,
											"value": "[in]"
										},
										{
											"begin": 10656,
											"end": 10835,
											"name": "tag",
											"source": 12,
											"value": "50"
										},
										{
											"begin": 10656,
											"end": 10835,
											"name": "JUMPDEST",
											"source": 12
										},
										{
											"begin": 10789,
											"end": 10828,
											"name": "PUSH [tag]",
											"source": 12,
											"value": "105"
										},
										{
											"begin": 10806,
											"end": 10810,
											"name": "DUP4",
											"source": 12
										},
										{
											"begin": 10812,
											"end": 10814,
											"name": "DUP4",
											"source": 12
										},
										{
											"begin": 10816,
											"end": 10823,
											"name": "DUP4",
											"source": 12
										},
										{
											"begin": 10789,
											"end": 10828,
											"name": "PUSH",
											"source": 12,
											"value": "40"
										},
										{
											"begin": 10789,
											"end": 10828,
											"name": "MLOAD",
											"source": 12
										},
										{
											"begin": 10789,
											"end": 10828,
											"name": "DUP1",
											"source": 12
										},
										{
											"begin": 10789,
											"end": 10828,
											"name": "PUSH",
											"source": 12,
											"value": "20"
										},
										{
											"begin": 10789,
											"end": 10828,
											"name": "ADD",
											"source": 12
										},
										{
											"begin": 10789,
											"end": 10828,
											"name": "PUSH",
											"source": 12,
											"value": "40"
										},
										{
											"begin": 10789,
											"end": 10828,
											"name": "MSTORE",
											"source": 12
										},
										{
											"begin": 10789,
											"end": 10828,
											"name": "DUP1",
											"source": 12
										},
										{
											"begin": 10789,
											"end": 10828,
											"name": "PUSH",
											"source": 12,
											"value": "0"
										},
										{
											"begin": 10789,
											"end": 10828,
											"name": "DUP2",
											"source": 12
										},
										{
											"begin": 10789,
											"end": 10828,
											"name": "MSTORE",
											"source": 12
										},
										{
											"begin": 10789,
											"end": 10828,
											"name": "POP",
											"source": 12
										},
										{
											"begin": 10789,
											"end": 10805,
											"name": "PUSH [tag]",
											"source": 12,
											"value": "70"
										},
										{
											"begin": 10789,
											"end": 10828,
											"name": "JUMP",
											"source": 12,
											"value": "[in]"
										},
										{
											"begin": 7955,
											"end": 8077,
											"name": "tag",
											"source": 12,
											"value": "53"
										},
										{
											"begin": 7955,
											"end": 8077,
											"name": "JUMPDEST",
											"source": 12
										},
										{
											"begin": 8019,
											"end": 8026,
											"name": "PUSH",
											"source": 12,
											"value": "0"
										},
										{
											"begin": 8045,
											"end": 8065,
											"name": "PUSH [tag]",
											"source": 12,
											"value": "116"
										},
										{
											"begin": 8057,
											"end": 8064,
											"name": "DUP3",
											"source": 12
										},
										{
											"begin": 8045,
											"end": 8056,
											"name": "PUSH [tag]",
											"source": 12,
											"value": "117"
										},
										{
											"begin": 8045,
											"end": 8065,
											"name": "JUMP",
											"source": 12,
											"value": "[in]"
										},
										{
											"begin": 8045,
											"end": 8065,
											"name": "tag",
											"source": 12,
											"value": "116"
										},
										{
											"begin": 8045,
											"end": 8065,
											"name": "JUMPDEST",
											"source": 12
										},
										{
											"begin": 8045,
											"end": 8070,
											"name": "MLOAD",
											"source": 12
										},
										{
											"begin": 8045,
											"end": 8070,
											"name": "SWAP3",
											"source": 12
										},
										{
											"begin": 7955,
											"end": 8077,
											"name": "SWAP2",
											"source": 12
										},
										{
											"begin": -1,
											"end": -1,
											"name": "POP",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "POP",
											"source": -1
										},
										{
											"begin": 7955,
											"end": 8077,
											"name": "JUMP",
											"source": 12,
											"value": "[out]"
										},
										{
											"begin": 5202,
											"end": 5405,
											"name": "tag",
											"source": 12,
											"value": "58"
										},
										{
											"begin": 5202,
											"end": 5405,
											"name": "JUMPDEST",
											"source": 12
										},
										{
											"begin": 5266,
											"end": 5273,
											"name": "PUSH",
											"source": 12,
											"value": "0"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "A0"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SHL",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SUB",
											"source": -1
										},
										{
											"begin": 5289,
											"end": 5308,
											"name": "DUP3",
											"source": 12
										},
										{
											"begin": 5289,
											"end": 5308,
											"name": "AND",
											"source": 12
										},
										{
											"begin": 5285,
											"end": 5345,
											"name": "PUSH [tag]",
											"source": 12,
											"value": "119"
										},
										{
											"begin": 5285,
											"end": 5345,
											"name": "JUMPI",
											"source": 12
										},
										{
											"begin": 5317,
											"end": 5345,
											"name": "PUSH",
											"source": 12,
											"value": "40"
										},
										{
											"begin": 5317,
											"end": 5345,
											"name": "MLOAD",
											"source": 12
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "23D3AD81"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "E2"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SHL",
											"source": -1
										},
										{
											"begin": 5317,
											"end": 5345,
											"name": "DUP2",
											"source": 12
										},
										{
											"begin": 5317,
											"end": 5345,
											"name": "MSTORE",
											"source": 12
										},
										{
											"begin": 5317,
											"end": 5345,
											"name": "PUSH",
											"source": 12,
											"value": "4"
										},
										{
											"begin": 5317,
											"end": 5345,
											"name": "ADD",
											"source": 12
										},
										{
											"begin": 5317,
											"end": 5345,
											"name": "PUSH",
											"source": 12,
											"value": "40"
										},
										{
											"begin": 5317,
											"end": 5345,
											"name": "MLOAD",
											"source": 12
										},
										{
											"begin": 5317,
											"end": 5345,
											"name": "DUP1",
											"source": 12
										},
										{
											"begin": 5317,
											"end": 5345,
											"name": "SWAP2",
											"source": 12
										},
										{
											"begin": 5317,
											"end": 5345,
											"name": "SUB",
											"source": 12
										},
										{
											"begin": 5317,
											"end": 5345,
											"name": "SWAP1",
											"source": 12
										},
										{
											"begin": 5317,
											"end": 5345,
											"name": "REVERT",
											"source": 12
										},
										{
											"begin": 5285,
											"end": 5345,
											"name": "tag",
											"source": 12,
											"value": "119"
										},
										{
											"begin": 5285,
											"end": 5345,
											"name": "JUMPDEST",
											"source": 12
										},
										{
											"begin": -1,
											"end": -1,
											"name": "POP",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "A0"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SHL",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SUB",
											"source": -1
										},
										{
											"begin": 5370,
											"end": 5389,
											"name": "AND",
											"source": 12
										},
										{
											"begin": 5370,
											"end": 5389,
											"name": "PUSH",
											"source": 12,
											"value": "0"
										},
										{
											"begin": 5370,
											"end": 5389,
											"name": "SWAP1",
											"source": 12
										},
										{
											"begin": 5370,
											"end": 5389,
											"name": "DUP2",
											"source": 12
										},
										{
											"begin": 5370,
											"end": 5389,
											"name": "MSTORE",
											"source": 12
										},
										{
											"begin": 5370,
											"end": 5382,
											"name": "PUSH",
											"source": 12,
											"value": "5"
										},
										{
											"begin": 5370,
											"end": 5389,
											"name": "PUSH",
											"source": 12,
											"value": "20"
										},
										{
											"begin": 5370,
											"end": 5389,
											"name": "MSTORE",
											"source": 12
										},
										{
											"begin": 5370,
											"end": 5389,
											"name": "PUSH",
											"source": 12,
											"value": "40"
										},
										{
											"begin": 5370,
											"end": 5389,
											"name": "SWAP1",
											"source": 12
										},
										{
											"begin": 5370,
											"end": 5389,
											"name": "KECCAK256",
											"source": 12
										},
										{
											"begin": 5370,
											"end": 5397,
											"name": "SLOAD",
											"source": 12
										},
										{
											"begin": 5370,
											"end": 5397,
											"name": "PUSH",
											"source": 12,
											"value": "FFFFFFFFFFFFFFFF"
										},
										{
											"begin": 5370,
											"end": 5397,
											"name": "AND",
											"source": 12
										},
										{
											"begin": 5370,
											"end": 5397,
											"name": "SWAP1",
											"source": 12
										},
										{
											"begin": 5202,
											"end": 5405,
											"name": "JUMP",
											"source": 12,
											"value": "[out]"
										},
										{
											"begin": 8301,
											"end": 8403,
											"name": "tag",
											"source": 12,
											"value": "61"
										},
										{
											"begin": 8301,
											"end": 8403,
											"name": "JUMPDEST",
											"source": 12
										},
										{
											"begin": 8357,
											"end": 8370,
											"name": "PUSH",
											"source": 12,
											"value": "60"
										},
										{
											"begin": 8389,
											"end": 8396,
											"name": "PUSH",
											"source": 12,
											"value": "3"
										},
										{
											"begin": 8382,
											"end": 8396,
											"name": "DUP1",
											"source": 12
										},
										{
											"begin": 8382,
											"end": 8396,
											"name": "SLOAD",
											"source": 12
										},
										{
											"begin": 8382,
											"end": 8396,
											"name": "PUSH [tag]",
											"source": 12,
											"value": "86"
										},
										{
											"begin": 8382,
											"end": 8396,
											"name": "SWAP1",
											"source": 12
										},
										{
											"begin": 8382,
											"end": 8396,
											"name": "PUSH [tag]",
											"source": 12,
											"value": "87"
										},
										{
											"begin": 8382,
											"end": 8396,
											"name": "JUMP",
											"source": 12,
											"value": "[in]"
										},
										{
											"begin": 9862,
											"end": 10136,
											"name": "tag",
											"source": 12,
											"value": "66"
										},
										{
											"begin": 9862,
											"end": 10136,
											"name": "JUMPDEST",
											"source": 12
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "A0"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SHL",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SUB",
											"source": -1
										},
										{
											"begin": 9952,
											"end": 9976,
											"name": "DUP3",
											"source": 12
										},
										{
											"begin": 9952,
											"end": 9976,
											"name": "AND",
											"source": 12
										},
										{
											"begin": 719,
											"end": 729,
											"name": "CALLER",
											"source": 6
										},
										{
											"begin": 9952,
											"end": 9976,
											"name": "EQ",
											"source": 12
										},
										{
											"begin": 9948,
											"end": 10002,
											"name": "ISZERO",
											"source": 12
										},
										{
											"begin": 9948,
											"end": 10002,
											"name": "PUSH [tag]",
											"source": 12,
											"value": "128"
										},
										{
											"begin": 9948,
											"end": 10002,
											"name": "JUMPI",
											"source": 12
										},
										{
											"begin": 9985,
											"end": 10002,
											"name": "PUSH",
											"source": 12,
											"value": "40"
										},
										{
											"begin": 9985,
											"end": 10002,
											"name": "MLOAD",
											"source": 12
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "B06307DB"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "E0"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SHL",
											"source": -1
										},
										{
											"begin": 9985,
											"end": 10002,
											"name": "DUP2",
											"source": 12
										},
										{
											"begin": 9985,
											"end": 10002,
											"name": "MSTORE",
											"source": 12
										},
										{
											"begin": 9985,
											"end": 10002,
											"name": "PUSH",
											"source": 12,
											"value": "4"
										},
										{
											"begin": 9985,
											"end": 10002,
											"name": "ADD",
											"source": 12
										},
										{
											"begin": 9985,
											"end": 10002,
											"name": "PUSH",
											"source": 12,
											"value": "40"
										},
										{
											"begin": 9985,
											"end": 10002,
											"name": "MLOAD",
											"source": 12
										},
										{
											"begin": 9985,
											"end": 10002,
											"name": "DUP1",
											"source": 12
										},
										{
											"begin": 9985,
											"end": 10002,
											"name": "SWAP2",
											"source": 12
										},
										{
											"begin": 9985,
											"end": 10002,
											"name": "SUB",
											"source": 12
										},
										{
											"begin": 9985,
											"end": 10002,
											"name": "SWAP1",
											"source": 12
										},
										{
											"begin": 9985,
											"end": 10002,
											"name": "REVERT",
											"source": 12
										},
										{
											"begin": 9948,
											"end": 10002,
											"name": "tag",
											"source": 12,
											"value": "128"
										},
										{
											"begin": 9948,
											"end": 10002,
											"name": "JUMPDEST",
											"source": 12
										},
										{
											"begin": 719,
											"end": 729,
											"name": "CALLER",
											"source": 6
										},
										{
											"begin": 10013,
											"end": 10045,
											"name": "PUSH",
											"source": 12,
											"value": "0"
										},
										{
											"begin": 10013,
											"end": 10045,
											"name": "DUP2",
											"source": 12
										},
										{
											"begin": 10013,
											"end": 10045,
											"name": "DUP2",
											"source": 12
										},
										{
											"begin": 10013,
											"end": 10045,
											"name": "MSTORE",
											"source": 12
										},
										{
											"begin": 10013,
											"end": 10031,
											"name": "PUSH",
											"source": 12,
											"value": "7"
										},
										{
											"begin": 10013,
											"end": 10045,
											"name": "PUSH",
											"source": 12,
											"value": "20"
										},
										{
											"begin": 10013,
											"end": 10045,
											"name": "SWAP1",
											"source": 12
										},
										{
											"begin": 10013,
											"end": 10045,
											"name": "DUP2",
											"source": 12
										},
										{
											"begin": 10013,
											"end": 10045,
											"name": "MSTORE",
											"source": 12
										},
										{
											"begin": 10013,
											"end": 10045,
											"name": "PUSH",
											"source": 12,
											"value": "40"
										},
										{
											"begin": 10013,
											"end": 10045,
											"name": "DUP1",
											"source": 12
										},
										{
											"begin": 10013,
											"end": 10045,
											"name": "DUP4",
											"source": 12
										},
										{
											"begin": 10013,
											"end": 10045,
											"name": "KECCAK256",
											"source": 12
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "A0"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SHL",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SUB",
											"source": -1
										},
										{
											"begin": 10013,
											"end": 10055,
											"name": "DUP8",
											"source": 12
										},
										{
											"begin": 10013,
											"end": 10055,
											"name": "AND",
											"source": 12
										},
										{
											"begin": 10013,
											"end": 10055,
											"name": "DUP1",
											"source": 12
										},
										{
											"begin": 10013,
											"end": 10055,
											"name": "DUP6",
											"source": 12
										},
										{
											"begin": 10013,
											"end": 10055,
											"name": "MSTORE",
											"source": 12
										},
										{
											"begin": 10013,
											"end": 10055,
											"name": "SWAP1",
											"source": 12
										},
										{
											"begin": 10013,
											"end": 10055,
											"name": "DUP4",
											"source": 12
										},
										{
											"begin": 10013,
											"end": 10055,
											"name": "MSTORE",
											"source": 12
										},
										{
											"begin": 10013,
											"end": 10055,
											"name": "SWAP3",
											"source": 12
										},
										{
											"begin": 10013,
											"end": 10055,
											"name": "DUP2",
											"source": 12
										},
										{
											"begin": 10013,
											"end": 10055,
											"name": "SWAP1",
											"source": 12
										},
										{
											"begin": 10013,
											"end": 10055,
											"name": "KECCAK256",
											"source": 12
										},
										{
											"begin": 10013,
											"end": 10066,
											"name": "DUP1",
											"source": 12
										},
										{
											"begin": 10013,
											"end": 10066,
											"name": "SLOAD",
											"source": 12
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "FF"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "NOT",
											"source": -1
										},
										{
											"begin": 10013,
											"end": 10066,
											"name": "AND",
											"source": 12
										},
										{
											"begin": 10013,
											"end": 10066,
											"name": "DUP7",
											"source": 12
										},
										{
											"begin": 10013,
											"end": 10066,
											"name": "ISZERO",
											"source": 12
										},
										{
											"begin": 10013,
											"end": 10066,
											"name": "ISZERO",
											"source": 12
										},
										{
											"begin": 10013,
											"end": 10066,
											"name": "SWAP1",
											"source": 12
										},
										{
											"begin": 10013,
											"end": 10066,
											"name": "DUP2",
											"source": 12
										},
										{
											"begin": 10013,
											"end": 10066,
											"name": "OR",
											"source": 12
										},
										{
											"begin": 10013,
											"end": 10066,
											"name": "SWAP1",
											"source": 12
										},
										{
											"begin": 10013,
											"end": 10066,
											"name": "SWAP2",
											"source": 12
										},
										{
											"begin": 10013,
											"end": 10066,
											"name": "SSTORE",
											"source": 12
										},
										{
											"begin": 10081,
											"end": 10129,
											"name": "SWAP1",
											"source": 12
										},
										{
											"begin": 10081,
											"end": 10129,
											"name": "MLOAD",
											"source": 12
										},
										{
											"begin": 540,
											"end": 581,
											"name": "SWAP1",
											"source": 13
										},
										{
											"begin": 540,
											"end": 581,
											"name": "DUP2",
											"source": 13
										},
										{
											"begin": 540,
											"end": 581,
											"name": "MSTORE",
											"source": 13
										},
										{
											"begin": 10013,
											"end": 10055,
											"name": "SWAP2",
											"source": 12
										},
										{
											"begin": 10013,
											"end": 10055,
											"name": "SWAP3",
											"source": 12
										},
										{
											"begin": 719,
											"end": 729,
											"name": "SWAP2",
											"source": 6
										},
										{
											"begin": 10081,
											"end": 10129,
											"name": "PUSH",
											"source": 12,
											"value": "17307EAB39AB6107E8899845AD3D59BD9653F200F220920489CA2B5937696C31"
										},
										{
											"begin": 10081,
											"end": 10129,
											"name": "SWAP2",
											"source": 12
										},
										{
											"begin": 513,
											"end": 531,
											"name": "ADD",
											"source": 13
										},
										{
											"begin": 10081,
											"end": 10129,
											"name": "PUSH",
											"source": 12,
											"value": "40"
										},
										{
											"begin": 10081,
											"end": 10129,
											"name": "MLOAD",
											"source": 12
										},
										{
											"begin": 10081,
											"end": 10129,
											"name": "DUP1",
											"source": 12
										},
										{
											"begin": 10081,
											"end": 10129,
											"name": "SWAP2",
											"source": 12
										},
										{
											"begin": 10081,
											"end": 10129,
											"name": "SUB",
											"source": 12
										},
										{
											"begin": 10081,
											"end": 10129,
											"name": "SWAP1",
											"source": 12
										},
										{
											"begin": 10081,
											"end": 10129,
											"name": "LOG3",
											"source": 12
										},
										{
											"begin": 9862,
											"end": 10136,
											"name": "POP",
											"source": 12
										},
										{
											"begin": 9862,
											"end": 10136,
											"name": "POP",
											"source": 12
										},
										{
											"begin": 9862,
											"end": 10136,
											"name": "JUMP",
											"source": 12,
											"value": "[out]"
										},
										{
											"begin": 10901,
											"end": 11260,
											"name": "tag",
											"source": 12,
											"value": "70"
										},
										{
											"begin": 10901,
											"end": 11260,
											"name": "JUMPDEST",
											"source": 12
										},
										{
											"begin": 11062,
											"end": 11090,
											"name": "PUSH [tag]",
											"source": 12,
											"value": "133"
										},
										{
											"begin": 11072,
											"end": 11076,
											"name": "DUP5",
											"source": 12
										},
										{
											"begin": 11078,
											"end": 11080,
											"name": "DUP5",
											"source": 12
										},
										{
											"begin": 11082,
											"end": 11089,
											"name": "DUP5",
											"source": 12
										},
										{
											"begin": 11062,
											"end": 11071,
											"name": "PUSH [tag]",
											"source": 12,
											"value": "112"
										},
										{
											"begin": 11062,
											"end": 11090,
											"name": "JUMP",
											"source": 12,
											"value": "[in]"
										},
										{
											"begin": 11062,
											"end": 11090,
											"name": "tag",
											"source": 12,
											"value": "133"
										},
										{
											"begin": 11062,
											"end": 11090,
											"name": "JUMPDEST",
											"source": 12
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "A0"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SHL",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SUB",
											"source": -1
										},
										{
											"begin": 11104,
											"end": 11117,
											"name": "DUP4",
											"source": 12
										},
										{
											"begin": 11104,
											"end": 11117,
											"name": "AND",
											"source": 12
										},
										{
											"begin": 1465,
											"end": 1484,
											"name": "EXTCODESIZE",
											"source": 5
										},
										{
											"begin": 1465,
											"end": 1488,
											"name": "ISZERO",
											"source": 5
										},
										{
											"begin": 1465,
											"end": 1488,
											"name": "ISZERO",
											"source": 5
										},
										{
											"begin": 11104,
											"end": 11180,
											"name": "DUP1",
											"source": 12
										},
										{
											"begin": 11104,
											"end": 11180,
											"name": "ISZERO",
											"source": 12
										},
										{
											"begin": 11104,
											"end": 11180,
											"name": "PUSH [tag]",
											"source": 12,
											"value": "136"
										},
										{
											"begin": 11104,
											"end": 11180,
											"name": "JUMPI",
											"source": 12
										},
										{
											"begin": 11104,
											"end": 11180,
											"name": "POP",
											"source": 12
										},
										{
											"begin": 11124,
											"end": 11180,
											"name": "PUSH [tag]",
											"source": 12,
											"value": "137"
										},
										{
											"begin": 11155,
											"end": 11159,
											"name": "DUP5",
											"source": 12
										},
										{
											"begin": 11161,
											"end": 11163,
											"name": "DUP5",
											"source": 12
										},
										{
											"begin": 11165,
											"end": 11172,
											"name": "DUP5",
											"source": 12
										},
										{
											"begin": 11174,
											"end": 11179,
											"name": "DUP5",
											"source": 12
										},
										{
											"begin": 11124,
											"end": 11154,
											"name": "PUSH [tag]",
											"source": 12,
											"value": "138"
										},
										{
											"begin": 11124,
											"end": 11180,
											"name": "JUMP",
											"source": 12,
											"value": "[in]"
										},
										{
											"begin": 11124,
											"end": 11180,
											"name": "tag",
											"source": 12,
											"value": "137"
										},
										{
											"begin": 11124,
											"end": 11180,
											"name": "JUMPDEST",
											"source": 12
										},
										{
											"begin": 11123,
											"end": 11180,
											"name": "ISZERO",
											"source": 12
										},
										{
											"begin": 11104,
											"end": 11180,
											"name": "tag",
											"source": 12,
											"value": "136"
										},
										{
											"begin": 11104,
											"end": 11180,
											"name": "JUMPDEST",
											"source": 12
										},
										{
											"begin": 11100,
											"end": 11254,
											"name": "ISZERO",
											"source": 12
										},
										{
											"begin": 11100,
											"end": 11254,
											"name": "PUSH [tag]",
											"source": 12,
											"value": "139"
										},
										{
											"begin": 11100,
											"end": 11254,
											"name": "JUMPI",
											"source": 12
										},
										{
											"begin": 11203,
											"end": 11243,
											"name": "PUSH",
											"source": 12,
											"value": "40"
										},
										{
											"begin": 11203,
											"end": 11243,
											"name": "MLOAD",
											"source": 12
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "68D2BF6B"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "E1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SHL",
											"source": -1
										},
										{
											"begin": 11203,
											"end": 11243,
											"name": "DUP2",
											"source": 12
										},
										{
											"begin": 11203,
											"end": 11243,
											"name": "MSTORE",
											"source": 12
										},
										{
											"begin": 11203,
											"end": 11243,
											"name": "PUSH",
											"source": 12,
											"value": "4"
										},
										{
											"begin": 11203,
											"end": 11243,
											"name": "ADD",
											"source": 12
										},
										{
											"begin": 11203,
											"end": 11243,
											"name": "PUSH",
											"source": 12,
											"value": "40"
										},
										{
											"begin": 11203,
											"end": 11243,
											"name": "MLOAD",
											"source": 12
										},
										{
											"begin": 11203,
											"end": 11243,
											"name": "DUP1",
											"source": 12
										},
										{
											"begin": 11203,
											"end": 11243,
											"name": "SWAP2",
											"source": 12
										},
										{
											"begin": 11203,
											"end": 11243,
											"name": "SUB",
											"source": 12
										},
										{
											"begin": 11203,
											"end": 11243,
											"name": "SWAP1",
											"source": 12
										},
										{
											"begin": 11203,
											"end": 11243,
											"name": "REVERT",
											"source": 12
										},
										{
											"begin": 11100,
											"end": 11254,
											"name": "tag",
											"source": 12,
											"value": "139"
										},
										{
											"begin": 11100,
											"end": 11254,
											"name": "JUMPDEST",
											"source": 12
										},
										{
											"begin": 10901,
											"end": 11260,
											"name": "POP",
											"source": 12
										},
										{
											"begin": 10901,
											"end": 11260,
											"name": "POP",
											"source": 12
										},
										{
											"begin": 10901,
											"end": 11260,
											"name": "POP",
											"source": 12
										},
										{
											"begin": 10901,
											"end": 11260,
											"name": "POP",
											"source": 12
										},
										{
											"begin": 10901,
											"end": 11260,
											"name": "JUMP",
											"source": 12,
											"value": "[out]"
										},
										{
											"begin": 8469,
											"end": 8782,
											"name": "tag",
											"source": 12,
											"value": "73"
										},
										{
											"begin": 8469,
											"end": 8782,
											"name": "JUMPDEST",
											"source": 12
										},
										{
											"begin": 8542,
											"end": 8555,
											"name": "PUSH",
											"source": 12,
											"value": "60"
										},
										{
											"begin": 8572,
											"end": 8588,
											"name": "PUSH [tag]",
											"source": 12,
											"value": "141"
										},
										{
											"begin": 8580,
											"end": 8587,
											"name": "DUP3",
											"source": 12
										},
										{
											"begin": 8572,
											"end": 8579,
											"name": "PUSH [tag]",
											"source": 12,
											"value": "94"
										},
										{
											"begin": 8572,
											"end": 8588,
											"name": "JUMP",
											"source": 12,
											"value": "[in]"
										},
										{
											"begin": 8572,
											"end": 8588,
											"name": "tag",
											"source": 12,
											"value": "141"
										},
										{
											"begin": 8572,
											"end": 8588,
											"name": "JUMPDEST",
											"source": 12
										},
										{
											"begin": 8567,
											"end": 8626,
											"name": "PUSH [tag]",
											"source": 12,
											"value": "142"
										},
										{
											"begin": 8567,
											"end": 8626,
											"name": "JUMPI",
											"source": 12
										},
										{
											"begin": 8597,
											"end": 8626,
											"name": "PUSH",
											"source": 12,
											"value": "40"
										},
										{
											"begin": 8597,
											"end": 8626,
											"name": "MLOAD",
											"source": 12
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "A14C4B5"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "E4"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SHL",
											"source": -1
										},
										{
											"begin": 8597,
											"end": 8626,
											"name": "DUP2",
											"source": 12
										},
										{
											"begin": 8597,
											"end": 8626,
											"name": "MSTORE",
											"source": 12
										},
										{
											"begin": 8597,
											"end": 8626,
											"name": "PUSH",
											"source": 12,
											"value": "4"
										},
										{
											"begin": 8597,
											"end": 8626,
											"name": "ADD",
											"source": 12
										},
										{
											"begin": 8597,
											"end": 8626,
											"name": "PUSH",
											"source": 12,
											"value": "40"
										},
										{
											"begin": 8597,
											"end": 8626,
											"name": "MLOAD",
											"source": 12
										},
										{
											"begin": 8597,
											"end": 8626,
											"name": "DUP1",
											"source": 12
										},
										{
											"begin": 8597,
											"end": 8626,
											"name": "SWAP2",
											"source": 12
										},
										{
											"begin": 8597,
											"end": 8626,
											"name": "SUB",
											"source": 12
										},
										{
											"begin": 8597,
											"end": 8626,
											"name": "SWAP1",
											"source": 12
										},
										{
											"begin": 8597,
											"end": 8626,
											"name": "REVERT",
											"source": 12
										},
										{
											"begin": 8567,
											"end": 8626,
											"name": "tag",
											"source": 12,
											"value": "142"
										},
										{
											"begin": 8567,
											"end": 8626,
											"name": "JUMPDEST",
											"source": 12
										},
										{
											"begin": 8637,
											"end": 8658,
											"name": "PUSH",
											"source": 12,
											"value": "0"
										},
										{
											"begin": 8661,
											"end": 8671,
											"name": "PUSH [tag]",
											"source": 12,
											"value": "143"
										},
										{
											"begin": 9099,
											"end": 9108,
											"name": "PUSH",
											"source": 12,
											"value": "40"
										},
										{
											"begin": 9099,
											"end": 9108,
											"name": "DUP1",
											"source": 12
										},
										{
											"begin": 9099,
											"end": 9108,
											"name": "MLOAD",
											"source": 12
										},
										{
											"begin": 9099,
											"end": 9108,
											"name": "PUSH",
											"source": 12,
											"value": "20"
										},
										{
											"begin": 9099,
											"end": 9108,
											"name": "DUP2",
											"source": 12
										},
										{
											"begin": 9099,
											"end": 9108,
											"name": "ADD",
											"source": 12
										},
										{
											"begin": 9099,
											"end": 9108,
											"name": "SWAP1",
											"source": 12
										},
										{
											"begin": 9099,
											"end": 9108,
											"name": "SWAP2",
											"source": 12
										},
										{
											"begin": 9099,
											"end": 9108,
											"name": "MSTORE",
											"source": 12
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "0"
										},
										{
											"begin": 9099,
											"end": 9108,
											"name": "DUP2",
											"source": 12
										},
										{
											"begin": 9099,
											"end": 9108,
											"name": "MSTORE",
											"source": 12
										},
										{
											"begin": 9099,
											"end": 9108,
											"name": "SWAP1",
											"source": 12
										},
										{
											"begin": 9023,
											"end": 9115,
											"name": "JUMP",
											"source": 12
										},
										{
											"begin": 8661,
											"end": 8671,
											"name": "tag",
											"source": 12,
											"value": "143"
										},
										{
											"begin": 8661,
											"end": 8671,
											"name": "JUMPDEST",
											"source": 12
										},
										{
											"begin": 8637,
											"end": 8671,
											"name": "SWAP1",
											"source": 12
										},
										{
											"begin": 8637,
											"end": 8671,
											"name": "POP",
											"source": 12
										},
										{
											"begin": 8694,
											"end": 8701,
											"name": "DUP1",
											"source": 12
										},
										{
											"begin": 8688,
											"end": 8709,
											"name": "MLOAD",
											"source": 12
										},
										{
											"begin": 8713,
											"end": 8714,
											"name": "PUSH",
											"source": 12,
											"value": "0"
										},
										{
											"begin": 8688,
											"end": 8714,
											"name": "EQ",
											"source": 12
										},
										{
											"begin": 8688,
											"end": 8714,
											"name": "ISZERO",
											"source": 12
										},
										{
											"begin": 8688,
											"end": 8775,
											"name": "PUSH [tag]",
											"source": 12,
											"value": "145"
										},
										{
											"begin": 8688,
											"end": 8775,
											"name": "JUMPI",
											"source": 12
										},
										{
											"begin": 8688,
											"end": 8775,
											"name": "PUSH",
											"source": 12,
											"value": "40"
										},
										{
											"begin": 8688,
											"end": 8775,
											"name": "MLOAD",
											"source": 12
										},
										{
											"begin": 8688,
											"end": 8775,
											"name": "DUP1",
											"source": 12
										},
										{
											"begin": 8688,
											"end": 8775,
											"name": "PUSH",
											"source": 12,
											"value": "20"
										},
										{
											"begin": 8688,
											"end": 8775,
											"name": "ADD",
											"source": 12
										},
										{
											"begin": 8688,
											"end": 8775,
											"name": "PUSH",
											"source": 12,
											"value": "40"
										},
										{
											"begin": 8688,
											"end": 8775,
											"name": "MSTORE",
											"source": 12
										},
										{
											"begin": 8688,
											"end": 8775,
											"name": "DUP1",
											"source": 12
										},
										{
											"begin": 8688,
											"end": 8775,
											"name": "PUSH",
											"source": 12,
											"value": "0"
										},
										{
											"begin": 8688,
											"end": 8775,
											"name": "DUP2",
											"source": 12
										},
										{
											"begin": 8688,
											"end": 8775,
											"name": "MSTORE",
											"source": 12
										},
										{
											"begin": 8688,
											"end": 8775,
											"name": "POP",
											"source": 12
										},
										{
											"begin": 8688,
											"end": 8775,
											"name": "PUSH [tag]",
											"source": 12,
											"value": "146"
										},
										{
											"begin": 8688,
											"end": 8775,
											"name": "JUMP",
											"source": 12
										},
										{
											"begin": 8688,
											"end": 8775,
											"name": "tag",
											"source": 12,
											"value": "145"
										},
										{
											"begin": 8688,
											"end": 8775,
											"name": "JUMPDEST",
											"source": 12
										},
										{
											"begin": 8741,
											"end": 8748,
											"name": "DUP1",
											"source": 12
										},
										{
											"begin": 8750,
											"end": 8768,
											"name": "PUSH [tag]",
											"source": 12,
											"value": "147"
										},
										{
											"begin": 8750,
											"end": 8757,
											"name": "DUP5",
											"source": 12
										},
										{
											"begin": 8750,
											"end": 8766,
											"name": "PUSH [tag]",
											"source": 12,
											"value": "148"
										},
										{
											"begin": 8750,
											"end": 8768,
											"name": "JUMP",
											"source": 12,
											"value": "[in]"
										},
										{
											"begin": 8750,
											"end": 8768,
											"name": "tag",
											"source": 12,
											"value": "147"
										},
										{
											"begin": 8750,
											"end": 8768,
											"name": "JUMPDEST",
											"source": 12
										},
										{
											"begin": 8724,
											"end": 8769,
											"name": "PUSH",
											"source": 12,
											"value": "40"
										},
										{
											"begin": 8724,
											"end": 8769,
											"name": "MLOAD",
											"source": 12
										},
										{
											"begin": 8724,
											"end": 8769,
											"name": "PUSH",
											"source": 12,
											"value": "20"
										},
										{
											"begin": 8724,
											"end": 8769,
											"name": "ADD",
											"source": 12
										},
										{
											"begin": 8724,
											"end": 8769,
											"name": "PUSH [tag]",
											"source": 12,
											"value": "149"
										},
										{
											"begin": 8724,
											"end": 8769,
											"name": "SWAP3",
											"source": 12
										},
										{
											"begin": 8724,
											"end": 8769,
											"name": "SWAP2",
											"source": 12
										},
										{
											"begin": 8724,
											"end": 8769,
											"name": "SWAP1",
											"source": 12
										},
										{
											"begin": 8724,
											"end": 8769,
											"name": "PUSH [tag]",
											"source": 12,
											"value": "150"
										},
										{
											"begin": 8724,
											"end": 8769,
											"name": "JUMP",
											"source": 12,
											"value": "[in]"
										},
										{
											"begin": 8724,
											"end": 8769,
											"name": "tag",
											"source": 12,
											"value": "149"
										},
										{
											"begin": 8724,
											"end": 8769,
											"name": "JUMPDEST",
											"source": 12
										},
										{
											"begin": 8724,
											"end": 8769,
											"name": "PUSH",
											"source": 12,
											"value": "40"
										},
										{
											"begin": 8724,
											"end": 8769,
											"name": "MLOAD",
											"source": 12
										},
										{
											"begin": 8724,
											"end": 8769,
											"name": "PUSH",
											"source": 12,
											"value": "20"
										},
										{
											"begin": 8724,
											"end": 8769,
											"name": "DUP2",
											"source": 12
										},
										{
											"begin": 8724,
											"end": 8769,
											"name": "DUP4",
											"source": 12
										},
										{
											"begin": 8724,
											"end": 8769,
											"name": "SUB",
											"source": 12
										},
										{
											"begin": 8724,
											"end": 8769,
											"name": "SUB",
											"source": 12
										},
										{
											"begin": 8724,
											"end": 8769,
											"name": "DUP2",
											"source": 12
										},
										{
											"begin": 8724,
											"end": 8769,
											"name": "MSTORE",
											"source": 12
										},
										{
											"begin": 8724,
											"end": 8769,
											"name": "SWAP1",
											"source": 12
										},
										{
											"begin": 8724,
											"end": 8769,
											"name": "PUSH",
											"source": 12,
											"value": "40"
										},
										{
											"begin": 8724,
											"end": 8769,
											"name": "MSTORE",
											"source": 12
										},
										{
											"begin": 8688,
											"end": 8775,
											"name": "tag",
											"source": 12,
											"value": "146"
										},
										{
											"begin": 8688,
											"end": 8775,
											"name": "JUMPDEST",
											"source": 12
										},
										{
											"begin": 8681,
											"end": 8775,
											"name": "SWAP4",
											"source": 12
										},
										{
											"begin": 8469,
											"end": 8782,
											"name": "SWAP3",
											"source": 12
										},
										{
											"begin": -1,
											"end": -1,
											"name": "POP",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "POP",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "POP",
											"source": -1
										},
										{
											"begin": 8469,
											"end": 8782,
											"name": "JUMP",
											"source": 12,
											"value": "[out]"
										},
										{
											"begin": 11506,
											"end": 11690,
											"name": "tag",
											"source": 12,
											"value": "94"
										},
										{
											"begin": 11506,
											"end": 11690,
											"name": "JUMPDEST",
											"source": 12
										},
										{
											"begin": 11563,
											"end": 11567,
											"name": "PUSH",
											"source": 12,
											"value": "0"
										},
										{
											"begin": 11626,
											"end": 11639,
											"name": "DUP1",
											"source": 12
										},
										{
											"begin": 11626,
											"end": 11639,
											"name": "SLOAD",
											"source": 12
										},
										{
											"begin": 11616,
											"end": 11623,
											"name": "DUP3",
											"source": 12
										},
										{
											"begin": 11616,
											"end": 11639,
											"name": "LT",
											"source": 12
										},
										{
											"begin": 11586,
											"end": 11683,
											"name": "DUP1",
											"source": 12
										},
										{
											"begin": 11586,
											"end": 11683,
											"name": "ISZERO",
											"source": 12
										},
										{
											"begin": 11586,
											"end": 11683,
											"name": "PUSH [tag]",
											"source": 12,
											"value": "83"
										},
										{
											"begin": 11586,
											"end": 11683,
											"name": "JUMPI",
											"source": 12
										},
										{
											"begin": -1,
											"end": -1,
											"name": "POP",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "POP",
											"source": -1
										},
										{
											"begin": 11656,
											"end": 11676,
											"name": "PUSH",
											"source": 12,
											"value": "0"
										},
										{
											"begin": 11656,
											"end": 11676,
											"name": "SWAP1",
											"source": 12
										},
										{
											"begin": 11656,
											"end": 11676,
											"name": "DUP2",
											"source": 12
										},
										{
											"begin": 11656,
											"end": 11676,
											"name": "MSTORE",
											"source": 12
										},
										{
											"begin": 11656,
											"end": 11667,
											"name": "PUSH",
											"source": 12,
											"value": "4"
										},
										{
											"begin": 11656,
											"end": 11676,
											"name": "PUSH",
											"source": 12,
											"value": "20"
										},
										{
											"begin": 11656,
											"end": 11676,
											"name": "MSTORE",
											"source": 12
										},
										{
											"begin": 11656,
											"end": 11676,
											"name": "PUSH",
											"source": 12,
											"value": "40"
										},
										{
											"begin": 11656,
											"end": 11676,
											"name": "SWAP1",
											"source": 12
										},
										{
											"begin": 11656,
											"end": 11676,
											"name": "KECCAK256",
											"source": 12
										},
										{
											"begin": 11656,
											"end": 11683,
											"name": "SLOAD",
											"source": 12
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "E0"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SHL",
											"source": -1
										},
										{
											"begin": 11656,
											"end": 11683,
											"name": "SWAP1",
											"source": 12
										},
										{
											"begin": 11656,
											"end": 11683,
											"name": "DIV",
											"source": 12
										},
										{
											"begin": 11656,
											"end": 11683,
											"name": "PUSH",
											"source": 12,
											"value": "FF"
										},
										{
											"begin": 11656,
											"end": 11683,
											"name": "AND",
											"source": 12
										},
										{
											"begin": 11655,
											"end": 11683,
											"name": "ISZERO",
											"source": 12
										},
										{
											"begin": 11655,
											"end": 11683,
											"name": "SWAP1",
											"source": 12
										},
										{
											"begin": 11506,
											"end": 11690,
											"name": "JUMP",
											"source": 12,
											"value": "[out]"
										},
										{
											"begin": 18922,
											"end": 19111,
											"name": "tag",
											"source": 12,
											"value": "106"
										},
										{
											"begin": 18922,
											"end": 19111,
											"name": "JUMPDEST",
											"source": 12
										},
										{
											"begin": 19032,
											"end": 19056,
											"name": "PUSH",
											"source": 12,
											"value": "0"
										},
										{
											"begin": 19032,
											"end": 19056,
											"name": "DUP3",
											"source": 12
										},
										{
											"begin": 19032,
											"end": 19056,
											"name": "DUP2",
											"source": 12
										},
										{
											"begin": 19032,
											"end": 19056,
											"name": "MSTORE",
											"source": 12
										},
										{
											"begin": 19032,
											"end": 19047,
											"name": "PUSH",
											"source": 12,
											"value": "6"
										},
										{
											"begin": 19032,
											"end": 19056,
											"name": "PUSH",
											"source": 12,
											"value": "20"
										},
										{
											"begin": 19032,
											"end": 19056,
											"name": "MSTORE",
											"source": 12
										},
										{
											"begin": 19032,
											"end": 19056,
											"name": "PUSH",
											"source": 12,
											"value": "40"
										},
										{
											"begin": 19032,
											"end": 19056,
											"name": "DUP1",
											"source": 12
										},
										{
											"begin": 19032,
											"end": 19056,
											"name": "DUP3",
											"source": 12
										},
										{
											"begin": 19032,
											"end": 19056,
											"name": "KECCAK256",
											"source": 12
										},
										{
											"begin": 19032,
											"end": 19061,
											"name": "DUP1",
											"source": 12
										},
										{
											"begin": 19032,
											"end": 19061,
											"name": "SLOAD",
											"source": 12
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "A0"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SHL",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SUB",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "NOT",
											"source": -1
										},
										{
											"begin": 19032,
											"end": 19061,
											"name": "AND",
											"source": 12
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "A0"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SHL",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SUB",
											"source": -1
										},
										{
											"begin": 19032,
											"end": 19061,
											"name": "DUP8",
											"source": 12
										},
										{
											"begin": 19032,
											"end": 19061,
											"name": "DUP2",
											"source": 12
										},
										{
											"begin": 19032,
											"end": 19061,
											"name": "AND",
											"source": 12
										},
										{
											"begin": 19032,
											"end": 19061,
											"name": "SWAP2",
											"source": 12
										},
										{
											"begin": 19032,
											"end": 19061,
											"name": "DUP3",
											"source": 12
										},
										{
											"begin": 19032,
											"end": 19061,
											"name": "OR",
											"source": 12
										},
										{
											"begin": 19032,
											"end": 19061,
											"name": "SWAP1",
											"source": 12
										},
										{
											"begin": 19032,
											"end": 19061,
											"name": "SWAP3",
											"source": 12
										},
										{
											"begin": 19032,
											"end": 19061,
											"name": "SSTORE",
											"source": 12
										},
										{
											"begin": 19076,
											"end": 19104,
											"name": "SWAP2",
											"source": 12
										},
										{
											"begin": 19076,
											"end": 19104,
											"name": "MLOAD",
											"source": 12
										},
										{
											"begin": 19032,
											"end": 19056,
											"name": "DUP6",
											"source": 12
										},
										{
											"begin": 19032,
											"end": 19056,
											"name": "SWAP4",
											"source": 12
										},
										{
											"begin": 19076,
											"end": 19104,
											"name": "SWAP2",
											"source": 12
										},
										{
											"begin": 19076,
											"end": 19104,
											"name": "DUP6",
											"source": 12
										},
										{
											"begin": 19076,
											"end": 19104,
											"name": "AND",
											"source": 12
										},
										{
											"begin": 19076,
											"end": 19104,
											"name": "SWAP2",
											"source": 12
										},
										{
											"begin": 19076,
											"end": 19104,
											"name": "PUSH",
											"source": 12,
											"value": "8C5BE1E5EBEC7D5BD14F71427D1E84F3DD0314C0F7B2291E5B200AC8C7C3B925"
										},
										{
											"begin": 19076,
											"end": 19104,
											"name": "SWAP2",
											"source": 12
										},
										{
											"begin": 19076,
											"end": 19104,
											"name": "LOG4",
											"source": 12
										},
										{
											"begin": 18922,
											"end": 19111,
											"name": "POP",
											"source": 12
										},
										{
											"begin": 18922,
											"end": 19111,
											"name": "POP",
											"source": 12
										},
										{
											"begin": 18922,
											"end": 19111,
											"name": "POP",
											"source": 12
										},
										{
											"begin": 18922,
											"end": 19111,
											"name": "JUMP",
											"source": 12,
											"value": "[out]"
										},
										{
											"begin": 14528,
											"end": 16595,
											"name": "tag",
											"source": 12,
											"value": "112"
										},
										{
											"begin": 14528,
											"end": 16595,
											"name": "JUMPDEST",
											"source": 12
										},
										{
											"begin": 14638,
											"end": 14673,
											"name": "PUSH",
											"source": 12,
											"value": "0"
										},
										{
											"begin": 14676,
											"end": 14696,
											"name": "PUSH [tag]",
											"source": 12,
											"value": "161"
										},
										{
											"begin": 14688,
											"end": 14695,
											"name": "DUP3",
											"source": 12
										},
										{
											"begin": 14676,
											"end": 14687,
											"name": "PUSH [tag]",
											"source": 12,
											"value": "117"
										},
										{
											"begin": 14676,
											"end": 14696,
											"name": "JUMP",
											"source": 12,
											"value": "[in]"
										},
										{
											"begin": 14676,
											"end": 14696,
											"name": "tag",
											"source": 12,
											"value": "161"
										},
										{
											"begin": 14676,
											"end": 14696,
											"name": "JUMPDEST",
											"source": 12
										},
										{
											"begin": 14749,
											"end": 14767,
											"name": "DUP1",
											"source": 12
										},
										{
											"begin": 14749,
											"end": 14767,
											"name": "MLOAD",
											"source": 12
										},
										{
											"begin": 14638,
											"end": 14696,
											"name": "SWAP1",
											"source": 12
										},
										{
											"begin": 14638,
											"end": 14696,
											"name": "SWAP2",
											"source": 12
										},
										{
											"begin": -1,
											"end": -1,
											"name": "POP",
											"source": -1
										},
										{
											"begin": 14707,
											"end": 14729,
											"name": "PUSH",
											"source": 12,
											"value": "0"
										},
										{
											"begin": 14707,
											"end": 14729,
											"name": "SWAP1",
											"source": 12
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "A0"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SHL",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SUB",
											"source": -1
										},
										{
											"begin": 14733,
											"end": 14767,
											"name": "AND",
											"source": 12
										},
										{
											"begin": 719,
											"end": 729,
											"name": "CALLER",
											"source": 6
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "A0"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SHL",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SUB",
											"source": -1
										},
										{
											"begin": 14733,
											"end": 14767,
											"name": "AND",
											"source": 12
										},
										{
											"begin": 14733,
											"end": 14767,
											"name": "EQ",
											"source": 12
										},
										{
											"begin": 14733,
											"end": 14833,
											"name": "DUP1",
											"source": 12
										},
										{
											"begin": 14733,
											"end": 14833,
											"name": "PUSH [tag]",
											"source": 12,
											"value": "164"
										},
										{
											"begin": 14733,
											"end": 14833,
											"name": "JUMPI",
											"source": 12
										},
										{
											"begin": -1,
											"end": -1,
											"name": "POP",
											"source": -1
										},
										{
											"begin": 14800,
											"end": 14818,
											"name": "DUP2",
											"source": 12
										},
										{
											"begin": 14800,
											"end": 14818,
											"name": "MLOAD",
											"source": 12
										},
										{
											"begin": 14783,
											"end": 14833,
											"name": "PUSH [tag]",
											"source": 12,
											"value": "164"
										},
										{
											"begin": 14783,
											"end": 14833,
											"name": "SWAP1",
											"source": 12
										},
										{
											"begin": 719,
											"end": 729,
											"name": "CALLER",
											"source": 6
										},
										{
											"begin": 10202,
											"end": 10364,
											"name": "PUSH [tag]",
											"source": 12,
											"value": "76"
										},
										{
											"begin": 10202,
											"end": 10364,
											"name": "JUMP",
											"source": 12,
											"value": "[in]"
										},
										{
											"begin": 14783,
											"end": 14833,
											"name": "tag",
											"source": 12,
											"value": "164"
										},
										{
											"begin": 14783,
											"end": 14833,
											"name": "JUMPDEST",
											"source": 12
										},
										{
											"begin": 14733,
											"end": 14885,
											"name": "DUP1",
											"source": 12
										},
										{
											"begin": 14733,
											"end": 14885,
											"name": "PUSH [tag]",
											"source": 12,
											"value": "166"
										},
										{
											"begin": 14733,
											"end": 14885,
											"name": "JUMPI",
											"source": 12
										},
										{
											"begin": -1,
											"end": -1,
											"name": "POP",
											"source": -1
										},
										{
											"begin": 719,
											"end": 729,
											"name": "CALLER",
											"source": 6
										},
										{
											"begin": 14849,
											"end": 14869,
											"name": "PUSH [tag]",
											"source": 12,
											"value": "168"
										},
										{
											"begin": 14861,
											"end": 14868,
											"name": "DUP5",
											"source": 12
										},
										{
											"begin": 14849,
											"end": 14860,
											"name": "PUSH [tag]",
											"source": 12,
											"value": "33"
										},
										{
											"begin": 14849,
											"end": 14869,
											"name": "JUMP",
											"source": 12,
											"value": "[in]"
										},
										{
											"begin": 14849,
											"end": 14869,
											"name": "tag",
											"source": 12,
											"value": "168"
										},
										{
											"begin": 14849,
											"end": 14869,
											"name": "JUMPDEST",
											"source": 12
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "A0"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SHL",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SUB",
											"source": -1
										},
										{
											"begin": 14849,
											"end": 14885,
											"name": "AND",
											"source": 12
										},
										{
											"begin": 14849,
											"end": 14885,
											"name": "EQ",
											"source": 12
										},
										{
											"begin": 14733,
											"end": 14885,
											"name": "tag",
											"source": 12,
											"value": "166"
										},
										{
											"begin": 14733,
											"end": 14885,
											"name": "JUMPDEST",
											"source": 12
										},
										{
											"begin": 14707,
											"end": 14886,
											"name": "SWAP1",
											"source": 12
										},
										{
											"begin": 14707,
											"end": 14886,
											"name": "POP",
											"source": 12
										},
										{
											"begin": 14902,
											"end": 14919,
											"name": "DUP1",
											"source": 12
										},
										{
											"begin": 14897,
											"end": 14963,
											"name": "PUSH [tag]",
											"source": 12,
											"value": "169"
										},
										{
											"begin": 14897,
											"end": 14963,
											"name": "JUMPI",
											"source": 12
										},
										{
											"begin": 14928,
											"end": 14963,
											"name": "PUSH",
											"source": 12,
											"value": "40"
										},
										{
											"begin": 14928,
											"end": 14963,
											"name": "MLOAD",
											"source": 12
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "2CE44B5F"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "E1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SHL",
											"source": -1
										},
										{
											"begin": 14928,
											"end": 14963,
											"name": "DUP2",
											"source": 12
										},
										{
											"begin": 14928,
											"end": 14963,
											"name": "MSTORE",
											"source": 12
										},
										{
											"begin": 14928,
											"end": 14963,
											"name": "PUSH",
											"source": 12,
											"value": "4"
										},
										{
											"begin": 14928,
											"end": 14963,
											"name": "ADD",
											"source": 12
										},
										{
											"begin": 14928,
											"end": 14963,
											"name": "PUSH",
											"source": 12,
											"value": "40"
										},
										{
											"begin": 14928,
											"end": 14963,
											"name": "MLOAD",
											"source": 12
										},
										{
											"begin": 14928,
											"end": 14963,
											"name": "DUP1",
											"source": 12
										},
										{
											"begin": 14928,
											"end": 14963,
											"name": "SWAP2",
											"source": 12
										},
										{
											"begin": 14928,
											"end": 14963,
											"name": "SUB",
											"source": 12
										},
										{
											"begin": 14928,
											"end": 14963,
											"name": "SWAP1",
											"source": 12
										},
										{
											"begin": 14928,
											"end": 14963,
											"name": "REVERT",
											"source": 12
										},
										{
											"begin": 14897,
											"end": 14963,
											"name": "tag",
											"source": 12,
											"value": "169"
										},
										{
											"begin": 14897,
											"end": 14963,
											"name": "JUMPDEST",
											"source": 12
										},
										{
											"begin": 14999,
											"end": 15003,
											"name": "DUP5",
											"source": 12
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "A0"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SHL",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SUB",
											"source": -1
										},
										{
											"begin": 14977,
											"end": 15003,
											"name": "AND",
											"source": 12
										},
										{
											"begin": 14977,
											"end": 14990,
											"name": "DUP3",
											"source": 12
										},
										{
											"begin": 14977,
											"end": 14995,
											"name": "PUSH",
											"source": 12,
											"value": "0"
										},
										{
											"begin": 14977,
											"end": 14995,
											"name": "ADD",
											"source": 12
										},
										{
											"begin": 14977,
											"end": 14995,
											"name": "MLOAD",
											"source": 12
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "A0"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SHL",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SUB",
											"source": -1
										},
										{
											"begin": 14977,
											"end": 15003,
											"name": "AND",
											"source": 12
										},
										{
											"begin": 14977,
											"end": 15003,
											"name": "EQ",
											"source": 12
										},
										{
											"begin": 14973,
											"end": 15040,
											"name": "PUSH [tag]",
											"source": 12,
											"value": "170"
										},
										{
											"begin": 14973,
											"end": 15040,
											"name": "JUMPI",
											"source": 12
										},
										{
											"begin": 15012,
											"end": 15040,
											"name": "PUSH",
											"source": 12,
											"value": "40"
										},
										{
											"begin": 15012,
											"end": 15040,
											"name": "MLOAD",
											"source": 12
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "A11481"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "E8"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SHL",
											"source": -1
										},
										{
											"begin": 15012,
											"end": 15040,
											"name": "DUP2",
											"source": 12
										},
										{
											"begin": 15012,
											"end": 15040,
											"name": "MSTORE",
											"source": 12
										},
										{
											"begin": 15012,
											"end": 15040,
											"name": "PUSH",
											"source": 12,
											"value": "4"
										},
										{
											"begin": 15012,
											"end": 15040,
											"name": "ADD",
											"source": 12
										},
										{
											"begin": 15012,
											"end": 15040,
											"name": "PUSH",
											"source": 12,
											"value": "40"
										},
										{
											"begin": 15012,
											"end": 15040,
											"name": "MLOAD",
											"source": 12
										},
										{
											"begin": 15012,
											"end": 15040,
											"name": "DUP1",
											"source": 12
										},
										{
											"begin": 15012,
											"end": 15040,
											"name": "SWAP2",
											"source": 12
										},
										{
											"begin": 15012,
											"end": 15040,
											"name": "SUB",
											"source": 12
										},
										{
											"begin": 15012,
											"end": 15040,
											"name": "SWAP1",
											"source": 12
										},
										{
											"begin": 15012,
											"end": 15040,
											"name": "REVERT",
											"source": 12
										},
										{
											"begin": 14973,
											"end": 15040,
											"name": "tag",
											"source": 12,
											"value": "170"
										},
										{
											"begin": 14973,
											"end": 15040,
											"name": "JUMPDEST",
											"source": 12
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "A0"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SHL",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SUB",
											"source": -1
										},
										{
											"begin": 15054,
											"end": 15070,
											"name": "DUP5",
											"source": 12
										},
										{
											"begin": 15054,
											"end": 15070,
											"name": "AND",
											"source": 12
										},
										{
											"begin": 15050,
											"end": 15102,
											"name": "PUSH [tag]",
											"source": 12,
											"value": "171"
										},
										{
											"begin": 15050,
											"end": 15102,
											"name": "JUMPI",
											"source": 12
										},
										{
											"begin": 15079,
											"end": 15102,
											"name": "PUSH",
											"source": 12,
											"value": "40"
										},
										{
											"begin": 15079,
											"end": 15102,
											"name": "MLOAD",
											"source": 12
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "3A954ECD"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "E2"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SHL",
											"source": -1
										},
										{
											"begin": 15079,
											"end": 15102,
											"name": "DUP2",
											"source": 12
										},
										{
											"begin": 15079,
											"end": 15102,
											"name": "MSTORE",
											"source": 12
										},
										{
											"begin": 15079,
											"end": 15102,
											"name": "PUSH",
											"source": 12,
											"value": "4"
										},
										{
											"begin": 15079,
											"end": 15102,
											"name": "ADD",
											"source": 12
										},
										{
											"begin": 15079,
											"end": 15102,
											"name": "PUSH",
											"source": 12,
											"value": "40"
										},
										{
											"begin": 15079,
											"end": 15102,
											"name": "MLOAD",
											"source": 12
										},
										{
											"begin": 15079,
											"end": 15102,
											"name": "DUP1",
											"source": 12
										},
										{
											"begin": 15079,
											"end": 15102,
											"name": "SWAP2",
											"source": 12
										},
										{
											"begin": 15079,
											"end": 15102,
											"name": "SUB",
											"source": 12
										},
										{
											"begin": 15079,
											"end": 15102,
											"name": "SWAP1",
											"source": 12
										},
										{
											"begin": 15079,
											"end": 15102,
											"name": "REVERT",
											"source": 12
										},
										{
											"begin": 15050,
											"end": 15102,
											"name": "tag",
											"source": 12,
											"value": "171"
										},
										{
											"begin": 15050,
											"end": 15102,
											"name": "JUMPDEST",
											"source": 12
										},
										{
											"begin": 15218,
											"end": 15267,
											"name": "PUSH [tag]",
											"source": 12,
											"value": "174"
										},
										{
											"begin": 15235,
											"end": 15236,
											"name": "PUSH",
											"source": 12,
											"value": "0"
										},
										{
											"begin": 15239,
											"end": 15246,
											"name": "DUP5",
											"source": 12
										},
										{
											"begin": 15248,
											"end": 15261,
											"name": "DUP5",
											"source": 12
										},
										{
											"begin": 15248,
											"end": 15266,
											"name": "PUSH",
											"source": 12,
											"value": "0"
										},
										{
											"begin": 15248,
											"end": 15266,
											"name": "ADD",
											"source": 12
										},
										{
											"begin": 15248,
											"end": 15266,
											"name": "MLOAD",
											"source": 12
										},
										{
											"begin": 15218,
											"end": 15226,
											"name": "PUSH [tag]",
											"source": 12,
											"value": "106"
										},
										{
											"begin": 15218,
											"end": 15267,
											"name": "JUMP",
											"source": 12,
											"value": "[in]"
										},
										{
											"begin": 15218,
											"end": 15267,
											"name": "tag",
											"source": 12,
											"value": "174"
										},
										{
											"begin": 15218,
											"end": 15267,
											"name": "JUMPDEST",
											"source": 12
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "A0"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SHL",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SUB",
											"source": -1
										},
										{
											"begin": 15557,
											"end": 15575,
											"name": "DUP6",
											"source": 12
										},
										{
											"begin": 15557,
											"end": 15575,
											"name": "DUP2",
											"source": 12
										},
										{
											"begin": 15557,
											"end": 15575,
											"name": "AND",
											"source": 12
										},
										{
											"begin": 15557,
											"end": 15575,
											"name": "PUSH",
											"source": 12,
											"value": "0"
										},
										{
											"begin": 15557,
											"end": 15575,
											"name": "SWAP1",
											"source": 12
										},
										{
											"begin": 15557,
											"end": 15575,
											"name": "DUP2",
											"source": 12
										},
										{
											"begin": 15557,
											"end": 15575,
											"name": "MSTORE",
											"source": 12
										},
										{
											"begin": 15557,
											"end": 15569,
											"name": "PUSH",
											"source": 12,
											"value": "5"
										},
										{
											"begin": 15557,
											"end": 15575,
											"name": "PUSH",
											"source": 12,
											"value": "20"
										},
										{
											"begin": 15557,
											"end": 15575,
											"name": "SWAP1",
											"source": 12
										},
										{
											"begin": 15557,
											"end": 15575,
											"name": "DUP2",
											"source": 12
										},
										{
											"begin": 15557,
											"end": 15575,
											"name": "MSTORE",
											"source": 12
										},
										{
											"begin": 15557,
											"end": 15575,
											"name": "PUSH",
											"source": 12,
											"value": "40"
										},
										{
											"begin": 15557,
											"end": 15575,
											"name": "DUP1",
											"source": 12
										},
										{
											"begin": 15557,
											"end": 15575,
											"name": "DUP4",
											"source": 12
										},
										{
											"begin": 15557,
											"end": 15575,
											"name": "KECCAK256",
											"source": 12
										},
										{
											"begin": 15557,
											"end": 15588,
											"name": "DUP1",
											"source": 12
										},
										{
											"begin": 15557,
											"end": 15588,
											"name": "SLOAD",
											"source": 12
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "FFFFFFFFFFFFFFFF"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "NOT",
											"source": -1
										},
										{
											"begin": 15557,
											"end": 15588,
											"name": "DUP1",
											"source": 12
										},
										{
											"begin": 15557,
											"end": 15588,
											"name": "DUP3",
											"source": 12
										},
										{
											"begin": 15557,
											"end": 15588,
											"name": "AND",
											"source": 12
										},
										{
											"begin": 15557,
											"end": 15588,
											"name": "PUSH",
											"source": 12,
											"value": "FFFFFFFFFFFFFFFF"
										},
										{
											"begin": 15557,
											"end": 15588,
											"name": "SWAP3",
											"source": 12
										},
										{
											"begin": 15557,
											"end": 15588,
											"name": "DUP4",
											"source": 12
										},
										{
											"begin": 15557,
											"end": 15588,
											"name": "AND",
											"source": 12
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "0"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "NOT",
											"source": -1
										},
										{
											"begin": 15557,
											"end": 15588,
											"name": "ADD",
											"source": 12
										},
										{
											"begin": 15557,
											"end": 15588,
											"name": "DUP4",
											"source": 12
										},
										{
											"begin": 15557,
											"end": 15588,
											"name": "AND",
											"source": 12
										},
										{
											"begin": 15557,
											"end": 15588,
											"name": "OR",
											"source": 12
										},
										{
											"begin": 15557,
											"end": 15588,
											"name": "SWAP1",
											"source": 12
										},
										{
											"begin": 15557,
											"end": 15588,
											"name": "SWAP3",
											"source": 12
										},
										{
											"begin": 15557,
											"end": 15588,
											"name": "SSTORE",
											"source": 12
										},
										{
											"begin": 15602,
											"end": 15618,
											"name": "DUP10",
											"source": 12
										},
										{
											"begin": 15602,
											"end": 15618,
											"name": "DUP7",
											"source": 12
										},
										{
											"begin": 15602,
											"end": 15618,
											"name": "AND",
											"source": 12
										},
										{
											"begin": 15602,
											"end": 15618,
											"name": "DUP1",
											"source": 12
										},
										{
											"begin": 15602,
											"end": 15618,
											"name": "DUP7",
											"source": 12
										},
										{
											"begin": 15602,
											"end": 15618,
											"name": "MSTORE",
											"source": 12
										},
										{
											"begin": 15602,
											"end": 15618,
											"name": "DUP4",
											"source": 12
										},
										{
											"begin": 15602,
											"end": 15618,
											"name": "DUP7",
											"source": 12
										},
										{
											"begin": 15602,
											"end": 15618,
											"name": "KECCAK256",
											"source": 12
										},
										{
											"begin": 15602,
											"end": 15631,
											"name": "DUP1",
											"source": 12
										},
										{
											"begin": 15602,
											"end": 15631,
											"name": "SLOAD",
											"source": 12
										},
										{
											"begin": 15602,
											"end": 15631,
											"name": "SWAP4",
											"source": 12
										},
										{
											"begin": 15602,
											"end": 15631,
											"name": "DUP5",
											"source": 12
										},
										{
											"begin": 15602,
											"end": 15631,
											"name": "AND",
											"source": 12
										},
										{
											"begin": 15602,
											"end": 15631,
											"name": "SWAP4",
											"source": 12
										},
										{
											"begin": 15602,
											"end": 15631,
											"name": "DUP4",
											"source": 12
										},
										{
											"begin": 15602,
											"end": 15631,
											"name": "AND",
											"source": 12
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": 15602,
											"end": 15631,
											"name": "SWAP1",
											"source": 12
										},
										{
											"begin": 15602,
											"end": 15631,
											"name": "DUP2",
											"source": 12
										},
										{
											"begin": 15602,
											"end": 15631,
											"name": "ADD",
											"source": 12
										},
										{
											"begin": 15602,
											"end": 15631,
											"name": "DUP5",
											"source": 12
										},
										{
											"begin": 15602,
											"end": 15631,
											"name": "AND",
											"source": 12
										},
										{
											"begin": 15602,
											"end": 15631,
											"name": "SWAP5",
											"source": 12
										},
										{
											"begin": 15602,
											"end": 15631,
											"name": "SWAP1",
											"source": 12
										},
										{
											"begin": 15602,
											"end": 15631,
											"name": "SWAP5",
											"source": 12
										},
										{
											"begin": 15602,
											"end": 15631,
											"name": "OR",
											"source": 12
										},
										{
											"begin": 15602,
											"end": 15631,
											"name": "SWAP1",
											"source": 12
										},
										{
											"begin": 15602,
											"end": 15631,
											"name": "SSTORE",
											"source": 12
										},
										{
											"begin": 15646,
											"end": 15666,
											"name": "DUP10",
											"source": 12
										},
										{
											"begin": 15646,
											"end": 15666,
											"name": "DUP7",
											"source": 12
										},
										{
											"begin": 15646,
											"end": 15666,
											"name": "MSTORE",
											"source": 12
										},
										{
											"begin": 15646,
											"end": 15657,
											"name": "PUSH",
											"source": 12,
											"value": "4"
										},
										{
											"begin": 15646,
											"end": 15666,
											"name": "SWAP1",
											"source": 12
										},
										{
											"begin": 15646,
											"end": 15666,
											"name": "SWAP5",
											"source": 12
										},
										{
											"begin": 15646,
											"end": 15666,
											"name": "MSTORE",
											"source": 12
										},
										{
											"begin": 15646,
											"end": 15666,
											"name": "DUP3",
											"source": 12
										},
										{
											"begin": 15646,
											"end": 15666,
											"name": "DUP6",
											"source": 12
										},
										{
											"begin": 15646,
											"end": 15666,
											"name": "KECCAK256",
											"source": 12
										},
										{
											"begin": 15646,
											"end": 15676,
											"name": "DUP1",
											"source": 12
										},
										{
											"begin": 15646,
											"end": 15676,
											"name": "SLOAD",
											"source": 12
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "E0"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SHL",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SUB",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "NOT",
											"source": -1
										},
										{
											"begin": 15690,
											"end": 15751,
											"name": "AND",
											"source": 12
										},
										{
											"begin": 15690,
											"end": 15751,
											"name": "SWAP1",
											"source": 12
										},
										{
											"begin": 15690,
											"end": 15751,
											"name": "SWAP5",
											"source": 12
										},
										{
											"begin": 15690,
											"end": 15751,
											"name": "OR",
											"source": 12
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "A0"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SHL",
											"source": -1
										},
										{
											"begin": 15735,
											"end": 15750,
											"name": "TIMESTAMP",
											"source": 12
										},
										{
											"begin": 15690,
											"end": 15751,
											"name": "SWAP1",
											"source": 12
										},
										{
											"begin": 15690,
											"end": 15751,
											"name": "SWAP3",
											"source": 12
										},
										{
											"begin": 15690,
											"end": 15751,
											"name": "AND",
											"source": 12
										},
										{
											"begin": 15690,
											"end": 15751,
											"name": "SWAP2",
											"source": 12
										},
										{
											"begin": 15690,
											"end": 15751,
											"name": "SWAP1",
											"source": 12
										},
										{
											"begin": 15690,
											"end": 15751,
											"name": "SWAP2",
											"source": 12
										},
										{
											"begin": 15690,
											"end": 15751,
											"name": "MUL",
											"source": 12
										},
										{
											"begin": 15690,
											"end": 15751,
											"name": "OR",
											"source": 12
										},
										{
											"begin": 15690,
											"end": 15751,
											"name": "SWAP1",
											"source": 12
										},
										{
											"begin": 15690,
											"end": 15751,
											"name": "SWAP3",
											"source": 12
										},
										{
											"begin": 15690,
											"end": 15751,
											"name": "SSTORE",
											"source": 12
										},
										{
											"begin": 16021,
											"end": 16032,
											"name": "SWAP1",
											"source": 12
										},
										{
											"begin": 16021,
											"end": 16032,
											"name": "DUP7",
											"source": 12
										},
										{
											"begin": 16021,
											"end": 16032,
											"name": "ADD",
											"source": 12
										},
										{
											"begin": 16050,
											"end": 16074,
											"name": "DUP1",
											"source": 12
										},
										{
											"begin": 16050,
											"end": 16074,
											"name": "DUP4",
											"source": 12
										},
										{
											"begin": 16050,
											"end": 16074,
											"name": "MSTORE",
											"source": 12
										},
										{
											"begin": 16050,
											"end": 16074,
											"name": "SWAP2",
											"source": 12
										},
										{
											"begin": 16050,
											"end": 16074,
											"name": "KECCAK256",
											"source": 12
										},
										{
											"begin": 16050,
											"end": 16079,
											"name": "SLOAD",
											"source": 12
										},
										{
											"begin": 16021,
											"end": 16032,
											"name": "SWAP1",
											"source": 12
										},
										{
											"begin": 16021,
											"end": 16032,
											"name": "SWAP2",
											"source": 12
										},
										{
											"begin": 16050,
											"end": 16079,
											"name": "AND",
											"source": 12
										},
										{
											"begin": 16046,
											"end": 16484,
											"name": "PUSH [tag]",
											"source": 12,
											"value": "176"
										},
										{
											"begin": 16046,
											"end": 16484,
											"name": "JUMPI",
											"source": 12
										},
										{
											"begin": 16272,
											"end": 16285,
											"name": "PUSH",
											"source": 12,
											"value": "0"
										},
										{
											"begin": 16272,
											"end": 16285,
											"name": "SLOAD",
											"source": 12
										},
										{
											"begin": 16258,
											"end": 16269,
											"name": "DUP2",
											"source": 12
										},
										{
											"begin": 16258,
											"end": 16285,
											"name": "LT",
											"source": 12
										},
										{
											"begin": 16254,
											"end": 16470,
											"name": "ISZERO",
											"source": 12
										},
										{
											"begin": 16254,
											"end": 16470,
											"name": "PUSH [tag]",
											"source": 12,
											"value": "176"
										},
										{
											"begin": 16254,
											"end": 16470,
											"name": "JUMPI",
											"source": 12
										},
										{
											"begin": 16341,
											"end": 16359,
											"name": "DUP3",
											"source": 12
										},
										{
											"begin": 16341,
											"end": 16359,
											"name": "MLOAD",
											"source": 12
										},
										{
											"begin": 16341,
											"end": 16359,
											"name": "PUSH",
											"source": 12,
											"value": "0"
										},
										{
											"begin": 16309,
											"end": 16333,
											"name": "DUP3",
											"source": 12
										},
										{
											"begin": 16309,
											"end": 16333,
											"name": "DUP2",
											"source": 12
										},
										{
											"begin": 16309,
											"end": 16333,
											"name": "MSTORE",
											"source": 12
										},
										{
											"begin": 16309,
											"end": 16320,
											"name": "PUSH",
											"source": 12,
											"value": "4"
										},
										{
											"begin": 16309,
											"end": 16333,
											"name": "PUSH",
											"source": 12,
											"value": "20"
										},
										{
											"begin": 16309,
											"end": 16333,
											"name": "SWAP1",
											"source": 12
										},
										{
											"begin": 16309,
											"end": 16333,
											"name": "DUP2",
											"source": 12
										},
										{
											"begin": 16309,
											"end": 16333,
											"name": "MSTORE",
											"source": 12
										},
										{
											"begin": 16309,
											"end": 16333,
											"name": "PUSH",
											"source": 12,
											"value": "40"
										},
										{
											"begin": 16309,
											"end": 16333,
											"name": "SWAP1",
											"source": 12
										},
										{
											"begin": 16309,
											"end": 16333,
											"name": "SWAP2",
											"source": 12
										},
										{
											"begin": 16309,
											"end": 16333,
											"name": "KECCAK256",
											"source": 12
										},
										{
											"begin": 16309,
											"end": 16359,
											"name": "DUP1",
											"source": 12
										},
										{
											"begin": 16309,
											"end": 16359,
											"name": "SLOAD",
											"source": 12
										},
										{
											"begin": 16423,
											"end": 16451,
											"name": "SWAP2",
											"source": 12
										},
										{
											"begin": 16423,
											"end": 16451,
											"name": "DUP7",
											"source": 12
										},
										{
											"begin": 16423,
											"end": 16451,
											"name": "ADD",
											"source": 12
										},
										{
											"begin": 16423,
											"end": 16451,
											"name": "MLOAD",
											"source": 12
										},
										{
											"begin": 16381,
											"end": 16451,
											"name": "PUSH",
											"source": 12,
											"value": "FFFFFFFFFFFFFFFF"
										},
										{
											"begin": 16381,
											"end": 16451,
											"name": "AND",
											"source": 12
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "A0"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SHL",
											"source": -1
										},
										{
											"begin": 16381,
											"end": 16451,
											"name": "MUL",
											"source": 12
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "E0"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SHL",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SUB",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "NOT",
											"source": -1
										},
										{
											"begin": 16381,
											"end": 16451,
											"name": "SWAP1",
											"source": 12
										},
										{
											"begin": 16381,
											"end": 16451,
											"name": "SWAP3",
											"source": 12
										},
										{
											"begin": 16381,
											"end": 16451,
											"name": "AND",
											"source": 12
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "A0"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SHL",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SUB",
											"source": -1
										},
										{
											"begin": 16309,
											"end": 16359,
											"name": "SWAP1",
											"source": 12
										},
										{
											"begin": 16309,
											"end": 16359,
											"name": "SWAP4",
											"source": 12
										},
										{
											"begin": 16309,
											"end": 16359,
											"name": "AND",
											"source": 12
										},
										{
											"begin": 16381,
											"end": 16451,
											"name": "SWAP3",
											"source": 12
										},
										{
											"begin": 16381,
											"end": 16451,
											"name": "SWAP1",
											"source": 12
										},
										{
											"begin": 16381,
											"end": 16451,
											"name": "SWAP3",
											"source": 12
										},
										{
											"begin": 16381,
											"end": 16451,
											"name": "OR",
											"source": 12
										},
										{
											"begin": 16381,
											"end": 16451,
											"name": "OR",
											"source": 12
										},
										{
											"begin": 16381,
											"end": 16451,
											"name": "SWAP1",
											"source": 12
										},
										{
											"begin": 16381,
											"end": 16451,
											"name": "SSTORE",
											"source": 12
										},
										{
											"begin": 16254,
											"end": 16470,
											"name": "tag",
											"source": 12,
											"value": "176"
										},
										{
											"begin": 16254,
											"end": 16470,
											"name": "JUMPDEST",
											"source": 12
										},
										{
											"begin": 15533,
											"end": 16494,
											"name": "POP",
											"source": 12
										},
										{
											"begin": 16528,
											"end": 16535,
											"name": "DUP3",
											"source": 12
										},
										{
											"begin": 16524,
											"end": 16526,
											"name": "DUP5",
											"source": 12
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "A0"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SHL",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SUB",
											"source": -1
										},
										{
											"begin": 16509,
											"end": 16536,
											"name": "AND",
											"source": 12
										},
										{
											"begin": 16518,
											"end": 16522,
											"name": "DUP7",
											"source": 12
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "A0"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SHL",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SUB",
											"source": -1
										},
										{
											"begin": 16509,
											"end": 16536,
											"name": "AND",
											"source": 12
										},
										{
											"begin": 16509,
											"end": 16536,
											"name": "PUSH",
											"source": 12,
											"value": "DDF252AD1BE2C89B69C2B068FC378DAA952BA7F163C4A11628F55A4DF523B3EF"
										},
										{
											"begin": 16509,
											"end": 16536,
											"name": "PUSH",
											"source": 12,
											"value": "40"
										},
										{
											"begin": 16509,
											"end": 16536,
											"name": "MLOAD",
											"source": 12
										},
										{
											"begin": 16509,
											"end": 16536,
											"name": "PUSH",
											"source": 12,
											"value": "40"
										},
										{
											"begin": 16509,
											"end": 16536,
											"name": "MLOAD",
											"source": 12
										},
										{
											"begin": 16509,
											"end": 16536,
											"name": "DUP1",
											"source": 12
										},
										{
											"begin": 16509,
											"end": 16536,
											"name": "SWAP2",
											"source": 12
										},
										{
											"begin": 16509,
											"end": 16536,
											"name": "SUB",
											"source": 12
										},
										{
											"begin": 16509,
											"end": 16536,
											"name": "SWAP1",
											"source": 12
										},
										{
											"begin": 16509,
											"end": 16536,
											"name": "LOG4",
											"source": 12
										},
										{
											"begin": 14628,
											"end": 16595,
											"name": "POP",
											"source": 12
										},
										{
											"begin": 14628,
											"end": 16595,
											"name": "POP",
											"source": 12
										},
										{
											"begin": 14528,
											"end": 16595,
											"name": "POP",
											"source": 12
										},
										{
											"begin": 14528,
											"end": 16595,
											"name": "POP",
											"source": 12
										},
										{
											"begin": 14528,
											"end": 16595,
											"name": "POP",
											"source": 12
										},
										{
											"begin": 14528,
											"end": 16595,
											"name": "JUMP",
											"source": 12,
											"value": "[out]"
										},
										{
											"begin": 6815,
											"end": 7898,
											"name": "tag",
											"source": 12,
											"value": "117"
										},
										{
											"begin": 6815,
											"end": 7898,
											"name": "JUMPDEST",
											"source": 12
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "40"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "DUP1",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "MLOAD",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "60"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "DUP2",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "ADD",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "DUP3",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "MSTORE",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "0"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "DUP1",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "DUP3",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "MSTORE",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "20"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "DUP3",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "ADD",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "DUP2",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SWAP1",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "MSTORE",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SWAP2",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "DUP2",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "ADD",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SWAP2",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SWAP1",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SWAP2",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "MSTORE",
											"source": -1
										},
										{
											"begin": 6924,
											"end": 6931,
											"name": "DUP2",
											"source": 12
										},
										{
											"begin": 7004,
											"end": 7017,
											"name": "PUSH",
											"source": 12,
											"value": "0"
										},
										{
											"begin": 7004,
											"end": 7017,
											"name": "SLOAD",
											"source": 12
										},
										{
											"begin": 6997,
											"end": 7001,
											"name": "DUP2",
											"source": 12
										},
										{
											"begin": 6997,
											"end": 7017,
											"name": "LT",
											"source": 12
										},
										{
											"begin": 6966,
											"end": 7834,
											"name": "ISZERO",
											"source": 12
										},
										{
											"begin": 6966,
											"end": 7834,
											"name": "PUSH [tag]",
											"source": 12,
											"value": "184"
										},
										{
											"begin": 6966,
											"end": 7834,
											"name": "JUMPI",
											"source": 12
										},
										{
											"begin": 7037,
											"end": 7068,
											"name": "PUSH",
											"source": 12,
											"value": "0"
										},
										{
											"begin": 7071,
											"end": 7088,
											"name": "DUP2",
											"source": 12
										},
										{
											"begin": 7071,
											"end": 7088,
											"name": "DUP2",
											"source": 12
										},
										{
											"begin": 7071,
											"end": 7088,
											"name": "MSTORE",
											"source": 12
										},
										{
											"begin": 7071,
											"end": 7082,
											"name": "PUSH",
											"source": 12,
											"value": "4"
										},
										{
											"begin": 7071,
											"end": 7088,
											"name": "PUSH",
											"source": 12,
											"value": "20"
										},
										{
											"begin": 7071,
											"end": 7088,
											"name": "SWAP1",
											"source": 12
										},
										{
											"begin": 7071,
											"end": 7088,
											"name": "DUP2",
											"source": 12
										},
										{
											"begin": 7071,
											"end": 7088,
											"name": "MSTORE",
											"source": 12
										},
										{
											"begin": 7071,
											"end": 7088,
											"name": "PUSH",
											"source": 12,
											"value": "40"
										},
										{
											"begin": 7071,
											"end": 7088,
											"name": "SWAP2",
											"source": 12
										},
										{
											"begin": 7071,
											"end": 7088,
											"name": "DUP3",
											"source": 12
										},
										{
											"begin": 7071,
											"end": 7088,
											"name": "SWAP1",
											"source": 12
										},
										{
											"begin": 7071,
											"end": 7088,
											"name": "KECCAK256",
											"source": 12
										},
										{
											"begin": 7037,
											"end": 7088,
											"name": "DUP3",
											"source": 12
										},
										{
											"begin": 7037,
											"end": 7088,
											"name": "MLOAD",
											"source": 12
										},
										{
											"begin": 7037,
											"end": 7088,
											"name": "PUSH",
											"source": 12,
											"value": "60"
										},
										{
											"begin": 7037,
											"end": 7088,
											"name": "DUP2",
											"source": 12
										},
										{
											"begin": 7037,
											"end": 7088,
											"name": "ADD",
											"source": 12
										},
										{
											"begin": 7037,
											"end": 7088,
											"name": "DUP5",
											"source": 12
										},
										{
											"begin": 7037,
											"end": 7088,
											"name": "MSTORE",
											"source": 12
										},
										{
											"begin": 7037,
											"end": 7088,
											"name": "SWAP1",
											"source": 12
										},
										{
											"begin": 7037,
											"end": 7088,
											"name": "SLOAD",
											"source": 12
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "A0"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SHL",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SUB",
											"source": -1
										},
										{
											"begin": 7037,
											"end": 7088,
											"name": "DUP2",
											"source": 12
										},
										{
											"begin": 7037,
											"end": 7088,
											"name": "AND",
											"source": 12
										},
										{
											"begin": 7037,
											"end": 7088,
											"name": "DUP3",
											"source": 12
										},
										{
											"begin": 7037,
											"end": 7088,
											"name": "MSTORE",
											"source": 12
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "A0"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SHL",
											"source": -1
										},
										{
											"begin": 7037,
											"end": 7088,
											"name": "DUP2",
											"source": 12
										},
										{
											"begin": 7037,
											"end": 7088,
											"name": "DIV",
											"source": 12
										},
										{
											"begin": 7037,
											"end": 7088,
											"name": "PUSH",
											"source": 12,
											"value": "FFFFFFFFFFFFFFFF"
										},
										{
											"begin": 7037,
											"end": 7088,
											"name": "AND",
											"source": 12
										},
										{
											"begin": 7037,
											"end": 7088,
											"name": "SWAP3",
											"source": 12
										},
										{
											"begin": 7037,
											"end": 7088,
											"name": "DUP3",
											"source": 12
										},
										{
											"begin": 7037,
											"end": 7088,
											"name": "ADD",
											"source": 12
										},
										{
											"begin": 7037,
											"end": 7088,
											"name": "SWAP3",
											"source": 12
										},
										{
											"begin": 7037,
											"end": 7088,
											"name": "SWAP1",
											"source": 12
										},
										{
											"begin": 7037,
											"end": 7088,
											"name": "SWAP3",
											"source": 12
										},
										{
											"begin": 7037,
											"end": 7088,
											"name": "MSTORE",
											"source": 12
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "E0"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SHL",
											"source": -1
										},
										{
											"begin": 7037,
											"end": 7088,
											"name": "SWAP1",
											"source": 12
										},
										{
											"begin": 7037,
											"end": 7088,
											"name": "SWAP2",
											"source": 12
										},
										{
											"begin": 7037,
											"end": 7088,
											"name": "DIV",
											"source": 12
										},
										{
											"begin": 7037,
											"end": 7088,
											"name": "PUSH",
											"source": 12,
											"value": "FF"
										},
										{
											"begin": 7037,
											"end": 7088,
											"name": "AND",
											"source": 12
										},
										{
											"begin": 7037,
											"end": 7088,
											"name": "ISZERO",
											"source": 12
										},
										{
											"begin": 7037,
											"end": 7088,
											"name": "ISZERO",
											"source": 12
										},
										{
											"begin": 7037,
											"end": 7088,
											"name": "SWAP2",
											"source": 12
										},
										{
											"begin": 7037,
											"end": 7088,
											"name": "DUP2",
											"source": 12
										},
										{
											"begin": 7037,
											"end": 7088,
											"name": "ADD",
											"source": 12
										},
										{
											"begin": 7037,
											"end": 7088,
											"name": "DUP3",
											"source": 12
										},
										{
											"begin": 7037,
											"end": 7088,
											"name": "SWAP1",
											"source": 12
										},
										{
											"begin": 7037,
											"end": 7088,
											"name": "MSTORE",
											"source": 12
										},
										{
											"begin": 7037,
											"end": 7088,
											"name": "SWAP1",
											"source": 12
										},
										{
											"begin": 7106,
											"end": 7820,
											"name": "PUSH [tag]",
											"source": 12,
											"value": "188"
										},
										{
											"begin": 7106,
											"end": 7820,
											"name": "JUMPI",
											"source": 12
										},
										{
											"begin": 7155,
											"end": 7169,
											"name": "DUP1",
											"source": 12
										},
										{
											"begin": 7155,
											"end": 7169,
											"name": "MLOAD",
											"source": 12
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "A0"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SHL",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SUB",
											"source": -1
										},
										{
											"begin": 7155,
											"end": 7183,
											"name": "AND",
											"source": 12
										},
										{
											"begin": 7155,
											"end": 7183,
											"name": "ISZERO",
											"source": 12
										},
										{
											"begin": 7151,
											"end": 7250,
											"name": "PUSH [tag]",
											"source": 12,
											"value": "186"
										},
										{
											"begin": 7151,
											"end": 7250,
											"name": "JUMPI",
											"source": 12
										},
										{
											"begin": 7218,
											"end": 7227,
											"name": "SWAP4",
											"source": 12
										},
										{
											"begin": 6815,
											"end": 7898,
											"name": "SWAP3",
											"source": 12
										},
										{
											"begin": -1,
											"end": -1,
											"name": "POP",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "POP",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "POP",
											"source": -1
										},
										{
											"begin": 6815,
											"end": 7898,
											"name": "JUMP",
											"source": 12,
											"value": "[out]"
										},
										{
											"begin": 7151,
											"end": 7250,
											"name": "tag",
											"source": 12,
											"value": "186"
										},
										{
											"begin": 7151,
											"end": 7250,
											"name": "JUMPDEST",
											"source": 12
										},
										{
											"begin": -1,
											"end": -1,
											"name": "POP",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "0"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "NOT",
											"source": -1
										},
										{
											"begin": 7586,
											"end": 7592,
											"name": "ADD",
											"source": 12
										},
										{
											"begin": 7630,
											"end": 7647,
											"name": "PUSH",
											"source": 12,
											"value": "0"
										},
										{
											"begin": 7630,
											"end": 7647,
											"name": "DUP2",
											"source": 12
										},
										{
											"begin": 7630,
											"end": 7647,
											"name": "DUP2",
											"source": 12
										},
										{
											"begin": 7630,
											"end": 7647,
											"name": "MSTORE",
											"source": 12
										},
										{
											"begin": 7630,
											"end": 7641,
											"name": "PUSH",
											"source": 12,
											"value": "4"
										},
										{
											"begin": 7630,
											"end": 7647,
											"name": "PUSH",
											"source": 12,
											"value": "20"
										},
										{
											"begin": 7630,
											"end": 7647,
											"name": "SWAP1",
											"source": 12
										},
										{
											"begin": 7630,
											"end": 7647,
											"name": "DUP2",
											"source": 12
										},
										{
											"begin": 7630,
											"end": 7647,
											"name": "MSTORE",
											"source": 12
										},
										{
											"begin": 7630,
											"end": 7647,
											"name": "PUSH",
											"source": 12,
											"value": "40"
										},
										{
											"begin": 7630,
											"end": 7647,
											"name": "SWAP2",
											"source": 12
										},
										{
											"begin": 7630,
											"end": 7647,
											"name": "DUP3",
											"source": 12
										},
										{
											"begin": 7630,
											"end": 7647,
											"name": "SWAP1",
											"source": 12
										},
										{
											"begin": 7630,
											"end": 7647,
											"name": "KECCAK256",
											"source": 12
										},
										{
											"begin": 7618,
											"end": 7647,
											"name": "DUP3",
											"source": 12
										},
										{
											"begin": 7618,
											"end": 7647,
											"name": "MLOAD",
											"source": 12
										},
										{
											"begin": 7618,
											"end": 7647,
											"name": "PUSH",
											"source": 12,
											"value": "60"
										},
										{
											"begin": 7618,
											"end": 7647,
											"name": "DUP2",
											"source": 12
										},
										{
											"begin": 7618,
											"end": 7647,
											"name": "ADD",
											"source": 12
										},
										{
											"begin": 7618,
											"end": 7647,
											"name": "DUP5",
											"source": 12
										},
										{
											"begin": 7618,
											"end": 7647,
											"name": "MSTORE",
											"source": 12
										},
										{
											"begin": 7618,
											"end": 7647,
											"name": "SWAP1",
											"source": 12
										},
										{
											"begin": 7618,
											"end": 7647,
											"name": "SLOAD",
											"source": 12
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "A0"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SHL",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SUB",
											"source": -1
										},
										{
											"begin": 7618,
											"end": 7647,
											"name": "DUP2",
											"source": 12
										},
										{
											"begin": 7618,
											"end": 7647,
											"name": "AND",
											"source": 12
										},
										{
											"begin": 7618,
											"end": 7647,
											"name": "DUP1",
											"source": 12
										},
										{
											"begin": 7618,
											"end": 7647,
											"name": "DUP4",
											"source": 12
										},
										{
											"begin": 7618,
											"end": 7647,
											"name": "MSTORE",
											"source": 12
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "A0"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SHL",
											"source": -1
										},
										{
											"begin": 7618,
											"end": 7647,
											"name": "DUP3",
											"source": 12
										},
										{
											"begin": 7618,
											"end": 7647,
											"name": "DIV",
											"source": 12
										},
										{
											"begin": 7618,
											"end": 7647,
											"name": "PUSH",
											"source": 12,
											"value": "FFFFFFFFFFFFFFFF"
										},
										{
											"begin": 7618,
											"end": 7647,
											"name": "AND",
											"source": 12
										},
										{
											"begin": 7618,
											"end": 7647,
											"name": "SWAP4",
											"source": 12
										},
										{
											"begin": 7618,
											"end": 7647,
											"name": "DUP4",
											"source": 12
										},
										{
											"begin": 7618,
											"end": 7647,
											"name": "ADD",
											"source": 12
										},
										{
											"begin": 7618,
											"end": 7647,
											"name": "SWAP4",
											"source": 12
										},
										{
											"begin": 7618,
											"end": 7647,
											"name": "SWAP1",
											"source": 12
										},
										{
											"begin": 7618,
											"end": 7647,
											"name": "SWAP4",
											"source": 12
										},
										{
											"begin": 7618,
											"end": 7647,
											"name": "MSTORE",
											"source": 12
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "E0"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SHL",
											"source": -1
										},
										{
											"begin": 7618,
											"end": 7647,
											"name": "SWAP1",
											"source": 12
										},
										{
											"begin": 7618,
											"end": 7647,
											"name": "DIV",
											"source": 12
										},
										{
											"begin": 7618,
											"end": 7647,
											"name": "PUSH",
											"source": 12,
											"value": "FF"
										},
										{
											"begin": 7618,
											"end": 7647,
											"name": "AND",
											"source": 12
										},
										{
											"begin": 7618,
											"end": 7647,
											"name": "ISZERO",
											"source": 12
										},
										{
											"begin": 7618,
											"end": 7647,
											"name": "ISZERO",
											"source": 12
										},
										{
											"begin": 7618,
											"end": 7647,
											"name": "SWAP3",
											"source": 12
										},
										{
											"begin": 7618,
											"end": 7647,
											"name": "DUP2",
											"source": 12
										},
										{
											"begin": 7618,
											"end": 7647,
											"name": "ADD",
											"source": 12
										},
										{
											"begin": 7618,
											"end": 7647,
											"name": "SWAP3",
											"source": 12
										},
										{
											"begin": 7618,
											"end": 7647,
											"name": "SWAP1",
											"source": 12
										},
										{
											"begin": 7618,
											"end": 7647,
											"name": "SWAP3",
											"source": 12
										},
										{
											"begin": 7618,
											"end": 7647,
											"name": "MSTORE",
											"source": 12
										},
										{
											"begin": 7677,
											"end": 7705,
											"name": "ISZERO",
											"source": 12
										},
										{
											"begin": 7673,
											"end": 7780,
											"name": "PUSH [tag]",
											"source": 12,
											"value": "189"
										},
										{
											"begin": 7673,
											"end": 7780,
											"name": "JUMPI",
											"source": 12
										},
										{
											"begin": 7744,
											"end": 7753,
											"name": "SWAP4",
											"source": 12
										},
										{
											"begin": 6815,
											"end": 7898,
											"name": "SWAP3",
											"source": 12
										},
										{
											"begin": -1,
											"end": -1,
											"name": "POP",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "POP",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "POP",
											"source": -1
										},
										{
											"begin": 6815,
											"end": 7898,
											"name": "JUMP",
											"source": 12,
											"value": "[out]"
										},
										{
											"begin": 7673,
											"end": 7780,
											"name": "tag",
											"source": 12,
											"value": "189"
										},
										{
											"begin": 7673,
											"end": 7780,
											"name": "JUMPDEST",
											"source": 12
										},
										{
											"begin": 7547,
											"end": 7802,
											"name": "PUSH [tag]",
											"source": 12,
											"value": "186"
										},
										{
											"begin": 7547,
											"end": 7802,
											"name": "JUMP",
											"source": 12
										},
										{
											"begin": 7547,
											"end": 7802,
											"name": "tag",
											"source": 12,
											"value": "188"
										},
										{
											"begin": 7547,
											"end": 7802,
											"name": "JUMPDEST",
											"source": 12
										},
										{
											"begin": 7019,
											"end": 7834,
											"name": "POP",
											"source": 12
										},
										{
											"begin": 6966,
											"end": 7834,
											"name": "tag",
											"source": 12,
											"value": "184"
										},
										{
											"begin": 6966,
											"end": 7834,
											"name": "JUMPDEST",
											"source": 12
										},
										{
											"begin": 7860,
											"end": 7891,
											"name": "PUSH",
											"source": 12,
											"value": "40"
										},
										{
											"begin": 7860,
											"end": 7891,
											"name": "MLOAD",
											"source": 12
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "6F96CDA1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "E1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SHL",
											"source": -1
										},
										{
											"begin": 7860,
											"end": 7891,
											"name": "DUP2",
											"source": 12
										},
										{
											"begin": 7860,
											"end": 7891,
											"name": "MSTORE",
											"source": 12
										},
										{
											"begin": 7860,
											"end": 7891,
											"name": "PUSH",
											"source": 12,
											"value": "4"
										},
										{
											"begin": 7860,
											"end": 7891,
											"name": "ADD",
											"source": 12
										},
										{
											"begin": 7860,
											"end": 7891,
											"name": "PUSH",
											"source": 12,
											"value": "40"
										},
										{
											"begin": 7860,
											"end": 7891,
											"name": "MLOAD",
											"source": 12
										},
										{
											"begin": 7860,
											"end": 7891,
											"name": "DUP1",
											"source": 12
										},
										{
											"begin": 7860,
											"end": 7891,
											"name": "SWAP2",
											"source": 12
										},
										{
											"begin": 7860,
											"end": 7891,
											"name": "SUB",
											"source": 12
										},
										{
											"begin": 7860,
											"end": 7891,
											"name": "SWAP1",
											"source": 12
										},
										{
											"begin": 7860,
											"end": 7891,
											"name": "REVERT",
											"source": 12
										},
										{
											"begin": 19592,
											"end": 20242,
											"name": "tag",
											"source": 12,
											"value": "138"
										},
										{
											"begin": 19592,
											"end": 20242,
											"name": "JUMPDEST",
											"source": 12
										},
										{
											"begin": 19770,
											"end": 19842,
											"name": "PUSH",
											"source": 12,
											"value": "40"
										},
										{
											"begin": 19770,
											"end": 19842,
											"name": "MLOAD",
											"source": 12
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "A85BD01"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "E1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SHL",
											"source": -1
										},
										{
											"begin": 19770,
											"end": 19842,
											"name": "DUP2",
											"source": 12
										},
										{
											"begin": 19770,
											"end": 19842,
											"name": "MSTORE",
											"source": 12
										},
										{
											"begin": 19750,
											"end": 19754,
											"name": "PUSH",
											"source": 12,
											"value": "0"
										},
										{
											"begin": 19750,
											"end": 19754,
											"name": "SWAP1",
											"source": 12
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "A0"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SHL",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SUB",
											"source": -1
										},
										{
											"begin": 19770,
											"end": 19806,
											"name": "DUP6",
											"source": 12
										},
										{
											"begin": 19770,
											"end": 19806,
											"name": "AND",
											"source": 12
										},
										{
											"begin": 19770,
											"end": 19806,
											"name": "SWAP1",
											"source": 12
										},
										{
											"begin": 19770,
											"end": 19806,
											"name": "PUSH",
											"source": 12,
											"value": "150B7A02"
										},
										{
											"begin": 19770,
											"end": 19806,
											"name": "SWAP1",
											"source": 12
										},
										{
											"begin": 19770,
											"end": 19842,
											"name": "PUSH [tag]",
											"source": 12,
											"value": "193"
										},
										{
											"begin": 19770,
											"end": 19842,
											"name": "SWAP1",
											"source": 12
										},
										{
											"begin": 719,
											"end": 729,
											"name": "CALLER",
											"source": 6
										},
										{
											"begin": 719,
											"end": 729,
											"name": "SWAP1",
											"source": 6
										},
										{
											"begin": 19821,
											"end": 19825,
											"name": "DUP10",
											"source": 12
										},
										{
											"begin": 19821,
											"end": 19825,
											"name": "SWAP1",
											"source": 12
										},
										{
											"begin": 19827,
											"end": 19834,
											"name": "DUP9",
											"source": 12
										},
										{
											"begin": 19827,
											"end": 19834,
											"name": "SWAP1",
											"source": 12
										},
										{
											"begin": 19836,
											"end": 19841,
											"name": "DUP9",
											"source": 12
										},
										{
											"begin": 19836,
											"end": 19841,
											"name": "SWAP1",
											"source": 12
										},
										{
											"begin": 19770,
											"end": 19842,
											"name": "PUSH",
											"source": 12,
											"value": "4"
										},
										{
											"begin": 19770,
											"end": 19842,
											"name": "ADD",
											"source": 12
										},
										{
											"begin": 19770,
											"end": 19842,
											"name": "PUSH [tag]",
											"source": 12,
											"value": "194"
										},
										{
											"begin": 19770,
											"end": 19842,
											"name": "JUMP",
											"source": 12,
											"value": "[in]"
										},
										{
											"begin": 19770,
											"end": 19842,
											"name": "tag",
											"source": 12,
											"value": "193"
										},
										{
											"begin": 19770,
											"end": 19842,
											"name": "JUMPDEST",
											"source": 12
										},
										{
											"begin": 19770,
											"end": 19842,
											"name": "PUSH",
											"source": 12,
											"value": "20"
										},
										{
											"begin": 19770,
											"end": 19842,
											"name": "PUSH",
											"source": 12,
											"value": "40"
										},
										{
											"begin": 19770,
											"end": 19842,
											"name": "MLOAD",
											"source": 12
										},
										{
											"begin": 19770,
											"end": 19842,
											"name": "DUP1",
											"source": 12
										},
										{
											"begin": 19770,
											"end": 19842,
											"name": "DUP4",
											"source": 12
										},
										{
											"begin": 19770,
											"end": 19842,
											"name": "SUB",
											"source": 12
										},
										{
											"begin": 19770,
											"end": 19842,
											"name": "DUP2",
											"source": 12
										},
										{
											"begin": 19770,
											"end": 19842,
											"name": "PUSH",
											"source": 12,
											"value": "0"
										},
										{
											"begin": 19770,
											"end": 19842,
											"name": "DUP8",
											"source": 12
										},
										{
											"begin": 19770,
											"end": 19842,
											"name": "DUP1",
											"source": 12
										},
										{
											"begin": 19770,
											"end": 19842,
											"name": "EXTCODESIZE",
											"source": 12
										},
										{
											"begin": 19770,
											"end": 19842,
											"name": "ISZERO",
											"source": 12
										},
										{
											"begin": 19770,
											"end": 19842,
											"name": "DUP1",
											"source": 12
										},
										{
											"begin": 19770,
											"end": 19842,
											"name": "ISZERO",
											"source": 12
										},
										{
											"begin": 19770,
											"end": 19842,
											"name": "PUSH [tag]",
											"source": 12,
											"value": "195"
										},
										{
											"begin": 19770,
											"end": 19842,
											"name": "JUMPI",
											"source": 12
										},
										{
											"begin": 19770,
											"end": 19842,
											"name": "PUSH",
											"source": 12,
											"value": "0"
										},
										{
											"begin": 19770,
											"end": 19842,
											"name": "DUP1",
											"source": 12
										},
										{
											"begin": 19770,
											"end": 19842,
											"name": "REVERT",
											"source": 12
										},
										{
											"begin": 19770,
											"end": 19842,
											"name": "tag",
											"source": 12,
											"value": "195"
										},
										{
											"begin": 19770,
											"end": 19842,
											"name": "JUMPDEST",
											"source": 12
										},
										{
											"begin": 19770,
											"end": 19842,
											"name": "POP",
											"source": 12
										},
										{
											"begin": 19770,
											"end": 19842,
											"name": "GAS",
											"source": 12
										},
										{
											"begin": 19770,
											"end": 19842,
											"name": "CALL",
											"source": 12
										},
										{
											"begin": 19770,
											"end": 19842,
											"name": "SWAP3",
											"source": 12
										},
										{
											"begin": 19770,
											"end": 19842,
											"name": "POP",
											"source": 12
										},
										{
											"begin": 19770,
											"end": 19842,
											"name": "POP",
											"source": 12
										},
										{
											"begin": 19770,
											"end": 19842,
											"name": "POP",
											"source": 12
										},
										{
											"begin": 19770,
											"end": 19842,
											"name": "DUP1",
											"source": 12
										},
										{
											"begin": 19770,
											"end": 19842,
											"name": "ISZERO",
											"source": 12
										},
										{
											"begin": 19770,
											"end": 19842,
											"name": "PUSH [tag]",
											"source": 12,
											"value": "196"
										},
										{
											"begin": 19770,
											"end": 19842,
											"name": "JUMPI",
											"source": 12
										},
										{
											"begin": -1,
											"end": -1,
											"name": "POP",
											"source": -1
										},
										{
											"begin": 19770,
											"end": 19842,
											"name": "PUSH",
											"source": 12,
											"value": "40"
										},
										{
											"begin": 19770,
											"end": 19842,
											"name": "DUP1",
											"source": 12
										},
										{
											"begin": 19770,
											"end": 19842,
											"name": "MLOAD",
											"source": 12
										},
										{
											"begin": 19770,
											"end": 19842,
											"name": "PUSH",
											"source": 12,
											"value": "1F"
										},
										{
											"begin": 19770,
											"end": 19842,
											"name": "RETURNDATASIZE",
											"source": 12
										},
										{
											"begin": 19770,
											"end": 19842,
											"name": "SWAP1",
											"source": 12
										},
										{
											"begin": 19770,
											"end": 19842,
											"name": "DUP2",
											"source": 12
										},
										{
											"begin": 19770,
											"end": 19842,
											"name": "ADD",
											"source": 12
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1F"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "NOT",
											"source": -1
										},
										{
											"begin": 19770,
											"end": 19842,
											"name": "AND",
											"source": 12
										},
										{
											"begin": 19770,
											"end": 19842,
											"name": "DUP3",
											"source": 12
										},
										{
											"begin": 19770,
											"end": 19842,
											"name": "ADD",
											"source": 12
										},
										{
											"begin": 19770,
											"end": 19842,
											"name": "SWAP1",
											"source": 12
										},
										{
											"begin": 19770,
											"end": 19842,
											"name": "SWAP3",
											"source": 12
										},
										{
											"begin": 19770,
											"end": 19842,
											"name": "MSTORE",
											"source": 12
										},
										{
											"begin": 19770,
											"end": 19842,
											"name": "PUSH [tag]",
											"source": 12,
											"value": "197"
										},
										{
											"begin": 19770,
											"end": 19842,
											"name": "SWAP2",
											"source": 12
										},
										{
											"begin": 19770,
											"end": 19842,
											"name": "DUP2",
											"source": 12
										},
										{
											"begin": 19770,
											"end": 19842,
											"name": "ADD",
											"source": 12
										},
										{
											"begin": 19770,
											"end": 19842,
											"name": "SWAP1",
											"source": 12
										},
										{
											"begin": 19770,
											"end": 19842,
											"name": "PUSH [tag]",
											"source": 12,
											"value": "198"
										},
										{
											"begin": 19770,
											"end": 19842,
											"name": "JUMP",
											"source": 12,
											"value": "[in]"
										},
										{
											"begin": 19770,
											"end": 19842,
											"name": "tag",
											"source": 12,
											"value": "197"
										},
										{
											"begin": 19770,
											"end": 19842,
											"name": "JUMPDEST",
											"source": 12
										},
										{
											"begin": 19770,
											"end": 19842,
											"name": "PUSH",
											"source": 12,
											"value": "1"
										},
										{
											"begin": 19770,
											"end": 19842,
											"name": "tag",
											"source": 12,
											"value": "196"
										},
										{
											"begin": 19770,
											"end": 19842,
											"name": "JUMPDEST",
											"source": 12
										},
										{
											"begin": 19766,
											"end": 20236,
											"name": "PUSH [tag]",
											"source": 12,
											"value": "199"
										},
										{
											"begin": 19766,
											"end": 20236,
											"name": "JUMPI",
											"source": 12
										},
										{
											"begin": 19766,
											"end": 20236,
											"name": "RETURNDATASIZE",
											"source": 12
										},
										{
											"begin": 19766,
											"end": 20236,
											"name": "DUP1",
											"source": 12
										},
										{
											"begin": 19766,
											"end": 20236,
											"name": "DUP1",
											"source": 12
										},
										{
											"begin": 19766,
											"end": 20236,
											"name": "ISZERO",
											"source": 12
										},
										{
											"begin": 19766,
											"end": 20236,
											"name": "PUSH [tag]",
											"source": 12,
											"value": "204"
										},
										{
											"begin": 19766,
											"end": 20236,
											"name": "JUMPI",
											"source": 12
										},
										{
											"begin": 19766,
											"end": 20236,
											"name": "PUSH",
											"source": 12,
											"value": "40"
										},
										{
											"begin": 19766,
											"end": 20236,
											"name": "MLOAD",
											"source": 12
										},
										{
											"begin": 19766,
											"end": 20236,
											"name": "SWAP2",
											"source": 12
										},
										{
											"begin": 19766,
											"end": 20236,
											"name": "POP",
											"source": 12
										},
										{
											"begin": 19766,
											"end": 20236,
											"name": "PUSH",
											"source": 12,
											"value": "1F"
										},
										{
											"begin": 19766,
											"end": 20236,
											"name": "NOT",
											"source": 12
										},
										{
											"begin": 19766,
											"end": 20236,
											"name": "PUSH",
											"source": 12,
											"value": "3F"
										},
										{
											"begin": 19766,
											"end": 20236,
											"name": "RETURNDATASIZE",
											"source": 12
										},
										{
											"begin": 19766,
											"end": 20236,
											"name": "ADD",
											"source": 12
										},
										{
											"begin": 19766,
											"end": 20236,
											"name": "AND",
											"source": 12
										},
										{
											"begin": 19766,
											"end": 20236,
											"name": "DUP3",
											"source": 12
										},
										{
											"begin": 19766,
											"end": 20236,
											"name": "ADD",
											"source": 12
										},
										{
											"begin": 19766,
											"end": 20236,
											"name": "PUSH",
											"source": 12,
											"value": "40"
										},
										{
											"begin": 19766,
											"end": 20236,
											"name": "MSTORE",
											"source": 12
										},
										{
											"begin": 19766,
											"end": 20236,
											"name": "RETURNDATASIZE",
											"source": 12
										},
										{
											"begin": 19766,
											"end": 20236,
											"name": "DUP3",
											"source": 12
										},
										{
											"begin": 19766,
											"end": 20236,
											"name": "MSTORE",
											"source": 12
										},
										{
											"begin": 19766,
											"end": 20236,
											"name": "RETURNDATASIZE",
											"source": 12
										},
										{
											"begin": 19766,
											"end": 20236,
											"name": "PUSH",
											"source": 12,
											"value": "0"
										},
										{
											"begin": 19766,
											"end": 20236,
											"name": "PUSH",
											"source": 12,
											"value": "20"
										},
										{
											"begin": 19766,
											"end": 20236,
											"name": "DUP5",
											"source": 12
										},
										{
											"begin": 19766,
											"end": 20236,
											"name": "ADD",
											"source": 12
										},
										{
											"begin": 19766,
											"end": 20236,
											"name": "RETURNDATACOPY",
											"source": 12
										},
										{
											"begin": 19766,
											"end": 20236,
											"name": "PUSH [tag]",
											"source": 12,
											"value": "203"
										},
										{
											"begin": 19766,
											"end": 20236,
											"name": "JUMP",
											"source": 12
										},
										{
											"begin": 19766,
											"end": 20236,
											"name": "tag",
											"source": 12,
											"value": "204"
										},
										{
											"begin": 19766,
											"end": 20236,
											"name": "JUMPDEST",
											"source": 12
										},
										{
											"begin": 19766,
											"end": 20236,
											"name": "PUSH",
											"source": 12,
											"value": "60"
										},
										{
											"begin": 19766,
											"end": 20236,
											"name": "SWAP2",
											"source": 12
										},
										{
											"begin": 19766,
											"end": 20236,
											"name": "POP",
											"source": 12
										},
										{
											"begin": 19766,
											"end": 20236,
											"name": "tag",
											"source": 12,
											"value": "203"
										},
										{
											"begin": 19766,
											"end": 20236,
											"name": "JUMPDEST",
											"source": 12
										},
										{
											"begin": -1,
											"end": -1,
											"name": "POP",
											"source": -1
										},
										{
											"begin": 20001,
											"end": 20014,
											"name": "DUP1",
											"source": 12
										},
										{
											"begin": 20001,
											"end": 20014,
											"name": "MLOAD",
											"source": 12
										},
										{
											"begin": 19997,
											"end": 20226,
											"name": "PUSH [tag]",
											"source": 12,
											"value": "205"
										},
										{
											"begin": 19997,
											"end": 20226,
											"name": "JUMPI",
											"source": 12
										},
										{
											"begin": 20046,
											"end": 20086,
											"name": "PUSH",
											"source": 12,
											"value": "40"
										},
										{
											"begin": 20046,
											"end": 20086,
											"name": "MLOAD",
											"source": 12
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "68D2BF6B"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "E1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SHL",
											"source": -1
										},
										{
											"begin": 20046,
											"end": 20086,
											"name": "DUP2",
											"source": 12
										},
										{
											"begin": 20046,
											"end": 20086,
											"name": "MSTORE",
											"source": 12
										},
										{
											"begin": 20046,
											"end": 20086,
											"name": "PUSH",
											"source": 12,
											"value": "4"
										},
										{
											"begin": 20046,
											"end": 20086,
											"name": "ADD",
											"source": 12
										},
										{
											"begin": 20046,
											"end": 20086,
											"name": "PUSH",
											"source": 12,
											"value": "40"
										},
										{
											"begin": 20046,
											"end": 20086,
											"name": "MLOAD",
											"source": 12
										},
										{
											"begin": 20046,
											"end": 20086,
											"name": "DUP1",
											"source": 12
										},
										{
											"begin": 20046,
											"end": 20086,
											"name": "SWAP2",
											"source": 12
										},
										{
											"begin": 20046,
											"end": 20086,
											"name": "SUB",
											"source": 12
										},
										{
											"begin": 20046,
											"end": 20086,
											"name": "SWAP1",
											"source": 12
										},
										{
											"begin": 20046,
											"end": 20086,
											"name": "REVERT",
											"source": 12
										},
										{
											"begin": 19997,
											"end": 20226,
											"name": "tag",
											"source": 12,
											"value": "205"
										},
										{
											"begin": 19997,
											"end": 20226,
											"name": "JUMPDEST",
											"source": 12
										},
										{
											"begin": 20186,
											"end": 20192,
											"name": "DUP1",
											"source": 12
										},
										{
											"begin": 20180,
											"end": 20193,
											"name": "MLOAD",
											"source": 12
										},
										{
											"begin": 20171,
											"end": 20177,
											"name": "DUP2",
											"source": 12
										},
										{
											"begin": 20167,
											"end": 20169,
											"name": "PUSH",
											"source": 12,
											"value": "20"
										},
										{
											"begin": 20163,
											"end": 20178,
											"name": "ADD",
											"source": 12
										},
										{
											"begin": 20156,
											"end": 20194,
											"name": "REVERT",
											"source": 12
										},
										{
											"begin": 19766,
											"end": 20236,
											"name": "tag",
											"source": 12,
											"value": "199"
										},
										{
											"begin": 19766,
											"end": 20236,
											"name": "JUMPDEST",
											"source": 12
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "E0"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SHL",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SUB",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "NOT",
											"source": -1
										},
										{
											"begin": 19888,
											"end": 19943,
											"name": "AND",
											"source": 12
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "A85BD01"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "E1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SHL",
											"source": -1
										},
										{
											"begin": 19888,
											"end": 19943,
											"name": "EQ",
											"source": 12
										},
										{
											"begin": 19888,
											"end": 19943,
											"name": "SWAP1",
											"source": 12
										},
										{
											"begin": -1,
											"end": -1,
											"name": "POP",
											"source": -1
										},
										{
											"begin": 19766,
											"end": 20236,
											"name": "tag",
											"source": 12,
											"value": "207"
										},
										{
											"begin": 19766,
											"end": 20236,
											"name": "JUMPDEST",
											"source": 12
										},
										{
											"begin": 19592,
											"end": 20242,
											"name": "SWAP5",
											"source": 12
										},
										{
											"begin": 19592,
											"end": 20242,
											"name": "SWAP4",
											"source": 12
										},
										{
											"begin": 19592,
											"end": 20242,
											"name": "POP",
											"source": 12
										},
										{
											"begin": 19592,
											"end": 20242,
											"name": "POP",
											"source": 12
										},
										{
											"begin": 19592,
											"end": 20242,
											"name": "POP",
											"source": 12
										},
										{
											"begin": 19592,
											"end": 20242,
											"name": "POP",
											"source": 12
										},
										{
											"begin": 19592,
											"end": 20242,
											"name": "JUMP",
											"source": 12,
											"value": "[out]"
										},
										{
											"begin": 328,
											"end": 1031,
											"name": "tag",
											"source": 7,
											"value": "148"
										},
										{
											"begin": 328,
											"end": 1031,
											"name": "JUMPDEST",
											"source": 7
										},
										{
											"begin": 384,
											"end": 397,
											"name": "PUSH",
											"source": 7,
											"value": "60"
										},
										{
											"begin": 601,
											"end": 611,
											"name": "DUP2",
											"source": 7
										},
										{
											"begin": 597,
											"end": 648,
											"name": "PUSH [tag]",
											"source": 7,
											"value": "210"
										},
										{
											"begin": 597,
											"end": 648,
											"name": "JUMPI",
											"source": 7
										},
										{
											"begin": -1,
											"end": -1,
											"name": "POP",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "POP",
											"source": -1
										},
										{
											"begin": 627,
											"end": 637,
											"name": "PUSH",
											"source": 7,
											"value": "40"
										},
										{
											"begin": 627,
											"end": 637,
											"name": "DUP1",
											"source": 7
										},
										{
											"begin": 627,
											"end": 637,
											"name": "MLOAD",
											"source": 7
										},
										{
											"begin": 627,
											"end": 637,
											"name": "DUP1",
											"source": 7
										},
										{
											"begin": 627,
											"end": 637,
											"name": "DUP3",
											"source": 7
										},
										{
											"begin": 627,
											"end": 637,
											"name": "ADD",
											"source": 7
										},
										{
											"begin": 627,
											"end": 637,
											"name": "SWAP1",
											"source": 7
										},
										{
											"begin": 627,
											"end": 637,
											"name": "SWAP2",
											"source": 7
										},
										{
											"begin": 627,
											"end": 637,
											"name": "MSTORE",
											"source": 7
										},
										{
											"begin": 627,
											"end": 637,
											"name": "PUSH",
											"source": 7,
											"value": "1"
										},
										{
											"begin": 627,
											"end": 637,
											"name": "DUP2",
											"source": 7
										},
										{
											"begin": 627,
											"end": 637,
											"name": "MSTORE",
											"source": 7
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "3"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "FC"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SHL",
											"source": -1
										},
										{
											"begin": 627,
											"end": 637,
											"name": "PUSH",
											"source": 7,
											"value": "20"
										},
										{
											"begin": 627,
											"end": 637,
											"name": "DUP3",
											"source": 7
										},
										{
											"begin": 627,
											"end": 637,
											"name": "ADD",
											"source": 7
										},
										{
											"begin": 627,
											"end": 637,
											"name": "MSTORE",
											"source": 7
										},
										{
											"begin": 627,
											"end": 637,
											"name": "SWAP1",
											"source": 7
										},
										{
											"begin": 328,
											"end": 1031,
											"name": "JUMP",
											"source": 7,
											"value": "[out]"
										},
										{
											"begin": 597,
											"end": 648,
											"name": "tag",
											"source": 7,
											"value": "210"
										},
										{
											"begin": 597,
											"end": 648,
											"name": "JUMPDEST",
											"source": 7
										},
										{
											"begin": 672,
											"end": 677,
											"name": "DUP2",
											"source": 7
										},
										{
											"begin": 657,
											"end": 669,
											"name": "PUSH",
											"source": 7,
											"value": "0"
										},
										{
											"begin": 711,
											"end": 786,
											"name": "tag",
											"source": 7,
											"value": "211"
										},
										{
											"begin": 711,
											"end": 786,
											"name": "JUMPDEST",
											"source": 7
										},
										{
											"begin": 718,
											"end": 727,
											"name": "DUP2",
											"source": 7
										},
										{
											"begin": 718,
											"end": 727,
											"name": "ISZERO",
											"source": 7
										},
										{
											"begin": 711,
											"end": 786,
											"name": "PUSH [tag]",
											"source": 7,
											"value": "212"
										},
										{
											"begin": 711,
											"end": 786,
											"name": "JUMPI",
											"source": 7
										},
										{
											"begin": 743,
											"end": 751,
											"name": "DUP1",
											"source": 7
										},
										{
											"begin": 743,
											"end": 751,
											"name": "PUSH [tag]",
											"source": 7,
											"value": "213"
										},
										{
											"begin": 743,
											"end": 751,
											"name": "DUP2",
											"source": 7
										},
										{
											"begin": 743,
											"end": 751,
											"name": "PUSH [tag]",
											"source": 7,
											"value": "214"
										},
										{
											"begin": 743,
											"end": 751,
											"name": "JUMP",
											"source": 7,
											"value": "[in]"
										},
										{
											"begin": 743,
											"end": 751,
											"name": "tag",
											"source": 7,
											"value": "213"
										},
										{
											"begin": 743,
											"end": 751,
											"name": "JUMPDEST",
											"source": 7
										},
										{
											"begin": 743,
											"end": 751,
											"name": "SWAP2",
											"source": 7
										},
										{
											"begin": -1,
											"end": -1,
											"name": "POP",
											"source": -1
										},
										{
											"begin": 765,
											"end": 775,
											"name": "PUSH [tag]",
											"source": 7,
											"value": "215"
										},
										{
											"begin": 765,
											"end": 775,
											"name": "SWAP1",
											"source": 7
										},
										{
											"begin": -1,
											"end": -1,
											"name": "POP",
											"source": -1
										},
										{
											"begin": 773,
											"end": 775,
											"name": "PUSH",
											"source": 7,
											"value": "A"
										},
										{
											"begin": 765,
											"end": 775,
											"name": "DUP4",
											"source": 7
										},
										{
											"begin": 765,
											"end": 775,
											"name": "PUSH [tag]",
											"source": 7,
											"value": "216"
										},
										{
											"begin": 765,
											"end": 775,
											"name": "JUMP",
											"source": 7,
											"value": "[in]"
										},
										{
											"begin": 765,
											"end": 775,
											"name": "tag",
											"source": 7,
											"value": "215"
										},
										{
											"begin": 765,
											"end": 775,
											"name": "JUMPDEST",
											"source": 7
										},
										{
											"begin": 765,
											"end": 775,
											"name": "SWAP2",
											"source": 7
										},
										{
											"begin": 765,
											"end": 775,
											"name": "POP",
											"source": 7
										},
										{
											"begin": 711,
											"end": 786,
											"name": "PUSH [tag]",
											"source": 7,
											"value": "211"
										},
										{
											"begin": 711,
											"end": 786,
											"name": "JUMP",
											"source": 7
										},
										{
											"begin": 711,
											"end": 786,
											"name": "tag",
											"source": 7,
											"value": "212"
										},
										{
											"begin": 711,
											"end": 786,
											"name": "JUMPDEST",
											"source": 7
										},
										{
											"begin": 795,
											"end": 814,
											"name": "PUSH",
											"source": 7,
											"value": "0"
										},
										{
											"begin": 827,
											"end": 833,
											"name": "DUP2",
											"source": 7
										},
										{
											"begin": 817,
											"end": 834,
											"name": "PUSH",
											"source": 7,
											"value": "FFFFFFFFFFFFFFFF"
										},
										{
											"begin": 817,
											"end": 834,
											"name": "DUP2",
											"source": 7
										},
										{
											"begin": 817,
											"end": 834,
											"name": "GT",
											"source": 7
										},
										{
											"begin": 817,
											"end": 834,
											"name": "ISZERO",
											"source": 7
										},
										{
											"begin": 817,
											"end": 834,
											"name": "PUSH [tag]",
											"source": 7,
											"value": "218"
										},
										{
											"begin": 817,
											"end": 834,
											"name": "JUMPI",
											"source": 7
										},
										{
											"begin": 817,
											"end": 834,
											"name": "PUSH [tag]",
											"source": 7,
											"value": "218"
										},
										{
											"begin": 817,
											"end": 834,
											"name": "PUSH [tag]",
											"source": 7,
											"value": "219"
										},
										{
											"begin": 817,
											"end": 834,
											"name": "JUMP",
											"source": 7,
											"value": "[in]"
										},
										{
											"begin": 817,
											"end": 834,
											"name": "tag",
											"source": 7,
											"value": "218"
										},
										{
											"begin": 817,
											"end": 834,
											"name": "JUMPDEST",
											"source": 7
										},
										{
											"begin": 817,
											"end": 834,
											"name": "PUSH",
											"source": 7,
											"value": "40"
										},
										{
											"begin": 817,
											"end": 834,
											"name": "MLOAD",
											"source": 7
										},
										{
											"begin": 817,
											"end": 834,
											"name": "SWAP1",
											"source": 7
										},
										{
											"begin": 817,
											"end": 834,
											"name": "DUP1",
											"source": 7
										},
										{
											"begin": 817,
											"end": 834,
											"name": "DUP3",
											"source": 7
										},
										{
											"begin": 817,
											"end": 834,
											"name": "MSTORE",
											"source": 7
										},
										{
											"begin": 817,
											"end": 834,
											"name": "DUP1",
											"source": 7
										},
										{
											"begin": 817,
											"end": 834,
											"name": "PUSH",
											"source": 7,
											"value": "1F"
										},
										{
											"begin": 817,
											"end": 834,
											"name": "ADD",
											"source": 7
										},
										{
											"begin": 817,
											"end": 834,
											"name": "PUSH",
											"source": 7,
											"value": "1F"
										},
										{
											"begin": 817,
											"end": 834,
											"name": "NOT",
											"source": 7
										},
										{
											"begin": 817,
											"end": 834,
											"name": "AND",
											"source": 7
										},
										{
											"begin": 817,
											"end": 834,
											"name": "PUSH",
											"source": 7,
											"value": "20"
										},
										{
											"begin": 817,
											"end": 834,
											"name": "ADD",
											"source": 7
										},
										{
											"begin": 817,
											"end": 834,
											"name": "DUP3",
											"source": 7
										},
										{
											"begin": 817,
											"end": 834,
											"name": "ADD",
											"source": 7
										},
										{
											"begin": 817,
											"end": 834,
											"name": "PUSH",
											"source": 7,
											"value": "40"
										},
										{
											"begin": 817,
											"end": 834,
											"name": "MSTORE",
											"source": 7
										},
										{
											"begin": 817,
											"end": 834,
											"name": "DUP1",
											"source": 7
										},
										{
											"begin": 817,
											"end": 834,
											"name": "ISZERO",
											"source": 7
										},
										{
											"begin": 817,
											"end": 834,
											"name": "PUSH [tag]",
											"source": 7,
											"value": "220"
										},
										{
											"begin": 817,
											"end": 834,
											"name": "JUMPI",
											"source": 7
										},
										{
											"begin": 817,
											"end": 834,
											"name": "PUSH",
											"source": 7,
											"value": "20"
										},
										{
											"begin": 817,
											"end": 834,
											"name": "DUP3",
											"source": 7
										},
										{
											"begin": 817,
											"end": 834,
											"name": "ADD",
											"source": 7
										},
										{
											"begin": 817,
											"end": 834,
											"name": "DUP2",
											"source": 7
										},
										{
											"begin": 817,
											"end": 834,
											"name": "DUP1",
											"source": 7
										},
										{
											"begin": 817,
											"end": 834,
											"name": "CALLDATASIZE",
											"source": 7
										},
										{
											"begin": 817,
											"end": 834,
											"name": "DUP4",
											"source": 7
										},
										{
											"begin": 817,
											"end": 834,
											"name": "CALLDATACOPY",
											"source": 7
										},
										{
											"begin": 817,
											"end": 834,
											"name": "ADD",
											"source": 7
										},
										{
											"begin": 817,
											"end": 834,
											"name": "SWAP1",
											"source": 7
										},
										{
											"begin": -1,
											"end": -1,
											"name": "POP",
											"source": -1
										},
										{
											"begin": 817,
											"end": 834,
											"name": "tag",
											"source": 7,
											"value": "220"
										},
										{
											"begin": 817,
											"end": 834,
											"name": "JUMPDEST",
											"source": 7
										},
										{
											"begin": 817,
											"end": 834,
											"name": "POP",
											"source": 7
										},
										{
											"begin": 795,
											"end": 834,
											"name": "SWAP1",
											"source": 7
										},
										{
											"begin": 795,
											"end": 834,
											"name": "POP",
											"source": 7
										},
										{
											"begin": 844,
											"end": 994,
											"name": "tag",
											"source": 7,
											"value": "221"
										},
										{
											"begin": 844,
											"end": 994,
											"name": "JUMPDEST",
											"source": 7
										},
										{
											"begin": 851,
											"end": 861,
											"name": "DUP5",
											"source": 7
										},
										{
											"begin": 851,
											"end": 861,
											"name": "ISZERO",
											"source": 7
										},
										{
											"begin": 844,
											"end": 994,
											"name": "PUSH [tag]",
											"source": 7,
											"value": "207"
										},
										{
											"begin": 844,
											"end": 994,
											"name": "JUMPI",
											"source": 7
										},
										{
											"begin": 877,
											"end": 888,
											"name": "PUSH [tag]",
											"source": 7,
											"value": "223"
										},
										{
											"begin": 887,
											"end": 888,
											"name": "PUSH",
											"source": 7,
											"value": "1"
										},
										{
											"begin": 877,
											"end": 888,
											"name": "DUP4",
											"source": 7
										},
										{
											"begin": 877,
											"end": 888,
											"name": "PUSH [tag]",
											"source": 7,
											"value": "224"
										},
										{
											"begin": 877,
											"end": 888,
											"name": "JUMP",
											"source": 7,
											"value": "[in]"
										},
										{
											"begin": 877,
											"end": 888,
											"name": "tag",
											"source": 7,
											"value": "223"
										},
										{
											"begin": 877,
											"end": 888,
											"name": "JUMPDEST",
											"source": 7
										},
										{
											"begin": 877,
											"end": 888,
											"name": "SWAP2",
											"source": 7
										},
										{
											"begin": -1,
											"end": -1,
											"name": "POP",
											"source": -1
										},
										{
											"begin": 945,
											"end": 955,
											"name": "PUSH [tag]",
											"source": 7,
											"value": "225"
										},
										{
											"begin": 953,
											"end": 955,
											"name": "PUSH",
											"source": 7,
											"value": "A"
										},
										{
											"begin": 945,
											"end": 950,
											"name": "DUP7",
											"source": 7
										},
										{
											"begin": 945,
											"end": 955,
											"name": "PUSH [tag]",
											"source": 7,
											"value": "226"
										},
										{
											"begin": 945,
											"end": 955,
											"name": "JUMP",
											"source": 7,
											"value": "[in]"
										},
										{
											"begin": 945,
											"end": 955,
											"name": "tag",
											"source": 7,
											"value": "225"
										},
										{
											"begin": 945,
											"end": 955,
											"name": "JUMPDEST",
											"source": 7
										},
										{
											"begin": 932,
											"end": 956,
											"name": "PUSH [tag]",
											"source": 7,
											"value": "227"
										},
										{
											"begin": 932,
											"end": 956,
											"name": "SWAP1",
											"source": 7
										},
										{
											"begin": 932,
											"end": 934,
											"name": "PUSH",
											"source": 7,
											"value": "30"
										},
										{
											"begin": 932,
											"end": 956,
											"name": "PUSH [tag]",
											"source": 7,
											"value": "228"
										},
										{
											"begin": 932,
											"end": 956,
											"name": "JUMP",
											"source": 7,
											"value": "[in]"
										},
										{
											"begin": 932,
											"end": 956,
											"name": "tag",
											"source": 7,
											"value": "227"
										},
										{
											"begin": 932,
											"end": 956,
											"name": "JUMPDEST",
											"source": 7
										},
										{
											"begin": 919,
											"end": 958,
											"name": "PUSH",
											"source": 7,
											"value": "F8"
										},
										{
											"begin": 919,
											"end": 958,
											"name": "SHL",
											"source": 7
										},
										{
											"begin": 902,
											"end": 908,
											"name": "DUP2",
											"source": 7
										},
										{
											"begin": 909,
											"end": 915,
											"name": "DUP4",
											"source": 7
										},
										{
											"begin": 902,
											"end": 916,
											"name": "DUP2",
											"source": 7
										},
										{
											"begin": 902,
											"end": 916,
											"name": "MLOAD",
											"source": 7
										},
										{
											"begin": 902,
											"end": 916,
											"name": "DUP2",
											"source": 7
										},
										{
											"begin": 902,
											"end": 916,
											"name": "LT",
											"source": 7
										},
										{
											"begin": 902,
											"end": 916,
											"name": "PUSH [tag]",
											"source": 7,
											"value": "230"
										},
										{
											"begin": 902,
											"end": 916,
											"name": "JUMPI",
											"source": 7
										},
										{
											"begin": 902,
											"end": 916,
											"name": "PUSH [tag]",
											"source": 7,
											"value": "230"
										},
										{
											"begin": 902,
											"end": 916,
											"name": "PUSH [tag]",
											"source": 7,
											"value": "231"
										},
										{
											"begin": 902,
											"end": 916,
											"name": "JUMP",
											"source": 7,
											"value": "[in]"
										},
										{
											"begin": 902,
											"end": 916,
											"name": "tag",
											"source": 7,
											"value": "230"
										},
										{
											"begin": 902,
											"end": 916,
											"name": "JUMPDEST",
											"source": 7
										},
										{
											"begin": 902,
											"end": 916,
											"name": "PUSH",
											"source": 7,
											"value": "20"
										},
										{
											"begin": 902,
											"end": 916,
											"name": "ADD",
											"source": 7
										},
										{
											"begin": 902,
											"end": 916,
											"name": "ADD",
											"source": 7
										},
										{
											"begin": 902,
											"end": 958,
											"name": "SWAP1",
											"source": 7
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "F8"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SHL",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SUB",
											"source": -1
										},
										{
											"begin": 902,
											"end": 958,
											"name": "NOT",
											"source": 7
										},
										{
											"begin": 902,
											"end": 958,
											"name": "AND",
											"source": 7
										},
										{
											"begin": 902,
											"end": 958,
											"name": "SWAP1",
											"source": 7
										},
										{
											"begin": 902,
											"end": 958,
											"name": "DUP2",
											"source": 7
										},
										{
											"begin": 902,
											"end": 958,
											"name": "PUSH",
											"source": 7,
											"value": "0"
										},
										{
											"begin": 902,
											"end": 958,
											"name": "BYTE",
											"source": 7
										},
										{
											"begin": 902,
											"end": 958,
											"name": "SWAP1",
											"source": 7
										},
										{
											"begin": 902,
											"end": 958,
											"name": "MSTORE8",
											"source": 7
										},
										{
											"begin": -1,
											"end": -1,
											"name": "POP",
											"source": -1
										},
										{
											"begin": 972,
											"end": 983,
											"name": "PUSH [tag]",
											"source": 7,
											"value": "232"
										},
										{
											"begin": 981,
											"end": 983,
											"name": "PUSH",
											"source": 7,
											"value": "A"
										},
										{
											"begin": 972,
											"end": 983,
											"name": "DUP7",
											"source": 7
										},
										{
											"begin": 972,
											"end": 983,
											"name": "PUSH [tag]",
											"source": 7,
											"value": "216"
										},
										{
											"begin": 972,
											"end": 983,
											"name": "JUMP",
											"source": 7,
											"value": "[in]"
										},
										{
											"begin": 972,
											"end": 983,
											"name": "tag",
											"source": 7,
											"value": "232"
										},
										{
											"begin": 972,
											"end": 983,
											"name": "JUMPDEST",
											"source": 7
										},
										{
											"begin": 972,
											"end": 983,
											"name": "SWAP5",
											"source": 7
										},
										{
											"begin": 972,
											"end": 983,
											"name": "POP",
											"source": 7
										},
										{
											"begin": 844,
											"end": 994,
											"name": "PUSH [tag]",
											"source": 7,
											"value": "221"
										},
										{
											"begin": 844,
											"end": 994,
											"name": "JUMP",
											"source": 7
										},
										{
											"begin": 14,
											"end": 145,
											"name": "tag",
											"source": 13,
											"value": "235"
										},
										{
											"begin": 14,
											"end": 145,
											"name": "JUMPDEST",
											"source": 13
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "E0"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SHL",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SUB",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "NOT",
											"source": -1
										},
										{
											"begin": 88,
											"end": 120,
											"name": "DUP2",
											"source": 13
										},
										{
											"begin": 88,
											"end": 120,
											"name": "AND",
											"source": 13
										},
										{
											"begin": 78,
											"end": 121,
											"name": "DUP2",
											"source": 13
										},
										{
											"begin": 78,
											"end": 121,
											"name": "EQ",
											"source": 13
										},
										{
											"begin": 68,
											"end": 139,
											"name": "PUSH [tag]",
											"source": 13,
											"value": "243"
										},
										{
											"begin": 68,
											"end": 139,
											"name": "JUMPI",
											"source": 13
										},
										{
											"begin": 135,
											"end": 136,
											"name": "PUSH",
											"source": 13,
											"value": "0"
										},
										{
											"begin": 132,
											"end": 133,
											"name": "DUP1",
											"source": 13
										},
										{
											"begin": 125,
											"end": 137,
											"name": "REVERT",
											"source": 13
										},
										{
											"begin": 68,
											"end": 139,
											"name": "tag",
											"source": 13,
											"value": "243"
										},
										{
											"begin": 68,
											"end": 139,
											"name": "JUMPDEST",
											"source": 13
										},
										{
											"begin": 14,
											"end": 145,
											"name": "POP",
											"source": 13
										},
										{
											"begin": 14,
											"end": 145,
											"name": "JUMP",
											"source": 13,
											"value": "[out]"
										},
										{
											"begin": 150,
											"end": 395,
											"name": "tag",
											"source": 13,
											"value": "22"
										},
										{
											"begin": 150,
											"end": 395,
											"name": "JUMPDEST",
											"source": 13
										},
										{
											"begin": 208,
											"end": 214,
											"name": "PUSH",
											"source": 13,
											"value": "0"
										},
										{
											"begin": 261,
											"end": 263,
											"name": "PUSH",
											"source": 13,
											"value": "20"
										},
										{
											"begin": 249,
											"end": 258,
											"name": "DUP3",
											"source": 13
										},
										{
											"begin": 240,
											"end": 247,
											"name": "DUP5",
											"source": 13
										},
										{
											"begin": 236,
											"end": 259,
											"name": "SUB",
											"source": 13
										},
										{
											"begin": 232,
											"end": 264,
											"name": "SLT",
											"source": 13
										},
										{
											"begin": 229,
											"end": 281,
											"name": "ISZERO",
											"source": 13
										},
										{
											"begin": 229,
											"end": 281,
											"name": "PUSH [tag]",
											"source": 13,
											"value": "245"
										},
										{
											"begin": 229,
											"end": 281,
											"name": "JUMPI",
											"source": 13
										},
										{
											"begin": 277,
											"end": 278,
											"name": "PUSH",
											"source": 13,
											"value": "0"
										},
										{
											"begin": 274,
											"end": 275,
											"name": "DUP1",
											"source": 13
										},
										{
											"begin": 267,
											"end": 279,
											"name": "REVERT",
											"source": 13
										},
										{
											"begin": 229,
											"end": 281,
											"name": "tag",
											"source": 13,
											"value": "245"
										},
										{
											"begin": 229,
											"end": 281,
											"name": "JUMPDEST",
											"source": 13
										},
										{
											"begin": 316,
											"end": 325,
											"name": "DUP2",
											"source": 13
										},
										{
											"begin": 303,
											"end": 326,
											"name": "CALLDATALOAD",
											"source": 13
										},
										{
											"begin": 335,
											"end": 365,
											"name": "PUSH [tag]",
											"source": 13,
											"value": "146"
										},
										{
											"begin": 359,
											"end": 364,
											"name": "DUP2",
											"source": 13
										},
										{
											"begin": 335,
											"end": 365,
											"name": "PUSH [tag]",
											"source": 13,
											"value": "235"
										},
										{
											"begin": 335,
											"end": 365,
											"name": "JUMP",
											"source": 13,
											"value": "[in]"
										},
										{
											"begin": 592,
											"end": 850,
											"name": "tag",
											"source": 13,
											"value": "236"
										},
										{
											"begin": 592,
											"end": 850,
											"name": "JUMPDEST",
											"source": 13
										},
										{
											"begin": 664,
											"end": 665,
											"name": "PUSH",
											"source": 13,
											"value": "0"
										},
										{
											"begin": 674,
											"end": 787,
											"name": "tag",
											"source": 13,
											"value": "249"
										},
										{
											"begin": 674,
											"end": 787,
											"name": "JUMPDEST",
											"source": 13
										},
										{
											"begin": 688,
											"end": 694,
											"name": "DUP4",
											"source": 13
										},
										{
											"begin": 685,
											"end": 686,
											"name": "DUP2",
											"source": 13
										},
										{
											"begin": 682,
											"end": 695,
											"name": "LT",
											"source": 13
										},
										{
											"begin": 674,
											"end": 787,
											"name": "ISZERO",
											"source": 13
										},
										{
											"begin": 674,
											"end": 787,
											"name": "PUSH [tag]",
											"source": 13,
											"value": "251"
										},
										{
											"begin": 674,
											"end": 787,
											"name": "JUMPI",
											"source": 13
										},
										{
											"begin": 764,
											"end": 775,
											"name": "DUP2",
											"source": 13
										},
										{
											"begin": 764,
											"end": 775,
											"name": "DUP2",
											"source": 13
										},
										{
											"begin": 764,
											"end": 775,
											"name": "ADD",
											"source": 13
										},
										{
											"begin": 758,
											"end": 776,
											"name": "MLOAD",
											"source": 13
										},
										{
											"begin": 745,
											"end": 756,
											"name": "DUP4",
											"source": 13
										},
										{
											"begin": 745,
											"end": 756,
											"name": "DUP3",
											"source": 13
										},
										{
											"begin": 745,
											"end": 756,
											"name": "ADD",
											"source": 13
										},
										{
											"begin": 738,
											"end": 777,
											"name": "MSTORE",
											"source": 13
										},
										{
											"begin": 710,
											"end": 712,
											"name": "PUSH",
											"source": 13,
											"value": "20"
										},
										{
											"begin": 703,
											"end": 713,
											"name": "ADD",
											"source": 13
										},
										{
											"begin": 674,
											"end": 787,
											"name": "PUSH [tag]",
											"source": 13,
											"value": "249"
										},
										{
											"begin": 674,
											"end": 787,
											"name": "JUMP",
											"source": 13
										},
										{
											"begin": 674,
											"end": 787,
											"name": "tag",
											"source": 13,
											"value": "251"
										},
										{
											"begin": 674,
											"end": 787,
											"name": "JUMPDEST",
											"source": 13
										},
										{
											"begin": 805,
											"end": 811,
											"name": "DUP4",
											"source": 13
										},
										{
											"begin": 802,
											"end": 803,
											"name": "DUP2",
											"source": 13
										},
										{
											"begin": 799,
											"end": 812,
											"name": "GT",
											"source": 13
										},
										{
											"begin": 796,
											"end": 844,
											"name": "ISZERO",
											"source": 13
										},
										{
											"begin": 796,
											"end": 844,
											"name": "PUSH [tag]",
											"source": 13,
											"value": "139"
										},
										{
											"begin": 796,
											"end": 844,
											"name": "JUMPI",
											"source": 13
										},
										{
											"begin": -1,
											"end": -1,
											"name": "POP",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "POP",
											"source": -1
										},
										{
											"begin": 840,
											"end": 841,
											"name": "PUSH",
											"source": 13,
											"value": "0"
										},
										{
											"begin": 822,
											"end": 838,
											"name": "SWAP2",
											"source": 13
										},
										{
											"begin": 822,
											"end": 838,
											"name": "ADD",
											"source": 13
										},
										{
											"begin": 815,
											"end": 842,
											"name": "MSTORE",
											"source": 13
										},
										{
											"begin": 592,
											"end": 850,
											"name": "JUMP",
											"source": 13,
											"value": "[out]"
										},
										{
											"begin": 855,
											"end": 1113,
											"name": "tag",
											"source": 13,
											"value": "237"
										},
										{
											"begin": 855,
											"end": 1113,
											"name": "JUMPDEST",
											"source": 13
										},
										{
											"begin": 897,
											"end": 900,
											"name": "PUSH",
											"source": 13,
											"value": "0"
										},
										{
											"begin": 935,
											"end": 940,
											"name": "DUP2",
											"source": 13
										},
										{
											"begin": 929,
											"end": 941,
											"name": "MLOAD",
											"source": 13
										},
										{
											"begin": 962,
											"end": 968,
											"name": "DUP1",
											"source": 13
										},
										{
											"begin": 957,
											"end": 960,
											"name": "DUP5",
											"source": 13
										},
										{
											"begin": 950,
											"end": 969,
											"name": "MSTORE",
											"source": 13
										},
										{
											"begin": 978,
											"end": 1041,
											"name": "PUSH [tag]",
											"source": 13,
											"value": "254"
										},
										{
											"begin": 1034,
											"end": 1040,
											"name": "DUP2",
											"source": 13
										},
										{
											"begin": 1027,
											"end": 1031,
											"name": "PUSH",
											"source": 13,
											"value": "20"
										},
										{
											"begin": 1022,
											"end": 1025,
											"name": "DUP7",
											"source": 13
										},
										{
											"begin": 1018,
											"end": 1032,
											"name": "ADD",
											"source": 13
										},
										{
											"begin": 1011,
											"end": 1015,
											"name": "PUSH",
											"source": 13,
											"value": "20"
										},
										{
											"begin": 1004,
											"end": 1009,
											"name": "DUP7",
											"source": 13
										},
										{
											"begin": 1000,
											"end": 1016,
											"name": "ADD",
											"source": 13
										},
										{
											"begin": 978,
											"end": 1041,
											"name": "PUSH [tag]",
											"source": 13,
											"value": "236"
										},
										{
											"begin": 978,
											"end": 1041,
											"name": "JUMP",
											"source": 13,
											"value": "[in]"
										},
										{
											"begin": 978,
											"end": 1041,
											"name": "tag",
											"source": 13,
											"value": "254"
										},
										{
											"begin": 978,
											"end": 1041,
											"name": "JUMPDEST",
											"source": 13
										},
										{
											"begin": 1095,
											"end": 1097,
											"name": "PUSH",
											"source": 13,
											"value": "1F"
										},
										{
											"begin": 1074,
											"end": 1089,
											"name": "ADD",
											"source": 13
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1F"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "NOT",
											"source": -1
										},
										{
											"begin": 1070,
											"end": 1099,
											"name": "AND",
											"source": 13
										},
										{
											"begin": 1061,
											"end": 1100,
											"name": "SWAP3",
											"source": 13
										},
										{
											"begin": 1061,
											"end": 1100,
											"name": "SWAP1",
											"source": 13
										},
										{
											"begin": 1061,
											"end": 1100,
											"name": "SWAP3",
											"source": 13
										},
										{
											"begin": 1061,
											"end": 1100,
											"name": "ADD",
											"source": 13
										},
										{
											"begin": 1102,
											"end": 1106,
											"name": "PUSH",
											"source": 13,
											"value": "20"
										},
										{
											"begin": 1057,
											"end": 1107,
											"name": "ADD",
											"source": 13
										},
										{
											"begin": 1057,
											"end": 1107,
											"name": "SWAP3",
											"source": 13
										},
										{
											"begin": 855,
											"end": 1113,
											"name": "SWAP2",
											"source": 13
										},
										{
											"begin": -1,
											"end": -1,
											"name": "POP",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "POP",
											"source": -1
										},
										{
											"begin": 855,
											"end": 1113,
											"name": "JUMP",
											"source": 13,
											"value": "[out]"
										},
										{
											"begin": 1118,
											"end": 1338,
											"name": "tag",
											"source": 13,
											"value": "29"
										},
										{
											"begin": 1118,
											"end": 1338,
											"name": "JUMPDEST",
											"source": 13
										},
										{
											"begin": 1267,
											"end": 1269,
											"name": "PUSH",
											"source": 13,
											"value": "20"
										},
										{
											"begin": 1256,
											"end": 1265,
											"name": "DUP2",
											"source": 13
										},
										{
											"begin": 1249,
											"end": 1270,
											"name": "MSTORE",
											"source": 13
										},
										{
											"begin": 1230,
											"end": 1234,
											"name": "PUSH",
											"source": 13,
											"value": "0"
										},
										{
											"begin": 1287,
											"end": 1332,
											"name": "PUSH [tag]",
											"source": 13,
											"value": "146"
										},
										{
											"begin": 1328,
											"end": 1330,
											"name": "PUSH",
											"source": 13,
											"value": "20"
										},
										{
											"begin": 1317,
											"end": 1326,
											"name": "DUP4",
											"source": 13
										},
										{
											"begin": 1313,
											"end": 1331,
											"name": "ADD",
											"source": 13
										},
										{
											"begin": 1305,
											"end": 1311,
											"name": "DUP5",
											"source": 13
										},
										{
											"begin": 1287,
											"end": 1332,
											"name": "PUSH [tag]",
											"source": 13,
											"value": "237"
										},
										{
											"begin": 1287,
											"end": 1332,
											"name": "JUMP",
											"source": 13,
											"value": "[in]"
										},
										{
											"begin": 1343,
											"end": 1523,
											"name": "tag",
											"source": 13,
											"value": "32"
										},
										{
											"begin": 1343,
											"end": 1523,
											"name": "JUMPDEST",
											"source": 13
										},
										{
											"begin": 1402,
											"end": 1408,
											"name": "PUSH",
											"source": 13,
											"value": "0"
										},
										{
											"begin": 1455,
											"end": 1457,
											"name": "PUSH",
											"source": 13,
											"value": "20"
										},
										{
											"begin": 1443,
											"end": 1452,
											"name": "DUP3",
											"source": 13
										},
										{
											"begin": 1434,
											"end": 1441,
											"name": "DUP5",
											"source": 13
										},
										{
											"begin": 1430,
											"end": 1453,
											"name": "SUB",
											"source": 13
										},
										{
											"begin": 1426,
											"end": 1458,
											"name": "SLT",
											"source": 13
										},
										{
											"begin": 1423,
											"end": 1475,
											"name": "ISZERO",
											"source": 13
										},
										{
											"begin": 1423,
											"end": 1475,
											"name": "PUSH [tag]",
											"source": 13,
											"value": "258"
										},
										{
											"begin": 1423,
											"end": 1475,
											"name": "JUMPI",
											"source": 13
										},
										{
											"begin": 1471,
											"end": 1472,
											"name": "PUSH",
											"source": 13,
											"value": "0"
										},
										{
											"begin": 1468,
											"end": 1469,
											"name": "DUP1",
											"source": 13
										},
										{
											"begin": 1461,
											"end": 1473,
											"name": "REVERT",
											"source": 13
										},
										{
											"begin": 1423,
											"end": 1475,
											"name": "tag",
											"source": 13,
											"value": "258"
										},
										{
											"begin": 1423,
											"end": 1475,
											"name": "JUMPDEST",
											"source": 13
										},
										{
											"begin": -1,
											"end": -1,
											"name": "POP",
											"source": -1
										},
										{
											"begin": 1494,
											"end": 1517,
											"name": "CALLDATALOAD",
											"source": 13
										},
										{
											"begin": 1494,
											"end": 1517,
											"name": "SWAP2",
											"source": 13
										},
										{
											"begin": 1343,
											"end": 1523,
											"name": "SWAP1",
											"source": 13
										},
										{
											"begin": -1,
											"end": -1,
											"name": "POP",
											"source": -1
										},
										{
											"begin": 1343,
											"end": 1523,
											"name": "JUMP",
											"source": 13,
											"value": "[out]"
										},
										{
											"begin": 1736,
											"end": 1909,
											"name": "tag",
											"source": 13,
											"value": "238"
										},
										{
											"begin": 1736,
											"end": 1909,
											"name": "JUMPDEST",
											"source": 13
										},
										{
											"begin": 1804,
											"end": 1824,
											"name": "DUP1",
											"source": 13
										},
										{
											"begin": 1804,
											"end": 1824,
											"name": "CALLDATALOAD",
											"source": 13
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "A0"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SHL",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SUB",
											"source": -1
										},
										{
											"begin": 1853,
											"end": 1884,
											"name": "DUP2",
											"source": 13
										},
										{
											"begin": 1853,
											"end": 1884,
											"name": "AND",
											"source": 13
										},
										{
											"begin": 1843,
											"end": 1885,
											"name": "DUP2",
											"source": 13
										},
										{
											"begin": 1843,
											"end": 1885,
											"name": "EQ",
											"source": 13
										},
										{
											"begin": 1833,
											"end": 1903,
											"name": "PUSH [tag]",
											"source": 13,
											"value": "261"
										},
										{
											"begin": 1833,
											"end": 1903,
											"name": "JUMPI",
											"source": 13
										},
										{
											"begin": 1899,
											"end": 1900,
											"name": "PUSH",
											"source": 13,
											"value": "0"
										},
										{
											"begin": 1896,
											"end": 1897,
											"name": "DUP1",
											"source": 13
										},
										{
											"begin": 1889,
											"end": 1901,
											"name": "REVERT",
											"source": 13
										},
										{
											"begin": 1833,
											"end": 1903,
											"name": "tag",
											"source": 13,
											"value": "261"
										},
										{
											"begin": 1833,
											"end": 1903,
											"name": "JUMPDEST",
											"source": 13
										},
										{
											"begin": 1736,
											"end": 1909,
											"name": "SWAP2",
											"source": 13
										},
										{
											"begin": 1736,
											"end": 1909,
											"name": "SWAP1",
											"source": 13
										},
										{
											"begin": 1736,
											"end": 1909,
											"name": "POP",
											"source": 13
										},
										{
											"begin": 1736,
											"end": 1909,
											"name": "JUMP",
											"source": 13,
											"value": "[out]"
										},
										{
											"begin": 1914,
											"end": 2168,
											"name": "tag",
											"source": 13,
											"value": "38"
										},
										{
											"begin": 1914,
											"end": 2168,
											"name": "JUMPDEST",
											"source": 13
										},
										{
											"begin": 1982,
											"end": 1988,
											"name": "PUSH",
											"source": 13,
											"value": "0"
										},
										{
											"begin": 1990,
											"end": 1996,
											"name": "DUP1",
											"source": 13
										},
										{
											"begin": 2043,
											"end": 2045,
											"name": "PUSH",
											"source": 13,
											"value": "40"
										},
										{
											"begin": 2031,
											"end": 2040,
											"name": "DUP4",
											"source": 13
										},
										{
											"begin": 2022,
											"end": 2029,
											"name": "DUP6",
											"source": 13
										},
										{
											"begin": 2018,
											"end": 2041,
											"name": "SUB",
											"source": 13
										},
										{
											"begin": 2014,
											"end": 2046,
											"name": "SLT",
											"source": 13
										},
										{
											"begin": 2011,
											"end": 2063,
											"name": "ISZERO",
											"source": 13
										},
										{
											"begin": 2011,
											"end": 2063,
											"name": "PUSH [tag]",
											"source": 13,
											"value": "263"
										},
										{
											"begin": 2011,
											"end": 2063,
											"name": "JUMPI",
											"source": 13
										},
										{
											"begin": 2059,
											"end": 2060,
											"name": "PUSH",
											"source": 13,
											"value": "0"
										},
										{
											"begin": 2056,
											"end": 2057,
											"name": "DUP1",
											"source": 13
										},
										{
											"begin": 2049,
											"end": 2061,
											"name": "REVERT",
											"source": 13
										},
										{
											"begin": 2011,
											"end": 2063,
											"name": "tag",
											"source": 13,
											"value": "263"
										},
										{
											"begin": 2011,
											"end": 2063,
											"name": "JUMPDEST",
											"source": 13
										},
										{
											"begin": 2082,
											"end": 2111,
											"name": "PUSH [tag]",
											"source": 13,
											"value": "264"
										},
										{
											"begin": 2101,
											"end": 2110,
											"name": "DUP4",
											"source": 13
										},
										{
											"begin": 2082,
											"end": 2111,
											"name": "PUSH [tag]",
											"source": 13,
											"value": "238"
										},
										{
											"begin": 2082,
											"end": 2111,
											"name": "JUMP",
											"source": 13,
											"value": "[in]"
										},
										{
											"begin": 2082,
											"end": 2111,
											"name": "tag",
											"source": 13,
											"value": "264"
										},
										{
											"begin": 2082,
											"end": 2111,
											"name": "JUMPDEST",
											"source": 13
										},
										{
											"begin": 2072,
											"end": 2111,
											"name": "SWAP5",
											"source": 13
										},
										{
											"begin": 2158,
											"end": 2160,
											"name": "PUSH",
											"source": 13,
											"value": "20"
										},
										{
											"begin": 2143,
											"end": 2161,
											"name": "SWAP4",
											"source": 13
										},
										{
											"begin": 2143,
											"end": 2161,
											"name": "SWAP1",
											"source": 13
										},
										{
											"begin": 2143,
											"end": 2161,
											"name": "SWAP4",
											"source": 13
										},
										{
											"begin": 2143,
											"end": 2161,
											"name": "ADD",
											"source": 13
										},
										{
											"begin": 2130,
											"end": 2162,
											"name": "CALLDATALOAD",
											"source": 13
										},
										{
											"begin": 2130,
											"end": 2162,
											"name": "SWAP4",
											"source": 13
										},
										{
											"begin": -1,
											"end": -1,
											"name": "POP",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "POP",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "POP",
											"source": -1
										},
										{
											"begin": 1914,
											"end": 2168,
											"name": "JUMP",
											"source": 13,
											"value": "[out]"
										},
										{
											"begin": 2355,
											"end": 2683,
											"name": "tag",
											"source": 13,
											"value": "46"
										},
										{
											"begin": 2355,
											"end": 2683,
											"name": "JUMPDEST",
											"source": 13
										},
										{
											"begin": 2432,
											"end": 2438,
											"name": "PUSH",
											"source": 13,
											"value": "0"
										},
										{
											"begin": 2440,
											"end": 2446,
											"name": "DUP1",
											"source": 13
										},
										{
											"begin": 2448,
											"end": 2454,
											"name": "PUSH",
											"source": 13,
											"value": "0"
										},
										{
											"begin": 2501,
											"end": 2503,
											"name": "PUSH",
											"source": 13,
											"value": "60"
										},
										{
											"begin": 2489,
											"end": 2498,
											"name": "DUP5",
											"source": 13
										},
										{
											"begin": 2480,
											"end": 2487,
											"name": "DUP7",
											"source": 13
										},
										{
											"begin": 2476,
											"end": 2499,
											"name": "SUB",
											"source": 13
										},
										{
											"begin": 2472,
											"end": 2504,
											"name": "SLT",
											"source": 13
										},
										{
											"begin": 2469,
											"end": 2521,
											"name": "ISZERO",
											"source": 13
										},
										{
											"begin": 2469,
											"end": 2521,
											"name": "PUSH [tag]",
											"source": 13,
											"value": "267"
										},
										{
											"begin": 2469,
											"end": 2521,
											"name": "JUMPI",
											"source": 13
										},
										{
											"begin": 2517,
											"end": 2518,
											"name": "PUSH",
											"source": 13,
											"value": "0"
										},
										{
											"begin": 2514,
											"end": 2515,
											"name": "DUP1",
											"source": 13
										},
										{
											"begin": 2507,
											"end": 2519,
											"name": "REVERT",
											"source": 13
										},
										{
											"begin": 2469,
											"end": 2521,
											"name": "tag",
											"source": 13,
											"value": "267"
										},
										{
											"begin": 2469,
											"end": 2521,
											"name": "JUMPDEST",
											"source": 13
										},
										{
											"begin": 2540,
											"end": 2569,
											"name": "PUSH [tag]",
											"source": 13,
											"value": "268"
										},
										{
											"begin": 2559,
											"end": 2568,
											"name": "DUP5",
											"source": 13
										},
										{
											"begin": 2540,
											"end": 2569,
											"name": "PUSH [tag]",
											"source": 13,
											"value": "238"
										},
										{
											"begin": 2540,
											"end": 2569,
											"name": "JUMP",
											"source": 13,
											"value": "[in]"
										},
										{
											"begin": 2540,
											"end": 2569,
											"name": "tag",
											"source": 13,
											"value": "268"
										},
										{
											"begin": 2540,
											"end": 2569,
											"name": "JUMPDEST",
											"source": 13
										},
										{
											"begin": 2530,
											"end": 2569,
											"name": "SWAP3",
											"source": 13
										},
										{
											"begin": 2530,
											"end": 2569,
											"name": "POP",
											"source": 13
										},
										{
											"begin": 2588,
											"end": 2626,
											"name": "PUSH [tag]",
											"source": 13,
											"value": "269"
										},
										{
											"begin": 2622,
											"end": 2624,
											"name": "PUSH",
											"source": 13,
											"value": "20"
										},
										{
											"begin": 2611,
											"end": 2620,
											"name": "DUP6",
											"source": 13
										},
										{
											"begin": 2607,
											"end": 2625,
											"name": "ADD",
											"source": 13
										},
										{
											"begin": 2588,
											"end": 2626,
											"name": "PUSH [tag]",
											"source": 13,
											"value": "238"
										},
										{
											"begin": 2588,
											"end": 2626,
											"name": "JUMP",
											"source": 13,
											"value": "[in]"
										},
										{
											"begin": 2588,
											"end": 2626,
											"name": "tag",
											"source": 13,
											"value": "269"
										},
										{
											"begin": 2588,
											"end": 2626,
											"name": "JUMPDEST",
											"source": 13
										},
										{
											"begin": 2578,
											"end": 2626,
											"name": "SWAP2",
											"source": 13
										},
										{
											"begin": 2578,
											"end": 2626,
											"name": "POP",
											"source": 13
										},
										{
											"begin": 2673,
											"end": 2675,
											"name": "PUSH",
											"source": 13,
											"value": "40"
										},
										{
											"begin": 2662,
											"end": 2671,
											"name": "DUP5",
											"source": 13
										},
										{
											"begin": 2658,
											"end": 2676,
											"name": "ADD",
											"source": 13
										},
										{
											"begin": 2645,
											"end": 2677,
											"name": "CALLDATALOAD",
											"source": 13
										},
										{
											"begin": 2635,
											"end": 2677,
											"name": "SWAP1",
											"source": 13
										},
										{
											"begin": 2635,
											"end": 2677,
											"name": "POP",
											"source": 13
										},
										{
											"begin": 2355,
											"end": 2683,
											"name": "SWAP3",
											"source": 13
										},
										{
											"begin": 2355,
											"end": 2683,
											"name": "POP",
											"source": 13
										},
										{
											"begin": 2355,
											"end": 2683,
											"name": "SWAP3",
											"source": 13
										},
										{
											"begin": 2355,
											"end": 2683,
											"name": "POP",
											"source": 13
										},
										{
											"begin": 2355,
											"end": 2683,
											"name": "SWAP3",
											"source": 13
										},
										{
											"begin": 2355,
											"end": 2683,
											"name": "JUMP",
											"source": 13,
											"value": "[out]"
										},
										{
											"begin": 2688,
											"end": 2874,
											"name": "tag",
											"source": 13,
											"value": "57"
										},
										{
											"begin": 2688,
											"end": 2874,
											"name": "JUMPDEST",
											"source": 13
										},
										{
											"begin": 2747,
											"end": 2753,
											"name": "PUSH",
											"source": 13,
											"value": "0"
										},
										{
											"begin": 2800,
											"end": 2802,
											"name": "PUSH",
											"source": 13,
											"value": "20"
										},
										{
											"begin": 2788,
											"end": 2797,
											"name": "DUP3",
											"source": 13
										},
										{
											"begin": 2779,
											"end": 2786,
											"name": "DUP5",
											"source": 13
										},
										{
											"begin": 2775,
											"end": 2798,
											"name": "SUB",
											"source": 13
										},
										{
											"begin": 2771,
											"end": 2803,
											"name": "SLT",
											"source": 13
										},
										{
											"begin": 2768,
											"end": 2820,
											"name": "ISZERO",
											"source": 13
										},
										{
											"begin": 2768,
											"end": 2820,
											"name": "PUSH [tag]",
											"source": 13,
											"value": "271"
										},
										{
											"begin": 2768,
											"end": 2820,
											"name": "JUMPI",
											"source": 13
										},
										{
											"begin": 2816,
											"end": 2817,
											"name": "PUSH",
											"source": 13,
											"value": "0"
										},
										{
											"begin": 2813,
											"end": 2814,
											"name": "DUP1",
											"source": 13
										},
										{
											"begin": 2806,
											"end": 2818,
											"name": "REVERT",
											"source": 13
										},
										{
											"begin": 2768,
											"end": 2820,
											"name": "tag",
											"source": 13,
											"value": "271"
										},
										{
											"begin": 2768,
											"end": 2820,
											"name": "JUMPDEST",
											"source": 13
										},
										{
											"begin": 2839,
											"end": 2868,
											"name": "PUSH [tag]",
											"source": 13,
											"value": "146"
										},
										{
											"begin": 2858,
											"end": 2867,
											"name": "DUP3",
											"source": 13
										},
										{
											"begin": 2839,
											"end": 2868,
											"name": "PUSH [tag]",
											"source": 13,
											"value": "238"
										},
										{
											"begin": 2839,
											"end": 2868,
											"name": "JUMP",
											"source": 13,
											"value": "[in]"
										},
										{
											"begin": 2879,
											"end": 3226,
											"name": "tag",
											"source": 13,
											"value": "65"
										},
										{
											"begin": 2879,
											"end": 3226,
											"name": "JUMPDEST",
											"source": 13
										},
										{
											"begin": 2944,
											"end": 2950,
											"name": "PUSH",
											"source": 13,
											"value": "0"
										},
										{
											"begin": 2952,
											"end": 2958,
											"name": "DUP1",
											"source": 13
										},
										{
											"begin": 3005,
											"end": 3007,
											"name": "PUSH",
											"source": 13,
											"value": "40"
										},
										{
											"begin": 2993,
											"end": 3002,
											"name": "DUP4",
											"source": 13
										},
										{
											"begin": 2984,
											"end": 2991,
											"name": "DUP6",
											"source": 13
										},
										{
											"begin": 2980,
											"end": 3003,
											"name": "SUB",
											"source": 13
										},
										{
											"begin": 2976,
											"end": 3008,
											"name": "SLT",
											"source": 13
										},
										{
											"begin": 2973,
											"end": 3025,
											"name": "ISZERO",
											"source": 13
										},
										{
											"begin": 2973,
											"end": 3025,
											"name": "PUSH [tag]",
											"source": 13,
											"value": "274"
										},
										{
											"begin": 2973,
											"end": 3025,
											"name": "JUMPI",
											"source": 13
										},
										{
											"begin": 3021,
											"end": 3022,
											"name": "PUSH",
											"source": 13,
											"value": "0"
										},
										{
											"begin": 3018,
											"end": 3019,
											"name": "DUP1",
											"source": 13
										},
										{
											"begin": 3011,
											"end": 3023,
											"name": "REVERT",
											"source": 13
										},
										{
											"begin": 2973,
											"end": 3025,
											"name": "tag",
											"source": 13,
											"value": "274"
										},
										{
											"begin": 2973,
											"end": 3025,
											"name": "JUMPDEST",
											"source": 13
										},
										{
											"begin": 3044,
											"end": 3073,
											"name": "PUSH [tag]",
											"source": 13,
											"value": "275"
										},
										{
											"begin": 3063,
											"end": 3072,
											"name": "DUP4",
											"source": 13
										},
										{
											"begin": 3044,
											"end": 3073,
											"name": "PUSH [tag]",
											"source": 13,
											"value": "238"
										},
										{
											"begin": 3044,
											"end": 3073,
											"name": "JUMP",
											"source": 13,
											"value": "[in]"
										},
										{
											"begin": 3044,
											"end": 3073,
											"name": "tag",
											"source": 13,
											"value": "275"
										},
										{
											"begin": 3044,
											"end": 3073,
											"name": "JUMPDEST",
											"source": 13
										},
										{
											"begin": 3034,
											"end": 3073,
											"name": "SWAP2",
											"source": 13
										},
										{
											"begin": 3034,
											"end": 3073,
											"name": "POP",
											"source": 13
										},
										{
											"begin": 3123,
											"end": 3125,
											"name": "PUSH",
											"source": 13,
											"value": "20"
										},
										{
											"begin": 3112,
											"end": 3121,
											"name": "DUP4",
											"source": 13
										},
										{
											"begin": 3108,
											"end": 3126,
											"name": "ADD",
											"source": 13
										},
										{
											"begin": 3095,
											"end": 3127,
											"name": "CALLDATALOAD",
											"source": 13
										},
										{
											"begin": 3170,
											"end": 3175,
											"name": "DUP1",
											"source": 13
										},
										{
											"begin": 3163,
											"end": 3176,
											"name": "ISZERO",
											"source": 13
										},
										{
											"begin": 3156,
											"end": 3177,
											"name": "ISZERO",
											"source": 13
										},
										{
											"begin": 3149,
											"end": 3154,
											"name": "DUP2",
											"source": 13
										},
										{
											"begin": 3146,
											"end": 3178,
											"name": "EQ",
											"source": 13
										},
										{
											"begin": 3136,
											"end": 3196,
											"name": "PUSH [tag]",
											"source": 13,
											"value": "276"
										},
										{
											"begin": 3136,
											"end": 3196,
											"name": "JUMPI",
											"source": 13
										},
										{
											"begin": 3192,
											"end": 3193,
											"name": "PUSH",
											"source": 13,
											"value": "0"
										},
										{
											"begin": 3189,
											"end": 3190,
											"name": "DUP1",
											"source": 13
										},
										{
											"begin": 3182,
											"end": 3194,
											"name": "REVERT",
											"source": 13
										},
										{
											"begin": 3136,
											"end": 3196,
											"name": "tag",
											"source": 13,
											"value": "276"
										},
										{
											"begin": 3136,
											"end": 3196,
											"name": "JUMPDEST",
											"source": 13
										},
										{
											"begin": 3215,
											"end": 3220,
											"name": "DUP1",
											"source": 13
										},
										{
											"begin": 3205,
											"end": 3220,
											"name": "SWAP2",
											"source": 13
										},
										{
											"begin": 3205,
											"end": 3220,
											"name": "POP",
											"source": 13
										},
										{
											"begin": 3205,
											"end": 3220,
											"name": "POP",
											"source": 13
										},
										{
											"begin": 2879,
											"end": 3226,
											"name": "SWAP3",
											"source": 13
										},
										{
											"begin": 2879,
											"end": 3226,
											"name": "POP",
											"source": 13
										},
										{
											"begin": 2879,
											"end": 3226,
											"name": "SWAP3",
											"source": 13
										},
										{
											"begin": 2879,
											"end": 3226,
											"name": "SWAP1",
											"source": 13
										},
										{
											"begin": 2879,
											"end": 3226,
											"name": "POP",
											"source": 13
										},
										{
											"begin": 2879,
											"end": 3226,
											"name": "JUMP",
											"source": 13,
											"value": "[out]"
										},
										{
											"begin": 3231,
											"end": 3358,
											"name": "tag",
											"source": 13,
											"value": "219"
										},
										{
											"begin": 3231,
											"end": 3358,
											"name": "JUMPDEST",
											"source": 13
										},
										{
											"begin": 3292,
											"end": 3302,
											"name": "PUSH",
											"source": 13,
											"value": "4E487B71"
										},
										{
											"begin": 3287,
											"end": 3290,
											"name": "PUSH",
											"source": 13,
											"value": "E0"
										},
										{
											"begin": 3283,
											"end": 3303,
											"name": "SHL",
											"source": 13
										},
										{
											"begin": 3280,
											"end": 3281,
											"name": "PUSH",
											"source": 13,
											"value": "0"
										},
										{
											"begin": 3273,
											"end": 3304,
											"name": "MSTORE",
											"source": 13
										},
										{
											"begin": 3323,
											"end": 3327,
											"name": "PUSH",
											"source": 13,
											"value": "41"
										},
										{
											"begin": 3320,
											"end": 3321,
											"name": "PUSH",
											"source": 13,
											"value": "4"
										},
										{
											"begin": 3313,
											"end": 3328,
											"name": "MSTORE",
											"source": 13
										},
										{
											"begin": 3347,
											"end": 3351,
											"name": "PUSH",
											"source": 13,
											"value": "24"
										},
										{
											"begin": 3344,
											"end": 3345,
											"name": "PUSH",
											"source": 13,
											"value": "0"
										},
										{
											"begin": 3337,
											"end": 3352,
											"name": "REVERT",
											"source": 13
										},
										{
											"begin": 3363,
											"end": 4501,
											"name": "tag",
											"source": 13,
											"value": "69"
										},
										{
											"begin": 3363,
											"end": 4501,
											"name": "JUMPDEST",
											"source": 13
										},
										{
											"begin": 3458,
											"end": 3464,
											"name": "PUSH",
											"source": 13,
											"value": "0"
										},
										{
											"begin": 3466,
											"end": 3472,
											"name": "DUP1",
											"source": 13
										},
										{
											"begin": 3474,
											"end": 3480,
											"name": "PUSH",
											"source": 13,
											"value": "0"
										},
										{
											"begin": 3482,
											"end": 3488,
											"name": "DUP1",
											"source": 13
										},
										{
											"begin": 3535,
											"end": 3538,
											"name": "PUSH",
											"source": 13,
											"value": "80"
										},
										{
											"begin": 3523,
											"end": 3532,
											"name": "DUP6",
											"source": 13
										},
										{
											"begin": 3514,
											"end": 3521,
											"name": "DUP8",
											"source": 13
										},
										{
											"begin": 3510,
											"end": 3533,
											"name": "SUB",
											"source": 13
										},
										{
											"begin": 3506,
											"end": 3539,
											"name": "SLT",
											"source": 13
										},
										{
											"begin": 3503,
											"end": 3556,
											"name": "ISZERO",
											"source": 13
										},
										{
											"begin": 3503,
											"end": 3556,
											"name": "PUSH [tag]",
											"source": 13,
											"value": "279"
										},
										{
											"begin": 3503,
											"end": 3556,
											"name": "JUMPI",
											"source": 13
										},
										{
											"begin": 3552,
											"end": 3553,
											"name": "PUSH",
											"source": 13,
											"value": "0"
										},
										{
											"begin": 3549,
											"end": 3550,
											"name": "DUP1",
											"source": 13
										},
										{
											"begin": 3542,
											"end": 3554,
											"name": "REVERT",
											"source": 13
										},
										{
											"begin": 3503,
											"end": 3556,
											"name": "tag",
											"source": 13,
											"value": "279"
										},
										{
											"begin": 3503,
											"end": 3556,
											"name": "JUMPDEST",
											"source": 13
										},
										{
											"begin": 3575,
											"end": 3604,
											"name": "PUSH [tag]",
											"source": 13,
											"value": "280"
										},
										{
											"begin": 3594,
											"end": 3603,
											"name": "DUP6",
											"source": 13
										},
										{
											"begin": 3575,
											"end": 3604,
											"name": "PUSH [tag]",
											"source": 13,
											"value": "238"
										},
										{
											"begin": 3575,
											"end": 3604,
											"name": "JUMP",
											"source": 13,
											"value": "[in]"
										},
										{
											"begin": 3575,
											"end": 3604,
											"name": "tag",
											"source": 13,
											"value": "280"
										},
										{
											"begin": 3575,
											"end": 3604,
											"name": "JUMPDEST",
											"source": 13
										},
										{
											"begin": 3565,
											"end": 3604,
											"name": "SWAP4",
											"source": 13
										},
										{
											"begin": 3565,
											"end": 3604,
											"name": "POP",
											"source": 13
										},
										{
											"begin": 3623,
											"end": 3661,
											"name": "PUSH [tag]",
											"source": 13,
											"value": "281"
										},
										{
											"begin": 3657,
											"end": 3659,
											"name": "PUSH",
											"source": 13,
											"value": "20"
										},
										{
											"begin": 3646,
											"end": 3655,
											"name": "DUP7",
											"source": 13
										},
										{
											"begin": 3642,
											"end": 3660,
											"name": "ADD",
											"source": 13
										},
										{
											"begin": 3623,
											"end": 3661,
											"name": "PUSH [tag]",
											"source": 13,
											"value": "238"
										},
										{
											"begin": 3623,
											"end": 3661,
											"name": "JUMP",
											"source": 13,
											"value": "[in]"
										},
										{
											"begin": 3623,
											"end": 3661,
											"name": "tag",
											"source": 13,
											"value": "281"
										},
										{
											"begin": 3623,
											"end": 3661,
											"name": "JUMPDEST",
											"source": 13
										},
										{
											"begin": 3613,
											"end": 3661,
											"name": "SWAP3",
											"source": 13
										},
										{
											"begin": 3613,
											"end": 3661,
											"name": "POP",
											"source": 13
										},
										{
											"begin": 3708,
											"end": 3710,
											"name": "PUSH",
											"source": 13,
											"value": "40"
										},
										{
											"begin": 3697,
											"end": 3706,
											"name": "DUP6",
											"source": 13
										},
										{
											"begin": 3693,
											"end": 3711,
											"name": "ADD",
											"source": 13
										},
										{
											"begin": 3680,
											"end": 3712,
											"name": "CALLDATALOAD",
											"source": 13
										},
										{
											"begin": 3670,
											"end": 3712,
											"name": "SWAP2",
											"source": 13
										},
										{
											"begin": 3670,
											"end": 3712,
											"name": "POP",
											"source": 13
										},
										{
											"begin": 3763,
											"end": 3765,
											"name": "PUSH",
											"source": 13,
											"value": "60"
										},
										{
											"begin": 3752,
											"end": 3761,
											"name": "DUP6",
											"source": 13
										},
										{
											"begin": 3748,
											"end": 3766,
											"name": "ADD",
											"source": 13
										},
										{
											"begin": 3735,
											"end": 3767,
											"name": "CALLDATALOAD",
											"source": 13
										},
										{
											"begin": 3786,
											"end": 3804,
											"name": "PUSH",
											"source": 13,
											"value": "FFFFFFFFFFFFFFFF"
										},
										{
											"begin": 3827,
											"end": 3829,
											"name": "DUP1",
											"source": 13
										},
										{
											"begin": 3819,
											"end": 3825,
											"name": "DUP3",
											"source": 13
										},
										{
											"begin": 3816,
											"end": 3830,
											"name": "GT",
											"source": 13
										},
										{
											"begin": 3813,
											"end": 3847,
											"name": "ISZERO",
											"source": 13
										},
										{
											"begin": 3813,
											"end": 3847,
											"name": "PUSH [tag]",
											"source": 13,
											"value": "282"
										},
										{
											"begin": 3813,
											"end": 3847,
											"name": "JUMPI",
											"source": 13
										},
										{
											"begin": 3843,
											"end": 3844,
											"name": "PUSH",
											"source": 13,
											"value": "0"
										},
										{
											"begin": 3840,
											"end": 3841,
											"name": "DUP1",
											"source": 13
										},
										{
											"begin": 3833,
											"end": 3845,
											"name": "REVERT",
											"source": 13
										},
										{
											"begin": 3813,
											"end": 3847,
											"name": "tag",
											"source": 13,
											"value": "282"
										},
										{
											"begin": 3813,
											"end": 3847,
											"name": "JUMPDEST",
											"source": 13
										},
										{
											"begin": 3881,
											"end": 3887,
											"name": "DUP2",
											"source": 13
										},
										{
											"begin": 3870,
											"end": 3879,
											"name": "DUP8",
											"source": 13
										},
										{
											"begin": 3866,
											"end": 3888,
											"name": "ADD",
											"source": 13
										},
										{
											"begin": 3856,
											"end": 3888,
											"name": "SWAP2",
											"source": 13
										},
										{
											"begin": 3856,
											"end": 3888,
											"name": "POP",
											"source": 13
										},
										{
											"begin": 3926,
											"end": 3933,
											"name": "DUP8",
											"source": 13
										},
										{
											"begin": 3919,
											"end": 3923,
											"name": "PUSH",
											"source": 13,
											"value": "1F"
										},
										{
											"begin": 3915,
											"end": 3917,
											"name": "DUP4",
											"source": 13
										},
										{
											"begin": 3911,
											"end": 3924,
											"name": "ADD",
											"source": 13
										},
										{
											"begin": 3907,
											"end": 3934,
											"name": "SLT",
											"source": 13
										},
										{
											"begin": 3897,
											"end": 3952,
											"name": "PUSH [tag]",
											"source": 13,
											"value": "283"
										},
										{
											"begin": 3897,
											"end": 3952,
											"name": "JUMPI",
											"source": 13
										},
										{
											"begin": 3948,
											"end": 3949,
											"name": "PUSH",
											"source": 13,
											"value": "0"
										},
										{
											"begin": 3945,
											"end": 3946,
											"name": "DUP1",
											"source": 13
										},
										{
											"begin": 3938,
											"end": 3950,
											"name": "REVERT",
											"source": 13
										},
										{
											"begin": 3897,
											"end": 3952,
											"name": "tag",
											"source": 13,
											"value": "283"
										},
										{
											"begin": 3897,
											"end": 3952,
											"name": "JUMPDEST",
											"source": 13
										},
										{
											"begin": 3984,
											"end": 3986,
											"name": "DUP2",
											"source": 13
										},
										{
											"begin": 3971,
											"end": 3987,
											"name": "CALLDATALOAD",
											"source": 13
										},
										{
											"begin": 4006,
											"end": 4008,
											"name": "DUP2",
											"source": 13
										},
										{
											"begin": 4002,
											"end": 4004,
											"name": "DUP2",
											"source": 13
										},
										{
											"begin": 3999,
											"end": 4009,
											"name": "GT",
											"source": 13
										},
										{
											"begin": 3996,
											"end": 4032,
											"name": "ISZERO",
											"source": 13
										},
										{
											"begin": 3996,
											"end": 4032,
											"name": "PUSH [tag]",
											"source": 13,
											"value": "285"
										},
										{
											"begin": 3996,
											"end": 4032,
											"name": "JUMPI",
											"source": 13
										},
										{
											"begin": 4012,
											"end": 4030,
											"name": "PUSH [tag]",
											"source": 13,
											"value": "285"
										},
										{
											"begin": 4012,
											"end": 4030,
											"name": "PUSH [tag]",
											"source": 13,
											"value": "219"
										},
										{
											"begin": 4012,
											"end": 4030,
											"name": "JUMP",
											"source": 13,
											"value": "[in]"
										},
										{
											"begin": 4012,
											"end": 4030,
											"name": "tag",
											"source": 13,
											"value": "285"
										},
										{
											"begin": 4012,
											"end": 4030,
											"name": "JUMPDEST",
											"source": 13
										},
										{
											"begin": 4087,
											"end": 4089,
											"name": "PUSH",
											"source": 13,
											"value": "40"
										},
										{
											"begin": 4081,
											"end": 4090,
											"name": "MLOAD",
											"source": 13
										},
										{
											"begin": 4055,
											"end": 4057,
											"name": "PUSH",
											"source": 13,
											"value": "1F"
										},
										{
											"begin": 4141,
											"end": 4154,
											"name": "DUP3",
											"source": 13
										},
										{
											"begin": 4141,
											"end": 4154,
											"name": "ADD",
											"source": 13
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1F"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "NOT",
											"source": -1
										},
										{
											"begin": 4137,
											"end": 4159,
											"name": "SWAP1",
											"source": 13
										},
										{
											"begin": 4137,
											"end": 4159,
											"name": "DUP2",
											"source": 13
										},
										{
											"begin": 4137,
											"end": 4159,
											"name": "AND",
											"source": 13
										},
										{
											"begin": 4161,
											"end": 4163,
											"name": "PUSH",
											"source": 13,
											"value": "3F"
										},
										{
											"begin": 4133,
											"end": 4164,
											"name": "ADD",
											"source": 13
										},
										{
											"begin": 4129,
											"end": 4169,
											"name": "AND",
											"source": 13
										},
										{
											"begin": 4117,
											"end": 4170,
											"name": "DUP2",
											"source": 13
										},
										{
											"begin": 4117,
											"end": 4170,
											"name": "ADD",
											"source": 13
										},
										{
											"begin": 4117,
											"end": 4170,
											"name": "SWAP1",
											"source": 13
										},
										{
											"begin": 4185,
											"end": 4203,
											"name": "DUP4",
											"source": 13
										},
										{
											"begin": 4185,
											"end": 4203,
											"name": "DUP3",
											"source": 13
										},
										{
											"begin": 4185,
											"end": 4203,
											"name": "GT",
											"source": 13
										},
										{
											"begin": 4205,
											"end": 4227,
											"name": "DUP2",
											"source": 13
										},
										{
											"begin": 4205,
											"end": 4227,
											"name": "DUP4",
											"source": 13
										},
										{
											"begin": 4205,
											"end": 4227,
											"name": "LT",
											"source": 13
										},
										{
											"begin": 4182,
											"end": 4228,
											"name": "OR",
											"source": 13
										},
										{
											"begin": 4179,
											"end": 4251,
											"name": "ISZERO",
											"source": 13
										},
										{
											"begin": 4179,
											"end": 4251,
											"name": "PUSH [tag]",
											"source": 13,
											"value": "287"
										},
										{
											"begin": 4179,
											"end": 4251,
											"name": "JUMPI",
											"source": 13
										},
										{
											"begin": 4231,
											"end": 4249,
											"name": "PUSH [tag]",
											"source": 13,
											"value": "287"
										},
										{
											"begin": 4231,
											"end": 4249,
											"name": "PUSH [tag]",
											"source": 13,
											"value": "219"
										},
										{
											"begin": 4231,
											"end": 4249,
											"name": "JUMP",
											"source": 13,
											"value": "[in]"
										},
										{
											"begin": 4231,
											"end": 4249,
											"name": "tag",
											"source": 13,
											"value": "287"
										},
										{
											"begin": 4231,
											"end": 4249,
											"name": "JUMPDEST",
											"source": 13
										},
										{
											"begin": 4271,
											"end": 4281,
											"name": "DUP2",
											"source": 13
										},
										{
											"begin": 4267,
											"end": 4269,
											"name": "PUSH",
											"source": 13,
											"value": "40"
										},
										{
											"begin": 4260,
											"end": 4282,
											"name": "MSTORE",
											"source": 13
										},
										{
											"begin": 4306,
											"end": 4308,
											"name": "DUP3",
											"source": 13
										},
										{
											"begin": 4298,
											"end": 4304,
											"name": "DUP2",
											"source": 13
										},
										{
											"begin": 4291,
											"end": 4309,
											"name": "MSTORE",
											"source": 13
										},
										{
											"begin": 4346,
											"end": 4353,
											"name": "DUP11",
											"source": 13
										},
										{
											"begin": 4341,
											"end": 4343,
											"name": "PUSH",
											"source": 13,
											"value": "20"
										},
										{
											"begin": 4336,
											"end": 4338,
											"name": "DUP5",
											"source": 13
										},
										{
											"begin": 4332,
											"end": 4334,
											"name": "DUP8",
											"source": 13
										},
										{
											"begin": 4328,
											"end": 4339,
											"name": "ADD",
											"source": 13
										},
										{
											"begin": 4324,
											"end": 4344,
											"name": "ADD",
											"source": 13
										},
										{
											"begin": 4321,
											"end": 4354,
											"name": "GT",
											"source": 13
										},
										{
											"begin": 4318,
											"end": 4371,
											"name": "ISZERO",
											"source": 13
										},
										{
											"begin": 4318,
											"end": 4371,
											"name": "PUSH [tag]",
											"source": 13,
											"value": "288"
										},
										{
											"begin": 4318,
											"end": 4371,
											"name": "JUMPI",
											"source": 13
										},
										{
											"begin": 4367,
											"end": 4368,
											"name": "PUSH",
											"source": 13,
											"value": "0"
										},
										{
											"begin": 4364,
											"end": 4365,
											"name": "DUP1",
											"source": 13
										},
										{
											"begin": 4357,
											"end": 4369,
											"name": "REVERT",
											"source": 13
										},
										{
											"begin": 4318,
											"end": 4371,
											"name": "tag",
											"source": 13,
											"value": "288"
										},
										{
											"begin": 4318,
											"end": 4371,
											"name": "JUMPDEST",
											"source": 13
										},
										{
											"begin": 4423,
											"end": 4425,
											"name": "DUP3",
											"source": 13
										},
										{
											"begin": 4418,
											"end": 4420,
											"name": "PUSH",
											"source": 13,
											"value": "20"
										},
										{
											"begin": 4414,
											"end": 4416,
											"name": "DUP7",
											"source": 13
										},
										{
											"begin": 4410,
											"end": 4421,
											"name": "ADD",
											"source": 13
										},
										{
											"begin": 4405,
											"end": 4407,
											"name": "PUSH",
											"source": 13,
											"value": "20"
										},
										{
											"begin": 4397,
											"end": 4403,
											"name": "DUP4",
											"source": 13
										},
										{
											"begin": 4393,
											"end": 4408,
											"name": "ADD",
											"source": 13
										},
										{
											"begin": 4380,
											"end": 4426,
											"name": "CALLDATACOPY",
											"source": 13
										},
										{
											"begin": 4468,
											"end": 4469,
											"name": "PUSH",
											"source": 13,
											"value": "0"
										},
										{
											"begin": 4463,
											"end": 4465,
											"name": "PUSH",
											"source": 13,
											"value": "20"
										},
										{
											"begin": 4458,
											"end": 4460,
											"name": "DUP5",
											"source": 13
										},
										{
											"begin": 4450,
											"end": 4456,
											"name": "DUP4",
											"source": 13
										},
										{
											"begin": 4446,
											"end": 4461,
											"name": "ADD",
											"source": 13
										},
										{
											"begin": 4442,
											"end": 4466,
											"name": "ADD",
											"source": 13
										},
										{
											"begin": 4435,
											"end": 4470,
											"name": "MSTORE",
											"source": 13
										},
										{
											"begin": 4489,
											"end": 4495,
											"name": "DUP1",
											"source": 13
										},
										{
											"begin": 4479,
											"end": 4495,
											"name": "SWAP6",
											"source": 13
										},
										{
											"begin": 4479,
											"end": 4495,
											"name": "POP",
											"source": 13
										},
										{
											"begin": 4479,
											"end": 4495,
											"name": "POP",
											"source": 13
										},
										{
											"begin": 4479,
											"end": 4495,
											"name": "POP",
											"source": 13
										},
										{
											"begin": 4479,
											"end": 4495,
											"name": "POP",
											"source": 13
										},
										{
											"begin": 4479,
											"end": 4495,
											"name": "POP",
											"source": 13
										},
										{
											"begin": 4479,
											"end": 4495,
											"name": "POP",
											"source": 13
										},
										{
											"begin": 3363,
											"end": 4501,
											"name": "SWAP3",
											"source": 13
										},
										{
											"begin": 3363,
											"end": 4501,
											"name": "SWAP6",
											"source": 13
										},
										{
											"begin": 3363,
											"end": 4501,
											"name": "SWAP2",
											"source": 13
										},
										{
											"begin": 3363,
											"end": 4501,
											"name": "SWAP5",
											"source": 13
										},
										{
											"begin": 3363,
											"end": 4501,
											"name": "POP",
											"source": 13
										},
										{
											"begin": 3363,
											"end": 4501,
											"name": "SWAP3",
											"source": 13
										},
										{
											"begin": 3363,
											"end": 4501,
											"name": "POP",
											"source": 13
										},
										{
											"begin": 3363,
											"end": 4501,
											"name": "JUMP",
											"source": 13,
											"value": "[out]"
										},
										{
											"begin": 4506,
											"end": 4766,
											"name": "tag",
											"source": 13,
											"value": "77"
										},
										{
											"begin": 4506,
											"end": 4766,
											"name": "JUMPDEST",
											"source": 13
										},
										{
											"begin": 4574,
											"end": 4580,
											"name": "PUSH",
											"source": 13,
											"value": "0"
										},
										{
											"begin": 4582,
											"end": 4588,
											"name": "DUP1",
											"source": 13
										},
										{
											"begin": 4635,
											"end": 4637,
											"name": "PUSH",
											"source": 13,
											"value": "40"
										},
										{
											"begin": 4623,
											"end": 4632,
											"name": "DUP4",
											"source": 13
										},
										{
											"begin": 4614,
											"end": 4621,
											"name": "DUP6",
											"source": 13
										},
										{
											"begin": 4610,
											"end": 4633,
											"name": "SUB",
											"source": 13
										},
										{
											"begin": 4606,
											"end": 4638,
											"name": "SLT",
											"source": 13
										},
										{
											"begin": 4603,
											"end": 4655,
											"name": "ISZERO",
											"source": 13
										},
										{
											"begin": 4603,
											"end": 4655,
											"name": "PUSH [tag]",
											"source": 13,
											"value": "290"
										},
										{
											"begin": 4603,
											"end": 4655,
											"name": "JUMPI",
											"source": 13
										},
										{
											"begin": 4651,
											"end": 4652,
											"name": "PUSH",
											"source": 13,
											"value": "0"
										},
										{
											"begin": 4648,
											"end": 4649,
											"name": "DUP1",
											"source": 13
										},
										{
											"begin": 4641,
											"end": 4653,
											"name": "REVERT",
											"source": 13
										},
										{
											"begin": 4603,
											"end": 4655,
											"name": "tag",
											"source": 13,
											"value": "290"
										},
										{
											"begin": 4603,
											"end": 4655,
											"name": "JUMPDEST",
											"source": 13
										},
										{
											"begin": 4674,
											"end": 4703,
											"name": "PUSH [tag]",
											"source": 13,
											"value": "291"
										},
										{
											"begin": 4693,
											"end": 4702,
											"name": "DUP4",
											"source": 13
										},
										{
											"begin": 4674,
											"end": 4703,
											"name": "PUSH [tag]",
											"source": 13,
											"value": "238"
										},
										{
											"begin": 4674,
											"end": 4703,
											"name": "JUMP",
											"source": 13,
											"value": "[in]"
										},
										{
											"begin": 4674,
											"end": 4703,
											"name": "tag",
											"source": 13,
											"value": "291"
										},
										{
											"begin": 4674,
											"end": 4703,
											"name": "JUMPDEST",
											"source": 13
										},
										{
											"begin": 4664,
											"end": 4703,
											"name": "SWAP2",
											"source": 13
										},
										{
											"begin": 4664,
											"end": 4703,
											"name": "POP",
											"source": 13
										},
										{
											"begin": 4722,
											"end": 4760,
											"name": "PUSH [tag]",
											"source": 13,
											"value": "292"
										},
										{
											"begin": 4756,
											"end": 4758,
											"name": "PUSH",
											"source": 13,
											"value": "20"
										},
										{
											"begin": 4745,
											"end": 4754,
											"name": "DUP5",
											"source": 13
										},
										{
											"begin": 4741,
											"end": 4759,
											"name": "ADD",
											"source": 13
										},
										{
											"begin": 4722,
											"end": 4760,
											"name": "PUSH [tag]",
											"source": 13,
											"value": "238"
										},
										{
											"begin": 4722,
											"end": 4760,
											"name": "JUMP",
											"source": 13,
											"value": "[in]"
										},
										{
											"begin": 4722,
											"end": 4760,
											"name": "tag",
											"source": 13,
											"value": "292"
										},
										{
											"begin": 4722,
											"end": 4760,
											"name": "JUMPDEST",
											"source": 13
										},
										{
											"begin": 4712,
											"end": 4760,
											"name": "SWAP1",
											"source": 13
										},
										{
											"begin": 4712,
											"end": 4760,
											"name": "POP",
											"source": 13
										},
										{
											"begin": 4506,
											"end": 4766,
											"name": "SWAP3",
											"source": 13
										},
										{
											"begin": 4506,
											"end": 4766,
											"name": "POP",
											"source": 13
										},
										{
											"begin": 4506,
											"end": 4766,
											"name": "SWAP3",
											"source": 13
										},
										{
											"begin": 4506,
											"end": 4766,
											"name": "SWAP1",
											"source": 13
										},
										{
											"begin": 4506,
											"end": 4766,
											"name": "POP",
											"source": 13
										},
										{
											"begin": 4506,
											"end": 4766,
											"name": "JUMP",
											"source": 13,
											"value": "[out]"
										},
										{
											"begin": 4771,
											"end": 5151,
											"name": "tag",
											"source": 13,
											"value": "87"
										},
										{
											"begin": 4771,
											"end": 5151,
											"name": "JUMPDEST",
											"source": 13
										},
										{
											"begin": 4850,
											"end": 4851,
											"name": "PUSH",
											"source": 13,
											"value": "1"
										},
										{
											"begin": 4846,
											"end": 4858,
											"name": "DUP2",
											"source": 13
										},
										{
											"begin": 4846,
											"end": 4858,
											"name": "DUP2",
											"source": 13
										},
										{
											"begin": 4846,
											"end": 4858,
											"name": "SHR",
											"source": 13
										},
										{
											"begin": 4846,
											"end": 4858,
											"name": "SWAP1",
											"source": 13
										},
										{
											"begin": 4893,
											"end": 4905,
											"name": "DUP3",
											"source": 13
										},
										{
											"begin": 4893,
											"end": 4905,
											"name": "AND",
											"source": 13
										},
										{
											"begin": 4893,
											"end": 4905,
											"name": "DUP1",
											"source": 13
										},
										{
											"begin": 4914,
											"end": 4975,
											"name": "PUSH [tag]",
											"source": 13,
											"value": "294"
										},
										{
											"begin": 4914,
											"end": 4975,
											"name": "JUMPI",
											"source": 13
										},
										{
											"begin": 4968,
											"end": 4972,
											"name": "PUSH",
											"source": 13,
											"value": "7F"
										},
										{
											"begin": 4960,
											"end": 4966,
											"name": "DUP3",
											"source": 13
										},
										{
											"begin": 4956,
											"end": 4973,
											"name": "AND",
											"source": 13
										},
										{
											"begin": 4946,
											"end": 4973,
											"name": "SWAP2",
											"source": 13
										},
										{
											"begin": 4946,
											"end": 4973,
											"name": "POP",
											"source": 13
										},
										{
											"begin": 4914,
											"end": 4975,
											"name": "tag",
											"source": 13,
											"value": "294"
										},
										{
											"begin": 4914,
											"end": 4975,
											"name": "JUMPDEST",
											"source": 13
										},
										{
											"begin": 5021,
											"end": 5023,
											"name": "PUSH",
											"source": 13,
											"value": "20"
										},
										{
											"begin": 5013,
											"end": 5019,
											"name": "DUP3",
											"source": 13
										},
										{
											"begin": 5010,
											"end": 5024,
											"name": "LT",
											"source": 13
										},
										{
											"begin": 4990,
											"end": 5008,
											"name": "DUP2",
											"source": 13
										},
										{
											"begin": 4987,
											"end": 5025,
											"name": "EQ",
											"source": 13
										},
										{
											"begin": 4984,
											"end": 5145,
											"name": "ISZERO",
											"source": 13
										},
										{
											"begin": 4984,
											"end": 5145,
											"name": "PUSH [tag]",
											"source": 13,
											"value": "295"
										},
										{
											"begin": 4984,
											"end": 5145,
											"name": "JUMPI",
											"source": 13
										},
										{
											"begin": 5067,
											"end": 5077,
											"name": "PUSH",
											"source": 13,
											"value": "4E487B71"
										},
										{
											"begin": 5062,
											"end": 5065,
											"name": "PUSH",
											"source": 13,
											"value": "E0"
										},
										{
											"begin": 5058,
											"end": 5078,
											"name": "SHL",
											"source": 13
										},
										{
											"begin": 5055,
											"end": 5056,
											"name": "PUSH",
											"source": 13,
											"value": "0"
										},
										{
											"begin": 5048,
											"end": 5079,
											"name": "MSTORE",
											"source": 13
										},
										{
											"begin": 5102,
											"end": 5106,
											"name": "PUSH",
											"source": 13,
											"value": "22"
										},
										{
											"begin": 5099,
											"end": 5100,
											"name": "PUSH",
											"source": 13,
											"value": "4"
										},
										{
											"begin": 5092,
											"end": 5107,
											"name": "MSTORE",
											"source": 13
										},
										{
											"begin": 5130,
											"end": 5134,
											"name": "PUSH",
											"source": 13,
											"value": "24"
										},
										{
											"begin": 5127,
											"end": 5128,
											"name": "PUSH",
											"source": 13,
											"value": "0"
										},
										{
											"begin": 5120,
											"end": 5135,
											"name": "REVERT",
											"source": 13
										},
										{
											"begin": 4984,
											"end": 5145,
											"name": "tag",
											"source": 13,
											"value": "295"
										},
										{
											"begin": 4984,
											"end": 5145,
											"name": "JUMPDEST",
											"source": 13
										},
										{
											"begin": 4984,
											"end": 5145,
											"name": "POP",
											"source": 13
										},
										{
											"begin": 4771,
											"end": 5151,
											"name": "SWAP2",
											"source": 13
										},
										{
											"begin": 4771,
											"end": 5151,
											"name": "SWAP1",
											"source": 13
										},
										{
											"begin": 4771,
											"end": 5151,
											"name": "POP",
											"source": 13
										},
										{
											"begin": 4771,
											"end": 5151,
											"name": "JUMP",
											"source": 13,
											"value": "[out]"
										},
										{
											"begin": 5156,
											"end": 5626,
											"name": "tag",
											"source": 13,
											"value": "150"
										},
										{
											"begin": 5156,
											"end": 5626,
											"name": "JUMPDEST",
											"source": 13
										},
										{
											"begin": 5335,
											"end": 5338,
											"name": "PUSH",
											"source": 13,
											"value": "0"
										},
										{
											"begin": 5373,
											"end": 5379,
											"name": "DUP4",
											"source": 13
										},
										{
											"begin": 5367,
											"end": 5380,
											"name": "MLOAD",
											"source": 13
										},
										{
											"begin": 5389,
											"end": 5442,
											"name": "PUSH [tag]",
											"source": 13,
											"value": "297"
										},
										{
											"begin": 5435,
											"end": 5441,
											"name": "DUP2",
											"source": 13
										},
										{
											"begin": 5430,
											"end": 5433,
											"name": "DUP5",
											"source": 13
										},
										{
											"begin": 5423,
											"end": 5427,
											"name": "PUSH",
											"source": 13,
											"value": "20"
										},
										{
											"begin": 5415,
											"end": 5421,
											"name": "DUP9",
											"source": 13
										},
										{
											"begin": 5411,
											"end": 5428,
											"name": "ADD",
											"source": 13
										},
										{
											"begin": 5389,
											"end": 5442,
											"name": "PUSH [tag]",
											"source": 13,
											"value": "236"
										},
										{
											"begin": 5389,
											"end": 5442,
											"name": "JUMP",
											"source": 13,
											"value": "[in]"
										},
										{
											"begin": 5389,
											"end": 5442,
											"name": "tag",
											"source": 13,
											"value": "297"
										},
										{
											"begin": 5389,
											"end": 5442,
											"name": "JUMPDEST",
											"source": 13
										},
										{
											"begin": 5505,
											"end": 5518,
											"name": "DUP4",
											"source": 13
										},
										{
											"begin": 5505,
											"end": 5518,
											"name": "MLOAD",
											"source": 13
										},
										{
											"begin": 5464,
											"end": 5480,
											"name": "SWAP1",
											"source": 13
										},
										{
											"begin": 5464,
											"end": 5480,
											"name": "DUP4",
											"source": 13
										},
										{
											"begin": 5464,
											"end": 5480,
											"name": "ADD",
											"source": 13
										},
										{
											"begin": 5464,
											"end": 5480,
											"name": "SWAP1",
											"source": 13
										},
										{
											"begin": 5527,
											"end": 5584,
											"name": "PUSH [tag]",
											"source": 13,
											"value": "298"
										},
										{
											"begin": 5505,
											"end": 5518,
											"name": "DUP2",
											"source": 13
										},
										{
											"begin": 5464,
											"end": 5480,
											"name": "DUP4",
											"source": 13
										},
										{
											"begin": 5561,
											"end": 5565,
											"name": "PUSH",
											"source": 13,
											"value": "20"
										},
										{
											"begin": 5549,
											"end": 5566,
											"name": "DUP9",
											"source": 13
										},
										{
											"begin": 5549,
											"end": 5566,
											"name": "ADD",
											"source": 13
										},
										{
											"begin": 5527,
											"end": 5584,
											"name": "PUSH [tag]",
											"source": 13,
											"value": "236"
										},
										{
											"begin": 5527,
											"end": 5584,
											"name": "JUMP",
											"source": 13,
											"value": "[in]"
										},
										{
											"begin": 5527,
											"end": 5584,
											"name": "tag",
											"source": 13,
											"value": "298"
										},
										{
											"begin": 5527,
											"end": 5584,
											"name": "JUMPDEST",
											"source": 13
										},
										{
											"begin": 5600,
											"end": 5620,
											"name": "ADD",
											"source": 13
										},
										{
											"begin": 5600,
											"end": 5620,
											"name": "SWAP5",
											"source": 13
										},
										{
											"begin": 5156,
											"end": 5626,
											"name": "SWAP4",
											"source": 13
										},
										{
											"begin": -1,
											"end": -1,
											"name": "POP",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "POP",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "POP",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "POP",
											"source": -1
										},
										{
											"begin": 5156,
											"end": 5626,
											"name": "JUMP",
											"source": 13,
											"value": "[out]"
										},
										{
											"begin": 5631,
											"end": 6120,
											"name": "tag",
											"source": 13,
											"value": "194"
										},
										{
											"begin": 5631,
											"end": 6120,
											"name": "JUMPDEST",
											"source": 13
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "A0"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SHL",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SUB",
											"source": -1
										},
										{
											"begin": 5900,
											"end": 5915,
											"name": "DUP6",
											"source": 13
										},
										{
											"begin": 5900,
											"end": 5915,
											"name": "DUP2",
											"source": 13
										},
										{
											"begin": 5900,
											"end": 5915,
											"name": "AND",
											"source": 13
										},
										{
											"begin": 5882,
											"end": 5916,
											"name": "DUP3",
											"source": 13
										},
										{
											"begin": 5882,
											"end": 5916,
											"name": "MSTORE",
											"source": 13
										},
										{
											"begin": 5952,
											"end": 5967,
											"name": "DUP5",
											"source": 13
										},
										{
											"begin": 5952,
											"end": 5967,
											"name": "AND",
											"source": 13
										},
										{
											"begin": 5947,
											"end": 5949,
											"name": "PUSH",
											"source": 13,
											"value": "20"
										},
										{
											"begin": 5932,
											"end": 5950,
											"name": "DUP3",
											"source": 13
										},
										{
											"begin": 5932,
											"end": 5950,
											"name": "ADD",
											"source": 13
										},
										{
											"begin": 5925,
											"end": 5968,
											"name": "MSTORE",
											"source": 13
										},
										{
											"begin": 5999,
											"end": 6001,
											"name": "PUSH",
											"source": 13,
											"value": "40"
										},
										{
											"begin": 5984,
											"end": 6002,
											"name": "DUP2",
											"source": 13
										},
										{
											"begin": 5984,
											"end": 6002,
											"name": "ADD",
											"source": 13
										},
										{
											"begin": 5977,
											"end": 6011,
											"name": "DUP4",
											"source": 13
										},
										{
											"begin": 5977,
											"end": 6011,
											"name": "SWAP1",
											"source": 13
										},
										{
											"begin": 5977,
											"end": 6011,
											"name": "MSTORE",
											"source": 13
										},
										{
											"begin": 6047,
											"end": 6050,
											"name": "PUSH",
											"source": 13,
											"value": "80"
										},
										{
											"begin": 6042,
											"end": 6044,
											"name": "PUSH",
											"source": 13,
											"value": "60"
										},
										{
											"begin": 6027,
											"end": 6045,
											"name": "DUP3",
											"source": 13
										},
										{
											"begin": 6027,
											"end": 6045,
											"name": "ADD",
											"source": 13
										},
										{
											"begin": 6020,
											"end": 6051,
											"name": "DUP2",
											"source": 13
										},
										{
											"begin": 6020,
											"end": 6051,
											"name": "SWAP1",
											"source": 13
										},
										{
											"begin": 6020,
											"end": 6051,
											"name": "MSTORE",
											"source": 13
										},
										{
											"begin": 5825,
											"end": 5829,
											"name": "PUSH",
											"source": 13,
											"value": "0"
										},
										{
											"begin": 5825,
											"end": 5829,
											"name": "SWAP1",
											"source": 13
										},
										{
											"begin": 6068,
											"end": 6114,
											"name": "PUSH [tag]",
											"source": 13,
											"value": "300"
										},
										{
											"begin": 6068,
											"end": 6114,
											"name": "SWAP1",
											"source": 13
										},
										{
											"begin": 6094,
											"end": 6113,
											"name": "DUP4",
											"source": 13
										},
										{
											"begin": 6094,
											"end": 6113,
											"name": "ADD",
											"source": 13
										},
										{
											"begin": 6086,
											"end": 6092,
											"name": "DUP5",
											"source": 13
										},
										{
											"begin": 6068,
											"end": 6114,
											"name": "PUSH [tag]",
											"source": 13,
											"value": "237"
										},
										{
											"begin": 6068,
											"end": 6114,
											"name": "JUMP",
											"source": 13,
											"value": "[in]"
										},
										{
											"begin": 6068,
											"end": 6114,
											"name": "tag",
											"source": 13,
											"value": "300"
										},
										{
											"begin": 6068,
											"end": 6114,
											"name": "JUMPDEST",
											"source": 13
										},
										{
											"begin": 6060,
											"end": 6114,
											"name": "SWAP7",
											"source": 13
										},
										{
											"begin": 5631,
											"end": 6120,
											"name": "SWAP6",
											"source": 13
										},
										{
											"begin": -1,
											"end": -1,
											"name": "POP",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "POP",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "POP",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "POP",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "POP",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "POP",
											"source": -1
										},
										{
											"begin": 5631,
											"end": 6120,
											"name": "JUMP",
											"source": 13,
											"value": "[out]"
										},
										{
											"begin": 6125,
											"end": 6374,
											"name": "tag",
											"source": 13,
											"value": "198"
										},
										{
											"begin": 6125,
											"end": 6374,
											"name": "JUMPDEST",
											"source": 13
										},
										{
											"begin": 6194,
											"end": 6200,
											"name": "PUSH",
											"source": 13,
											"value": "0"
										},
										{
											"begin": 6247,
											"end": 6249,
											"name": "PUSH",
											"source": 13,
											"value": "20"
										},
										{
											"begin": 6235,
											"end": 6244,
											"name": "DUP3",
											"source": 13
										},
										{
											"begin": 6226,
											"end": 6233,
											"name": "DUP5",
											"source": 13
										},
										{
											"begin": 6222,
											"end": 6245,
											"name": "SUB",
											"source": 13
										},
										{
											"begin": 6218,
											"end": 6250,
											"name": "SLT",
											"source": 13
										},
										{
											"begin": 6215,
											"end": 6267,
											"name": "ISZERO",
											"source": 13
										},
										{
											"begin": 6215,
											"end": 6267,
											"name": "PUSH [tag]",
											"source": 13,
											"value": "302"
										},
										{
											"begin": 6215,
											"end": 6267,
											"name": "JUMPI",
											"source": 13
										},
										{
											"begin": 6263,
											"end": 6264,
											"name": "PUSH",
											"source": 13,
											"value": "0"
										},
										{
											"begin": 6260,
											"end": 6261,
											"name": "DUP1",
											"source": 13
										},
										{
											"begin": 6253,
											"end": 6265,
											"name": "REVERT",
											"source": 13
										},
										{
											"begin": 6215,
											"end": 6267,
											"name": "tag",
											"source": 13,
											"value": "302"
										},
										{
											"begin": 6215,
											"end": 6267,
											"name": "JUMPDEST",
											"source": 13
										},
										{
											"begin": 6295,
											"end": 6304,
											"name": "DUP2",
											"source": 13
										},
										{
											"begin": 6289,
											"end": 6305,
											"name": "MLOAD",
											"source": 13
										},
										{
											"begin": 6314,
											"end": 6344,
											"name": "PUSH [tag]",
											"source": 13,
											"value": "146"
										},
										{
											"begin": 6338,
											"end": 6343,
											"name": "DUP2",
											"source": 13
										},
										{
											"begin": 6314,
											"end": 6344,
											"name": "PUSH [tag]",
											"source": 13,
											"value": "235"
										},
										{
											"begin": 6314,
											"end": 6344,
											"name": "JUMP",
											"source": 13,
											"value": "[in]"
										},
										{
											"begin": 6379,
											"end": 6506,
											"name": "tag",
											"source": 13,
											"value": "239"
										},
										{
											"begin": 6379,
											"end": 6506,
											"name": "JUMPDEST",
											"source": 13
										},
										{
											"begin": 6440,
											"end": 6450,
											"name": "PUSH",
											"source": 13,
											"value": "4E487B71"
										},
										{
											"begin": 6435,
											"end": 6438,
											"name": "PUSH",
											"source": 13,
											"value": "E0"
										},
										{
											"begin": 6431,
											"end": 6451,
											"name": "SHL",
											"source": 13
										},
										{
											"begin": 6428,
											"end": 6429,
											"name": "PUSH",
											"source": 13,
											"value": "0"
										},
										{
											"begin": 6421,
											"end": 6452,
											"name": "MSTORE",
											"source": 13
										},
										{
											"begin": 6471,
											"end": 6475,
											"name": "PUSH",
											"source": 13,
											"value": "11"
										},
										{
											"begin": 6468,
											"end": 6469,
											"name": "PUSH",
											"source": 13,
											"value": "4"
										},
										{
											"begin": 6461,
											"end": 6476,
											"name": "MSTORE",
											"source": 13
										},
										{
											"begin": 6495,
											"end": 6499,
											"name": "PUSH",
											"source": 13,
											"value": "24"
										},
										{
											"begin": 6492,
											"end": 6493,
											"name": "PUSH",
											"source": 13,
											"value": "0"
										},
										{
											"begin": 6485,
											"end": 6500,
											"name": "REVERT",
											"source": 13
										},
										{
											"begin": 6511,
											"end": 6646,
											"name": "tag",
											"source": 13,
											"value": "214"
										},
										{
											"begin": 6511,
											"end": 6646,
											"name": "JUMPDEST",
											"source": 13
										},
										{
											"begin": 6550,
											"end": 6553,
											"name": "PUSH",
											"source": 13,
											"value": "0"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "0"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "NOT",
											"source": -1
										},
										{
											"begin": 6571,
											"end": 6588,
											"name": "DUP3",
											"source": 13
										},
										{
											"begin": 6571,
											"end": 6588,
											"name": "EQ",
											"source": 13
										},
										{
											"begin": 6568,
											"end": 6611,
											"name": "ISZERO",
											"source": 13
										},
										{
											"begin": 6568,
											"end": 6611,
											"name": "PUSH [tag]",
											"source": 13,
											"value": "307"
										},
										{
											"begin": 6568,
											"end": 6611,
											"name": "JUMPI",
											"source": 13
										},
										{
											"begin": 6591,
											"end": 6609,
											"name": "PUSH [tag]",
											"source": 13,
											"value": "307"
										},
										{
											"begin": 6591,
											"end": 6609,
											"name": "PUSH [tag]",
											"source": 13,
											"value": "239"
										},
										{
											"begin": 6591,
											"end": 6609,
											"name": "JUMP",
											"source": 13,
											"value": "[in]"
										},
										{
											"begin": 6591,
											"end": 6609,
											"name": "tag",
											"source": 13,
											"value": "307"
										},
										{
											"begin": 6591,
											"end": 6609,
											"name": "JUMPDEST",
											"source": 13
										},
										{
											"begin": -1,
											"end": -1,
											"name": "POP",
											"source": -1
										},
										{
											"begin": 6638,
											"end": 6639,
											"name": "PUSH",
											"source": 13,
											"value": "1"
										},
										{
											"begin": 6627,
											"end": 6640,
											"name": "ADD",
											"source": 13
										},
										{
											"begin": 6627,
											"end": 6640,
											"name": "SWAP1",
											"source": 13
										},
										{
											"begin": 6511,
											"end": 6646,
											"name": "JUMP",
											"source": 13,
											"value": "[out]"
										},
										{
											"begin": 6651,
											"end": 6778,
											"name": "tag",
											"source": 13,
											"value": "240"
										},
										{
											"begin": 6651,
											"end": 6778,
											"name": "JUMPDEST",
											"source": 13
										},
										{
											"begin": 6712,
											"end": 6722,
											"name": "PUSH",
											"source": 13,
											"value": "4E487B71"
										},
										{
											"begin": 6707,
											"end": 6710,
											"name": "PUSH",
											"source": 13,
											"value": "E0"
										},
										{
											"begin": 6703,
											"end": 6723,
											"name": "SHL",
											"source": 13
										},
										{
											"begin": 6700,
											"end": 6701,
											"name": "PUSH",
											"source": 13,
											"value": "0"
										},
										{
											"begin": 6693,
											"end": 6724,
											"name": "MSTORE",
											"source": 13
										},
										{
											"begin": 6743,
											"end": 6747,
											"name": "PUSH",
											"source": 13,
											"value": "12"
										},
										{
											"begin": 6740,
											"end": 6741,
											"name": "PUSH",
											"source": 13,
											"value": "4"
										},
										{
											"begin": 6733,
											"end": 6748,
											"name": "MSTORE",
											"source": 13
										},
										{
											"begin": 6767,
											"end": 6771,
											"name": "PUSH",
											"source": 13,
											"value": "24"
										},
										{
											"begin": 6764,
											"end": 6765,
											"name": "PUSH",
											"source": 13,
											"value": "0"
										},
										{
											"begin": 6757,
											"end": 6772,
											"name": "REVERT",
											"source": 13
										},
										{
											"begin": 6783,
											"end": 6903,
											"name": "tag",
											"source": 13,
											"value": "216"
										},
										{
											"begin": 6783,
											"end": 6903,
											"name": "JUMPDEST",
											"source": 13
										},
										{
											"begin": 6823,
											"end": 6824,
											"name": "PUSH",
											"source": 13,
											"value": "0"
										},
										{
											"begin": 6849,
											"end": 6850,
											"name": "DUP3",
											"source": 13
										},
										{
											"begin": 6839,
											"end": 6874,
											"name": "PUSH [tag]",
											"source": 13,
											"value": "311"
										},
										{
											"begin": 6839,
											"end": 6874,
											"name": "JUMPI",
											"source": 13
										},
										{
											"begin": 6854,
											"end": 6872,
											"name": "PUSH [tag]",
											"source": 13,
											"value": "311"
										},
										{
											"begin": 6854,
											"end": 6872,
											"name": "PUSH [tag]",
											"source": 13,
											"value": "240"
										},
										{
											"begin": 6854,
											"end": 6872,
											"name": "JUMP",
											"source": 13,
											"value": "[in]"
										},
										{
											"begin": 6854,
											"end": 6872,
											"name": "tag",
											"source": 13,
											"value": "311"
										},
										{
											"begin": 6854,
											"end": 6872,
											"name": "JUMPDEST",
											"source": 13
										},
										{
											"begin": -1,
											"end": -1,
											"name": "POP",
											"source": -1
										},
										{
											"begin": 6888,
											"end": 6897,
											"name": "DIV",
											"source": 13
										},
										{
											"begin": 6888,
											"end": 6897,
											"name": "SWAP1",
											"source": 13
										},
										{
											"begin": 6783,
											"end": 6903,
											"name": "JUMP",
											"source": 13,
											"value": "[out]"
										},
										{
											"begin": 6908,
											"end": 7033,
											"name": "tag",
											"source": 13,
											"value": "224"
										},
										{
											"begin": 6908,
											"end": 7033,
											"name": "JUMPDEST",
											"source": 13
										},
										{
											"begin": 6948,
											"end": 6952,
											"name": "PUSH",
											"source": 13,
											"value": "0"
										},
										{
											"begin": 6976,
											"end": 6977,
											"name": "DUP3",
											"source": 13
										},
										{
											"begin": 6973,
											"end": 6974,
											"name": "DUP3",
											"source": 13
										},
										{
											"begin": 6970,
											"end": 6978,
											"name": "LT",
											"source": 13
										},
										{
											"begin": 6967,
											"end": 7001,
											"name": "ISZERO",
											"source": 13
										},
										{
											"begin": 6967,
											"end": 7001,
											"name": "PUSH [tag]",
											"source": 13,
											"value": "314"
										},
										{
											"begin": 6967,
											"end": 7001,
											"name": "JUMPI",
											"source": 13
										},
										{
											"begin": 6981,
											"end": 6999,
											"name": "PUSH [tag]",
											"source": 13,
											"value": "314"
										},
										{
											"begin": 6981,
											"end": 6999,
											"name": "PUSH [tag]",
											"source": 13,
											"value": "239"
										},
										{
											"begin": 6981,
											"end": 6999,
											"name": "JUMP",
											"source": 13,
											"value": "[in]"
										},
										{
											"begin": 6981,
											"end": 6999,
											"name": "tag",
											"source": 13,
											"value": "314"
										},
										{
											"begin": 6981,
											"end": 6999,
											"name": "JUMPDEST",
											"source": 13
										},
										{
											"begin": -1,
											"end": -1,
											"name": "POP",
											"source": -1
										},
										{
											"begin": 7018,
											"end": 7027,
											"name": "SUB",
											"source": 13
										},
										{
											"begin": 7018,
											"end": 7027,
											"name": "SWAP1",
											"source": 13
										},
										{
											"begin": 6908,
											"end": 7033,
											"name": "JUMP",
											"source": 13,
											"value": "[out]"
										},
										{
											"begin": 7038,
											"end": 7150,
											"name": "tag",
											"source": 13,
											"value": "226"
										},
										{
											"begin": 7038,
											"end": 7150,
											"name": "JUMPDEST",
											"source": 13
										},
										{
											"begin": 7070,
											"end": 7071,
											"name": "PUSH",
											"source": 13,
											"value": "0"
										},
										{
											"begin": 7096,
											"end": 7097,
											"name": "DUP3",
											"source": 13
										},
										{
											"begin": 7086,
											"end": 7121,
											"name": "PUSH [tag]",
											"source": 13,
											"value": "317"
										},
										{
											"begin": 7086,
											"end": 7121,
											"name": "JUMPI",
											"source": 13
										},
										{
											"begin": 7101,
											"end": 7119,
											"name": "PUSH [tag]",
											"source": 13,
											"value": "317"
										},
										{
											"begin": 7101,
											"end": 7119,
											"name": "PUSH [tag]",
											"source": 13,
											"value": "240"
										},
										{
											"begin": 7101,
											"end": 7119,
											"name": "JUMP",
											"source": 13,
											"value": "[in]"
										},
										{
											"begin": 7101,
											"end": 7119,
											"name": "tag",
											"source": 13,
											"value": "317"
										},
										{
											"begin": 7101,
											"end": 7119,
											"name": "JUMPDEST",
											"source": 13
										},
										{
											"begin": -1,
											"end": -1,
											"name": "POP",
											"source": -1
										},
										{
											"begin": 7135,
											"end": 7144,
											"name": "MOD",
											"source": 13
										},
										{
											"begin": 7135,
											"end": 7144,
											"name": "SWAP1",
											"source": 13
										},
										{
											"begin": 7038,
											"end": 7150,
											"name": "JUMP",
											"source": 13,
											"value": "[out]"
										},
										{
											"begin": 7155,
											"end": 7283,
											"name": "tag",
											"source": 13,
											"value": "228"
										},
										{
											"begin": 7155,
											"end": 7283,
											"name": "JUMPDEST",
											"source": 13
										},
										{
											"begin": 7195,
											"end": 7198,
											"name": "PUSH",
											"source": 13,
											"value": "0"
										},
										{
											"begin": 7226,
											"end": 7227,
											"name": "DUP3",
											"source": 13
										},
										{
											"begin": 7222,
											"end": 7228,
											"name": "NOT",
											"source": 13
										},
										{
											"begin": 7219,
											"end": 7220,
											"name": "DUP3",
											"source": 13
										},
										{
											"begin": 7216,
											"end": 7229,
											"name": "GT",
											"source": 13
										},
										{
											"begin": 7213,
											"end": 7252,
											"name": "ISZERO",
											"source": 13
										},
										{
											"begin": 7213,
											"end": 7252,
											"name": "PUSH [tag]",
											"source": 13,
											"value": "320"
										},
										{
											"begin": 7213,
											"end": 7252,
											"name": "JUMPI",
											"source": 13
										},
										{
											"begin": 7232,
											"end": 7250,
											"name": "PUSH [tag]",
											"source": 13,
											"value": "320"
										},
										{
											"begin": 7232,
											"end": 7250,
											"name": "PUSH [tag]",
											"source": 13,
											"value": "239"
										},
										{
											"begin": 7232,
											"end": 7250,
											"name": "JUMP",
											"source": 13,
											"value": "[in]"
										},
										{
											"begin": 7232,
											"end": 7250,
											"name": "tag",
											"source": 13,
											"value": "320"
										},
										{
											"begin": 7232,
											"end": 7250,
											"name": "JUMPDEST",
											"source": 13
										},
										{
											"begin": -1,
											"end": -1,
											"name": "POP",
											"source": -1
										},
										{
											"begin": 7268,
											"end": 7277,
											"name": "ADD",
											"source": 13
										},
										{
											"begin": 7268,
											"end": 7277,
											"name": "SWAP1",
											"source": 13
										},
										{
											"begin": 7155,
											"end": 7283,
											"name": "JUMP",
											"source": 13,
											"value": "[out]"
										},
										{
											"begin": 7288,
											"end": 7415,
											"name": "tag",
											"source": 13,
											"value": "231"
										},
										{
											"begin": 7288,
											"end": 7415,
											"name": "JUMPDEST",
											"source": 13
										},
										{
											"begin": 7349,
											"end": 7359,
											"name": "PUSH",
											"source": 13,
											"value": "4E487B71"
										},
										{
											"begin": 7344,
											"end": 7347,
											"name": "PUSH",
											"source": 13,
											"value": "E0"
										},
										{
											"begin": 7340,
											"end": 7360,
											"name": "SHL",
											"source": 13
										},
										{
											"begin": 7337,
											"end": 7338,
											"name": "PUSH",
											"source": 13,
											"value": "0"
										},
										{
											"begin": 7330,
											"end": 7361,
											"name": "MSTORE",
											"source": 13
										},
										{
											"begin": 7380,
											"end": 7384,
											"name": "PUSH",
											"source": 13,
											"value": "32"
										},
										{
											"begin": 7377,
											"end": 7378,
											"name": "PUSH",
											"source": 13,
											"value": "4"
										},
										{
											"begin": 7370,
											"end": 7385,
											"name": "MSTORE",
											"source": 13
										},
										{
											"begin": 7404,
											"end": 7408,
											"name": "PUSH",
											"source": 13,
											"value": "24"
										},
										{
											"begin": 7401,
											"end": 7402,
											"name": "PUSH",
											"source": 13,
											"value": "0"
										},
										{
											"begin": 7394,
											"end": 7409,
											"name": "REVERT",
											"source": 13
										}
									]
								}
							}
						},
						"methodIdentifiers": {
							"approve(address,uint256)": "095ea7b3",
							"balanceOf(address)": "70a08231",
							"getApproved(uint256)": "081812fc",
							"isApprovedForAll(address,address)": "e985e9c5",
							"name()": "06fdde03",
							"ownerOf(uint256)": "6352211e",
							"safeTransferFrom(address,address,uint256)": "42842e0e",
							"safeTransferFrom(address,address,uint256,bytes)": "b88d4fde",
							"setApprovalForAll(address,bool)": "a22cb465",
							"supportsInterface(bytes4)": "01ffc9a7",
							"symbol()": "95d89b41",
							"tokenURI(uint256)": "c87b56dd",
							"totalSupply()": "18160ddd",
							"transferFrom(address,address,uint256)": "23b872dd"
						}
					},
					"metadata": "{\"compiler\":{\"version\":\"0.8.9+commit.e5eed63a\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"string\",\"name\":\"name_\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"symbol_\",\"type\":\"string\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"inputs\":[],\"name\":\"ApprovalCallerNotOwnerNorApproved\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"ApprovalQueryForNonexistentToken\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"ApprovalToCurrentOwner\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"ApproveToCaller\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"BalanceQueryForZeroAddress\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"OwnerQueryForNonexistentToken\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"TransferCallerNotOwnerNorApproved\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"TransferFromIncorrectOwner\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"TransferToNonERC721ReceiverImplementer\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"TransferToZeroAddress\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"URIQueryForNonexistentToken\",\"type\":\"error\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"approved\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"approved\",\"type\":\"bool\"}],\"name\":\"ApprovalForAll\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"getApproved\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"}],\"name\":\"isApprovedForAll\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"ownerOf\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"safeTransferFrom\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"_data\",\"type\":\"bytes\"}],\"name\":\"safeTransferFrom\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"approved\",\"type\":\"bool\"}],\"name\":\"setApprovalForAll\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes4\",\"name\":\"interfaceId\",\"type\":\"bytes4\"}],\"name\":\"supportsInterface\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"tokenURI\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"details\":\"Implementation of https://eips.ethereum.org/EIPS/eip-721[ERC721] Non-Fungible Token Standard, including the Metadata extension. Built to optimize for lower gas during batch mints. Assumes serials are sequentially minted starting at _startTokenId() (defaults to 0, e.g. 0, 1, 2, 3..). Assumes that an owner cannot have more than 2**64 - 1 (max value of uint64) of supply. Assumes that the maximum token id cannot exceed 2**256 - 1 (max value of uint256).\",\"kind\":\"dev\",\"methods\":{\"approve(address,uint256)\":{\"details\":\"See {IERC721-approve}.\"},\"balanceOf(address)\":{\"details\":\"See {IERC721-balanceOf}.\"},\"getApproved(uint256)\":{\"details\":\"See {IERC721-getApproved}.\"},\"isApprovedForAll(address,address)\":{\"details\":\"See {IERC721-isApprovedForAll}.\"},\"name()\":{\"details\":\"See {IERC721Metadata-name}.\"},\"ownerOf(uint256)\":{\"details\":\"See {IERC721-ownerOf}.\"},\"safeTransferFrom(address,address,uint256)\":{\"details\":\"See {IERC721-safeTransferFrom}.\"},\"safeTransferFrom(address,address,uint256,bytes)\":{\"details\":\"See {IERC721-safeTransferFrom}.\"},\"setApprovalForAll(address,bool)\":{\"details\":\"See {IERC721-setApprovalForAll}.\"},\"supportsInterface(bytes4)\":{\"details\":\"See {IERC165-supportsInterface}.\"},\"symbol()\":{\"details\":\"See {IERC721Metadata-symbol}.\"},\"tokenURI(uint256)\":{\"details\":\"See {IERC721Metadata-tokenURI}.\"},\"totalSupply()\":{\"details\":\"See {IERC721Enumerable-totalSupply}.Burned tokens are calculated here, use _totalMinted() if you want to count just minted tokens.\"},\"transferFrom(address,address,uint256)\":{\"details\":\"See {IERC721-transferFrom}.\"}},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"erc721a/contracts/ERC721A.sol\":\"ERC721A\"},\"evmVersion\":\"london\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\"},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts/token/ERC721/IERC721.sol\":{\"keccak256\":\"0x516a22876c1fab47f49b1bc22b4614491cd05338af8bd2e7b382da090a079990\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://a439187f7126d31add4557f82d8aed6be0162007cd7182c48fd934dbab8f3849\",\"dweb:/ipfs/QmRPLguRFvrRJS7r6F1bcLvsx6q1VrgjEpZafyeL8D7xZh\"]},\"@openzeppelin/contracts/token/ERC721/IERC721Receiver.sol\":{\"keccak256\":\"0xd5fa74b4fb323776fa4a8158800fec9d5ac0fec0d6dd046dd93798632ada265f\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://33017a30a99cc5411a9e376622c31fc4a55cfc6a335e2f57f00cbf24a817ff3f\",\"dweb:/ipfs/QmWNQtWTPhA7Lo8nbxbc8KFMvZwbFYB8fSeEQ3vuapSV4a\"]},\"@openzeppelin/contracts/token/ERC721/extensions/IERC721Enumerable.sol\":{\"keccak256\":\"0xd1556954440b31c97a142c6ba07d5cade45f96fafd52091d33a14ebe365aecbf\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://26fef835622b46a5ba08b3ef6b46a22e94b5f285d0f0fb66b703bd30217d2c34\",\"dweb:/ipfs/QmZ548qdwfL1qF7aXz3xh1GCdTiST81kGGuKRqVUfYmPZR\"]},\"@openzeppelin/contracts/token/ERC721/extensions/IERC721Metadata.sol\":{\"keccak256\":\"0x75b829ff2f26c14355d1cba20e16fe7b29ca58eb5fef665ede48bc0f9c6c74b9\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://a0a107160525724f9e1bbbab031defc2f298296dd9e331f16a6f7130cec32146\",\"dweb:/ipfs/QmemujxSd7gX8A9M8UwmNbz4Ms3U9FG9QfudUgxwvTmPWf\"]},\"@openzeppelin/contracts/utils/Address.sol\":{\"keccak256\":\"0x2ccf9d2313a313d41a791505f2b5abfdc62191b5d4334f7f7a82691c088a1c87\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://b3a57d0854b2fdce6ebff933a48dca2445643d1eccfc27f00292e937f26c6a58\",\"dweb:/ipfs/QmW45rZooS9TqR4YXUbjRbtf2Bpb5ouSarBvfW1LdGprvV\"]},\"@openzeppelin/contracts/utils/Context.sol\":{\"keccak256\":\"0xe2e337e6dde9ef6b680e07338c493ebea1b5fd09b43424112868e9cc1706bca7\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://6df0ddf21ce9f58271bdfaa85cde98b200ef242a05a3f85c2bc10a8294800a92\",\"dweb:/ipfs/QmRK2Y5Yc6BK7tGKkgsgn3aJEQGi5aakeSPZvS65PV8Xp3\"]},\"@openzeppelin/contracts/utils/Strings.sol\":{\"keccak256\":\"0x32c202bd28995dd20c4347b7c6467a6d3241c74c8ad3edcbb610cd9205916c45\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://8179c356adb19e70d6b31a1eedc8c5c7f0c00e669e2540f4099e3844c6074d30\",\"dweb:/ipfs/QmWFbivarEobbqhS1go64ootVuHfVohBseerYy9FTEd1W2\"]},\"@openzeppelin/contracts/utils/introspection/ERC165.sol\":{\"keccak256\":\"0xd10975de010d89fd1c78dc5e8a9a7e7f496198085c151648f20cba166b32582b\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://fb0048dee081f6fffa5f74afc3fb328483c2a30504e94a0ddd2a5114d731ec4d\",\"dweb:/ipfs/QmZptt1nmYoA5SgjwnSgWqgUSDgm4q52Yos3xhnMv3MV43\"]},\"@openzeppelin/contracts/utils/introspection/IERC165.sol\":{\"keccak256\":\"0x447a5f3ddc18419d41ff92b3773fb86471b1db25773e07f877f548918a185bf1\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://be161e54f24e5c6fae81a12db1a8ae87bc5ae1b0ddc805d82a1440a68455088f\",\"dweb:/ipfs/QmP7C3CHdY9urF4dEMb9wmsp1wMxHF6nhA2yQE5SKiPAdy\"]},\"erc721a/contracts/ERC721A.sol\":{\"keccak256\":\"0x5a3f70f309452b24ff4268be3c57c88f2c9aa7b8711b4951f0521fd0488b7b51\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://e2b72bf6e6556d459e5887094a2eeff26aa83d1031092f056a93ea746e02bcd0\",\"dweb:/ipfs/QmS9FvFwmUJvzsQqBUHQ7xFyXkoJwMtRcVmPmBMQn3QnVK\"]}},\"version\":1}",
					"userdoc": {
						"kind": "user",
						"methods": {},
						"version": 1
					}
				}
			}
		},
		"sources": {
			"@openzeppelin/contracts/access/Ownable.sol": {
				"ast": {
					"absolutePath": "@openzeppelin/contracts/access/Ownable.sol",
					"exportedSymbols": {
						"Context": [
							613
						],
						"Ownable": [
							104
						]
					},
					"id": 105,
					"license": "MIT",
					"nodeType": "SourceUnit",
					"nodes": [
						{
							"id": 1,
							"literals": [
								"solidity",
								"^",
								"0.8",
								".0"
							],
							"nodeType": "PragmaDirective",
							"src": "87:23:0"
						},
						{
							"absolutePath": "@openzeppelin/contracts/utils/Context.sol",
							"file": "../utils/Context.sol",
							"id": 2,
							"nameLocation": "-1:-1:-1",
							"nodeType": "ImportDirective",
							"scope": 105,
							"sourceUnit": 614,
							"src": "112:30:0",
							"symbolAliases": [],
							"unitAlias": ""
						},
						{
							"abstract": true,
							"baseContracts": [
								{
									"baseName": {
										"id": 4,
										"name": "Context",
										"nodeType": "IdentifierPath",
										"referencedDeclaration": 613,
										"src": "668:7:0"
									},
									"id": 5,
									"nodeType": "InheritanceSpecifier",
									"src": "668:7:0"
								}
							],
							"canonicalName": "Ownable",
							"contractDependencies": [],
							"contractKind": "contract",
							"documentation": {
								"id": 3,
								"nodeType": "StructuredDocumentation",
								"src": "144:494:0",
								"text": " @dev Contract module which provides a basic access control mechanism, where\n there is an account (an owner) that can be granted exclusive access to\n specific functions.\n By default, the owner account will be the one that deploys the contract. This\n can later be changed with {transferOwnership}.\n This module is used through inheritance. It will make available the modifier\n `onlyOwner`, which can be applied to your functions to restrict their use to\n the owner."
							},
							"fullyImplemented": true,
							"id": 104,
							"linearizedBaseContracts": [
								104,
								613
							],
							"name": "Ownable",
							"nameLocation": "657:7:0",
							"nodeType": "ContractDefinition",
							"nodes": [
								{
									"constant": false,
									"id": 7,
									"mutability": "mutable",
									"name": "_owner",
									"nameLocation": "698:6:0",
									"nodeType": "VariableDeclaration",
									"scope": 104,
									"src": "682:22:0",
									"stateVariable": true,
									"storageLocation": "default",
									"typeDescriptions": {
										"typeIdentifier": "t_address",
										"typeString": "address"
									},
									"typeName": {
										"id": 6,
										"name": "address",
										"nodeType": "ElementaryTypeName",
										"src": "682:7:0",
										"stateMutability": "nonpayable",
										"typeDescriptions": {
											"typeIdentifier": "t_address",
											"typeString": "address"
										}
									},
									"visibility": "private"
								},
								{
									"anonymous": false,
									"id": 13,
									"name": "OwnershipTransferred",
									"nameLocation": "717:20:0",
									"nodeType": "EventDefinition",
									"parameters": {
										"id": 12,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 9,
												"indexed": true,
												"mutability": "mutable",
												"name": "previousOwner",
												"nameLocation": "754:13:0",
												"nodeType": "VariableDeclaration",
												"scope": 13,
												"src": "738:29:0",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 8,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "738:7:0",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 11,
												"indexed": true,
												"mutability": "mutable",
												"name": "newOwner",
												"nameLocation": "785:8:0",
												"nodeType": "VariableDeclaration",
												"scope": 13,
												"src": "769:24:0",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 10,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "769:7:0",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "737:57:0"
									},
									"src": "711:84:0"
								},
								{
									"body": {
										"id": 22,
										"nodeType": "Block",
										"src": "911:49:0",
										"statements": [
											{
												"expression": {
													"arguments": [
														{
															"arguments": [],
															"expression": {
																"argumentTypes": [],
																"id": 18,
																"name": "_msgSender",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 603,
																"src": "940:10:0",
																"typeDescriptions": {
																	"typeIdentifier": "t_function_internal_view$__$returns$_t_address_$",
																	"typeString": "function () view returns (address)"
																}
															},
															"id": 19,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"kind": "functionCall",
															"lValueRequested": false,
															"names": [],
															"nodeType": "FunctionCall",
															"src": "940:12:0",
															"tryCall": false,
															"typeDescriptions": {
																"typeIdentifier": "t_address",
																"typeString": "address"
															}
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_address",
																"typeString": "address"
															}
														],
														"id": 17,
														"name": "_transferOwnership",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 103,
														"src": "921:18:0",
														"typeDescriptions": {
															"typeIdentifier": "t_function_internal_nonpayable$_t_address_$returns$__$",
															"typeString": "function (address)"
														}
													},
													"id": 20,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"names": [],
													"nodeType": "FunctionCall",
													"src": "921:32:0",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_tuple$__$",
														"typeString": "tuple()"
													}
												},
												"id": 21,
												"nodeType": "ExpressionStatement",
												"src": "921:32:0"
											}
										]
									},
									"documentation": {
										"id": 14,
										"nodeType": "StructuredDocumentation",
										"src": "801:91:0",
										"text": " @dev Initializes the contract setting the deployer as the initial owner."
									},
									"id": 23,
									"implemented": true,
									"kind": "constructor",
									"modifiers": [],
									"name": "",
									"nameLocation": "-1:-1:-1",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 15,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "908:2:0"
									},
									"returnParameters": {
										"id": 16,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "911:0:0"
									},
									"scope": 104,
									"src": "897:63:0",
									"stateMutability": "nonpayable",
									"virtual": false,
									"visibility": "internal"
								},
								{
									"body": {
										"id": 31,
										"nodeType": "Block",
										"src": "1091:30:0",
										"statements": [
											{
												"expression": {
													"id": 29,
													"name": "_owner",
													"nodeType": "Identifier",
													"overloadedDeclarations": [],
													"referencedDeclaration": 7,
													"src": "1108:6:0",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"functionReturnParameters": 28,
												"id": 30,
												"nodeType": "Return",
												"src": "1101:13:0"
											}
										]
									},
									"documentation": {
										"id": 24,
										"nodeType": "StructuredDocumentation",
										"src": "966:65:0",
										"text": " @dev Returns the address of the current owner."
									},
									"functionSelector": "8da5cb5b",
									"id": 32,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "owner",
									"nameLocation": "1045:5:0",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 25,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "1050:2:0"
									},
									"returnParameters": {
										"id": 28,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 27,
												"mutability": "mutable",
												"name": "",
												"nameLocation": "-1:-1:-1",
												"nodeType": "VariableDeclaration",
												"scope": 32,
												"src": "1082:7:0",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 26,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "1082:7:0",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "1081:9:0"
									},
									"scope": 104,
									"src": "1036:85:0",
									"stateMutability": "view",
									"virtual": true,
									"visibility": "public"
								},
								{
									"body": {
										"id": 45,
										"nodeType": "Block",
										"src": "1230:96:0",
										"statements": [
											{
												"expression": {
													"arguments": [
														{
															"commonType": {
																"typeIdentifier": "t_address",
																"typeString": "address"
															},
															"id": 40,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"lValueRequested": false,
															"leftExpression": {
																"arguments": [],
																"expression": {
																	"argumentTypes": [],
																	"id": 36,
																	"name": "owner",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 32,
																	"src": "1248:5:0",
																	"typeDescriptions": {
																		"typeIdentifier": "t_function_internal_view$__$returns$_t_address_$",
																		"typeString": "function () view returns (address)"
																	}
																},
																"id": 37,
																"isConstant": false,
																"isLValue": false,
																"isPure": false,
																"kind": "functionCall",
																"lValueRequested": false,
																"names": [],
																"nodeType": "FunctionCall",
																"src": "1248:7:0",
																"tryCall": false,
																"typeDescriptions": {
																	"typeIdentifier": "t_address",
																	"typeString": "address"
																}
															},
															"nodeType": "BinaryOperation",
															"operator": "==",
															"rightExpression": {
																"arguments": [],
																"expression": {
																	"argumentTypes": [],
																	"id": 38,
																	"name": "_msgSender",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 603,
																	"src": "1259:10:0",
																	"typeDescriptions": {
																		"typeIdentifier": "t_function_internal_view$__$returns$_t_address_$",
																		"typeString": "function () view returns (address)"
																	}
																},
																"id": 39,
																"isConstant": false,
																"isLValue": false,
																"isPure": false,
																"kind": "functionCall",
																"lValueRequested": false,
																"names": [],
																"nodeType": "FunctionCall",
																"src": "1259:12:0",
																"tryCall": false,
																"typeDescriptions": {
																	"typeIdentifier": "t_address",
																	"typeString": "address"
																}
															},
															"src": "1248:23:0",
															"typeDescriptions": {
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															}
														},
														{
															"hexValue": "4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e6572",
															"id": 41,
															"isConstant": false,
															"isLValue": false,
															"isPure": true,
															"kind": "string",
															"lValueRequested": false,
															"nodeType": "Literal",
															"src": "1273:34:0",
															"typeDescriptions": {
																"typeIdentifier": "t_stringliteral_9924ebdf1add33d25d4ef888e16131f0a5687b0580a36c21b5c301a6c462effe",
																"typeString": "literal_string \"Ownable: caller is not the owner\""
															},
															"value": "Ownable: caller is not the owner"
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															},
															{
																"typeIdentifier": "t_stringliteral_9924ebdf1add33d25d4ef888e16131f0a5687b0580a36c21b5c301a6c462effe",
																"typeString": "literal_string \"Ownable: caller is not the owner\""
															}
														],
														"id": 35,
														"name": "require",
														"nodeType": "Identifier",
														"overloadedDeclarations": [
															4294967278,
															4294967278
														],
														"referencedDeclaration": 4294967278,
														"src": "1240:7:0",
														"typeDescriptions": {
															"typeIdentifier": "t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$",
															"typeString": "function (bool,string memory) pure"
														}
													},
													"id": 42,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"names": [],
													"nodeType": "FunctionCall",
													"src": "1240:68:0",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_tuple$__$",
														"typeString": "tuple()"
													}
												},
												"id": 43,
												"nodeType": "ExpressionStatement",
												"src": "1240:68:0"
											},
											{
												"id": 44,
												"nodeType": "PlaceholderStatement",
												"src": "1318:1:0"
											}
										]
									},
									"documentation": {
										"id": 33,
										"nodeType": "StructuredDocumentation",
										"src": "1127:77:0",
										"text": " @dev Throws if called by any account other than the owner."
									},
									"id": 46,
									"name": "onlyOwner",
									"nameLocation": "1218:9:0",
									"nodeType": "ModifierDefinition",
									"parameters": {
										"id": 34,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "1227:2:0"
									},
									"src": "1209:117:0",
									"virtual": false,
									"visibility": "internal"
								},
								{
									"body": {
										"id": 59,
										"nodeType": "Block",
										"src": "1722:47:0",
										"statements": [
											{
												"expression": {
													"arguments": [
														{
															"arguments": [
																{
																	"hexValue": "30",
																	"id": 55,
																	"isConstant": false,
																	"isLValue": false,
																	"isPure": true,
																	"kind": "number",
																	"lValueRequested": false,
																	"nodeType": "Literal",
																	"src": "1759:1:0",
																	"typeDescriptions": {
																		"typeIdentifier": "t_rational_0_by_1",
																		"typeString": "int_const 0"
																	},
																	"value": "0"
																}
															],
															"expression": {
																"argumentTypes": [
																	{
																		"typeIdentifier": "t_rational_0_by_1",
																		"typeString": "int_const 0"
																	}
																],
																"id": 54,
																"isConstant": false,
																"isLValue": false,
																"isPure": true,
																"lValueRequested": false,
																"nodeType": "ElementaryTypeNameExpression",
																"src": "1751:7:0",
																"typeDescriptions": {
																	"typeIdentifier": "t_type$_t_address_$",
																	"typeString": "type(address)"
																},
																"typeName": {
																	"id": 53,
																	"name": "address",
																	"nodeType": "ElementaryTypeName",
																	"src": "1751:7:0",
																	"typeDescriptions": {}
																}
															},
															"id": 56,
															"isConstant": false,
															"isLValue": false,
															"isPure": true,
															"kind": "typeConversion",
															"lValueRequested": false,
															"names": [],
															"nodeType": "FunctionCall",
															"src": "1751:10:0",
															"tryCall": false,
															"typeDescriptions": {
																"typeIdentifier": "t_address",
																"typeString": "address"
															}
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_address",
																"typeString": "address"
															}
														],
														"id": 52,
														"name": "_transferOwnership",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 103,
														"src": "1732:18:0",
														"typeDescriptions": {
															"typeIdentifier": "t_function_internal_nonpayable$_t_address_$returns$__$",
															"typeString": "function (address)"
														}
													},
													"id": 57,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"names": [],
													"nodeType": "FunctionCall",
													"src": "1732:30:0",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_tuple$__$",
														"typeString": "tuple()"
													}
												},
												"id": 58,
												"nodeType": "ExpressionStatement",
												"src": "1732:30:0"
											}
										]
									},
									"documentation": {
										"id": 47,
										"nodeType": "StructuredDocumentation",
										"src": "1332:331:0",
										"text": " @dev Leaves the contract without owner. It will not be possible to call\n `onlyOwner` functions anymore. Can only be called by the current owner.\n NOTE: Renouncing ownership will leave the contract without an owner,\n thereby removing any functionality that is only available to the owner."
									},
									"functionSelector": "715018a6",
									"id": 60,
									"implemented": true,
									"kind": "function",
									"modifiers": [
										{
											"id": 50,
											"kind": "modifierInvocation",
											"modifierName": {
												"id": 49,
												"name": "onlyOwner",
												"nodeType": "IdentifierPath",
												"referencedDeclaration": 46,
												"src": "1712:9:0"
											},
											"nodeType": "ModifierInvocation",
											"src": "1712:9:0"
										}
									],
									"name": "renounceOwnership",
									"nameLocation": "1677:17:0",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 48,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "1694:2:0"
									},
									"returnParameters": {
										"id": 51,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "1722:0:0"
									},
									"scope": 104,
									"src": "1668:101:0",
									"stateMutability": "nonpayable",
									"virtual": true,
									"visibility": "public"
								},
								{
									"body": {
										"id": 82,
										"nodeType": "Block",
										"src": "1988:128:0",
										"statements": [
											{
												"expression": {
													"arguments": [
														{
															"commonType": {
																"typeIdentifier": "t_address",
																"typeString": "address"
															},
															"id": 74,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"lValueRequested": false,
															"leftExpression": {
																"id": 69,
																"name": "newOwner",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 63,
																"src": "2006:8:0",
																"typeDescriptions": {
																	"typeIdentifier": "t_address",
																	"typeString": "address"
																}
															},
															"nodeType": "BinaryOperation",
															"operator": "!=",
															"rightExpression": {
																"arguments": [
																	{
																		"hexValue": "30",
																		"id": 72,
																		"isConstant": false,
																		"isLValue": false,
																		"isPure": true,
																		"kind": "number",
																		"lValueRequested": false,
																		"nodeType": "Literal",
																		"src": "2026:1:0",
																		"typeDescriptions": {
																			"typeIdentifier": "t_rational_0_by_1",
																			"typeString": "int_const 0"
																		},
																		"value": "0"
																	}
																],
																"expression": {
																	"argumentTypes": [
																		{
																			"typeIdentifier": "t_rational_0_by_1",
																			"typeString": "int_const 0"
																		}
																	],
																	"id": 71,
																	"isConstant": false,
																	"isLValue": false,
																	"isPure": true,
																	"lValueRequested": false,
																	"nodeType": "ElementaryTypeNameExpression",
																	"src": "2018:7:0",
																	"typeDescriptions": {
																		"typeIdentifier": "t_type$_t_address_$",
																		"typeString": "type(address)"
																	},
																	"typeName": {
																		"id": 70,
																		"name": "address",
																		"nodeType": "ElementaryTypeName",
																		"src": "2018:7:0",
																		"typeDescriptions": {}
																	}
																},
																"id": 73,
																"isConstant": false,
																"isLValue": false,
																"isPure": true,
																"kind": "typeConversion",
																"lValueRequested": false,
																"names": [],
																"nodeType": "FunctionCall",
																"src": "2018:10:0",
																"tryCall": false,
																"typeDescriptions": {
																	"typeIdentifier": "t_address",
																	"typeString": "address"
																}
															},
															"src": "2006:22:0",
															"typeDescriptions": {
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															}
														},
														{
															"hexValue": "4f776e61626c653a206e6577206f776e657220697320746865207a65726f2061646472657373",
															"id": 75,
															"isConstant": false,
															"isLValue": false,
															"isPure": true,
															"kind": "string",
															"lValueRequested": false,
															"nodeType": "Literal",
															"src": "2030:40:0",
															"typeDescriptions": {
																"typeIdentifier": "t_stringliteral_245f15ff17f551913a7a18385165551503906a406f905ac1c2437281a7cd0cfe",
																"typeString": "literal_string \"Ownable: new owner is the zero address\""
															},
															"value": "Ownable: new owner is the zero address"
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															},
															{
																"typeIdentifier": "t_stringliteral_245f15ff17f551913a7a18385165551503906a406f905ac1c2437281a7cd0cfe",
																"typeString": "literal_string \"Ownable: new owner is the zero address\""
															}
														],
														"id": 68,
														"name": "require",
														"nodeType": "Identifier",
														"overloadedDeclarations": [
															4294967278,
															4294967278
														],
														"referencedDeclaration": 4294967278,
														"src": "1998:7:0",
														"typeDescriptions": {
															"typeIdentifier": "t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$",
															"typeString": "function (bool,string memory) pure"
														}
													},
													"id": 76,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"names": [],
													"nodeType": "FunctionCall",
													"src": "1998:73:0",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_tuple$__$",
														"typeString": "tuple()"
													}
												},
												"id": 77,
												"nodeType": "ExpressionStatement",
												"src": "1998:73:0"
											},
											{
												"expression": {
													"arguments": [
														{
															"id": 79,
															"name": "newOwner",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 63,
															"src": "2100:8:0",
															"typeDescriptions": {
																"typeIdentifier": "t_address",
																"typeString": "address"
															}
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_address",
																"typeString": "address"
															}
														],
														"id": 78,
														"name": "_transferOwnership",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 103,
														"src": "2081:18:0",
														"typeDescriptions": {
															"typeIdentifier": "t_function_internal_nonpayable$_t_address_$returns$__$",
															"typeString": "function (address)"
														}
													},
													"id": 80,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"names": [],
													"nodeType": "FunctionCall",
													"src": "2081:28:0",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_tuple$__$",
														"typeString": "tuple()"
													}
												},
												"id": 81,
												"nodeType": "ExpressionStatement",
												"src": "2081:28:0"
											}
										]
									},
									"documentation": {
										"id": 61,
										"nodeType": "StructuredDocumentation",
										"src": "1775:138:0",
										"text": " @dev Transfers ownership of the contract to a new account (`newOwner`).\n Can only be called by the current owner."
									},
									"functionSelector": "f2fde38b",
									"id": 83,
									"implemented": true,
									"kind": "function",
									"modifiers": [
										{
											"id": 66,
											"kind": "modifierInvocation",
											"modifierName": {
												"id": 65,
												"name": "onlyOwner",
												"nodeType": "IdentifierPath",
												"referencedDeclaration": 46,
												"src": "1978:9:0"
											},
											"nodeType": "ModifierInvocation",
											"src": "1978:9:0"
										}
									],
									"name": "transferOwnership",
									"nameLocation": "1927:17:0",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 64,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 63,
												"mutability": "mutable",
												"name": "newOwner",
												"nameLocation": "1953:8:0",
												"nodeType": "VariableDeclaration",
												"scope": 83,
												"src": "1945:16:0",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 62,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "1945:7:0",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "1944:18:0"
									},
									"returnParameters": {
										"id": 67,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "1988:0:0"
									},
									"scope": 104,
									"src": "1918:198:0",
									"stateMutability": "nonpayable",
									"virtual": true,
									"visibility": "public"
								},
								{
									"body": {
										"id": 102,
										"nodeType": "Block",
										"src": "2333:124:0",
										"statements": [
											{
												"assignments": [
													90
												],
												"declarations": [
													{
														"constant": false,
														"id": 90,
														"mutability": "mutable",
														"name": "oldOwner",
														"nameLocation": "2351:8:0",
														"nodeType": "VariableDeclaration",
														"scope": 102,
														"src": "2343:16:0",
														"stateVariable": false,
														"storageLocation": "default",
														"typeDescriptions": {
															"typeIdentifier": "t_address",
															"typeString": "address"
														},
														"typeName": {
															"id": 89,
															"name": "address",
															"nodeType": "ElementaryTypeName",
															"src": "2343:7:0",
															"stateMutability": "nonpayable",
															"typeDescriptions": {
																"typeIdentifier": "t_address",
																"typeString": "address"
															}
														},
														"visibility": "internal"
													}
												],
												"id": 92,
												"initialValue": {
													"id": 91,
													"name": "_owner",
													"nodeType": "Identifier",
													"overloadedDeclarations": [],
													"referencedDeclaration": 7,
													"src": "2362:6:0",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"nodeType": "VariableDeclarationStatement",
												"src": "2343:25:0"
											},
											{
												"expression": {
													"id": 95,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"lValueRequested": false,
													"leftHandSide": {
														"id": 93,
														"name": "_owner",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 7,
														"src": "2378:6:0",
														"typeDescriptions": {
															"typeIdentifier": "t_address",
															"typeString": "address"
														}
													},
													"nodeType": "Assignment",
													"operator": "=",
													"rightHandSide": {
														"id": 94,
														"name": "newOwner",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 86,
														"src": "2387:8:0",
														"typeDescriptions": {
															"typeIdentifier": "t_address",
															"typeString": "address"
														}
													},
													"src": "2378:17:0",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"id": 96,
												"nodeType": "ExpressionStatement",
												"src": "2378:17:0"
											},
											{
												"eventCall": {
													"arguments": [
														{
															"id": 98,
															"name": "oldOwner",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 90,
															"src": "2431:8:0",
															"typeDescriptions": {
																"typeIdentifier": "t_address",
																"typeString": "address"
															}
														},
														{
															"id": 99,
															"name": "newOwner",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 86,
															"src": "2441:8:0",
															"typeDescriptions": {
																"typeIdentifier": "t_address",
																"typeString": "address"
															}
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_address",
																"typeString": "address"
															},
															{
																"typeIdentifier": "t_address",
																"typeString": "address"
															}
														],
														"id": 97,
														"name": "OwnershipTransferred",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 13,
														"src": "2410:20:0",
														"typeDescriptions": {
															"typeIdentifier": "t_function_event_nonpayable$_t_address_$_t_address_$returns$__$",
															"typeString": "function (address,address)"
														}
													},
													"id": 100,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"names": [],
													"nodeType": "FunctionCall",
													"src": "2410:40:0",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_tuple$__$",
														"typeString": "tuple()"
													}
												},
												"id": 101,
												"nodeType": "EmitStatement",
												"src": "2405:45:0"
											}
										]
									},
									"documentation": {
										"id": 84,
										"nodeType": "StructuredDocumentation",
										"src": "2122:143:0",
										"text": " @dev Transfers ownership of the contract to a new account (`newOwner`).\n Internal function without access restriction."
									},
									"id": 103,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "_transferOwnership",
									"nameLocation": "2279:18:0",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 87,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 86,
												"mutability": "mutable",
												"name": "newOwner",
												"nameLocation": "2306:8:0",
												"nodeType": "VariableDeclaration",
												"scope": 103,
												"src": "2298:16:0",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 85,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "2298:7:0",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "2297:18:0"
									},
									"returnParameters": {
										"id": 88,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "2333:0:0"
									},
									"scope": 104,
									"src": "2270:187:0",
									"stateMutability": "nonpayable",
									"virtual": true,
									"visibility": "internal"
								}
							],
							"scope": 105,
							"src": "639:1820:0",
							"usedErrors": []
						}
					],
					"src": "87:2373:0"
				},
				"id": 0
			},
			"@openzeppelin/contracts/token/ERC721/IERC721.sol": {
				"ast": {
					"absolutePath": "@openzeppelin/contracts/token/ERC721/IERC721.sol",
					"exportedSymbols": {
						"IERC165": [
							945
						],
						"IERC721": [
							220
						]
					},
					"id": 221,
					"license": "MIT",
					"nodeType": "SourceUnit",
					"nodes": [
						{
							"id": 106,
							"literals": [
								"solidity",
								"^",
								"0.8",
								".0"
							],
							"nodeType": "PragmaDirective",
							"src": "93:23:1"
						},
						{
							"absolutePath": "@openzeppelin/contracts/utils/introspection/IERC165.sol",
							"file": "../../utils/introspection/IERC165.sol",
							"id": 107,
							"nameLocation": "-1:-1:-1",
							"nodeType": "ImportDirective",
							"scope": 221,
							"sourceUnit": 946,
							"src": "118:47:1",
							"symbolAliases": [],
							"unitAlias": ""
						},
						{
							"abstract": false,
							"baseContracts": [
								{
									"baseName": {
										"id": 109,
										"name": "IERC165",
										"nodeType": "IdentifierPath",
										"referencedDeclaration": 945,
										"src": "256:7:1"
									},
									"id": 110,
									"nodeType": "InheritanceSpecifier",
									"src": "256:7:1"
								}
							],
							"canonicalName": "IERC721",
							"contractDependencies": [],
							"contractKind": "interface",
							"documentation": {
								"id": 108,
								"nodeType": "StructuredDocumentation",
								"src": "167:67:1",
								"text": " @dev Required interface of an ERC721 compliant contract."
							},
							"fullyImplemented": false,
							"id": 220,
							"linearizedBaseContracts": [
								220,
								945
							],
							"name": "IERC721",
							"nameLocation": "245:7:1",
							"nodeType": "ContractDefinition",
							"nodes": [
								{
									"anonymous": false,
									"documentation": {
										"id": 111,
										"nodeType": "StructuredDocumentation",
										"src": "270:88:1",
										"text": " @dev Emitted when `tokenId` token is transferred from `from` to `to`."
									},
									"id": 119,
									"name": "Transfer",
									"nameLocation": "369:8:1",
									"nodeType": "EventDefinition",
									"parameters": {
										"id": 118,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 113,
												"indexed": true,
												"mutability": "mutable",
												"name": "from",
												"nameLocation": "394:4:1",
												"nodeType": "VariableDeclaration",
												"scope": 119,
												"src": "378:20:1",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 112,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "378:7:1",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 115,
												"indexed": true,
												"mutability": "mutable",
												"name": "to",
												"nameLocation": "416:2:1",
												"nodeType": "VariableDeclaration",
												"scope": 119,
												"src": "400:18:1",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 114,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "400:7:1",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 117,
												"indexed": true,
												"mutability": "mutable",
												"name": "tokenId",
												"nameLocation": "436:7:1",
												"nodeType": "VariableDeclaration",
												"scope": 119,
												"src": "420:23:1",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 116,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "420:7:1",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "377:67:1"
									},
									"src": "363:82:1"
								},
								{
									"anonymous": false,
									"documentation": {
										"id": 120,
										"nodeType": "StructuredDocumentation",
										"src": "451:94:1",
										"text": " @dev Emitted when `owner` enables `approved` to manage the `tokenId` token."
									},
									"id": 128,
									"name": "Approval",
									"nameLocation": "556:8:1",
									"nodeType": "EventDefinition",
									"parameters": {
										"id": 127,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 122,
												"indexed": true,
												"mutability": "mutable",
												"name": "owner",
												"nameLocation": "581:5:1",
												"nodeType": "VariableDeclaration",
												"scope": 128,
												"src": "565:21:1",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 121,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "565:7:1",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 124,
												"indexed": true,
												"mutability": "mutable",
												"name": "approved",
												"nameLocation": "604:8:1",
												"nodeType": "VariableDeclaration",
												"scope": 128,
												"src": "588:24:1",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 123,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "588:7:1",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 126,
												"indexed": true,
												"mutability": "mutable",
												"name": "tokenId",
												"nameLocation": "630:7:1",
												"nodeType": "VariableDeclaration",
												"scope": 128,
												"src": "614:23:1",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 125,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "614:7:1",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "564:74:1"
									},
									"src": "550:89:1"
								},
								{
									"anonymous": false,
									"documentation": {
										"id": 129,
										"nodeType": "StructuredDocumentation",
										"src": "645:117:1",
										"text": " @dev Emitted when `owner` enables or disables (`approved`) `operator` to manage all of its assets."
									},
									"id": 137,
									"name": "ApprovalForAll",
									"nameLocation": "773:14:1",
									"nodeType": "EventDefinition",
									"parameters": {
										"id": 136,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 131,
												"indexed": true,
												"mutability": "mutable",
												"name": "owner",
												"nameLocation": "804:5:1",
												"nodeType": "VariableDeclaration",
												"scope": 137,
												"src": "788:21:1",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 130,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "788:7:1",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 133,
												"indexed": true,
												"mutability": "mutable",
												"name": "operator",
												"nameLocation": "827:8:1",
												"nodeType": "VariableDeclaration",
												"scope": 137,
												"src": "811:24:1",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 132,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "811:7:1",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 135,
												"indexed": false,
												"mutability": "mutable",
												"name": "approved",
												"nameLocation": "842:8:1",
												"nodeType": "VariableDeclaration",
												"scope": 137,
												"src": "837:13:1",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_bool",
													"typeString": "bool"
												},
												"typeName": {
													"id": 134,
													"name": "bool",
													"nodeType": "ElementaryTypeName",
													"src": "837:4:1",
													"typeDescriptions": {
														"typeIdentifier": "t_bool",
														"typeString": "bool"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "787:64:1"
									},
									"src": "767:85:1"
								},
								{
									"documentation": {
										"id": 138,
										"nodeType": "StructuredDocumentation",
										"src": "858:76:1",
										"text": " @dev Returns the number of tokens in ``owner``'s account."
									},
									"functionSelector": "70a08231",
									"id": 145,
									"implemented": false,
									"kind": "function",
									"modifiers": [],
									"name": "balanceOf",
									"nameLocation": "948:9:1",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 141,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 140,
												"mutability": "mutable",
												"name": "owner",
												"nameLocation": "966:5:1",
												"nodeType": "VariableDeclaration",
												"scope": 145,
												"src": "958:13:1",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 139,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "958:7:1",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "957:15:1"
									},
									"returnParameters": {
										"id": 144,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 143,
												"mutability": "mutable",
												"name": "balance",
												"nameLocation": "1004:7:1",
												"nodeType": "VariableDeclaration",
												"scope": 145,
												"src": "996:15:1",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 142,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "996:7:1",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "995:17:1"
									},
									"scope": 220,
									"src": "939:74:1",
									"stateMutability": "view",
									"virtual": false,
									"visibility": "external"
								},
								{
									"documentation": {
										"id": 146,
										"nodeType": "StructuredDocumentation",
										"src": "1019:131:1",
										"text": " @dev Returns the owner of the `tokenId` token.\n Requirements:\n - `tokenId` must exist."
									},
									"functionSelector": "6352211e",
									"id": 153,
									"implemented": false,
									"kind": "function",
									"modifiers": [],
									"name": "ownerOf",
									"nameLocation": "1164:7:1",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 149,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 148,
												"mutability": "mutable",
												"name": "tokenId",
												"nameLocation": "1180:7:1",
												"nodeType": "VariableDeclaration",
												"scope": 153,
												"src": "1172:15:1",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 147,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "1172:7:1",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "1171:17:1"
									},
									"returnParameters": {
										"id": 152,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 151,
												"mutability": "mutable",
												"name": "owner",
												"nameLocation": "1220:5:1",
												"nodeType": "VariableDeclaration",
												"scope": 153,
												"src": "1212:13:1",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 150,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "1212:7:1",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "1211:15:1"
									},
									"scope": 220,
									"src": "1155:72:1",
									"stateMutability": "view",
									"virtual": false,
									"visibility": "external"
								},
								{
									"documentation": {
										"id": 154,
										"nodeType": "StructuredDocumentation",
										"src": "1233:690:1",
										"text": " @dev Safely transfers `tokenId` token from `from` to `to`, checking first that contract recipients\n are aware of the ERC721 protocol to prevent tokens from being forever locked.\n Requirements:\n - `from` cannot be the zero address.\n - `to` cannot be the zero address.\n - `tokenId` token must exist and be owned by `from`.\n - If the caller is not `from`, it must be have been allowed to move this token by either {approve} or {setApprovalForAll}.\n - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\n Emits a {Transfer} event."
									},
									"functionSelector": "42842e0e",
									"id": 163,
									"implemented": false,
									"kind": "function",
									"modifiers": [],
									"name": "safeTransferFrom",
									"nameLocation": "1937:16:1",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 161,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 156,
												"mutability": "mutable",
												"name": "from",
												"nameLocation": "1971:4:1",
												"nodeType": "VariableDeclaration",
												"scope": 163,
												"src": "1963:12:1",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 155,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "1963:7:1",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 158,
												"mutability": "mutable",
												"name": "to",
												"nameLocation": "1993:2:1",
												"nodeType": "VariableDeclaration",
												"scope": 163,
												"src": "1985:10:1",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 157,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "1985:7:1",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 160,
												"mutability": "mutable",
												"name": "tokenId",
												"nameLocation": "2013:7:1",
												"nodeType": "VariableDeclaration",
												"scope": 163,
												"src": "2005:15:1",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 159,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "2005:7:1",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "1953:73:1"
									},
									"returnParameters": {
										"id": 162,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "2035:0:1"
									},
									"scope": 220,
									"src": "1928:108:1",
									"stateMutability": "nonpayable",
									"virtual": false,
									"visibility": "external"
								},
								{
									"documentation": {
										"id": 164,
										"nodeType": "StructuredDocumentation",
										"src": "2042:504:1",
										"text": " @dev Transfers `tokenId` token from `from` to `to`.\n WARNING: Usage of this method is discouraged, use {safeTransferFrom} whenever possible.\n Requirements:\n - `from` cannot be the zero address.\n - `to` cannot be the zero address.\n - `tokenId` token must be owned by `from`.\n - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}.\n Emits a {Transfer} event."
									},
									"functionSelector": "23b872dd",
									"id": 173,
									"implemented": false,
									"kind": "function",
									"modifiers": [],
									"name": "transferFrom",
									"nameLocation": "2560:12:1",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 171,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 166,
												"mutability": "mutable",
												"name": "from",
												"nameLocation": "2590:4:1",
												"nodeType": "VariableDeclaration",
												"scope": 173,
												"src": "2582:12:1",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 165,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "2582:7:1",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 168,
												"mutability": "mutable",
												"name": "to",
												"nameLocation": "2612:2:1",
												"nodeType": "VariableDeclaration",
												"scope": 173,
												"src": "2604:10:1",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 167,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "2604:7:1",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 170,
												"mutability": "mutable",
												"name": "tokenId",
												"nameLocation": "2632:7:1",
												"nodeType": "VariableDeclaration",
												"scope": 173,
												"src": "2624:15:1",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 169,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "2624:7:1",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "2572:73:1"
									},
									"returnParameters": {
										"id": 172,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "2654:0:1"
									},
									"scope": 220,
									"src": "2551:104:1",
									"stateMutability": "nonpayable",
									"virtual": false,
									"visibility": "external"
								},
								{
									"documentation": {
										"id": 174,
										"nodeType": "StructuredDocumentation",
										"src": "2661:452:1",
										"text": " @dev Gives permission to `to` to transfer `tokenId` token to another account.\n The approval is cleared when the token is transferred.\n Only a single account can be approved at a time, so approving the zero address clears previous approvals.\n Requirements:\n - The caller must own the token or be an approved operator.\n - `tokenId` must exist.\n Emits an {Approval} event."
									},
									"functionSelector": "095ea7b3",
									"id": 181,
									"implemented": false,
									"kind": "function",
									"modifiers": [],
									"name": "approve",
									"nameLocation": "3127:7:1",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 179,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 176,
												"mutability": "mutable",
												"name": "to",
												"nameLocation": "3143:2:1",
												"nodeType": "VariableDeclaration",
												"scope": 181,
												"src": "3135:10:1",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 175,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "3135:7:1",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 178,
												"mutability": "mutable",
												"name": "tokenId",
												"nameLocation": "3155:7:1",
												"nodeType": "VariableDeclaration",
												"scope": 181,
												"src": "3147:15:1",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 177,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "3147:7:1",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "3134:29:1"
									},
									"returnParameters": {
										"id": 180,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "3172:0:1"
									},
									"scope": 220,
									"src": "3118:55:1",
									"stateMutability": "nonpayable",
									"virtual": false,
									"visibility": "external"
								},
								{
									"documentation": {
										"id": 182,
										"nodeType": "StructuredDocumentation",
										"src": "3179:139:1",
										"text": " @dev Returns the account approved for `tokenId` token.\n Requirements:\n - `tokenId` must exist."
									},
									"functionSelector": "081812fc",
									"id": 189,
									"implemented": false,
									"kind": "function",
									"modifiers": [],
									"name": "getApproved",
									"nameLocation": "3332:11:1",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 185,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 184,
												"mutability": "mutable",
												"name": "tokenId",
												"nameLocation": "3352:7:1",
												"nodeType": "VariableDeclaration",
												"scope": 189,
												"src": "3344:15:1",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 183,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "3344:7:1",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "3343:17:1"
									},
									"returnParameters": {
										"id": 188,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 187,
												"mutability": "mutable",
												"name": "operator",
												"nameLocation": "3392:8:1",
												"nodeType": "VariableDeclaration",
												"scope": 189,
												"src": "3384:16:1",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 186,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "3384:7:1",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "3383:18:1"
									},
									"scope": 220,
									"src": "3323:79:1",
									"stateMutability": "view",
									"virtual": false,
									"visibility": "external"
								},
								{
									"documentation": {
										"id": 190,
										"nodeType": "StructuredDocumentation",
										"src": "3408:309:1",
										"text": " @dev Approve or remove `operator` as an operator for the caller.\n Operators can call {transferFrom} or {safeTransferFrom} for any token owned by the caller.\n Requirements:\n - The `operator` cannot be the caller.\n Emits an {ApprovalForAll} event."
									},
									"functionSelector": "a22cb465",
									"id": 197,
									"implemented": false,
									"kind": "function",
									"modifiers": [],
									"name": "setApprovalForAll",
									"nameLocation": "3731:17:1",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 195,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 192,
												"mutability": "mutable",
												"name": "operator",
												"nameLocation": "3757:8:1",
												"nodeType": "VariableDeclaration",
												"scope": 197,
												"src": "3749:16:1",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 191,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "3749:7:1",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 194,
												"mutability": "mutable",
												"name": "_approved",
												"nameLocation": "3772:9:1",
												"nodeType": "VariableDeclaration",
												"scope": 197,
												"src": "3767:14:1",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_bool",
													"typeString": "bool"
												},
												"typeName": {
													"id": 193,
													"name": "bool",
													"nodeType": "ElementaryTypeName",
													"src": "3767:4:1",
													"typeDescriptions": {
														"typeIdentifier": "t_bool",
														"typeString": "bool"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "3748:34:1"
									},
									"returnParameters": {
										"id": 196,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "3791:0:1"
									},
									"scope": 220,
									"src": "3722:70:1",
									"stateMutability": "nonpayable",
									"virtual": false,
									"visibility": "external"
								},
								{
									"documentation": {
										"id": 198,
										"nodeType": "StructuredDocumentation",
										"src": "3798:138:1",
										"text": " @dev Returns if the `operator` is allowed to manage all of the assets of `owner`.\n See {setApprovalForAll}"
									},
									"functionSelector": "e985e9c5",
									"id": 207,
									"implemented": false,
									"kind": "function",
									"modifiers": [],
									"name": "isApprovedForAll",
									"nameLocation": "3950:16:1",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 203,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 200,
												"mutability": "mutable",
												"name": "owner",
												"nameLocation": "3975:5:1",
												"nodeType": "VariableDeclaration",
												"scope": 207,
												"src": "3967:13:1",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 199,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "3967:7:1",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 202,
												"mutability": "mutable",
												"name": "operator",
												"nameLocation": "3990:8:1",
												"nodeType": "VariableDeclaration",
												"scope": 207,
												"src": "3982:16:1",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 201,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "3982:7:1",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "3966:33:1"
									},
									"returnParameters": {
										"id": 206,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 205,
												"mutability": "mutable",
												"name": "",
												"nameLocation": "-1:-1:-1",
												"nodeType": "VariableDeclaration",
												"scope": 207,
												"src": "4023:4:1",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_bool",
													"typeString": "bool"
												},
												"typeName": {
													"id": 204,
													"name": "bool",
													"nodeType": "ElementaryTypeName",
													"src": "4023:4:1",
													"typeDescriptions": {
														"typeIdentifier": "t_bool",
														"typeString": "bool"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "4022:6:1"
									},
									"scope": 220,
									"src": "3941:88:1",
									"stateMutability": "view",
									"virtual": false,
									"visibility": "external"
								},
								{
									"documentation": {
										"id": 208,
										"nodeType": "StructuredDocumentation",
										"src": "4035:556:1",
										"text": " @dev Safely transfers `tokenId` token from `from` to `to`.\n Requirements:\n - `from` cannot be the zero address.\n - `to` cannot be the zero address.\n - `tokenId` token must exist and be owned by `from`.\n - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}.\n - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\n Emits a {Transfer} event."
									},
									"functionSelector": "b88d4fde",
									"id": 219,
									"implemented": false,
									"kind": "function",
									"modifiers": [],
									"name": "safeTransferFrom",
									"nameLocation": "4605:16:1",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 217,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 210,
												"mutability": "mutable",
												"name": "from",
												"nameLocation": "4639:4:1",
												"nodeType": "VariableDeclaration",
												"scope": 219,
												"src": "4631:12:1",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 209,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "4631:7:1",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 212,
												"mutability": "mutable",
												"name": "to",
												"nameLocation": "4661:2:1",
												"nodeType": "VariableDeclaration",
												"scope": 219,
												"src": "4653:10:1",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 211,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "4653:7:1",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 214,
												"mutability": "mutable",
												"name": "tokenId",
												"nameLocation": "4681:7:1",
												"nodeType": "VariableDeclaration",
												"scope": 219,
												"src": "4673:15:1",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 213,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "4673:7:1",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 216,
												"mutability": "mutable",
												"name": "data",
												"nameLocation": "4713:4:1",
												"nodeType": "VariableDeclaration",
												"scope": 219,
												"src": "4698:19:1",
												"stateVariable": false,
												"storageLocation": "calldata",
												"typeDescriptions": {
													"typeIdentifier": "t_bytes_calldata_ptr",
													"typeString": "bytes"
												},
												"typeName": {
													"id": 215,
													"name": "bytes",
													"nodeType": "ElementaryTypeName",
													"src": "4698:5:1",
													"typeDescriptions": {
														"typeIdentifier": "t_bytes_storage_ptr",
														"typeString": "bytes"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "4621:102:1"
									},
									"returnParameters": {
										"id": 218,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "4732:0:1"
									},
									"scope": 220,
									"src": "4596:137:1",
									"stateMutability": "nonpayable",
									"virtual": false,
									"visibility": "external"
								}
							],
							"scope": 221,
							"src": "235:4500:1",
							"usedErrors": []
						}
					],
					"src": "93:4643:1"
				},
				"id": 1
			},
			"@openzeppelin/contracts/token/ERC721/IERC721Receiver.sol": {
				"ast": {
					"absolutePath": "@openzeppelin/contracts/token/ERC721/IERC721Receiver.sol",
					"exportedSymbols": {
						"IERC721Receiver": [
							238
						]
					},
					"id": 239,
					"license": "MIT",
					"nodeType": "SourceUnit",
					"nodes": [
						{
							"id": 222,
							"literals": [
								"solidity",
								"^",
								"0.8",
								".0"
							],
							"nodeType": "PragmaDirective",
							"src": "101:23:2"
						},
						{
							"abstract": false,
							"baseContracts": [],
							"canonicalName": "IERC721Receiver",
							"contractDependencies": [],
							"contractKind": "interface",
							"documentation": {
								"id": 223,
								"nodeType": "StructuredDocumentation",
								"src": "126:152:2",
								"text": " @title ERC721 token receiver interface\n @dev Interface for any contract that wants to support safeTransfers\n from ERC721 asset contracts."
							},
							"fullyImplemented": false,
							"id": 238,
							"linearizedBaseContracts": [
								238
							],
							"name": "IERC721Receiver",
							"nameLocation": "289:15:2",
							"nodeType": "ContractDefinition",
							"nodes": [
								{
									"documentation": {
										"id": 224,
										"nodeType": "StructuredDocumentation",
										"src": "311:485:2",
										"text": " @dev Whenever an {IERC721} `tokenId` token is transferred to this contract via {IERC721-safeTransferFrom}\n by `operator` from `from`, this function is called.\n It must return its Solidity selector to confirm the token transfer.\n If any other value is returned or the interface is not implemented by the recipient, the transfer will be reverted.\n The selector can be obtained in Solidity with `IERC721.onERC721Received.selector`."
									},
									"functionSelector": "150b7a02",
									"id": 237,
									"implemented": false,
									"kind": "function",
									"modifiers": [],
									"name": "onERC721Received",
									"nameLocation": "810:16:2",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 233,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 226,
												"mutability": "mutable",
												"name": "operator",
												"nameLocation": "844:8:2",
												"nodeType": "VariableDeclaration",
												"scope": 237,
												"src": "836:16:2",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 225,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "836:7:2",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 228,
												"mutability": "mutable",
												"name": "from",
												"nameLocation": "870:4:2",
												"nodeType": "VariableDeclaration",
												"scope": 237,
												"src": "862:12:2",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 227,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "862:7:2",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 230,
												"mutability": "mutable",
												"name": "tokenId",
												"nameLocation": "892:7:2",
												"nodeType": "VariableDeclaration",
												"scope": 237,
												"src": "884:15:2",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 229,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "884:7:2",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 232,
												"mutability": "mutable",
												"name": "data",
												"nameLocation": "924:4:2",
												"nodeType": "VariableDeclaration",
												"scope": 237,
												"src": "909:19:2",
												"stateVariable": false,
												"storageLocation": "calldata",
												"typeDescriptions": {
													"typeIdentifier": "t_bytes_calldata_ptr",
													"typeString": "bytes"
												},
												"typeName": {
													"id": 231,
													"name": "bytes",
													"nodeType": "ElementaryTypeName",
													"src": "909:5:2",
													"typeDescriptions": {
														"typeIdentifier": "t_bytes_storage_ptr",
														"typeString": "bytes"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "826:108:2"
									},
									"returnParameters": {
										"id": 236,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 235,
												"mutability": "mutable",
												"name": "",
												"nameLocation": "-1:-1:-1",
												"nodeType": "VariableDeclaration",
												"scope": 237,
												"src": "953:6:2",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_bytes4",
													"typeString": "bytes4"
												},
												"typeName": {
													"id": 234,
													"name": "bytes4",
													"nodeType": "ElementaryTypeName",
													"src": "953:6:2",
													"typeDescriptions": {
														"typeIdentifier": "t_bytes4",
														"typeString": "bytes4"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "952:8:2"
									},
									"scope": 238,
									"src": "801:160:2",
									"stateMutability": "nonpayable",
									"virtual": false,
									"visibility": "external"
								}
							],
							"scope": 239,
							"src": "279:684:2",
							"usedErrors": []
						}
					],
					"src": "101:863:2"
				},
				"id": 2
			},
			"@openzeppelin/contracts/token/ERC721/extensions/IERC721Enumerable.sol": {
				"ast": {
					"absolutePath": "@openzeppelin/contracts/token/ERC721/extensions/IERC721Enumerable.sol",
					"exportedSymbols": {
						"IERC165": [
							945
						],
						"IERC721": [
							220
						],
						"IERC721Enumerable": [
							269
						]
					},
					"id": 270,
					"license": "MIT",
					"nodeType": "SourceUnit",
					"nodes": [
						{
							"id": 240,
							"literals": [
								"solidity",
								"^",
								"0.8",
								".0"
							],
							"nodeType": "PragmaDirective",
							"src": "129:23:3"
						},
						{
							"absolutePath": "@openzeppelin/contracts/token/ERC721/IERC721.sol",
							"file": "../IERC721.sol",
							"id": 241,
							"nameLocation": "-1:-1:-1",
							"nodeType": "ImportDirective",
							"scope": 270,
							"sourceUnit": 221,
							"src": "154:24:3",
							"symbolAliases": [],
							"unitAlias": ""
						},
						{
							"abstract": false,
							"baseContracts": [
								{
									"baseName": {
										"id": 243,
										"name": "IERC721",
										"nodeType": "IdentifierPath",
										"referencedDeclaration": 220,
										"src": "348:7:3"
									},
									"id": 244,
									"nodeType": "InheritanceSpecifier",
									"src": "348:7:3"
								}
							],
							"canonicalName": "IERC721Enumerable",
							"contractDependencies": [],
							"contractKind": "interface",
							"documentation": {
								"id": 242,
								"nodeType": "StructuredDocumentation",
								"src": "180:136:3",
								"text": " @title ERC-721 Non-Fungible Token Standard, optional enumeration extension\n @dev See https://eips.ethereum.org/EIPS/eip-721"
							},
							"fullyImplemented": false,
							"id": 269,
							"linearizedBaseContracts": [
								269,
								220,
								945
							],
							"name": "IERC721Enumerable",
							"nameLocation": "327:17:3",
							"nodeType": "ContractDefinition",
							"nodes": [
								{
									"documentation": {
										"id": 245,
										"nodeType": "StructuredDocumentation",
										"src": "362:82:3",
										"text": " @dev Returns the total amount of tokens stored by the contract."
									},
									"functionSelector": "18160ddd",
									"id": 250,
									"implemented": false,
									"kind": "function",
									"modifiers": [],
									"name": "totalSupply",
									"nameLocation": "458:11:3",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 246,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "469:2:3"
									},
									"returnParameters": {
										"id": 249,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 248,
												"mutability": "mutable",
												"name": "",
												"nameLocation": "-1:-1:-1",
												"nodeType": "VariableDeclaration",
												"scope": 250,
												"src": "495:7:3",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 247,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "495:7:3",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "494:9:3"
									},
									"scope": 269,
									"src": "449:55:3",
									"stateMutability": "view",
									"virtual": false,
									"visibility": "external"
								},
								{
									"documentation": {
										"id": 251,
										"nodeType": "StructuredDocumentation",
										"src": "510:171:3",
										"text": " @dev Returns a token ID owned by `owner` at a given `index` of its token list.\n Use along with {balanceOf} to enumerate all of ``owner``'s tokens."
									},
									"functionSelector": "2f745c59",
									"id": 260,
									"implemented": false,
									"kind": "function",
									"modifiers": [],
									"name": "tokenOfOwnerByIndex",
									"nameLocation": "695:19:3",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 256,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 253,
												"mutability": "mutable",
												"name": "owner",
												"nameLocation": "723:5:3",
												"nodeType": "VariableDeclaration",
												"scope": 260,
												"src": "715:13:3",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 252,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "715:7:3",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 255,
												"mutability": "mutable",
												"name": "index",
												"nameLocation": "738:5:3",
												"nodeType": "VariableDeclaration",
												"scope": 260,
												"src": "730:13:3",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 254,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "730:7:3",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "714:30:3"
									},
									"returnParameters": {
										"id": 259,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 258,
												"mutability": "mutable",
												"name": "",
												"nameLocation": "-1:-1:-1",
												"nodeType": "VariableDeclaration",
												"scope": 260,
												"src": "768:7:3",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 257,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "768:7:3",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "767:9:3"
									},
									"scope": 269,
									"src": "686:91:3",
									"stateMutability": "view",
									"virtual": false,
									"visibility": "external"
								},
								{
									"documentation": {
										"id": 261,
										"nodeType": "StructuredDocumentation",
										"src": "783:164:3",
										"text": " @dev Returns a token ID at a given `index` of all the tokens stored by the contract.\n Use along with {totalSupply} to enumerate all tokens."
									},
									"functionSelector": "4f6ccce7",
									"id": 268,
									"implemented": false,
									"kind": "function",
									"modifiers": [],
									"name": "tokenByIndex",
									"nameLocation": "961:12:3",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 264,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 263,
												"mutability": "mutable",
												"name": "index",
												"nameLocation": "982:5:3",
												"nodeType": "VariableDeclaration",
												"scope": 268,
												"src": "974:13:3",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 262,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "974:7:3",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "973:15:3"
									},
									"returnParameters": {
										"id": 267,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 266,
												"mutability": "mutable",
												"name": "",
												"nameLocation": "-1:-1:-1",
												"nodeType": "VariableDeclaration",
												"scope": 268,
												"src": "1012:7:3",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 265,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "1012:7:3",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "1011:9:3"
									},
									"scope": 269,
									"src": "952:69:3",
									"stateMutability": "view",
									"virtual": false,
									"visibility": "external"
								}
							],
							"scope": 270,
							"src": "317:706:3",
							"usedErrors": []
						}
					],
					"src": "129:895:3"
				},
				"id": 3
			},
			"@openzeppelin/contracts/token/ERC721/extensions/IERC721Metadata.sol": {
				"ast": {
					"absolutePath": "@openzeppelin/contracts/token/ERC721/extensions/IERC721Metadata.sol",
					"exportedSymbols": {
						"IERC165": [
							945
						],
						"IERC721": [
							220
						],
						"IERC721Metadata": [
							296
						]
					},
					"id": 297,
					"license": "MIT",
					"nodeType": "SourceUnit",
					"nodes": [
						{
							"id": 271,
							"literals": [
								"solidity",
								"^",
								"0.8",
								".0"
							],
							"nodeType": "PragmaDirective",
							"src": "112:23:4"
						},
						{
							"absolutePath": "@openzeppelin/contracts/token/ERC721/IERC721.sol",
							"file": "../IERC721.sol",
							"id": 272,
							"nameLocation": "-1:-1:-1",
							"nodeType": "ImportDirective",
							"scope": 297,
							"sourceUnit": 221,
							"src": "137:24:4",
							"symbolAliases": [],
							"unitAlias": ""
						},
						{
							"abstract": false,
							"baseContracts": [
								{
									"baseName": {
										"id": 274,
										"name": "IERC721",
										"nodeType": "IdentifierPath",
										"referencedDeclaration": 220,
										"src": "326:7:4"
									},
									"id": 275,
									"nodeType": "InheritanceSpecifier",
									"src": "326:7:4"
								}
							],
							"canonicalName": "IERC721Metadata",
							"contractDependencies": [],
							"contractKind": "interface",
							"documentation": {
								"id": 273,
								"nodeType": "StructuredDocumentation",
								"src": "163:133:4",
								"text": " @title ERC-721 Non-Fungible Token Standard, optional metadata extension\n @dev See https://eips.ethereum.org/EIPS/eip-721"
							},
							"fullyImplemented": false,
							"id": 296,
							"linearizedBaseContracts": [
								296,
								220,
								945
							],
							"name": "IERC721Metadata",
							"nameLocation": "307:15:4",
							"nodeType": "ContractDefinition",
							"nodes": [
								{
									"documentation": {
										"id": 276,
										"nodeType": "StructuredDocumentation",
										"src": "340:58:4",
										"text": " @dev Returns the token collection name."
									},
									"functionSelector": "06fdde03",
									"id": 281,
									"implemented": false,
									"kind": "function",
									"modifiers": [],
									"name": "name",
									"nameLocation": "412:4:4",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 277,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "416:2:4"
									},
									"returnParameters": {
										"id": 280,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 279,
												"mutability": "mutable",
												"name": "",
												"nameLocation": "-1:-1:-1",
												"nodeType": "VariableDeclaration",
												"scope": 281,
												"src": "442:13:4",
												"stateVariable": false,
												"storageLocation": "memory",
												"typeDescriptions": {
													"typeIdentifier": "t_string_memory_ptr",
													"typeString": "string"
												},
												"typeName": {
													"id": 278,
													"name": "string",
													"nodeType": "ElementaryTypeName",
													"src": "442:6:4",
													"typeDescriptions": {
														"typeIdentifier": "t_string_storage_ptr",
														"typeString": "string"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "441:15:4"
									},
									"scope": 296,
									"src": "403:54:4",
									"stateMutability": "view",
									"virtual": false,
									"visibility": "external"
								},
								{
									"documentation": {
										"id": 282,
										"nodeType": "StructuredDocumentation",
										"src": "463:60:4",
										"text": " @dev Returns the token collection symbol."
									},
									"functionSelector": "95d89b41",
									"id": 287,
									"implemented": false,
									"kind": "function",
									"modifiers": [],
									"name": "symbol",
									"nameLocation": "537:6:4",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 283,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "543:2:4"
									},
									"returnParameters": {
										"id": 286,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 285,
												"mutability": "mutable",
												"name": "",
												"nameLocation": "-1:-1:-1",
												"nodeType": "VariableDeclaration",
												"scope": 287,
												"src": "569:13:4",
												"stateVariable": false,
												"storageLocation": "memory",
												"typeDescriptions": {
													"typeIdentifier": "t_string_memory_ptr",
													"typeString": "string"
												},
												"typeName": {
													"id": 284,
													"name": "string",
													"nodeType": "ElementaryTypeName",
													"src": "569:6:4",
													"typeDescriptions": {
														"typeIdentifier": "t_string_storage_ptr",
														"typeString": "string"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "568:15:4"
									},
									"scope": 296,
									"src": "528:56:4",
									"stateMutability": "view",
									"virtual": false,
									"visibility": "external"
								},
								{
									"documentation": {
										"id": 288,
										"nodeType": "StructuredDocumentation",
										"src": "590:90:4",
										"text": " @dev Returns the Uniform Resource Identifier (URI) for `tokenId` token."
									},
									"functionSelector": "c87b56dd",
									"id": 295,
									"implemented": false,
									"kind": "function",
									"modifiers": [],
									"name": "tokenURI",
									"nameLocation": "694:8:4",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 291,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 290,
												"mutability": "mutable",
												"name": "tokenId",
												"nameLocation": "711:7:4",
												"nodeType": "VariableDeclaration",
												"scope": 295,
												"src": "703:15:4",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 289,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "703:7:4",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "702:17:4"
									},
									"returnParameters": {
										"id": 294,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 293,
												"mutability": "mutable",
												"name": "",
												"nameLocation": "-1:-1:-1",
												"nodeType": "VariableDeclaration",
												"scope": 295,
												"src": "743:13:4",
												"stateVariable": false,
												"storageLocation": "memory",
												"typeDescriptions": {
													"typeIdentifier": "t_string_memory_ptr",
													"typeString": "string"
												},
												"typeName": {
													"id": 292,
													"name": "string",
													"nodeType": "ElementaryTypeName",
													"src": "743:6:4",
													"typeDescriptions": {
														"typeIdentifier": "t_string_storage_ptr",
														"typeString": "string"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "742:15:4"
									},
									"scope": 296,
									"src": "685:73:4",
									"stateMutability": "view",
									"virtual": false,
									"visibility": "external"
								}
							],
							"scope": 297,
							"src": "297:463:4",
							"usedErrors": []
						}
					],
					"src": "112:649:4"
				},
				"id": 4
			},
			"@openzeppelin/contracts/utils/Address.sol": {
				"ast": {
					"absolutePath": "@openzeppelin/contracts/utils/Address.sol",
					"exportedSymbols": {
						"Address": [
							591
						]
					},
					"id": 592,
					"license": "MIT",
					"nodeType": "SourceUnit",
					"nodes": [
						{
							"id": 298,
							"literals": [
								"solidity",
								"^",
								"0.8",
								".1"
							],
							"nodeType": "PragmaDirective",
							"src": "101:23:5"
						},
						{
							"abstract": false,
							"baseContracts": [],
							"canonicalName": "Address",
							"contractDependencies": [],
							"contractKind": "library",
							"documentation": {
								"id": 299,
								"nodeType": "StructuredDocumentation",
								"src": "126:67:5",
								"text": " @dev Collection of functions related to the address type"
							},
							"fullyImplemented": true,
							"id": 591,
							"linearizedBaseContracts": [
								591
							],
							"name": "Address",
							"nameLocation": "202:7:5",
							"nodeType": "ContractDefinition",
							"nodes": [
								{
									"body": {
										"id": 313,
										"nodeType": "Block",
										"src": "1241:254:5",
										"statements": [
											{
												"expression": {
													"commonType": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													},
													"id": 311,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"lValueRequested": false,
													"leftExpression": {
														"expression": {
															"expression": {
																"id": 307,
																"name": "account",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 302,
																"src": "1465:7:5",
																"typeDescriptions": {
																	"typeIdentifier": "t_address",
																	"typeString": "address"
																}
															},
															"id": 308,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"lValueRequested": false,
															"memberName": "code",
															"nodeType": "MemberAccess",
															"src": "1465:12:5",
															"typeDescriptions": {
																"typeIdentifier": "t_bytes_memory_ptr",
																"typeString": "bytes memory"
															}
														},
														"id": 309,
														"isConstant": false,
														"isLValue": false,
														"isPure": false,
														"lValueRequested": false,
														"memberName": "length",
														"nodeType": "MemberAccess",
														"src": "1465:19:5",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														}
													},
													"nodeType": "BinaryOperation",
													"operator": ">",
													"rightExpression": {
														"hexValue": "30",
														"id": 310,
														"isConstant": false,
														"isLValue": false,
														"isPure": true,
														"kind": "number",
														"lValueRequested": false,
														"nodeType": "Literal",
														"src": "1487:1:5",
														"typeDescriptions": {
															"typeIdentifier": "t_rational_0_by_1",
															"typeString": "int_const 0"
														},
														"value": "0"
													},
													"src": "1465:23:5",
													"typeDescriptions": {
														"typeIdentifier": "t_bool",
														"typeString": "bool"
													}
												},
												"functionReturnParameters": 306,
												"id": 312,
												"nodeType": "Return",
												"src": "1458:30:5"
											}
										]
									},
									"documentation": {
										"id": 300,
										"nodeType": "StructuredDocumentation",
										"src": "216:954:5",
										"text": " @dev Returns true if `account` is a contract.\n [IMPORTANT]\n ====\n It is unsafe to assume that an address for which this function returns\n false is an externally-owned account (EOA) and not a contract.\n Among others, `isContract` will return false for the following\n types of addresses:\n  - an externally-owned account\n  - a contract in construction\n  - an address where a contract will be created\n  - an address where a contract lived, but was destroyed\n ====\n [IMPORTANT]\n ====\n You shouldn't rely on `isContract` to protect against flash loan attacks!\n Preventing calls from contracts is highly discouraged. It breaks composability, breaks support for smart wallets\n like Gnosis Safe, and does not provide security since it can be circumvented by calling from a contract\n constructor.\n ===="
									},
									"id": 314,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "isContract",
									"nameLocation": "1184:10:5",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 303,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 302,
												"mutability": "mutable",
												"name": "account",
												"nameLocation": "1203:7:5",
												"nodeType": "VariableDeclaration",
												"scope": 314,
												"src": "1195:15:5",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 301,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "1195:7:5",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "1194:17:5"
									},
									"returnParameters": {
										"id": 306,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 305,
												"mutability": "mutable",
												"name": "",
												"nameLocation": "-1:-1:-1",
												"nodeType": "VariableDeclaration",
												"scope": 314,
												"src": "1235:4:5",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_bool",
													"typeString": "bool"
												},
												"typeName": {
													"id": 304,
													"name": "bool",
													"nodeType": "ElementaryTypeName",
													"src": "1235:4:5",
													"typeDescriptions": {
														"typeIdentifier": "t_bool",
														"typeString": "bool"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "1234:6:5"
									},
									"scope": 591,
									"src": "1175:320:5",
									"stateMutability": "view",
									"virtual": false,
									"visibility": "internal"
								},
								{
									"body": {
										"id": 347,
										"nodeType": "Block",
										"src": "2483:241:5",
										"statements": [
											{
												"expression": {
													"arguments": [
														{
															"commonType": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															},
															"id": 329,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"lValueRequested": false,
															"leftExpression": {
																"expression": {
																	"arguments": [
																		{
																			"id": 325,
																			"name": "this",
																			"nodeType": "Identifier",
																			"overloadedDeclarations": [],
																			"referencedDeclaration": 4294967268,
																			"src": "2509:4:5",
																			"typeDescriptions": {
																				"typeIdentifier": "t_contract$_Address_$591",
																				"typeString": "library Address"
																			}
																		}
																	],
																	"expression": {
																		"argumentTypes": [
																			{
																				"typeIdentifier": "t_contract$_Address_$591",
																				"typeString": "library Address"
																			}
																		],
																		"id": 324,
																		"isConstant": false,
																		"isLValue": false,
																		"isPure": true,
																		"lValueRequested": false,
																		"nodeType": "ElementaryTypeNameExpression",
																		"src": "2501:7:5",
																		"typeDescriptions": {
																			"typeIdentifier": "t_type$_t_address_$",
																			"typeString": "type(address)"
																		},
																		"typeName": {
																			"id": 323,
																			"name": "address",
																			"nodeType": "ElementaryTypeName",
																			"src": "2501:7:5",
																			"typeDescriptions": {}
																		}
																	},
																	"id": 326,
																	"isConstant": false,
																	"isLValue": false,
																	"isPure": false,
																	"kind": "typeConversion",
																	"lValueRequested": false,
																	"names": [],
																	"nodeType": "FunctionCall",
																	"src": "2501:13:5",
																	"tryCall": false,
																	"typeDescriptions": {
																		"typeIdentifier": "t_address",
																		"typeString": "address"
																	}
																},
																"id": 327,
																"isConstant": false,
																"isLValue": false,
																"isPure": false,
																"lValueRequested": false,
																"memberName": "balance",
																"nodeType": "MemberAccess",
																"src": "2501:21:5",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															},
															"nodeType": "BinaryOperation",
															"operator": ">=",
															"rightExpression": {
																"id": 328,
																"name": "amount",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 319,
																"src": "2526:6:5",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															},
															"src": "2501:31:5",
															"typeDescriptions": {
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															}
														},
														{
															"hexValue": "416464726573733a20696e73756666696369656e742062616c616e6365",
															"id": 330,
															"isConstant": false,
															"isLValue": false,
															"isPure": true,
															"kind": "string",
															"lValueRequested": false,
															"nodeType": "Literal",
															"src": "2534:31:5",
															"typeDescriptions": {
																"typeIdentifier": "t_stringliteral_5597a22abd0ef5332f8053862eb236db7590f17e2b93a53f63a103becfb561f9",
																"typeString": "literal_string \"Address: insufficient balance\""
															},
															"value": "Address: insufficient balance"
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															},
															{
																"typeIdentifier": "t_stringliteral_5597a22abd0ef5332f8053862eb236db7590f17e2b93a53f63a103becfb561f9",
																"typeString": "literal_string \"Address: insufficient balance\""
															}
														],
														"id": 322,
														"name": "require",
														"nodeType": "Identifier",
														"overloadedDeclarations": [
															4294967278,
															4294967278
														],
														"referencedDeclaration": 4294967278,
														"src": "2493:7:5",
														"typeDescriptions": {
															"typeIdentifier": "t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$",
															"typeString": "function (bool,string memory) pure"
														}
													},
													"id": 331,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"names": [],
													"nodeType": "FunctionCall",
													"src": "2493:73:5",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_tuple$__$",
														"typeString": "tuple()"
													}
												},
												"id": 332,
												"nodeType": "ExpressionStatement",
												"src": "2493:73:5"
											},
											{
												"assignments": [
													334,
													null
												],
												"declarations": [
													{
														"constant": false,
														"id": 334,
														"mutability": "mutable",
														"name": "success",
														"nameLocation": "2583:7:5",
														"nodeType": "VariableDeclaration",
														"scope": 347,
														"src": "2578:12:5",
														"stateVariable": false,
														"storageLocation": "default",
														"typeDescriptions": {
															"typeIdentifier": "t_bool",
															"typeString": "bool"
														},
														"typeName": {
															"id": 333,
															"name": "bool",
															"nodeType": "ElementaryTypeName",
															"src": "2578:4:5",
															"typeDescriptions": {
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															}
														},
														"visibility": "internal"
													},
													null
												],
												"id": 341,
												"initialValue": {
													"arguments": [
														{
															"hexValue": "",
															"id": 339,
															"isConstant": false,
															"isLValue": false,
															"isPure": true,
															"kind": "string",
															"lValueRequested": false,
															"nodeType": "Literal",
															"src": "2626:2:5",
															"typeDescriptions": {
																"typeIdentifier": "t_stringliteral_c5d2460186f7233c927e7db2dcc703c0e500b653ca82273b7bfad8045d85a470",
																"typeString": "literal_string \"\""
															},
															"value": ""
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_stringliteral_c5d2460186f7233c927e7db2dcc703c0e500b653ca82273b7bfad8045d85a470",
																"typeString": "literal_string \"\""
															}
														],
														"expression": {
															"argumentTypes": [
																{
																	"typeIdentifier": "t_stringliteral_c5d2460186f7233c927e7db2dcc703c0e500b653ca82273b7bfad8045d85a470",
																	"typeString": "literal_string \"\""
																}
															],
															"expression": {
																"id": 335,
																"name": "recipient",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 317,
																"src": "2596:9:5",
																"typeDescriptions": {
																	"typeIdentifier": "t_address_payable",
																	"typeString": "address payable"
																}
															},
															"id": 336,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"lValueRequested": false,
															"memberName": "call",
															"nodeType": "MemberAccess",
															"src": "2596:14:5",
															"typeDescriptions": {
																"typeIdentifier": "t_function_barecall_payable$_t_bytes_memory_ptr_$returns$_t_bool_$_t_bytes_memory_ptr_$",
																"typeString": "function (bytes memory) payable returns (bool,bytes memory)"
															}
														},
														"id": 338,
														"isConstant": false,
														"isLValue": false,
														"isPure": false,
														"lValueRequested": false,
														"names": [
															"value"
														],
														"nodeType": "FunctionCallOptions",
														"options": [
															{
																"id": 337,
																"name": "amount",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 319,
																"src": "2618:6:5",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															}
														],
														"src": "2596:29:5",
														"typeDescriptions": {
															"typeIdentifier": "t_function_barecall_payable$_t_bytes_memory_ptr_$returns$_t_bool_$_t_bytes_memory_ptr_$value",
															"typeString": "function (bytes memory) payable returns (bool,bytes memory)"
														}
													},
													"id": 340,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"names": [],
													"nodeType": "FunctionCall",
													"src": "2596:33:5",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_tuple$_t_bool_$_t_bytes_memory_ptr_$",
														"typeString": "tuple(bool,bytes memory)"
													}
												},
												"nodeType": "VariableDeclarationStatement",
												"src": "2577:52:5"
											},
											{
												"expression": {
													"arguments": [
														{
															"id": 343,
															"name": "success",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 334,
															"src": "2647:7:5",
															"typeDescriptions": {
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															}
														},
														{
															"hexValue": "416464726573733a20756e61626c6520746f2073656e642076616c75652c20726563697069656e74206d61792068617665207265766572746564",
															"id": 344,
															"isConstant": false,
															"isLValue": false,
															"isPure": true,
															"kind": "string",
															"lValueRequested": false,
															"nodeType": "Literal",
															"src": "2656:60:5",
															"typeDescriptions": {
																"typeIdentifier": "t_stringliteral_51ddaa38748c0a1144620fb5bfe8edab31ea437571ad591a7734bbfd0429aeae",
																"typeString": "literal_string \"Address: unable to send value, recipient may have reverted\""
															},
															"value": "Address: unable to send value, recipient may have reverted"
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															},
															{
																"typeIdentifier": "t_stringliteral_51ddaa38748c0a1144620fb5bfe8edab31ea437571ad591a7734bbfd0429aeae",
																"typeString": "literal_string \"Address: unable to send value, recipient may have reverted\""
															}
														],
														"id": 342,
														"name": "require",
														"nodeType": "Identifier",
														"overloadedDeclarations": [
															4294967278,
															4294967278
														],
														"referencedDeclaration": 4294967278,
														"src": "2639:7:5",
														"typeDescriptions": {
															"typeIdentifier": "t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$",
															"typeString": "function (bool,string memory) pure"
														}
													},
													"id": 345,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"names": [],
													"nodeType": "FunctionCall",
													"src": "2639:78:5",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_tuple$__$",
														"typeString": "tuple()"
													}
												},
												"id": 346,
												"nodeType": "ExpressionStatement",
												"src": "2639:78:5"
											}
										]
									},
									"documentation": {
										"id": 315,
										"nodeType": "StructuredDocumentation",
										"src": "1501:906:5",
										"text": " @dev Replacement for Solidity's `transfer`: sends `amount` wei to\n `recipient`, forwarding all available gas and reverting on errors.\n https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\n of certain opcodes, possibly making contracts go over the 2300 gas limit\n imposed by `transfer`, making them unable to receive funds via\n `transfer`. {sendValue} removes this limitation.\n https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\n IMPORTANT: because control is transferred to `recipient`, care must be\n taken to not create reentrancy vulnerabilities. Consider using\n {ReentrancyGuard} or the\n https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern]."
									},
									"id": 348,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "sendValue",
									"nameLocation": "2421:9:5",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 320,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 317,
												"mutability": "mutable",
												"name": "recipient",
												"nameLocation": "2447:9:5",
												"nodeType": "VariableDeclaration",
												"scope": 348,
												"src": "2431:25:5",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address_payable",
													"typeString": "address payable"
												},
												"typeName": {
													"id": 316,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "2431:15:5",
													"stateMutability": "payable",
													"typeDescriptions": {
														"typeIdentifier": "t_address_payable",
														"typeString": "address payable"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 319,
												"mutability": "mutable",
												"name": "amount",
												"nameLocation": "2466:6:5",
												"nodeType": "VariableDeclaration",
												"scope": 348,
												"src": "2458:14:5",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 318,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "2458:7:5",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "2430:43:5"
									},
									"returnParameters": {
										"id": 321,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "2483:0:5"
									},
									"scope": 591,
									"src": "2412:312:5",
									"stateMutability": "nonpayable",
									"virtual": false,
									"visibility": "internal"
								},
								{
									"body": {
										"id": 364,
										"nodeType": "Block",
										"src": "3555:84:5",
										"statements": [
											{
												"expression": {
													"arguments": [
														{
															"id": 359,
															"name": "target",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 351,
															"src": "3585:6:5",
															"typeDescriptions": {
																"typeIdentifier": "t_address",
																"typeString": "address"
															}
														},
														{
															"id": 360,
															"name": "data",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 353,
															"src": "3593:4:5",
															"typeDescriptions": {
																"typeIdentifier": "t_bytes_memory_ptr",
																"typeString": "bytes memory"
															}
														},
														{
															"hexValue": "416464726573733a206c6f772d6c6576656c2063616c6c206661696c6564",
															"id": 361,
															"isConstant": false,
															"isLValue": false,
															"isPure": true,
															"kind": "string",
															"lValueRequested": false,
															"nodeType": "Literal",
															"src": "3599:32:5",
															"typeDescriptions": {
																"typeIdentifier": "t_stringliteral_24d7ab5d382116e64324f19950ca9340b8af1ddeb09a8d026e0a3c6a01dcc9df",
																"typeString": "literal_string \"Address: low-level call failed\""
															},
															"value": "Address: low-level call failed"
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_address",
																"typeString": "address"
															},
															{
																"typeIdentifier": "t_bytes_memory_ptr",
																"typeString": "bytes memory"
															},
															{
																"typeIdentifier": "t_stringliteral_24d7ab5d382116e64324f19950ca9340b8af1ddeb09a8d026e0a3c6a01dcc9df",
																"typeString": "literal_string \"Address: low-level call failed\""
															}
														],
														"id": 358,
														"name": "functionCall",
														"nodeType": "Identifier",
														"overloadedDeclarations": [
															365,
															385
														],
														"referencedDeclaration": 385,
														"src": "3572:12:5",
														"typeDescriptions": {
															"typeIdentifier": "t_function_internal_nonpayable$_t_address_$_t_bytes_memory_ptr_$_t_string_memory_ptr_$returns$_t_bytes_memory_ptr_$",
															"typeString": "function (address,bytes memory,string memory) returns (bytes memory)"
														}
													},
													"id": 362,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"names": [],
													"nodeType": "FunctionCall",
													"src": "3572:60:5",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_bytes_memory_ptr",
														"typeString": "bytes memory"
													}
												},
												"functionReturnParameters": 357,
												"id": 363,
												"nodeType": "Return",
												"src": "3565:67:5"
											}
										]
									},
									"documentation": {
										"id": 349,
										"nodeType": "StructuredDocumentation",
										"src": "2730:731:5",
										"text": " @dev Performs a Solidity function call using a low level `call`. A\n plain `call` is an unsafe replacement for a function call: use this\n function instead.\n If `target` reverts with a revert reason, it is bubbled up by this\n function (like regular Solidity function calls).\n Returns the raw returned data. To convert to the expected return value,\n use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\n Requirements:\n - `target` must be a contract.\n - calling `target` with `data` must not revert.\n _Available since v3.1._"
									},
									"id": 365,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "functionCall",
									"nameLocation": "3475:12:5",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 354,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 351,
												"mutability": "mutable",
												"name": "target",
												"nameLocation": "3496:6:5",
												"nodeType": "VariableDeclaration",
												"scope": 365,
												"src": "3488:14:5",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 350,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "3488:7:5",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 353,
												"mutability": "mutable",
												"name": "data",
												"nameLocation": "3517:4:5",
												"nodeType": "VariableDeclaration",
												"scope": 365,
												"src": "3504:17:5",
												"stateVariable": false,
												"storageLocation": "memory",
												"typeDescriptions": {
													"typeIdentifier": "t_bytes_memory_ptr",
													"typeString": "bytes"
												},
												"typeName": {
													"id": 352,
													"name": "bytes",
													"nodeType": "ElementaryTypeName",
													"src": "3504:5:5",
													"typeDescriptions": {
														"typeIdentifier": "t_bytes_storage_ptr",
														"typeString": "bytes"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "3487:35:5"
									},
									"returnParameters": {
										"id": 357,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 356,
												"mutability": "mutable",
												"name": "",
												"nameLocation": "-1:-1:-1",
												"nodeType": "VariableDeclaration",
												"scope": 365,
												"src": "3541:12:5",
												"stateVariable": false,
												"storageLocation": "memory",
												"typeDescriptions": {
													"typeIdentifier": "t_bytes_memory_ptr",
													"typeString": "bytes"
												},
												"typeName": {
													"id": 355,
													"name": "bytes",
													"nodeType": "ElementaryTypeName",
													"src": "3541:5:5",
													"typeDescriptions": {
														"typeIdentifier": "t_bytes_storage_ptr",
														"typeString": "bytes"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "3540:14:5"
									},
									"scope": 591,
									"src": "3466:173:5",
									"stateMutability": "nonpayable",
									"virtual": false,
									"visibility": "internal"
								},
								{
									"body": {
										"id": 384,
										"nodeType": "Block",
										"src": "4008:76:5",
										"statements": [
											{
												"expression": {
													"arguments": [
														{
															"id": 378,
															"name": "target",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 368,
															"src": "4047:6:5",
															"typeDescriptions": {
																"typeIdentifier": "t_address",
																"typeString": "address"
															}
														},
														{
															"id": 379,
															"name": "data",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 370,
															"src": "4055:4:5",
															"typeDescriptions": {
																"typeIdentifier": "t_bytes_memory_ptr",
																"typeString": "bytes memory"
															}
														},
														{
															"hexValue": "30",
															"id": 380,
															"isConstant": false,
															"isLValue": false,
															"isPure": true,
															"kind": "number",
															"lValueRequested": false,
															"nodeType": "Literal",
															"src": "4061:1:5",
															"typeDescriptions": {
																"typeIdentifier": "t_rational_0_by_1",
																"typeString": "int_const 0"
															},
															"value": "0"
														},
														{
															"id": 381,
															"name": "errorMessage",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 372,
															"src": "4064:12:5",
															"typeDescriptions": {
																"typeIdentifier": "t_string_memory_ptr",
																"typeString": "string memory"
															}
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_address",
																"typeString": "address"
															},
															{
																"typeIdentifier": "t_bytes_memory_ptr",
																"typeString": "bytes memory"
															},
															{
																"typeIdentifier": "t_rational_0_by_1",
																"typeString": "int_const 0"
															},
															{
																"typeIdentifier": "t_string_memory_ptr",
																"typeString": "string memory"
															}
														],
														"id": 377,
														"name": "functionCallWithValue",
														"nodeType": "Identifier",
														"overloadedDeclarations": [
															405,
															455
														],
														"referencedDeclaration": 455,
														"src": "4025:21:5",
														"typeDescriptions": {
															"typeIdentifier": "t_function_internal_nonpayable$_t_address_$_t_bytes_memory_ptr_$_t_uint256_$_t_string_memory_ptr_$returns$_t_bytes_memory_ptr_$",
															"typeString": "function (address,bytes memory,uint256,string memory) returns (bytes memory)"
														}
													},
													"id": 382,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"names": [],
													"nodeType": "FunctionCall",
													"src": "4025:52:5",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_bytes_memory_ptr",
														"typeString": "bytes memory"
													}
												},
												"functionReturnParameters": 376,
												"id": 383,
												"nodeType": "Return",
												"src": "4018:59:5"
											}
										]
									},
									"documentation": {
										"id": 366,
										"nodeType": "StructuredDocumentation",
										"src": "3645:211:5",
										"text": " @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\n `errorMessage` as a fallback revert reason when `target` reverts.\n _Available since v3.1._"
									},
									"id": 385,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "functionCall",
									"nameLocation": "3870:12:5",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 373,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 368,
												"mutability": "mutable",
												"name": "target",
												"nameLocation": "3900:6:5",
												"nodeType": "VariableDeclaration",
												"scope": 385,
												"src": "3892:14:5",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 367,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "3892:7:5",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 370,
												"mutability": "mutable",
												"name": "data",
												"nameLocation": "3929:4:5",
												"nodeType": "VariableDeclaration",
												"scope": 385,
												"src": "3916:17:5",
												"stateVariable": false,
												"storageLocation": "memory",
												"typeDescriptions": {
													"typeIdentifier": "t_bytes_memory_ptr",
													"typeString": "bytes"
												},
												"typeName": {
													"id": 369,
													"name": "bytes",
													"nodeType": "ElementaryTypeName",
													"src": "3916:5:5",
													"typeDescriptions": {
														"typeIdentifier": "t_bytes_storage_ptr",
														"typeString": "bytes"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 372,
												"mutability": "mutable",
												"name": "errorMessage",
												"nameLocation": "3957:12:5",
												"nodeType": "VariableDeclaration",
												"scope": 385,
												"src": "3943:26:5",
												"stateVariable": false,
												"storageLocation": "memory",
												"typeDescriptions": {
													"typeIdentifier": "t_string_memory_ptr",
													"typeString": "string"
												},
												"typeName": {
													"id": 371,
													"name": "string",
													"nodeType": "ElementaryTypeName",
													"src": "3943:6:5",
													"typeDescriptions": {
														"typeIdentifier": "t_string_storage_ptr",
														"typeString": "string"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "3882:93:5"
									},
									"returnParameters": {
										"id": 376,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 375,
												"mutability": "mutable",
												"name": "",
												"nameLocation": "-1:-1:-1",
												"nodeType": "VariableDeclaration",
												"scope": 385,
												"src": "3994:12:5",
												"stateVariable": false,
												"storageLocation": "memory",
												"typeDescriptions": {
													"typeIdentifier": "t_bytes_memory_ptr",
													"typeString": "bytes"
												},
												"typeName": {
													"id": 374,
													"name": "bytes",
													"nodeType": "ElementaryTypeName",
													"src": "3994:5:5",
													"typeDescriptions": {
														"typeIdentifier": "t_bytes_storage_ptr",
														"typeString": "bytes"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "3993:14:5"
									},
									"scope": 591,
									"src": "3861:223:5",
									"stateMutability": "nonpayable",
									"virtual": false,
									"visibility": "internal"
								},
								{
									"body": {
										"id": 404,
										"nodeType": "Block",
										"src": "4589:111:5",
										"statements": [
											{
												"expression": {
													"arguments": [
														{
															"id": 398,
															"name": "target",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 388,
															"src": "4628:6:5",
															"typeDescriptions": {
																"typeIdentifier": "t_address",
																"typeString": "address"
															}
														},
														{
															"id": 399,
															"name": "data",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 390,
															"src": "4636:4:5",
															"typeDescriptions": {
																"typeIdentifier": "t_bytes_memory_ptr",
																"typeString": "bytes memory"
															}
														},
														{
															"id": 400,
															"name": "value",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 392,
															"src": "4642:5:5",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														},
														{
															"hexValue": "416464726573733a206c6f772d6c6576656c2063616c6c20776974682076616c7565206661696c6564",
															"id": 401,
															"isConstant": false,
															"isLValue": false,
															"isPure": true,
															"kind": "string",
															"lValueRequested": false,
															"nodeType": "Literal",
															"src": "4649:43:5",
															"typeDescriptions": {
																"typeIdentifier": "t_stringliteral_88a4a0b5e975840320a0475d4027005235904fdb5ece94df156f3d717cb2dbfc",
																"typeString": "literal_string \"Address: low-level call with value failed\""
															},
															"value": "Address: low-level call with value failed"
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_address",
																"typeString": "address"
															},
															{
																"typeIdentifier": "t_bytes_memory_ptr",
																"typeString": "bytes memory"
															},
															{
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															},
															{
																"typeIdentifier": "t_stringliteral_88a4a0b5e975840320a0475d4027005235904fdb5ece94df156f3d717cb2dbfc",
																"typeString": "literal_string \"Address: low-level call with value failed\""
															}
														],
														"id": 397,
														"name": "functionCallWithValue",
														"nodeType": "Identifier",
														"overloadedDeclarations": [
															405,
															455
														],
														"referencedDeclaration": 455,
														"src": "4606:21:5",
														"typeDescriptions": {
															"typeIdentifier": "t_function_internal_nonpayable$_t_address_$_t_bytes_memory_ptr_$_t_uint256_$_t_string_memory_ptr_$returns$_t_bytes_memory_ptr_$",
															"typeString": "function (address,bytes memory,uint256,string memory) returns (bytes memory)"
														}
													},
													"id": 402,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"names": [],
													"nodeType": "FunctionCall",
													"src": "4606:87:5",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_bytes_memory_ptr",
														"typeString": "bytes memory"
													}
												},
												"functionReturnParameters": 396,
												"id": 403,
												"nodeType": "Return",
												"src": "4599:94:5"
											}
										]
									},
									"documentation": {
										"id": 386,
										"nodeType": "StructuredDocumentation",
										"src": "4090:351:5",
										"text": " @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\n but also transferring `value` wei to `target`.\n Requirements:\n - the calling contract must have an ETH balance of at least `value`.\n - the called Solidity function must be `payable`.\n _Available since v3.1._"
									},
									"id": 405,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "functionCallWithValue",
									"nameLocation": "4455:21:5",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 393,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 388,
												"mutability": "mutable",
												"name": "target",
												"nameLocation": "4494:6:5",
												"nodeType": "VariableDeclaration",
												"scope": 405,
												"src": "4486:14:5",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 387,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "4486:7:5",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 390,
												"mutability": "mutable",
												"name": "data",
												"nameLocation": "4523:4:5",
												"nodeType": "VariableDeclaration",
												"scope": 405,
												"src": "4510:17:5",
												"stateVariable": false,
												"storageLocation": "memory",
												"typeDescriptions": {
													"typeIdentifier": "t_bytes_memory_ptr",
													"typeString": "bytes"
												},
												"typeName": {
													"id": 389,
													"name": "bytes",
													"nodeType": "ElementaryTypeName",
													"src": "4510:5:5",
													"typeDescriptions": {
														"typeIdentifier": "t_bytes_storage_ptr",
														"typeString": "bytes"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 392,
												"mutability": "mutable",
												"name": "value",
												"nameLocation": "4545:5:5",
												"nodeType": "VariableDeclaration",
												"scope": 405,
												"src": "4537:13:5",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 391,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "4537:7:5",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "4476:80:5"
									},
									"returnParameters": {
										"id": 396,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 395,
												"mutability": "mutable",
												"name": "",
												"nameLocation": "-1:-1:-1",
												"nodeType": "VariableDeclaration",
												"scope": 405,
												"src": "4575:12:5",
												"stateVariable": false,
												"storageLocation": "memory",
												"typeDescriptions": {
													"typeIdentifier": "t_bytes_memory_ptr",
													"typeString": "bytes"
												},
												"typeName": {
													"id": 394,
													"name": "bytes",
													"nodeType": "ElementaryTypeName",
													"src": "4575:5:5",
													"typeDescriptions": {
														"typeIdentifier": "t_bytes_storage_ptr",
														"typeString": "bytes"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "4574:14:5"
									},
									"scope": 591,
									"src": "4446:254:5",
									"stateMutability": "nonpayable",
									"virtual": false,
									"visibility": "internal"
								},
								{
									"body": {
										"id": 454,
										"nodeType": "Block",
										"src": "5127:320:5",
										"statements": [
											{
												"expression": {
													"arguments": [
														{
															"commonType": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															},
															"id": 426,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"lValueRequested": false,
															"leftExpression": {
																"expression": {
																	"arguments": [
																		{
																			"id": 422,
																			"name": "this",
																			"nodeType": "Identifier",
																			"overloadedDeclarations": [],
																			"referencedDeclaration": 4294967268,
																			"src": "5153:4:5",
																			"typeDescriptions": {
																				"typeIdentifier": "t_contract$_Address_$591",
																				"typeString": "library Address"
																			}
																		}
																	],
																	"expression": {
																		"argumentTypes": [
																			{
																				"typeIdentifier": "t_contract$_Address_$591",
																				"typeString": "library Address"
																			}
																		],
																		"id": 421,
																		"isConstant": false,
																		"isLValue": false,
																		"isPure": true,
																		"lValueRequested": false,
																		"nodeType": "ElementaryTypeNameExpression",
																		"src": "5145:7:5",
																		"typeDescriptions": {
																			"typeIdentifier": "t_type$_t_address_$",
																			"typeString": "type(address)"
																		},
																		"typeName": {
																			"id": 420,
																			"name": "address",
																			"nodeType": "ElementaryTypeName",
																			"src": "5145:7:5",
																			"typeDescriptions": {}
																		}
																	},
																	"id": 423,
																	"isConstant": false,
																	"isLValue": false,
																	"isPure": false,
																	"kind": "typeConversion",
																	"lValueRequested": false,
																	"names": [],
																	"nodeType": "FunctionCall",
																	"src": "5145:13:5",
																	"tryCall": false,
																	"typeDescriptions": {
																		"typeIdentifier": "t_address",
																		"typeString": "address"
																	}
																},
																"id": 424,
																"isConstant": false,
																"isLValue": false,
																"isPure": false,
																"lValueRequested": false,
																"memberName": "balance",
																"nodeType": "MemberAccess",
																"src": "5145:21:5",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															},
															"nodeType": "BinaryOperation",
															"operator": ">=",
															"rightExpression": {
																"id": 425,
																"name": "value",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 412,
																"src": "5170:5:5",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															},
															"src": "5145:30:5",
															"typeDescriptions": {
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															}
														},
														{
															"hexValue": "416464726573733a20696e73756666696369656e742062616c616e636520666f722063616c6c",
															"id": 427,
															"isConstant": false,
															"isLValue": false,
															"isPure": true,
															"kind": "string",
															"lValueRequested": false,
															"nodeType": "Literal",
															"src": "5177:40:5",
															"typeDescriptions": {
																"typeIdentifier": "t_stringliteral_565f1a77334fc4792800921178c71e4521acffab18ff9e7885b49377ee80ab4c",
																"typeString": "literal_string \"Address: insufficient balance for call\""
															},
															"value": "Address: insufficient balance for call"
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															},
															{
																"typeIdentifier": "t_stringliteral_565f1a77334fc4792800921178c71e4521acffab18ff9e7885b49377ee80ab4c",
																"typeString": "literal_string \"Address: insufficient balance for call\""
															}
														],
														"id": 419,
														"name": "require",
														"nodeType": "Identifier",
														"overloadedDeclarations": [
															4294967278,
															4294967278
														],
														"referencedDeclaration": 4294967278,
														"src": "5137:7:5",
														"typeDescriptions": {
															"typeIdentifier": "t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$",
															"typeString": "function (bool,string memory) pure"
														}
													},
													"id": 428,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"names": [],
													"nodeType": "FunctionCall",
													"src": "5137:81:5",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_tuple$__$",
														"typeString": "tuple()"
													}
												},
												"id": 429,
												"nodeType": "ExpressionStatement",
												"src": "5137:81:5"
											},
											{
												"expression": {
													"arguments": [
														{
															"arguments": [
																{
																	"id": 432,
																	"name": "target",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 408,
																	"src": "5247:6:5",
																	"typeDescriptions": {
																		"typeIdentifier": "t_address",
																		"typeString": "address"
																	}
																}
															],
															"expression": {
																"argumentTypes": [
																	{
																		"typeIdentifier": "t_address",
																		"typeString": "address"
																	}
																],
																"id": 431,
																"name": "isContract",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 314,
																"src": "5236:10:5",
																"typeDescriptions": {
																	"typeIdentifier": "t_function_internal_view$_t_address_$returns$_t_bool_$",
																	"typeString": "function (address) view returns (bool)"
																}
															},
															"id": 433,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"kind": "functionCall",
															"lValueRequested": false,
															"names": [],
															"nodeType": "FunctionCall",
															"src": "5236:18:5",
															"tryCall": false,
															"typeDescriptions": {
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															}
														},
														{
															"hexValue": "416464726573733a2063616c6c20746f206e6f6e2d636f6e7472616374",
															"id": 434,
															"isConstant": false,
															"isLValue": false,
															"isPure": true,
															"kind": "string",
															"lValueRequested": false,
															"nodeType": "Literal",
															"src": "5256:31:5",
															"typeDescriptions": {
																"typeIdentifier": "t_stringliteral_cc2e4e38850b7c0a3e942cfed89b71c77302df25bcb2ec297a0c4ff9ff6b90ad",
																"typeString": "literal_string \"Address: call to non-contract\""
															},
															"value": "Address: call to non-contract"
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															},
															{
																"typeIdentifier": "t_stringliteral_cc2e4e38850b7c0a3e942cfed89b71c77302df25bcb2ec297a0c4ff9ff6b90ad",
																"typeString": "literal_string \"Address: call to non-contract\""
															}
														],
														"id": 430,
														"name": "require",
														"nodeType": "Identifier",
														"overloadedDeclarations": [
															4294967278,
															4294967278
														],
														"referencedDeclaration": 4294967278,
														"src": "5228:7:5",
														"typeDescriptions": {
															"typeIdentifier": "t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$",
															"typeString": "function (bool,string memory) pure"
														}
													},
													"id": 435,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"names": [],
													"nodeType": "FunctionCall",
													"src": "5228:60:5",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_tuple$__$",
														"typeString": "tuple()"
													}
												},
												"id": 436,
												"nodeType": "ExpressionStatement",
												"src": "5228:60:5"
											},
											{
												"assignments": [
													438,
													440
												],
												"declarations": [
													{
														"constant": false,
														"id": 438,
														"mutability": "mutable",
														"name": "success",
														"nameLocation": "5305:7:5",
														"nodeType": "VariableDeclaration",
														"scope": 454,
														"src": "5300:12:5",
														"stateVariable": false,
														"storageLocation": "default",
														"typeDescriptions": {
															"typeIdentifier": "t_bool",
															"typeString": "bool"
														},
														"typeName": {
															"id": 437,
															"name": "bool",
															"nodeType": "ElementaryTypeName",
															"src": "5300:4:5",
															"typeDescriptions": {
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															}
														},
														"visibility": "internal"
													},
													{
														"constant": false,
														"id": 440,
														"mutability": "mutable",
														"name": "returndata",
														"nameLocation": "5327:10:5",
														"nodeType": "VariableDeclaration",
														"scope": 454,
														"src": "5314:23:5",
														"stateVariable": false,
														"storageLocation": "memory",
														"typeDescriptions": {
															"typeIdentifier": "t_bytes_memory_ptr",
															"typeString": "bytes"
														},
														"typeName": {
															"id": 439,
															"name": "bytes",
															"nodeType": "ElementaryTypeName",
															"src": "5314:5:5",
															"typeDescriptions": {
																"typeIdentifier": "t_bytes_storage_ptr",
																"typeString": "bytes"
															}
														},
														"visibility": "internal"
													}
												],
												"id": 447,
												"initialValue": {
													"arguments": [
														{
															"id": 445,
															"name": "data",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 410,
															"src": "5367:4:5",
															"typeDescriptions": {
																"typeIdentifier": "t_bytes_memory_ptr",
																"typeString": "bytes memory"
															}
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_bytes_memory_ptr",
																"typeString": "bytes memory"
															}
														],
														"expression": {
															"argumentTypes": [
																{
																	"typeIdentifier": "t_bytes_memory_ptr",
																	"typeString": "bytes memory"
																}
															],
															"expression": {
																"id": 441,
																"name": "target",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 408,
																"src": "5341:6:5",
																"typeDescriptions": {
																	"typeIdentifier": "t_address",
																	"typeString": "address"
																}
															},
															"id": 442,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"lValueRequested": false,
															"memberName": "call",
															"nodeType": "MemberAccess",
															"src": "5341:11:5",
															"typeDescriptions": {
																"typeIdentifier": "t_function_barecall_payable$_t_bytes_memory_ptr_$returns$_t_bool_$_t_bytes_memory_ptr_$",
																"typeString": "function (bytes memory) payable returns (bool,bytes memory)"
															}
														},
														"id": 444,
														"isConstant": false,
														"isLValue": false,
														"isPure": false,
														"lValueRequested": false,
														"names": [
															"value"
														],
														"nodeType": "FunctionCallOptions",
														"options": [
															{
																"id": 443,
																"name": "value",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 412,
																"src": "5360:5:5",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															}
														],
														"src": "5341:25:5",
														"typeDescriptions": {
															"typeIdentifier": "t_function_barecall_payable$_t_bytes_memory_ptr_$returns$_t_bool_$_t_bytes_memory_ptr_$value",
															"typeString": "function (bytes memory) payable returns (bool,bytes memory)"
														}
													},
													"id": 446,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"names": [],
													"nodeType": "FunctionCall",
													"src": "5341:31:5",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_tuple$_t_bool_$_t_bytes_memory_ptr_$",
														"typeString": "tuple(bool,bytes memory)"
													}
												},
												"nodeType": "VariableDeclarationStatement",
												"src": "5299:73:5"
											},
											{
												"expression": {
													"arguments": [
														{
															"id": 449,
															"name": "success",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 438,
															"src": "5406:7:5",
															"typeDescriptions": {
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															}
														},
														{
															"id": 450,
															"name": "returndata",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 440,
															"src": "5415:10:5",
															"typeDescriptions": {
																"typeIdentifier": "t_bytes_memory_ptr",
																"typeString": "bytes memory"
															}
														},
														{
															"id": 451,
															"name": "errorMessage",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 414,
															"src": "5427:12:5",
															"typeDescriptions": {
																"typeIdentifier": "t_string_memory_ptr",
																"typeString": "string memory"
															}
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															},
															{
																"typeIdentifier": "t_bytes_memory_ptr",
																"typeString": "bytes memory"
															},
															{
																"typeIdentifier": "t_string_memory_ptr",
																"typeString": "string memory"
															}
														],
														"id": 448,
														"name": "verifyCallResult",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 590,
														"src": "5389:16:5",
														"typeDescriptions": {
															"typeIdentifier": "t_function_internal_pure$_t_bool_$_t_bytes_memory_ptr_$_t_string_memory_ptr_$returns$_t_bytes_memory_ptr_$",
															"typeString": "function (bool,bytes memory,string memory) pure returns (bytes memory)"
														}
													},
													"id": 452,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"names": [],
													"nodeType": "FunctionCall",
													"src": "5389:51:5",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_bytes_memory_ptr",
														"typeString": "bytes memory"
													}
												},
												"functionReturnParameters": 418,
												"id": 453,
												"nodeType": "Return",
												"src": "5382:58:5"
											}
										]
									},
									"documentation": {
										"id": 406,
										"nodeType": "StructuredDocumentation",
										"src": "4706:237:5",
										"text": " @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\n with `errorMessage` as a fallback revert reason when `target` reverts.\n _Available since v3.1._"
									},
									"id": 455,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "functionCallWithValue",
									"nameLocation": "4957:21:5",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 415,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 408,
												"mutability": "mutable",
												"name": "target",
												"nameLocation": "4996:6:5",
												"nodeType": "VariableDeclaration",
												"scope": 455,
												"src": "4988:14:5",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 407,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "4988:7:5",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 410,
												"mutability": "mutable",
												"name": "data",
												"nameLocation": "5025:4:5",
												"nodeType": "VariableDeclaration",
												"scope": 455,
												"src": "5012:17:5",
												"stateVariable": false,
												"storageLocation": "memory",
												"typeDescriptions": {
													"typeIdentifier": "t_bytes_memory_ptr",
													"typeString": "bytes"
												},
												"typeName": {
													"id": 409,
													"name": "bytes",
													"nodeType": "ElementaryTypeName",
													"src": "5012:5:5",
													"typeDescriptions": {
														"typeIdentifier": "t_bytes_storage_ptr",
														"typeString": "bytes"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 412,
												"mutability": "mutable",
												"name": "value",
												"nameLocation": "5047:5:5",
												"nodeType": "VariableDeclaration",
												"scope": 455,
												"src": "5039:13:5",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 411,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "5039:7:5",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 414,
												"mutability": "mutable",
												"name": "errorMessage",
												"nameLocation": "5076:12:5",
												"nodeType": "VariableDeclaration",
												"scope": 455,
												"src": "5062:26:5",
												"stateVariable": false,
												"storageLocation": "memory",
												"typeDescriptions": {
													"typeIdentifier": "t_string_memory_ptr",
													"typeString": "string"
												},
												"typeName": {
													"id": 413,
													"name": "string",
													"nodeType": "ElementaryTypeName",
													"src": "5062:6:5",
													"typeDescriptions": {
														"typeIdentifier": "t_string_storage_ptr",
														"typeString": "string"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "4978:116:5"
									},
									"returnParameters": {
										"id": 418,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 417,
												"mutability": "mutable",
												"name": "",
												"nameLocation": "-1:-1:-1",
												"nodeType": "VariableDeclaration",
												"scope": 455,
												"src": "5113:12:5",
												"stateVariable": false,
												"storageLocation": "memory",
												"typeDescriptions": {
													"typeIdentifier": "t_bytes_memory_ptr",
													"typeString": "bytes"
												},
												"typeName": {
													"id": 416,
													"name": "bytes",
													"nodeType": "ElementaryTypeName",
													"src": "5113:5:5",
													"typeDescriptions": {
														"typeIdentifier": "t_bytes_storage_ptr",
														"typeString": "bytes"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "5112:14:5"
									},
									"scope": 591,
									"src": "4948:499:5",
									"stateMutability": "nonpayable",
									"virtual": false,
									"visibility": "internal"
								},
								{
									"body": {
										"id": 471,
										"nodeType": "Block",
										"src": "5724:97:5",
										"statements": [
											{
												"expression": {
													"arguments": [
														{
															"id": 466,
															"name": "target",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 458,
															"src": "5760:6:5",
															"typeDescriptions": {
																"typeIdentifier": "t_address",
																"typeString": "address"
															}
														},
														{
															"id": 467,
															"name": "data",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 460,
															"src": "5768:4:5",
															"typeDescriptions": {
																"typeIdentifier": "t_bytes_memory_ptr",
																"typeString": "bytes memory"
															}
														},
														{
															"hexValue": "416464726573733a206c6f772d6c6576656c207374617469632063616c6c206661696c6564",
															"id": 468,
															"isConstant": false,
															"isLValue": false,
															"isPure": true,
															"kind": "string",
															"lValueRequested": false,
															"nodeType": "Literal",
															"src": "5774:39:5",
															"typeDescriptions": {
																"typeIdentifier": "t_stringliteral_90ec82aa826a536a4cbfae44ecfa384680faa9a4b77344bce96aa761ad904df0",
																"typeString": "literal_string \"Address: low-level static call failed\""
															},
															"value": "Address: low-level static call failed"
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_address",
																"typeString": "address"
															},
															{
																"typeIdentifier": "t_bytes_memory_ptr",
																"typeString": "bytes memory"
															},
															{
																"typeIdentifier": "t_stringliteral_90ec82aa826a536a4cbfae44ecfa384680faa9a4b77344bce96aa761ad904df0",
																"typeString": "literal_string \"Address: low-level static call failed\""
															}
														],
														"id": 465,
														"name": "functionStaticCall",
														"nodeType": "Identifier",
														"overloadedDeclarations": [
															472,
															507
														],
														"referencedDeclaration": 507,
														"src": "5741:18:5",
														"typeDescriptions": {
															"typeIdentifier": "t_function_internal_view$_t_address_$_t_bytes_memory_ptr_$_t_string_memory_ptr_$returns$_t_bytes_memory_ptr_$",
															"typeString": "function (address,bytes memory,string memory) view returns (bytes memory)"
														}
													},
													"id": 469,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"names": [],
													"nodeType": "FunctionCall",
													"src": "5741:73:5",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_bytes_memory_ptr",
														"typeString": "bytes memory"
													}
												},
												"functionReturnParameters": 464,
												"id": 470,
												"nodeType": "Return",
												"src": "5734:80:5"
											}
										]
									},
									"documentation": {
										"id": 456,
										"nodeType": "StructuredDocumentation",
										"src": "5453:166:5",
										"text": " @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\n but performing a static call.\n _Available since v3.3._"
									},
									"id": 472,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "functionStaticCall",
									"nameLocation": "5633:18:5",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 461,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 458,
												"mutability": "mutable",
												"name": "target",
												"nameLocation": "5660:6:5",
												"nodeType": "VariableDeclaration",
												"scope": 472,
												"src": "5652:14:5",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 457,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "5652:7:5",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 460,
												"mutability": "mutable",
												"name": "data",
												"nameLocation": "5681:4:5",
												"nodeType": "VariableDeclaration",
												"scope": 472,
												"src": "5668:17:5",
												"stateVariable": false,
												"storageLocation": "memory",
												"typeDescriptions": {
													"typeIdentifier": "t_bytes_memory_ptr",
													"typeString": "bytes"
												},
												"typeName": {
													"id": 459,
													"name": "bytes",
													"nodeType": "ElementaryTypeName",
													"src": "5668:5:5",
													"typeDescriptions": {
														"typeIdentifier": "t_bytes_storage_ptr",
														"typeString": "bytes"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "5651:35:5"
									},
									"returnParameters": {
										"id": 464,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 463,
												"mutability": "mutable",
												"name": "",
												"nameLocation": "-1:-1:-1",
												"nodeType": "VariableDeclaration",
												"scope": 472,
												"src": "5710:12:5",
												"stateVariable": false,
												"storageLocation": "memory",
												"typeDescriptions": {
													"typeIdentifier": "t_bytes_memory_ptr",
													"typeString": "bytes"
												},
												"typeName": {
													"id": 462,
													"name": "bytes",
													"nodeType": "ElementaryTypeName",
													"src": "5710:5:5",
													"typeDescriptions": {
														"typeIdentifier": "t_bytes_storage_ptr",
														"typeString": "bytes"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "5709:14:5"
									},
									"scope": 591,
									"src": "5624:197:5",
									"stateMutability": "view",
									"virtual": false,
									"visibility": "internal"
								},
								{
									"body": {
										"id": 506,
										"nodeType": "Block",
										"src": "6163:228:5",
										"statements": [
											{
												"expression": {
													"arguments": [
														{
															"arguments": [
																{
																	"id": 486,
																	"name": "target",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 475,
																	"src": "6192:6:5",
																	"typeDescriptions": {
																		"typeIdentifier": "t_address",
																		"typeString": "address"
																	}
																}
															],
															"expression": {
																"argumentTypes": [
																	{
																		"typeIdentifier": "t_address",
																		"typeString": "address"
																	}
																],
																"id": 485,
																"name": "isContract",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 314,
																"src": "6181:10:5",
																"typeDescriptions": {
																	"typeIdentifier": "t_function_internal_view$_t_address_$returns$_t_bool_$",
																	"typeString": "function (address) view returns (bool)"
																}
															},
															"id": 487,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"kind": "functionCall",
															"lValueRequested": false,
															"names": [],
															"nodeType": "FunctionCall",
															"src": "6181:18:5",
															"tryCall": false,
															"typeDescriptions": {
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															}
														},
														{
															"hexValue": "416464726573733a207374617469632063616c6c20746f206e6f6e2d636f6e7472616374",
															"id": 488,
															"isConstant": false,
															"isLValue": false,
															"isPure": true,
															"kind": "string",
															"lValueRequested": false,
															"nodeType": "Literal",
															"src": "6201:38:5",
															"typeDescriptions": {
																"typeIdentifier": "t_stringliteral_c79cc78e4f16ce3933a42b84c73868f93bb4a59c031a0acf576679de98c608a9",
																"typeString": "literal_string \"Address: static call to non-contract\""
															},
															"value": "Address: static call to non-contract"
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															},
															{
																"typeIdentifier": "t_stringliteral_c79cc78e4f16ce3933a42b84c73868f93bb4a59c031a0acf576679de98c608a9",
																"typeString": "literal_string \"Address: static call to non-contract\""
															}
														],
														"id": 484,
														"name": "require",
														"nodeType": "Identifier",
														"overloadedDeclarations": [
															4294967278,
															4294967278
														],
														"referencedDeclaration": 4294967278,
														"src": "6173:7:5",
														"typeDescriptions": {
															"typeIdentifier": "t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$",
															"typeString": "function (bool,string memory) pure"
														}
													},
													"id": 489,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"names": [],
													"nodeType": "FunctionCall",
													"src": "6173:67:5",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_tuple$__$",
														"typeString": "tuple()"
													}
												},
												"id": 490,
												"nodeType": "ExpressionStatement",
												"src": "6173:67:5"
											},
											{
												"assignments": [
													492,
													494
												],
												"declarations": [
													{
														"constant": false,
														"id": 492,
														"mutability": "mutable",
														"name": "success",
														"nameLocation": "6257:7:5",
														"nodeType": "VariableDeclaration",
														"scope": 506,
														"src": "6252:12:5",
														"stateVariable": false,
														"storageLocation": "default",
														"typeDescriptions": {
															"typeIdentifier": "t_bool",
															"typeString": "bool"
														},
														"typeName": {
															"id": 491,
															"name": "bool",
															"nodeType": "ElementaryTypeName",
															"src": "6252:4:5",
															"typeDescriptions": {
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															}
														},
														"visibility": "internal"
													},
													{
														"constant": false,
														"id": 494,
														"mutability": "mutable",
														"name": "returndata",
														"nameLocation": "6279:10:5",
														"nodeType": "VariableDeclaration",
														"scope": 506,
														"src": "6266:23:5",
														"stateVariable": false,
														"storageLocation": "memory",
														"typeDescriptions": {
															"typeIdentifier": "t_bytes_memory_ptr",
															"typeString": "bytes"
														},
														"typeName": {
															"id": 493,
															"name": "bytes",
															"nodeType": "ElementaryTypeName",
															"src": "6266:5:5",
															"typeDescriptions": {
																"typeIdentifier": "t_bytes_storage_ptr",
																"typeString": "bytes"
															}
														},
														"visibility": "internal"
													}
												],
												"id": 499,
												"initialValue": {
													"arguments": [
														{
															"id": 497,
															"name": "data",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 477,
															"src": "6311:4:5",
															"typeDescriptions": {
																"typeIdentifier": "t_bytes_memory_ptr",
																"typeString": "bytes memory"
															}
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_bytes_memory_ptr",
																"typeString": "bytes memory"
															}
														],
														"expression": {
															"id": 495,
															"name": "target",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 475,
															"src": "6293:6:5",
															"typeDescriptions": {
																"typeIdentifier": "t_address",
																"typeString": "address"
															}
														},
														"id": 496,
														"isConstant": false,
														"isLValue": false,
														"isPure": false,
														"lValueRequested": false,
														"memberName": "staticcall",
														"nodeType": "MemberAccess",
														"src": "6293:17:5",
														"typeDescriptions": {
															"typeIdentifier": "t_function_barestaticcall_view$_t_bytes_memory_ptr_$returns$_t_bool_$_t_bytes_memory_ptr_$",
															"typeString": "function (bytes memory) view returns (bool,bytes memory)"
														}
													},
													"id": 498,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"names": [],
													"nodeType": "FunctionCall",
													"src": "6293:23:5",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_tuple$_t_bool_$_t_bytes_memory_ptr_$",
														"typeString": "tuple(bool,bytes memory)"
													}
												},
												"nodeType": "VariableDeclarationStatement",
												"src": "6251:65:5"
											},
											{
												"expression": {
													"arguments": [
														{
															"id": 501,
															"name": "success",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 492,
															"src": "6350:7:5",
															"typeDescriptions": {
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															}
														},
														{
															"id": 502,
															"name": "returndata",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 494,
															"src": "6359:10:5",
															"typeDescriptions": {
																"typeIdentifier": "t_bytes_memory_ptr",
																"typeString": "bytes memory"
															}
														},
														{
															"id": 503,
															"name": "errorMessage",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 479,
															"src": "6371:12:5",
															"typeDescriptions": {
																"typeIdentifier": "t_string_memory_ptr",
																"typeString": "string memory"
															}
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															},
															{
																"typeIdentifier": "t_bytes_memory_ptr",
																"typeString": "bytes memory"
															},
															{
																"typeIdentifier": "t_string_memory_ptr",
																"typeString": "string memory"
															}
														],
														"id": 500,
														"name": "verifyCallResult",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 590,
														"src": "6333:16:5",
														"typeDescriptions": {
															"typeIdentifier": "t_function_internal_pure$_t_bool_$_t_bytes_memory_ptr_$_t_string_memory_ptr_$returns$_t_bytes_memory_ptr_$",
															"typeString": "function (bool,bytes memory,string memory) pure returns (bytes memory)"
														}
													},
													"id": 504,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"names": [],
													"nodeType": "FunctionCall",
													"src": "6333:51:5",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_bytes_memory_ptr",
														"typeString": "bytes memory"
													}
												},
												"functionReturnParameters": 483,
												"id": 505,
												"nodeType": "Return",
												"src": "6326:58:5"
											}
										]
									},
									"documentation": {
										"id": 473,
										"nodeType": "StructuredDocumentation",
										"src": "5827:173:5",
										"text": " @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\n but performing a static call.\n _Available since v3.3._"
									},
									"id": 507,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "functionStaticCall",
									"nameLocation": "6014:18:5",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 480,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 475,
												"mutability": "mutable",
												"name": "target",
												"nameLocation": "6050:6:5",
												"nodeType": "VariableDeclaration",
												"scope": 507,
												"src": "6042:14:5",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 474,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "6042:7:5",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 477,
												"mutability": "mutable",
												"name": "data",
												"nameLocation": "6079:4:5",
												"nodeType": "VariableDeclaration",
												"scope": 507,
												"src": "6066:17:5",
												"stateVariable": false,
												"storageLocation": "memory",
												"typeDescriptions": {
													"typeIdentifier": "t_bytes_memory_ptr",
													"typeString": "bytes"
												},
												"typeName": {
													"id": 476,
													"name": "bytes",
													"nodeType": "ElementaryTypeName",
													"src": "6066:5:5",
													"typeDescriptions": {
														"typeIdentifier": "t_bytes_storage_ptr",
														"typeString": "bytes"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 479,
												"mutability": "mutable",
												"name": "errorMessage",
												"nameLocation": "6107:12:5",
												"nodeType": "VariableDeclaration",
												"scope": 507,
												"src": "6093:26:5",
												"stateVariable": false,
												"storageLocation": "memory",
												"typeDescriptions": {
													"typeIdentifier": "t_string_memory_ptr",
													"typeString": "string"
												},
												"typeName": {
													"id": 478,
													"name": "string",
													"nodeType": "ElementaryTypeName",
													"src": "6093:6:5",
													"typeDescriptions": {
														"typeIdentifier": "t_string_storage_ptr",
														"typeString": "string"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "6032:93:5"
									},
									"returnParameters": {
										"id": 483,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 482,
												"mutability": "mutable",
												"name": "",
												"nameLocation": "-1:-1:-1",
												"nodeType": "VariableDeclaration",
												"scope": 507,
												"src": "6149:12:5",
												"stateVariable": false,
												"storageLocation": "memory",
												"typeDescriptions": {
													"typeIdentifier": "t_bytes_memory_ptr",
													"typeString": "bytes"
												},
												"typeName": {
													"id": 481,
													"name": "bytes",
													"nodeType": "ElementaryTypeName",
													"src": "6149:5:5",
													"typeDescriptions": {
														"typeIdentifier": "t_bytes_storage_ptr",
														"typeString": "bytes"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "6148:14:5"
									},
									"scope": 591,
									"src": "6005:386:5",
									"stateMutability": "view",
									"virtual": false,
									"visibility": "internal"
								},
								{
									"body": {
										"id": 523,
										"nodeType": "Block",
										"src": "6667:101:5",
										"statements": [
											{
												"expression": {
													"arguments": [
														{
															"id": 518,
															"name": "target",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 510,
															"src": "6705:6:5",
															"typeDescriptions": {
																"typeIdentifier": "t_address",
																"typeString": "address"
															}
														},
														{
															"id": 519,
															"name": "data",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 512,
															"src": "6713:4:5",
															"typeDescriptions": {
																"typeIdentifier": "t_bytes_memory_ptr",
																"typeString": "bytes memory"
															}
														},
														{
															"hexValue": "416464726573733a206c6f772d6c6576656c2064656c65676174652063616c6c206661696c6564",
															"id": 520,
															"isConstant": false,
															"isLValue": false,
															"isPure": true,
															"kind": "string",
															"lValueRequested": false,
															"nodeType": "Literal",
															"src": "6719:41:5",
															"typeDescriptions": {
																"typeIdentifier": "t_stringliteral_9fdcd12e4b726339b32a442b0a448365d5d85c96b2d2cff917b4f66c63110398",
																"typeString": "literal_string \"Address: low-level delegate call failed\""
															},
															"value": "Address: low-level delegate call failed"
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_address",
																"typeString": "address"
															},
															{
																"typeIdentifier": "t_bytes_memory_ptr",
																"typeString": "bytes memory"
															},
															{
																"typeIdentifier": "t_stringliteral_9fdcd12e4b726339b32a442b0a448365d5d85c96b2d2cff917b4f66c63110398",
																"typeString": "literal_string \"Address: low-level delegate call failed\""
															}
														],
														"id": 517,
														"name": "functionDelegateCall",
														"nodeType": "Identifier",
														"overloadedDeclarations": [
															524,
															559
														],
														"referencedDeclaration": 559,
														"src": "6684:20:5",
														"typeDescriptions": {
															"typeIdentifier": "t_function_internal_nonpayable$_t_address_$_t_bytes_memory_ptr_$_t_string_memory_ptr_$returns$_t_bytes_memory_ptr_$",
															"typeString": "function (address,bytes memory,string memory) returns (bytes memory)"
														}
													},
													"id": 521,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"names": [],
													"nodeType": "FunctionCall",
													"src": "6684:77:5",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_bytes_memory_ptr",
														"typeString": "bytes memory"
													}
												},
												"functionReturnParameters": 516,
												"id": 522,
												"nodeType": "Return",
												"src": "6677:84:5"
											}
										]
									},
									"documentation": {
										"id": 508,
										"nodeType": "StructuredDocumentation",
										"src": "6397:168:5",
										"text": " @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\n but performing a delegate call.\n _Available since v3.4._"
									},
									"id": 524,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "functionDelegateCall",
									"nameLocation": "6579:20:5",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 513,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 510,
												"mutability": "mutable",
												"name": "target",
												"nameLocation": "6608:6:5",
												"nodeType": "VariableDeclaration",
												"scope": 524,
												"src": "6600:14:5",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 509,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "6600:7:5",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 512,
												"mutability": "mutable",
												"name": "data",
												"nameLocation": "6629:4:5",
												"nodeType": "VariableDeclaration",
												"scope": 524,
												"src": "6616:17:5",
												"stateVariable": false,
												"storageLocation": "memory",
												"typeDescriptions": {
													"typeIdentifier": "t_bytes_memory_ptr",
													"typeString": "bytes"
												},
												"typeName": {
													"id": 511,
													"name": "bytes",
													"nodeType": "ElementaryTypeName",
													"src": "6616:5:5",
													"typeDescriptions": {
														"typeIdentifier": "t_bytes_storage_ptr",
														"typeString": "bytes"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "6599:35:5"
									},
									"returnParameters": {
										"id": 516,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 515,
												"mutability": "mutable",
												"name": "",
												"nameLocation": "-1:-1:-1",
												"nodeType": "VariableDeclaration",
												"scope": 524,
												"src": "6653:12:5",
												"stateVariable": false,
												"storageLocation": "memory",
												"typeDescriptions": {
													"typeIdentifier": "t_bytes_memory_ptr",
													"typeString": "bytes"
												},
												"typeName": {
													"id": 514,
													"name": "bytes",
													"nodeType": "ElementaryTypeName",
													"src": "6653:5:5",
													"typeDescriptions": {
														"typeIdentifier": "t_bytes_storage_ptr",
														"typeString": "bytes"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "6652:14:5"
									},
									"scope": 591,
									"src": "6570:198:5",
									"stateMutability": "nonpayable",
									"virtual": false,
									"visibility": "internal"
								},
								{
									"body": {
										"id": 558,
										"nodeType": "Block",
										"src": "7109:232:5",
										"statements": [
											{
												"expression": {
													"arguments": [
														{
															"arguments": [
																{
																	"id": 538,
																	"name": "target",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 527,
																	"src": "7138:6:5",
																	"typeDescriptions": {
																		"typeIdentifier": "t_address",
																		"typeString": "address"
																	}
																}
															],
															"expression": {
																"argumentTypes": [
																	{
																		"typeIdentifier": "t_address",
																		"typeString": "address"
																	}
																],
																"id": 537,
																"name": "isContract",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 314,
																"src": "7127:10:5",
																"typeDescriptions": {
																	"typeIdentifier": "t_function_internal_view$_t_address_$returns$_t_bool_$",
																	"typeString": "function (address) view returns (bool)"
																}
															},
															"id": 539,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"kind": "functionCall",
															"lValueRequested": false,
															"names": [],
															"nodeType": "FunctionCall",
															"src": "7127:18:5",
															"tryCall": false,
															"typeDescriptions": {
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															}
														},
														{
															"hexValue": "416464726573733a2064656c65676174652063616c6c20746f206e6f6e2d636f6e7472616374",
															"id": 540,
															"isConstant": false,
															"isLValue": false,
															"isPure": true,
															"kind": "string",
															"lValueRequested": false,
															"nodeType": "Literal",
															"src": "7147:40:5",
															"typeDescriptions": {
																"typeIdentifier": "t_stringliteral_b94ded0918034cf8f896e19fa3cfdef1188cd569c577264a3622e49152f88520",
																"typeString": "literal_string \"Address: delegate call to non-contract\""
															},
															"value": "Address: delegate call to non-contract"
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															},
															{
																"typeIdentifier": "t_stringliteral_b94ded0918034cf8f896e19fa3cfdef1188cd569c577264a3622e49152f88520",
																"typeString": "literal_string \"Address: delegate call to non-contract\""
															}
														],
														"id": 536,
														"name": "require",
														"nodeType": "Identifier",
														"overloadedDeclarations": [
															4294967278,
															4294967278
														],
														"referencedDeclaration": 4294967278,
														"src": "7119:7:5",
														"typeDescriptions": {
															"typeIdentifier": "t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$",
															"typeString": "function (bool,string memory) pure"
														}
													},
													"id": 541,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"names": [],
													"nodeType": "FunctionCall",
													"src": "7119:69:5",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_tuple$__$",
														"typeString": "tuple()"
													}
												},
												"id": 542,
												"nodeType": "ExpressionStatement",
												"src": "7119:69:5"
											},
											{
												"assignments": [
													544,
													546
												],
												"declarations": [
													{
														"constant": false,
														"id": 544,
														"mutability": "mutable",
														"name": "success",
														"nameLocation": "7205:7:5",
														"nodeType": "VariableDeclaration",
														"scope": 558,
														"src": "7200:12:5",
														"stateVariable": false,
														"storageLocation": "default",
														"typeDescriptions": {
															"typeIdentifier": "t_bool",
															"typeString": "bool"
														},
														"typeName": {
															"id": 543,
															"name": "bool",
															"nodeType": "ElementaryTypeName",
															"src": "7200:4:5",
															"typeDescriptions": {
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															}
														},
														"visibility": "internal"
													},
													{
														"constant": false,
														"id": 546,
														"mutability": "mutable",
														"name": "returndata",
														"nameLocation": "7227:10:5",
														"nodeType": "VariableDeclaration",
														"scope": 558,
														"src": "7214:23:5",
														"stateVariable": false,
														"storageLocation": "memory",
														"typeDescriptions": {
															"typeIdentifier": "t_bytes_memory_ptr",
															"typeString": "bytes"
														},
														"typeName": {
															"id": 545,
															"name": "bytes",
															"nodeType": "ElementaryTypeName",
															"src": "7214:5:5",
															"typeDescriptions": {
																"typeIdentifier": "t_bytes_storage_ptr",
																"typeString": "bytes"
															}
														},
														"visibility": "internal"
													}
												],
												"id": 551,
												"initialValue": {
													"arguments": [
														{
															"id": 549,
															"name": "data",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 529,
															"src": "7261:4:5",
															"typeDescriptions": {
																"typeIdentifier": "t_bytes_memory_ptr",
																"typeString": "bytes memory"
															}
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_bytes_memory_ptr",
																"typeString": "bytes memory"
															}
														],
														"expression": {
															"id": 547,
															"name": "target",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 527,
															"src": "7241:6:5",
															"typeDescriptions": {
																"typeIdentifier": "t_address",
																"typeString": "address"
															}
														},
														"id": 548,
														"isConstant": false,
														"isLValue": false,
														"isPure": false,
														"lValueRequested": false,
														"memberName": "delegatecall",
														"nodeType": "MemberAccess",
														"src": "7241:19:5",
														"typeDescriptions": {
															"typeIdentifier": "t_function_baredelegatecall_nonpayable$_t_bytes_memory_ptr_$returns$_t_bool_$_t_bytes_memory_ptr_$",
															"typeString": "function (bytes memory) returns (bool,bytes memory)"
														}
													},
													"id": 550,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"names": [],
													"nodeType": "FunctionCall",
													"src": "7241:25:5",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_tuple$_t_bool_$_t_bytes_memory_ptr_$",
														"typeString": "tuple(bool,bytes memory)"
													}
												},
												"nodeType": "VariableDeclarationStatement",
												"src": "7199:67:5"
											},
											{
												"expression": {
													"arguments": [
														{
															"id": 553,
															"name": "success",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 544,
															"src": "7300:7:5",
															"typeDescriptions": {
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															}
														},
														{
															"id": 554,
															"name": "returndata",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 546,
															"src": "7309:10:5",
															"typeDescriptions": {
																"typeIdentifier": "t_bytes_memory_ptr",
																"typeString": "bytes memory"
															}
														},
														{
															"id": 555,
															"name": "errorMessage",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 531,
															"src": "7321:12:5",
															"typeDescriptions": {
																"typeIdentifier": "t_string_memory_ptr",
																"typeString": "string memory"
															}
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															},
															{
																"typeIdentifier": "t_bytes_memory_ptr",
																"typeString": "bytes memory"
															},
															{
																"typeIdentifier": "t_string_memory_ptr",
																"typeString": "string memory"
															}
														],
														"id": 552,
														"name": "verifyCallResult",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 590,
														"src": "7283:16:5",
														"typeDescriptions": {
															"typeIdentifier": "t_function_internal_pure$_t_bool_$_t_bytes_memory_ptr_$_t_string_memory_ptr_$returns$_t_bytes_memory_ptr_$",
															"typeString": "function (bool,bytes memory,string memory) pure returns (bytes memory)"
														}
													},
													"id": 556,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"names": [],
													"nodeType": "FunctionCall",
													"src": "7283:51:5",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_bytes_memory_ptr",
														"typeString": "bytes memory"
													}
												},
												"functionReturnParameters": 535,
												"id": 557,
												"nodeType": "Return",
												"src": "7276:58:5"
											}
										]
									},
									"documentation": {
										"id": 525,
										"nodeType": "StructuredDocumentation",
										"src": "6774:175:5",
										"text": " @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\n but performing a delegate call.\n _Available since v3.4._"
									},
									"id": 559,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "functionDelegateCall",
									"nameLocation": "6963:20:5",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 532,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 527,
												"mutability": "mutable",
												"name": "target",
												"nameLocation": "7001:6:5",
												"nodeType": "VariableDeclaration",
												"scope": 559,
												"src": "6993:14:5",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 526,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "6993:7:5",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 529,
												"mutability": "mutable",
												"name": "data",
												"nameLocation": "7030:4:5",
												"nodeType": "VariableDeclaration",
												"scope": 559,
												"src": "7017:17:5",
												"stateVariable": false,
												"storageLocation": "memory",
												"typeDescriptions": {
													"typeIdentifier": "t_bytes_memory_ptr",
													"typeString": "bytes"
												},
												"typeName": {
													"id": 528,
													"name": "bytes",
													"nodeType": "ElementaryTypeName",
													"src": "7017:5:5",
													"typeDescriptions": {
														"typeIdentifier": "t_bytes_storage_ptr",
														"typeString": "bytes"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 531,
												"mutability": "mutable",
												"name": "errorMessage",
												"nameLocation": "7058:12:5",
												"nodeType": "VariableDeclaration",
												"scope": 559,
												"src": "7044:26:5",
												"stateVariable": false,
												"storageLocation": "memory",
												"typeDescriptions": {
													"typeIdentifier": "t_string_memory_ptr",
													"typeString": "string"
												},
												"typeName": {
													"id": 530,
													"name": "string",
													"nodeType": "ElementaryTypeName",
													"src": "7044:6:5",
													"typeDescriptions": {
														"typeIdentifier": "t_string_storage_ptr",
														"typeString": "string"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "6983:93:5"
									},
									"returnParameters": {
										"id": 535,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 534,
												"mutability": "mutable",
												"name": "",
												"nameLocation": "-1:-1:-1",
												"nodeType": "VariableDeclaration",
												"scope": 559,
												"src": "7095:12:5",
												"stateVariable": false,
												"storageLocation": "memory",
												"typeDescriptions": {
													"typeIdentifier": "t_bytes_memory_ptr",
													"typeString": "bytes"
												},
												"typeName": {
													"id": 533,
													"name": "bytes",
													"nodeType": "ElementaryTypeName",
													"src": "7095:5:5",
													"typeDescriptions": {
														"typeIdentifier": "t_bytes_storage_ptr",
														"typeString": "bytes"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "7094:14:5"
									},
									"scope": 591,
									"src": "6954:387:5",
									"stateMutability": "nonpayable",
									"virtual": false,
									"visibility": "internal"
								},
								{
									"body": {
										"id": 589,
										"nodeType": "Block",
										"src": "7721:532:5",
										"statements": [
											{
												"condition": {
													"id": 571,
													"name": "success",
													"nodeType": "Identifier",
													"overloadedDeclarations": [],
													"referencedDeclaration": 562,
													"src": "7735:7:5",
													"typeDescriptions": {
														"typeIdentifier": "t_bool",
														"typeString": "bool"
													}
												},
												"falseBody": {
													"id": 587,
													"nodeType": "Block",
													"src": "7792:455:5",
													"statements": [
														{
															"condition": {
																"commonType": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																},
																"id": 578,
																"isConstant": false,
																"isLValue": false,
																"isPure": false,
																"lValueRequested": false,
																"leftExpression": {
																	"expression": {
																		"id": 575,
																		"name": "returndata",
																		"nodeType": "Identifier",
																		"overloadedDeclarations": [],
																		"referencedDeclaration": 564,
																		"src": "7876:10:5",
																		"typeDescriptions": {
																			"typeIdentifier": "t_bytes_memory_ptr",
																			"typeString": "bytes memory"
																		}
																	},
																	"id": 576,
																	"isConstant": false,
																	"isLValue": false,
																	"isPure": false,
																	"lValueRequested": false,
																	"memberName": "length",
																	"nodeType": "MemberAccess",
																	"src": "7876:17:5",
																	"typeDescriptions": {
																		"typeIdentifier": "t_uint256",
																		"typeString": "uint256"
																	}
																},
																"nodeType": "BinaryOperation",
																"operator": ">",
																"rightExpression": {
																	"hexValue": "30",
																	"id": 577,
																	"isConstant": false,
																	"isLValue": false,
																	"isPure": true,
																	"kind": "number",
																	"lValueRequested": false,
																	"nodeType": "Literal",
																	"src": "7896:1:5",
																	"typeDescriptions": {
																		"typeIdentifier": "t_rational_0_by_1",
																		"typeString": "int_const 0"
																	},
																	"value": "0"
																},
																"src": "7876:21:5",
																"typeDescriptions": {
																	"typeIdentifier": "t_bool",
																	"typeString": "bool"
																}
															},
															"falseBody": {
																"id": 585,
																"nodeType": "Block",
																"src": "8184:53:5",
																"statements": [
																	{
																		"expression": {
																			"arguments": [
																				{
																					"id": 582,
																					"name": "errorMessage",
																					"nodeType": "Identifier",
																					"overloadedDeclarations": [],
																					"referencedDeclaration": 566,
																					"src": "8209:12:5",
																					"typeDescriptions": {
																						"typeIdentifier": "t_string_memory_ptr",
																						"typeString": "string memory"
																					}
																				}
																			],
																			"expression": {
																				"argumentTypes": [
																					{
																						"typeIdentifier": "t_string_memory_ptr",
																						"typeString": "string memory"
																					}
																				],
																				"id": 581,
																				"name": "revert",
																				"nodeType": "Identifier",
																				"overloadedDeclarations": [
																					4294967277,
																					4294967277
																				],
																				"referencedDeclaration": 4294967277,
																				"src": "8202:6:5",
																				"typeDescriptions": {
																					"typeIdentifier": "t_function_revert_pure$_t_string_memory_ptr_$returns$__$",
																					"typeString": "function (string memory) pure"
																				}
																			},
																			"id": 583,
																			"isConstant": false,
																			"isLValue": false,
																			"isPure": false,
																			"kind": "functionCall",
																			"lValueRequested": false,
																			"names": [],
																			"nodeType": "FunctionCall",
																			"src": "8202:20:5",
																			"tryCall": false,
																			"typeDescriptions": {
																				"typeIdentifier": "t_tuple$__$",
																				"typeString": "tuple()"
																			}
																		},
																		"id": 584,
																		"nodeType": "ExpressionStatement",
																		"src": "8202:20:5"
																	}
																]
															},
															"id": 586,
															"nodeType": "IfStatement",
															"src": "7872:365:5",
															"trueBody": {
																"id": 580,
																"nodeType": "Block",
																"src": "7899:279:5",
																"statements": [
																	{
																		"AST": {
																			"nodeType": "YulBlock",
																			"src": "8019:145:5",
																			"statements": [
																				{
																					"nodeType": "YulVariableDeclaration",
																					"src": "8041:40:5",
																					"value": {
																						"arguments": [
																							{
																								"name": "returndata",
																								"nodeType": "YulIdentifier",
																								"src": "8070:10:5"
																							}
																						],
																						"functionName": {
																							"name": "mload",
																							"nodeType": "YulIdentifier",
																							"src": "8064:5:5"
																						},
																						"nodeType": "YulFunctionCall",
																						"src": "8064:17:5"
																					},
																					"variables": [
																						{
																							"name": "returndata_size",
																							"nodeType": "YulTypedName",
																							"src": "8045:15:5",
																							"type": ""
																						}
																					]
																				},
																				{
																					"expression": {
																						"arguments": [
																							{
																								"arguments": [
																									{
																										"kind": "number",
																										"nodeType": "YulLiteral",
																										"src": "8113:2:5",
																										"type": "",
																										"value": "32"
																									},
																									{
																										"name": "returndata",
																										"nodeType": "YulIdentifier",
																										"src": "8117:10:5"
																									}
																								],
																								"functionName": {
																									"name": "add",
																									"nodeType": "YulIdentifier",
																									"src": "8109:3:5"
																								},
																								"nodeType": "YulFunctionCall",
																								"src": "8109:19:5"
																							},
																							{
																								"name": "returndata_size",
																								"nodeType": "YulIdentifier",
																								"src": "8130:15:5"
																							}
																						],
																						"functionName": {
																							"name": "revert",
																							"nodeType": "YulIdentifier",
																							"src": "8102:6:5"
																						},
																						"nodeType": "YulFunctionCall",
																						"src": "8102:44:5"
																					},
																					"nodeType": "YulExpressionStatement",
																					"src": "8102:44:5"
																				}
																			]
																		},
																		"evmVersion": "london",
																		"externalReferences": [
																			{
																				"declaration": 564,
																				"isOffset": false,
																				"isSlot": false,
																				"src": "8070:10:5",
																				"valueSize": 1
																			},
																			{
																				"declaration": 564,
																				"isOffset": false,
																				"isSlot": false,
																				"src": "8117:10:5",
																				"valueSize": 1
																			}
																		],
																		"id": 579,
																		"nodeType": "InlineAssembly",
																		"src": "8010:154:5"
																	}
																]
															}
														}
													]
												},
												"id": 588,
												"nodeType": "IfStatement",
												"src": "7731:516:5",
												"trueBody": {
													"id": 574,
													"nodeType": "Block",
													"src": "7744:42:5",
													"statements": [
														{
															"expression": {
																"id": 572,
																"name": "returndata",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 564,
																"src": "7765:10:5",
																"typeDescriptions": {
																	"typeIdentifier": "t_bytes_memory_ptr",
																	"typeString": "bytes memory"
																}
															},
															"functionReturnParameters": 570,
															"id": 573,
															"nodeType": "Return",
															"src": "7758:17:5"
														}
													]
												}
											}
										]
									},
									"documentation": {
										"id": 560,
										"nodeType": "StructuredDocumentation",
										"src": "7347:209:5",
										"text": " @dev Tool to verifies that a low level call was successful, and revert if it wasn't, either by bubbling the\n revert reason using the provided one.\n _Available since v4.3._"
									},
									"id": 590,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "verifyCallResult",
									"nameLocation": "7570:16:5",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 567,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 562,
												"mutability": "mutable",
												"name": "success",
												"nameLocation": "7601:7:5",
												"nodeType": "VariableDeclaration",
												"scope": 590,
												"src": "7596:12:5",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_bool",
													"typeString": "bool"
												},
												"typeName": {
													"id": 561,
													"name": "bool",
													"nodeType": "ElementaryTypeName",
													"src": "7596:4:5",
													"typeDescriptions": {
														"typeIdentifier": "t_bool",
														"typeString": "bool"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 564,
												"mutability": "mutable",
												"name": "returndata",
												"nameLocation": "7631:10:5",
												"nodeType": "VariableDeclaration",
												"scope": 590,
												"src": "7618:23:5",
												"stateVariable": false,
												"storageLocation": "memory",
												"typeDescriptions": {
													"typeIdentifier": "t_bytes_memory_ptr",
													"typeString": "bytes"
												},
												"typeName": {
													"id": 563,
													"name": "bytes",
													"nodeType": "ElementaryTypeName",
													"src": "7618:5:5",
													"typeDescriptions": {
														"typeIdentifier": "t_bytes_storage_ptr",
														"typeString": "bytes"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 566,
												"mutability": "mutable",
												"name": "errorMessage",
												"nameLocation": "7665:12:5",
												"nodeType": "VariableDeclaration",
												"scope": 590,
												"src": "7651:26:5",
												"stateVariable": false,
												"storageLocation": "memory",
												"typeDescriptions": {
													"typeIdentifier": "t_string_memory_ptr",
													"typeString": "string"
												},
												"typeName": {
													"id": 565,
													"name": "string",
													"nodeType": "ElementaryTypeName",
													"src": "7651:6:5",
													"typeDescriptions": {
														"typeIdentifier": "t_string_storage_ptr",
														"typeString": "string"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "7586:97:5"
									},
									"returnParameters": {
										"id": 570,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 569,
												"mutability": "mutable",
												"name": "",
												"nameLocation": "-1:-1:-1",
												"nodeType": "VariableDeclaration",
												"scope": 590,
												"src": "7707:12:5",
												"stateVariable": false,
												"storageLocation": "memory",
												"typeDescriptions": {
													"typeIdentifier": "t_bytes_memory_ptr",
													"typeString": "bytes"
												},
												"typeName": {
													"id": 568,
													"name": "bytes",
													"nodeType": "ElementaryTypeName",
													"src": "7707:5:5",
													"typeDescriptions": {
														"typeIdentifier": "t_bytes_storage_ptr",
														"typeString": "bytes"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "7706:14:5"
									},
									"scope": 591,
									"src": "7561:692:5",
									"stateMutability": "pure",
									"virtual": false,
									"visibility": "internal"
								}
							],
							"scope": 592,
							"src": "194:8061:5",
							"usedErrors": []
						}
					],
					"src": "101:8155:5"
				},
				"id": 5
			},
			"@openzeppelin/contracts/utils/Context.sol": {
				"ast": {
					"absolutePath": "@openzeppelin/contracts/utils/Context.sol",
					"exportedSymbols": {
						"Context": [
							613
						]
					},
					"id": 614,
					"license": "MIT",
					"nodeType": "SourceUnit",
					"nodes": [
						{
							"id": 593,
							"literals": [
								"solidity",
								"^",
								"0.8",
								".0"
							],
							"nodeType": "PragmaDirective",
							"src": "86:23:6"
						},
						{
							"abstract": true,
							"baseContracts": [],
							"canonicalName": "Context",
							"contractDependencies": [],
							"contractKind": "contract",
							"documentation": {
								"id": 594,
								"nodeType": "StructuredDocumentation",
								"src": "111:496:6",
								"text": " @dev Provides information about the current execution context, including the\n sender of the transaction and its data. While these are generally available\n via msg.sender and msg.data, they should not be accessed in such a direct\n manner, since when dealing with meta-transactions the account sending and\n paying for execution may not be the actual sender (as far as an application\n is concerned).\n This contract is only required for intermediate, library-like contracts."
							},
							"fullyImplemented": true,
							"id": 613,
							"linearizedBaseContracts": [
								613
							],
							"name": "Context",
							"nameLocation": "626:7:6",
							"nodeType": "ContractDefinition",
							"nodes": [
								{
									"body": {
										"id": 602,
										"nodeType": "Block",
										"src": "702:34:6",
										"statements": [
											{
												"expression": {
													"expression": {
														"id": 599,
														"name": "msg",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 4294967281,
														"src": "719:3:6",
														"typeDescriptions": {
															"typeIdentifier": "t_magic_message",
															"typeString": "msg"
														}
													},
													"id": 600,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"lValueRequested": false,
													"memberName": "sender",
													"nodeType": "MemberAccess",
													"src": "719:10:6",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"functionReturnParameters": 598,
												"id": 601,
												"nodeType": "Return",
												"src": "712:17:6"
											}
										]
									},
									"id": 603,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "_msgSender",
									"nameLocation": "649:10:6",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 595,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "659:2:6"
									},
									"returnParameters": {
										"id": 598,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 597,
												"mutability": "mutable",
												"name": "",
												"nameLocation": "-1:-1:-1",
												"nodeType": "VariableDeclaration",
												"scope": 603,
												"src": "693:7:6",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 596,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "693:7:6",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "692:9:6"
									},
									"scope": 613,
									"src": "640:96:6",
									"stateMutability": "view",
									"virtual": true,
									"visibility": "internal"
								},
								{
									"body": {
										"id": 611,
										"nodeType": "Block",
										"src": "809:32:6",
										"statements": [
											{
												"expression": {
													"expression": {
														"id": 608,
														"name": "msg",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 4294967281,
														"src": "826:3:6",
														"typeDescriptions": {
															"typeIdentifier": "t_magic_message",
															"typeString": "msg"
														}
													},
													"id": 609,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"lValueRequested": false,
													"memberName": "data",
													"nodeType": "MemberAccess",
													"src": "826:8:6",
													"typeDescriptions": {
														"typeIdentifier": "t_bytes_calldata_ptr",
														"typeString": "bytes calldata"
													}
												},
												"functionReturnParameters": 607,
												"id": 610,
												"nodeType": "Return",
												"src": "819:15:6"
											}
										]
									},
									"id": 612,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "_msgData",
									"nameLocation": "751:8:6",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 604,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "759:2:6"
									},
									"returnParameters": {
										"id": 607,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 606,
												"mutability": "mutable",
												"name": "",
												"nameLocation": "-1:-1:-1",
												"nodeType": "VariableDeclaration",
												"scope": 612,
												"src": "793:14:6",
												"stateVariable": false,
												"storageLocation": "calldata",
												"typeDescriptions": {
													"typeIdentifier": "t_bytes_calldata_ptr",
													"typeString": "bytes"
												},
												"typeName": {
													"id": 605,
													"name": "bytes",
													"nodeType": "ElementaryTypeName",
													"src": "793:5:6",
													"typeDescriptions": {
														"typeIdentifier": "t_bytes_storage_ptr",
														"typeString": "bytes"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "792:16:6"
									},
									"scope": 613,
									"src": "742:99:6",
									"stateMutability": "view",
									"virtual": true,
									"visibility": "internal"
								}
							],
							"scope": 614,
							"src": "608:235:6",
							"usedErrors": []
						}
					],
					"src": "86:758:6"
				},
				"id": 6
			},
			"@openzeppelin/contracts/utils/Strings.sol": {
				"ast": {
					"absolutePath": "@openzeppelin/contracts/utils/Strings.sol",
					"exportedSymbols": {
						"Strings": [
							816
						]
					},
					"id": 817,
					"license": "MIT",
					"nodeType": "SourceUnit",
					"nodes": [
						{
							"id": 615,
							"literals": [
								"solidity",
								"^",
								"0.8",
								".0"
							],
							"nodeType": "PragmaDirective",
							"src": "86:23:7"
						},
						{
							"abstract": false,
							"baseContracts": [],
							"canonicalName": "Strings",
							"contractDependencies": [],
							"contractKind": "library",
							"documentation": {
								"id": 616,
								"nodeType": "StructuredDocumentation",
								"src": "111:34:7",
								"text": " @dev String operations."
							},
							"fullyImplemented": true,
							"id": 816,
							"linearizedBaseContracts": [
								816
							],
							"name": "Strings",
							"nameLocation": "154:7:7",
							"nodeType": "ContractDefinition",
							"nodes": [
								{
									"constant": true,
									"id": 619,
									"mutability": "constant",
									"name": "_HEX_SYMBOLS",
									"nameLocation": "193:12:7",
									"nodeType": "VariableDeclaration",
									"scope": 816,
									"src": "168:58:7",
									"stateVariable": true,
									"storageLocation": "default",
									"typeDescriptions": {
										"typeIdentifier": "t_bytes16",
										"typeString": "bytes16"
									},
									"typeName": {
										"id": 617,
										"name": "bytes16",
										"nodeType": "ElementaryTypeName",
										"src": "168:7:7",
										"typeDescriptions": {
											"typeIdentifier": "t_bytes16",
											"typeString": "bytes16"
										}
									},
									"value": {
										"hexValue": "30313233343536373839616263646566",
										"id": 618,
										"isConstant": false,
										"isLValue": false,
										"isPure": true,
										"kind": "string",
										"lValueRequested": false,
										"nodeType": "Literal",
										"src": "208:18:7",
										"typeDescriptions": {
											"typeIdentifier": "t_stringliteral_cb29997ed99ead0db59ce4d12b7d3723198c827273e5796737c926d78019c39f",
											"typeString": "literal_string \"0123456789abcdef\""
										},
										"value": "0123456789abcdef"
									},
									"visibility": "private"
								},
								{
									"body": {
										"id": 697,
										"nodeType": "Block",
										"src": "399:632:7",
										"statements": [
											{
												"condition": {
													"commonType": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													},
													"id": 629,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"lValueRequested": false,
													"leftExpression": {
														"id": 627,
														"name": "value",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 622,
														"src": "601:5:7",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														}
													},
													"nodeType": "BinaryOperation",
													"operator": "==",
													"rightExpression": {
														"hexValue": "30",
														"id": 628,
														"isConstant": false,
														"isLValue": false,
														"isPure": true,
														"kind": "number",
														"lValueRequested": false,
														"nodeType": "Literal",
														"src": "610:1:7",
														"typeDescriptions": {
															"typeIdentifier": "t_rational_0_by_1",
															"typeString": "int_const 0"
														},
														"value": "0"
													},
													"src": "601:10:7",
													"typeDescriptions": {
														"typeIdentifier": "t_bool",
														"typeString": "bool"
													}
												},
												"id": 633,
												"nodeType": "IfStatement",
												"src": "597:51:7",
												"trueBody": {
													"id": 632,
													"nodeType": "Block",
													"src": "613:35:7",
													"statements": [
														{
															"expression": {
																"hexValue": "30",
																"id": 630,
																"isConstant": false,
																"isLValue": false,
																"isPure": true,
																"kind": "string",
																"lValueRequested": false,
																"nodeType": "Literal",
																"src": "634:3:7",
																"typeDescriptions": {
																	"typeIdentifier": "t_stringliteral_044852b2a670ade5407e78fb2863c51de9fcb96542a07186fe3aeda6bb8a116d",
																	"typeString": "literal_string \"0\""
																},
																"value": "0"
															},
															"functionReturnParameters": 626,
															"id": 631,
															"nodeType": "Return",
															"src": "627:10:7"
														}
													]
												}
											},
											{
												"assignments": [
													635
												],
												"declarations": [
													{
														"constant": false,
														"id": 635,
														"mutability": "mutable",
														"name": "temp",
														"nameLocation": "665:4:7",
														"nodeType": "VariableDeclaration",
														"scope": 697,
														"src": "657:12:7",
														"stateVariable": false,
														"storageLocation": "default",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														},
														"typeName": {
															"id": 634,
															"name": "uint256",
															"nodeType": "ElementaryTypeName",
															"src": "657:7:7",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														},
														"visibility": "internal"
													}
												],
												"id": 637,
												"initialValue": {
													"id": 636,
													"name": "value",
													"nodeType": "Identifier",
													"overloadedDeclarations": [],
													"referencedDeclaration": 622,
													"src": "672:5:7",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"nodeType": "VariableDeclarationStatement",
												"src": "657:20:7"
											},
											{
												"assignments": [
													639
												],
												"declarations": [
													{
														"constant": false,
														"id": 639,
														"mutability": "mutable",
														"name": "digits",
														"nameLocation": "695:6:7",
														"nodeType": "VariableDeclaration",
														"scope": 697,
														"src": "687:14:7",
														"stateVariable": false,
														"storageLocation": "default",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														},
														"typeName": {
															"id": 638,
															"name": "uint256",
															"nodeType": "ElementaryTypeName",
															"src": "687:7:7",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														},
														"visibility": "internal"
													}
												],
												"id": 640,
												"nodeType": "VariableDeclarationStatement",
												"src": "687:14:7"
											},
											{
												"body": {
													"id": 651,
													"nodeType": "Block",
													"src": "729:57:7",
													"statements": [
														{
															"expression": {
																"id": 645,
																"isConstant": false,
																"isLValue": false,
																"isPure": false,
																"lValueRequested": false,
																"nodeType": "UnaryOperation",
																"operator": "++",
																"prefix": false,
																"src": "743:8:7",
																"subExpression": {
																	"id": 644,
																	"name": "digits",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 639,
																	"src": "743:6:7",
																	"typeDescriptions": {
																		"typeIdentifier": "t_uint256",
																		"typeString": "uint256"
																	}
																},
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															},
															"id": 646,
															"nodeType": "ExpressionStatement",
															"src": "743:8:7"
														},
														{
															"expression": {
																"id": 649,
																"isConstant": false,
																"isLValue": false,
																"isPure": false,
																"lValueRequested": false,
																"leftHandSide": {
																	"id": 647,
																	"name": "temp",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 635,
																	"src": "765:4:7",
																	"typeDescriptions": {
																		"typeIdentifier": "t_uint256",
																		"typeString": "uint256"
																	}
																},
																"nodeType": "Assignment",
																"operator": "/=",
																"rightHandSide": {
																	"hexValue": "3130",
																	"id": 648,
																	"isConstant": false,
																	"isLValue": false,
																	"isPure": true,
																	"kind": "number",
																	"lValueRequested": false,
																	"nodeType": "Literal",
																	"src": "773:2:7",
																	"typeDescriptions": {
																		"typeIdentifier": "t_rational_10_by_1",
																		"typeString": "int_const 10"
																	},
																	"value": "10"
																},
																"src": "765:10:7",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															},
															"id": 650,
															"nodeType": "ExpressionStatement",
															"src": "765:10:7"
														}
													]
												},
												"condition": {
													"commonType": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													},
													"id": 643,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"lValueRequested": false,
													"leftExpression": {
														"id": 641,
														"name": "temp",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 635,
														"src": "718:4:7",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														}
													},
													"nodeType": "BinaryOperation",
													"operator": "!=",
													"rightExpression": {
														"hexValue": "30",
														"id": 642,
														"isConstant": false,
														"isLValue": false,
														"isPure": true,
														"kind": "number",
														"lValueRequested": false,
														"nodeType": "Literal",
														"src": "726:1:7",
														"typeDescriptions": {
															"typeIdentifier": "t_rational_0_by_1",
															"typeString": "int_const 0"
														},
														"value": "0"
													},
													"src": "718:9:7",
													"typeDescriptions": {
														"typeIdentifier": "t_bool",
														"typeString": "bool"
													}
												},
												"id": 652,
												"nodeType": "WhileStatement",
												"src": "711:75:7"
											},
											{
												"assignments": [
													654
												],
												"declarations": [
													{
														"constant": false,
														"id": 654,
														"mutability": "mutable",
														"name": "buffer",
														"nameLocation": "808:6:7",
														"nodeType": "VariableDeclaration",
														"scope": 697,
														"src": "795:19:7",
														"stateVariable": false,
														"storageLocation": "memory",
														"typeDescriptions": {
															"typeIdentifier": "t_bytes_memory_ptr",
															"typeString": "bytes"
														},
														"typeName": {
															"id": 653,
															"name": "bytes",
															"nodeType": "ElementaryTypeName",
															"src": "795:5:7",
															"typeDescriptions": {
																"typeIdentifier": "t_bytes_storage_ptr",
																"typeString": "bytes"
															}
														},
														"visibility": "internal"
													}
												],
												"id": 659,
												"initialValue": {
													"arguments": [
														{
															"id": 657,
															"name": "digits",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 639,
															"src": "827:6:7",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														],
														"id": 656,
														"isConstant": false,
														"isLValue": false,
														"isPure": true,
														"lValueRequested": false,
														"nodeType": "NewExpression",
														"src": "817:9:7",
														"typeDescriptions": {
															"typeIdentifier": "t_function_objectcreation_pure$_t_uint256_$returns$_t_bytes_memory_ptr_$",
															"typeString": "function (uint256) pure returns (bytes memory)"
														},
														"typeName": {
															"id": 655,
															"name": "bytes",
															"nodeType": "ElementaryTypeName",
															"src": "821:5:7",
															"typeDescriptions": {
																"typeIdentifier": "t_bytes_storage_ptr",
																"typeString": "bytes"
															}
														}
													},
													"id": 658,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"names": [],
													"nodeType": "FunctionCall",
													"src": "817:17:7",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_bytes_memory_ptr",
														"typeString": "bytes memory"
													}
												},
												"nodeType": "VariableDeclarationStatement",
												"src": "795:39:7"
											},
											{
												"body": {
													"id": 690,
													"nodeType": "Block",
													"src": "863:131:7",
													"statements": [
														{
															"expression": {
																"id": 665,
																"isConstant": false,
																"isLValue": false,
																"isPure": false,
																"lValueRequested": false,
																"leftHandSide": {
																	"id": 663,
																	"name": "digits",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 639,
																	"src": "877:6:7",
																	"typeDescriptions": {
																		"typeIdentifier": "t_uint256",
																		"typeString": "uint256"
																	}
																},
																"nodeType": "Assignment",
																"operator": "-=",
																"rightHandSide": {
																	"hexValue": "31",
																	"id": 664,
																	"isConstant": false,
																	"isLValue": false,
																	"isPure": true,
																	"kind": "number",
																	"lValueRequested": false,
																	"nodeType": "Literal",
																	"src": "887:1:7",
																	"typeDescriptions": {
																		"typeIdentifier": "t_rational_1_by_1",
																		"typeString": "int_const 1"
																	},
																	"value": "1"
																},
																"src": "877:11:7",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															},
															"id": 666,
															"nodeType": "ExpressionStatement",
															"src": "877:11:7"
														},
														{
															"expression": {
																"id": 684,
																"isConstant": false,
																"isLValue": false,
																"isPure": false,
																"lValueRequested": false,
																"leftHandSide": {
																	"baseExpression": {
																		"id": 667,
																		"name": "buffer",
																		"nodeType": "Identifier",
																		"overloadedDeclarations": [],
																		"referencedDeclaration": 654,
																		"src": "902:6:7",
																		"typeDescriptions": {
																			"typeIdentifier": "t_bytes_memory_ptr",
																			"typeString": "bytes memory"
																		}
																	},
																	"id": 669,
																	"indexExpression": {
																		"id": 668,
																		"name": "digits",
																		"nodeType": "Identifier",
																		"overloadedDeclarations": [],
																		"referencedDeclaration": 639,
																		"src": "909:6:7",
																		"typeDescriptions": {
																			"typeIdentifier": "t_uint256",
																			"typeString": "uint256"
																		}
																	},
																	"isConstant": false,
																	"isLValue": true,
																	"isPure": false,
																	"lValueRequested": true,
																	"nodeType": "IndexAccess",
																	"src": "902:14:7",
																	"typeDescriptions": {
																		"typeIdentifier": "t_bytes1",
																		"typeString": "bytes1"
																	}
																},
																"nodeType": "Assignment",
																"operator": "=",
																"rightHandSide": {
																	"arguments": [
																		{
																			"arguments": [
																				{
																					"commonType": {
																						"typeIdentifier": "t_uint256",
																						"typeString": "uint256"
																					},
																					"id": 681,
																					"isConstant": false,
																					"isLValue": false,
																					"isPure": false,
																					"lValueRequested": false,
																					"leftExpression": {
																						"hexValue": "3438",
																						"id": 674,
																						"isConstant": false,
																						"isLValue": false,
																						"isPure": true,
																						"kind": "number",
																						"lValueRequested": false,
																						"nodeType": "Literal",
																						"src": "932:2:7",
																						"typeDescriptions": {
																							"typeIdentifier": "t_rational_48_by_1",
																							"typeString": "int_const 48"
																						},
																						"value": "48"
																					},
																					"nodeType": "BinaryOperation",
																					"operator": "+",
																					"rightExpression": {
																						"arguments": [
																							{
																								"commonType": {
																									"typeIdentifier": "t_uint256",
																									"typeString": "uint256"
																								},
																								"id": 679,
																								"isConstant": false,
																								"isLValue": false,
																								"isPure": false,
																								"lValueRequested": false,
																								"leftExpression": {
																									"id": 677,
																									"name": "value",
																									"nodeType": "Identifier",
																									"overloadedDeclarations": [],
																									"referencedDeclaration": 622,
																									"src": "945:5:7",
																									"typeDescriptions": {
																										"typeIdentifier": "t_uint256",
																										"typeString": "uint256"
																									}
																								},
																								"nodeType": "BinaryOperation",
																								"operator": "%",
																								"rightExpression": {
																									"hexValue": "3130",
																									"id": 678,
																									"isConstant": false,
																									"isLValue": false,
																									"isPure": true,
																									"kind": "number",
																									"lValueRequested": false,
																									"nodeType": "Literal",
																									"src": "953:2:7",
																									"typeDescriptions": {
																										"typeIdentifier": "t_rational_10_by_1",
																										"typeString": "int_const 10"
																									},
																									"value": "10"
																								},
																								"src": "945:10:7",
																								"typeDescriptions": {
																									"typeIdentifier": "t_uint256",
																									"typeString": "uint256"
																								}
																							}
																						],
																						"expression": {
																							"argumentTypes": [
																								{
																									"typeIdentifier": "t_uint256",
																									"typeString": "uint256"
																								}
																							],
																							"id": 676,
																							"isConstant": false,
																							"isLValue": false,
																							"isPure": true,
																							"lValueRequested": false,
																							"nodeType": "ElementaryTypeNameExpression",
																							"src": "937:7:7",
																							"typeDescriptions": {
																								"typeIdentifier": "t_type$_t_uint256_$",
																								"typeString": "type(uint256)"
																							},
																							"typeName": {
																								"id": 675,
																								"name": "uint256",
																								"nodeType": "ElementaryTypeName",
																								"src": "937:7:7",
																								"typeDescriptions": {}
																							}
																						},
																						"id": 680,
																						"isConstant": false,
																						"isLValue": false,
																						"isPure": false,
																						"kind": "typeConversion",
																						"lValueRequested": false,
																						"names": [],
																						"nodeType": "FunctionCall",
																						"src": "937:19:7",
																						"tryCall": false,
																						"typeDescriptions": {
																							"typeIdentifier": "t_uint256",
																							"typeString": "uint256"
																						}
																					},
																					"src": "932:24:7",
																					"typeDescriptions": {
																						"typeIdentifier": "t_uint256",
																						"typeString": "uint256"
																					}
																				}
																			],
																			"expression": {
																				"argumentTypes": [
																					{
																						"typeIdentifier": "t_uint256",
																						"typeString": "uint256"
																					}
																				],
																				"id": 673,
																				"isConstant": false,
																				"isLValue": false,
																				"isPure": true,
																				"lValueRequested": false,
																				"nodeType": "ElementaryTypeNameExpression",
																				"src": "926:5:7",
																				"typeDescriptions": {
																					"typeIdentifier": "t_type$_t_uint8_$",
																					"typeString": "type(uint8)"
																				},
																				"typeName": {
																					"id": 672,
																					"name": "uint8",
																					"nodeType": "ElementaryTypeName",
																					"src": "926:5:7",
																					"typeDescriptions": {}
																				}
																			},
																			"id": 682,
																			"isConstant": false,
																			"isLValue": false,
																			"isPure": false,
																			"kind": "typeConversion",
																			"lValueRequested": false,
																			"names": [],
																			"nodeType": "FunctionCall",
																			"src": "926:31:7",
																			"tryCall": false,
																			"typeDescriptions": {
																				"typeIdentifier": "t_uint8",
																				"typeString": "uint8"
																			}
																		}
																	],
																	"expression": {
																		"argumentTypes": [
																			{
																				"typeIdentifier": "t_uint8",
																				"typeString": "uint8"
																			}
																		],
																		"id": 671,
																		"isConstant": false,
																		"isLValue": false,
																		"isPure": true,
																		"lValueRequested": false,
																		"nodeType": "ElementaryTypeNameExpression",
																		"src": "919:6:7",
																		"typeDescriptions": {
																			"typeIdentifier": "t_type$_t_bytes1_$",
																			"typeString": "type(bytes1)"
																		},
																		"typeName": {
																			"id": 670,
																			"name": "bytes1",
																			"nodeType": "ElementaryTypeName",
																			"src": "919:6:7",
																			"typeDescriptions": {}
																		}
																	},
																	"id": 683,
																	"isConstant": false,
																	"isLValue": false,
																	"isPure": false,
																	"kind": "typeConversion",
																	"lValueRequested": false,
																	"names": [],
																	"nodeType": "FunctionCall",
																	"src": "919:39:7",
																	"tryCall": false,
																	"typeDescriptions": {
																		"typeIdentifier": "t_bytes1",
																		"typeString": "bytes1"
																	}
																},
																"src": "902:56:7",
																"typeDescriptions": {
																	"typeIdentifier": "t_bytes1",
																	"typeString": "bytes1"
																}
															},
															"id": 685,
															"nodeType": "ExpressionStatement",
															"src": "902:56:7"
														},
														{
															"expression": {
																"id": 688,
																"isConstant": false,
																"isLValue": false,
																"isPure": false,
																"lValueRequested": false,
																"leftHandSide": {
																	"id": 686,
																	"name": "value",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 622,
																	"src": "972:5:7",
																	"typeDescriptions": {
																		"typeIdentifier": "t_uint256",
																		"typeString": "uint256"
																	}
																},
																"nodeType": "Assignment",
																"operator": "/=",
																"rightHandSide": {
																	"hexValue": "3130",
																	"id": 687,
																	"isConstant": false,
																	"isLValue": false,
																	"isPure": true,
																	"kind": "number",
																	"lValueRequested": false,
																	"nodeType": "Literal",
																	"src": "981:2:7",
																	"typeDescriptions": {
																		"typeIdentifier": "t_rational_10_by_1",
																		"typeString": "int_const 10"
																	},
																	"value": "10"
																},
																"src": "972:11:7",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															},
															"id": 689,
															"nodeType": "ExpressionStatement",
															"src": "972:11:7"
														}
													]
												},
												"condition": {
													"commonType": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													},
													"id": 662,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"lValueRequested": false,
													"leftExpression": {
														"id": 660,
														"name": "value",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 622,
														"src": "851:5:7",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														}
													},
													"nodeType": "BinaryOperation",
													"operator": "!=",
													"rightExpression": {
														"hexValue": "30",
														"id": 661,
														"isConstant": false,
														"isLValue": false,
														"isPure": true,
														"kind": "number",
														"lValueRequested": false,
														"nodeType": "Literal",
														"src": "860:1:7",
														"typeDescriptions": {
															"typeIdentifier": "t_rational_0_by_1",
															"typeString": "int_const 0"
														},
														"value": "0"
													},
													"src": "851:10:7",
													"typeDescriptions": {
														"typeIdentifier": "t_bool",
														"typeString": "bool"
													}
												},
												"id": 691,
												"nodeType": "WhileStatement",
												"src": "844:150:7"
											},
											{
												"expression": {
													"arguments": [
														{
															"id": 694,
															"name": "buffer",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 654,
															"src": "1017:6:7",
															"typeDescriptions": {
																"typeIdentifier": "t_bytes_memory_ptr",
																"typeString": "bytes memory"
															}
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_bytes_memory_ptr",
																"typeString": "bytes memory"
															}
														],
														"id": 693,
														"isConstant": false,
														"isLValue": false,
														"isPure": true,
														"lValueRequested": false,
														"nodeType": "ElementaryTypeNameExpression",
														"src": "1010:6:7",
														"typeDescriptions": {
															"typeIdentifier": "t_type$_t_string_storage_ptr_$",
															"typeString": "type(string storage pointer)"
														},
														"typeName": {
															"id": 692,
															"name": "string",
															"nodeType": "ElementaryTypeName",
															"src": "1010:6:7",
															"typeDescriptions": {}
														}
													},
													"id": 695,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "typeConversion",
													"lValueRequested": false,
													"names": [],
													"nodeType": "FunctionCall",
													"src": "1010:14:7",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_string_memory_ptr",
														"typeString": "string memory"
													}
												},
												"functionReturnParameters": 626,
												"id": 696,
												"nodeType": "Return",
												"src": "1003:21:7"
											}
										]
									},
									"documentation": {
										"id": 620,
										"nodeType": "StructuredDocumentation",
										"src": "233:90:7",
										"text": " @dev Converts a `uint256` to its ASCII `string` decimal representation."
									},
									"id": 698,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "toString",
									"nameLocation": "337:8:7",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 623,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 622,
												"mutability": "mutable",
												"name": "value",
												"nameLocation": "354:5:7",
												"nodeType": "VariableDeclaration",
												"scope": 698,
												"src": "346:13:7",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 621,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "346:7:7",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "345:15:7"
									},
									"returnParameters": {
										"id": 626,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 625,
												"mutability": "mutable",
												"name": "",
												"nameLocation": "-1:-1:-1",
												"nodeType": "VariableDeclaration",
												"scope": 698,
												"src": "384:13:7",
												"stateVariable": false,
												"storageLocation": "memory",
												"typeDescriptions": {
													"typeIdentifier": "t_string_memory_ptr",
													"typeString": "string"
												},
												"typeName": {
													"id": 624,
													"name": "string",
													"nodeType": "ElementaryTypeName",
													"src": "384:6:7",
													"typeDescriptions": {
														"typeIdentifier": "t_string_storage_ptr",
														"typeString": "string"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "383:15:7"
									},
									"scope": 816,
									"src": "328:703:7",
									"stateMutability": "pure",
									"virtual": false,
									"visibility": "internal"
								},
								{
									"body": {
										"id": 738,
										"nodeType": "Block",
										"src": "1210:255:7",
										"statements": [
											{
												"condition": {
													"commonType": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													},
													"id": 708,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"lValueRequested": false,
													"leftExpression": {
														"id": 706,
														"name": "value",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 701,
														"src": "1224:5:7",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														}
													},
													"nodeType": "BinaryOperation",
													"operator": "==",
													"rightExpression": {
														"hexValue": "30",
														"id": 707,
														"isConstant": false,
														"isLValue": false,
														"isPure": true,
														"kind": "number",
														"lValueRequested": false,
														"nodeType": "Literal",
														"src": "1233:1:7",
														"typeDescriptions": {
															"typeIdentifier": "t_rational_0_by_1",
															"typeString": "int_const 0"
														},
														"value": "0"
													},
													"src": "1224:10:7",
													"typeDescriptions": {
														"typeIdentifier": "t_bool",
														"typeString": "bool"
													}
												},
												"id": 712,
												"nodeType": "IfStatement",
												"src": "1220:54:7",
												"trueBody": {
													"id": 711,
													"nodeType": "Block",
													"src": "1236:38:7",
													"statements": [
														{
															"expression": {
																"hexValue": "30783030",
																"id": 709,
																"isConstant": false,
																"isLValue": false,
																"isPure": true,
																"kind": "string",
																"lValueRequested": false,
																"nodeType": "Literal",
																"src": "1257:6:7",
																"typeDescriptions": {
																	"typeIdentifier": "t_stringliteral_27489e20a0060b723a1748bdff5e44570ee9fae64141728105692eac6031e8a4",
																	"typeString": "literal_string \"0x00\""
																},
																"value": "0x00"
															},
															"functionReturnParameters": 705,
															"id": 710,
															"nodeType": "Return",
															"src": "1250:13:7"
														}
													]
												}
											},
											{
												"assignments": [
													714
												],
												"declarations": [
													{
														"constant": false,
														"id": 714,
														"mutability": "mutable",
														"name": "temp",
														"nameLocation": "1291:4:7",
														"nodeType": "VariableDeclaration",
														"scope": 738,
														"src": "1283:12:7",
														"stateVariable": false,
														"storageLocation": "default",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														},
														"typeName": {
															"id": 713,
															"name": "uint256",
															"nodeType": "ElementaryTypeName",
															"src": "1283:7:7",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														},
														"visibility": "internal"
													}
												],
												"id": 716,
												"initialValue": {
													"id": 715,
													"name": "value",
													"nodeType": "Identifier",
													"overloadedDeclarations": [],
													"referencedDeclaration": 701,
													"src": "1298:5:7",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"nodeType": "VariableDeclarationStatement",
												"src": "1283:20:7"
											},
											{
												"assignments": [
													718
												],
												"declarations": [
													{
														"constant": false,
														"id": 718,
														"mutability": "mutable",
														"name": "length",
														"nameLocation": "1321:6:7",
														"nodeType": "VariableDeclaration",
														"scope": 738,
														"src": "1313:14:7",
														"stateVariable": false,
														"storageLocation": "default",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														},
														"typeName": {
															"id": 717,
															"name": "uint256",
															"nodeType": "ElementaryTypeName",
															"src": "1313:7:7",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														},
														"visibility": "internal"
													}
												],
												"id": 720,
												"initialValue": {
													"hexValue": "30",
													"id": 719,
													"isConstant": false,
													"isLValue": false,
													"isPure": true,
													"kind": "number",
													"lValueRequested": false,
													"nodeType": "Literal",
													"src": "1330:1:7",
													"typeDescriptions": {
														"typeIdentifier": "t_rational_0_by_1",
														"typeString": "int_const 0"
													},
													"value": "0"
												},
												"nodeType": "VariableDeclarationStatement",
												"src": "1313:18:7"
											},
											{
												"body": {
													"id": 731,
													"nodeType": "Block",
													"src": "1359:57:7",
													"statements": [
														{
															"expression": {
																"id": 725,
																"isConstant": false,
																"isLValue": false,
																"isPure": false,
																"lValueRequested": false,
																"nodeType": "UnaryOperation",
																"operator": "++",
																"prefix": false,
																"src": "1373:8:7",
																"subExpression": {
																	"id": 724,
																	"name": "length",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 718,
																	"src": "1373:6:7",
																	"typeDescriptions": {
																		"typeIdentifier": "t_uint256",
																		"typeString": "uint256"
																	}
																},
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															},
															"id": 726,
															"nodeType": "ExpressionStatement",
															"src": "1373:8:7"
														},
														{
															"expression": {
																"id": 729,
																"isConstant": false,
																"isLValue": false,
																"isPure": false,
																"lValueRequested": false,
																"leftHandSide": {
																	"id": 727,
																	"name": "temp",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 714,
																	"src": "1395:4:7",
																	"typeDescriptions": {
																		"typeIdentifier": "t_uint256",
																		"typeString": "uint256"
																	}
																},
																"nodeType": "Assignment",
																"operator": ">>=",
																"rightHandSide": {
																	"hexValue": "38",
																	"id": 728,
																	"isConstant": false,
																	"isLValue": false,
																	"isPure": true,
																	"kind": "number",
																	"lValueRequested": false,
																	"nodeType": "Literal",
																	"src": "1404:1:7",
																	"typeDescriptions": {
																		"typeIdentifier": "t_rational_8_by_1",
																		"typeString": "int_const 8"
																	},
																	"value": "8"
																},
																"src": "1395:10:7",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															},
															"id": 730,
															"nodeType": "ExpressionStatement",
															"src": "1395:10:7"
														}
													]
												},
												"condition": {
													"commonType": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													},
													"id": 723,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"lValueRequested": false,
													"leftExpression": {
														"id": 721,
														"name": "temp",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 714,
														"src": "1348:4:7",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														}
													},
													"nodeType": "BinaryOperation",
													"operator": "!=",
													"rightExpression": {
														"hexValue": "30",
														"id": 722,
														"isConstant": false,
														"isLValue": false,
														"isPure": true,
														"kind": "number",
														"lValueRequested": false,
														"nodeType": "Literal",
														"src": "1356:1:7",
														"typeDescriptions": {
															"typeIdentifier": "t_rational_0_by_1",
															"typeString": "int_const 0"
														},
														"value": "0"
													},
													"src": "1348:9:7",
													"typeDescriptions": {
														"typeIdentifier": "t_bool",
														"typeString": "bool"
													}
												},
												"id": 732,
												"nodeType": "WhileStatement",
												"src": "1341:75:7"
											},
											{
												"expression": {
													"arguments": [
														{
															"id": 734,
															"name": "value",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 701,
															"src": "1444:5:7",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														},
														{
															"id": 735,
															"name": "length",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 718,
															"src": "1451:6:7",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															},
															{
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														],
														"id": 733,
														"name": "toHexString",
														"nodeType": "Identifier",
														"overloadedDeclarations": [
															739,
															815
														],
														"referencedDeclaration": 815,
														"src": "1432:11:7",
														"typeDescriptions": {
															"typeIdentifier": "t_function_internal_pure$_t_uint256_$_t_uint256_$returns$_t_string_memory_ptr_$",
															"typeString": "function (uint256,uint256) pure returns (string memory)"
														}
													},
													"id": 736,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"names": [],
													"nodeType": "FunctionCall",
													"src": "1432:26:7",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_string_memory_ptr",
														"typeString": "string memory"
													}
												},
												"functionReturnParameters": 705,
												"id": 737,
												"nodeType": "Return",
												"src": "1425:33:7"
											}
										]
									},
									"documentation": {
										"id": 699,
										"nodeType": "StructuredDocumentation",
										"src": "1037:94:7",
										"text": " @dev Converts a `uint256` to its ASCII `string` hexadecimal representation."
									},
									"id": 739,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "toHexString",
									"nameLocation": "1145:11:7",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 702,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 701,
												"mutability": "mutable",
												"name": "value",
												"nameLocation": "1165:5:7",
												"nodeType": "VariableDeclaration",
												"scope": 739,
												"src": "1157:13:7",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 700,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "1157:7:7",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "1156:15:7"
									},
									"returnParameters": {
										"id": 705,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 704,
												"mutability": "mutable",
												"name": "",
												"nameLocation": "-1:-1:-1",
												"nodeType": "VariableDeclaration",
												"scope": 739,
												"src": "1195:13:7",
												"stateVariable": false,
												"storageLocation": "memory",
												"typeDescriptions": {
													"typeIdentifier": "t_string_memory_ptr",
													"typeString": "string"
												},
												"typeName": {
													"id": 703,
													"name": "string",
													"nodeType": "ElementaryTypeName",
													"src": "1195:6:7",
													"typeDescriptions": {
														"typeIdentifier": "t_string_storage_ptr",
														"typeString": "string"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "1194:15:7"
									},
									"scope": 816,
									"src": "1136:329:7",
									"stateMutability": "pure",
									"virtual": false,
									"visibility": "internal"
								},
								{
									"body": {
										"id": 814,
										"nodeType": "Block",
										"src": "1678:351:7",
										"statements": [
											{
												"assignments": [
													750
												],
												"declarations": [
													{
														"constant": false,
														"id": 750,
														"mutability": "mutable",
														"name": "buffer",
														"nameLocation": "1701:6:7",
														"nodeType": "VariableDeclaration",
														"scope": 814,
														"src": "1688:19:7",
														"stateVariable": false,
														"storageLocation": "memory",
														"typeDescriptions": {
															"typeIdentifier": "t_bytes_memory_ptr",
															"typeString": "bytes"
														},
														"typeName": {
															"id": 749,
															"name": "bytes",
															"nodeType": "ElementaryTypeName",
															"src": "1688:5:7",
															"typeDescriptions": {
																"typeIdentifier": "t_bytes_storage_ptr",
																"typeString": "bytes"
															}
														},
														"visibility": "internal"
													}
												],
												"id": 759,
												"initialValue": {
													"arguments": [
														{
															"commonType": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															},
															"id": 757,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"lValueRequested": false,
															"leftExpression": {
																"commonType": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																},
																"id": 755,
																"isConstant": false,
																"isLValue": false,
																"isPure": false,
																"lValueRequested": false,
																"leftExpression": {
																	"hexValue": "32",
																	"id": 753,
																	"isConstant": false,
																	"isLValue": false,
																	"isPure": true,
																	"kind": "number",
																	"lValueRequested": false,
																	"nodeType": "Literal",
																	"src": "1720:1:7",
																	"typeDescriptions": {
																		"typeIdentifier": "t_rational_2_by_1",
																		"typeString": "int_const 2"
																	},
																	"value": "2"
																},
																"nodeType": "BinaryOperation",
																"operator": "*",
																"rightExpression": {
																	"id": 754,
																	"name": "length",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 744,
																	"src": "1724:6:7",
																	"typeDescriptions": {
																		"typeIdentifier": "t_uint256",
																		"typeString": "uint256"
																	}
																},
																"src": "1720:10:7",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															},
															"nodeType": "BinaryOperation",
															"operator": "+",
															"rightExpression": {
																"hexValue": "32",
																"id": 756,
																"isConstant": false,
																"isLValue": false,
																"isPure": true,
																"kind": "number",
																"lValueRequested": false,
																"nodeType": "Literal",
																"src": "1733:1:7",
																"typeDescriptions": {
																	"typeIdentifier": "t_rational_2_by_1",
																	"typeString": "int_const 2"
																},
																"value": "2"
															},
															"src": "1720:14:7",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														],
														"id": 752,
														"isConstant": false,
														"isLValue": false,
														"isPure": true,
														"lValueRequested": false,
														"nodeType": "NewExpression",
														"src": "1710:9:7",
														"typeDescriptions": {
															"typeIdentifier": "t_function_objectcreation_pure$_t_uint256_$returns$_t_bytes_memory_ptr_$",
															"typeString": "function (uint256) pure returns (bytes memory)"
														},
														"typeName": {
															"id": 751,
															"name": "bytes",
															"nodeType": "ElementaryTypeName",
															"src": "1714:5:7",
															"typeDescriptions": {
																"typeIdentifier": "t_bytes_storage_ptr",
																"typeString": "bytes"
															}
														}
													},
													"id": 758,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"names": [],
													"nodeType": "FunctionCall",
													"src": "1710:25:7",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_bytes_memory_ptr",
														"typeString": "bytes memory"
													}
												},
												"nodeType": "VariableDeclarationStatement",
												"src": "1688:47:7"
											},
											{
												"expression": {
													"id": 764,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"lValueRequested": false,
													"leftHandSide": {
														"baseExpression": {
															"id": 760,
															"name": "buffer",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 750,
															"src": "1745:6:7",
															"typeDescriptions": {
																"typeIdentifier": "t_bytes_memory_ptr",
																"typeString": "bytes memory"
															}
														},
														"id": 762,
														"indexExpression": {
															"hexValue": "30",
															"id": 761,
															"isConstant": false,
															"isLValue": false,
															"isPure": true,
															"kind": "number",
															"lValueRequested": false,
															"nodeType": "Literal",
															"src": "1752:1:7",
															"typeDescriptions": {
																"typeIdentifier": "t_rational_0_by_1",
																"typeString": "int_const 0"
															},
															"value": "0"
														},
														"isConstant": false,
														"isLValue": true,
														"isPure": false,
														"lValueRequested": true,
														"nodeType": "IndexAccess",
														"src": "1745:9:7",
														"typeDescriptions": {
															"typeIdentifier": "t_bytes1",
															"typeString": "bytes1"
														}
													},
													"nodeType": "Assignment",
													"operator": "=",
													"rightHandSide": {
														"hexValue": "30",
														"id": 763,
														"isConstant": false,
														"isLValue": false,
														"isPure": true,
														"kind": "string",
														"lValueRequested": false,
														"nodeType": "Literal",
														"src": "1757:3:7",
														"typeDescriptions": {
															"typeIdentifier": "t_stringliteral_044852b2a670ade5407e78fb2863c51de9fcb96542a07186fe3aeda6bb8a116d",
															"typeString": "literal_string \"0\""
														},
														"value": "0"
													},
													"src": "1745:15:7",
													"typeDescriptions": {
														"typeIdentifier": "t_bytes1",
														"typeString": "bytes1"
													}
												},
												"id": 765,
												"nodeType": "ExpressionStatement",
												"src": "1745:15:7"
											},
											{
												"expression": {
													"id": 770,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"lValueRequested": false,
													"leftHandSide": {
														"baseExpression": {
															"id": 766,
															"name": "buffer",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 750,
															"src": "1770:6:7",
															"typeDescriptions": {
																"typeIdentifier": "t_bytes_memory_ptr",
																"typeString": "bytes memory"
															}
														},
														"id": 768,
														"indexExpression": {
															"hexValue": "31",
															"id": 767,
															"isConstant": false,
															"isLValue": false,
															"isPure": true,
															"kind": "number",
															"lValueRequested": false,
															"nodeType": "Literal",
															"src": "1777:1:7",
															"typeDescriptions": {
																"typeIdentifier": "t_rational_1_by_1",
																"typeString": "int_const 1"
															},
															"value": "1"
														},
														"isConstant": false,
														"isLValue": true,
														"isPure": false,
														"lValueRequested": true,
														"nodeType": "IndexAccess",
														"src": "1770:9:7",
														"typeDescriptions": {
															"typeIdentifier": "t_bytes1",
															"typeString": "bytes1"
														}
													},
													"nodeType": "Assignment",
													"operator": "=",
													"rightHandSide": {
														"hexValue": "78",
														"id": 769,
														"isConstant": false,
														"isLValue": false,
														"isPure": true,
														"kind": "string",
														"lValueRequested": false,
														"nodeType": "Literal",
														"src": "1782:3:7",
														"typeDescriptions": {
															"typeIdentifier": "t_stringliteral_7521d1cadbcfa91eec65aa16715b94ffc1c9654ba57ea2ef1a2127bca1127a83",
															"typeString": "literal_string \"x\""
														},
														"value": "x"
													},
													"src": "1770:15:7",
													"typeDescriptions": {
														"typeIdentifier": "t_bytes1",
														"typeString": "bytes1"
													}
												},
												"id": 771,
												"nodeType": "ExpressionStatement",
												"src": "1770:15:7"
											},
											{
												"body": {
													"id": 800,
													"nodeType": "Block",
													"src": "1840:87:7",
													"statements": [
														{
															"expression": {
																"id": 794,
																"isConstant": false,
																"isLValue": false,
																"isPure": false,
																"lValueRequested": false,
																"leftHandSide": {
																	"baseExpression": {
																		"id": 786,
																		"name": "buffer",
																		"nodeType": "Identifier",
																		"overloadedDeclarations": [],
																		"referencedDeclaration": 750,
																		"src": "1854:6:7",
																		"typeDescriptions": {
																			"typeIdentifier": "t_bytes_memory_ptr",
																			"typeString": "bytes memory"
																		}
																	},
																	"id": 788,
																	"indexExpression": {
																		"id": 787,
																		"name": "i",
																		"nodeType": "Identifier",
																		"overloadedDeclarations": [],
																		"referencedDeclaration": 773,
																		"src": "1861:1:7",
																		"typeDescriptions": {
																			"typeIdentifier": "t_uint256",
																			"typeString": "uint256"
																		}
																	},
																	"isConstant": false,
																	"isLValue": true,
																	"isPure": false,
																	"lValueRequested": true,
																	"nodeType": "IndexAccess",
																	"src": "1854:9:7",
																	"typeDescriptions": {
																		"typeIdentifier": "t_bytes1",
																		"typeString": "bytes1"
																	}
																},
																"nodeType": "Assignment",
																"operator": "=",
																"rightHandSide": {
																	"baseExpression": {
																		"id": 789,
																		"name": "_HEX_SYMBOLS",
																		"nodeType": "Identifier",
																		"overloadedDeclarations": [],
																		"referencedDeclaration": 619,
																		"src": "1866:12:7",
																		"typeDescriptions": {
																			"typeIdentifier": "t_bytes16",
																			"typeString": "bytes16"
																		}
																	},
																	"id": 793,
																	"indexExpression": {
																		"commonType": {
																			"typeIdentifier": "t_uint256",
																			"typeString": "uint256"
																		},
																		"id": 792,
																		"isConstant": false,
																		"isLValue": false,
																		"isPure": false,
																		"lValueRequested": false,
																		"leftExpression": {
																			"id": 790,
																			"name": "value",
																			"nodeType": "Identifier",
																			"overloadedDeclarations": [],
																			"referencedDeclaration": 742,
																			"src": "1879:5:7",
																			"typeDescriptions": {
																				"typeIdentifier": "t_uint256",
																				"typeString": "uint256"
																			}
																		},
																		"nodeType": "BinaryOperation",
																		"operator": "&",
																		"rightExpression": {
																			"hexValue": "307866",
																			"id": 791,
																			"isConstant": false,
																			"isLValue": false,
																			"isPure": true,
																			"kind": "number",
																			"lValueRequested": false,
																			"nodeType": "Literal",
																			"src": "1887:3:7",
																			"typeDescriptions": {
																				"typeIdentifier": "t_rational_15_by_1",
																				"typeString": "int_const 15"
																			},
																			"value": "0xf"
																		},
																		"src": "1879:11:7",
																		"typeDescriptions": {
																			"typeIdentifier": "t_uint256",
																			"typeString": "uint256"
																		}
																	},
																	"isConstant": false,
																	"isLValue": false,
																	"isPure": false,
																	"lValueRequested": false,
																	"nodeType": "IndexAccess",
																	"src": "1866:25:7",
																	"typeDescriptions": {
																		"typeIdentifier": "t_bytes1",
																		"typeString": "bytes1"
																	}
																},
																"src": "1854:37:7",
																"typeDescriptions": {
																	"typeIdentifier": "t_bytes1",
																	"typeString": "bytes1"
																}
															},
															"id": 795,
															"nodeType": "ExpressionStatement",
															"src": "1854:37:7"
														},
														{
															"expression": {
																"id": 798,
																"isConstant": false,
																"isLValue": false,
																"isPure": false,
																"lValueRequested": false,
																"leftHandSide": {
																	"id": 796,
																	"name": "value",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 742,
																	"src": "1905:5:7",
																	"typeDescriptions": {
																		"typeIdentifier": "t_uint256",
																		"typeString": "uint256"
																	}
																},
																"nodeType": "Assignment",
																"operator": ">>=",
																"rightHandSide": {
																	"hexValue": "34",
																	"id": 797,
																	"isConstant": false,
																	"isLValue": false,
																	"isPure": true,
																	"kind": "number",
																	"lValueRequested": false,
																	"nodeType": "Literal",
																	"src": "1915:1:7",
																	"typeDescriptions": {
																		"typeIdentifier": "t_rational_4_by_1",
																		"typeString": "int_const 4"
																	},
																	"value": "4"
																},
																"src": "1905:11:7",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															},
															"id": 799,
															"nodeType": "ExpressionStatement",
															"src": "1905:11:7"
														}
													]
												},
												"condition": {
													"commonType": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													},
													"id": 782,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"lValueRequested": false,
													"leftExpression": {
														"id": 780,
														"name": "i",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 773,
														"src": "1828:1:7",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														}
													},
													"nodeType": "BinaryOperation",
													"operator": ">",
													"rightExpression": {
														"hexValue": "31",
														"id": 781,
														"isConstant": false,
														"isLValue": false,
														"isPure": true,
														"kind": "number",
														"lValueRequested": false,
														"nodeType": "Literal",
														"src": "1832:1:7",
														"typeDescriptions": {
															"typeIdentifier": "t_rational_1_by_1",
															"typeString": "int_const 1"
														},
														"value": "1"
													},
													"src": "1828:5:7",
													"typeDescriptions": {
														"typeIdentifier": "t_bool",
														"typeString": "bool"
													}
												},
												"id": 801,
												"initializationExpression": {
													"assignments": [
														773
													],
													"declarations": [
														{
															"constant": false,
															"id": 773,
															"mutability": "mutable",
															"name": "i",
															"nameLocation": "1808:1:7",
															"nodeType": "VariableDeclaration",
															"scope": 801,
															"src": "1800:9:7",
															"stateVariable": false,
															"storageLocation": "default",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															},
															"typeName": {
																"id": 772,
																"name": "uint256",
																"nodeType": "ElementaryTypeName",
																"src": "1800:7:7",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															},
															"visibility": "internal"
														}
													],
													"id": 779,
													"initialValue": {
														"commonType": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														},
														"id": 778,
														"isConstant": false,
														"isLValue": false,
														"isPure": false,
														"lValueRequested": false,
														"leftExpression": {
															"commonType": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															},
															"id": 776,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"lValueRequested": false,
															"leftExpression": {
																"hexValue": "32",
																"id": 774,
																"isConstant": false,
																"isLValue": false,
																"isPure": true,
																"kind": "number",
																"lValueRequested": false,
																"nodeType": "Literal",
																"src": "1812:1:7",
																"typeDescriptions": {
																	"typeIdentifier": "t_rational_2_by_1",
																	"typeString": "int_const 2"
																},
																"value": "2"
															},
															"nodeType": "BinaryOperation",
															"operator": "*",
															"rightExpression": {
																"id": 775,
																"name": "length",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 744,
																"src": "1816:6:7",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															},
															"src": "1812:10:7",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														},
														"nodeType": "BinaryOperation",
														"operator": "+",
														"rightExpression": {
															"hexValue": "31",
															"id": 777,
															"isConstant": false,
															"isLValue": false,
															"isPure": true,
															"kind": "number",
															"lValueRequested": false,
															"nodeType": "Literal",
															"src": "1825:1:7",
															"typeDescriptions": {
																"typeIdentifier": "t_rational_1_by_1",
																"typeString": "int_const 1"
															},
															"value": "1"
														},
														"src": "1812:14:7",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														}
													},
													"nodeType": "VariableDeclarationStatement",
													"src": "1800:26:7"
												},
												"loopExpression": {
													"expression": {
														"id": 784,
														"isConstant": false,
														"isLValue": false,
														"isPure": false,
														"lValueRequested": false,
														"nodeType": "UnaryOperation",
														"operator": "--",
														"prefix": true,
														"src": "1835:3:7",
														"subExpression": {
															"id": 783,
															"name": "i",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 773,
															"src": "1837:1:7",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														},
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														}
													},
													"id": 785,
													"nodeType": "ExpressionStatement",
													"src": "1835:3:7"
												},
												"nodeType": "ForStatement",
												"src": "1795:132:7"
											},
											{
												"expression": {
													"arguments": [
														{
															"commonType": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															},
															"id": 805,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"lValueRequested": false,
															"leftExpression": {
																"id": 803,
																"name": "value",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 742,
																"src": "1944:5:7",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															},
															"nodeType": "BinaryOperation",
															"operator": "==",
															"rightExpression": {
																"hexValue": "30",
																"id": 804,
																"isConstant": false,
																"isLValue": false,
																"isPure": true,
																"kind": "number",
																"lValueRequested": false,
																"nodeType": "Literal",
																"src": "1953:1:7",
																"typeDescriptions": {
																	"typeIdentifier": "t_rational_0_by_1",
																	"typeString": "int_const 0"
																},
																"value": "0"
															},
															"src": "1944:10:7",
															"typeDescriptions": {
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															}
														},
														{
															"hexValue": "537472696e67733a20686578206c656e67746820696e73756666696369656e74",
															"id": 806,
															"isConstant": false,
															"isLValue": false,
															"isPure": true,
															"kind": "string",
															"lValueRequested": false,
															"nodeType": "Literal",
															"src": "1956:34:7",
															"typeDescriptions": {
																"typeIdentifier": "t_stringliteral_04fc88320d7c9f639317c75102c103ff0044d3075a5c627e24e76e5bbb2733c2",
																"typeString": "literal_string \"Strings: hex length insufficient\""
															},
															"value": "Strings: hex length insufficient"
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															},
															{
																"typeIdentifier": "t_stringliteral_04fc88320d7c9f639317c75102c103ff0044d3075a5c627e24e76e5bbb2733c2",
																"typeString": "literal_string \"Strings: hex length insufficient\""
															}
														],
														"id": 802,
														"name": "require",
														"nodeType": "Identifier",
														"overloadedDeclarations": [
															4294967278,
															4294967278
														],
														"referencedDeclaration": 4294967278,
														"src": "1936:7:7",
														"typeDescriptions": {
															"typeIdentifier": "t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$",
															"typeString": "function (bool,string memory) pure"
														}
													},
													"id": 807,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"names": [],
													"nodeType": "FunctionCall",
													"src": "1936:55:7",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_tuple$__$",
														"typeString": "tuple()"
													}
												},
												"id": 808,
												"nodeType": "ExpressionStatement",
												"src": "1936:55:7"
											},
											{
												"expression": {
													"arguments": [
														{
															"id": 811,
															"name": "buffer",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 750,
															"src": "2015:6:7",
															"typeDescriptions": {
																"typeIdentifier": "t_bytes_memory_ptr",
																"typeString": "bytes memory"
															}
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_bytes_memory_ptr",
																"typeString": "bytes memory"
															}
														],
														"id": 810,
														"isConstant": false,
														"isLValue": false,
														"isPure": true,
														"lValueRequested": false,
														"nodeType": "ElementaryTypeNameExpression",
														"src": "2008:6:7",
														"typeDescriptions": {
															"typeIdentifier": "t_type$_t_string_storage_ptr_$",
															"typeString": "type(string storage pointer)"
														},
														"typeName": {
															"id": 809,
															"name": "string",
															"nodeType": "ElementaryTypeName",
															"src": "2008:6:7",
															"typeDescriptions": {}
														}
													},
													"id": 812,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "typeConversion",
													"lValueRequested": false,
													"names": [],
													"nodeType": "FunctionCall",
													"src": "2008:14:7",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_string_memory_ptr",
														"typeString": "string memory"
													}
												},
												"functionReturnParameters": 748,
												"id": 813,
												"nodeType": "Return",
												"src": "2001:21:7"
											}
										]
									},
									"documentation": {
										"id": 740,
										"nodeType": "StructuredDocumentation",
										"src": "1471:112:7",
										"text": " @dev Converts a `uint256` to its ASCII `string` hexadecimal representation with fixed length."
									},
									"id": 815,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "toHexString",
									"nameLocation": "1597:11:7",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 745,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 742,
												"mutability": "mutable",
												"name": "value",
												"nameLocation": "1617:5:7",
												"nodeType": "VariableDeclaration",
												"scope": 815,
												"src": "1609:13:7",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 741,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "1609:7:7",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 744,
												"mutability": "mutable",
												"name": "length",
												"nameLocation": "1632:6:7",
												"nodeType": "VariableDeclaration",
												"scope": 815,
												"src": "1624:14:7",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 743,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "1624:7:7",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "1608:31:7"
									},
									"returnParameters": {
										"id": 748,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 747,
												"mutability": "mutable",
												"name": "",
												"nameLocation": "-1:-1:-1",
												"nodeType": "VariableDeclaration",
												"scope": 815,
												"src": "1663:13:7",
												"stateVariable": false,
												"storageLocation": "memory",
												"typeDescriptions": {
													"typeIdentifier": "t_string_memory_ptr",
													"typeString": "string"
												},
												"typeName": {
													"id": 746,
													"name": "string",
													"nodeType": "ElementaryTypeName",
													"src": "1663:6:7",
													"typeDescriptions": {
														"typeIdentifier": "t_string_storage_ptr",
														"typeString": "string"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "1662:15:7"
									},
									"scope": 816,
									"src": "1588:441:7",
									"stateMutability": "pure",
									"virtual": false,
									"visibility": "internal"
								}
							],
							"scope": 817,
							"src": "146:1885:7",
							"usedErrors": []
						}
					],
					"src": "86:1946:7"
				},
				"id": 7
			},
			"@openzeppelin/contracts/utils/cryptography/MerkleProof.sol": {
				"ast": {
					"absolutePath": "@openzeppelin/contracts/utils/cryptography/MerkleProof.sol",
					"exportedSymbols": {
						"MerkleProof": [
							909
						]
					},
					"id": 910,
					"license": "MIT",
					"nodeType": "SourceUnit",
					"nodes": [
						{
							"id": 818,
							"literals": [
								"solidity",
								"^",
								"0.8",
								".0"
							],
							"nodeType": "PragmaDirective",
							"src": "118:23:8"
						},
						{
							"abstract": false,
							"baseContracts": [],
							"canonicalName": "MerkleProof",
							"contractDependencies": [],
							"contractKind": "library",
							"documentation": {
								"id": 819,
								"nodeType": "StructuredDocumentation",
								"src": "143:364:8",
								"text": " @dev These functions deal with verification of Merkle Trees proofs.\n The proofs can be generated using the JavaScript library\n https://github.com/miguelmota/merkletreejs[merkletreejs].\n Note: the hashing algorithm should be keccak256 and pair sorting should be enabled.\n See `test/utils/cryptography/MerkleProof.test.js` for some examples."
							},
							"fullyImplemented": true,
							"id": 909,
							"linearizedBaseContracts": [
								909
							],
							"name": "MerkleProof",
							"nameLocation": "516:11:8",
							"nodeType": "ContractDefinition",
							"nodes": [
								{
									"body": {
										"id": 839,
										"nodeType": "Block",
										"src": "989:57:8",
										"statements": [
											{
												"expression": {
													"commonType": {
														"typeIdentifier": "t_bytes32",
														"typeString": "bytes32"
													},
													"id": 837,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"lValueRequested": false,
													"leftExpression": {
														"arguments": [
															{
																"id": 833,
																"name": "proof",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 823,
																"src": "1019:5:8",
																"typeDescriptions": {
																	"typeIdentifier": "t_array$_t_bytes32_$dyn_memory_ptr",
																	"typeString": "bytes32[] memory"
																}
															},
															{
																"id": 834,
																"name": "leaf",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 827,
																"src": "1026:4:8",
																"typeDescriptions": {
																	"typeIdentifier": "t_bytes32",
																	"typeString": "bytes32"
																}
															}
														],
														"expression": {
															"argumentTypes": [
																{
																	"typeIdentifier": "t_array$_t_bytes32_$dyn_memory_ptr",
																	"typeString": "bytes32[] memory"
																},
																{
																	"typeIdentifier": "t_bytes32",
																	"typeString": "bytes32"
																}
															],
															"id": 832,
															"name": "processProof",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 897,
															"src": "1006:12:8",
															"typeDescriptions": {
																"typeIdentifier": "t_function_internal_pure$_t_array$_t_bytes32_$dyn_memory_ptr_$_t_bytes32_$returns$_t_bytes32_$",
																"typeString": "function (bytes32[] memory,bytes32) pure returns (bytes32)"
															}
														},
														"id": 835,
														"isConstant": false,
														"isLValue": false,
														"isPure": false,
														"kind": "functionCall",
														"lValueRequested": false,
														"names": [],
														"nodeType": "FunctionCall",
														"src": "1006:25:8",
														"tryCall": false,
														"typeDescriptions": {
															"typeIdentifier": "t_bytes32",
															"typeString": "bytes32"
														}
													},
													"nodeType": "BinaryOperation",
													"operator": "==",
													"rightExpression": {
														"id": 836,
														"name": "root",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 825,
														"src": "1035:4:8",
														"typeDescriptions": {
															"typeIdentifier": "t_bytes32",
															"typeString": "bytes32"
														}
													},
													"src": "1006:33:8",
													"typeDescriptions": {
														"typeIdentifier": "t_bool",
														"typeString": "bool"
													}
												},
												"functionReturnParameters": 831,
												"id": 838,
												"nodeType": "Return",
												"src": "999:40:8"
											}
										]
									},
									"documentation": {
										"id": 820,
										"nodeType": "StructuredDocumentation",
										"src": "534:323:8",
										"text": " @dev Returns true if a `leaf` can be proved to be a part of a Merkle tree\n defined by `root`. For this, a `proof` must be provided, containing\n sibling hashes on the branch from the leaf to the root of the tree. Each\n pair of leaves and each pair of pre-images are assumed to be sorted."
									},
									"id": 840,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "verify",
									"nameLocation": "871:6:8",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 828,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 823,
												"mutability": "mutable",
												"name": "proof",
												"nameLocation": "904:5:8",
												"nodeType": "VariableDeclaration",
												"scope": 840,
												"src": "887:22:8",
												"stateVariable": false,
												"storageLocation": "memory",
												"typeDescriptions": {
													"typeIdentifier": "t_array$_t_bytes32_$dyn_memory_ptr",
													"typeString": "bytes32[]"
												},
												"typeName": {
													"baseType": {
														"id": 821,
														"name": "bytes32",
														"nodeType": "ElementaryTypeName",
														"src": "887:7:8",
														"typeDescriptions": {
															"typeIdentifier": "t_bytes32",
															"typeString": "bytes32"
														}
													},
													"id": 822,
													"nodeType": "ArrayTypeName",
													"src": "887:9:8",
													"typeDescriptions": {
														"typeIdentifier": "t_array$_t_bytes32_$dyn_storage_ptr",
														"typeString": "bytes32[]"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 825,
												"mutability": "mutable",
												"name": "root",
												"nameLocation": "927:4:8",
												"nodeType": "VariableDeclaration",
												"scope": 840,
												"src": "919:12:8",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_bytes32",
													"typeString": "bytes32"
												},
												"typeName": {
													"id": 824,
													"name": "bytes32",
													"nodeType": "ElementaryTypeName",
													"src": "919:7:8",
													"typeDescriptions": {
														"typeIdentifier": "t_bytes32",
														"typeString": "bytes32"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 827,
												"mutability": "mutable",
												"name": "leaf",
												"nameLocation": "949:4:8",
												"nodeType": "VariableDeclaration",
												"scope": 840,
												"src": "941:12:8",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_bytes32",
													"typeString": "bytes32"
												},
												"typeName": {
													"id": 826,
													"name": "bytes32",
													"nodeType": "ElementaryTypeName",
													"src": "941:7:8",
													"typeDescriptions": {
														"typeIdentifier": "t_bytes32",
														"typeString": "bytes32"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "877:82:8"
									},
									"returnParameters": {
										"id": 831,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 830,
												"mutability": "mutable",
												"name": "",
												"nameLocation": "-1:-1:-1",
												"nodeType": "VariableDeclaration",
												"scope": 840,
												"src": "983:4:8",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_bool",
													"typeString": "bool"
												},
												"typeName": {
													"id": 829,
													"name": "bool",
													"nodeType": "ElementaryTypeName",
													"src": "983:4:8",
													"typeDescriptions": {
														"typeIdentifier": "t_bool",
														"typeString": "bool"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "982:6:8"
									},
									"scope": 909,
									"src": "862:184:8",
									"stateMutability": "pure",
									"virtual": false,
									"visibility": "internal"
								},
								{
									"body": {
										"id": 896,
										"nodeType": "Block",
										"src": "1490:570:8",
										"statements": [
											{
												"assignments": [
													852
												],
												"declarations": [
													{
														"constant": false,
														"id": 852,
														"mutability": "mutable",
														"name": "computedHash",
														"nameLocation": "1508:12:8",
														"nodeType": "VariableDeclaration",
														"scope": 896,
														"src": "1500:20:8",
														"stateVariable": false,
														"storageLocation": "default",
														"typeDescriptions": {
															"typeIdentifier": "t_bytes32",
															"typeString": "bytes32"
														},
														"typeName": {
															"id": 851,
															"name": "bytes32",
															"nodeType": "ElementaryTypeName",
															"src": "1500:7:8",
															"typeDescriptions": {
																"typeIdentifier": "t_bytes32",
																"typeString": "bytes32"
															}
														},
														"visibility": "internal"
													}
												],
												"id": 854,
												"initialValue": {
													"id": 853,
													"name": "leaf",
													"nodeType": "Identifier",
													"overloadedDeclarations": [],
													"referencedDeclaration": 846,
													"src": "1523:4:8",
													"typeDescriptions": {
														"typeIdentifier": "t_bytes32",
														"typeString": "bytes32"
													}
												},
												"nodeType": "VariableDeclarationStatement",
												"src": "1500:27:8"
											},
											{
												"body": {
													"id": 892,
													"nodeType": "Block",
													"src": "1580:445:8",
													"statements": [
														{
															"assignments": [
																867
															],
															"declarations": [
																{
																	"constant": false,
																	"id": 867,
																	"mutability": "mutable",
																	"name": "proofElement",
																	"nameLocation": "1602:12:8",
																	"nodeType": "VariableDeclaration",
																	"scope": 892,
																	"src": "1594:20:8",
																	"stateVariable": false,
																	"storageLocation": "default",
																	"typeDescriptions": {
																		"typeIdentifier": "t_bytes32",
																		"typeString": "bytes32"
																	},
																	"typeName": {
																		"id": 866,
																		"name": "bytes32",
																		"nodeType": "ElementaryTypeName",
																		"src": "1594:7:8",
																		"typeDescriptions": {
																			"typeIdentifier": "t_bytes32",
																			"typeString": "bytes32"
																		}
																	},
																	"visibility": "internal"
																}
															],
															"id": 871,
															"initialValue": {
																"baseExpression": {
																	"id": 868,
																	"name": "proof",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 844,
																	"src": "1617:5:8",
																	"typeDescriptions": {
																		"typeIdentifier": "t_array$_t_bytes32_$dyn_memory_ptr",
																		"typeString": "bytes32[] memory"
																	}
																},
																"id": 870,
																"indexExpression": {
																	"id": 869,
																	"name": "i",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 856,
																	"src": "1623:1:8",
																	"typeDescriptions": {
																		"typeIdentifier": "t_uint256",
																		"typeString": "uint256"
																	}
																},
																"isConstant": false,
																"isLValue": true,
																"isPure": false,
																"lValueRequested": false,
																"nodeType": "IndexAccess",
																"src": "1617:8:8",
																"typeDescriptions": {
																	"typeIdentifier": "t_bytes32",
																	"typeString": "bytes32"
																}
															},
															"nodeType": "VariableDeclarationStatement",
															"src": "1594:31:8"
														},
														{
															"condition": {
																"commonType": {
																	"typeIdentifier": "t_bytes32",
																	"typeString": "bytes32"
																},
																"id": 874,
																"isConstant": false,
																"isLValue": false,
																"isPure": false,
																"lValueRequested": false,
																"leftExpression": {
																	"id": 872,
																	"name": "computedHash",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 852,
																	"src": "1643:12:8",
																	"typeDescriptions": {
																		"typeIdentifier": "t_bytes32",
																		"typeString": "bytes32"
																	}
																},
																"nodeType": "BinaryOperation",
																"operator": "<=",
																"rightExpression": {
																	"id": 873,
																	"name": "proofElement",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 867,
																	"src": "1659:12:8",
																	"typeDescriptions": {
																		"typeIdentifier": "t_bytes32",
																		"typeString": "bytes32"
																	}
																},
																"src": "1643:28:8",
																"typeDescriptions": {
																	"typeIdentifier": "t_bool",
																	"typeString": "bool"
																}
															},
															"falseBody": {
																"id": 890,
																"nodeType": "Block",
																"src": "1847:168:8",
																"statements": [
																	{
																		"expression": {
																			"id": 888,
																			"isConstant": false,
																			"isLValue": false,
																			"isPure": false,
																			"lValueRequested": false,
																			"leftHandSide": {
																				"id": 883,
																				"name": "computedHash",
																				"nodeType": "Identifier",
																				"overloadedDeclarations": [],
																				"referencedDeclaration": 852,
																				"src": "1943:12:8",
																				"typeDescriptions": {
																					"typeIdentifier": "t_bytes32",
																					"typeString": "bytes32"
																				}
																			},
																			"nodeType": "Assignment",
																			"operator": "=",
																			"rightHandSide": {
																				"arguments": [
																					{
																						"id": 885,
																						"name": "proofElement",
																						"nodeType": "Identifier",
																						"overloadedDeclarations": [],
																						"referencedDeclaration": 867,
																						"src": "1973:12:8",
																						"typeDescriptions": {
																							"typeIdentifier": "t_bytes32",
																							"typeString": "bytes32"
																						}
																					},
																					{
																						"id": 886,
																						"name": "computedHash",
																						"nodeType": "Identifier",
																						"overloadedDeclarations": [],
																						"referencedDeclaration": 852,
																						"src": "1987:12:8",
																						"typeDescriptions": {
																							"typeIdentifier": "t_bytes32",
																							"typeString": "bytes32"
																						}
																					}
																				],
																				"expression": {
																					"argumentTypes": [
																						{
																							"typeIdentifier": "t_bytes32",
																							"typeString": "bytes32"
																						},
																						{
																							"typeIdentifier": "t_bytes32",
																							"typeString": "bytes32"
																						}
																					],
																					"id": 884,
																					"name": "_efficientHash",
																					"nodeType": "Identifier",
																					"overloadedDeclarations": [],
																					"referencedDeclaration": 908,
																					"src": "1958:14:8",
																					"typeDescriptions": {
																						"typeIdentifier": "t_function_internal_pure$_t_bytes32_$_t_bytes32_$returns$_t_bytes32_$",
																						"typeString": "function (bytes32,bytes32) pure returns (bytes32)"
																					}
																				},
																				"id": 887,
																				"isConstant": false,
																				"isLValue": false,
																				"isPure": false,
																				"kind": "functionCall",
																				"lValueRequested": false,
																				"names": [],
																				"nodeType": "FunctionCall",
																				"src": "1958:42:8",
																				"tryCall": false,
																				"typeDescriptions": {
																					"typeIdentifier": "t_bytes32",
																					"typeString": "bytes32"
																				}
																			},
																			"src": "1943:57:8",
																			"typeDescriptions": {
																				"typeIdentifier": "t_bytes32",
																				"typeString": "bytes32"
																			}
																		},
																		"id": 889,
																		"nodeType": "ExpressionStatement",
																		"src": "1943:57:8"
																	}
																]
															},
															"id": 891,
															"nodeType": "IfStatement",
															"src": "1639:376:8",
															"trueBody": {
																"id": 882,
																"nodeType": "Block",
																"src": "1673:168:8",
																"statements": [
																	{
																		"expression": {
																			"id": 880,
																			"isConstant": false,
																			"isLValue": false,
																			"isPure": false,
																			"lValueRequested": false,
																			"leftHandSide": {
																				"id": 875,
																				"name": "computedHash",
																				"nodeType": "Identifier",
																				"overloadedDeclarations": [],
																				"referencedDeclaration": 852,
																				"src": "1769:12:8",
																				"typeDescriptions": {
																					"typeIdentifier": "t_bytes32",
																					"typeString": "bytes32"
																				}
																			},
																			"nodeType": "Assignment",
																			"operator": "=",
																			"rightHandSide": {
																				"arguments": [
																					{
																						"id": 877,
																						"name": "computedHash",
																						"nodeType": "Identifier",
																						"overloadedDeclarations": [],
																						"referencedDeclaration": 852,
																						"src": "1799:12:8",
																						"typeDescriptions": {
																							"typeIdentifier": "t_bytes32",
																							"typeString": "bytes32"
																						}
																					},
																					{
																						"id": 878,
																						"name": "proofElement",
																						"nodeType": "Identifier",
																						"overloadedDeclarations": [],
																						"referencedDeclaration": 867,
																						"src": "1813:12:8",
																						"typeDescriptions": {
																							"typeIdentifier": "t_bytes32",
																							"typeString": "bytes32"
																						}
																					}
																				],
																				"expression": {
																					"argumentTypes": [
																						{
																							"typeIdentifier": "t_bytes32",
																							"typeString": "bytes32"
																						},
																						{
																							"typeIdentifier": "t_bytes32",
																							"typeString": "bytes32"
																						}
																					],
																					"id": 876,
																					"name": "_efficientHash",
																					"nodeType": "Identifier",
																					"overloadedDeclarations": [],
																					"referencedDeclaration": 908,
																					"src": "1784:14:8",
																					"typeDescriptions": {
																						"typeIdentifier": "t_function_internal_pure$_t_bytes32_$_t_bytes32_$returns$_t_bytes32_$",
																						"typeString": "function (bytes32,bytes32) pure returns (bytes32)"
																					}
																				},
																				"id": 879,
																				"isConstant": false,
																				"isLValue": false,
																				"isPure": false,
																				"kind": "functionCall",
																				"lValueRequested": false,
																				"names": [],
																				"nodeType": "FunctionCall",
																				"src": "1784:42:8",
																				"tryCall": false,
																				"typeDescriptions": {
																					"typeIdentifier": "t_bytes32",
																					"typeString": "bytes32"
																				}
																			},
																			"src": "1769:57:8",
																			"typeDescriptions": {
																				"typeIdentifier": "t_bytes32",
																				"typeString": "bytes32"
																			}
																		},
																		"id": 881,
																		"nodeType": "ExpressionStatement",
																		"src": "1769:57:8"
																	}
																]
															}
														}
													]
												},
												"condition": {
													"commonType": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													},
													"id": 862,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"lValueRequested": false,
													"leftExpression": {
														"id": 859,
														"name": "i",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 856,
														"src": "1557:1:8",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														}
													},
													"nodeType": "BinaryOperation",
													"operator": "<",
													"rightExpression": {
														"expression": {
															"id": 860,
															"name": "proof",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 844,
															"src": "1561:5:8",
															"typeDescriptions": {
																"typeIdentifier": "t_array$_t_bytes32_$dyn_memory_ptr",
																"typeString": "bytes32[] memory"
															}
														},
														"id": 861,
														"isConstant": false,
														"isLValue": false,
														"isPure": false,
														"lValueRequested": false,
														"memberName": "length",
														"nodeType": "MemberAccess",
														"src": "1561:12:8",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														}
													},
													"src": "1557:16:8",
													"typeDescriptions": {
														"typeIdentifier": "t_bool",
														"typeString": "bool"
													}
												},
												"id": 893,
												"initializationExpression": {
													"assignments": [
														856
													],
													"declarations": [
														{
															"constant": false,
															"id": 856,
															"mutability": "mutable",
															"name": "i",
															"nameLocation": "1550:1:8",
															"nodeType": "VariableDeclaration",
															"scope": 893,
															"src": "1542:9:8",
															"stateVariable": false,
															"storageLocation": "default",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															},
															"typeName": {
																"id": 855,
																"name": "uint256",
																"nodeType": "ElementaryTypeName",
																"src": "1542:7:8",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															},
															"visibility": "internal"
														}
													],
													"id": 858,
													"initialValue": {
														"hexValue": "30",
														"id": 857,
														"isConstant": false,
														"isLValue": false,
														"isPure": true,
														"kind": "number",
														"lValueRequested": false,
														"nodeType": "Literal",
														"src": "1554:1:8",
														"typeDescriptions": {
															"typeIdentifier": "t_rational_0_by_1",
															"typeString": "int_const 0"
														},
														"value": "0"
													},
													"nodeType": "VariableDeclarationStatement",
													"src": "1542:13:8"
												},
												"loopExpression": {
													"expression": {
														"id": 864,
														"isConstant": false,
														"isLValue": false,
														"isPure": false,
														"lValueRequested": false,
														"nodeType": "UnaryOperation",
														"operator": "++",
														"prefix": false,
														"src": "1575:3:8",
														"subExpression": {
															"id": 863,
															"name": "i",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 856,
															"src": "1575:1:8",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														},
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														}
													},
													"id": 865,
													"nodeType": "ExpressionStatement",
													"src": "1575:3:8"
												},
												"nodeType": "ForStatement",
												"src": "1537:488:8"
											},
											{
												"expression": {
													"id": 894,
													"name": "computedHash",
													"nodeType": "Identifier",
													"overloadedDeclarations": [],
													"referencedDeclaration": 852,
													"src": "2041:12:8",
													"typeDescriptions": {
														"typeIdentifier": "t_bytes32",
														"typeString": "bytes32"
													}
												},
												"functionReturnParameters": 850,
												"id": 895,
												"nodeType": "Return",
												"src": "2034:19:8"
											}
										]
									},
									"documentation": {
										"id": 841,
										"nodeType": "StructuredDocumentation",
										"src": "1052:341:8",
										"text": " @dev Returns the rebuilt hash obtained by traversing a Merklee tree up\n from `leaf` using `proof`. A `proof` is valid if and only if the rebuilt\n hash matches the root of the tree. When processing the proof, the pairs\n of leafs & pre-images are assumed to be sorted.\n _Available since v4.4._"
									},
									"id": 897,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "processProof",
									"nameLocation": "1407:12:8",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 847,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 844,
												"mutability": "mutable",
												"name": "proof",
												"nameLocation": "1437:5:8",
												"nodeType": "VariableDeclaration",
												"scope": 897,
												"src": "1420:22:8",
												"stateVariable": false,
												"storageLocation": "memory",
												"typeDescriptions": {
													"typeIdentifier": "t_array$_t_bytes32_$dyn_memory_ptr",
													"typeString": "bytes32[]"
												},
												"typeName": {
													"baseType": {
														"id": 842,
														"name": "bytes32",
														"nodeType": "ElementaryTypeName",
														"src": "1420:7:8",
														"typeDescriptions": {
															"typeIdentifier": "t_bytes32",
															"typeString": "bytes32"
														}
													},
													"id": 843,
													"nodeType": "ArrayTypeName",
													"src": "1420:9:8",
													"typeDescriptions": {
														"typeIdentifier": "t_array$_t_bytes32_$dyn_storage_ptr",
														"typeString": "bytes32[]"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 846,
												"mutability": "mutable",
												"name": "leaf",
												"nameLocation": "1452:4:8",
												"nodeType": "VariableDeclaration",
												"scope": 897,
												"src": "1444:12:8",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_bytes32",
													"typeString": "bytes32"
												},
												"typeName": {
													"id": 845,
													"name": "bytes32",
													"nodeType": "ElementaryTypeName",
													"src": "1444:7:8",
													"typeDescriptions": {
														"typeIdentifier": "t_bytes32",
														"typeString": "bytes32"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "1419:38:8"
									},
									"returnParameters": {
										"id": 850,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 849,
												"mutability": "mutable",
												"name": "",
												"nameLocation": "-1:-1:-1",
												"nodeType": "VariableDeclaration",
												"scope": 897,
												"src": "1481:7:8",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_bytes32",
													"typeString": "bytes32"
												},
												"typeName": {
													"id": 848,
													"name": "bytes32",
													"nodeType": "ElementaryTypeName",
													"src": "1481:7:8",
													"typeDescriptions": {
														"typeIdentifier": "t_bytes32",
														"typeString": "bytes32"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "1480:9:8"
									},
									"scope": 909,
									"src": "1398:662:8",
									"stateMutability": "pure",
									"virtual": false,
									"visibility": "internal"
								},
								{
									"body": {
										"id": 907,
										"nodeType": "Block",
										"src": "2149:135:8",
										"statements": [
											{
												"AST": {
													"nodeType": "YulBlock",
													"src": "2168:110:8",
													"statements": [
														{
															"expression": {
																"arguments": [
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "2189:4:8",
																		"type": "",
																		"value": "0x00"
																	},
																	{
																		"name": "a",
																		"nodeType": "YulIdentifier",
																		"src": "2195:1:8"
																	}
																],
																"functionName": {
																	"name": "mstore",
																	"nodeType": "YulIdentifier",
																	"src": "2182:6:8"
																},
																"nodeType": "YulFunctionCall",
																"src": "2182:15:8"
															},
															"nodeType": "YulExpressionStatement",
															"src": "2182:15:8"
														},
														{
															"expression": {
																"arguments": [
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "2217:4:8",
																		"type": "",
																		"value": "0x20"
																	},
																	{
																		"name": "b",
																		"nodeType": "YulIdentifier",
																		"src": "2223:1:8"
																	}
																],
																"functionName": {
																	"name": "mstore",
																	"nodeType": "YulIdentifier",
																	"src": "2210:6:8"
																},
																"nodeType": "YulFunctionCall",
																"src": "2210:15:8"
															},
															"nodeType": "YulExpressionStatement",
															"src": "2210:15:8"
														},
														{
															"nodeType": "YulAssignment",
															"src": "2238:30:8",
															"value": {
																"arguments": [
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "2257:4:8",
																		"type": "",
																		"value": "0x00"
																	},
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "2263:4:8",
																		"type": "",
																		"value": "0x40"
																	}
																],
																"functionName": {
																	"name": "keccak256",
																	"nodeType": "YulIdentifier",
																	"src": "2247:9:8"
																},
																"nodeType": "YulFunctionCall",
																"src": "2247:21:8"
															},
															"variableNames": [
																{
																	"name": "value",
																	"nodeType": "YulIdentifier",
																	"src": "2238:5:8"
																}
															]
														}
													]
												},
												"evmVersion": "london",
												"externalReferences": [
													{
														"declaration": 899,
														"isOffset": false,
														"isSlot": false,
														"src": "2195:1:8",
														"valueSize": 1
													},
													{
														"declaration": 901,
														"isOffset": false,
														"isSlot": false,
														"src": "2223:1:8",
														"valueSize": 1
													},
													{
														"declaration": 904,
														"isOffset": false,
														"isSlot": false,
														"src": "2238:5:8",
														"valueSize": 1
													}
												],
												"id": 906,
												"nodeType": "InlineAssembly",
												"src": "2159:119:8"
											}
										]
									},
									"id": 908,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "_efficientHash",
									"nameLocation": "2075:14:8",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 902,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 899,
												"mutability": "mutable",
												"name": "a",
												"nameLocation": "2098:1:8",
												"nodeType": "VariableDeclaration",
												"scope": 908,
												"src": "2090:9:8",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_bytes32",
													"typeString": "bytes32"
												},
												"typeName": {
													"id": 898,
													"name": "bytes32",
													"nodeType": "ElementaryTypeName",
													"src": "2090:7:8",
													"typeDescriptions": {
														"typeIdentifier": "t_bytes32",
														"typeString": "bytes32"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 901,
												"mutability": "mutable",
												"name": "b",
												"nameLocation": "2109:1:8",
												"nodeType": "VariableDeclaration",
												"scope": 908,
												"src": "2101:9:8",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_bytes32",
													"typeString": "bytes32"
												},
												"typeName": {
													"id": 900,
													"name": "bytes32",
													"nodeType": "ElementaryTypeName",
													"src": "2101:7:8",
													"typeDescriptions": {
														"typeIdentifier": "t_bytes32",
														"typeString": "bytes32"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "2089:22:8"
									},
									"returnParameters": {
										"id": 905,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 904,
												"mutability": "mutable",
												"name": "value",
												"nameLocation": "2142:5:8",
												"nodeType": "VariableDeclaration",
												"scope": 908,
												"src": "2134:13:8",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_bytes32",
													"typeString": "bytes32"
												},
												"typeName": {
													"id": 903,
													"name": "bytes32",
													"nodeType": "ElementaryTypeName",
													"src": "2134:7:8",
													"typeDescriptions": {
														"typeIdentifier": "t_bytes32",
														"typeString": "bytes32"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "2133:15:8"
									},
									"scope": 909,
									"src": "2066:218:8",
									"stateMutability": "pure",
									"virtual": false,
									"visibility": "private"
								}
							],
							"scope": 910,
							"src": "508:1778:8",
							"usedErrors": []
						}
					],
					"src": "118:2169:8"
				},
				"id": 8
			},
			"@openzeppelin/contracts/utils/introspection/ERC165.sol": {
				"ast": {
					"absolutePath": "@openzeppelin/contracts/utils/introspection/ERC165.sol",
					"exportedSymbols": {
						"ERC165": [
							933
						],
						"IERC165": [
							945
						]
					},
					"id": 934,
					"license": "MIT",
					"nodeType": "SourceUnit",
					"nodes": [
						{
							"id": 911,
							"literals": [
								"solidity",
								"^",
								"0.8",
								".0"
							],
							"nodeType": "PragmaDirective",
							"src": "99:23:9"
						},
						{
							"absolutePath": "@openzeppelin/contracts/utils/introspection/IERC165.sol",
							"file": "./IERC165.sol",
							"id": 912,
							"nameLocation": "-1:-1:-1",
							"nodeType": "ImportDirective",
							"scope": 934,
							"sourceUnit": 946,
							"src": "124:23:9",
							"symbolAliases": [],
							"unitAlias": ""
						},
						{
							"abstract": true,
							"baseContracts": [
								{
									"baseName": {
										"id": 914,
										"name": "IERC165",
										"nodeType": "IdentifierPath",
										"referencedDeclaration": 945,
										"src": "754:7:9"
									},
									"id": 915,
									"nodeType": "InheritanceSpecifier",
									"src": "754:7:9"
								}
							],
							"canonicalName": "ERC165",
							"contractDependencies": [],
							"contractKind": "contract",
							"documentation": {
								"id": 913,
								"nodeType": "StructuredDocumentation",
								"src": "149:576:9",
								"text": " @dev Implementation of the {IERC165} interface.\n Contracts that want to implement ERC165 should inherit from this contract and override {supportsInterface} to check\n for the additional interface id that will be supported. For example:\n ```solidity\n function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\n     return interfaceId == type(MyInterface).interfaceId || super.supportsInterface(interfaceId);\n }\n ```\n Alternatively, {ERC165Storage} provides an easier to use but more expensive implementation."
							},
							"fullyImplemented": true,
							"id": 933,
							"linearizedBaseContracts": [
								933,
								945
							],
							"name": "ERC165",
							"nameLocation": "744:6:9",
							"nodeType": "ContractDefinition",
							"nodes": [
								{
									"baseFunctions": [
										944
									],
									"body": {
										"id": 931,
										"nodeType": "Block",
										"src": "920:64:9",
										"statements": [
											{
												"expression": {
													"commonType": {
														"typeIdentifier": "t_bytes4",
														"typeString": "bytes4"
													},
													"id": 929,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"lValueRequested": false,
													"leftExpression": {
														"id": 924,
														"name": "interfaceId",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 918,
														"src": "937:11:9",
														"typeDescriptions": {
															"typeIdentifier": "t_bytes4",
															"typeString": "bytes4"
														}
													},
													"nodeType": "BinaryOperation",
													"operator": "==",
													"rightExpression": {
														"expression": {
															"arguments": [
																{
																	"id": 926,
																	"name": "IERC165",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 945,
																	"src": "957:7:9",
																	"typeDescriptions": {
																		"typeIdentifier": "t_type$_t_contract$_IERC165_$945_$",
																		"typeString": "type(contract IERC165)"
																	}
																}
															],
															"expression": {
																"argumentTypes": [
																	{
																		"typeIdentifier": "t_type$_t_contract$_IERC165_$945_$",
																		"typeString": "type(contract IERC165)"
																	}
																],
																"id": 925,
																"name": "type",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 4294967269,
																"src": "952:4:9",
																"typeDescriptions": {
																	"typeIdentifier": "t_function_metatype_pure$__$returns$__$",
																	"typeString": "function () pure"
																}
															},
															"id": 927,
															"isConstant": false,
															"isLValue": false,
															"isPure": true,
															"kind": "functionCall",
															"lValueRequested": false,
															"names": [],
															"nodeType": "FunctionCall",
															"src": "952:13:9",
															"tryCall": false,
															"typeDescriptions": {
																"typeIdentifier": "t_magic_meta_type_t_contract$_IERC165_$945",
																"typeString": "type(contract IERC165)"
															}
														},
														"id": 928,
														"isConstant": false,
														"isLValue": false,
														"isPure": true,
														"lValueRequested": false,
														"memberName": "interfaceId",
														"nodeType": "MemberAccess",
														"src": "952:25:9",
														"typeDescriptions": {
															"typeIdentifier": "t_bytes4",
															"typeString": "bytes4"
														}
													},
													"src": "937:40:9",
													"typeDescriptions": {
														"typeIdentifier": "t_bool",
														"typeString": "bool"
													}
												},
												"functionReturnParameters": 923,
												"id": 930,
												"nodeType": "Return",
												"src": "930:47:9"
											}
										]
									},
									"documentation": {
										"id": 916,
										"nodeType": "StructuredDocumentation",
										"src": "768:56:9",
										"text": " @dev See {IERC165-supportsInterface}."
									},
									"functionSelector": "01ffc9a7",
									"id": 932,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "supportsInterface",
									"nameLocation": "838:17:9",
									"nodeType": "FunctionDefinition",
									"overrides": {
										"id": 920,
										"nodeType": "OverrideSpecifier",
										"overrides": [],
										"src": "896:8:9"
									},
									"parameters": {
										"id": 919,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 918,
												"mutability": "mutable",
												"name": "interfaceId",
												"nameLocation": "863:11:9",
												"nodeType": "VariableDeclaration",
												"scope": 932,
												"src": "856:18:9",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_bytes4",
													"typeString": "bytes4"
												},
												"typeName": {
													"id": 917,
													"name": "bytes4",
													"nodeType": "ElementaryTypeName",
													"src": "856:6:9",
													"typeDescriptions": {
														"typeIdentifier": "t_bytes4",
														"typeString": "bytes4"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "855:20:9"
									},
									"returnParameters": {
										"id": 923,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 922,
												"mutability": "mutable",
												"name": "",
												"nameLocation": "-1:-1:-1",
												"nodeType": "VariableDeclaration",
												"scope": 932,
												"src": "914:4:9",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_bool",
													"typeString": "bool"
												},
												"typeName": {
													"id": 921,
													"name": "bool",
													"nodeType": "ElementaryTypeName",
													"src": "914:4:9",
													"typeDescriptions": {
														"typeIdentifier": "t_bool",
														"typeString": "bool"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "913:6:9"
									},
									"scope": 933,
									"src": "829:155:9",
									"stateMutability": "view",
									"virtual": true,
									"visibility": "public"
								}
							],
							"scope": 934,
							"src": "726:260:9",
							"usedErrors": []
						}
					],
					"src": "99:888:9"
				},
				"id": 9
			},
			"@openzeppelin/contracts/utils/introspection/IERC165.sol": {
				"ast": {
					"absolutePath": "@openzeppelin/contracts/utils/introspection/IERC165.sol",
					"exportedSymbols": {
						"IERC165": [
							945
						]
					},
					"id": 946,
					"license": "MIT",
					"nodeType": "SourceUnit",
					"nodes": [
						{
							"id": 935,
							"literals": [
								"solidity",
								"^",
								"0.8",
								".0"
							],
							"nodeType": "PragmaDirective",
							"src": "100:23:10"
						},
						{
							"abstract": false,
							"baseContracts": [],
							"canonicalName": "IERC165",
							"contractDependencies": [],
							"contractKind": "interface",
							"documentation": {
								"id": 936,
								"nodeType": "StructuredDocumentation",
								"src": "125:279:10",
								"text": " @dev Interface of the ERC165 standard, as defined in the\n https://eips.ethereum.org/EIPS/eip-165[EIP].\n Implementers can declare support of contract interfaces, which can then be\n queried by others ({ERC165Checker}).\n For an implementation, see {ERC165}."
							},
							"fullyImplemented": false,
							"id": 945,
							"linearizedBaseContracts": [
								945
							],
							"name": "IERC165",
							"nameLocation": "415:7:10",
							"nodeType": "ContractDefinition",
							"nodes": [
								{
									"documentation": {
										"id": 937,
										"nodeType": "StructuredDocumentation",
										"src": "429:340:10",
										"text": " @dev Returns true if this contract implements the interface defined by\n `interfaceId`. See the corresponding\n https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section]\n to learn more about how these ids are created.\n This function call must use less than 30 000 gas."
									},
									"functionSelector": "01ffc9a7",
									"id": 944,
									"implemented": false,
									"kind": "function",
									"modifiers": [],
									"name": "supportsInterface",
									"nameLocation": "783:17:10",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 940,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 939,
												"mutability": "mutable",
												"name": "interfaceId",
												"nameLocation": "808:11:10",
												"nodeType": "VariableDeclaration",
												"scope": 944,
												"src": "801:18:10",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_bytes4",
													"typeString": "bytes4"
												},
												"typeName": {
													"id": 938,
													"name": "bytes4",
													"nodeType": "ElementaryTypeName",
													"src": "801:6:10",
													"typeDescriptions": {
														"typeIdentifier": "t_bytes4",
														"typeString": "bytes4"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "800:20:10"
									},
									"returnParameters": {
										"id": 943,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 942,
												"mutability": "mutable",
												"name": "",
												"nameLocation": "-1:-1:-1",
												"nodeType": "VariableDeclaration",
												"scope": 944,
												"src": "844:4:10",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_bool",
													"typeString": "bool"
												},
												"typeName": {
													"id": 941,
													"name": "bool",
													"nodeType": "ElementaryTypeName",
													"src": "844:4:10",
													"typeDescriptions": {
														"typeIdentifier": "t_bool",
														"typeString": "bool"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "843:6:10"
									},
									"scope": 945,
									"src": "774:76:10",
									"stateMutability": "view",
									"virtual": false,
									"visibility": "external"
								}
							],
							"scope": 946,
							"src": "405:447:10",
							"usedErrors": []
						}
					],
					"src": "100:753:10"
				},
				"id": 10
			},
			"contract/NewCryptoBullDogs.sol": {
				"ast": {
					"absolutePath": "contract/NewCryptoBullDogs.sol",
					"exportedSymbols": {
						"Address": [
							591
						],
						"ApprovalCallerNotOwnerNorApproved": [
							1426
						],
						"ApprovalQueryForNonexistentToken": [
							1428
						],
						"ApprovalToCurrentOwner": [
							1432
						],
						"ApproveToCaller": [
							1430
						],
						"AuxQueryForZeroAddress": [
							1440
						],
						"BalanceQueryForZeroAddress": [
							1434
						],
						"BurnedQueryForZeroAddress": [
							1438
						],
						"Context": [
							613
						],
						"CryptoBullDogsOfficial": [
							1414
						],
						"ERC165": [
							933
						],
						"ERC721A": [
							2729
						],
						"IERC165": [
							945
						],
						"IERC721": [
							220
						],
						"IERC721Enumerable": [
							269
						],
						"IERC721Metadata": [
							296
						],
						"IERC721Receiver": [
							238
						],
						"MerkleProof": [
							909
						],
						"MintToZeroAddress": [
							1442
						],
						"MintZeroQuantity": [
							1444
						],
						"MintedQueryForZeroAddress": [
							1436
						],
						"Ownable": [
							104
						],
						"OwnerIndexOutOfBounds": [
							1446
						],
						"OwnerQueryForNonexistentToken": [
							1448
						],
						"Strings": [
							816
						],
						"TokenIndexOutOfBounds": [
							1450
						],
						"TransferCallerNotOwnerNorApproved": [
							1452
						],
						"TransferFromIncorrectOwner": [
							1454
						],
						"TransferToNonERC721ReceiverImplementer": [
							1456
						],
						"TransferToZeroAddress": [
							1458
						],
						"URIQueryForNonexistentToken": [
							1460
						]
					},
					"id": 1415,
					"license": "MIT",
					"nodeType": "SourceUnit",
					"nodes": [
						{
							"id": 947,
							"literals": [
								"solidity",
								"^",
								"0.8",
								".9"
							],
							"nodeType": "PragmaDirective",
							"src": "32:23:11"
						},
						{
							"absolutePath": "erc721a/contracts/ERC721A.sol",
							"file": "erc721a/contracts/ERC721A.sol",
							"id": 948,
							"nameLocation": "-1:-1:-1",
							"nodeType": "ImportDirective",
							"scope": 1415,
							"sourceUnit": 2730,
							"src": "57:39:11",
							"symbolAliases": [],
							"unitAlias": ""
						},
						{
							"absolutePath": "@openzeppelin/contracts/access/Ownable.sol",
							"file": "@openzeppelin/contracts/access/Ownable.sol",
							"id": 949,
							"nameLocation": "-1:-1:-1",
							"nodeType": "ImportDirective",
							"scope": 1415,
							"sourceUnit": 105,
							"src": "97:52:11",
							"symbolAliases": [],
							"unitAlias": ""
						},
						{
							"absolutePath": "@openzeppelin/contracts/utils/cryptography/MerkleProof.sol",
							"file": "@openzeppelin/contracts/utils/cryptography/MerkleProof.sol",
							"id": 950,
							"nameLocation": "-1:-1:-1",
							"nodeType": "ImportDirective",
							"scope": 1415,
							"sourceUnit": 910,
							"src": "150:68:11",
							"symbolAliases": [],
							"unitAlias": ""
						},
						{
							"abstract": false,
							"baseContracts": [
								{
									"baseName": {
										"id": 951,
										"name": "ERC721A",
										"nodeType": "IdentifierPath",
										"referencedDeclaration": 2729,
										"src": "255:7:11"
									},
									"id": 952,
									"nodeType": "InheritanceSpecifier",
									"src": "255:7:11"
								},
								{
									"baseName": {
										"id": 953,
										"name": "Ownable",
										"nodeType": "IdentifierPath",
										"referencedDeclaration": 104,
										"src": "264:7:11"
									},
									"id": 954,
									"nodeType": "InheritanceSpecifier",
									"src": "264:7:11"
								}
							],
							"canonicalName": "CryptoBullDogsOfficial",
							"contractDependencies": [],
							"contractKind": "contract",
							"fullyImplemented": true,
							"id": 1414,
							"linearizedBaseContracts": [
								1414,
								104,
								2729,
								296,
								220,
								933,
								945,
								613
							],
							"name": "CryptoBullDogsOfficial",
							"nameLocation": "229:22:11",
							"nodeType": "ContractDefinition",
							"nodes": [
								{
									"id": 957,
									"libraryName": {
										"id": 955,
										"name": "Strings",
										"nodeType": "IdentifierPath",
										"referencedDeclaration": 816,
										"src": "283:7:11"
									},
									"nodeType": "UsingForDirective",
									"src": "277:26:11",
									"typeName": {
										"id": 956,
										"name": "uint256",
										"nodeType": "ElementaryTypeName",
										"src": "295:7:11",
										"typeDescriptions": {
											"typeIdentifier": "t_uint256",
											"typeString": "uint256"
										}
									}
								},
								{
									"constant": true,
									"functionSelector": "32cb6b0c",
									"id": 960,
									"mutability": "constant",
									"name": "MAX_SUPPLY",
									"nameLocation": "333:10:11",
									"nodeType": "VariableDeclaration",
									"scope": 1414,
									"src": "309:41:11",
									"stateVariable": true,
									"storageLocation": "default",
									"typeDescriptions": {
										"typeIdentifier": "t_uint256",
										"typeString": "uint256"
									},
									"typeName": {
										"id": 958,
										"name": "uint256",
										"nodeType": "ElementaryTypeName",
										"src": "309:7:11",
										"typeDescriptions": {
											"typeIdentifier": "t_uint256",
											"typeString": "uint256"
										}
									},
									"value": {
										"hexValue": "32323232",
										"id": 959,
										"isConstant": false,
										"isLValue": false,
										"isPure": true,
										"kind": "number",
										"lValueRequested": false,
										"nodeType": "Literal",
										"src": "346:4:11",
										"typeDescriptions": {
											"typeIdentifier": "t_rational_2222_by_1",
											"typeString": "int_const 2222"
										},
										"value": "2222"
									},
									"visibility": "public"
								},
								{
									"constant": true,
									"functionSelector": "65f13097",
									"id": 963,
									"mutability": "constant",
									"name": "MAX_PUBLIC_MINT",
									"nameLocation": "380:15:11",
									"nodeType": "VariableDeclaration",
									"scope": 1414,
									"src": "356:44:11",
									"stateVariable": true,
									"storageLocation": "default",
									"typeDescriptions": {
										"typeIdentifier": "t_uint256",
										"typeString": "uint256"
									},
									"typeName": {
										"id": 961,
										"name": "uint256",
										"nodeType": "ElementaryTypeName",
										"src": "356:7:11",
										"typeDescriptions": {
											"typeIdentifier": "t_uint256",
											"typeString": "uint256"
										}
									},
									"value": {
										"hexValue": "3130",
										"id": 962,
										"isConstant": false,
										"isLValue": false,
										"isPure": true,
										"kind": "number",
										"lValueRequested": false,
										"nodeType": "Literal",
										"src": "398:2:11",
										"typeDescriptions": {
											"typeIdentifier": "t_rational_10_by_1",
											"typeString": "int_const 10"
										},
										"value": "10"
									},
									"visibility": "public"
								},
								{
									"constant": true,
									"functionSelector": "c08dfd3c",
									"id": 966,
									"mutability": "constant",
									"name": "MAX_WHITELIST_MINT",
									"nameLocation": "430:18:11",
									"nodeType": "VariableDeclaration",
									"scope": 1414,
									"src": "406:47:11",
									"stateVariable": true,
									"storageLocation": "default",
									"typeDescriptions": {
										"typeIdentifier": "t_uint256",
										"typeString": "uint256"
									},
									"typeName": {
										"id": 964,
										"name": "uint256",
										"nodeType": "ElementaryTypeName",
										"src": "406:7:11",
										"typeDescriptions": {
											"typeIdentifier": "t_uint256",
											"typeString": "uint256"
										}
									},
									"value": {
										"hexValue": "3130",
										"id": 965,
										"isConstant": false,
										"isLValue": false,
										"isPure": true,
										"kind": "number",
										"lValueRequested": false,
										"nodeType": "Literal",
										"src": "451:2:11",
										"typeDescriptions": {
											"typeIdentifier": "t_rational_10_by_1",
											"typeString": "int_const 10"
										},
										"value": "10"
									},
									"visibility": "public"
								},
								{
									"constant": true,
									"functionSelector": "07e89ec0",
									"id": 969,
									"mutability": "constant",
									"name": "PUBLIC_SALE_PRICE",
									"nameLocation": "483:17:11",
									"nodeType": "VariableDeclaration",
									"scope": 1414,
									"src": "459:53:11",
									"stateVariable": true,
									"storageLocation": "default",
									"typeDescriptions": {
										"typeIdentifier": "t_uint256",
										"typeString": "uint256"
									},
									"typeName": {
										"id": 967,
										"name": "uint256",
										"nodeType": "ElementaryTypeName",
										"src": "459:7:11",
										"typeDescriptions": {
											"typeIdentifier": "t_uint256",
											"typeString": "uint256"
										}
									},
									"value": {
										"hexValue": "2e3034",
										"id": 968,
										"isConstant": false,
										"isLValue": false,
										"isPure": true,
										"kind": "number",
										"lValueRequested": false,
										"nodeType": "Literal",
										"src": "503:9:11",
										"subdenomination": "ether",
										"typeDescriptions": {
											"typeIdentifier": "t_rational_40000000000000000_by_1",
											"typeString": "int_const 40000000000000000"
										},
										"value": ".04"
									},
									"visibility": "public"
								},
								{
									"constant": true,
									"functionSelector": "bc912e1a",
									"id": 972,
									"mutability": "constant",
									"name": "WHITELIST_SALE_PRICE",
									"nameLocation": "542:20:11",
									"nodeType": "VariableDeclaration",
									"scope": 1414,
									"src": "518:56:11",
									"stateVariable": true,
									"storageLocation": "default",
									"typeDescriptions": {
										"typeIdentifier": "t_uint256",
										"typeString": "uint256"
									},
									"typeName": {
										"id": 970,
										"name": "uint256",
										"nodeType": "ElementaryTypeName",
										"src": "518:7:11",
										"typeDescriptions": {
											"typeIdentifier": "t_uint256",
											"typeString": "uint256"
										}
									},
									"value": {
										"hexValue": "2e3033",
										"id": 971,
										"isConstant": false,
										"isLValue": false,
										"isPure": true,
										"kind": "number",
										"lValueRequested": false,
										"nodeType": "Literal",
										"src": "565:9:11",
										"subdenomination": "ether",
										"typeDescriptions": {
											"typeIdentifier": "t_rational_30000000000000000_by_1",
											"typeString": "int_const 30000000000000000"
										},
										"value": ".03"
									},
									"visibility": "public"
								},
								{
									"constant": false,
									"id": 974,
									"mutability": "mutable",
									"name": "baseTokenUri",
									"nameLocation": "597:12:11",
									"nodeType": "VariableDeclaration",
									"scope": 1414,
									"src": "581:28:11",
									"stateVariable": true,
									"storageLocation": "default",
									"typeDescriptions": {
										"typeIdentifier": "t_string_storage",
										"typeString": "string"
									},
									"typeName": {
										"id": 973,
										"name": "string",
										"nodeType": "ElementaryTypeName",
										"src": "581:6:11",
										"typeDescriptions": {
											"typeIdentifier": "t_string_storage_ptr",
											"typeString": "string"
										}
									},
									"visibility": "private"
								},
								{
									"constant": false,
									"functionSelector": "4cf5f7a4",
									"id": 976,
									"mutability": "mutable",
									"name": "placeholderTokenUri",
									"nameLocation": "631:19:11",
									"nodeType": "VariableDeclaration",
									"scope": 1414,
									"src": "615:35:11",
									"stateVariable": true,
									"storageLocation": "default",
									"typeDescriptions": {
										"typeIdentifier": "t_string_storage",
										"typeString": "string"
									},
									"typeName": {
										"id": 975,
										"name": "string",
										"nodeType": "ElementaryTypeName",
										"src": "615:6:11",
										"typeDescriptions": {
											"typeIdentifier": "t_string_storage_ptr",
											"typeString": "string"
										}
									},
									"visibility": "public"
								},
								{
									"constant": false,
									"functionSelector": "54214f69",
									"id": 978,
									"mutability": "mutable",
									"name": "isRevealed",
									"nameLocation": "782:10:11",
									"nodeType": "VariableDeclaration",
									"scope": 1414,
									"src": "770:22:11",
									"stateVariable": true,
									"storageLocation": "default",
									"typeDescriptions": {
										"typeIdentifier": "t_bool",
										"typeString": "bool"
									},
									"typeName": {
										"id": 977,
										"name": "bool",
										"nodeType": "ElementaryTypeName",
										"src": "770:4:11",
										"typeDescriptions": {
											"typeIdentifier": "t_bool",
											"typeString": "bool"
										}
									},
									"visibility": "public"
								},
								{
									"constant": false,
									"functionSelector": "33bc1c5c",
									"id": 980,
									"mutability": "mutable",
									"name": "publicSale",
									"nameLocation": "810:10:11",
									"nodeType": "VariableDeclaration",
									"scope": 1414,
									"src": "798:22:11",
									"stateVariable": true,
									"storageLocation": "default",
									"typeDescriptions": {
										"typeIdentifier": "t_bool",
										"typeString": "bool"
									},
									"typeName": {
										"id": 979,
										"name": "bool",
										"nodeType": "ElementaryTypeName",
										"src": "798:4:11",
										"typeDescriptions": {
											"typeIdentifier": "t_bool",
											"typeString": "bool"
										}
									},
									"visibility": "public"
								},
								{
									"constant": false,
									"functionSelector": "86a173ee",
									"id": 982,
									"mutability": "mutable",
									"name": "whiteListSale",
									"nameLocation": "838:13:11",
									"nodeType": "VariableDeclaration",
									"scope": 1414,
									"src": "826:25:11",
									"stateVariable": true,
									"storageLocation": "default",
									"typeDescriptions": {
										"typeIdentifier": "t_bool",
										"typeString": "bool"
									},
									"typeName": {
										"id": 981,
										"name": "bool",
										"nodeType": "ElementaryTypeName",
										"src": "826:4:11",
										"typeDescriptions": {
											"typeIdentifier": "t_bool",
											"typeString": "bool"
										}
									},
									"visibility": "public"
								},
								{
									"constant": false,
									"functionSelector": "8456cb59",
									"id": 984,
									"mutability": "mutable",
									"name": "pause",
									"nameLocation": "869:5:11",
									"nodeType": "VariableDeclaration",
									"scope": 1414,
									"src": "857:17:11",
									"stateVariable": true,
									"storageLocation": "default",
									"typeDescriptions": {
										"typeIdentifier": "t_bool",
										"typeString": "bool"
									},
									"typeName": {
										"id": 983,
										"name": "bool",
										"nodeType": "ElementaryTypeName",
										"src": "857:4:11",
										"typeDescriptions": {
											"typeIdentifier": "t_bool",
											"typeString": "bool"
										}
									},
									"visibility": "public"
								},
								{
									"constant": false,
									"functionSelector": "e8b5498d",
									"id": 986,
									"mutability": "mutable",
									"name": "teamMinted",
									"nameLocation": "892:10:11",
									"nodeType": "VariableDeclaration",
									"scope": 1414,
									"src": "880:22:11",
									"stateVariable": true,
									"storageLocation": "default",
									"typeDescriptions": {
										"typeIdentifier": "t_bool",
										"typeString": "bool"
									},
									"typeName": {
										"id": 985,
										"name": "bool",
										"nodeType": "ElementaryTypeName",
										"src": "880:4:11",
										"typeDescriptions": {
											"typeIdentifier": "t_bool",
											"typeString": "bool"
										}
									},
									"visibility": "public"
								},
								{
									"constant": false,
									"id": 988,
									"mutability": "mutable",
									"name": "merkleRoot",
									"nameLocation": "925:10:11",
									"nodeType": "VariableDeclaration",
									"scope": 1414,
									"src": "909:26:11",
									"stateVariable": true,
									"storageLocation": "default",
									"typeDescriptions": {
										"typeIdentifier": "t_bytes32",
										"typeString": "bytes32"
									},
									"typeName": {
										"id": 987,
										"name": "bytes32",
										"nodeType": "ElementaryTypeName",
										"src": "909:7:11",
										"typeDescriptions": {
											"typeIdentifier": "t_bytes32",
											"typeString": "bytes32"
										}
									},
									"visibility": "private"
								},
								{
									"constant": false,
									"functionSelector": "1c16521c",
									"id": 992,
									"mutability": "mutable",
									"name": "totalPublicMint",
									"nameLocation": "977:15:11",
									"nodeType": "VariableDeclaration",
									"scope": 1414,
									"src": "942:50:11",
									"stateVariable": true,
									"storageLocation": "default",
									"typeDescriptions": {
										"typeIdentifier": "t_mapping$_t_address_$_t_uint256_$",
										"typeString": "mapping(address => uint256)"
									},
									"typeName": {
										"id": 991,
										"keyType": {
											"id": 989,
											"name": "address",
											"nodeType": "ElementaryTypeName",
											"src": "950:7:11",
											"typeDescriptions": {
												"typeIdentifier": "t_address",
												"typeString": "address"
											}
										},
										"nodeType": "Mapping",
										"src": "942:27:11",
										"typeDescriptions": {
											"typeIdentifier": "t_mapping$_t_address_$_t_uint256_$",
											"typeString": "mapping(address => uint256)"
										},
										"valueType": {
											"id": 990,
											"name": "uint256",
											"nodeType": "ElementaryTypeName",
											"src": "961:7:11",
											"typeDescriptions": {
												"typeIdentifier": "t_uint256",
												"typeString": "uint256"
											}
										}
									},
									"visibility": "public"
								},
								{
									"constant": false,
									"functionSelector": "0345e3cb",
									"id": 996,
									"mutability": "mutable",
									"name": "totalWhitelistMint",
									"nameLocation": "1033:18:11",
									"nodeType": "VariableDeclaration",
									"scope": 1414,
									"src": "998:53:11",
									"stateVariable": true,
									"storageLocation": "default",
									"typeDescriptions": {
										"typeIdentifier": "t_mapping$_t_address_$_t_uint256_$",
										"typeString": "mapping(address => uint256)"
									},
									"typeName": {
										"id": 995,
										"keyType": {
											"id": 993,
											"name": "address",
											"nodeType": "ElementaryTypeName",
											"src": "1006:7:11",
											"typeDescriptions": {
												"typeIdentifier": "t_address",
												"typeString": "address"
											}
										},
										"nodeType": "Mapping",
										"src": "998:27:11",
										"typeDescriptions": {
											"typeIdentifier": "t_mapping$_t_address_$_t_uint256_$",
											"typeString": "mapping(address => uint256)"
										},
										"valueType": {
											"id": 994,
											"name": "uint256",
											"nodeType": "ElementaryTypeName",
											"src": "1017:7:11",
											"typeDescriptions": {
												"typeIdentifier": "t_uint256",
												"typeString": "uint256"
											}
										}
									},
									"visibility": "public"
								},
								{
									"body": {
										"id": 1003,
										"nodeType": "Block",
										"src": "1113:8:11",
										"statements": []
									},
									"id": 1004,
									"implemented": true,
									"kind": "constructor",
									"modifiers": [
										{
											"arguments": [
												{
													"hexValue": "43727970746f42756c6c446f6773204f6666696369616c",
													"id": 999,
													"isConstant": false,
													"isLValue": false,
													"isPure": true,
													"kind": "string",
													"lValueRequested": false,
													"nodeType": "Literal",
													"src": "1080:25:11",
													"typeDescriptions": {
														"typeIdentifier": "t_stringliteral_ed509f4626e8c8d44906e3236ce6742af27a97a8b9a6cd9d18a96d7119f864d2",
														"typeString": "literal_string \"CryptoBullDogs Official\""
													},
													"value": "CryptoBullDogs Official"
												},
												{
													"hexValue": "434244",
													"id": 1000,
													"isConstant": false,
													"isLValue": false,
													"isPure": true,
													"kind": "string",
													"lValueRequested": false,
													"nodeType": "Literal",
													"src": "1107:5:11",
													"typeDescriptions": {
														"typeIdentifier": "t_stringliteral_d8c6c435ceb07c3fa57740c2ce8721c21594e5f3bfdac8cb265fe23cf4d9e0db",
														"typeString": "literal_string \"CBD\""
													},
													"value": "CBD"
												}
											],
											"id": 1001,
											"kind": "baseConstructorSpecifier",
											"modifierName": {
												"id": 998,
												"name": "ERC721A",
												"nodeType": "IdentifierPath",
												"referencedDeclaration": 2729,
												"src": "1072:7:11"
											},
											"nodeType": "ModifierInvocation",
											"src": "1072:41:11"
										}
									],
									"name": "",
									"nameLocation": "-1:-1:-1",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 997,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "1069:2:11"
									},
									"returnParameters": {
										"id": 1002,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "1113:0:11"
									},
									"scope": 1414,
									"src": "1058:63:11",
									"stateMutability": "nonpayable",
									"virtual": false,
									"visibility": "public"
								},
								{
									"body": {
										"id": 1016,
										"nodeType": "Block",
										"src": "1151:112:11",
										"statements": [
											{
												"expression": {
													"arguments": [
														{
															"commonType": {
																"typeIdentifier": "t_address",
																"typeString": "address"
															},
															"id": 1011,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"lValueRequested": false,
															"leftExpression": {
																"expression": {
																	"id": 1007,
																	"name": "tx",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 4294967270,
																	"src": "1169:2:11",
																	"typeDescriptions": {
																		"typeIdentifier": "t_magic_transaction",
																		"typeString": "tx"
																	}
																},
																"id": 1008,
																"isConstant": false,
																"isLValue": false,
																"isPure": false,
																"lValueRequested": false,
																"memberName": "origin",
																"nodeType": "MemberAccess",
																"src": "1169:9:11",
																"typeDescriptions": {
																	"typeIdentifier": "t_address",
																	"typeString": "address"
																}
															},
															"nodeType": "BinaryOperation",
															"operator": "==",
															"rightExpression": {
																"expression": {
																	"id": 1009,
																	"name": "msg",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 4294967281,
																	"src": "1182:3:11",
																	"typeDescriptions": {
																		"typeIdentifier": "t_magic_message",
																		"typeString": "msg"
																	}
																},
																"id": 1010,
																"isConstant": false,
																"isLValue": false,
																"isPure": false,
																"lValueRequested": false,
																"memberName": "sender",
																"nodeType": "MemberAccess",
																"src": "1182:10:11",
																"typeDescriptions": {
																	"typeIdentifier": "t_address",
																	"typeString": "address"
																}
															},
															"src": "1169:23:11",
															"typeDescriptions": {
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															}
														},
														{
															"hexValue": "43727970746f42756c6c446f6773203a3a2043616e6e6f742062652063616c6c6564206279206120636f6e7472616374",
															"id": 1012,
															"isConstant": false,
															"isLValue": false,
															"isPure": true,
															"kind": "string",
															"lValueRequested": false,
															"nodeType": "Literal",
															"src": "1194:50:11",
															"typeDescriptions": {
																"typeIdentifier": "t_stringliteral_0b39a6345f34c8d3711dfee0a8d6f2ec7300f78ff8b109391ba42a768c3501b2",
																"typeString": "literal_string \"CryptoBullDogs :: Cannot be called by a contract\""
															},
															"value": "CryptoBullDogs :: Cannot be called by a contract"
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															},
															{
																"typeIdentifier": "t_stringliteral_0b39a6345f34c8d3711dfee0a8d6f2ec7300f78ff8b109391ba42a768c3501b2",
																"typeString": "literal_string \"CryptoBullDogs :: Cannot be called by a contract\""
															}
														],
														"id": 1006,
														"name": "require",
														"nodeType": "Identifier",
														"overloadedDeclarations": [
															4294967278,
															4294967278
														],
														"referencedDeclaration": 4294967278,
														"src": "1161:7:11",
														"typeDescriptions": {
															"typeIdentifier": "t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$",
															"typeString": "function (bool,string memory) pure"
														}
													},
													"id": 1013,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"names": [],
													"nodeType": "FunctionCall",
													"src": "1161:84:11",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_tuple$__$",
														"typeString": "tuple()"
													}
												},
												"id": 1014,
												"nodeType": "ExpressionStatement",
												"src": "1161:84:11"
											},
											{
												"id": 1015,
												"nodeType": "PlaceholderStatement",
												"src": "1255:1:11"
											}
										]
									},
									"id": 1017,
									"name": "callerIsUser",
									"nameLocation": "1136:12:11",
									"nodeType": "ModifierDefinition",
									"parameters": {
										"id": 1005,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "1148:2:11"
									},
									"src": "1127:136:11",
									"virtual": false,
									"visibility": "internal"
								},
								{
									"body": {
										"id": 1077,
										"nodeType": "Block",
										"src": "1331:479:11",
										"statements": [
											{
												"expression": {
													"arguments": [
														{
															"id": 1025,
															"name": "publicSale",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 980,
															"src": "1349:10:11",
															"typeDescriptions": {
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															}
														},
														{
															"hexValue": "43727970746f42756c6c446f6773203a3a204e6f7420596574204163746976652e",
															"id": 1026,
															"isConstant": false,
															"isLValue": false,
															"isPure": true,
															"kind": "string",
															"lValueRequested": false,
															"nodeType": "Literal",
															"src": "1361:35:11",
															"typeDescriptions": {
																"typeIdentifier": "t_stringliteral_4564d982d90210332958c1167d5b8793ec62b7f630d1d2edde455ef94ad8862d",
																"typeString": "literal_string \"CryptoBullDogs :: Not Yet Active.\""
															},
															"value": "CryptoBullDogs :: Not Yet Active."
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															},
															{
																"typeIdentifier": "t_stringliteral_4564d982d90210332958c1167d5b8793ec62b7f630d1d2edde455ef94ad8862d",
																"typeString": "literal_string \"CryptoBullDogs :: Not Yet Active.\""
															}
														],
														"id": 1024,
														"name": "require",
														"nodeType": "Identifier",
														"overloadedDeclarations": [
															4294967278,
															4294967278
														],
														"referencedDeclaration": 4294967278,
														"src": "1341:7:11",
														"typeDescriptions": {
															"typeIdentifier": "t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$",
															"typeString": "function (bool,string memory) pure"
														}
													},
													"id": 1027,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"names": [],
													"nodeType": "FunctionCall",
													"src": "1341:56:11",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_tuple$__$",
														"typeString": "tuple()"
													}
												},
												"id": 1028,
												"nodeType": "ExpressionStatement",
												"src": "1341:56:11"
											},
											{
												"expression": {
													"arguments": [
														{
															"commonType": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															},
															"id": 1036,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"lValueRequested": false,
															"leftExpression": {
																"components": [
																	{
																		"commonType": {
																			"typeIdentifier": "t_uint256",
																			"typeString": "uint256"
																		},
																		"id": 1033,
																		"isConstant": false,
																		"isLValue": false,
																		"isPure": false,
																		"lValueRequested": false,
																		"leftExpression": {
																			"arguments": [],
																			"expression": {
																				"argumentTypes": [],
																				"id": 1030,
																				"name": "totalSupply",
																				"nodeType": "Identifier",
																				"overloadedDeclarations": [],
																				"referencedDeclaration": 1564,
																				"src": "1416:11:11",
																				"typeDescriptions": {
																					"typeIdentifier": "t_function_internal_view$__$returns$_t_uint256_$",
																					"typeString": "function () view returns (uint256)"
																				}
																			},
																			"id": 1031,
																			"isConstant": false,
																			"isLValue": false,
																			"isPure": false,
																			"kind": "functionCall",
																			"lValueRequested": false,
																			"names": [],
																			"nodeType": "FunctionCall",
																			"src": "1416:13:11",
																			"tryCall": false,
																			"typeDescriptions": {
																				"typeIdentifier": "t_uint256",
																				"typeString": "uint256"
																			}
																		},
																		"nodeType": "BinaryOperation",
																		"operator": "+",
																		"rightExpression": {
																			"id": 1032,
																			"name": "_quantity",
																			"nodeType": "Identifier",
																			"overloadedDeclarations": [],
																			"referencedDeclaration": 1019,
																			"src": "1432:9:11",
																			"typeDescriptions": {
																				"typeIdentifier": "t_uint256",
																				"typeString": "uint256"
																			}
																		},
																		"src": "1416:25:11",
																		"typeDescriptions": {
																			"typeIdentifier": "t_uint256",
																			"typeString": "uint256"
																		}
																	}
																],
																"id": 1034,
																"isConstant": false,
																"isInlineArray": false,
																"isLValue": false,
																"isPure": false,
																"lValueRequested": false,
																"nodeType": "TupleExpression",
																"src": "1415:27:11",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															},
															"nodeType": "BinaryOperation",
															"operator": "<=",
															"rightExpression": {
																"id": 1035,
																"name": "MAX_SUPPLY",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 960,
																"src": "1446:10:11",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															},
															"src": "1415:41:11",
															"typeDescriptions": {
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															}
														},
														{
															"hexValue": "43727970746f42756c6c446f6773203a3a204265796f6e64204d617820537570706c79",
															"id": 1037,
															"isConstant": false,
															"isLValue": false,
															"isPure": true,
															"kind": "string",
															"lValueRequested": false,
															"nodeType": "Literal",
															"src": "1458:37:11",
															"typeDescriptions": {
																"typeIdentifier": "t_stringliteral_b6c181b21e441452ee7d7a7c60b6959a4f4ea0ea4d2d03845776065ae0fba129",
																"typeString": "literal_string \"CryptoBullDogs :: Beyond Max Supply\""
															},
															"value": "CryptoBullDogs :: Beyond Max Supply"
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															},
															{
																"typeIdentifier": "t_stringliteral_b6c181b21e441452ee7d7a7c60b6959a4f4ea0ea4d2d03845776065ae0fba129",
																"typeString": "literal_string \"CryptoBullDogs :: Beyond Max Supply\""
															}
														],
														"id": 1029,
														"name": "require",
														"nodeType": "Identifier",
														"overloadedDeclarations": [
															4294967278,
															4294967278
														],
														"referencedDeclaration": 4294967278,
														"src": "1407:7:11",
														"typeDescriptions": {
															"typeIdentifier": "t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$",
															"typeString": "function (bool,string memory) pure"
														}
													},
													"id": 1038,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"names": [],
													"nodeType": "FunctionCall",
													"src": "1407:89:11",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_tuple$__$",
														"typeString": "tuple()"
													}
												},
												"id": 1039,
												"nodeType": "ExpressionStatement",
												"src": "1407:89:11"
											},
											{
												"expression": {
													"arguments": [
														{
															"commonType": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															},
															"id": 1049,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"lValueRequested": false,
															"leftExpression": {
																"components": [
																	{
																		"commonType": {
																			"typeIdentifier": "t_uint256",
																			"typeString": "uint256"
																		},
																		"id": 1046,
																		"isConstant": false,
																		"isLValue": false,
																		"isPure": false,
																		"lValueRequested": false,
																		"leftExpression": {
																			"baseExpression": {
																				"id": 1041,
																				"name": "totalPublicMint",
																				"nodeType": "Identifier",
																				"overloadedDeclarations": [],
																				"referencedDeclaration": 992,
																				"src": "1515:15:11",
																				"typeDescriptions": {
																					"typeIdentifier": "t_mapping$_t_address_$_t_uint256_$",
																					"typeString": "mapping(address => uint256)"
																				}
																			},
																			"id": 1044,
																			"indexExpression": {
																				"expression": {
																					"id": 1042,
																					"name": "msg",
																					"nodeType": "Identifier",
																					"overloadedDeclarations": [],
																					"referencedDeclaration": 4294967281,
																					"src": "1531:3:11",
																					"typeDescriptions": {
																						"typeIdentifier": "t_magic_message",
																						"typeString": "msg"
																					}
																				},
																				"id": 1043,
																				"isConstant": false,
																				"isLValue": false,
																				"isPure": false,
																				"lValueRequested": false,
																				"memberName": "sender",
																				"nodeType": "MemberAccess",
																				"src": "1531:10:11",
																				"typeDescriptions": {
																					"typeIdentifier": "t_address",
																					"typeString": "address"
																				}
																			},
																			"isConstant": false,
																			"isLValue": true,
																			"isPure": false,
																			"lValueRequested": false,
																			"nodeType": "IndexAccess",
																			"src": "1515:27:11",
																			"typeDescriptions": {
																				"typeIdentifier": "t_uint256",
																				"typeString": "uint256"
																			}
																		},
																		"nodeType": "BinaryOperation",
																		"operator": "+",
																		"rightExpression": {
																			"id": 1045,
																			"name": "_quantity",
																			"nodeType": "Identifier",
																			"overloadedDeclarations": [],
																			"referencedDeclaration": 1019,
																			"src": "1544:9:11",
																			"typeDescriptions": {
																				"typeIdentifier": "t_uint256",
																				"typeString": "uint256"
																			}
																		},
																		"src": "1515:38:11",
																		"typeDescriptions": {
																			"typeIdentifier": "t_uint256",
																			"typeString": "uint256"
																		}
																	}
																],
																"id": 1047,
																"isConstant": false,
																"isInlineArray": false,
																"isLValue": false,
																"isPure": false,
																"lValueRequested": false,
																"nodeType": "TupleExpression",
																"src": "1514:40:11",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															},
															"nodeType": "BinaryOperation",
															"operator": "<=",
															"rightExpression": {
																"id": 1048,
																"name": "MAX_PUBLIC_MINT",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 963,
																"src": "1558:15:11",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															},
															"src": "1514:59:11",
															"typeDescriptions": {
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															}
														},
														{
															"hexValue": "43727970746f42756c6c446f6773203a3a20416c7265616479206d696e74656420332074696d657321",
															"id": 1050,
															"isConstant": false,
															"isLValue": false,
															"isPure": true,
															"kind": "string",
															"lValueRequested": false,
															"nodeType": "Literal",
															"src": "1575:43:11",
															"typeDescriptions": {
																"typeIdentifier": "t_stringliteral_d50224ebe3461b0a303d65927b666a283fb32c6ac10a95714d9f0a81b05788d6",
																"typeString": "literal_string \"CryptoBullDogs :: Already minted 3 times!\""
															},
															"value": "CryptoBullDogs :: Already minted 3 times!"
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															},
															{
																"typeIdentifier": "t_stringliteral_d50224ebe3461b0a303d65927b666a283fb32c6ac10a95714d9f0a81b05788d6",
																"typeString": "literal_string \"CryptoBullDogs :: Already minted 3 times!\""
															}
														],
														"id": 1040,
														"name": "require",
														"nodeType": "Identifier",
														"overloadedDeclarations": [
															4294967278,
															4294967278
														],
														"referencedDeclaration": 4294967278,
														"src": "1506:7:11",
														"typeDescriptions": {
															"typeIdentifier": "t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$",
															"typeString": "function (bool,string memory) pure"
														}
													},
													"id": 1051,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"names": [],
													"nodeType": "FunctionCall",
													"src": "1506:113:11",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_tuple$__$",
														"typeString": "tuple()"
													}
												},
												"id": 1052,
												"nodeType": "ExpressionStatement",
												"src": "1506:113:11"
											},
											{
												"expression": {
													"arguments": [
														{
															"commonType": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															},
															"id": 1060,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"lValueRequested": false,
															"leftExpression": {
																"expression": {
																	"id": 1054,
																	"name": "msg",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 4294967281,
																	"src": "1637:3:11",
																	"typeDescriptions": {
																		"typeIdentifier": "t_magic_message",
																		"typeString": "msg"
																	}
																},
																"id": 1055,
																"isConstant": false,
																"isLValue": false,
																"isPure": false,
																"lValueRequested": false,
																"memberName": "value",
																"nodeType": "MemberAccess",
																"src": "1637:9:11",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															},
															"nodeType": "BinaryOperation",
															"operator": ">=",
															"rightExpression": {
																"components": [
																	{
																		"commonType": {
																			"typeIdentifier": "t_uint256",
																			"typeString": "uint256"
																		},
																		"id": 1058,
																		"isConstant": false,
																		"isLValue": false,
																		"isPure": false,
																		"lValueRequested": false,
																		"leftExpression": {
																			"id": 1056,
																			"name": "PUBLIC_SALE_PRICE",
																			"nodeType": "Identifier",
																			"overloadedDeclarations": [],
																			"referencedDeclaration": 969,
																			"src": "1651:17:11",
																			"typeDescriptions": {
																				"typeIdentifier": "t_uint256",
																				"typeString": "uint256"
																			}
																		},
																		"nodeType": "BinaryOperation",
																		"operator": "*",
																		"rightExpression": {
																			"id": 1057,
																			"name": "_quantity",
																			"nodeType": "Identifier",
																			"overloadedDeclarations": [],
																			"referencedDeclaration": 1019,
																			"src": "1671:9:11",
																			"typeDescriptions": {
																				"typeIdentifier": "t_uint256",
																				"typeString": "uint256"
																			}
																		},
																		"src": "1651:29:11",
																		"typeDescriptions": {
																			"typeIdentifier": "t_uint256",
																			"typeString": "uint256"
																		}
																	}
																],
																"id": 1059,
																"isConstant": false,
																"isInlineArray": false,
																"isLValue": false,
																"isPure": false,
																"lValueRequested": false,
																"nodeType": "TupleExpression",
																"src": "1650:31:11",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															},
															"src": "1637:44:11",
															"typeDescriptions": {
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															}
														},
														{
															"hexValue": "43727970746f42756c6c446f6773203a3a2042656c6f7720",
															"id": 1061,
															"isConstant": false,
															"isLValue": false,
															"isPure": true,
															"kind": "string",
															"lValueRequested": false,
															"nodeType": "Literal",
															"src": "1683:26:11",
															"typeDescriptions": {
																"typeIdentifier": "t_stringliteral_aea8008bf26276581196d49f4534f22b2d7f0710e7141375c13ff69906fe5f3c",
																"typeString": "literal_string \"CryptoBullDogs :: Below \""
															},
															"value": "CryptoBullDogs :: Below "
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															},
															{
																"typeIdentifier": "t_stringliteral_aea8008bf26276581196d49f4534f22b2d7f0710e7141375c13ff69906fe5f3c",
																"typeString": "literal_string \"CryptoBullDogs :: Below \""
															}
														],
														"id": 1053,
														"name": "require",
														"nodeType": "Identifier",
														"overloadedDeclarations": [
															4294967278,
															4294967278
														],
														"referencedDeclaration": 4294967278,
														"src": "1629:7:11",
														"typeDescriptions": {
															"typeIdentifier": "t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$",
															"typeString": "function (bool,string memory) pure"
														}
													},
													"id": 1062,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"names": [],
													"nodeType": "FunctionCall",
													"src": "1629:81:11",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_tuple$__$",
														"typeString": "tuple()"
													}
												},
												"id": 1063,
												"nodeType": "ExpressionStatement",
												"src": "1629:81:11"
											},
											{
												"expression": {
													"id": 1069,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"lValueRequested": false,
													"leftHandSide": {
														"baseExpression": {
															"id": 1064,
															"name": "totalPublicMint",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 992,
															"src": "1721:15:11",
															"typeDescriptions": {
																"typeIdentifier": "t_mapping$_t_address_$_t_uint256_$",
																"typeString": "mapping(address => uint256)"
															}
														},
														"id": 1067,
														"indexExpression": {
															"expression": {
																"id": 1065,
																"name": "msg",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 4294967281,
																"src": "1737:3:11",
																"typeDescriptions": {
																	"typeIdentifier": "t_magic_message",
																	"typeString": "msg"
																}
															},
															"id": 1066,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"lValueRequested": false,
															"memberName": "sender",
															"nodeType": "MemberAccess",
															"src": "1737:10:11",
															"typeDescriptions": {
																"typeIdentifier": "t_address",
																"typeString": "address"
															}
														},
														"isConstant": false,
														"isLValue": true,
														"isPure": false,
														"lValueRequested": true,
														"nodeType": "IndexAccess",
														"src": "1721:27:11",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														}
													},
													"nodeType": "Assignment",
													"operator": "+=",
													"rightHandSide": {
														"id": 1068,
														"name": "_quantity",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 1019,
														"src": "1752:9:11",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														}
													},
													"src": "1721:40:11",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"id": 1070,
												"nodeType": "ExpressionStatement",
												"src": "1721:40:11"
											},
											{
												"expression": {
													"arguments": [
														{
															"expression": {
																"id": 1072,
																"name": "msg",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 4294967281,
																"src": "1781:3:11",
																"typeDescriptions": {
																	"typeIdentifier": "t_magic_message",
																	"typeString": "msg"
																}
															},
															"id": 1073,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"lValueRequested": false,
															"memberName": "sender",
															"nodeType": "MemberAccess",
															"src": "1781:10:11",
															"typeDescriptions": {
																"typeIdentifier": "t_address",
																"typeString": "address"
															}
														},
														{
															"id": 1074,
															"name": "_quantity",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 1019,
															"src": "1793:9:11",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_address",
																"typeString": "address"
															},
															{
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														],
														"id": 1071,
														"name": "_safeMint",
														"nodeType": "Identifier",
														"overloadedDeclarations": [
															2132,
															2150
														],
														"referencedDeclaration": 2132,
														"src": "1771:9:11",
														"typeDescriptions": {
															"typeIdentifier": "t_function_internal_nonpayable$_t_address_$_t_uint256_$returns$__$",
															"typeString": "function (address,uint256)"
														}
													},
													"id": 1075,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"names": [],
													"nodeType": "FunctionCall",
													"src": "1771:32:11",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_tuple$__$",
														"typeString": "tuple()"
													}
												},
												"id": 1076,
												"nodeType": "ExpressionStatement",
												"src": "1771:32:11"
											}
										]
									},
									"functionSelector": "a0712d68",
									"id": 1078,
									"implemented": true,
									"kind": "function",
									"modifiers": [
										{
											"id": 1022,
											"kind": "modifierInvocation",
											"modifierName": {
												"id": 1021,
												"name": "callerIsUser",
												"nodeType": "IdentifierPath",
												"referencedDeclaration": 1017,
												"src": "1319:12:11"
											},
											"nodeType": "ModifierInvocation",
											"src": "1319:12:11"
										}
									],
									"name": "mint",
									"nameLocation": "1278:4:11",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 1020,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 1019,
												"mutability": "mutable",
												"name": "_quantity",
												"nameLocation": "1291:9:11",
												"nodeType": "VariableDeclaration",
												"scope": 1078,
												"src": "1283:17:11",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 1018,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "1283:7:11",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "1282:19:11"
									},
									"returnParameters": {
										"id": 1023,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "1331:0:11"
									},
									"scope": 1414,
									"src": "1269:541:11",
									"stateMutability": "payable",
									"virtual": false,
									"visibility": "external"
								},
								{
									"body": {
										"id": 1161,
										"nodeType": "Block",
										"src": "1918:756:11",
										"statements": [
											{
												"expression": {
													"arguments": [
														{
															"id": 1089,
															"name": "whiteListSale",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 982,
															"src": "1936:13:11",
															"typeDescriptions": {
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															}
														},
														{
															"hexValue": "43727970746f42756c6c446f6773203a3a204d696e74696e67206973206f6e205061757365",
															"id": 1090,
															"isConstant": false,
															"isLValue": false,
															"isPure": true,
															"kind": "string",
															"lValueRequested": false,
															"nodeType": "Literal",
															"src": "1951:39:11",
															"typeDescriptions": {
																"typeIdentifier": "t_stringliteral_c20fc45585ea982635c0eaea27752aa72d9d12c67d0eca0ac62441a0fcd497bc",
																"typeString": "literal_string \"CryptoBullDogs :: Minting is on Pause\""
															},
															"value": "CryptoBullDogs :: Minting is on Pause"
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															},
															{
																"typeIdentifier": "t_stringliteral_c20fc45585ea982635c0eaea27752aa72d9d12c67d0eca0ac62441a0fcd497bc",
																"typeString": "literal_string \"CryptoBullDogs :: Minting is on Pause\""
															}
														],
														"id": 1088,
														"name": "require",
														"nodeType": "Identifier",
														"overloadedDeclarations": [
															4294967278,
															4294967278
														],
														"referencedDeclaration": 4294967278,
														"src": "1928:7:11",
														"typeDescriptions": {
															"typeIdentifier": "t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$",
															"typeString": "function (bool,string memory) pure"
														}
													},
													"id": 1091,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"names": [],
													"nodeType": "FunctionCall",
													"src": "1928:63:11",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_tuple$__$",
														"typeString": "tuple()"
													}
												},
												"id": 1092,
												"nodeType": "ExpressionStatement",
												"src": "1928:63:11"
											},
											{
												"expression": {
													"arguments": [
														{
															"commonType": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															},
															"id": 1100,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"lValueRequested": false,
															"leftExpression": {
																"components": [
																	{
																		"commonType": {
																			"typeIdentifier": "t_uint256",
																			"typeString": "uint256"
																		},
																		"id": 1097,
																		"isConstant": false,
																		"isLValue": false,
																		"isPure": false,
																		"lValueRequested": false,
																		"leftExpression": {
																			"arguments": [],
																			"expression": {
																				"argumentTypes": [],
																				"id": 1094,
																				"name": "totalSupply",
																				"nodeType": "Identifier",
																				"overloadedDeclarations": [],
																				"referencedDeclaration": 1564,
																				"src": "2010:11:11",
																				"typeDescriptions": {
																					"typeIdentifier": "t_function_internal_view$__$returns$_t_uint256_$",
																					"typeString": "function () view returns (uint256)"
																				}
																			},
																			"id": 1095,
																			"isConstant": false,
																			"isLValue": false,
																			"isPure": false,
																			"kind": "functionCall",
																			"lValueRequested": false,
																			"names": [],
																			"nodeType": "FunctionCall",
																			"src": "2010:13:11",
																			"tryCall": false,
																			"typeDescriptions": {
																				"typeIdentifier": "t_uint256",
																				"typeString": "uint256"
																			}
																		},
																		"nodeType": "BinaryOperation",
																		"operator": "+",
																		"rightExpression": {
																			"id": 1096,
																			"name": "_quantity",
																			"nodeType": "Identifier",
																			"overloadedDeclarations": [],
																			"referencedDeclaration": 1083,
																			"src": "2026:9:11",
																			"typeDescriptions": {
																				"typeIdentifier": "t_uint256",
																				"typeString": "uint256"
																			}
																		},
																		"src": "2010:25:11",
																		"typeDescriptions": {
																			"typeIdentifier": "t_uint256",
																			"typeString": "uint256"
																		}
																	}
																],
																"id": 1098,
																"isConstant": false,
																"isInlineArray": false,
																"isLValue": false,
																"isPure": false,
																"lValueRequested": false,
																"nodeType": "TupleExpression",
																"src": "2009:27:11",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															},
															"nodeType": "BinaryOperation",
															"operator": "<=",
															"rightExpression": {
																"id": 1099,
																"name": "MAX_SUPPLY",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 960,
																"src": "2040:10:11",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															},
															"src": "2009:41:11",
															"typeDescriptions": {
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															}
														},
														{
															"hexValue": "43727970746f42756c6c446f6773203a3a2043616e6e6f74206d696e74206265796f6e64206d617820737570706c79",
															"id": 1101,
															"isConstant": false,
															"isLValue": false,
															"isPure": true,
															"kind": "string",
															"lValueRequested": false,
															"nodeType": "Literal",
															"src": "2052:49:11",
															"typeDescriptions": {
																"typeIdentifier": "t_stringliteral_c23275b1ed5ed81046546b0000675842efe31b6ede5f5a7e9e64b1e87538c27b",
																"typeString": "literal_string \"CryptoBullDogs :: Cannot mint beyond max supply\""
															},
															"value": "CryptoBullDogs :: Cannot mint beyond max supply"
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															},
															{
																"typeIdentifier": "t_stringliteral_c23275b1ed5ed81046546b0000675842efe31b6ede5f5a7e9e64b1e87538c27b",
																"typeString": "literal_string \"CryptoBullDogs :: Cannot mint beyond max supply\""
															}
														],
														"id": 1093,
														"name": "require",
														"nodeType": "Identifier",
														"overloadedDeclarations": [
															4294967278,
															4294967278
														],
														"referencedDeclaration": 4294967278,
														"src": "2001:7:11",
														"typeDescriptions": {
															"typeIdentifier": "t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$",
															"typeString": "function (bool,string memory) pure"
														}
													},
													"id": 1102,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"names": [],
													"nodeType": "FunctionCall",
													"src": "2001:101:11",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_tuple$__$",
														"typeString": "tuple()"
													}
												},
												"id": 1103,
												"nodeType": "ExpressionStatement",
												"src": "2001:101:11"
											},
											{
												"expression": {
													"arguments": [
														{
															"commonType": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															},
															"id": 1113,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"lValueRequested": false,
															"leftExpression": {
																"components": [
																	{
																		"commonType": {
																			"typeIdentifier": "t_uint256",
																			"typeString": "uint256"
																		},
																		"id": 1110,
																		"isConstant": false,
																		"isLValue": false,
																		"isPure": false,
																		"lValueRequested": false,
																		"leftExpression": {
																			"baseExpression": {
																				"id": 1105,
																				"name": "totalWhitelistMint",
																				"nodeType": "Identifier",
																				"overloadedDeclarations": [],
																				"referencedDeclaration": 996,
																				"src": "2121:18:11",
																				"typeDescriptions": {
																					"typeIdentifier": "t_mapping$_t_address_$_t_uint256_$",
																					"typeString": "mapping(address => uint256)"
																				}
																			},
																			"id": 1108,
																			"indexExpression": {
																				"expression": {
																					"id": 1106,
																					"name": "msg",
																					"nodeType": "Identifier",
																					"overloadedDeclarations": [],
																					"referencedDeclaration": 4294967281,
																					"src": "2140:3:11",
																					"typeDescriptions": {
																						"typeIdentifier": "t_magic_message",
																						"typeString": "msg"
																					}
																				},
																				"id": 1107,
																				"isConstant": false,
																				"isLValue": false,
																				"isPure": false,
																				"lValueRequested": false,
																				"memberName": "sender",
																				"nodeType": "MemberAccess",
																				"src": "2140:10:11",
																				"typeDescriptions": {
																					"typeIdentifier": "t_address",
																					"typeString": "address"
																				}
																			},
																			"isConstant": false,
																			"isLValue": true,
																			"isPure": false,
																			"lValueRequested": false,
																			"nodeType": "IndexAccess",
																			"src": "2121:30:11",
																			"typeDescriptions": {
																				"typeIdentifier": "t_uint256",
																				"typeString": "uint256"
																			}
																		},
																		"nodeType": "BinaryOperation",
																		"operator": "+",
																		"rightExpression": {
																			"id": 1109,
																			"name": "_quantity",
																			"nodeType": "Identifier",
																			"overloadedDeclarations": [],
																			"referencedDeclaration": 1083,
																			"src": "2154:9:11",
																			"typeDescriptions": {
																				"typeIdentifier": "t_uint256",
																				"typeString": "uint256"
																			}
																		},
																		"src": "2121:42:11",
																		"typeDescriptions": {
																			"typeIdentifier": "t_uint256",
																			"typeString": "uint256"
																		}
																	}
																],
																"id": 1111,
																"isConstant": false,
																"isInlineArray": false,
																"isLValue": false,
																"isPure": false,
																"lValueRequested": false,
																"nodeType": "TupleExpression",
																"src": "2120:44:11",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															},
															"nodeType": "BinaryOperation",
															"operator": "<=",
															"rightExpression": {
																"id": 1112,
																"name": "MAX_WHITELIST_MINT",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 966,
																"src": "2169:18:11",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															},
															"src": "2120:67:11",
															"typeDescriptions": {
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															}
														},
														{
															"hexValue": "43727970746f42756c6c446f67733a3a2043616e6e6f74206d696e74206265796f6e642077686974656c697374206d6178206d696e7421",
															"id": 1114,
															"isConstant": false,
															"isLValue": false,
															"isPure": true,
															"kind": "string",
															"lValueRequested": false,
															"nodeType": "Literal",
															"src": "2189:57:11",
															"typeDescriptions": {
																"typeIdentifier": "t_stringliteral_a7784544cb8b9a65a2b0965c3345ca15fb09d360c00de0cc8d856dad61d1ba77",
																"typeString": "literal_string \"CryptoBullDogs:: Cannot mint beyond whitelist max mint!\""
															},
															"value": "CryptoBullDogs:: Cannot mint beyond whitelist max mint!"
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															},
															{
																"typeIdentifier": "t_stringliteral_a7784544cb8b9a65a2b0965c3345ca15fb09d360c00de0cc8d856dad61d1ba77",
																"typeString": "literal_string \"CryptoBullDogs:: Cannot mint beyond whitelist max mint!\""
															}
														],
														"id": 1104,
														"name": "require",
														"nodeType": "Identifier",
														"overloadedDeclarations": [
															4294967278,
															4294967278
														],
														"referencedDeclaration": 4294967278,
														"src": "2112:7:11",
														"typeDescriptions": {
															"typeIdentifier": "t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$",
															"typeString": "function (bool,string memory) pure"
														}
													},
													"id": 1115,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"names": [],
													"nodeType": "FunctionCall",
													"src": "2112:135:11",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_tuple$__$",
														"typeString": "tuple()"
													}
												},
												"id": 1116,
												"nodeType": "ExpressionStatement",
												"src": "2112:135:11"
											},
											{
												"expression": {
													"arguments": [
														{
															"commonType": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															},
															"id": 1124,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"lValueRequested": false,
															"leftExpression": {
																"expression": {
																	"id": 1118,
																	"name": "msg",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 4294967281,
																	"src": "2265:3:11",
																	"typeDescriptions": {
																		"typeIdentifier": "t_magic_message",
																		"typeString": "msg"
																	}
																},
																"id": 1119,
																"isConstant": false,
																"isLValue": false,
																"isPure": false,
																"lValueRequested": false,
																"memberName": "value",
																"nodeType": "MemberAccess",
																"src": "2265:9:11",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															},
															"nodeType": "BinaryOperation",
															"operator": ">=",
															"rightExpression": {
																"components": [
																	{
																		"commonType": {
																			"typeIdentifier": "t_uint256",
																			"typeString": "uint256"
																		},
																		"id": 1122,
																		"isConstant": false,
																		"isLValue": false,
																		"isPure": false,
																		"lValueRequested": false,
																		"leftExpression": {
																			"id": 1120,
																			"name": "WHITELIST_SALE_PRICE",
																			"nodeType": "Identifier",
																			"overloadedDeclarations": [],
																			"referencedDeclaration": 972,
																			"src": "2279:20:11",
																			"typeDescriptions": {
																				"typeIdentifier": "t_uint256",
																				"typeString": "uint256"
																			}
																		},
																		"nodeType": "BinaryOperation",
																		"operator": "*",
																		"rightExpression": {
																			"id": 1121,
																			"name": "_quantity",
																			"nodeType": "Identifier",
																			"overloadedDeclarations": [],
																			"referencedDeclaration": 1083,
																			"src": "2302:9:11",
																			"typeDescriptions": {
																				"typeIdentifier": "t_uint256",
																				"typeString": "uint256"
																			}
																		},
																		"src": "2279:32:11",
																		"typeDescriptions": {
																			"typeIdentifier": "t_uint256",
																			"typeString": "uint256"
																		}
																	}
																],
																"id": 1123,
																"isConstant": false,
																"isInlineArray": false,
																"isLValue": false,
																"isPure": false,
																"lValueRequested": false,
																"nodeType": "TupleExpression",
																"src": "2278:34:11",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															},
															"src": "2265:47:11",
															"typeDescriptions": {
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															}
														},
														{
															"hexValue": "43727970746f42756c6c446f6773203a3a205061796d656e742069732062656c6f7720746865207072696365",
															"id": 1125,
															"isConstant": false,
															"isLValue": false,
															"isPure": true,
															"kind": "string",
															"lValueRequested": false,
															"nodeType": "Literal",
															"src": "2314:46:11",
															"typeDescriptions": {
																"typeIdentifier": "t_stringliteral_3f5ae172148f1a839b485a0b667d45729d23a3f71a8af08708a3cd4714b3609f",
																"typeString": "literal_string \"CryptoBullDogs :: Payment is below the price\""
															},
															"value": "CryptoBullDogs :: Payment is below the price"
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															},
															{
																"typeIdentifier": "t_stringliteral_3f5ae172148f1a839b485a0b667d45729d23a3f71a8af08708a3cd4714b3609f",
																"typeString": "literal_string \"CryptoBullDogs :: Payment is below the price\""
															}
														],
														"id": 1117,
														"name": "require",
														"nodeType": "Identifier",
														"overloadedDeclarations": [
															4294967278,
															4294967278
														],
														"referencedDeclaration": 4294967278,
														"src": "2257:7:11",
														"typeDescriptions": {
															"typeIdentifier": "t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$",
															"typeString": "function (bool,string memory) pure"
														}
													},
													"id": 1126,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"names": [],
													"nodeType": "FunctionCall",
													"src": "2257:104:11",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_tuple$__$",
														"typeString": "tuple()"
													}
												},
												"id": 1127,
												"nodeType": "ExpressionStatement",
												"src": "2257:104:11"
											},
											{
												"assignments": [
													1129
												],
												"declarations": [
													{
														"constant": false,
														"id": 1129,
														"mutability": "mutable",
														"name": "sender",
														"nameLocation": "2406:6:11",
														"nodeType": "VariableDeclaration",
														"scope": 1161,
														"src": "2398:14:11",
														"stateVariable": false,
														"storageLocation": "default",
														"typeDescriptions": {
															"typeIdentifier": "t_bytes32",
															"typeString": "bytes32"
														},
														"typeName": {
															"id": 1128,
															"name": "bytes32",
															"nodeType": "ElementaryTypeName",
															"src": "2398:7:11",
															"typeDescriptions": {
																"typeIdentifier": "t_bytes32",
																"typeString": "bytes32"
															}
														},
														"visibility": "internal"
													}
												],
												"id": 1137,
												"initialValue": {
													"arguments": [
														{
															"arguments": [
																{
																	"expression": {
																		"id": 1133,
																		"name": "msg",
																		"nodeType": "Identifier",
																		"overloadedDeclarations": [],
																		"referencedDeclaration": 4294967281,
																		"src": "2442:3:11",
																		"typeDescriptions": {
																			"typeIdentifier": "t_magic_message",
																			"typeString": "msg"
																		}
																	},
																	"id": 1134,
																	"isConstant": false,
																	"isLValue": false,
																	"isPure": false,
																	"lValueRequested": false,
																	"memberName": "sender",
																	"nodeType": "MemberAccess",
																	"src": "2442:10:11",
																	"typeDescriptions": {
																		"typeIdentifier": "t_address",
																		"typeString": "address"
																	}
																}
															],
															"expression": {
																"argumentTypes": [
																	{
																		"typeIdentifier": "t_address",
																		"typeString": "address"
																	}
																],
																"expression": {
																	"id": 1131,
																	"name": "abi",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 4294967295,
																	"src": "2425:3:11",
																	"typeDescriptions": {
																		"typeIdentifier": "t_magic_abi",
																		"typeString": "abi"
																	}
																},
																"id": 1132,
																"isConstant": false,
																"isLValue": false,
																"isPure": true,
																"lValueRequested": false,
																"memberName": "encodePacked",
																"nodeType": "MemberAccess",
																"src": "2425:16:11",
																"typeDescriptions": {
																	"typeIdentifier": "t_function_abiencodepacked_pure$__$returns$_t_bytes_memory_ptr_$",
																	"typeString": "function () pure returns (bytes memory)"
																}
															},
															"id": 1135,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"kind": "functionCall",
															"lValueRequested": false,
															"names": [],
															"nodeType": "FunctionCall",
															"src": "2425:28:11",
															"tryCall": false,
															"typeDescriptions": {
																"typeIdentifier": "t_bytes_memory_ptr",
																"typeString": "bytes memory"
															}
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_bytes_memory_ptr",
																"typeString": "bytes memory"
															}
														],
														"id": 1130,
														"name": "keccak256",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 4294967288,
														"src": "2415:9:11",
														"typeDescriptions": {
															"typeIdentifier": "t_function_keccak256_pure$_t_bytes_memory_ptr_$returns$_t_bytes32_$",
															"typeString": "function (bytes memory) pure returns (bytes32)"
														}
													},
													"id": 1136,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"names": [],
													"nodeType": "FunctionCall",
													"src": "2415:39:11",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_bytes32",
														"typeString": "bytes32"
													}
												},
												"nodeType": "VariableDeclarationStatement",
												"src": "2398:56:11"
											},
											{
												"expression": {
													"arguments": [
														{
															"arguments": [
																{
																	"id": 1141,
																	"name": "_merkleProof",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 1081,
																	"src": "2491:12:11",
																	"typeDescriptions": {
																		"typeIdentifier": "t_array$_t_bytes32_$dyn_memory_ptr",
																		"typeString": "bytes32[] memory"
																	}
																},
																{
																	"id": 1142,
																	"name": "merkleRoot",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 988,
																	"src": "2505:10:11",
																	"typeDescriptions": {
																		"typeIdentifier": "t_bytes32",
																		"typeString": "bytes32"
																	}
																},
																{
																	"id": 1143,
																	"name": "sender",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 1129,
																	"src": "2517:6:11",
																	"typeDescriptions": {
																		"typeIdentifier": "t_bytes32",
																		"typeString": "bytes32"
																	}
																}
															],
															"expression": {
																"argumentTypes": [
																	{
																		"typeIdentifier": "t_array$_t_bytes32_$dyn_memory_ptr",
																		"typeString": "bytes32[] memory"
																	},
																	{
																		"typeIdentifier": "t_bytes32",
																		"typeString": "bytes32"
																	},
																	{
																		"typeIdentifier": "t_bytes32",
																		"typeString": "bytes32"
																	}
																],
																"expression": {
																	"id": 1139,
																	"name": "MerkleProof",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 909,
																	"src": "2472:11:11",
																	"typeDescriptions": {
																		"typeIdentifier": "t_type$_t_contract$_MerkleProof_$909_$",
																		"typeString": "type(library MerkleProof)"
																	}
																},
																"id": 1140,
																"isConstant": false,
																"isLValue": false,
																"isPure": false,
																"lValueRequested": false,
																"memberName": "verify",
																"nodeType": "MemberAccess",
																"referencedDeclaration": 840,
																"src": "2472:18:11",
																"typeDescriptions": {
																	"typeIdentifier": "t_function_internal_pure$_t_array$_t_bytes32_$dyn_memory_ptr_$_t_bytes32_$_t_bytes32_$returns$_t_bool_$",
																	"typeString": "function (bytes32[] memory,bytes32,bytes32) pure returns (bool)"
																}
															},
															"id": 1144,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"kind": "functionCall",
															"lValueRequested": false,
															"names": [],
															"nodeType": "FunctionCall",
															"src": "2472:52:11",
															"tryCall": false,
															"typeDescriptions": {
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															}
														},
														{
															"hexValue": "43727970746f42756c6c446f6773203a3a20596f7520617265206e6f742077686974656c6973746564",
															"id": 1145,
															"isConstant": false,
															"isLValue": false,
															"isPure": true,
															"kind": "string",
															"lValueRequested": false,
															"nodeType": "Literal",
															"src": "2526:43:11",
															"typeDescriptions": {
																"typeIdentifier": "t_stringliteral_d9829f603a2b359b234b0a0f735ae7dd63ba4e2bffa17e8480bd5f19fbc111cd",
																"typeString": "literal_string \"CryptoBullDogs :: You are not whitelisted\""
															},
															"value": "CryptoBullDogs :: You are not whitelisted"
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															},
															{
																"typeIdentifier": "t_stringliteral_d9829f603a2b359b234b0a0f735ae7dd63ba4e2bffa17e8480bd5f19fbc111cd",
																"typeString": "literal_string \"CryptoBullDogs :: You are not whitelisted\""
															}
														],
														"id": 1138,
														"name": "require",
														"nodeType": "Identifier",
														"overloadedDeclarations": [
															4294967278,
															4294967278
														],
														"referencedDeclaration": 4294967278,
														"src": "2464:7:11",
														"typeDescriptions": {
															"typeIdentifier": "t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$",
															"typeString": "function (bool,string memory) pure"
														}
													},
													"id": 1146,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"names": [],
													"nodeType": "FunctionCall",
													"src": "2464:106:11",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_tuple$__$",
														"typeString": "tuple()"
													}
												},
												"id": 1147,
												"nodeType": "ExpressionStatement",
												"src": "2464:106:11"
											},
											{
												"expression": {
													"id": 1153,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"lValueRequested": false,
													"leftHandSide": {
														"baseExpression": {
															"id": 1148,
															"name": "totalWhitelistMint",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 996,
															"src": "2581:18:11",
															"typeDescriptions": {
																"typeIdentifier": "t_mapping$_t_address_$_t_uint256_$",
																"typeString": "mapping(address => uint256)"
															}
														},
														"id": 1151,
														"indexExpression": {
															"expression": {
																"id": 1149,
																"name": "msg",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 4294967281,
																"src": "2600:3:11",
																"typeDescriptions": {
																	"typeIdentifier": "t_magic_message",
																	"typeString": "msg"
																}
															},
															"id": 1150,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"lValueRequested": false,
															"memberName": "sender",
															"nodeType": "MemberAccess",
															"src": "2600:10:11",
															"typeDescriptions": {
																"typeIdentifier": "t_address",
																"typeString": "address"
															}
														},
														"isConstant": false,
														"isLValue": true,
														"isPure": false,
														"lValueRequested": true,
														"nodeType": "IndexAccess",
														"src": "2581:30:11",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														}
													},
													"nodeType": "Assignment",
													"operator": "+=",
													"rightHandSide": {
														"id": 1152,
														"name": "_quantity",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 1083,
														"src": "2615:9:11",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														}
													},
													"src": "2581:43:11",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"id": 1154,
												"nodeType": "ExpressionStatement",
												"src": "2581:43:11"
											},
											{
												"expression": {
													"arguments": [
														{
															"expression": {
																"id": 1156,
																"name": "msg",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 4294967281,
																"src": "2644:3:11",
																"typeDescriptions": {
																	"typeIdentifier": "t_magic_message",
																	"typeString": "msg"
																}
															},
															"id": 1157,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"lValueRequested": false,
															"memberName": "sender",
															"nodeType": "MemberAccess",
															"src": "2644:10:11",
															"typeDescriptions": {
																"typeIdentifier": "t_address",
																"typeString": "address"
															}
														},
														{
															"id": 1158,
															"name": "_quantity",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 1083,
															"src": "2656:9:11",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_address",
																"typeString": "address"
															},
															{
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														],
														"id": 1155,
														"name": "_safeMint",
														"nodeType": "Identifier",
														"overloadedDeclarations": [
															2132,
															2150
														],
														"referencedDeclaration": 2132,
														"src": "2634:9:11",
														"typeDescriptions": {
															"typeIdentifier": "t_function_internal_nonpayable$_t_address_$_t_uint256_$returns$__$",
															"typeString": "function (address,uint256)"
														}
													},
													"id": 1159,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"names": [],
													"nodeType": "FunctionCall",
													"src": "2634:32:11",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_tuple$__$",
														"typeString": "tuple()"
													}
												},
												"id": 1160,
												"nodeType": "ExpressionStatement",
												"src": "2634:32:11"
											}
										]
									},
									"functionSelector": "2904e6d9",
									"id": 1162,
									"implemented": true,
									"kind": "function",
									"modifiers": [
										{
											"id": 1086,
											"kind": "modifierInvocation",
											"modifierName": {
												"id": 1085,
												"name": "callerIsUser",
												"nodeType": "IdentifierPath",
												"referencedDeclaration": 1017,
												"src": "1906:12:11"
											},
											"nodeType": "ModifierInvocation",
											"src": "1906:12:11"
										}
									],
									"name": "whitelistMint",
									"nameLocation": "1825:13:11",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 1084,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 1081,
												"mutability": "mutable",
												"name": "_merkleProof",
												"nameLocation": "1856:12:11",
												"nodeType": "VariableDeclaration",
												"scope": 1162,
												"src": "1839:29:11",
												"stateVariable": false,
												"storageLocation": "memory",
												"typeDescriptions": {
													"typeIdentifier": "t_array$_t_bytes32_$dyn_memory_ptr",
													"typeString": "bytes32[]"
												},
												"typeName": {
													"baseType": {
														"id": 1079,
														"name": "bytes32",
														"nodeType": "ElementaryTypeName",
														"src": "1839:7:11",
														"typeDescriptions": {
															"typeIdentifier": "t_bytes32",
															"typeString": "bytes32"
														}
													},
													"id": 1080,
													"nodeType": "ArrayTypeName",
													"src": "1839:9:11",
													"typeDescriptions": {
														"typeIdentifier": "t_array$_t_bytes32_$dyn_storage_ptr",
														"typeString": "bytes32[]"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 1083,
												"mutability": "mutable",
												"name": "_quantity",
												"nameLocation": "1878:9:11",
												"nodeType": "VariableDeclaration",
												"scope": 1162,
												"src": "1870:17:11",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 1082,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "1870:7:11",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "1838:50:11"
									},
									"returnParameters": {
										"id": 1087,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "1918:0:11"
									},
									"scope": 1414,
									"src": "1816:858:11",
									"stateMutability": "payable",
									"virtual": false,
									"visibility": "external"
								},
								{
									"body": {
										"id": 1183,
										"nodeType": "Block",
										"src": "2718:141:11",
										"statements": [
											{
												"expression": {
													"arguments": [
														{
															"id": 1169,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"lValueRequested": false,
															"nodeType": "UnaryOperation",
															"operator": "!",
															"prefix": true,
															"src": "2736:11:11",
															"subExpression": {
																"id": 1168,
																"name": "teamMinted",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 986,
																"src": "2737:10:11",
																"typeDescriptions": {
																	"typeIdentifier": "t_bool",
																	"typeString": "bool"
																}
															},
															"typeDescriptions": {
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															}
														},
														{
															"hexValue": "43727970746f42756c6c446f6773203a3a205465616d20616c7265616479206d696e746564",
															"id": 1170,
															"isConstant": false,
															"isLValue": false,
															"isPure": true,
															"kind": "string",
															"lValueRequested": false,
															"nodeType": "Literal",
															"src": "2749:39:11",
															"typeDescriptions": {
																"typeIdentifier": "t_stringliteral_8b1a1b9660295b67e7b14793b8c2bd996c6eeb2d2db0f052d14c8cdc22873a9a",
																"typeString": "literal_string \"CryptoBullDogs :: Team already minted\""
															},
															"value": "CryptoBullDogs :: Team already minted"
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															},
															{
																"typeIdentifier": "t_stringliteral_8b1a1b9660295b67e7b14793b8c2bd996c6eeb2d2db0f052d14c8cdc22873a9a",
																"typeString": "literal_string \"CryptoBullDogs :: Team already minted\""
															}
														],
														"id": 1167,
														"name": "require",
														"nodeType": "Identifier",
														"overloadedDeclarations": [
															4294967278,
															4294967278
														],
														"referencedDeclaration": 4294967278,
														"src": "2728:7:11",
														"typeDescriptions": {
															"typeIdentifier": "t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$",
															"typeString": "function (bool,string memory) pure"
														}
													},
													"id": 1171,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"names": [],
													"nodeType": "FunctionCall",
													"src": "2728:61:11",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_tuple$__$",
														"typeString": "tuple()"
													}
												},
												"id": 1172,
												"nodeType": "ExpressionStatement",
												"src": "2728:61:11"
											},
											{
												"expression": {
													"id": 1175,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"lValueRequested": false,
													"leftHandSide": {
														"id": 1173,
														"name": "teamMinted",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 986,
														"src": "2799:10:11",
														"typeDescriptions": {
															"typeIdentifier": "t_bool",
															"typeString": "bool"
														}
													},
													"nodeType": "Assignment",
													"operator": "=",
													"rightHandSide": {
														"hexValue": "74727565",
														"id": 1174,
														"isConstant": false,
														"isLValue": false,
														"isPure": true,
														"kind": "bool",
														"lValueRequested": false,
														"nodeType": "Literal",
														"src": "2812:4:11",
														"typeDescriptions": {
															"typeIdentifier": "t_bool",
															"typeString": "bool"
														},
														"value": "true"
													},
													"src": "2799:17:11",
													"typeDescriptions": {
														"typeIdentifier": "t_bool",
														"typeString": "bool"
													}
												},
												"id": 1176,
												"nodeType": "ExpressionStatement",
												"src": "2799:17:11"
											},
											{
												"expression": {
													"arguments": [
														{
															"expression": {
																"id": 1178,
																"name": "msg",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 4294967281,
																"src": "2836:3:11",
																"typeDescriptions": {
																	"typeIdentifier": "t_magic_message",
																	"typeString": "msg"
																}
															},
															"id": 1179,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"lValueRequested": false,
															"memberName": "sender",
															"nodeType": "MemberAccess",
															"src": "2836:10:11",
															"typeDescriptions": {
																"typeIdentifier": "t_address",
																"typeString": "address"
															}
														},
														{
															"hexValue": "363230",
															"id": 1180,
															"isConstant": false,
															"isLValue": false,
															"isPure": true,
															"kind": "number",
															"lValueRequested": false,
															"nodeType": "Literal",
															"src": "2848:3:11",
															"typeDescriptions": {
																"typeIdentifier": "t_rational_620_by_1",
																"typeString": "int_const 620"
															},
															"value": "620"
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_address",
																"typeString": "address"
															},
															{
																"typeIdentifier": "t_rational_620_by_1",
																"typeString": "int_const 620"
															}
														],
														"id": 1177,
														"name": "_safeMint",
														"nodeType": "Identifier",
														"overloadedDeclarations": [
															2132,
															2150
														],
														"referencedDeclaration": 2132,
														"src": "2826:9:11",
														"typeDescriptions": {
															"typeIdentifier": "t_function_internal_nonpayable$_t_address_$_t_uint256_$returns$__$",
															"typeString": "function (address,uint256)"
														}
													},
													"id": 1181,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"names": [],
													"nodeType": "FunctionCall",
													"src": "2826:26:11",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_tuple$__$",
														"typeString": "tuple()"
													}
												},
												"id": 1182,
												"nodeType": "ExpressionStatement",
												"src": "2826:26:11"
											}
										]
									},
									"functionSelector": "ba7a86b8",
									"id": 1184,
									"implemented": true,
									"kind": "function",
									"modifiers": [
										{
											"id": 1165,
											"kind": "modifierInvocation",
											"modifierName": {
												"id": 1164,
												"name": "onlyOwner",
												"nodeType": "IdentifierPath",
												"referencedDeclaration": 46,
												"src": "2709:9:11"
											},
											"nodeType": "ModifierInvocation",
											"src": "2709:9:11"
										}
									],
									"name": "teamMint",
									"nameLocation": "2689:8:11",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 1163,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "2697:2:11"
									},
									"returnParameters": {
										"id": 1166,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "2718:0:11"
									},
									"scope": 1414,
									"src": "2680:179:11",
									"stateMutability": "nonpayable",
									"virtual": false,
									"visibility": "external"
								},
								{
									"baseFunctions": [
										1901
									],
									"body": {
										"id": 1192,
										"nodeType": "Block",
										"src": "2940:36:11",
										"statements": [
											{
												"expression": {
													"id": 1190,
													"name": "baseTokenUri",
													"nodeType": "Identifier",
													"overloadedDeclarations": [],
													"referencedDeclaration": 974,
													"src": "2957:12:11",
													"typeDescriptions": {
														"typeIdentifier": "t_string_storage",
														"typeString": "string storage ref"
													}
												},
												"functionReturnParameters": 1189,
												"id": 1191,
												"nodeType": "Return",
												"src": "2950:19:11"
											}
										]
									},
									"id": 1193,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "_baseURI",
									"nameLocation": "2874:8:11",
									"nodeType": "FunctionDefinition",
									"overrides": {
										"id": 1186,
										"nodeType": "OverrideSpecifier",
										"overrides": [],
										"src": "2907:8:11"
									},
									"parameters": {
										"id": 1185,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "2882:2:11"
									},
									"returnParameters": {
										"id": 1189,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 1188,
												"mutability": "mutable",
												"name": "",
												"nameLocation": "-1:-1:-1",
												"nodeType": "VariableDeclaration",
												"scope": 1193,
												"src": "2925:13:11",
												"stateVariable": false,
												"storageLocation": "memory",
												"typeDescriptions": {
													"typeIdentifier": "t_string_memory_ptr",
													"typeString": "string"
												},
												"typeName": {
													"id": 1187,
													"name": "string",
													"nodeType": "ElementaryTypeName",
													"src": "2925:6:11",
													"typeDescriptions": {
														"typeIdentifier": "t_string_storage_ptr",
														"typeString": "string"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "2924:15:11"
									},
									"scope": 1414,
									"src": "2865:111:11",
									"stateMutability": "view",
									"virtual": true,
									"visibility": "internal"
								},
								{
									"baseFunctions": [
										1892
									],
									"body": {
										"id": 1241,
										"nodeType": "Block",
										"src": "3105:375:11",
										"statements": [
											{
												"expression": {
													"arguments": [
														{
															"arguments": [
																{
																	"id": 1203,
																	"name": "tokenId",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 1195,
																	"src": "3131:7:11",
																	"typeDescriptions": {
																		"typeIdentifier": "t_uint256",
																		"typeString": "uint256"
																	}
																}
															],
															"expression": {
																"argumentTypes": [
																	{
																		"typeIdentifier": "t_uint256",
																		"typeString": "uint256"
																	}
																],
																"id": 1202,
																"name": "_exists",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 2118,
																"src": "3123:7:11",
																"typeDescriptions": {
																	"typeIdentifier": "t_function_internal_view$_t_uint256_$returns$_t_bool_$",
																	"typeString": "function (uint256) view returns (bool)"
																}
															},
															"id": 1204,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"kind": "functionCall",
															"lValueRequested": false,
															"names": [],
															"nodeType": "FunctionCall",
															"src": "3123:16:11",
															"tryCall": false,
															"typeDescriptions": {
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															}
														},
														{
															"hexValue": "4552433732314d657461646174613a2055524920717565727920666f72206e6f6e6578697374656e7420746f6b656e",
															"id": 1205,
															"isConstant": false,
															"isLValue": false,
															"isPure": true,
															"kind": "string",
															"lValueRequested": false,
															"nodeType": "Literal",
															"src": "3141:49:11",
															"typeDescriptions": {
																"typeIdentifier": "t_stringliteral_a2d45c0fba603d40d82d590051761ca952d1ab9d78cca6d0d464d7b6e961a9cb",
																"typeString": "literal_string \"ERC721Metadata: URI query for nonexistent token\""
															},
															"value": "ERC721Metadata: URI query for nonexistent token"
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															},
															{
																"typeIdentifier": "t_stringliteral_a2d45c0fba603d40d82d590051761ca952d1ab9d78cca6d0d464d7b6e961a9cb",
																"typeString": "literal_string \"ERC721Metadata: URI query for nonexistent token\""
															}
														],
														"id": 1201,
														"name": "require",
														"nodeType": "Identifier",
														"overloadedDeclarations": [
															4294967278,
															4294967278
														],
														"referencedDeclaration": 4294967278,
														"src": "3115:7:11",
														"typeDescriptions": {
															"typeIdentifier": "t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$",
															"typeString": "function (bool,string memory) pure"
														}
													},
													"id": 1206,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"names": [],
													"nodeType": "FunctionCall",
													"src": "3115:76:11",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_tuple$__$",
														"typeString": "tuple()"
													}
												},
												"id": 1207,
												"nodeType": "ExpressionStatement",
												"src": "3115:76:11"
											},
											{
												"assignments": [
													1209
												],
												"declarations": [
													{
														"constant": false,
														"id": 1209,
														"mutability": "mutable",
														"name": "trueId",
														"nameLocation": "3210:6:11",
														"nodeType": "VariableDeclaration",
														"scope": 1241,
														"src": "3202:14:11",
														"stateVariable": false,
														"storageLocation": "default",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														},
														"typeName": {
															"id": 1208,
															"name": "uint256",
															"nodeType": "ElementaryTypeName",
															"src": "3202:7:11",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														},
														"visibility": "internal"
													}
												],
												"id": 1213,
												"initialValue": {
													"commonType": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													},
													"id": 1212,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"lValueRequested": false,
													"leftExpression": {
														"id": 1210,
														"name": "tokenId",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 1195,
														"src": "3219:7:11",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														}
													},
													"nodeType": "BinaryOperation",
													"operator": "+",
													"rightExpression": {
														"hexValue": "31",
														"id": 1211,
														"isConstant": false,
														"isLValue": false,
														"isPure": true,
														"kind": "number",
														"lValueRequested": false,
														"nodeType": "Literal",
														"src": "3229:1:11",
														"typeDescriptions": {
															"typeIdentifier": "t_rational_1_by_1",
															"typeString": "int_const 1"
														},
														"value": "1"
													},
													"src": "3219:11:11",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"nodeType": "VariableDeclarationStatement",
												"src": "3202:28:11"
											},
											{
												"condition": {
													"id": 1215,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"lValueRequested": false,
													"nodeType": "UnaryOperation",
													"operator": "!",
													"prefix": true,
													"src": "3244:11:11",
													"subExpression": {
														"id": 1214,
														"name": "isRevealed",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 978,
														"src": "3245:10:11",
														"typeDescriptions": {
															"typeIdentifier": "t_bool",
															"typeString": "bool"
														}
													},
													"typeDescriptions": {
														"typeIdentifier": "t_bool",
														"typeString": "bool"
													}
												},
												"id": 1219,
												"nodeType": "IfStatement",
												"src": "3241:66:11",
												"trueBody": {
													"id": 1218,
													"nodeType": "Block",
													"src": "3256:51:11",
													"statements": [
														{
															"expression": {
																"id": 1216,
																"name": "placeholderTokenUri",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 976,
																"src": "3277:19:11",
																"typeDescriptions": {
																	"typeIdentifier": "t_string_storage",
																	"typeString": "string storage ref"
																}
															},
															"functionReturnParameters": 1200,
															"id": 1217,
															"nodeType": "Return",
															"src": "3270:26:11"
														}
													]
												}
											},
											{
												"expression": {
													"condition": {
														"commonType": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														},
														"id": 1226,
														"isConstant": false,
														"isLValue": false,
														"isPure": false,
														"lValueRequested": false,
														"leftExpression": {
															"expression": {
																"arguments": [
																	{
																		"id": 1222,
																		"name": "baseTokenUri",
																		"nodeType": "Identifier",
																		"overloadedDeclarations": [],
																		"referencedDeclaration": 974,
																		"src": "3375:12:11",
																		"typeDescriptions": {
																			"typeIdentifier": "t_string_storage",
																			"typeString": "string storage ref"
																		}
																	}
																],
																"expression": {
																	"argumentTypes": [
																		{
																			"typeIdentifier": "t_string_storage",
																			"typeString": "string storage ref"
																		}
																	],
																	"id": 1221,
																	"isConstant": false,
																	"isLValue": false,
																	"isPure": true,
																	"lValueRequested": false,
																	"nodeType": "ElementaryTypeNameExpression",
																	"src": "3369:5:11",
																	"typeDescriptions": {
																		"typeIdentifier": "t_type$_t_bytes_storage_ptr_$",
																		"typeString": "type(bytes storage pointer)"
																	},
																	"typeName": {
																		"id": 1220,
																		"name": "bytes",
																		"nodeType": "ElementaryTypeName",
																		"src": "3369:5:11",
																		"typeDescriptions": {}
																	}
																},
																"id": 1223,
																"isConstant": false,
																"isLValue": false,
																"isPure": false,
																"kind": "typeConversion",
																"lValueRequested": false,
																"names": [],
																"nodeType": "FunctionCall",
																"src": "3369:19:11",
																"tryCall": false,
																"typeDescriptions": {
																	"typeIdentifier": "t_bytes_storage_ptr",
																	"typeString": "bytes storage pointer"
																}
															},
															"id": 1224,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"lValueRequested": false,
															"memberName": "length",
															"nodeType": "MemberAccess",
															"src": "3369:26:11",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														},
														"nodeType": "BinaryOperation",
														"operator": ">",
														"rightExpression": {
															"hexValue": "30",
															"id": 1225,
															"isConstant": false,
															"isLValue": false,
															"isPure": true,
															"kind": "number",
															"lValueRequested": false,
															"nodeType": "Literal",
															"src": "3398:1:11",
															"typeDescriptions": {
																"typeIdentifier": "t_rational_0_by_1",
																"typeString": "int_const 0"
															},
															"value": "0"
														},
														"src": "3369:30:11",
														"typeDescriptions": {
															"typeIdentifier": "t_bool",
															"typeString": "bool"
														}
													},
													"falseExpression": {
														"hexValue": "",
														"id": 1238,
														"isConstant": false,
														"isLValue": false,
														"isPure": true,
														"kind": "string",
														"lValueRequested": false,
														"nodeType": "Literal",
														"src": "3471:2:11",
														"typeDescriptions": {
															"typeIdentifier": "t_stringliteral_c5d2460186f7233c927e7db2dcc703c0e500b653ca82273b7bfad8045d85a470",
															"typeString": "literal_string \"\""
														},
														"value": ""
													},
													"id": 1239,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"lValueRequested": false,
													"nodeType": "Conditional",
													"src": "3369:104:11",
													"trueExpression": {
														"arguments": [
															{
																"arguments": [
																	{
																		"id": 1231,
																		"name": "baseTokenUri",
																		"nodeType": "Identifier",
																		"overloadedDeclarations": [],
																		"referencedDeclaration": 974,
																		"src": "3426:12:11",
																		"typeDescriptions": {
																			"typeIdentifier": "t_string_storage",
																			"typeString": "string storage ref"
																		}
																	},
																	{
																		"arguments": [],
																		"expression": {
																			"argumentTypes": [],
																			"expression": {
																				"id": 1232,
																				"name": "trueId",
																				"nodeType": "Identifier",
																				"overloadedDeclarations": [],
																				"referencedDeclaration": 1209,
																				"src": "3440:6:11",
																				"typeDescriptions": {
																					"typeIdentifier": "t_uint256",
																					"typeString": "uint256"
																				}
																			},
																			"id": 1233,
																			"isConstant": false,
																			"isLValue": false,
																			"isPure": false,
																			"lValueRequested": false,
																			"memberName": "toString",
																			"nodeType": "MemberAccess",
																			"referencedDeclaration": 698,
																			"src": "3440:15:11",
																			"typeDescriptions": {
																				"typeIdentifier": "t_function_internal_pure$_t_uint256_$returns$_t_string_memory_ptr_$bound_to$_t_uint256_$",
																				"typeString": "function (uint256) pure returns (string memory)"
																			}
																		},
																		"id": 1234,
																		"isConstant": false,
																		"isLValue": false,
																		"isPure": false,
																		"kind": "functionCall",
																		"lValueRequested": false,
																		"names": [],
																		"nodeType": "FunctionCall",
																		"src": "3440:17:11",
																		"tryCall": false,
																		"typeDescriptions": {
																			"typeIdentifier": "t_string_memory_ptr",
																			"typeString": "string memory"
																		}
																	},
																	{
																		"hexValue": "2e6a736f6e",
																		"id": 1235,
																		"isConstant": false,
																		"isLValue": false,
																		"isPure": true,
																		"kind": "string",
																		"lValueRequested": false,
																		"nodeType": "Literal",
																		"src": "3459:7:11",
																		"typeDescriptions": {
																			"typeIdentifier": "t_stringliteral_94311adc0a0cd4e10be11b23bd4316b8cffa4adf693e8f96f5c075aa439a7972",
																			"typeString": "literal_string \".json\""
																		},
																		"value": ".json"
																	}
																],
																"expression": {
																	"argumentTypes": [
																		{
																			"typeIdentifier": "t_string_storage",
																			"typeString": "string storage ref"
																		},
																		{
																			"typeIdentifier": "t_string_memory_ptr",
																			"typeString": "string memory"
																		},
																		{
																			"typeIdentifier": "t_stringliteral_94311adc0a0cd4e10be11b23bd4316b8cffa4adf693e8f96f5c075aa439a7972",
																			"typeString": "literal_string \".json\""
																		}
																	],
																	"expression": {
																		"id": 1229,
																		"name": "abi",
																		"nodeType": "Identifier",
																		"overloadedDeclarations": [],
																		"referencedDeclaration": 4294967295,
																		"src": "3409:3:11",
																		"typeDescriptions": {
																			"typeIdentifier": "t_magic_abi",
																			"typeString": "abi"
																		}
																	},
																	"id": 1230,
																	"isConstant": false,
																	"isLValue": false,
																	"isPure": true,
																	"lValueRequested": false,
																	"memberName": "encodePacked",
																	"nodeType": "MemberAccess",
																	"src": "3409:16:11",
																	"typeDescriptions": {
																		"typeIdentifier": "t_function_abiencodepacked_pure$__$returns$_t_bytes_memory_ptr_$",
																		"typeString": "function () pure returns (bytes memory)"
																	}
																},
																"id": 1236,
																"isConstant": false,
																"isLValue": false,
																"isPure": false,
																"kind": "functionCall",
																"lValueRequested": false,
																"names": [],
																"nodeType": "FunctionCall",
																"src": "3409:58:11",
																"tryCall": false,
																"typeDescriptions": {
																	"typeIdentifier": "t_bytes_memory_ptr",
																	"typeString": "bytes memory"
																}
															}
														],
														"expression": {
															"argumentTypes": [
																{
																	"typeIdentifier": "t_bytes_memory_ptr",
																	"typeString": "bytes memory"
																}
															],
															"id": 1228,
															"isConstant": false,
															"isLValue": false,
															"isPure": true,
															"lValueRequested": false,
															"nodeType": "ElementaryTypeNameExpression",
															"src": "3402:6:11",
															"typeDescriptions": {
																"typeIdentifier": "t_type$_t_string_storage_ptr_$",
																"typeString": "type(string storage pointer)"
															},
															"typeName": {
																"id": 1227,
																"name": "string",
																"nodeType": "ElementaryTypeName",
																"src": "3402:6:11",
																"typeDescriptions": {}
															}
														},
														"id": 1237,
														"isConstant": false,
														"isLValue": false,
														"isPure": false,
														"kind": "typeConversion",
														"lValueRequested": false,
														"names": [],
														"nodeType": "FunctionCall",
														"src": "3402:66:11",
														"tryCall": false,
														"typeDescriptions": {
															"typeIdentifier": "t_string_memory_ptr",
															"typeString": "string memory"
														}
													},
													"typeDescriptions": {
														"typeIdentifier": "t_string_memory_ptr",
														"typeString": "string memory"
													}
												},
												"functionReturnParameters": 1200,
												"id": 1240,
												"nodeType": "Return",
												"src": "3362:111:11"
											}
										]
									},
									"functionSelector": "c87b56dd",
									"id": 1242,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "tokenURI",
									"nameLocation": "3026:8:11",
									"nodeType": "FunctionDefinition",
									"overrides": {
										"id": 1197,
										"nodeType": "OverrideSpecifier",
										"overrides": [],
										"src": "3072:8:11"
									},
									"parameters": {
										"id": 1196,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 1195,
												"mutability": "mutable",
												"name": "tokenId",
												"nameLocation": "3043:7:11",
												"nodeType": "VariableDeclaration",
												"scope": 1242,
												"src": "3035:15:11",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 1194,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "3035:7:11",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "3034:17:11"
									},
									"returnParameters": {
										"id": 1200,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 1199,
												"mutability": "mutable",
												"name": "",
												"nameLocation": "-1:-1:-1",
												"nodeType": "VariableDeclaration",
												"scope": 1242,
												"src": "3090:13:11",
												"stateVariable": false,
												"storageLocation": "memory",
												"typeDescriptions": {
													"typeIdentifier": "t_string_memory_ptr",
													"typeString": "string"
												},
												"typeName": {
													"id": 1198,
													"name": "string",
													"nodeType": "ElementaryTypeName",
													"src": "3090:6:11",
													"typeDescriptions": {
														"typeIdentifier": "t_string_storage_ptr",
														"typeString": "string"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "3089:15:11"
									},
									"scope": 1414,
									"src": "3017:463:11",
									"stateMutability": "view",
									"virtual": true,
									"visibility": "public"
								},
								{
									"body": {
										"id": 1285,
										"nodeType": "Block",
										"src": "3630:339:11",
										"statements": [
											{
												"assignments": [
													1250
												],
												"declarations": [
													{
														"constant": false,
														"id": 1250,
														"mutability": "mutable",
														"name": "_owner",
														"nameLocation": "3648:6:11",
														"nodeType": "VariableDeclaration",
														"scope": 1285,
														"src": "3640:14:11",
														"stateVariable": false,
														"storageLocation": "default",
														"typeDescriptions": {
															"typeIdentifier": "t_address",
															"typeString": "address"
														},
														"typeName": {
															"id": 1249,
															"name": "address",
															"nodeType": "ElementaryTypeName",
															"src": "3640:7:11",
															"stateMutability": "nonpayable",
															"typeDescriptions": {
																"typeIdentifier": "t_address",
																"typeString": "address"
															}
														},
														"visibility": "internal"
													}
												],
												"id": 1253,
												"initialValue": {
													"expression": {
														"id": 1251,
														"name": "msg",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 4294967281,
														"src": "3657:3:11",
														"typeDescriptions": {
															"typeIdentifier": "t_magic_message",
															"typeString": "msg"
														}
													},
													"id": 1252,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"lValueRequested": false,
													"memberName": "sender",
													"nodeType": "MemberAccess",
													"src": "3657:10:11",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"nodeType": "VariableDeclarationStatement",
												"src": "3640:27:11"
											},
											{
												"assignments": [
													1255
												],
												"declarations": [
													{
														"constant": false,
														"id": 1255,
														"mutability": "mutable",
														"name": "numberOfOwnedNFT",
														"nameLocation": "3685:16:11",
														"nodeType": "VariableDeclaration",
														"scope": 1285,
														"src": "3677:24:11",
														"stateVariable": false,
														"storageLocation": "default",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														},
														"typeName": {
															"id": 1254,
															"name": "uint256",
															"nodeType": "ElementaryTypeName",
															"src": "3677:7:11",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														},
														"visibility": "internal"
													}
												],
												"id": 1259,
												"initialValue": {
													"arguments": [
														{
															"id": 1257,
															"name": "_owner",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 1250,
															"src": "3714:6:11",
															"typeDescriptions": {
																"typeIdentifier": "t_address",
																"typeString": "address"
															}
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_address",
																"typeString": "address"
															}
														],
														"id": 1256,
														"name": "balanceOf",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 1636,
														"src": "3704:9:11",
														"typeDescriptions": {
															"typeIdentifier": "t_function_internal_view$_t_address_$returns$_t_uint256_$",
															"typeString": "function (address) view returns (uint256)"
														}
													},
													"id": 1258,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"names": [],
													"nodeType": "FunctionCall",
													"src": "3704:17:11",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"nodeType": "VariableDeclarationStatement",
												"src": "3677:44:11"
											},
											{
												"assignments": [
													1264
												],
												"declarations": [
													{
														"constant": false,
														"id": 1264,
														"mutability": "mutable",
														"name": "ownerIds",
														"nameLocation": "3748:8:11",
														"nodeType": "VariableDeclaration",
														"scope": 1285,
														"src": "3731:25:11",
														"stateVariable": false,
														"storageLocation": "memory",
														"typeDescriptions": {
															"typeIdentifier": "t_array$_t_uint256_$dyn_memory_ptr",
															"typeString": "uint256[]"
														},
														"typeName": {
															"baseType": {
																"id": 1262,
																"name": "uint256",
																"nodeType": "ElementaryTypeName",
																"src": "3731:7:11",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															},
															"id": 1263,
															"nodeType": "ArrayTypeName",
															"src": "3731:9:11",
															"typeDescriptions": {
																"typeIdentifier": "t_array$_t_uint256_$dyn_storage_ptr",
																"typeString": "uint256[]"
															}
														},
														"visibility": "internal"
													}
												],
												"id": 1270,
												"initialValue": {
													"arguments": [
														{
															"id": 1268,
															"name": "numberOfOwnedNFT",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 1255,
															"src": "3773:16:11",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														],
														"id": 1267,
														"isConstant": false,
														"isLValue": false,
														"isPure": true,
														"lValueRequested": false,
														"nodeType": "NewExpression",
														"src": "3759:13:11",
														"typeDescriptions": {
															"typeIdentifier": "t_function_objectcreation_pure$_t_uint256_$returns$_t_array$_t_uint256_$dyn_memory_ptr_$",
															"typeString": "function (uint256) pure returns (uint256[] memory)"
														},
														"typeName": {
															"baseType": {
																"id": 1265,
																"name": "uint256",
																"nodeType": "ElementaryTypeName",
																"src": "3763:7:11",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															},
															"id": 1266,
															"nodeType": "ArrayTypeName",
															"src": "3763:9:11",
															"typeDescriptions": {
																"typeIdentifier": "t_array$_t_uint256_$dyn_storage_ptr",
																"typeString": "uint256[]"
															}
														}
													},
													"id": 1269,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"names": [],
													"nodeType": "FunctionCall",
													"src": "3759:31:11",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_array$_t_uint256_$dyn_memory_ptr",
														"typeString": "uint256[] memory"
													}
												},
												"nodeType": "VariableDeclarationStatement",
												"src": "3731:59:11"
											},
											{
												"body": {
													"id": 1281,
													"nodeType": "Block",
													"src": "3858:79:11",
													"statements": []
												},
												"condition": {
													"commonType": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													},
													"id": 1277,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"lValueRequested": false,
													"leftExpression": {
														"id": 1275,
														"name": "index",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 1272,
														"src": "3824:5:11",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														}
													},
													"nodeType": "BinaryOperation",
													"operator": "<",
													"rightExpression": {
														"id": 1276,
														"name": "numberOfOwnedNFT",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 1255,
														"src": "3832:16:11",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														}
													},
													"src": "3824:24:11",
													"typeDescriptions": {
														"typeIdentifier": "t_bool",
														"typeString": "bool"
													}
												},
												"id": 1282,
												"initializationExpression": {
													"assignments": [
														1272
													],
													"declarations": [
														{
															"constant": false,
															"id": 1272,
															"mutability": "mutable",
															"name": "index",
															"nameLocation": "3813:5:11",
															"nodeType": "VariableDeclaration",
															"scope": 1282,
															"src": "3805:13:11",
															"stateVariable": false,
															"storageLocation": "default",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															},
															"typeName": {
																"id": 1271,
																"name": "uint256",
																"nodeType": "ElementaryTypeName",
																"src": "3805:7:11",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															},
															"visibility": "internal"
														}
													],
													"id": 1274,
													"initialValue": {
														"hexValue": "30",
														"id": 1273,
														"isConstant": false,
														"isLValue": false,
														"isPure": true,
														"kind": "number",
														"lValueRequested": false,
														"nodeType": "Literal",
														"src": "3821:1:11",
														"typeDescriptions": {
															"typeIdentifier": "t_rational_0_by_1",
															"typeString": "int_const 0"
														},
														"value": "0"
													},
													"nodeType": "VariableDeclarationStatement",
													"src": "3805:17:11"
												},
												"loopExpression": {
													"expression": {
														"id": 1279,
														"isConstant": false,
														"isLValue": false,
														"isPure": false,
														"lValueRequested": false,
														"nodeType": "UnaryOperation",
														"operator": "++",
														"prefix": false,
														"src": "3850:7:11",
														"subExpression": {
															"id": 1278,
															"name": "index",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 1272,
															"src": "3850:5:11",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														},
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														}
													},
													"id": 1280,
													"nodeType": "ExpressionStatement",
													"src": "3850:7:11"
												},
												"nodeType": "ForStatement",
												"src": "3801:136:11"
											},
											{
												"expression": {
													"id": 1283,
													"name": "ownerIds",
													"nodeType": "Identifier",
													"overloadedDeclarations": [],
													"referencedDeclaration": 1264,
													"src": "3954:8:11",
													"typeDescriptions": {
														"typeIdentifier": "t_array$_t_uint256_$dyn_memory_ptr",
														"typeString": "uint256[] memory"
													}
												},
												"functionReturnParameters": 1248,
												"id": 1284,
												"nodeType": "Return",
												"src": "3947:15:11"
											}
										]
									},
									"documentation": {
										"id": 1243,
										"nodeType": "StructuredDocumentation",
										"src": "3486:80:11",
										"text": "@dev walletOf() function shouldn't be called on-chain due to gas consumption"
									},
									"functionSelector": "83a974a2",
									"id": 1286,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "walletOf",
									"nameLocation": "3580:8:11",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 1244,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "3588:2:11"
									},
									"returnParameters": {
										"id": 1248,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 1247,
												"mutability": "mutable",
												"name": "",
												"nameLocation": "-1:-1:-1",
												"nodeType": "VariableDeclaration",
												"scope": 1286,
												"src": "3613:16:11",
												"stateVariable": false,
												"storageLocation": "memory",
												"typeDescriptions": {
													"typeIdentifier": "t_array$_t_uint256_$dyn_memory_ptr",
													"typeString": "uint256[]"
												},
												"typeName": {
													"baseType": {
														"id": 1245,
														"name": "uint256",
														"nodeType": "ElementaryTypeName",
														"src": "3613:7:11",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														}
													},
													"id": 1246,
													"nodeType": "ArrayTypeName",
													"src": "3613:9:11",
													"typeDescriptions": {
														"typeIdentifier": "t_array$_t_uint256_$dyn_storage_ptr",
														"typeString": "uint256[]"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "3612:18:11"
									},
									"scope": 1414,
									"src": "3571:398:11",
									"stateMutability": "view",
									"virtual": false,
									"visibility": "external"
								},
								{
									"body": {
										"id": 1297,
										"nodeType": "Block",
										"src": "4043:45:11",
										"statements": [
											{
												"expression": {
													"id": 1295,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"lValueRequested": false,
													"leftHandSide": {
														"id": 1293,
														"name": "baseTokenUri",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 974,
														"src": "4053:12:11",
														"typeDescriptions": {
															"typeIdentifier": "t_string_storage",
															"typeString": "string storage ref"
														}
													},
													"nodeType": "Assignment",
													"operator": "=",
													"rightHandSide": {
														"id": 1294,
														"name": "_baseTokenUri",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 1288,
														"src": "4068:13:11",
														"typeDescriptions": {
															"typeIdentifier": "t_string_memory_ptr",
															"typeString": "string memory"
														}
													},
													"src": "4053:28:11",
													"typeDescriptions": {
														"typeIdentifier": "t_string_storage",
														"typeString": "string storage ref"
													}
												},
												"id": 1296,
												"nodeType": "ExpressionStatement",
												"src": "4053:28:11"
											}
										]
									},
									"functionSelector": "0675b7c6",
									"id": 1298,
									"implemented": true,
									"kind": "function",
									"modifiers": [
										{
											"id": 1291,
											"kind": "modifierInvocation",
											"modifierName": {
												"id": 1290,
												"name": "onlyOwner",
												"nodeType": "IdentifierPath",
												"referencedDeclaration": 46,
												"src": "4034:9:11"
											},
											"nodeType": "ModifierInvocation",
											"src": "4034:9:11"
										}
									],
									"name": "setTokenUri",
									"nameLocation": "3984:11:11",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 1289,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 1288,
												"mutability": "mutable",
												"name": "_baseTokenUri",
												"nameLocation": "4010:13:11",
												"nodeType": "VariableDeclaration",
												"scope": 1298,
												"src": "3996:27:11",
												"stateVariable": false,
												"storageLocation": "memory",
												"typeDescriptions": {
													"typeIdentifier": "t_string_memory_ptr",
													"typeString": "string"
												},
												"typeName": {
													"id": 1287,
													"name": "string",
													"nodeType": "ElementaryTypeName",
													"src": "3996:6:11",
													"typeDescriptions": {
														"typeIdentifier": "t_string_storage_ptr",
														"typeString": "string"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "3995:29:11"
									},
									"returnParameters": {
										"id": 1292,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "4043:0:11"
									},
									"scope": 1414,
									"src": "3975:113:11",
									"stateMutability": "nonpayable",
									"virtual": false,
									"visibility": "external"
								},
								{
									"body": {
										"id": 1309,
										"nodeType": "Block",
										"src": "4174:59:11",
										"statements": [
											{
												"expression": {
													"id": 1307,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"lValueRequested": false,
													"leftHandSide": {
														"id": 1305,
														"name": "placeholderTokenUri",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 976,
														"src": "4184:19:11",
														"typeDescriptions": {
															"typeIdentifier": "t_string_storage",
															"typeString": "string storage ref"
														}
													},
													"nodeType": "Assignment",
													"operator": "=",
													"rightHandSide": {
														"id": 1306,
														"name": "_placeholderTokenUri",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 1300,
														"src": "4206:20:11",
														"typeDescriptions": {
															"typeIdentifier": "t_string_memory_ptr",
															"typeString": "string memory"
														}
													},
													"src": "4184:42:11",
													"typeDescriptions": {
														"typeIdentifier": "t_string_storage",
														"typeString": "string storage ref"
													}
												},
												"id": 1308,
												"nodeType": "ExpressionStatement",
												"src": "4184:42:11"
											}
										]
									},
									"functionSelector": "b0962c53",
									"id": 1310,
									"implemented": true,
									"kind": "function",
									"modifiers": [
										{
											"id": 1303,
											"kind": "modifierInvocation",
											"modifierName": {
												"id": 1302,
												"name": "onlyOwner",
												"nodeType": "IdentifierPath",
												"referencedDeclaration": 46,
												"src": "4165:9:11"
											},
											"nodeType": "ModifierInvocation",
											"src": "4165:9:11"
										}
									],
									"name": "setPlaceHolderUri",
									"nameLocation": "4102:17:11",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 1301,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 1300,
												"mutability": "mutable",
												"name": "_placeholderTokenUri",
												"nameLocation": "4134:20:11",
												"nodeType": "VariableDeclaration",
												"scope": 1310,
												"src": "4120:34:11",
												"stateVariable": false,
												"storageLocation": "memory",
												"typeDescriptions": {
													"typeIdentifier": "t_string_memory_ptr",
													"typeString": "string"
												},
												"typeName": {
													"id": 1299,
													"name": "string",
													"nodeType": "ElementaryTypeName",
													"src": "4120:6:11",
													"typeDescriptions": {
														"typeIdentifier": "t_string_storage_ptr",
														"typeString": "string"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "4119:36:11"
									},
									"returnParameters": {
										"id": 1304,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "4174:0:11"
									},
									"scope": 1414,
									"src": "4093:140:11",
									"stateMutability": "nonpayable",
									"virtual": false,
									"visibility": "external"
								},
								{
									"body": {
										"id": 1321,
										"nodeType": "Block",
										"src": "4301:41:11",
										"statements": [
											{
												"expression": {
													"id": 1319,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"lValueRequested": false,
													"leftHandSide": {
														"id": 1317,
														"name": "merkleRoot",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 988,
														"src": "4311:10:11",
														"typeDescriptions": {
															"typeIdentifier": "t_bytes32",
															"typeString": "bytes32"
														}
													},
													"nodeType": "Assignment",
													"operator": "=",
													"rightHandSide": {
														"id": 1318,
														"name": "_merkleRoot",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 1312,
														"src": "4324:11:11",
														"typeDescriptions": {
															"typeIdentifier": "t_bytes32",
															"typeString": "bytes32"
														}
													},
													"src": "4311:24:11",
													"typeDescriptions": {
														"typeIdentifier": "t_bytes32",
														"typeString": "bytes32"
													}
												},
												"id": 1320,
												"nodeType": "ExpressionStatement",
												"src": "4311:24:11"
											}
										]
									},
									"functionSelector": "7cb64759",
									"id": 1322,
									"implemented": true,
									"kind": "function",
									"modifiers": [
										{
											"id": 1315,
											"kind": "modifierInvocation",
											"modifierName": {
												"id": 1314,
												"name": "onlyOwner",
												"nodeType": "IdentifierPath",
												"referencedDeclaration": 46,
												"src": "4292:9:11"
											},
											"nodeType": "ModifierInvocation",
											"src": "4292:9:11"
										}
									],
									"name": "setMerkleRoot",
									"nameLocation": "4248:13:11",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 1313,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 1312,
												"mutability": "mutable",
												"name": "_merkleRoot",
												"nameLocation": "4270:11:11",
												"nodeType": "VariableDeclaration",
												"scope": 1322,
												"src": "4262:19:11",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_bytes32",
													"typeString": "bytes32"
												},
												"typeName": {
													"id": 1311,
													"name": "bytes32",
													"nodeType": "ElementaryTypeName",
													"src": "4262:7:11",
													"typeDescriptions": {
														"typeIdentifier": "t_bytes32",
														"typeString": "bytes32"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "4261:21:11"
									},
									"returnParameters": {
										"id": 1316,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "4301:0:11"
									},
									"scope": 1414,
									"src": "4239:103:11",
									"stateMutability": "nonpayable",
									"virtual": false,
									"visibility": "external"
								},
								{
									"body": {
										"id": 1329,
										"nodeType": "Block",
										"src": "4404:34:11",
										"statements": [
											{
												"expression": {
													"id": 1327,
													"name": "merkleRoot",
													"nodeType": "Identifier",
													"overloadedDeclarations": [],
													"referencedDeclaration": 988,
													"src": "4421:10:11",
													"typeDescriptions": {
														"typeIdentifier": "t_bytes32",
														"typeString": "bytes32"
													}
												},
												"functionReturnParameters": 1326,
												"id": 1328,
												"nodeType": "Return",
												"src": "4414:17:11"
											}
										]
									},
									"functionSelector": "49590657",
									"id": 1330,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "getMerkleRoot",
									"nameLocation": "4357:13:11",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 1323,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "4370:2:11"
									},
									"returnParameters": {
										"id": 1326,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 1325,
												"mutability": "mutable",
												"name": "",
												"nameLocation": "-1:-1:-1",
												"nodeType": "VariableDeclaration",
												"scope": 1330,
												"src": "4396:7:11",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_bytes32",
													"typeString": "bytes32"
												},
												"typeName": {
													"id": 1324,
													"name": "bytes32",
													"nodeType": "ElementaryTypeName",
													"src": "4396:7:11",
													"typeDescriptions": {
														"typeIdentifier": "t_bytes32",
														"typeString": "bytes32"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "4395:9:11"
									},
									"scope": 1414,
									"src": "4348:90:11",
									"stateMutability": "view",
									"virtual": false,
									"visibility": "external"
								},
								{
									"body": {
										"id": 1340,
										"nodeType": "Block",
										"src": "4485:31:11",
										"statements": [
											{
												"expression": {
													"id": 1338,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"lValueRequested": false,
													"leftHandSide": {
														"id": 1335,
														"name": "pause",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 984,
														"src": "4495:5:11",
														"typeDescriptions": {
															"typeIdentifier": "t_bool",
															"typeString": "bool"
														}
													},
													"nodeType": "Assignment",
													"operator": "=",
													"rightHandSide": {
														"id": 1337,
														"isConstant": false,
														"isLValue": false,
														"isPure": false,
														"lValueRequested": false,
														"nodeType": "UnaryOperation",
														"operator": "!",
														"prefix": true,
														"src": "4503:6:11",
														"subExpression": {
															"id": 1336,
															"name": "pause",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 984,
															"src": "4504:5:11",
															"typeDescriptions": {
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															}
														},
														"typeDescriptions": {
															"typeIdentifier": "t_bool",
															"typeString": "bool"
														}
													},
													"src": "4495:14:11",
													"typeDescriptions": {
														"typeIdentifier": "t_bool",
														"typeString": "bool"
													}
												},
												"id": 1339,
												"nodeType": "ExpressionStatement",
												"src": "4495:14:11"
											}
										]
									},
									"functionSelector": "c4ae3168",
									"id": 1341,
									"implemented": true,
									"kind": "function",
									"modifiers": [
										{
											"id": 1333,
											"kind": "modifierInvocation",
											"modifierName": {
												"id": 1332,
												"name": "onlyOwner",
												"nodeType": "IdentifierPath",
												"referencedDeclaration": 46,
												"src": "4476:9:11"
											},
											"nodeType": "ModifierInvocation",
											"src": "4476:9:11"
										}
									],
									"name": "togglePause",
									"nameLocation": "4453:11:11",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 1331,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "4464:2:11"
									},
									"returnParameters": {
										"id": 1334,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "4485:0:11"
									},
									"scope": 1414,
									"src": "4444:72:11",
									"stateMutability": "nonpayable",
									"virtual": false,
									"visibility": "external"
								},
								{
									"body": {
										"id": 1351,
										"nodeType": "Block",
										"src": "4571:47:11",
										"statements": [
											{
												"expression": {
													"id": 1349,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"lValueRequested": false,
													"leftHandSide": {
														"id": 1346,
														"name": "whiteListSale",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 982,
														"src": "4581:13:11",
														"typeDescriptions": {
															"typeIdentifier": "t_bool",
															"typeString": "bool"
														}
													},
													"nodeType": "Assignment",
													"operator": "=",
													"rightHandSide": {
														"id": 1348,
														"isConstant": false,
														"isLValue": false,
														"isPure": false,
														"lValueRequested": false,
														"nodeType": "UnaryOperation",
														"operator": "!",
														"prefix": true,
														"src": "4597:14:11",
														"subExpression": {
															"id": 1347,
															"name": "whiteListSale",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 982,
															"src": "4598:13:11",
															"typeDescriptions": {
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															}
														},
														"typeDescriptions": {
															"typeIdentifier": "t_bool",
															"typeString": "bool"
														}
													},
													"src": "4581:30:11",
													"typeDescriptions": {
														"typeIdentifier": "t_bool",
														"typeString": "bool"
													}
												},
												"id": 1350,
												"nodeType": "ExpressionStatement",
												"src": "4581:30:11"
											}
										]
									},
									"functionSelector": "8bb64a8c",
									"id": 1352,
									"implemented": true,
									"kind": "function",
									"modifiers": [
										{
											"id": 1344,
											"kind": "modifierInvocation",
											"modifierName": {
												"id": 1343,
												"name": "onlyOwner",
												"nodeType": "IdentifierPath",
												"referencedDeclaration": 46,
												"src": "4562:9:11"
											},
											"nodeType": "ModifierInvocation",
											"src": "4562:9:11"
										}
									],
									"name": "toggleWhiteListSale",
									"nameLocation": "4531:19:11",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 1342,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "4550:2:11"
									},
									"returnParameters": {
										"id": 1345,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "4571:0:11"
									},
									"scope": 1414,
									"src": "4522:96:11",
									"stateMutability": "nonpayable",
									"virtual": false,
									"visibility": "external"
								},
								{
									"body": {
										"id": 1362,
										"nodeType": "Block",
										"src": "4670:41:11",
										"statements": [
											{
												"expression": {
													"id": 1360,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"lValueRequested": false,
													"leftHandSide": {
														"id": 1357,
														"name": "publicSale",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 980,
														"src": "4680:10:11",
														"typeDescriptions": {
															"typeIdentifier": "t_bool",
															"typeString": "bool"
														}
													},
													"nodeType": "Assignment",
													"operator": "=",
													"rightHandSide": {
														"id": 1359,
														"isConstant": false,
														"isLValue": false,
														"isPure": false,
														"lValueRequested": false,
														"nodeType": "UnaryOperation",
														"operator": "!",
														"prefix": true,
														"src": "4693:11:11",
														"subExpression": {
															"id": 1358,
															"name": "publicSale",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 980,
															"src": "4694:10:11",
															"typeDescriptions": {
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															}
														},
														"typeDescriptions": {
															"typeIdentifier": "t_bool",
															"typeString": "bool"
														}
													},
													"src": "4680:24:11",
													"typeDescriptions": {
														"typeIdentifier": "t_bool",
														"typeString": "bool"
													}
												},
												"id": 1361,
												"nodeType": "ExpressionStatement",
												"src": "4680:24:11"
											}
										]
									},
									"functionSelector": "e222c7f9",
									"id": 1363,
									"implemented": true,
									"kind": "function",
									"modifiers": [
										{
											"id": 1355,
											"kind": "modifierInvocation",
											"modifierName": {
												"id": 1354,
												"name": "onlyOwner",
												"nodeType": "IdentifierPath",
												"referencedDeclaration": 46,
												"src": "4661:9:11"
											},
											"nodeType": "ModifierInvocation",
											"src": "4661:9:11"
										}
									],
									"name": "togglePublicSale",
									"nameLocation": "4633:16:11",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 1353,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "4649:2:11"
									},
									"returnParameters": {
										"id": 1356,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "4670:0:11"
									},
									"scope": 1414,
									"src": "4624:87:11",
									"stateMutability": "nonpayable",
									"virtual": false,
									"visibility": "external"
								},
								{
									"body": {
										"id": 1373,
										"nodeType": "Block",
										"src": "4759:41:11",
										"statements": [
											{
												"expression": {
													"id": 1371,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"lValueRequested": false,
													"leftHandSide": {
														"id": 1368,
														"name": "isRevealed",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 978,
														"src": "4769:10:11",
														"typeDescriptions": {
															"typeIdentifier": "t_bool",
															"typeString": "bool"
														}
													},
													"nodeType": "Assignment",
													"operator": "=",
													"rightHandSide": {
														"id": 1370,
														"isConstant": false,
														"isLValue": false,
														"isPure": false,
														"lValueRequested": false,
														"nodeType": "UnaryOperation",
														"operator": "!",
														"prefix": true,
														"src": "4782:11:11",
														"subExpression": {
															"id": 1369,
															"name": "isRevealed",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 978,
															"src": "4783:10:11",
															"typeDescriptions": {
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															}
														},
														"typeDescriptions": {
															"typeIdentifier": "t_bool",
															"typeString": "bool"
														}
													},
													"src": "4769:24:11",
													"typeDescriptions": {
														"typeIdentifier": "t_bool",
														"typeString": "bool"
													}
												},
												"id": 1372,
												"nodeType": "ExpressionStatement",
												"src": "4769:24:11"
											}
										]
									},
									"functionSelector": "5b8ad429",
									"id": 1374,
									"implemented": true,
									"kind": "function",
									"modifiers": [
										{
											"id": 1366,
											"kind": "modifierInvocation",
											"modifierName": {
												"id": 1365,
												"name": "onlyOwner",
												"nodeType": "IdentifierPath",
												"referencedDeclaration": 46,
												"src": "4750:9:11"
											},
											"nodeType": "ModifierInvocation",
											"src": "4750:9:11"
										}
									],
									"name": "toggleReveal",
									"nameLocation": "4726:12:11",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 1364,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "4738:2:11"
									},
									"returnParameters": {
										"id": 1367,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "4759:0:11"
									},
									"scope": 1414,
									"src": "4717:83:11",
									"stateMutability": "nonpayable",
									"virtual": false,
									"visibility": "external"
								},
								{
									"body": {
										"id": 1412,
										"nodeType": "Block",
										"src": "4844:261:11",
										"statements": [
											{
												"assignments": [
													1380
												],
												"declarations": [
													{
														"constant": false,
														"id": 1380,
														"mutability": "mutable",
														"name": "withdrawAmount_35",
														"nameLocation": "4897:17:11",
														"nodeType": "VariableDeclaration",
														"scope": 1412,
														"src": "4889:25:11",
														"stateVariable": false,
														"storageLocation": "default",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														},
														"typeName": {
															"id": 1379,
															"name": "uint256",
															"nodeType": "ElementaryTypeName",
															"src": "4889:7:11",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														},
														"visibility": "internal"
													}
												],
												"id": 1390,
												"initialValue": {
													"commonType": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													},
													"id": 1389,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"lValueRequested": false,
													"leftExpression": {
														"commonType": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														},
														"id": 1387,
														"isConstant": false,
														"isLValue": false,
														"isPure": false,
														"lValueRequested": false,
														"leftExpression": {
															"expression": {
																"arguments": [
																	{
																		"id": 1383,
																		"name": "this",
																		"nodeType": "Identifier",
																		"overloadedDeclarations": [],
																		"referencedDeclaration": 4294967268,
																		"src": "4925:4:11",
																		"typeDescriptions": {
																			"typeIdentifier": "t_contract$_CryptoBullDogsOfficial_$1414",
																			"typeString": "contract CryptoBullDogsOfficial"
																		}
																	}
																],
																"expression": {
																	"argumentTypes": [
																		{
																			"typeIdentifier": "t_contract$_CryptoBullDogsOfficial_$1414",
																			"typeString": "contract CryptoBullDogsOfficial"
																		}
																	],
																	"id": 1382,
																	"isConstant": false,
																	"isLValue": false,
																	"isPure": true,
																	"lValueRequested": false,
																	"nodeType": "ElementaryTypeNameExpression",
																	"src": "4917:7:11",
																	"typeDescriptions": {
																		"typeIdentifier": "t_type$_t_address_$",
																		"typeString": "type(address)"
																	},
																	"typeName": {
																		"id": 1381,
																		"name": "address",
																		"nodeType": "ElementaryTypeName",
																		"src": "4917:7:11",
																		"typeDescriptions": {}
																	}
																},
																"id": 1384,
																"isConstant": false,
																"isLValue": false,
																"isPure": false,
																"kind": "typeConversion",
																"lValueRequested": false,
																"names": [],
																"nodeType": "FunctionCall",
																"src": "4917:13:11",
																"tryCall": false,
																"typeDescriptions": {
																	"typeIdentifier": "t_address",
																	"typeString": "address"
																}
															},
															"id": 1385,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"lValueRequested": false,
															"memberName": "balance",
															"nodeType": "MemberAccess",
															"src": "4917:21:11",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														},
														"nodeType": "BinaryOperation",
														"operator": "*",
														"rightExpression": {
															"hexValue": "33",
															"id": 1386,
															"isConstant": false,
															"isLValue": false,
															"isPure": true,
															"kind": "number",
															"lValueRequested": false,
															"nodeType": "Literal",
															"src": "4941:1:11",
															"typeDescriptions": {
																"typeIdentifier": "t_rational_3_by_1",
																"typeString": "int_const 3"
															},
															"value": "3"
														},
														"src": "4917:25:11",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														}
													},
													"nodeType": "BinaryOperation",
													"operator": "/",
													"rightExpression": {
														"hexValue": "313030",
														"id": 1388,
														"isConstant": false,
														"isLValue": false,
														"isPure": true,
														"kind": "number",
														"lValueRequested": false,
														"nodeType": "Literal",
														"src": "4943:3:11",
														"typeDescriptions": {
															"typeIdentifier": "t_rational_100_by_1",
															"typeString": "int_const 100"
														},
														"value": "100"
													},
													"src": "4917:29:11",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"nodeType": "VariableDeclarationStatement",
												"src": "4889:57:11"
											},
											{
												"expression": {
													"arguments": [
														{
															"id": 1396,
															"name": "withdrawAmount_35",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 1380,
															"src": "5017:17:11",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														],
														"expression": {
															"arguments": [
																{
																	"hexValue": "307839304545346238304333623135623862383335313042453846636632424365443639613463394442",
																	"id": 1393,
																	"isConstant": false,
																	"isLValue": false,
																	"isPure": true,
																	"kind": "number",
																	"lValueRequested": false,
																	"nodeType": "Literal",
																	"src": "4964:42:11",
																	"typeDescriptions": {
																		"typeIdentifier": "t_address",
																		"typeString": "address"
																	},
																	"value": "0x90EE4b80C3b15b8b83510BE8Fcf2BCeD69a4c9DB"
																}
															],
															"expression": {
																"argumentTypes": [
																	{
																		"typeIdentifier": "t_address",
																		"typeString": "address"
																	}
																],
																"id": 1392,
																"isConstant": false,
																"isLValue": false,
																"isPure": true,
																"lValueRequested": false,
																"nodeType": "ElementaryTypeNameExpression",
																"src": "4956:8:11",
																"typeDescriptions": {
																	"typeIdentifier": "t_type$_t_address_payable_$",
																	"typeString": "type(address payable)"
																},
																"typeName": {
																	"id": 1391,
																	"name": "address",
																	"nodeType": "ElementaryTypeName",
																	"src": "4956:8:11",
																	"stateMutability": "payable",
																	"typeDescriptions": {}
																}
															},
															"id": 1394,
															"isConstant": false,
															"isLValue": false,
															"isPure": true,
															"kind": "typeConversion",
															"lValueRequested": false,
															"names": [],
															"nodeType": "FunctionCall",
															"src": "4956:51:11",
															"tryCall": false,
															"typeDescriptions": {
																"typeIdentifier": "t_address_payable",
																"typeString": "address payable"
															}
														},
														"id": 1395,
														"isConstant": false,
														"isLValue": false,
														"isPure": false,
														"lValueRequested": false,
														"memberName": "transfer",
														"nodeType": "MemberAccess",
														"src": "4956:60:11",
														"typeDescriptions": {
															"typeIdentifier": "t_function_transfer_nonpayable$_t_uint256_$returns$__$",
															"typeString": "function (uint256)"
														}
													},
													"id": 1397,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"names": [],
													"nodeType": "FunctionCall",
													"src": "4956:79:11",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_tuple$__$",
														"typeString": "tuple()"
													}
												},
												"id": 1398,
												"nodeType": "ExpressionStatement",
												"src": "4956:79:11"
											},
											{
												"expression": {
													"arguments": [
														{
															"expression": {
																"arguments": [
																	{
																		"id": 1407,
																		"name": "this",
																		"nodeType": "Identifier",
																		"overloadedDeclarations": [],
																		"referencedDeclaration": 4294967268,
																		"src": "5084:4:11",
																		"typeDescriptions": {
																			"typeIdentifier": "t_contract$_CryptoBullDogsOfficial_$1414",
																			"typeString": "contract CryptoBullDogsOfficial"
																		}
																	}
																],
																"expression": {
																	"argumentTypes": [
																		{
																			"typeIdentifier": "t_contract$_CryptoBullDogsOfficial_$1414",
																			"typeString": "contract CryptoBullDogsOfficial"
																		}
																	],
																	"id": 1406,
																	"isConstant": false,
																	"isLValue": false,
																	"isPure": true,
																	"lValueRequested": false,
																	"nodeType": "ElementaryTypeNameExpression",
																	"src": "5076:7:11",
																	"typeDescriptions": {
																		"typeIdentifier": "t_type$_t_address_$",
																		"typeString": "type(address)"
																	},
																	"typeName": {
																		"id": 1405,
																		"name": "address",
																		"nodeType": "ElementaryTypeName",
																		"src": "5076:7:11",
																		"typeDescriptions": {}
																	}
																},
																"id": 1408,
																"isConstant": false,
																"isLValue": false,
																"isPure": false,
																"kind": "typeConversion",
																"lValueRequested": false,
																"names": [],
																"nodeType": "FunctionCall",
																"src": "5076:13:11",
																"tryCall": false,
																"typeDescriptions": {
																	"typeIdentifier": "t_address",
																	"typeString": "address"
																}
															},
															"id": 1409,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"lValueRequested": false,
															"memberName": "balance",
															"nodeType": "MemberAccess",
															"src": "5076:21:11",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														],
														"expression": {
															"arguments": [
																{
																	"expression": {
																		"id": 1401,
																		"name": "msg",
																		"nodeType": "Identifier",
																		"overloadedDeclarations": [],
																		"referencedDeclaration": 4294967281,
																		"src": "5055:3:11",
																		"typeDescriptions": {
																			"typeIdentifier": "t_magic_message",
																			"typeString": "msg"
																		}
																	},
																	"id": 1402,
																	"isConstant": false,
																	"isLValue": false,
																	"isPure": false,
																	"lValueRequested": false,
																	"memberName": "sender",
																	"nodeType": "MemberAccess",
																	"src": "5055:10:11",
																	"typeDescriptions": {
																		"typeIdentifier": "t_address",
																		"typeString": "address"
																	}
																}
															],
															"expression": {
																"argumentTypes": [
																	{
																		"typeIdentifier": "t_address",
																		"typeString": "address"
																	}
																],
																"id": 1400,
																"isConstant": false,
																"isLValue": false,
																"isPure": true,
																"lValueRequested": false,
																"nodeType": "ElementaryTypeNameExpression",
																"src": "5047:8:11",
																"typeDescriptions": {
																	"typeIdentifier": "t_type$_t_address_payable_$",
																	"typeString": "type(address payable)"
																},
																"typeName": {
																	"id": 1399,
																	"name": "address",
																	"nodeType": "ElementaryTypeName",
																	"src": "5047:8:11",
																	"stateMutability": "payable",
																	"typeDescriptions": {}
																}
															},
															"id": 1403,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"kind": "typeConversion",
															"lValueRequested": false,
															"names": [],
															"nodeType": "FunctionCall",
															"src": "5047:19:11",
															"tryCall": false,
															"typeDescriptions": {
																"typeIdentifier": "t_address_payable",
																"typeString": "address payable"
															}
														},
														"id": 1404,
														"isConstant": false,
														"isLValue": false,
														"isPure": false,
														"lValueRequested": false,
														"memberName": "transfer",
														"nodeType": "MemberAccess",
														"src": "5047:28:11",
														"typeDescriptions": {
															"typeIdentifier": "t_function_transfer_nonpayable$_t_uint256_$returns$__$",
															"typeString": "function (uint256)"
														}
													},
													"id": 1410,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"names": [],
													"nodeType": "FunctionCall",
													"src": "5047:51:11",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_tuple$__$",
														"typeString": "tuple()"
													}
												},
												"id": 1411,
												"nodeType": "ExpressionStatement",
												"src": "5047:51:11"
											}
										]
									},
									"functionSelector": "3ccfd60b",
									"id": 1413,
									"implemented": true,
									"kind": "function",
									"modifiers": [
										{
											"id": 1377,
											"kind": "modifierInvocation",
											"modifierName": {
												"id": 1376,
												"name": "onlyOwner",
												"nodeType": "IdentifierPath",
												"referencedDeclaration": 46,
												"src": "4835:9:11"
											},
											"nodeType": "ModifierInvocation",
											"src": "4835:9:11"
										}
									],
									"name": "withdraw",
									"nameLocation": "4815:8:11",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 1375,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "4823:2:11"
									},
									"returnParameters": {
										"id": 1378,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "4844:0:11"
									},
									"scope": 1414,
									"src": "4806:299:11",
									"stateMutability": "nonpayable",
									"virtual": false,
									"visibility": "external"
								}
							],
							"scope": 1415,
							"src": "220:4887:11",
							"usedErrors": [
								1426,
								1428,
								1430,
								1432,
								1434,
								1442,
								1444,
								1448,
								1452,
								1454,
								1456,
								1458
							]
						}
					],
					"src": "32:5077:11"
				},
				"id": 11
			},
			"erc721a/contracts/ERC721A.sol": {
				"ast": {
					"absolutePath": "erc721a/contracts/ERC721A.sol",
					"exportedSymbols": {
						"Address": [
							591
						],
						"ApprovalCallerNotOwnerNorApproved": [
							1426
						],
						"ApprovalQueryForNonexistentToken": [
							1428
						],
						"ApprovalToCurrentOwner": [
							1432
						],
						"ApproveToCaller": [
							1430
						],
						"AuxQueryForZeroAddress": [
							1440
						],
						"BalanceQueryForZeroAddress": [
							1434
						],
						"BurnedQueryForZeroAddress": [
							1438
						],
						"Context": [
							613
						],
						"ERC165": [
							933
						],
						"ERC721A": [
							2729
						],
						"IERC165": [
							945
						],
						"IERC721": [
							220
						],
						"IERC721Enumerable": [
							269
						],
						"IERC721Metadata": [
							296
						],
						"IERC721Receiver": [
							238
						],
						"MintToZeroAddress": [
							1442
						],
						"MintZeroQuantity": [
							1444
						],
						"MintedQueryForZeroAddress": [
							1436
						],
						"OwnerIndexOutOfBounds": [
							1446
						],
						"OwnerQueryForNonexistentToken": [
							1448
						],
						"Strings": [
							816
						],
						"TokenIndexOutOfBounds": [
							1450
						],
						"TransferCallerNotOwnerNorApproved": [
							1452
						],
						"TransferFromIncorrectOwner": [
							1454
						],
						"TransferToNonERC721ReceiverImplementer": [
							1456
						],
						"TransferToZeroAddress": [
							1458
						],
						"URIQueryForNonexistentToken": [
							1460
						]
					},
					"id": 2730,
					"license": "MIT",
					"nodeType": "SourceUnit",
					"nodes": [
						{
							"id": 1416,
							"literals": [
								"solidity",
								"^",
								"0.8",
								".4"
							],
							"nodeType": "PragmaDirective",
							"src": "56:23:12"
						},
						{
							"absolutePath": "@openzeppelin/contracts/token/ERC721/IERC721.sol",
							"file": "@openzeppelin/contracts/token/ERC721/IERC721.sol",
							"id": 1417,
							"nameLocation": "-1:-1:-1",
							"nodeType": "ImportDirective",
							"scope": 2730,
							"sourceUnit": 221,
							"src": "81:58:12",
							"symbolAliases": [],
							"unitAlias": ""
						},
						{
							"absolutePath": "@openzeppelin/contracts/token/ERC721/IERC721Receiver.sol",
							"file": "@openzeppelin/contracts/token/ERC721/IERC721Receiver.sol",
							"id": 1418,
							"nameLocation": "-1:-1:-1",
							"nodeType": "ImportDirective",
							"scope": 2730,
							"sourceUnit": 239,
							"src": "140:66:12",
							"symbolAliases": [],
							"unitAlias": ""
						},
						{
							"absolutePath": "@openzeppelin/contracts/token/ERC721/extensions/IERC721Metadata.sol",
							"file": "@openzeppelin/contracts/token/ERC721/extensions/IERC721Metadata.sol",
							"id": 1419,
							"nameLocation": "-1:-1:-1",
							"nodeType": "ImportDirective",
							"scope": 2730,
							"sourceUnit": 297,
							"src": "207:77:12",
							"symbolAliases": [],
							"unitAlias": ""
						},
						{
							"absolutePath": "@openzeppelin/contracts/token/ERC721/extensions/IERC721Enumerable.sol",
							"file": "@openzeppelin/contracts/token/ERC721/extensions/IERC721Enumerable.sol",
							"id": 1420,
							"nameLocation": "-1:-1:-1",
							"nodeType": "ImportDirective",
							"scope": 2730,
							"sourceUnit": 270,
							"src": "285:79:12",
							"symbolAliases": [],
							"unitAlias": ""
						},
						{
							"absolutePath": "@openzeppelin/contracts/utils/Address.sol",
							"file": "@openzeppelin/contracts/utils/Address.sol",
							"id": 1421,
							"nameLocation": "-1:-1:-1",
							"nodeType": "ImportDirective",
							"scope": 2730,
							"sourceUnit": 592,
							"src": "365:51:12",
							"symbolAliases": [],
							"unitAlias": ""
						},
						{
							"absolutePath": "@openzeppelin/contracts/utils/Context.sol",
							"file": "@openzeppelin/contracts/utils/Context.sol",
							"id": 1422,
							"nameLocation": "-1:-1:-1",
							"nodeType": "ImportDirective",
							"scope": 2730,
							"sourceUnit": 614,
							"src": "417:51:12",
							"symbolAliases": [],
							"unitAlias": ""
						},
						{
							"absolutePath": "@openzeppelin/contracts/utils/Strings.sol",
							"file": "@openzeppelin/contracts/utils/Strings.sol",
							"id": 1423,
							"nameLocation": "-1:-1:-1",
							"nodeType": "ImportDirective",
							"scope": 2730,
							"sourceUnit": 817,
							"src": "469:51:12",
							"symbolAliases": [],
							"unitAlias": ""
						},
						{
							"absolutePath": "@openzeppelin/contracts/utils/introspection/ERC165.sol",
							"file": "@openzeppelin/contracts/utils/introspection/ERC165.sol",
							"id": 1424,
							"nameLocation": "-1:-1:-1",
							"nodeType": "ImportDirective",
							"scope": 2730,
							"sourceUnit": 934,
							"src": "521:64:12",
							"symbolAliases": [],
							"unitAlias": ""
						},
						{
							"id": 1426,
							"name": "ApprovalCallerNotOwnerNorApproved",
							"nameLocation": "593:33:12",
							"nodeType": "ErrorDefinition",
							"parameters": {
								"id": 1425,
								"nodeType": "ParameterList",
								"parameters": [],
								"src": "626:2:12"
							},
							"src": "587:42:12"
						},
						{
							"id": 1428,
							"name": "ApprovalQueryForNonexistentToken",
							"nameLocation": "636:32:12",
							"nodeType": "ErrorDefinition",
							"parameters": {
								"id": 1427,
								"nodeType": "ParameterList",
								"parameters": [],
								"src": "668:2:12"
							},
							"src": "630:41:12"
						},
						{
							"id": 1430,
							"name": "ApproveToCaller",
							"nameLocation": "678:15:12",
							"nodeType": "ErrorDefinition",
							"parameters": {
								"id": 1429,
								"nodeType": "ParameterList",
								"parameters": [],
								"src": "693:2:12"
							},
							"src": "672:24:12"
						},
						{
							"id": 1432,
							"name": "ApprovalToCurrentOwner",
							"nameLocation": "703:22:12",
							"nodeType": "ErrorDefinition",
							"parameters": {
								"id": 1431,
								"nodeType": "ParameterList",
								"parameters": [],
								"src": "725:2:12"
							},
							"src": "697:31:12"
						},
						{
							"id": 1434,
							"name": "BalanceQueryForZeroAddress",
							"nameLocation": "735:26:12",
							"nodeType": "ErrorDefinition",
							"parameters": {
								"id": 1433,
								"nodeType": "ParameterList",
								"parameters": [],
								"src": "761:2:12"
							},
							"src": "729:35:12"
						},
						{
							"id": 1436,
							"name": "MintedQueryForZeroAddress",
							"nameLocation": "771:25:12",
							"nodeType": "ErrorDefinition",
							"parameters": {
								"id": 1435,
								"nodeType": "ParameterList",
								"parameters": [],
								"src": "796:2:12"
							},
							"src": "765:34:12"
						},
						{
							"id": 1438,
							"name": "BurnedQueryForZeroAddress",
							"nameLocation": "806:25:12",
							"nodeType": "ErrorDefinition",
							"parameters": {
								"id": 1437,
								"nodeType": "ParameterList",
								"parameters": [],
								"src": "831:2:12"
							},
							"src": "800:34:12"
						},
						{
							"id": 1440,
							"name": "AuxQueryForZeroAddress",
							"nameLocation": "841:22:12",
							"nodeType": "ErrorDefinition",
							"parameters": {
								"id": 1439,
								"nodeType": "ParameterList",
								"parameters": [],
								"src": "863:2:12"
							},
							"src": "835:31:12"
						},
						{
							"id": 1442,
							"name": "MintToZeroAddress",
							"nameLocation": "873:17:12",
							"nodeType": "ErrorDefinition",
							"parameters": {
								"id": 1441,
								"nodeType": "ParameterList",
								"parameters": [],
								"src": "890:2:12"
							},
							"src": "867:26:12"
						},
						{
							"id": 1444,
							"name": "MintZeroQuantity",
							"nameLocation": "900:16:12",
							"nodeType": "ErrorDefinition",
							"parameters": {
								"id": 1443,
								"nodeType": "ParameterList",
								"parameters": [],
								"src": "916:2:12"
							},
							"src": "894:25:12"
						},
						{
							"id": 1446,
							"name": "OwnerIndexOutOfBounds",
							"nameLocation": "926:21:12",
							"nodeType": "ErrorDefinition",
							"parameters": {
								"id": 1445,
								"nodeType": "ParameterList",
								"parameters": [],
								"src": "947:2:12"
							},
							"src": "920:30:12"
						},
						{
							"id": 1448,
							"name": "OwnerQueryForNonexistentToken",
							"nameLocation": "957:29:12",
							"nodeType": "ErrorDefinition",
							"parameters": {
								"id": 1447,
								"nodeType": "ParameterList",
								"parameters": [],
								"src": "986:2:12"
							},
							"src": "951:38:12"
						},
						{
							"id": 1450,
							"name": "TokenIndexOutOfBounds",
							"nameLocation": "996:21:12",
							"nodeType": "ErrorDefinition",
							"parameters": {
								"id": 1449,
								"nodeType": "ParameterList",
								"parameters": [],
								"src": "1017:2:12"
							},
							"src": "990:30:12"
						},
						{
							"id": 1452,
							"name": "TransferCallerNotOwnerNorApproved",
							"nameLocation": "1027:33:12",
							"nodeType": "ErrorDefinition",
							"parameters": {
								"id": 1451,
								"nodeType": "ParameterList",
								"parameters": [],
								"src": "1060:2:12"
							},
							"src": "1021:42:12"
						},
						{
							"id": 1454,
							"name": "TransferFromIncorrectOwner",
							"nameLocation": "1070:26:12",
							"nodeType": "ErrorDefinition",
							"parameters": {
								"id": 1453,
								"nodeType": "ParameterList",
								"parameters": [],
								"src": "1096:2:12"
							},
							"src": "1064:35:12"
						},
						{
							"id": 1456,
							"name": "TransferToNonERC721ReceiverImplementer",
							"nameLocation": "1106:38:12",
							"nodeType": "ErrorDefinition",
							"parameters": {
								"id": 1455,
								"nodeType": "ParameterList",
								"parameters": [],
								"src": "1144:2:12"
							},
							"src": "1100:47:12"
						},
						{
							"id": 1458,
							"name": "TransferToZeroAddress",
							"nameLocation": "1154:21:12",
							"nodeType": "ErrorDefinition",
							"parameters": {
								"id": 1457,
								"nodeType": "ParameterList",
								"parameters": [],
								"src": "1175:2:12"
							},
							"src": "1148:30:12"
						},
						{
							"id": 1460,
							"name": "URIQueryForNonexistentToken",
							"nameLocation": "1185:27:12",
							"nodeType": "ErrorDefinition",
							"parameters": {
								"id": 1459,
								"nodeType": "ParameterList",
								"parameters": [],
								"src": "1212:2:12"
							},
							"src": "1179:36:12"
						},
						{
							"abstract": false,
							"baseContracts": [
								{
									"baseName": {
										"id": 1462,
										"name": "Context",
										"nodeType": "IdentifierPath",
										"referencedDeclaration": 613,
										"src": "1728:7:12"
									},
									"id": 1463,
									"nodeType": "InheritanceSpecifier",
									"src": "1728:7:12"
								},
								{
									"baseName": {
										"id": 1464,
										"name": "ERC165",
										"nodeType": "IdentifierPath",
										"referencedDeclaration": 933,
										"src": "1737:6:12"
									},
									"id": 1465,
									"nodeType": "InheritanceSpecifier",
									"src": "1737:6:12"
								},
								{
									"baseName": {
										"id": 1466,
										"name": "IERC721",
										"nodeType": "IdentifierPath",
										"referencedDeclaration": 220,
										"src": "1745:7:12"
									},
									"id": 1467,
									"nodeType": "InheritanceSpecifier",
									"src": "1745:7:12"
								},
								{
									"baseName": {
										"id": 1468,
										"name": "IERC721Metadata",
										"nodeType": "IdentifierPath",
										"referencedDeclaration": 296,
										"src": "1754:15:12"
									},
									"id": 1469,
									"nodeType": "InheritanceSpecifier",
									"src": "1754:15:12"
								}
							],
							"canonicalName": "ERC721A",
							"contractDependencies": [],
							"contractKind": "contract",
							"documentation": {
								"id": 1461,
								"nodeType": "StructuredDocumentation",
								"src": "1217:490:12",
								"text": " @dev Implementation of https://eips.ethereum.org/EIPS/eip-721[ERC721] Non-Fungible Token Standard, including\n the Metadata extension. Built to optimize for lower gas during batch mints.\n Assumes serials are sequentially minted starting at _startTokenId() (defaults to 0, e.g. 0, 1, 2, 3..).\n Assumes that an owner cannot have more than 2**64 - 1 (max value of uint64) of supply.\n Assumes that the maximum token id cannot exceed 2**256 - 1 (max value of uint256)."
							},
							"fullyImplemented": true,
							"id": 2729,
							"linearizedBaseContracts": [
								2729,
								296,
								220,
								933,
								945,
								613
							],
							"name": "ERC721A",
							"nameLocation": "1717:7:12",
							"nodeType": "ContractDefinition",
							"nodes": [
								{
									"id": 1472,
									"libraryName": {
										"id": 1470,
										"name": "Address",
										"nodeType": "IdentifierPath",
										"referencedDeclaration": 591,
										"src": "1782:7:12"
									},
									"nodeType": "UsingForDirective",
									"src": "1776:26:12",
									"typeName": {
										"id": 1471,
										"name": "address",
										"nodeType": "ElementaryTypeName",
										"src": "1794:7:12",
										"stateMutability": "nonpayable",
										"typeDescriptions": {
											"typeIdentifier": "t_address",
											"typeString": "address"
										}
									}
								},
								{
									"id": 1475,
									"libraryName": {
										"id": 1473,
										"name": "Strings",
										"nodeType": "IdentifierPath",
										"referencedDeclaration": 816,
										"src": "1813:7:12"
									},
									"nodeType": "UsingForDirective",
									"src": "1807:26:12",
									"typeName": {
										"id": 1474,
										"name": "uint256",
										"nodeType": "ElementaryTypeName",
										"src": "1825:7:12",
										"typeDescriptions": {
											"typeIdentifier": "t_uint256",
											"typeString": "uint256"
										}
									}
								},
								{
									"canonicalName": "ERC721A.TokenOwnership",
									"id": 1482,
									"members": [
										{
											"constant": false,
											"id": 1477,
											"mutability": "mutable",
											"name": "addr",
											"nameLocation": "1974:4:12",
											"nodeType": "VariableDeclaration",
											"scope": 1482,
											"src": "1966:12:12",
											"stateVariable": false,
											"storageLocation": "default",
											"typeDescriptions": {
												"typeIdentifier": "t_address",
												"typeString": "address"
											},
											"typeName": {
												"id": 1476,
												"name": "address",
												"nodeType": "ElementaryTypeName",
												"src": "1966:7:12",
												"stateMutability": "nonpayable",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												}
											},
											"visibility": "internal"
										},
										{
											"constant": false,
											"id": 1479,
											"mutability": "mutable",
											"name": "startTimestamp",
											"nameLocation": "2087:14:12",
											"nodeType": "VariableDeclaration",
											"scope": 1482,
											"src": "2080:21:12",
											"stateVariable": false,
											"storageLocation": "default",
											"typeDescriptions": {
												"typeIdentifier": "t_uint64",
												"typeString": "uint64"
											},
											"typeName": {
												"id": 1478,
												"name": "uint64",
												"nodeType": "ElementaryTypeName",
												"src": "2080:6:12",
												"typeDescriptions": {
													"typeIdentifier": "t_uint64",
													"typeString": "uint64"
												}
											},
											"visibility": "internal"
										},
										{
											"constant": false,
											"id": 1481,
											"mutability": "mutable",
											"name": "burned",
											"nameLocation": "2162:6:12",
											"nodeType": "VariableDeclaration",
											"scope": 1482,
											"src": "2157:11:12",
											"stateVariable": false,
											"storageLocation": "default",
											"typeDescriptions": {
												"typeIdentifier": "t_bool",
												"typeString": "bool"
											},
											"typeName": {
												"id": 1480,
												"name": "bool",
												"nodeType": "ElementaryTypeName",
												"src": "2157:4:12",
												"typeDescriptions": {
													"typeIdentifier": "t_bool",
													"typeString": "bool"
												}
											},
											"visibility": "internal"
										}
									],
									"name": "TokenOwnership",
									"nameLocation": "1904:14:12",
									"nodeType": "StructDefinition",
									"scope": 2729,
									"src": "1897:278:12",
									"visibility": "public"
								},
								{
									"canonicalName": "ERC721A.AddressData",
									"id": 1491,
									"members": [
										{
											"constant": false,
											"id": 1484,
											"mutability": "mutable",
											"name": "balance",
											"nameLocation": "2330:7:12",
											"nodeType": "VariableDeclaration",
											"scope": 1491,
											"src": "2323:14:12",
											"stateVariable": false,
											"storageLocation": "default",
											"typeDescriptions": {
												"typeIdentifier": "t_uint64",
												"typeString": "uint64"
											},
											"typeName": {
												"id": 1483,
												"name": "uint64",
												"nodeType": "ElementaryTypeName",
												"src": "2323:6:12",
												"typeDescriptions": {
													"typeIdentifier": "t_uint64",
													"typeString": "uint64"
												}
											},
											"visibility": "internal"
										},
										{
											"constant": false,
											"id": 1486,
											"mutability": "mutable",
											"name": "numberMinted",
											"nameLocation": "2429:12:12",
											"nodeType": "VariableDeclaration",
											"scope": 1491,
											"src": "2422:19:12",
											"stateVariable": false,
											"storageLocation": "default",
											"typeDescriptions": {
												"typeIdentifier": "t_uint64",
												"typeString": "uint64"
											},
											"typeName": {
												"id": 1485,
												"name": "uint64",
												"nodeType": "ElementaryTypeName",
												"src": "2422:6:12",
												"typeDescriptions": {
													"typeIdentifier": "t_uint64",
													"typeString": "uint64"
												}
											},
											"visibility": "internal"
										},
										{
											"constant": false,
											"id": 1488,
											"mutability": "mutable",
											"name": "numberBurned",
											"nameLocation": "2533:12:12",
											"nodeType": "VariableDeclaration",
											"scope": 1491,
											"src": "2526:19:12",
											"stateVariable": false,
											"storageLocation": "default",
											"typeDescriptions": {
												"typeIdentifier": "t_uint64",
												"typeString": "uint64"
											},
											"typeName": {
												"id": 1487,
												"name": "uint64",
												"nodeType": "ElementaryTypeName",
												"src": "2526:6:12",
												"typeDescriptions": {
													"typeIdentifier": "t_uint64",
													"typeString": "uint64"
												}
											},
											"visibility": "internal"
										},
										{
											"constant": false,
											"id": 1490,
											"mutability": "mutable",
											"name": "aux",
											"nameLocation": "2760:3:12",
											"nodeType": "VariableDeclaration",
											"scope": 1491,
											"src": "2753:10:12",
											"stateVariable": false,
											"storageLocation": "default",
											"typeDescriptions": {
												"typeIdentifier": "t_uint64",
												"typeString": "uint64"
											},
											"typeName": {
												"id": 1489,
												"name": "uint64",
												"nodeType": "ElementaryTypeName",
												"src": "2753:6:12",
												"typeDescriptions": {
													"typeIdentifier": "t_uint64",
													"typeString": "uint64"
												}
											},
											"visibility": "internal"
										}
									],
									"name": "AddressData",
									"nameLocation": "2246:11:12",
									"nodeType": "StructDefinition",
									"scope": 2729,
									"src": "2239:531:12",
									"visibility": "public"
								},
								{
									"constant": false,
									"id": 1493,
									"mutability": "mutable",
									"name": "_currentIndex",
									"nameLocation": "2844:13:12",
									"nodeType": "VariableDeclaration",
									"scope": 2729,
									"src": "2827:30:12",
									"stateVariable": true,
									"storageLocation": "default",
									"typeDescriptions": {
										"typeIdentifier": "t_uint256",
										"typeString": "uint256"
									},
									"typeName": {
										"id": 1492,
										"name": "uint256",
										"nodeType": "ElementaryTypeName",
										"src": "2827:7:12",
										"typeDescriptions": {
											"typeIdentifier": "t_uint256",
											"typeString": "uint256"
										}
									},
									"visibility": "internal"
								},
								{
									"constant": false,
									"id": 1495,
									"mutability": "mutable",
									"name": "_burnCounter",
									"nameLocation": "2917:12:12",
									"nodeType": "VariableDeclaration",
									"scope": 2729,
									"src": "2900:29:12",
									"stateVariable": true,
									"storageLocation": "default",
									"typeDescriptions": {
										"typeIdentifier": "t_uint256",
										"typeString": "uint256"
									},
									"typeName": {
										"id": 1494,
										"name": "uint256",
										"nodeType": "ElementaryTypeName",
										"src": "2900:7:12",
										"typeDescriptions": {
											"typeIdentifier": "t_uint256",
											"typeString": "uint256"
										}
									},
									"visibility": "internal"
								},
								{
									"constant": false,
									"id": 1497,
									"mutability": "mutable",
									"name": "_name",
									"nameLocation": "2969:5:12",
									"nodeType": "VariableDeclaration",
									"scope": 2729,
									"src": "2954:20:12",
									"stateVariable": true,
									"storageLocation": "default",
									"typeDescriptions": {
										"typeIdentifier": "t_string_storage",
										"typeString": "string"
									},
									"typeName": {
										"id": 1496,
										"name": "string",
										"nodeType": "ElementaryTypeName",
										"src": "2954:6:12",
										"typeDescriptions": {
											"typeIdentifier": "t_string_storage_ptr",
											"typeString": "string"
										}
									},
									"visibility": "private"
								},
								{
									"constant": false,
									"id": 1499,
									"mutability": "mutable",
									"name": "_symbol",
									"nameLocation": "3016:7:12",
									"nodeType": "VariableDeclaration",
									"scope": 2729,
									"src": "3001:22:12",
									"stateVariable": true,
									"storageLocation": "default",
									"typeDescriptions": {
										"typeIdentifier": "t_string_storage",
										"typeString": "string"
									},
									"typeName": {
										"id": 1498,
										"name": "string",
										"nodeType": "ElementaryTypeName",
										"src": "3001:6:12",
										"typeDescriptions": {
											"typeIdentifier": "t_string_storage_ptr",
											"typeString": "string"
										}
									},
									"visibility": "private"
								},
								{
									"constant": false,
									"id": 1504,
									"mutability": "mutable",
									"name": "_ownerships",
									"nameLocation": "3245:11:12",
									"nodeType": "VariableDeclaration",
									"scope": 2729,
									"src": "3201:55:12",
									"stateVariable": true,
									"storageLocation": "default",
									"typeDescriptions": {
										"typeIdentifier": "t_mapping$_t_uint256_$_t_struct$_TokenOwnership_$1482_storage_$",
										"typeString": "mapping(uint256 => struct ERC721A.TokenOwnership)"
									},
									"typeName": {
										"id": 1503,
										"keyType": {
											"id": 1500,
											"name": "uint256",
											"nodeType": "ElementaryTypeName",
											"src": "3209:7:12",
											"typeDescriptions": {
												"typeIdentifier": "t_uint256",
												"typeString": "uint256"
											}
										},
										"nodeType": "Mapping",
										"src": "3201:34:12",
										"typeDescriptions": {
											"typeIdentifier": "t_mapping$_t_uint256_$_t_struct$_TokenOwnership_$1482_storage_$",
											"typeString": "mapping(uint256 => struct ERC721A.TokenOwnership)"
										},
										"valueType": {
											"id": 1502,
											"nodeType": "UserDefinedTypeName",
											"pathNode": {
												"id": 1501,
												"name": "TokenOwnership",
												"nodeType": "IdentifierPath",
												"referencedDeclaration": 1482,
												"src": "3220:14:12"
											},
											"referencedDeclaration": 1482,
											"src": "3220:14:12",
											"typeDescriptions": {
												"typeIdentifier": "t_struct$_TokenOwnership_$1482_storage_ptr",
												"typeString": "struct ERC721A.TokenOwnership"
											}
										}
									},
									"visibility": "internal"
								},
								{
									"constant": false,
									"id": 1509,
									"mutability": "mutable",
									"name": "_addressData",
									"nameLocation": "3348:12:12",
									"nodeType": "VariableDeclaration",
									"scope": 2729,
									"src": "3308:52:12",
									"stateVariable": true,
									"storageLocation": "default",
									"typeDescriptions": {
										"typeIdentifier": "t_mapping$_t_address_$_t_struct$_AddressData_$1491_storage_$",
										"typeString": "mapping(address => struct ERC721A.AddressData)"
									},
									"typeName": {
										"id": 1508,
										"keyType": {
											"id": 1505,
											"name": "address",
											"nodeType": "ElementaryTypeName",
											"src": "3316:7:12",
											"typeDescriptions": {
												"typeIdentifier": "t_address",
												"typeString": "address"
											}
										},
										"nodeType": "Mapping",
										"src": "3308:31:12",
										"typeDescriptions": {
											"typeIdentifier": "t_mapping$_t_address_$_t_struct$_AddressData_$1491_storage_$",
											"typeString": "mapping(address => struct ERC721A.AddressData)"
										},
										"valueType": {
											"id": 1507,
											"nodeType": "UserDefinedTypeName",
											"pathNode": {
												"id": 1506,
												"name": "AddressData",
												"nodeType": "IdentifierPath",
												"referencedDeclaration": 1491,
												"src": "3327:11:12"
											},
											"referencedDeclaration": 1491,
											"src": "3327:11:12",
											"typeDescriptions": {
												"typeIdentifier": "t_struct$_AddressData_$1491_storage_ptr",
												"typeString": "struct ERC721A.AddressData"
											}
										}
									},
									"visibility": "private"
								},
								{
									"constant": false,
									"id": 1513,
									"mutability": "mutable",
									"name": "_tokenApprovals",
									"nameLocation": "3452:15:12",
									"nodeType": "VariableDeclaration",
									"scope": 2729,
									"src": "3416:51:12",
									"stateVariable": true,
									"storageLocation": "default",
									"typeDescriptions": {
										"typeIdentifier": "t_mapping$_t_uint256_$_t_address_$",
										"typeString": "mapping(uint256 => address)"
									},
									"typeName": {
										"id": 1512,
										"keyType": {
											"id": 1510,
											"name": "uint256",
											"nodeType": "ElementaryTypeName",
											"src": "3424:7:12",
											"typeDescriptions": {
												"typeIdentifier": "t_uint256",
												"typeString": "uint256"
											}
										},
										"nodeType": "Mapping",
										"src": "3416:27:12",
										"typeDescriptions": {
											"typeIdentifier": "t_mapping$_t_uint256_$_t_address_$",
											"typeString": "mapping(uint256 => address)"
										},
										"valueType": {
											"id": 1511,
											"name": "address",
											"nodeType": "ElementaryTypeName",
											"src": "3435:7:12",
											"stateMutability": "nonpayable",
											"typeDescriptions": {
												"typeIdentifier": "t_address",
												"typeString": "address"
											}
										}
									},
									"visibility": "private"
								},
								{
									"constant": false,
									"id": 1519,
									"mutability": "mutable",
									"name": "_operatorApprovals",
									"nameLocation": "3575:18:12",
									"nodeType": "VariableDeclaration",
									"scope": 2729,
									"src": "3522:71:12",
									"stateVariable": true,
									"storageLocation": "default",
									"typeDescriptions": {
										"typeIdentifier": "t_mapping$_t_address_$_t_mapping$_t_address_$_t_bool_$_$",
										"typeString": "mapping(address => mapping(address => bool))"
									},
									"typeName": {
										"id": 1518,
										"keyType": {
											"id": 1514,
											"name": "address",
											"nodeType": "ElementaryTypeName",
											"src": "3530:7:12",
											"typeDescriptions": {
												"typeIdentifier": "t_address",
												"typeString": "address"
											}
										},
										"nodeType": "Mapping",
										"src": "3522:44:12",
										"typeDescriptions": {
											"typeIdentifier": "t_mapping$_t_address_$_t_mapping$_t_address_$_t_bool_$_$",
											"typeString": "mapping(address => mapping(address => bool))"
										},
										"valueType": {
											"id": 1517,
											"keyType": {
												"id": 1515,
												"name": "address",
												"nodeType": "ElementaryTypeName",
												"src": "3549:7:12",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												}
											},
											"nodeType": "Mapping",
											"src": "3541:24:12",
											"typeDescriptions": {
												"typeIdentifier": "t_mapping$_t_address_$_t_bool_$",
												"typeString": "mapping(address => bool)"
											},
											"valueType": {
												"id": 1516,
												"name": "bool",
												"nodeType": "ElementaryTypeName",
												"src": "3560:4:12",
												"typeDescriptions": {
													"typeIdentifier": "t_bool",
													"typeString": "bool"
												}
											}
										}
									},
									"visibility": "private"
								},
								{
									"body": {
										"id": 1539,
										"nodeType": "Block",
										"src": "3656:98:12",
										"statements": [
											{
												"expression": {
													"id": 1528,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"lValueRequested": false,
													"leftHandSide": {
														"id": 1526,
														"name": "_name",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 1497,
														"src": "3666:5:12",
														"typeDescriptions": {
															"typeIdentifier": "t_string_storage",
															"typeString": "string storage ref"
														}
													},
													"nodeType": "Assignment",
													"operator": "=",
													"rightHandSide": {
														"id": 1527,
														"name": "name_",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 1521,
														"src": "3674:5:12",
														"typeDescriptions": {
															"typeIdentifier": "t_string_memory_ptr",
															"typeString": "string memory"
														}
													},
													"src": "3666:13:12",
													"typeDescriptions": {
														"typeIdentifier": "t_string_storage",
														"typeString": "string storage ref"
													}
												},
												"id": 1529,
												"nodeType": "ExpressionStatement",
												"src": "3666:13:12"
											},
											{
												"expression": {
													"id": 1532,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"lValueRequested": false,
													"leftHandSide": {
														"id": 1530,
														"name": "_symbol",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 1499,
														"src": "3689:7:12",
														"typeDescriptions": {
															"typeIdentifier": "t_string_storage",
															"typeString": "string storage ref"
														}
													},
													"nodeType": "Assignment",
													"operator": "=",
													"rightHandSide": {
														"id": 1531,
														"name": "symbol_",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 1523,
														"src": "3699:7:12",
														"typeDescriptions": {
															"typeIdentifier": "t_string_memory_ptr",
															"typeString": "string memory"
														}
													},
													"src": "3689:17:12",
													"typeDescriptions": {
														"typeIdentifier": "t_string_storage",
														"typeString": "string storage ref"
													}
												},
												"id": 1533,
												"nodeType": "ExpressionStatement",
												"src": "3689:17:12"
											},
											{
												"expression": {
													"id": 1537,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"lValueRequested": false,
													"leftHandSide": {
														"id": 1534,
														"name": "_currentIndex",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 1493,
														"src": "3716:13:12",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														}
													},
													"nodeType": "Assignment",
													"operator": "=",
													"rightHandSide": {
														"arguments": [],
														"expression": {
															"argumentTypes": [],
															"id": 1535,
															"name": "_startTokenId",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 1549,
															"src": "3732:13:12",
															"typeDescriptions": {
																"typeIdentifier": "t_function_internal_view$__$returns$_t_uint256_$",
																"typeString": "function () view returns (uint256)"
															}
														},
														"id": 1536,
														"isConstant": false,
														"isLValue": false,
														"isPure": false,
														"kind": "functionCall",
														"lValueRequested": false,
														"names": [],
														"nodeType": "FunctionCall",
														"src": "3732:15:12",
														"tryCall": false,
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														}
													},
													"src": "3716:31:12",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"id": 1538,
												"nodeType": "ExpressionStatement",
												"src": "3716:31:12"
											}
										]
									},
									"id": 1540,
									"implemented": true,
									"kind": "constructor",
									"modifiers": [],
									"name": "",
									"nameLocation": "-1:-1:-1",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 1524,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 1521,
												"mutability": "mutable",
												"name": "name_",
												"nameLocation": "3626:5:12",
												"nodeType": "VariableDeclaration",
												"scope": 1540,
												"src": "3612:19:12",
												"stateVariable": false,
												"storageLocation": "memory",
												"typeDescriptions": {
													"typeIdentifier": "t_string_memory_ptr",
													"typeString": "string"
												},
												"typeName": {
													"id": 1520,
													"name": "string",
													"nodeType": "ElementaryTypeName",
													"src": "3612:6:12",
													"typeDescriptions": {
														"typeIdentifier": "t_string_storage_ptr",
														"typeString": "string"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 1523,
												"mutability": "mutable",
												"name": "symbol_",
												"nameLocation": "3647:7:12",
												"nodeType": "VariableDeclaration",
												"scope": 1540,
												"src": "3633:21:12",
												"stateVariable": false,
												"storageLocation": "memory",
												"typeDescriptions": {
													"typeIdentifier": "t_string_memory_ptr",
													"typeString": "string"
												},
												"typeName": {
													"id": 1522,
													"name": "string",
													"nodeType": "ElementaryTypeName",
													"src": "3633:6:12",
													"typeDescriptions": {
														"typeIdentifier": "t_string_storage_ptr",
														"typeString": "string"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "3611:44:12"
									},
									"returnParameters": {
										"id": 1525,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "3656:0:12"
									},
									"scope": 2729,
									"src": "3600:154:12",
									"stateMutability": "nonpayable",
									"virtual": false,
									"visibility": "public"
								},
								{
									"body": {
										"id": 1548,
										"nodeType": "Block",
										"src": "3911:25:12",
										"statements": [
											{
												"expression": {
													"hexValue": "30",
													"id": 1546,
													"isConstant": false,
													"isLValue": false,
													"isPure": true,
													"kind": "number",
													"lValueRequested": false,
													"nodeType": "Literal",
													"src": "3928:1:12",
													"typeDescriptions": {
														"typeIdentifier": "t_rational_0_by_1",
														"typeString": "int_const 0"
													},
													"value": "0"
												},
												"functionReturnParameters": 1545,
												"id": 1547,
												"nodeType": "Return",
												"src": "3921:8:12"
											}
										]
									},
									"documentation": {
										"id": 1541,
										"nodeType": "StructuredDocumentation",
										"src": "3760:81:12",
										"text": " To change the starting tokenId, please override this function."
									},
									"id": 1549,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "_startTokenId",
									"nameLocation": "3855:13:12",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 1542,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "3868:2:12"
									},
									"returnParameters": {
										"id": 1545,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 1544,
												"mutability": "mutable",
												"name": "",
												"nameLocation": "-1:-1:-1",
												"nodeType": "VariableDeclaration",
												"scope": 1549,
												"src": "3902:7:12",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 1543,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "3902:7:12",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "3901:9:12"
									},
									"scope": 2729,
									"src": "3846:90:12",
									"stateMutability": "view",
									"virtual": true,
									"visibility": "internal"
								},
								{
									"body": {
										"id": 1563,
										"nodeType": "Block",
										"src": "4167:244:12",
										"statements": [
											{
												"id": 1562,
												"nodeType": "UncheckedBlock",
												"src": "4317:88:12",
												"statements": [
													{
														"expression": {
															"commonType": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															},
															"id": 1560,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"lValueRequested": false,
															"leftExpression": {
																"commonType": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																},
																"id": 1557,
																"isConstant": false,
																"isLValue": false,
																"isPure": false,
																"lValueRequested": false,
																"leftExpression": {
																	"id": 1555,
																	"name": "_currentIndex",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 1493,
																	"src": "4348:13:12",
																	"typeDescriptions": {
																		"typeIdentifier": "t_uint256",
																		"typeString": "uint256"
																	}
																},
																"nodeType": "BinaryOperation",
																"operator": "-",
																"rightExpression": {
																	"id": 1556,
																	"name": "_burnCounter",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 1495,
																	"src": "4364:12:12",
																	"typeDescriptions": {
																		"typeIdentifier": "t_uint256",
																		"typeString": "uint256"
																	}
																},
																"src": "4348:28:12",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															},
															"nodeType": "BinaryOperation",
															"operator": "-",
															"rightExpression": {
																"arguments": [],
																"expression": {
																	"argumentTypes": [],
																	"id": 1558,
																	"name": "_startTokenId",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 1549,
																	"src": "4379:13:12",
																	"typeDescriptions": {
																		"typeIdentifier": "t_function_internal_view$__$returns$_t_uint256_$",
																		"typeString": "function () view returns (uint256)"
																	}
																},
																"id": 1559,
																"isConstant": false,
																"isLValue": false,
																"isPure": false,
																"kind": "functionCall",
																"lValueRequested": false,
																"names": [],
																"nodeType": "FunctionCall",
																"src": "4379:15:12",
																"tryCall": false,
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															},
															"src": "4348:46:12",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														},
														"functionReturnParameters": 1554,
														"id": 1561,
														"nodeType": "Return",
														"src": "4341:53:12"
													}
												]
											}
										]
									},
									"documentation": {
										"id": 1550,
										"nodeType": "StructuredDocumentation",
										"src": "3942:167:12",
										"text": " @dev See {IERC721Enumerable-totalSupply}.\n @dev Burned tokens are calculated here, use _totalMinted() if you want to count just minted tokens."
									},
									"functionSelector": "18160ddd",
									"id": 1564,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "totalSupply",
									"nameLocation": "4123:11:12",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 1551,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "4134:2:12"
									},
									"returnParameters": {
										"id": 1554,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 1553,
												"mutability": "mutable",
												"name": "",
												"nameLocation": "-1:-1:-1",
												"nodeType": "VariableDeclaration",
												"scope": 1564,
												"src": "4158:7:12",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 1552,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "4158:7:12",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "4157:9:12"
									},
									"scope": 2729,
									"src": "4114:297:12",
									"stateMutability": "view",
									"virtual": false,
									"visibility": "public"
								},
								{
									"body": {
										"id": 1576,
										"nodeType": "Block",
										"src": "4555:221:12",
										"statements": [
											{
												"id": 1575,
												"nodeType": "UncheckedBlock",
												"src": "4697:73:12",
												"statements": [
													{
														"expression": {
															"commonType": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															},
															"id": 1573,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"lValueRequested": false,
															"leftExpression": {
																"id": 1570,
																"name": "_currentIndex",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 1493,
																"src": "4728:13:12",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															},
															"nodeType": "BinaryOperation",
															"operator": "-",
															"rightExpression": {
																"arguments": [],
																"expression": {
																	"argumentTypes": [],
																	"id": 1571,
																	"name": "_startTokenId",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 1549,
																	"src": "4744:13:12",
																	"typeDescriptions": {
																		"typeIdentifier": "t_function_internal_view$__$returns$_t_uint256_$",
																		"typeString": "function () view returns (uint256)"
																	}
																},
																"id": 1572,
																"isConstant": false,
																"isLValue": false,
																"isPure": false,
																"kind": "functionCall",
																"lValueRequested": false,
																"names": [],
																"nodeType": "FunctionCall",
																"src": "4744:15:12",
																"tryCall": false,
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															},
															"src": "4728:31:12",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														},
														"functionReturnParameters": 1569,
														"id": 1574,
														"nodeType": "Return",
														"src": "4721:38:12"
													}
												]
											}
										]
									},
									"documentation": {
										"id": 1565,
										"nodeType": "StructuredDocumentation",
										"src": "4417:77:12",
										"text": " Returns the total amount of tokens minted in the contract."
									},
									"id": 1577,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "_totalMinted",
									"nameLocation": "4508:12:12",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 1566,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "4520:2:12"
									},
									"returnParameters": {
										"id": 1569,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 1568,
												"mutability": "mutable",
												"name": "",
												"nameLocation": "-1:-1:-1",
												"nodeType": "VariableDeclaration",
												"scope": 1577,
												"src": "4546:7:12",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 1567,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "4546:7:12",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "4545:9:12"
									},
									"scope": 2729,
									"src": "4499:277:12",
									"stateMutability": "view",
									"virtual": false,
									"visibility": "internal"
								},
								{
									"baseFunctions": [
										932,
										944
									],
									"body": {
										"id": 1607,
										"nodeType": "Block",
										"src": "4951:192:12",
										"statements": [
											{
												"expression": {
													"commonType": {
														"typeIdentifier": "t_bool",
														"typeString": "bool"
													},
													"id": 1605,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"lValueRequested": false,
													"leftExpression": {
														"commonType": {
															"typeIdentifier": "t_bool",
															"typeString": "bool"
														},
														"id": 1600,
														"isConstant": false,
														"isLValue": false,
														"isPure": false,
														"lValueRequested": false,
														"leftExpression": {
															"commonType": {
																"typeIdentifier": "t_bytes4",
																"typeString": "bytes4"
															},
															"id": 1593,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"lValueRequested": false,
															"leftExpression": {
																"id": 1588,
																"name": "interfaceId",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 1580,
																"src": "4980:11:12",
																"typeDescriptions": {
																	"typeIdentifier": "t_bytes4",
																	"typeString": "bytes4"
																}
															},
															"nodeType": "BinaryOperation",
															"operator": "==",
															"rightExpression": {
																"expression": {
																	"arguments": [
																		{
																			"id": 1590,
																			"name": "IERC721",
																			"nodeType": "Identifier",
																			"overloadedDeclarations": [],
																			"referencedDeclaration": 220,
																			"src": "5000:7:12",
																			"typeDescriptions": {
																				"typeIdentifier": "t_type$_t_contract$_IERC721_$220_$",
																				"typeString": "type(contract IERC721)"
																			}
																		}
																	],
																	"expression": {
																		"argumentTypes": [
																			{
																				"typeIdentifier": "t_type$_t_contract$_IERC721_$220_$",
																				"typeString": "type(contract IERC721)"
																			}
																		],
																		"id": 1589,
																		"name": "type",
																		"nodeType": "Identifier",
																		"overloadedDeclarations": [],
																		"referencedDeclaration": 4294967269,
																		"src": "4995:4:12",
																		"typeDescriptions": {
																			"typeIdentifier": "t_function_metatype_pure$__$returns$__$",
																			"typeString": "function () pure"
																		}
																	},
																	"id": 1591,
																	"isConstant": false,
																	"isLValue": false,
																	"isPure": true,
																	"kind": "functionCall",
																	"lValueRequested": false,
																	"names": [],
																	"nodeType": "FunctionCall",
																	"src": "4995:13:12",
																	"tryCall": false,
																	"typeDescriptions": {
																		"typeIdentifier": "t_magic_meta_type_t_contract$_IERC721_$220",
																		"typeString": "type(contract IERC721)"
																	}
																},
																"id": 1592,
																"isConstant": false,
																"isLValue": false,
																"isPure": true,
																"lValueRequested": false,
																"memberName": "interfaceId",
																"nodeType": "MemberAccess",
																"src": "4995:25:12",
																"typeDescriptions": {
																	"typeIdentifier": "t_bytes4",
																	"typeString": "bytes4"
																}
															},
															"src": "4980:40:12",
															"typeDescriptions": {
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															}
														},
														"nodeType": "BinaryOperation",
														"operator": "||",
														"rightExpression": {
															"commonType": {
																"typeIdentifier": "t_bytes4",
																"typeString": "bytes4"
															},
															"id": 1599,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"lValueRequested": false,
															"leftExpression": {
																"id": 1594,
																"name": "interfaceId",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 1580,
																"src": "5036:11:12",
																"typeDescriptions": {
																	"typeIdentifier": "t_bytes4",
																	"typeString": "bytes4"
																}
															},
															"nodeType": "BinaryOperation",
															"operator": "==",
															"rightExpression": {
																"expression": {
																	"arguments": [
																		{
																			"id": 1596,
																			"name": "IERC721Metadata",
																			"nodeType": "Identifier",
																			"overloadedDeclarations": [],
																			"referencedDeclaration": 296,
																			"src": "5056:15:12",
																			"typeDescriptions": {
																				"typeIdentifier": "t_type$_t_contract$_IERC721Metadata_$296_$",
																				"typeString": "type(contract IERC721Metadata)"
																			}
																		}
																	],
																	"expression": {
																		"argumentTypes": [
																			{
																				"typeIdentifier": "t_type$_t_contract$_IERC721Metadata_$296_$",
																				"typeString": "type(contract IERC721Metadata)"
																			}
																		],
																		"id": 1595,
																		"name": "type",
																		"nodeType": "Identifier",
																		"overloadedDeclarations": [],
																		"referencedDeclaration": 4294967269,
																		"src": "5051:4:12",
																		"typeDescriptions": {
																			"typeIdentifier": "t_function_metatype_pure$__$returns$__$",
																			"typeString": "function () pure"
																		}
																	},
																	"id": 1597,
																	"isConstant": false,
																	"isLValue": false,
																	"isPure": true,
																	"kind": "functionCall",
																	"lValueRequested": false,
																	"names": [],
																	"nodeType": "FunctionCall",
																	"src": "5051:21:12",
																	"tryCall": false,
																	"typeDescriptions": {
																		"typeIdentifier": "t_magic_meta_type_t_contract$_IERC721Metadata_$296",
																		"typeString": "type(contract IERC721Metadata)"
																	}
																},
																"id": 1598,
																"isConstant": false,
																"isLValue": false,
																"isPure": true,
																"lValueRequested": false,
																"memberName": "interfaceId",
																"nodeType": "MemberAccess",
																"src": "5051:33:12",
																"typeDescriptions": {
																	"typeIdentifier": "t_bytes4",
																	"typeString": "bytes4"
																}
															},
															"src": "5036:48:12",
															"typeDescriptions": {
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															}
														},
														"src": "4980:104:12",
														"typeDescriptions": {
															"typeIdentifier": "t_bool",
															"typeString": "bool"
														}
													},
													"nodeType": "BinaryOperation",
													"operator": "||",
													"rightExpression": {
														"arguments": [
															{
																"id": 1603,
																"name": "interfaceId",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 1580,
																"src": "5124:11:12",
																"typeDescriptions": {
																	"typeIdentifier": "t_bytes4",
																	"typeString": "bytes4"
																}
															}
														],
														"expression": {
															"argumentTypes": [
																{
																	"typeIdentifier": "t_bytes4",
																	"typeString": "bytes4"
																}
															],
															"expression": {
																"id": 1601,
																"name": "super",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 4294967271,
																"src": "5100:5:12",
																"typeDescriptions": {
																	"typeIdentifier": "t_type$_t_super$_ERC721A_$2729_$",
																	"typeString": "type(contract super ERC721A)"
																}
															},
															"id": 1602,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"lValueRequested": false,
															"memberName": "supportsInterface",
															"nodeType": "MemberAccess",
															"referencedDeclaration": 932,
															"src": "5100:23:12",
															"typeDescriptions": {
																"typeIdentifier": "t_function_internal_view$_t_bytes4_$returns$_t_bool_$",
																"typeString": "function (bytes4) view returns (bool)"
															}
														},
														"id": 1604,
														"isConstant": false,
														"isLValue": false,
														"isPure": false,
														"kind": "functionCall",
														"lValueRequested": false,
														"names": [],
														"nodeType": "FunctionCall",
														"src": "5100:36:12",
														"tryCall": false,
														"typeDescriptions": {
															"typeIdentifier": "t_bool",
															"typeString": "bool"
														}
													},
													"src": "4980:156:12",
													"typeDescriptions": {
														"typeIdentifier": "t_bool",
														"typeString": "bool"
													}
												},
												"functionReturnParameters": 1587,
												"id": 1606,
												"nodeType": "Return",
												"src": "4961:175:12"
											}
										]
									},
									"documentation": {
										"id": 1578,
										"nodeType": "StructuredDocumentation",
										"src": "4782:56:12",
										"text": " @dev See {IERC165-supportsInterface}."
									},
									"functionSelector": "01ffc9a7",
									"id": 1608,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "supportsInterface",
									"nameLocation": "4852:17:12",
									"nodeType": "FunctionDefinition",
									"overrides": {
										"id": 1584,
										"nodeType": "OverrideSpecifier",
										"overrides": [
											{
												"id": 1582,
												"name": "ERC165",
												"nodeType": "IdentifierPath",
												"referencedDeclaration": 933,
												"src": "4919:6:12"
											},
											{
												"id": 1583,
												"name": "IERC165",
												"nodeType": "IdentifierPath",
												"referencedDeclaration": 945,
												"src": "4927:7:12"
											}
										],
										"src": "4910:25:12"
									},
									"parameters": {
										"id": 1581,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 1580,
												"mutability": "mutable",
												"name": "interfaceId",
												"nameLocation": "4877:11:12",
												"nodeType": "VariableDeclaration",
												"scope": 1608,
												"src": "4870:18:12",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_bytes4",
													"typeString": "bytes4"
												},
												"typeName": {
													"id": 1579,
													"name": "bytes4",
													"nodeType": "ElementaryTypeName",
													"src": "4870:6:12",
													"typeDescriptions": {
														"typeIdentifier": "t_bytes4",
														"typeString": "bytes4"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "4869:20:12"
									},
									"returnParameters": {
										"id": 1587,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 1586,
												"mutability": "mutable",
												"name": "",
												"nameLocation": "-1:-1:-1",
												"nodeType": "VariableDeclaration",
												"scope": 1608,
												"src": "4945:4:12",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_bool",
													"typeString": "bool"
												},
												"typeName": {
													"id": 1585,
													"name": "bool",
													"nodeType": "ElementaryTypeName",
													"src": "4945:4:12",
													"typeDescriptions": {
														"typeIdentifier": "t_bool",
														"typeString": "bool"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "4944:6:12"
									},
									"scope": 2729,
									"src": "4843:300:12",
									"stateMutability": "view",
									"virtual": true,
									"visibility": "public"
								},
								{
									"baseFunctions": [
										145
									],
									"body": {
										"id": 1635,
										"nodeType": "Block",
										"src": "5275:130:12",
										"statements": [
											{
												"condition": {
													"commonType": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													},
													"id": 1622,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"lValueRequested": false,
													"leftExpression": {
														"id": 1617,
														"name": "owner",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 1611,
														"src": "5289:5:12",
														"typeDescriptions": {
															"typeIdentifier": "t_address",
															"typeString": "address"
														}
													},
													"nodeType": "BinaryOperation",
													"operator": "==",
													"rightExpression": {
														"arguments": [
															{
																"hexValue": "30",
																"id": 1620,
																"isConstant": false,
																"isLValue": false,
																"isPure": true,
																"kind": "number",
																"lValueRequested": false,
																"nodeType": "Literal",
																"src": "5306:1:12",
																"typeDescriptions": {
																	"typeIdentifier": "t_rational_0_by_1",
																	"typeString": "int_const 0"
																},
																"value": "0"
															}
														],
														"expression": {
															"argumentTypes": [
																{
																	"typeIdentifier": "t_rational_0_by_1",
																	"typeString": "int_const 0"
																}
															],
															"id": 1619,
															"isConstant": false,
															"isLValue": false,
															"isPure": true,
															"lValueRequested": false,
															"nodeType": "ElementaryTypeNameExpression",
															"src": "5298:7:12",
															"typeDescriptions": {
																"typeIdentifier": "t_type$_t_address_$",
																"typeString": "type(address)"
															},
															"typeName": {
																"id": 1618,
																"name": "address",
																"nodeType": "ElementaryTypeName",
																"src": "5298:7:12",
																"typeDescriptions": {}
															}
														},
														"id": 1621,
														"isConstant": false,
														"isLValue": false,
														"isPure": true,
														"kind": "typeConversion",
														"lValueRequested": false,
														"names": [],
														"nodeType": "FunctionCall",
														"src": "5298:10:12",
														"tryCall": false,
														"typeDescriptions": {
															"typeIdentifier": "t_address",
															"typeString": "address"
														}
													},
													"src": "5289:19:12",
													"typeDescriptions": {
														"typeIdentifier": "t_bool",
														"typeString": "bool"
													}
												},
												"id": 1626,
												"nodeType": "IfStatement",
												"src": "5285:60:12",
												"trueBody": {
													"errorCall": {
														"arguments": [],
														"expression": {
															"argumentTypes": [],
															"id": 1623,
															"name": "BalanceQueryForZeroAddress",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 1434,
															"src": "5317:26:12",
															"typeDescriptions": {
																"typeIdentifier": "t_function_error_pure$__$returns$__$",
																"typeString": "function () pure"
															}
														},
														"id": 1624,
														"isConstant": false,
														"isLValue": false,
														"isPure": false,
														"kind": "functionCall",
														"lValueRequested": false,
														"names": [],
														"nodeType": "FunctionCall",
														"src": "5317:28:12",
														"tryCall": false,
														"typeDescriptions": {
															"typeIdentifier": "t_tuple$__$",
															"typeString": "tuple()"
														}
													},
													"id": 1625,
													"nodeType": "RevertStatement",
													"src": "5310:35:12"
												}
											},
											{
												"expression": {
													"arguments": [
														{
															"expression": {
																"baseExpression": {
																	"id": 1629,
																	"name": "_addressData",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 1509,
																	"src": "5370:12:12",
																	"typeDescriptions": {
																		"typeIdentifier": "t_mapping$_t_address_$_t_struct$_AddressData_$1491_storage_$",
																		"typeString": "mapping(address => struct ERC721A.AddressData storage ref)"
																	}
																},
																"id": 1631,
																"indexExpression": {
																	"id": 1630,
																	"name": "owner",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 1611,
																	"src": "5383:5:12",
																	"typeDescriptions": {
																		"typeIdentifier": "t_address",
																		"typeString": "address"
																	}
																},
																"isConstant": false,
																"isLValue": true,
																"isPure": false,
																"lValueRequested": false,
																"nodeType": "IndexAccess",
																"src": "5370:19:12",
																"typeDescriptions": {
																	"typeIdentifier": "t_struct$_AddressData_$1491_storage",
																	"typeString": "struct ERC721A.AddressData storage ref"
																}
															},
															"id": 1632,
															"isConstant": false,
															"isLValue": true,
															"isPure": false,
															"lValueRequested": false,
															"memberName": "balance",
															"nodeType": "MemberAccess",
															"referencedDeclaration": 1484,
															"src": "5370:27:12",
															"typeDescriptions": {
																"typeIdentifier": "t_uint64",
																"typeString": "uint64"
															}
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_uint64",
																"typeString": "uint64"
															}
														],
														"id": 1628,
														"isConstant": false,
														"isLValue": false,
														"isPure": true,
														"lValueRequested": false,
														"nodeType": "ElementaryTypeNameExpression",
														"src": "5362:7:12",
														"typeDescriptions": {
															"typeIdentifier": "t_type$_t_uint256_$",
															"typeString": "type(uint256)"
														},
														"typeName": {
															"id": 1627,
															"name": "uint256",
															"nodeType": "ElementaryTypeName",
															"src": "5362:7:12",
															"typeDescriptions": {}
														}
													},
													"id": 1633,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "typeConversion",
													"lValueRequested": false,
													"names": [],
													"nodeType": "FunctionCall",
													"src": "5362:36:12",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"functionReturnParameters": 1616,
												"id": 1634,
												"nodeType": "Return",
												"src": "5355:43:12"
											}
										]
									},
									"documentation": {
										"id": 1609,
										"nodeType": "StructuredDocumentation",
										"src": "5149:48:12",
										"text": " @dev See {IERC721-balanceOf}."
									},
									"functionSelector": "70a08231",
									"id": 1636,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "balanceOf",
									"nameLocation": "5211:9:12",
									"nodeType": "FunctionDefinition",
									"overrides": {
										"id": 1613,
										"nodeType": "OverrideSpecifier",
										"overrides": [],
										"src": "5248:8:12"
									},
									"parameters": {
										"id": 1612,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 1611,
												"mutability": "mutable",
												"name": "owner",
												"nameLocation": "5229:5:12",
												"nodeType": "VariableDeclaration",
												"scope": 1636,
												"src": "5221:13:12",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 1610,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "5221:7:12",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "5220:15:12"
									},
									"returnParameters": {
										"id": 1616,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 1615,
												"mutability": "mutable",
												"name": "",
												"nameLocation": "-1:-1:-1",
												"nodeType": "VariableDeclaration",
												"scope": 1636,
												"src": "5266:7:12",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 1614,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "5266:7:12",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "5265:9:12"
									},
									"scope": 2729,
									"src": "5202:203:12",
									"stateMutability": "view",
									"virtual": false,
									"visibility": "public"
								},
								{
									"body": {
										"id": 1662,
										"nodeType": "Block",
										"src": "5552:134:12",
										"statements": [
											{
												"condition": {
													"commonType": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													},
													"id": 1649,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"lValueRequested": false,
													"leftExpression": {
														"id": 1644,
														"name": "owner",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 1639,
														"src": "5566:5:12",
														"typeDescriptions": {
															"typeIdentifier": "t_address",
															"typeString": "address"
														}
													},
													"nodeType": "BinaryOperation",
													"operator": "==",
													"rightExpression": {
														"arguments": [
															{
																"hexValue": "30",
																"id": 1647,
																"isConstant": false,
																"isLValue": false,
																"isPure": true,
																"kind": "number",
																"lValueRequested": false,
																"nodeType": "Literal",
																"src": "5583:1:12",
																"typeDescriptions": {
																	"typeIdentifier": "t_rational_0_by_1",
																	"typeString": "int_const 0"
																},
																"value": "0"
															}
														],
														"expression": {
															"argumentTypes": [
																{
																	"typeIdentifier": "t_rational_0_by_1",
																	"typeString": "int_const 0"
																}
															],
															"id": 1646,
															"isConstant": false,
															"isLValue": false,
															"isPure": true,
															"lValueRequested": false,
															"nodeType": "ElementaryTypeNameExpression",
															"src": "5575:7:12",
															"typeDescriptions": {
																"typeIdentifier": "t_type$_t_address_$",
																"typeString": "type(address)"
															},
															"typeName": {
																"id": 1645,
																"name": "address",
																"nodeType": "ElementaryTypeName",
																"src": "5575:7:12",
																"typeDescriptions": {}
															}
														},
														"id": 1648,
														"isConstant": false,
														"isLValue": false,
														"isPure": true,
														"kind": "typeConversion",
														"lValueRequested": false,
														"names": [],
														"nodeType": "FunctionCall",
														"src": "5575:10:12",
														"tryCall": false,
														"typeDescriptions": {
															"typeIdentifier": "t_address",
															"typeString": "address"
														}
													},
													"src": "5566:19:12",
													"typeDescriptions": {
														"typeIdentifier": "t_bool",
														"typeString": "bool"
													}
												},
												"id": 1653,
												"nodeType": "IfStatement",
												"src": "5562:59:12",
												"trueBody": {
													"errorCall": {
														"arguments": [],
														"expression": {
															"argumentTypes": [],
															"id": 1650,
															"name": "MintedQueryForZeroAddress",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 1436,
															"src": "5594:25:12",
															"typeDescriptions": {
																"typeIdentifier": "t_function_error_pure$__$returns$__$",
																"typeString": "function () pure"
															}
														},
														"id": 1651,
														"isConstant": false,
														"isLValue": false,
														"isPure": false,
														"kind": "functionCall",
														"lValueRequested": false,
														"names": [],
														"nodeType": "FunctionCall",
														"src": "5594:27:12",
														"tryCall": false,
														"typeDescriptions": {
															"typeIdentifier": "t_tuple$__$",
															"typeString": "tuple()"
														}
													},
													"id": 1652,
													"nodeType": "RevertStatement",
													"src": "5587:34:12"
												}
											},
											{
												"expression": {
													"arguments": [
														{
															"expression": {
																"baseExpression": {
																	"id": 1656,
																	"name": "_addressData",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 1509,
																	"src": "5646:12:12",
																	"typeDescriptions": {
																		"typeIdentifier": "t_mapping$_t_address_$_t_struct$_AddressData_$1491_storage_$",
																		"typeString": "mapping(address => struct ERC721A.AddressData storage ref)"
																	}
																},
																"id": 1658,
																"indexExpression": {
																	"id": 1657,
																	"name": "owner",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 1639,
																	"src": "5659:5:12",
																	"typeDescriptions": {
																		"typeIdentifier": "t_address",
																		"typeString": "address"
																	}
																},
																"isConstant": false,
																"isLValue": true,
																"isPure": false,
																"lValueRequested": false,
																"nodeType": "IndexAccess",
																"src": "5646:19:12",
																"typeDescriptions": {
																	"typeIdentifier": "t_struct$_AddressData_$1491_storage",
																	"typeString": "struct ERC721A.AddressData storage ref"
																}
															},
															"id": 1659,
															"isConstant": false,
															"isLValue": true,
															"isPure": false,
															"lValueRequested": false,
															"memberName": "numberMinted",
															"nodeType": "MemberAccess",
															"referencedDeclaration": 1486,
															"src": "5646:32:12",
															"typeDescriptions": {
																"typeIdentifier": "t_uint64",
																"typeString": "uint64"
															}
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_uint64",
																"typeString": "uint64"
															}
														],
														"id": 1655,
														"isConstant": false,
														"isLValue": false,
														"isPure": true,
														"lValueRequested": false,
														"nodeType": "ElementaryTypeNameExpression",
														"src": "5638:7:12",
														"typeDescriptions": {
															"typeIdentifier": "t_type$_t_uint256_$",
															"typeString": "type(uint256)"
														},
														"typeName": {
															"id": 1654,
															"name": "uint256",
															"nodeType": "ElementaryTypeName",
															"src": "5638:7:12",
															"typeDescriptions": {}
														}
													},
													"id": 1660,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "typeConversion",
													"lValueRequested": false,
													"names": [],
													"nodeType": "FunctionCall",
													"src": "5638:41:12",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"functionReturnParameters": 1643,
												"id": 1661,
												"nodeType": "Return",
												"src": "5631:48:12"
											}
										]
									},
									"documentation": {
										"id": 1637,
										"nodeType": "StructuredDocumentation",
										"src": "5411:66:12",
										"text": " Returns the number of tokens minted by `owner`."
									},
									"id": 1663,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "_numberMinted",
									"nameLocation": "5491:13:12",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 1640,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 1639,
												"mutability": "mutable",
												"name": "owner",
												"nameLocation": "5513:5:12",
												"nodeType": "VariableDeclaration",
												"scope": 1663,
												"src": "5505:13:12",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 1638,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "5505:7:12",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "5504:15:12"
									},
									"returnParameters": {
										"id": 1643,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 1642,
												"mutability": "mutable",
												"name": "",
												"nameLocation": "-1:-1:-1",
												"nodeType": "VariableDeclaration",
												"scope": 1663,
												"src": "5543:7:12",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 1641,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "5543:7:12",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "5542:9:12"
									},
									"scope": 2729,
									"src": "5482:204:12",
									"stateMutability": "view",
									"virtual": false,
									"visibility": "internal"
								},
								{
									"body": {
										"id": 1689,
										"nodeType": "Block",
										"src": "5849:134:12",
										"statements": [
											{
												"condition": {
													"commonType": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													},
													"id": 1676,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"lValueRequested": false,
													"leftExpression": {
														"id": 1671,
														"name": "owner",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 1666,
														"src": "5863:5:12",
														"typeDescriptions": {
															"typeIdentifier": "t_address",
															"typeString": "address"
														}
													},
													"nodeType": "BinaryOperation",
													"operator": "==",
													"rightExpression": {
														"arguments": [
															{
																"hexValue": "30",
																"id": 1674,
																"isConstant": false,
																"isLValue": false,
																"isPure": true,
																"kind": "number",
																"lValueRequested": false,
																"nodeType": "Literal",
																"src": "5880:1:12",
																"typeDescriptions": {
																	"typeIdentifier": "t_rational_0_by_1",
																	"typeString": "int_const 0"
																},
																"value": "0"
															}
														],
														"expression": {
															"argumentTypes": [
																{
																	"typeIdentifier": "t_rational_0_by_1",
																	"typeString": "int_const 0"
																}
															],
															"id": 1673,
															"isConstant": false,
															"isLValue": false,
															"isPure": true,
															"lValueRequested": false,
															"nodeType": "ElementaryTypeNameExpression",
															"src": "5872:7:12",
															"typeDescriptions": {
																"typeIdentifier": "t_type$_t_address_$",
																"typeString": "type(address)"
															},
															"typeName": {
																"id": 1672,
																"name": "address",
																"nodeType": "ElementaryTypeName",
																"src": "5872:7:12",
																"typeDescriptions": {}
															}
														},
														"id": 1675,
														"isConstant": false,
														"isLValue": false,
														"isPure": true,
														"kind": "typeConversion",
														"lValueRequested": false,
														"names": [],
														"nodeType": "FunctionCall",
														"src": "5872:10:12",
														"tryCall": false,
														"typeDescriptions": {
															"typeIdentifier": "t_address",
															"typeString": "address"
														}
													},
													"src": "5863:19:12",
													"typeDescriptions": {
														"typeIdentifier": "t_bool",
														"typeString": "bool"
													}
												},
												"id": 1680,
												"nodeType": "IfStatement",
												"src": "5859:59:12",
												"trueBody": {
													"errorCall": {
														"arguments": [],
														"expression": {
															"argumentTypes": [],
															"id": 1677,
															"name": "BurnedQueryForZeroAddress",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 1438,
															"src": "5891:25:12",
															"typeDescriptions": {
																"typeIdentifier": "t_function_error_pure$__$returns$__$",
																"typeString": "function () pure"
															}
														},
														"id": 1678,
														"isConstant": false,
														"isLValue": false,
														"isPure": false,
														"kind": "functionCall",
														"lValueRequested": false,
														"names": [],
														"nodeType": "FunctionCall",
														"src": "5891:27:12",
														"tryCall": false,
														"typeDescriptions": {
															"typeIdentifier": "t_tuple$__$",
															"typeString": "tuple()"
														}
													},
													"id": 1679,
													"nodeType": "RevertStatement",
													"src": "5884:34:12"
												}
											},
											{
												"expression": {
													"arguments": [
														{
															"expression": {
																"baseExpression": {
																	"id": 1683,
																	"name": "_addressData",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 1509,
																	"src": "5943:12:12",
																	"typeDescriptions": {
																		"typeIdentifier": "t_mapping$_t_address_$_t_struct$_AddressData_$1491_storage_$",
																		"typeString": "mapping(address => struct ERC721A.AddressData storage ref)"
																	}
																},
																"id": 1685,
																"indexExpression": {
																	"id": 1684,
																	"name": "owner",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 1666,
																	"src": "5956:5:12",
																	"typeDescriptions": {
																		"typeIdentifier": "t_address",
																		"typeString": "address"
																	}
																},
																"isConstant": false,
																"isLValue": true,
																"isPure": false,
																"lValueRequested": false,
																"nodeType": "IndexAccess",
																"src": "5943:19:12",
																"typeDescriptions": {
																	"typeIdentifier": "t_struct$_AddressData_$1491_storage",
																	"typeString": "struct ERC721A.AddressData storage ref"
																}
															},
															"id": 1686,
															"isConstant": false,
															"isLValue": true,
															"isPure": false,
															"lValueRequested": false,
															"memberName": "numberBurned",
															"nodeType": "MemberAccess",
															"referencedDeclaration": 1488,
															"src": "5943:32:12",
															"typeDescriptions": {
																"typeIdentifier": "t_uint64",
																"typeString": "uint64"
															}
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_uint64",
																"typeString": "uint64"
															}
														],
														"id": 1682,
														"isConstant": false,
														"isLValue": false,
														"isPure": true,
														"lValueRequested": false,
														"nodeType": "ElementaryTypeNameExpression",
														"src": "5935:7:12",
														"typeDescriptions": {
															"typeIdentifier": "t_type$_t_uint256_$",
															"typeString": "type(uint256)"
														},
														"typeName": {
															"id": 1681,
															"name": "uint256",
															"nodeType": "ElementaryTypeName",
															"src": "5935:7:12",
															"typeDescriptions": {}
														}
													},
													"id": 1687,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "typeConversion",
													"lValueRequested": false,
													"names": [],
													"nodeType": "FunctionCall",
													"src": "5935:41:12",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"functionReturnParameters": 1670,
												"id": 1688,
												"nodeType": "Return",
												"src": "5928:48:12"
											}
										]
									},
									"documentation": {
										"id": 1664,
										"nodeType": "StructuredDocumentation",
										"src": "5692:82:12",
										"text": " Returns the number of tokens burned by or on behalf of `owner`."
									},
									"id": 1690,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "_numberBurned",
									"nameLocation": "5788:13:12",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 1667,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 1666,
												"mutability": "mutable",
												"name": "owner",
												"nameLocation": "5810:5:12",
												"nodeType": "VariableDeclaration",
												"scope": 1690,
												"src": "5802:13:12",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 1665,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "5802:7:12",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "5801:15:12"
									},
									"returnParameters": {
										"id": 1670,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 1669,
												"mutability": "mutable",
												"name": "",
												"nameLocation": "-1:-1:-1",
												"nodeType": "VariableDeclaration",
												"scope": 1690,
												"src": "5840:7:12",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 1668,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "5840:7:12",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "5839:9:12"
									},
									"scope": 2729,
									"src": "5779:204:12",
									"stateMutability": "view",
									"virtual": false,
									"visibility": "internal"
								},
								{
									"body": {
										"id": 1713,
										"nodeType": "Block",
										"src": "6159:113:12",
										"statements": [
											{
												"condition": {
													"commonType": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													},
													"id": 1703,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"lValueRequested": false,
													"leftExpression": {
														"id": 1698,
														"name": "owner",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 1693,
														"src": "6173:5:12",
														"typeDescriptions": {
															"typeIdentifier": "t_address",
															"typeString": "address"
														}
													},
													"nodeType": "BinaryOperation",
													"operator": "==",
													"rightExpression": {
														"arguments": [
															{
																"hexValue": "30",
																"id": 1701,
																"isConstant": false,
																"isLValue": false,
																"isPure": true,
																"kind": "number",
																"lValueRequested": false,
																"nodeType": "Literal",
																"src": "6190:1:12",
																"typeDescriptions": {
																	"typeIdentifier": "t_rational_0_by_1",
																	"typeString": "int_const 0"
																},
																"value": "0"
															}
														],
														"expression": {
															"argumentTypes": [
																{
																	"typeIdentifier": "t_rational_0_by_1",
																	"typeString": "int_const 0"
																}
															],
															"id": 1700,
															"isConstant": false,
															"isLValue": false,
															"isPure": true,
															"lValueRequested": false,
															"nodeType": "ElementaryTypeNameExpression",
															"src": "6182:7:12",
															"typeDescriptions": {
																"typeIdentifier": "t_type$_t_address_$",
																"typeString": "type(address)"
															},
															"typeName": {
																"id": 1699,
																"name": "address",
																"nodeType": "ElementaryTypeName",
																"src": "6182:7:12",
																"typeDescriptions": {}
															}
														},
														"id": 1702,
														"isConstant": false,
														"isLValue": false,
														"isPure": true,
														"kind": "typeConversion",
														"lValueRequested": false,
														"names": [],
														"nodeType": "FunctionCall",
														"src": "6182:10:12",
														"tryCall": false,
														"typeDescriptions": {
															"typeIdentifier": "t_address",
															"typeString": "address"
														}
													},
													"src": "6173:19:12",
													"typeDescriptions": {
														"typeIdentifier": "t_bool",
														"typeString": "bool"
													}
												},
												"id": 1707,
												"nodeType": "IfStatement",
												"src": "6169:56:12",
												"trueBody": {
													"errorCall": {
														"arguments": [],
														"expression": {
															"argumentTypes": [],
															"id": 1704,
															"name": "AuxQueryForZeroAddress",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 1440,
															"src": "6201:22:12",
															"typeDescriptions": {
																"typeIdentifier": "t_function_error_pure$__$returns$__$",
																"typeString": "function () pure"
															}
														},
														"id": 1705,
														"isConstant": false,
														"isLValue": false,
														"isPure": false,
														"kind": "functionCall",
														"lValueRequested": false,
														"names": [],
														"nodeType": "FunctionCall",
														"src": "6201:24:12",
														"tryCall": false,
														"typeDescriptions": {
															"typeIdentifier": "t_tuple$__$",
															"typeString": "tuple()"
														}
													},
													"id": 1706,
													"nodeType": "RevertStatement",
													"src": "6194:31:12"
												}
											},
											{
												"expression": {
													"expression": {
														"baseExpression": {
															"id": 1708,
															"name": "_addressData",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 1509,
															"src": "6242:12:12",
															"typeDescriptions": {
																"typeIdentifier": "t_mapping$_t_address_$_t_struct$_AddressData_$1491_storage_$",
																"typeString": "mapping(address => struct ERC721A.AddressData storage ref)"
															}
														},
														"id": 1710,
														"indexExpression": {
															"id": 1709,
															"name": "owner",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 1693,
															"src": "6255:5:12",
															"typeDescriptions": {
																"typeIdentifier": "t_address",
																"typeString": "address"
															}
														},
														"isConstant": false,
														"isLValue": true,
														"isPure": false,
														"lValueRequested": false,
														"nodeType": "IndexAccess",
														"src": "6242:19:12",
														"typeDescriptions": {
															"typeIdentifier": "t_struct$_AddressData_$1491_storage",
															"typeString": "struct ERC721A.AddressData storage ref"
														}
													},
													"id": 1711,
													"isConstant": false,
													"isLValue": true,
													"isPure": false,
													"lValueRequested": false,
													"memberName": "aux",
													"nodeType": "MemberAccess",
													"referencedDeclaration": 1490,
													"src": "6242:23:12",
													"typeDescriptions": {
														"typeIdentifier": "t_uint64",
														"typeString": "uint64"
													}
												},
												"functionReturnParameters": 1697,
												"id": 1712,
												"nodeType": "Return",
												"src": "6235:30:12"
											}
										]
									},
									"documentation": {
										"id": 1691,
										"nodeType": "StructuredDocumentation",
										"src": "5989:102:12",
										"text": " Returns the auxillary data for `owner`. (e.g. number of whitelist mint slots used)."
									},
									"id": 1714,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "_getAux",
									"nameLocation": "6105:7:12",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 1694,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 1693,
												"mutability": "mutable",
												"name": "owner",
												"nameLocation": "6121:5:12",
												"nodeType": "VariableDeclaration",
												"scope": 1714,
												"src": "6113:13:12",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 1692,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "6113:7:12",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "6112:15:12"
									},
									"returnParameters": {
										"id": 1697,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 1696,
												"mutability": "mutable",
												"name": "",
												"nameLocation": "-1:-1:-1",
												"nodeType": "VariableDeclaration",
												"scope": 1714,
												"src": "6151:6:12",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint64",
													"typeString": "uint64"
												},
												"typeName": {
													"id": 1695,
													"name": "uint64",
													"nodeType": "ElementaryTypeName",
													"src": "6151:6:12",
													"typeDescriptions": {
														"typeIdentifier": "t_uint64",
														"typeString": "uint64"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "6150:8:12"
									},
									"scope": 2729,
									"src": "6096:176:12",
									"stateMutability": "view",
									"virtual": false,
									"visibility": "internal"
								},
								{
									"body": {
										"id": 1739,
										"nodeType": "Block",
										"src": "6507:112:12",
										"statements": [
											{
												"condition": {
													"commonType": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													},
													"id": 1727,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"lValueRequested": false,
													"leftExpression": {
														"id": 1722,
														"name": "owner",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 1717,
														"src": "6521:5:12",
														"typeDescriptions": {
															"typeIdentifier": "t_address",
															"typeString": "address"
														}
													},
													"nodeType": "BinaryOperation",
													"operator": "==",
													"rightExpression": {
														"arguments": [
															{
																"hexValue": "30",
																"id": 1725,
																"isConstant": false,
																"isLValue": false,
																"isPure": true,
																"kind": "number",
																"lValueRequested": false,
																"nodeType": "Literal",
																"src": "6538:1:12",
																"typeDescriptions": {
																	"typeIdentifier": "t_rational_0_by_1",
																	"typeString": "int_const 0"
																},
																"value": "0"
															}
														],
														"expression": {
															"argumentTypes": [
																{
																	"typeIdentifier": "t_rational_0_by_1",
																	"typeString": "int_const 0"
																}
															],
															"id": 1724,
															"isConstant": false,
															"isLValue": false,
															"isPure": true,
															"lValueRequested": false,
															"nodeType": "ElementaryTypeNameExpression",
															"src": "6530:7:12",
															"typeDescriptions": {
																"typeIdentifier": "t_type$_t_address_$",
																"typeString": "type(address)"
															},
															"typeName": {
																"id": 1723,
																"name": "address",
																"nodeType": "ElementaryTypeName",
																"src": "6530:7:12",
																"typeDescriptions": {}
															}
														},
														"id": 1726,
														"isConstant": false,
														"isLValue": false,
														"isPure": true,
														"kind": "typeConversion",
														"lValueRequested": false,
														"names": [],
														"nodeType": "FunctionCall",
														"src": "6530:10:12",
														"tryCall": false,
														"typeDescriptions": {
															"typeIdentifier": "t_address",
															"typeString": "address"
														}
													},
													"src": "6521:19:12",
													"typeDescriptions": {
														"typeIdentifier": "t_bool",
														"typeString": "bool"
													}
												},
												"id": 1731,
												"nodeType": "IfStatement",
												"src": "6517:56:12",
												"trueBody": {
													"errorCall": {
														"arguments": [],
														"expression": {
															"argumentTypes": [],
															"id": 1728,
															"name": "AuxQueryForZeroAddress",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 1440,
															"src": "6549:22:12",
															"typeDescriptions": {
																"typeIdentifier": "t_function_error_pure$__$returns$__$",
																"typeString": "function () pure"
															}
														},
														"id": 1729,
														"isConstant": false,
														"isLValue": false,
														"isPure": false,
														"kind": "functionCall",
														"lValueRequested": false,
														"names": [],
														"nodeType": "FunctionCall",
														"src": "6549:24:12",
														"tryCall": false,
														"typeDescriptions": {
															"typeIdentifier": "t_tuple$__$",
															"typeString": "tuple()"
														}
													},
													"id": 1730,
													"nodeType": "RevertStatement",
													"src": "6542:31:12"
												}
											},
											{
												"expression": {
													"id": 1737,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"lValueRequested": false,
													"leftHandSide": {
														"expression": {
															"baseExpression": {
																"id": 1732,
																"name": "_addressData",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 1509,
																"src": "6583:12:12",
																"typeDescriptions": {
																	"typeIdentifier": "t_mapping$_t_address_$_t_struct$_AddressData_$1491_storage_$",
																	"typeString": "mapping(address => struct ERC721A.AddressData storage ref)"
																}
															},
															"id": 1734,
															"indexExpression": {
																"id": 1733,
																"name": "owner",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 1717,
																"src": "6596:5:12",
																"typeDescriptions": {
																	"typeIdentifier": "t_address",
																	"typeString": "address"
																}
															},
															"isConstant": false,
															"isLValue": true,
															"isPure": false,
															"lValueRequested": false,
															"nodeType": "IndexAccess",
															"src": "6583:19:12",
															"typeDescriptions": {
																"typeIdentifier": "t_struct$_AddressData_$1491_storage",
																"typeString": "struct ERC721A.AddressData storage ref"
															}
														},
														"id": 1735,
														"isConstant": false,
														"isLValue": true,
														"isPure": false,
														"lValueRequested": true,
														"memberName": "aux",
														"nodeType": "MemberAccess",
														"referencedDeclaration": 1490,
														"src": "6583:23:12",
														"typeDescriptions": {
															"typeIdentifier": "t_uint64",
															"typeString": "uint64"
														}
													},
													"nodeType": "Assignment",
													"operator": "=",
													"rightHandSide": {
														"id": 1736,
														"name": "aux",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 1719,
														"src": "6609:3:12",
														"typeDescriptions": {
															"typeIdentifier": "t_uint64",
															"typeString": "uint64"
														}
													},
													"src": "6583:29:12",
													"typeDescriptions": {
														"typeIdentifier": "t_uint64",
														"typeString": "uint64"
													}
												},
												"id": 1738,
												"nodeType": "ExpressionStatement",
												"src": "6583:29:12"
											}
										]
									},
									"documentation": {
										"id": 1715,
										"nodeType": "StructuredDocumentation",
										"src": "6278:171:12",
										"text": " Sets the auxillary data for `owner`. (e.g. number of whitelist mint slots used).\n If there are multiple variables, please pack them into a uint64."
									},
									"id": 1740,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "_setAux",
									"nameLocation": "6463:7:12",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 1720,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 1717,
												"mutability": "mutable",
												"name": "owner",
												"nameLocation": "6479:5:12",
												"nodeType": "VariableDeclaration",
												"scope": 1740,
												"src": "6471:13:12",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 1716,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "6471:7:12",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 1719,
												"mutability": "mutable",
												"name": "aux",
												"nameLocation": "6493:3:12",
												"nodeType": "VariableDeclaration",
												"scope": 1740,
												"src": "6486:10:12",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint64",
													"typeString": "uint64"
												},
												"typeName": {
													"id": 1718,
													"name": "uint64",
													"nodeType": "ElementaryTypeName",
													"src": "6486:6:12",
													"typeDescriptions": {
														"typeIdentifier": "t_uint64",
														"typeString": "uint64"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "6470:27:12"
									},
									"returnParameters": {
										"id": 1721,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "6507:0:12"
									},
									"scope": 2729,
									"src": "6454:165:12",
									"stateMutability": "nonpayable",
									"virtual": false,
									"visibility": "internal"
								},
								{
									"body": {
										"id": 1813,
										"nodeType": "Block",
										"src": "6899:999:12",
										"statements": [
											{
												"assignments": [
													1750
												],
												"declarations": [
													{
														"constant": false,
														"id": 1750,
														"mutability": "mutable",
														"name": "curr",
														"nameLocation": "6917:4:12",
														"nodeType": "VariableDeclaration",
														"scope": 1813,
														"src": "6909:12:12",
														"stateVariable": false,
														"storageLocation": "default",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														},
														"typeName": {
															"id": 1749,
															"name": "uint256",
															"nodeType": "ElementaryTypeName",
															"src": "6909:7:12",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														},
														"visibility": "internal"
													}
												],
												"id": 1752,
												"initialValue": {
													"id": 1751,
													"name": "tokenId",
													"nodeType": "Identifier",
													"overloadedDeclarations": [],
													"referencedDeclaration": 1743,
													"src": "6924:7:12",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"nodeType": "VariableDeclarationStatement",
												"src": "6909:22:12"
											},
											{
												"id": 1809,
												"nodeType": "UncheckedBlock",
												"src": "6942:902:12",
												"statements": [
													{
														"condition": {
															"commonType": {
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															},
															"id": 1760,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"lValueRequested": false,
															"leftExpression": {
																"commonType": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																},
																"id": 1756,
																"isConstant": false,
																"isLValue": false,
																"isPure": false,
																"lValueRequested": false,
																"leftExpression": {
																	"arguments": [],
																	"expression": {
																		"argumentTypes": [],
																		"id": 1753,
																		"name": "_startTokenId",
																		"nodeType": "Identifier",
																		"overloadedDeclarations": [],
																		"referencedDeclaration": 1549,
																		"src": "6970:13:12",
																		"typeDescriptions": {
																			"typeIdentifier": "t_function_internal_view$__$returns$_t_uint256_$",
																			"typeString": "function () view returns (uint256)"
																		}
																	},
																	"id": 1754,
																	"isConstant": false,
																	"isLValue": false,
																	"isPure": false,
																	"kind": "functionCall",
																	"lValueRequested": false,
																	"names": [],
																	"nodeType": "FunctionCall",
																	"src": "6970:15:12",
																	"tryCall": false,
																	"typeDescriptions": {
																		"typeIdentifier": "t_uint256",
																		"typeString": "uint256"
																	}
																},
																"nodeType": "BinaryOperation",
																"operator": "<=",
																"rightExpression": {
																	"id": 1755,
																	"name": "curr",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 1750,
																	"src": "6989:4:12",
																	"typeDescriptions": {
																		"typeIdentifier": "t_uint256",
																		"typeString": "uint256"
																	}
																},
																"src": "6970:23:12",
																"typeDescriptions": {
																	"typeIdentifier": "t_bool",
																	"typeString": "bool"
																}
															},
															"nodeType": "BinaryOperation",
															"operator": "&&",
															"rightExpression": {
																"commonType": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																},
																"id": 1759,
																"isConstant": false,
																"isLValue": false,
																"isPure": false,
																"lValueRequested": false,
																"leftExpression": {
																	"id": 1757,
																	"name": "curr",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 1750,
																	"src": "6997:4:12",
																	"typeDescriptions": {
																		"typeIdentifier": "t_uint256",
																		"typeString": "uint256"
																	}
																},
																"nodeType": "BinaryOperation",
																"operator": "<",
																"rightExpression": {
																	"id": 1758,
																	"name": "_currentIndex",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 1493,
																	"src": "7004:13:12",
																	"typeDescriptions": {
																		"typeIdentifier": "t_uint256",
																		"typeString": "uint256"
																	}
																},
																"src": "6997:20:12",
																"typeDescriptions": {
																	"typeIdentifier": "t_bool",
																	"typeString": "bool"
																}
															},
															"src": "6970:47:12",
															"typeDescriptions": {
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															}
														},
														"id": 1808,
														"nodeType": "IfStatement",
														"src": "6966:868:12",
														"trueBody": {
															"id": 1807,
															"nodeType": "Block",
															"src": "7019:815:12",
															"statements": [
																{
																	"assignments": [
																		1763
																	],
																	"declarations": [
																		{
																			"constant": false,
																			"id": 1763,
																			"mutability": "mutable",
																			"name": "ownership",
																			"nameLocation": "7059:9:12",
																			"nodeType": "VariableDeclaration",
																			"scope": 1807,
																			"src": "7037:31:12",
																			"stateVariable": false,
																			"storageLocation": "memory",
																			"typeDescriptions": {
																				"typeIdentifier": "t_struct$_TokenOwnership_$1482_memory_ptr",
																				"typeString": "struct ERC721A.TokenOwnership"
																			},
																			"typeName": {
																				"id": 1762,
																				"nodeType": "UserDefinedTypeName",
																				"pathNode": {
																					"id": 1761,
																					"name": "TokenOwnership",
																					"nodeType": "IdentifierPath",
																					"referencedDeclaration": 1482,
																					"src": "7037:14:12"
																				},
																				"referencedDeclaration": 1482,
																				"src": "7037:14:12",
																				"typeDescriptions": {
																					"typeIdentifier": "t_struct$_TokenOwnership_$1482_storage_ptr",
																					"typeString": "struct ERC721A.TokenOwnership"
																				}
																			},
																			"visibility": "internal"
																		}
																	],
																	"id": 1767,
																	"initialValue": {
																		"baseExpression": {
																			"id": 1764,
																			"name": "_ownerships",
																			"nodeType": "Identifier",
																			"overloadedDeclarations": [],
																			"referencedDeclaration": 1504,
																			"src": "7071:11:12",
																			"typeDescriptions": {
																				"typeIdentifier": "t_mapping$_t_uint256_$_t_struct$_TokenOwnership_$1482_storage_$",
																				"typeString": "mapping(uint256 => struct ERC721A.TokenOwnership storage ref)"
																			}
																		},
																		"id": 1766,
																		"indexExpression": {
																			"id": 1765,
																			"name": "curr",
																			"nodeType": "Identifier",
																			"overloadedDeclarations": [],
																			"referencedDeclaration": 1750,
																			"src": "7083:4:12",
																			"typeDescriptions": {
																				"typeIdentifier": "t_uint256",
																				"typeString": "uint256"
																			}
																		},
																		"isConstant": false,
																		"isLValue": true,
																		"isPure": false,
																		"lValueRequested": false,
																		"nodeType": "IndexAccess",
																		"src": "7071:17:12",
																		"typeDescriptions": {
																			"typeIdentifier": "t_struct$_TokenOwnership_$1482_storage",
																			"typeString": "struct ERC721A.TokenOwnership storage ref"
																		}
																	},
																	"nodeType": "VariableDeclarationStatement",
																	"src": "7037:51:12"
																},
																{
																	"condition": {
																		"id": 1770,
																		"isConstant": false,
																		"isLValue": false,
																		"isPure": false,
																		"lValueRequested": false,
																		"nodeType": "UnaryOperation",
																		"operator": "!",
																		"prefix": true,
																		"src": "7110:17:12",
																		"subExpression": {
																			"expression": {
																				"id": 1768,
																				"name": "ownership",
																				"nodeType": "Identifier",
																				"overloadedDeclarations": [],
																				"referencedDeclaration": 1763,
																				"src": "7111:9:12",
																				"typeDescriptions": {
																					"typeIdentifier": "t_struct$_TokenOwnership_$1482_memory_ptr",
																					"typeString": "struct ERC721A.TokenOwnership memory"
																				}
																			},
																			"id": 1769,
																			"isConstant": false,
																			"isLValue": true,
																			"isPure": false,
																			"lValueRequested": false,
																			"memberName": "burned",
																			"nodeType": "MemberAccess",
																			"referencedDeclaration": 1481,
																			"src": "7111:16:12",
																			"typeDescriptions": {
																				"typeIdentifier": "t_bool",
																				"typeString": "bool"
																			}
																		},
																		"typeDescriptions": {
																			"typeIdentifier": "t_bool",
																			"typeString": "bool"
																		}
																	},
																	"id": 1806,
																	"nodeType": "IfStatement",
																	"src": "7106:714:12",
																	"trueBody": {
																		"id": 1805,
																		"nodeType": "Block",
																		"src": "7129:691:12",
																		"statements": [
																			{
																				"condition": {
																					"commonType": {
																						"typeIdentifier": "t_address",
																						"typeString": "address"
																					},
																					"id": 1777,
																					"isConstant": false,
																					"isLValue": false,
																					"isPure": false,
																					"lValueRequested": false,
																					"leftExpression": {
																						"expression": {
																							"id": 1771,
																							"name": "ownership",
																							"nodeType": "Identifier",
																							"overloadedDeclarations": [],
																							"referencedDeclaration": 1763,
																							"src": "7155:9:12",
																							"typeDescriptions": {
																								"typeIdentifier": "t_struct$_TokenOwnership_$1482_memory_ptr",
																								"typeString": "struct ERC721A.TokenOwnership memory"
																							}
																						},
																						"id": 1772,
																						"isConstant": false,
																						"isLValue": true,
																						"isPure": false,
																						"lValueRequested": false,
																						"memberName": "addr",
																						"nodeType": "MemberAccess",
																						"referencedDeclaration": 1477,
																						"src": "7155:14:12",
																						"typeDescriptions": {
																							"typeIdentifier": "t_address",
																							"typeString": "address"
																						}
																					},
																					"nodeType": "BinaryOperation",
																					"operator": "!=",
																					"rightExpression": {
																						"arguments": [
																							{
																								"hexValue": "30",
																								"id": 1775,
																								"isConstant": false,
																								"isLValue": false,
																								"isPure": true,
																								"kind": "number",
																								"lValueRequested": false,
																								"nodeType": "Literal",
																								"src": "7181:1:12",
																								"typeDescriptions": {
																									"typeIdentifier": "t_rational_0_by_1",
																									"typeString": "int_const 0"
																								},
																								"value": "0"
																							}
																						],
																						"expression": {
																							"argumentTypes": [
																								{
																									"typeIdentifier": "t_rational_0_by_1",
																									"typeString": "int_const 0"
																								}
																							],
																							"id": 1774,
																							"isConstant": false,
																							"isLValue": false,
																							"isPure": true,
																							"lValueRequested": false,
																							"nodeType": "ElementaryTypeNameExpression",
																							"src": "7173:7:12",
																							"typeDescriptions": {
																								"typeIdentifier": "t_type$_t_address_$",
																								"typeString": "type(address)"
																							},
																							"typeName": {
																								"id": 1773,
																								"name": "address",
																								"nodeType": "ElementaryTypeName",
																								"src": "7173:7:12",
																								"typeDescriptions": {}
																							}
																						},
																						"id": 1776,
																						"isConstant": false,
																						"isLValue": false,
																						"isPure": true,
																						"kind": "typeConversion",
																						"lValueRequested": false,
																						"names": [],
																						"nodeType": "FunctionCall",
																						"src": "7173:10:12",
																						"tryCall": false,
																						"typeDescriptions": {
																							"typeIdentifier": "t_address",
																							"typeString": "address"
																						}
																					},
																					"src": "7155:28:12",
																					"typeDescriptions": {
																						"typeIdentifier": "t_bool",
																						"typeString": "bool"
																					}
																				},
																				"id": 1781,
																				"nodeType": "IfStatement",
																				"src": "7151:99:12",
																				"trueBody": {
																					"id": 1780,
																					"nodeType": "Block",
																					"src": "7185:65:12",
																					"statements": [
																						{
																							"expression": {
																								"id": 1778,
																								"name": "ownership",
																								"nodeType": "Identifier",
																								"overloadedDeclarations": [],
																								"referencedDeclaration": 1763,
																								"src": "7218:9:12",
																								"typeDescriptions": {
																									"typeIdentifier": "t_struct$_TokenOwnership_$1482_memory_ptr",
																									"typeString": "struct ERC721A.TokenOwnership memory"
																								}
																							},
																							"functionReturnParameters": 1748,
																							"id": 1779,
																							"nodeType": "Return",
																							"src": "7211:16:12"
																						}
																					]
																				}
																			},
																			{
																				"body": {
																					"id": 1803,
																					"nodeType": "Block",
																					"src": "7560:242:12",
																					"statements": [
																						{
																							"expression": {
																								"id": 1784,
																								"isConstant": false,
																								"isLValue": false,
																								"isPure": false,
																								"lValueRequested": false,
																								"nodeType": "UnaryOperation",
																								"operator": "--",
																								"prefix": false,
																								"src": "7586:6:12",
																								"subExpression": {
																									"id": 1783,
																									"name": "curr",
																									"nodeType": "Identifier",
																									"overloadedDeclarations": [],
																									"referencedDeclaration": 1750,
																									"src": "7586:4:12",
																									"typeDescriptions": {
																										"typeIdentifier": "t_uint256",
																										"typeString": "uint256"
																									}
																								},
																								"typeDescriptions": {
																									"typeIdentifier": "t_uint256",
																									"typeString": "uint256"
																								}
																							},
																							"id": 1785,
																							"nodeType": "ExpressionStatement",
																							"src": "7586:6:12"
																						},
																						{
																							"expression": {
																								"id": 1790,
																								"isConstant": false,
																								"isLValue": false,
																								"isPure": false,
																								"lValueRequested": false,
																								"leftHandSide": {
																									"id": 1786,
																									"name": "ownership",
																									"nodeType": "Identifier",
																									"overloadedDeclarations": [],
																									"referencedDeclaration": 1763,
																									"src": "7618:9:12",
																									"typeDescriptions": {
																										"typeIdentifier": "t_struct$_TokenOwnership_$1482_memory_ptr",
																										"typeString": "struct ERC721A.TokenOwnership memory"
																									}
																								},
																								"nodeType": "Assignment",
																								"operator": "=",
																								"rightHandSide": {
																									"baseExpression": {
																										"id": 1787,
																										"name": "_ownerships",
																										"nodeType": "Identifier",
																										"overloadedDeclarations": [],
																										"referencedDeclaration": 1504,
																										"src": "7630:11:12",
																										"typeDescriptions": {
																											"typeIdentifier": "t_mapping$_t_uint256_$_t_struct$_TokenOwnership_$1482_storage_$",
																											"typeString": "mapping(uint256 => struct ERC721A.TokenOwnership storage ref)"
																										}
																									},
																									"id": 1789,
																									"indexExpression": {
																										"id": 1788,
																										"name": "curr",
																										"nodeType": "Identifier",
																										"overloadedDeclarations": [],
																										"referencedDeclaration": 1750,
																										"src": "7642:4:12",
																										"typeDescriptions": {
																											"typeIdentifier": "t_uint256",
																											"typeString": "uint256"
																										}
																									},
																									"isConstant": false,
																									"isLValue": true,
																									"isPure": false,
																									"lValueRequested": false,
																									"nodeType": "IndexAccess",
																									"src": "7630:17:12",
																									"typeDescriptions": {
																										"typeIdentifier": "t_struct$_TokenOwnership_$1482_storage",
																										"typeString": "struct ERC721A.TokenOwnership storage ref"
																									}
																								},
																								"src": "7618:29:12",
																								"typeDescriptions": {
																									"typeIdentifier": "t_struct$_TokenOwnership_$1482_memory_ptr",
																									"typeString": "struct ERC721A.TokenOwnership memory"
																								}
																							},
																							"id": 1791,
																							"nodeType": "ExpressionStatement",
																							"src": "7618:29:12"
																						},
																						{
																							"condition": {
																								"commonType": {
																									"typeIdentifier": "t_address",
																									"typeString": "address"
																								},
																								"id": 1798,
																								"isConstant": false,
																								"isLValue": false,
																								"isPure": false,
																								"lValueRequested": false,
																								"leftExpression": {
																									"expression": {
																										"id": 1792,
																										"name": "ownership",
																										"nodeType": "Identifier",
																										"overloadedDeclarations": [],
																										"referencedDeclaration": 1763,
																										"src": "7677:9:12",
																										"typeDescriptions": {
																											"typeIdentifier": "t_struct$_TokenOwnership_$1482_memory_ptr",
																											"typeString": "struct ERC721A.TokenOwnership memory"
																										}
																									},
																									"id": 1793,
																									"isConstant": false,
																									"isLValue": true,
																									"isPure": false,
																									"lValueRequested": false,
																									"memberName": "addr",
																									"nodeType": "MemberAccess",
																									"referencedDeclaration": 1477,
																									"src": "7677:14:12",
																									"typeDescriptions": {
																										"typeIdentifier": "t_address",
																										"typeString": "address"
																									}
																								},
																								"nodeType": "BinaryOperation",
																								"operator": "!=",
																								"rightExpression": {
																									"arguments": [
																										{
																											"hexValue": "30",
																											"id": 1796,
																											"isConstant": false,
																											"isLValue": false,
																											"isPure": true,
																											"kind": "number",
																											"lValueRequested": false,
																											"nodeType": "Literal",
																											"src": "7703:1:12",
																											"typeDescriptions": {
																												"typeIdentifier": "t_rational_0_by_1",
																												"typeString": "int_const 0"
																											},
																											"value": "0"
																										}
																									],
																									"expression": {
																										"argumentTypes": [
																											{
																												"typeIdentifier": "t_rational_0_by_1",
																												"typeString": "int_const 0"
																											}
																										],
																										"id": 1795,
																										"isConstant": false,
																										"isLValue": false,
																										"isPure": true,
																										"lValueRequested": false,
																										"nodeType": "ElementaryTypeNameExpression",
																										"src": "7695:7:12",
																										"typeDescriptions": {
																											"typeIdentifier": "t_type$_t_address_$",
																											"typeString": "type(address)"
																										},
																										"typeName": {
																											"id": 1794,
																											"name": "address",
																											"nodeType": "ElementaryTypeName",
																											"src": "7695:7:12",
																											"typeDescriptions": {}
																										}
																									},
																									"id": 1797,
																									"isConstant": false,
																									"isLValue": false,
																									"isPure": true,
																									"kind": "typeConversion",
																									"lValueRequested": false,
																									"names": [],
																									"nodeType": "FunctionCall",
																									"src": "7695:10:12",
																									"tryCall": false,
																									"typeDescriptions": {
																										"typeIdentifier": "t_address",
																										"typeString": "address"
																									}
																								},
																								"src": "7677:28:12",
																								"typeDescriptions": {
																									"typeIdentifier": "t_bool",
																									"typeString": "bool"
																								}
																							},
																							"id": 1802,
																							"nodeType": "IfStatement",
																							"src": "7673:107:12",
																							"trueBody": {
																								"id": 1801,
																								"nodeType": "Block",
																								"src": "7707:73:12",
																								"statements": [
																									{
																										"expression": {
																											"id": 1799,
																											"name": "ownership",
																											"nodeType": "Identifier",
																											"overloadedDeclarations": [],
																											"referencedDeclaration": 1763,
																											"src": "7744:9:12",
																											"typeDescriptions": {
																												"typeIdentifier": "t_struct$_TokenOwnership_$1482_memory_ptr",
																												"typeString": "struct ERC721A.TokenOwnership memory"
																											}
																										},
																										"functionReturnParameters": 1748,
																										"id": 1800,
																										"nodeType": "Return",
																										"src": "7737:16:12"
																									}
																								]
																							}
																						}
																					]
																				},
																				"condition": {
																					"hexValue": "74727565",
																					"id": 1782,
																					"isConstant": false,
																					"isLValue": false,
																					"isPure": true,
																					"kind": "bool",
																					"lValueRequested": false,
																					"nodeType": "Literal",
																					"src": "7554:4:12",
																					"typeDescriptions": {
																						"typeIdentifier": "t_bool",
																						"typeString": "bool"
																					},
																					"value": "true"
																				},
																				"id": 1804,
																				"nodeType": "WhileStatement",
																				"src": "7547:255:12"
																			}
																		]
																	}
																}
															]
														}
													}
												]
											},
											{
												"errorCall": {
													"arguments": [],
													"expression": {
														"argumentTypes": [],
														"id": 1810,
														"name": "OwnerQueryForNonexistentToken",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 1448,
														"src": "7860:29:12",
														"typeDescriptions": {
															"typeIdentifier": "t_function_error_pure$__$returns$__$",
															"typeString": "function () pure"
														}
													},
													"id": 1811,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"names": [],
													"nodeType": "FunctionCall",
													"src": "7860:31:12",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_tuple$__$",
														"typeString": "tuple()"
													}
												},
												"id": 1812,
												"nodeType": "RevertStatement",
												"src": "7853:38:12"
											}
										]
									},
									"documentation": {
										"id": 1741,
										"nodeType": "StructuredDocumentation",
										"src": "6625:185:12",
										"text": " Gas spent here starts off proportional to the maximum mint batch size.\n It gradually moves to O(1) as tokens get transferred around in the collection over time."
									},
									"id": 1814,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "ownershipOf",
									"nameLocation": "6824:11:12",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 1744,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 1743,
												"mutability": "mutable",
												"name": "tokenId",
												"nameLocation": "6844:7:12",
												"nodeType": "VariableDeclaration",
												"scope": 1814,
												"src": "6836:15:12",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 1742,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "6836:7:12",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "6835:17:12"
									},
									"returnParameters": {
										"id": 1748,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 1747,
												"mutability": "mutable",
												"name": "",
												"nameLocation": "-1:-1:-1",
												"nodeType": "VariableDeclaration",
												"scope": 1814,
												"src": "6876:21:12",
												"stateVariable": false,
												"storageLocation": "memory",
												"typeDescriptions": {
													"typeIdentifier": "t_struct$_TokenOwnership_$1482_memory_ptr",
													"typeString": "struct ERC721A.TokenOwnership"
												},
												"typeName": {
													"id": 1746,
													"nodeType": "UserDefinedTypeName",
													"pathNode": {
														"id": 1745,
														"name": "TokenOwnership",
														"nodeType": "IdentifierPath",
														"referencedDeclaration": 1482,
														"src": "6876:14:12"
													},
													"referencedDeclaration": 1482,
													"src": "6876:14:12",
													"typeDescriptions": {
														"typeIdentifier": "t_struct$_TokenOwnership_$1482_storage_ptr",
														"typeString": "struct ERC721A.TokenOwnership"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "6875:23:12"
									},
									"scope": 2729,
									"src": "6815:1083:12",
									"stateMutability": "view",
									"virtual": false,
									"visibility": "internal"
								},
								{
									"baseFunctions": [
										153
									],
									"body": {
										"id": 1828,
										"nodeType": "Block",
										"src": "8028:49:12",
										"statements": [
											{
												"expression": {
													"expression": {
														"arguments": [
															{
																"id": 1824,
																"name": "tokenId",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 1817,
																"src": "8057:7:12",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															}
														],
														"expression": {
															"argumentTypes": [
																{
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															],
															"id": 1823,
															"name": "ownershipOf",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 1814,
															"src": "8045:11:12",
															"typeDescriptions": {
																"typeIdentifier": "t_function_internal_view$_t_uint256_$returns$_t_struct$_TokenOwnership_$1482_memory_ptr_$",
																"typeString": "function (uint256) view returns (struct ERC721A.TokenOwnership memory)"
															}
														},
														"id": 1825,
														"isConstant": false,
														"isLValue": false,
														"isPure": false,
														"kind": "functionCall",
														"lValueRequested": false,
														"names": [],
														"nodeType": "FunctionCall",
														"src": "8045:20:12",
														"tryCall": false,
														"typeDescriptions": {
															"typeIdentifier": "t_struct$_TokenOwnership_$1482_memory_ptr",
															"typeString": "struct ERC721A.TokenOwnership memory"
														}
													},
													"id": 1826,
													"isConstant": false,
													"isLValue": true,
													"isPure": false,
													"lValueRequested": false,
													"memberName": "addr",
													"nodeType": "MemberAccess",
													"referencedDeclaration": 1477,
													"src": "8045:25:12",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"functionReturnParameters": 1822,
												"id": 1827,
												"nodeType": "Return",
												"src": "8038:32:12"
											}
										]
									},
									"documentation": {
										"id": 1815,
										"nodeType": "StructuredDocumentation",
										"src": "7904:46:12",
										"text": " @dev See {IERC721-ownerOf}."
									},
									"functionSelector": "6352211e",
									"id": 1829,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "ownerOf",
									"nameLocation": "7964:7:12",
									"nodeType": "FunctionDefinition",
									"overrides": {
										"id": 1819,
										"nodeType": "OverrideSpecifier",
										"overrides": [],
										"src": "8001:8:12"
									},
									"parameters": {
										"id": 1818,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 1817,
												"mutability": "mutable",
												"name": "tokenId",
												"nameLocation": "7980:7:12",
												"nodeType": "VariableDeclaration",
												"scope": 1829,
												"src": "7972:15:12",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 1816,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "7972:7:12",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "7971:17:12"
									},
									"returnParameters": {
										"id": 1822,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 1821,
												"mutability": "mutable",
												"name": "",
												"nameLocation": "-1:-1:-1",
												"nodeType": "VariableDeclaration",
												"scope": 1829,
												"src": "8019:7:12",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 1820,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "8019:7:12",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "8018:9:12"
									},
									"scope": 2729,
									"src": "7955:122:12",
									"stateMutability": "view",
									"virtual": false,
									"visibility": "public"
								},
								{
									"baseFunctions": [
										281
									],
									"body": {
										"id": 1838,
										"nodeType": "Block",
										"src": "8208:29:12",
										"statements": [
											{
												"expression": {
													"id": 1836,
													"name": "_name",
													"nodeType": "Identifier",
													"overloadedDeclarations": [],
													"referencedDeclaration": 1497,
													"src": "8225:5:12",
													"typeDescriptions": {
														"typeIdentifier": "t_string_storage",
														"typeString": "string storage ref"
													}
												},
												"functionReturnParameters": 1835,
												"id": 1837,
												"nodeType": "Return",
												"src": "8218:12:12"
											}
										]
									},
									"documentation": {
										"id": 1830,
										"nodeType": "StructuredDocumentation",
										"src": "8083:51:12",
										"text": " @dev See {IERC721Metadata-name}."
									},
									"functionSelector": "06fdde03",
									"id": 1839,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "name",
									"nameLocation": "8148:4:12",
									"nodeType": "FunctionDefinition",
									"overrides": {
										"id": 1832,
										"nodeType": "OverrideSpecifier",
										"overrides": [],
										"src": "8175:8:12"
									},
									"parameters": {
										"id": 1831,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "8152:2:12"
									},
									"returnParameters": {
										"id": 1835,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 1834,
												"mutability": "mutable",
												"name": "",
												"nameLocation": "-1:-1:-1",
												"nodeType": "VariableDeclaration",
												"scope": 1839,
												"src": "8193:13:12",
												"stateVariable": false,
												"storageLocation": "memory",
												"typeDescriptions": {
													"typeIdentifier": "t_string_memory_ptr",
													"typeString": "string"
												},
												"typeName": {
													"id": 1833,
													"name": "string",
													"nodeType": "ElementaryTypeName",
													"src": "8193:6:12",
													"typeDescriptions": {
														"typeIdentifier": "t_string_storage_ptr",
														"typeString": "string"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "8192:15:12"
									},
									"scope": 2729,
									"src": "8139:98:12",
									"stateMutability": "view",
									"virtual": true,
									"visibility": "public"
								},
								{
									"baseFunctions": [
										287
									],
									"body": {
										"id": 1848,
										"nodeType": "Block",
										"src": "8372:31:12",
										"statements": [
											{
												"expression": {
													"id": 1846,
													"name": "_symbol",
													"nodeType": "Identifier",
													"overloadedDeclarations": [],
													"referencedDeclaration": 1499,
													"src": "8389:7:12",
													"typeDescriptions": {
														"typeIdentifier": "t_string_storage",
														"typeString": "string storage ref"
													}
												},
												"functionReturnParameters": 1845,
												"id": 1847,
												"nodeType": "Return",
												"src": "8382:14:12"
											}
										]
									},
									"documentation": {
										"id": 1840,
										"nodeType": "StructuredDocumentation",
										"src": "8243:53:12",
										"text": " @dev See {IERC721Metadata-symbol}."
									},
									"functionSelector": "95d89b41",
									"id": 1849,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "symbol",
									"nameLocation": "8310:6:12",
									"nodeType": "FunctionDefinition",
									"overrides": {
										"id": 1842,
										"nodeType": "OverrideSpecifier",
										"overrides": [],
										"src": "8339:8:12"
									},
									"parameters": {
										"id": 1841,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "8316:2:12"
									},
									"returnParameters": {
										"id": 1845,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 1844,
												"mutability": "mutable",
												"name": "",
												"nameLocation": "-1:-1:-1",
												"nodeType": "VariableDeclaration",
												"scope": 1849,
												"src": "8357:13:12",
												"stateVariable": false,
												"storageLocation": "memory",
												"typeDescriptions": {
													"typeIdentifier": "t_string_memory_ptr",
													"typeString": "string"
												},
												"typeName": {
													"id": 1843,
													"name": "string",
													"nodeType": "ElementaryTypeName",
													"src": "8357:6:12",
													"typeDescriptions": {
														"typeIdentifier": "t_string_storage_ptr",
														"typeString": "string"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "8356:15:12"
									},
									"scope": 2729,
									"src": "8301:102:12",
									"stateMutability": "view",
									"virtual": true,
									"visibility": "public"
								},
								{
									"baseFunctions": [
										295
									],
									"body": {
										"id": 1891,
										"nodeType": "Block",
										"src": "8557:225:12",
										"statements": [
											{
												"condition": {
													"id": 1861,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"lValueRequested": false,
													"nodeType": "UnaryOperation",
													"operator": "!",
													"prefix": true,
													"src": "8571:17:12",
													"subExpression": {
														"arguments": [
															{
																"id": 1859,
																"name": "tokenId",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 1852,
																"src": "8580:7:12",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															}
														],
														"expression": {
															"argumentTypes": [
																{
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															],
															"id": 1858,
															"name": "_exists",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 2118,
															"src": "8572:7:12",
															"typeDescriptions": {
																"typeIdentifier": "t_function_internal_view$_t_uint256_$returns$_t_bool_$",
																"typeString": "function (uint256) view returns (bool)"
															}
														},
														"id": 1860,
														"isConstant": false,
														"isLValue": false,
														"isPure": false,
														"kind": "functionCall",
														"lValueRequested": false,
														"names": [],
														"nodeType": "FunctionCall",
														"src": "8572:16:12",
														"tryCall": false,
														"typeDescriptions": {
															"typeIdentifier": "t_bool",
															"typeString": "bool"
														}
													},
													"typeDescriptions": {
														"typeIdentifier": "t_bool",
														"typeString": "bool"
													}
												},
												"id": 1865,
												"nodeType": "IfStatement",
												"src": "8567:59:12",
												"trueBody": {
													"errorCall": {
														"arguments": [],
														"expression": {
															"argumentTypes": [],
															"id": 1862,
															"name": "URIQueryForNonexistentToken",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 1460,
															"src": "8597:27:12",
															"typeDescriptions": {
																"typeIdentifier": "t_function_error_pure$__$returns$__$",
																"typeString": "function () pure"
															}
														},
														"id": 1863,
														"isConstant": false,
														"isLValue": false,
														"isPure": false,
														"kind": "functionCall",
														"lValueRequested": false,
														"names": [],
														"nodeType": "FunctionCall",
														"src": "8597:29:12",
														"tryCall": false,
														"typeDescriptions": {
															"typeIdentifier": "t_tuple$__$",
															"typeString": "tuple()"
														}
													},
													"id": 1864,
													"nodeType": "RevertStatement",
													"src": "8590:36:12"
												}
											},
											{
												"assignments": [
													1867
												],
												"declarations": [
													{
														"constant": false,
														"id": 1867,
														"mutability": "mutable",
														"name": "baseURI",
														"nameLocation": "8651:7:12",
														"nodeType": "VariableDeclaration",
														"scope": 1891,
														"src": "8637:21:12",
														"stateVariable": false,
														"storageLocation": "memory",
														"typeDescriptions": {
															"typeIdentifier": "t_string_memory_ptr",
															"typeString": "string"
														},
														"typeName": {
															"id": 1866,
															"name": "string",
															"nodeType": "ElementaryTypeName",
															"src": "8637:6:12",
															"typeDescriptions": {
																"typeIdentifier": "t_string_storage_ptr",
																"typeString": "string"
															}
														},
														"visibility": "internal"
													}
												],
												"id": 1870,
												"initialValue": {
													"arguments": [],
													"expression": {
														"argumentTypes": [],
														"id": 1868,
														"name": "_baseURI",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 1901,
														"src": "8661:8:12",
														"typeDescriptions": {
															"typeIdentifier": "t_function_internal_view$__$returns$_t_string_memory_ptr_$",
															"typeString": "function () view returns (string memory)"
														}
													},
													"id": 1869,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"names": [],
													"nodeType": "FunctionCall",
													"src": "8661:10:12",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_string_memory_ptr",
														"typeString": "string memory"
													}
												},
												"nodeType": "VariableDeclarationStatement",
												"src": "8637:34:12"
											},
											{
												"expression": {
													"condition": {
														"commonType": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														},
														"id": 1877,
														"isConstant": false,
														"isLValue": false,
														"isPure": false,
														"lValueRequested": false,
														"leftExpression": {
															"expression": {
																"arguments": [
																	{
																		"id": 1873,
																		"name": "baseURI",
																		"nodeType": "Identifier",
																		"overloadedDeclarations": [],
																		"referencedDeclaration": 1867,
																		"src": "8694:7:12",
																		"typeDescriptions": {
																			"typeIdentifier": "t_string_memory_ptr",
																			"typeString": "string memory"
																		}
																	}
																],
																"expression": {
																	"argumentTypes": [
																		{
																			"typeIdentifier": "t_string_memory_ptr",
																			"typeString": "string memory"
																		}
																	],
																	"id": 1872,
																	"isConstant": false,
																	"isLValue": false,
																	"isPure": true,
																	"lValueRequested": false,
																	"nodeType": "ElementaryTypeNameExpression",
																	"src": "8688:5:12",
																	"typeDescriptions": {
																		"typeIdentifier": "t_type$_t_bytes_storage_ptr_$",
																		"typeString": "type(bytes storage pointer)"
																	},
																	"typeName": {
																		"id": 1871,
																		"name": "bytes",
																		"nodeType": "ElementaryTypeName",
																		"src": "8688:5:12",
																		"typeDescriptions": {}
																	}
																},
																"id": 1874,
																"isConstant": false,
																"isLValue": false,
																"isPure": false,
																"kind": "typeConversion",
																"lValueRequested": false,
																"names": [],
																"nodeType": "FunctionCall",
																"src": "8688:14:12",
																"tryCall": false,
																"typeDescriptions": {
																	"typeIdentifier": "t_bytes_memory_ptr",
																	"typeString": "bytes memory"
																}
															},
															"id": 1875,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"lValueRequested": false,
															"memberName": "length",
															"nodeType": "MemberAccess",
															"src": "8688:21:12",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														},
														"nodeType": "BinaryOperation",
														"operator": "!=",
														"rightExpression": {
															"hexValue": "30",
															"id": 1876,
															"isConstant": false,
															"isLValue": false,
															"isPure": true,
															"kind": "number",
															"lValueRequested": false,
															"nodeType": "Literal",
															"src": "8713:1:12",
															"typeDescriptions": {
																"typeIdentifier": "t_rational_0_by_1",
																"typeString": "int_const 0"
															},
															"value": "0"
														},
														"src": "8688:26:12",
														"typeDescriptions": {
															"typeIdentifier": "t_bool",
															"typeString": "bool"
														}
													},
													"falseExpression": {
														"hexValue": "",
														"id": 1888,
														"isConstant": false,
														"isLValue": false,
														"isPure": true,
														"kind": "string",
														"lValueRequested": false,
														"nodeType": "Literal",
														"src": "8773:2:12",
														"typeDescriptions": {
															"typeIdentifier": "t_stringliteral_c5d2460186f7233c927e7db2dcc703c0e500b653ca82273b7bfad8045d85a470",
															"typeString": "literal_string \"\""
														},
														"value": ""
													},
													"id": 1889,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"lValueRequested": false,
													"nodeType": "Conditional",
													"src": "8688:87:12",
													"trueExpression": {
														"arguments": [
															{
																"arguments": [
																	{
																		"id": 1882,
																		"name": "baseURI",
																		"nodeType": "Identifier",
																		"overloadedDeclarations": [],
																		"referencedDeclaration": 1867,
																		"src": "8741:7:12",
																		"typeDescriptions": {
																			"typeIdentifier": "t_string_memory_ptr",
																			"typeString": "string memory"
																		}
																	},
																	{
																		"arguments": [],
																		"expression": {
																			"argumentTypes": [],
																			"expression": {
																				"id": 1883,
																				"name": "tokenId",
																				"nodeType": "Identifier",
																				"overloadedDeclarations": [],
																				"referencedDeclaration": 1852,
																				"src": "8750:7:12",
																				"typeDescriptions": {
																					"typeIdentifier": "t_uint256",
																					"typeString": "uint256"
																				}
																			},
																			"id": 1884,
																			"isConstant": false,
																			"isLValue": false,
																			"isPure": false,
																			"lValueRequested": false,
																			"memberName": "toString",
																			"nodeType": "MemberAccess",
																			"referencedDeclaration": 698,
																			"src": "8750:16:12",
																			"typeDescriptions": {
																				"typeIdentifier": "t_function_internal_pure$_t_uint256_$returns$_t_string_memory_ptr_$bound_to$_t_uint256_$",
																				"typeString": "function (uint256) pure returns (string memory)"
																			}
																		},
																		"id": 1885,
																		"isConstant": false,
																		"isLValue": false,
																		"isPure": false,
																		"kind": "functionCall",
																		"lValueRequested": false,
																		"names": [],
																		"nodeType": "FunctionCall",
																		"src": "8750:18:12",
																		"tryCall": false,
																		"typeDescriptions": {
																			"typeIdentifier": "t_string_memory_ptr",
																			"typeString": "string memory"
																		}
																	}
																],
																"expression": {
																	"argumentTypes": [
																		{
																			"typeIdentifier": "t_string_memory_ptr",
																			"typeString": "string memory"
																		},
																		{
																			"typeIdentifier": "t_string_memory_ptr",
																			"typeString": "string memory"
																		}
																	],
																	"expression": {
																		"id": 1880,
																		"name": "abi",
																		"nodeType": "Identifier",
																		"overloadedDeclarations": [],
																		"referencedDeclaration": 4294967295,
																		"src": "8724:3:12",
																		"typeDescriptions": {
																			"typeIdentifier": "t_magic_abi",
																			"typeString": "abi"
																		}
																	},
																	"id": 1881,
																	"isConstant": false,
																	"isLValue": false,
																	"isPure": true,
																	"lValueRequested": false,
																	"memberName": "encodePacked",
																	"nodeType": "MemberAccess",
																	"src": "8724:16:12",
																	"typeDescriptions": {
																		"typeIdentifier": "t_function_abiencodepacked_pure$__$returns$_t_bytes_memory_ptr_$",
																		"typeString": "function () pure returns (bytes memory)"
																	}
																},
																"id": 1886,
																"isConstant": false,
																"isLValue": false,
																"isPure": false,
																"kind": "functionCall",
																"lValueRequested": false,
																"names": [],
																"nodeType": "FunctionCall",
																"src": "8724:45:12",
																"tryCall": false,
																"typeDescriptions": {
																	"typeIdentifier": "t_bytes_memory_ptr",
																	"typeString": "bytes memory"
																}
															}
														],
														"expression": {
															"argumentTypes": [
																{
																	"typeIdentifier": "t_bytes_memory_ptr",
																	"typeString": "bytes memory"
																}
															],
															"id": 1879,
															"isConstant": false,
															"isLValue": false,
															"isPure": true,
															"lValueRequested": false,
															"nodeType": "ElementaryTypeNameExpression",
															"src": "8717:6:12",
															"typeDescriptions": {
																"typeIdentifier": "t_type$_t_string_storage_ptr_$",
																"typeString": "type(string storage pointer)"
															},
															"typeName": {
																"id": 1878,
																"name": "string",
																"nodeType": "ElementaryTypeName",
																"src": "8717:6:12",
																"typeDescriptions": {}
															}
														},
														"id": 1887,
														"isConstant": false,
														"isLValue": false,
														"isPure": false,
														"kind": "typeConversion",
														"lValueRequested": false,
														"names": [],
														"nodeType": "FunctionCall",
														"src": "8717:53:12",
														"tryCall": false,
														"typeDescriptions": {
															"typeIdentifier": "t_string_memory_ptr",
															"typeString": "string memory"
														}
													},
													"typeDescriptions": {
														"typeIdentifier": "t_string_memory_ptr",
														"typeString": "string memory"
													}
												},
												"functionReturnParameters": 1857,
												"id": 1890,
												"nodeType": "Return",
												"src": "8681:94:12"
											}
										]
									},
									"documentation": {
										"id": 1850,
										"nodeType": "StructuredDocumentation",
										"src": "8409:55:12",
										"text": " @dev See {IERC721Metadata-tokenURI}."
									},
									"functionSelector": "c87b56dd",
									"id": 1892,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "tokenURI",
									"nameLocation": "8478:8:12",
									"nodeType": "FunctionDefinition",
									"overrides": {
										"id": 1854,
										"nodeType": "OverrideSpecifier",
										"overrides": [],
										"src": "8524:8:12"
									},
									"parameters": {
										"id": 1853,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 1852,
												"mutability": "mutable",
												"name": "tokenId",
												"nameLocation": "8495:7:12",
												"nodeType": "VariableDeclaration",
												"scope": 1892,
												"src": "8487:15:12",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 1851,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "8487:7:12",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "8486:17:12"
									},
									"returnParameters": {
										"id": 1857,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 1856,
												"mutability": "mutable",
												"name": "",
												"nameLocation": "-1:-1:-1",
												"nodeType": "VariableDeclaration",
												"scope": 1892,
												"src": "8542:13:12",
												"stateVariable": false,
												"storageLocation": "memory",
												"typeDescriptions": {
													"typeIdentifier": "t_string_memory_ptr",
													"typeString": "string"
												},
												"typeName": {
													"id": 1855,
													"name": "string",
													"nodeType": "ElementaryTypeName",
													"src": "8542:6:12",
													"typeDescriptions": {
														"typeIdentifier": "t_string_storage_ptr",
														"typeString": "string"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "8541:15:12"
									},
									"scope": 2729,
									"src": "8469:313:12",
									"stateMutability": "view",
									"virtual": true,
									"visibility": "public"
								},
								{
									"body": {
										"id": 1900,
										"nodeType": "Block",
										"src": "9089:26:12",
										"statements": [
											{
												"expression": {
													"hexValue": "",
													"id": 1898,
													"isConstant": false,
													"isLValue": false,
													"isPure": true,
													"kind": "string",
													"lValueRequested": false,
													"nodeType": "Literal",
													"src": "9106:2:12",
													"typeDescriptions": {
														"typeIdentifier": "t_stringliteral_c5d2460186f7233c927e7db2dcc703c0e500b653ca82273b7bfad8045d85a470",
														"typeString": "literal_string \"\""
													},
													"value": ""
												},
												"functionReturnParameters": 1897,
												"id": 1899,
												"nodeType": "Return",
												"src": "9099:9:12"
											}
										]
									},
									"documentation": {
										"id": 1893,
										"nodeType": "StructuredDocumentation",
										"src": "8788:230:12",
										"text": " @dev Base URI for computing {tokenURI}. If set, the resulting URI for each\n token will be the concatenation of the `baseURI` and the `tokenId`. Empty\n by default, can be overriden in child contracts."
									},
									"id": 1901,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "_baseURI",
									"nameLocation": "9032:8:12",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 1894,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "9040:2:12"
									},
									"returnParameters": {
										"id": 1897,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 1896,
												"mutability": "mutable",
												"name": "",
												"nameLocation": "-1:-1:-1",
												"nodeType": "VariableDeclaration",
												"scope": 1901,
												"src": "9074:13:12",
												"stateVariable": false,
												"storageLocation": "memory",
												"typeDescriptions": {
													"typeIdentifier": "t_string_memory_ptr",
													"typeString": "string"
												},
												"typeName": {
													"id": 1895,
													"name": "string",
													"nodeType": "ElementaryTypeName",
													"src": "9074:6:12",
													"typeDescriptions": {
														"typeIdentifier": "t_string_storage_ptr",
														"typeString": "string"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "9073:15:12"
									},
									"scope": 2729,
									"src": "9023:92:12",
									"stateMutability": "view",
									"virtual": true,
									"visibility": "internal"
								},
								{
									"baseFunctions": [
										181
									],
									"body": {
										"id": 1946,
										"nodeType": "Block",
										"src": "9234:300:12",
										"statements": [
											{
												"assignments": [
													1911
												],
												"declarations": [
													{
														"constant": false,
														"id": 1911,
														"mutability": "mutable",
														"name": "owner",
														"nameLocation": "9252:5:12",
														"nodeType": "VariableDeclaration",
														"scope": 1946,
														"src": "9244:13:12",
														"stateVariable": false,
														"storageLocation": "default",
														"typeDescriptions": {
															"typeIdentifier": "t_address",
															"typeString": "address"
														},
														"typeName": {
															"id": 1910,
															"name": "address",
															"nodeType": "ElementaryTypeName",
															"src": "9244:7:12",
															"stateMutability": "nonpayable",
															"typeDescriptions": {
																"typeIdentifier": "t_address",
																"typeString": "address"
															}
														},
														"visibility": "internal"
													}
												],
												"id": 1916,
												"initialValue": {
													"arguments": [
														{
															"id": 1914,
															"name": "tokenId",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 1906,
															"src": "9276:7:12",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														],
														"expression": {
															"id": 1912,
															"name": "ERC721A",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 2729,
															"src": "9260:7:12",
															"typeDescriptions": {
																"typeIdentifier": "t_type$_t_contract$_ERC721A_$2729_$",
																"typeString": "type(contract ERC721A)"
															}
														},
														"id": 1913,
														"isConstant": false,
														"isLValue": false,
														"isPure": false,
														"lValueRequested": false,
														"memberName": "ownerOf",
														"nodeType": "MemberAccess",
														"referencedDeclaration": 1829,
														"src": "9260:15:12",
														"typeDescriptions": {
															"typeIdentifier": "t_function_internal_view$_t_uint256_$returns$_t_address_$",
															"typeString": "function (uint256) view returns (address)"
														}
													},
													"id": 1915,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"names": [],
													"nodeType": "FunctionCall",
													"src": "9260:24:12",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"nodeType": "VariableDeclarationStatement",
												"src": "9244:40:12"
											},
											{
												"condition": {
													"commonType": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													},
													"id": 1919,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"lValueRequested": false,
													"leftExpression": {
														"id": 1917,
														"name": "to",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 1904,
														"src": "9298:2:12",
														"typeDescriptions": {
															"typeIdentifier": "t_address",
															"typeString": "address"
														}
													},
													"nodeType": "BinaryOperation",
													"operator": "==",
													"rightExpression": {
														"id": 1918,
														"name": "owner",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 1911,
														"src": "9304:5:12",
														"typeDescriptions": {
															"typeIdentifier": "t_address",
															"typeString": "address"
														}
													},
													"src": "9298:11:12",
													"typeDescriptions": {
														"typeIdentifier": "t_bool",
														"typeString": "bool"
													}
												},
												"id": 1923,
												"nodeType": "IfStatement",
												"src": "9294:48:12",
												"trueBody": {
													"errorCall": {
														"arguments": [],
														"expression": {
															"argumentTypes": [],
															"id": 1920,
															"name": "ApprovalToCurrentOwner",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 1432,
															"src": "9318:22:12",
															"typeDescriptions": {
																"typeIdentifier": "t_function_error_pure$__$returns$__$",
																"typeString": "function () pure"
															}
														},
														"id": 1921,
														"isConstant": false,
														"isLValue": false,
														"isPure": false,
														"kind": "functionCall",
														"lValueRequested": false,
														"names": [],
														"nodeType": "FunctionCall",
														"src": "9318:24:12",
														"tryCall": false,
														"typeDescriptions": {
															"typeIdentifier": "t_tuple$__$",
															"typeString": "tuple()"
														}
													},
													"id": 1922,
													"nodeType": "RevertStatement",
													"src": "9311:31:12"
												}
											},
											{
												"condition": {
													"commonType": {
														"typeIdentifier": "t_bool",
														"typeString": "bool"
													},
													"id": 1934,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"lValueRequested": false,
													"leftExpression": {
														"commonType": {
															"typeIdentifier": "t_address",
															"typeString": "address"
														},
														"id": 1927,
														"isConstant": false,
														"isLValue": false,
														"isPure": false,
														"lValueRequested": false,
														"leftExpression": {
															"arguments": [],
															"expression": {
																"argumentTypes": [],
																"id": 1924,
																"name": "_msgSender",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 603,
																"src": "9357:10:12",
																"typeDescriptions": {
																	"typeIdentifier": "t_function_internal_view$__$returns$_t_address_$",
																	"typeString": "function () view returns (address)"
																}
															},
															"id": 1925,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"kind": "functionCall",
															"lValueRequested": false,
															"names": [],
															"nodeType": "FunctionCall",
															"src": "9357:12:12",
															"tryCall": false,
															"typeDescriptions": {
																"typeIdentifier": "t_address",
																"typeString": "address"
															}
														},
														"nodeType": "BinaryOperation",
														"operator": "!=",
														"rightExpression": {
															"id": 1926,
															"name": "owner",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 1911,
															"src": "9373:5:12",
															"typeDescriptions": {
																"typeIdentifier": "t_address",
																"typeString": "address"
															}
														},
														"src": "9357:21:12",
														"typeDescriptions": {
															"typeIdentifier": "t_bool",
															"typeString": "bool"
														}
													},
													"nodeType": "BinaryOperation",
													"operator": "&&",
													"rightExpression": {
														"id": 1933,
														"isConstant": false,
														"isLValue": false,
														"isPure": false,
														"lValueRequested": false,
														"nodeType": "UnaryOperation",
														"operator": "!",
														"prefix": true,
														"src": "9382:38:12",
														"subExpression": {
															"arguments": [
																{
																	"id": 1929,
																	"name": "owner",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 1911,
																	"src": "9400:5:12",
																	"typeDescriptions": {
																		"typeIdentifier": "t_address",
																		"typeString": "address"
																	}
																},
																{
																	"arguments": [],
																	"expression": {
																		"argumentTypes": [],
																		"id": 1930,
																		"name": "_msgSender",
																		"nodeType": "Identifier",
																		"overloadedDeclarations": [],
																		"referencedDeclaration": 603,
																		"src": "9407:10:12",
																		"typeDescriptions": {
																			"typeIdentifier": "t_function_internal_view$__$returns$_t_address_$",
																			"typeString": "function () view returns (address)"
																		}
																	},
																	"id": 1931,
																	"isConstant": false,
																	"isLValue": false,
																	"isPure": false,
																	"kind": "functionCall",
																	"lValueRequested": false,
																	"names": [],
																	"nodeType": "FunctionCall",
																	"src": "9407:12:12",
																	"tryCall": false,
																	"typeDescriptions": {
																		"typeIdentifier": "t_address",
																		"typeString": "address"
																	}
																}
															],
															"expression": {
																"argumentTypes": [
																	{
																		"typeIdentifier": "t_address",
																		"typeString": "address"
																	},
																	{
																		"typeIdentifier": "t_address",
																		"typeString": "address"
																	}
																],
																"id": 1928,
																"name": "isApprovedForAll",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 2021,
																"src": "9383:16:12",
																"typeDescriptions": {
																	"typeIdentifier": "t_function_internal_view$_t_address_$_t_address_$returns$_t_bool_$",
																	"typeString": "function (address,address) view returns (bool)"
																}
															},
															"id": 1932,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"kind": "functionCall",
															"lValueRequested": false,
															"names": [],
															"nodeType": "FunctionCall",
															"src": "9383:37:12",
															"tryCall": false,
															"typeDescriptions": {
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															}
														},
														"typeDescriptions": {
															"typeIdentifier": "t_bool",
															"typeString": "bool"
														}
													},
													"src": "9357:63:12",
													"typeDescriptions": {
														"typeIdentifier": "t_bool",
														"typeString": "bool"
													}
												},
												"id": 1939,
												"nodeType": "IfStatement",
												"src": "9353:136:12",
												"trueBody": {
													"id": 1938,
													"nodeType": "Block",
													"src": "9422:67:12",
													"statements": [
														{
															"errorCall": {
																"arguments": [],
																"expression": {
																	"argumentTypes": [],
																	"id": 1935,
																	"name": "ApprovalCallerNotOwnerNorApproved",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 1426,
																	"src": "9443:33:12",
																	"typeDescriptions": {
																		"typeIdentifier": "t_function_error_pure$__$returns$__$",
																		"typeString": "function () pure"
																	}
																},
																"id": 1936,
																"isConstant": false,
																"isLValue": false,
																"isPure": false,
																"kind": "functionCall",
																"lValueRequested": false,
																"names": [],
																"nodeType": "FunctionCall",
																"src": "9443:35:12",
																"tryCall": false,
																"typeDescriptions": {
																	"typeIdentifier": "t_tuple$__$",
																	"typeString": "tuple()"
																}
															},
															"id": 1937,
															"nodeType": "RevertStatement",
															"src": "9436:42:12"
														}
													]
												}
											},
											{
												"expression": {
													"arguments": [
														{
															"id": 1941,
															"name": "to",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 1904,
															"src": "9508:2:12",
															"typeDescriptions": {
																"typeIdentifier": "t_address",
																"typeString": "address"
															}
														},
														{
															"id": 1942,
															"name": "tokenId",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 1906,
															"src": "9512:7:12",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														},
														{
															"id": 1943,
															"name": "owner",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 1911,
															"src": "9521:5:12",
															"typeDescriptions": {
																"typeIdentifier": "t_address",
																"typeString": "address"
															}
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_address",
																"typeString": "address"
															},
															{
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															},
															{
																"typeIdentifier": "t_address",
																"typeString": "address"
															}
														],
														"id": 1940,
														"name": "_approve",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 2647,
														"src": "9499:8:12",
														"typeDescriptions": {
															"typeIdentifier": "t_function_internal_nonpayable$_t_address_$_t_uint256_$_t_address_$returns$__$",
															"typeString": "function (address,uint256,address)"
														}
													},
													"id": 1944,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"names": [],
													"nodeType": "FunctionCall",
													"src": "9499:28:12",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_tuple$__$",
														"typeString": "tuple()"
													}
												},
												"id": 1945,
												"nodeType": "ExpressionStatement",
												"src": "9499:28:12"
											}
										]
									},
									"documentation": {
										"id": 1902,
										"nodeType": "StructuredDocumentation",
										"src": "9121:46:12",
										"text": " @dev See {IERC721-approve}."
									},
									"functionSelector": "095ea7b3",
									"id": 1947,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "approve",
									"nameLocation": "9181:7:12",
									"nodeType": "FunctionDefinition",
									"overrides": {
										"id": 1908,
										"nodeType": "OverrideSpecifier",
										"overrides": [],
										"src": "9225:8:12"
									},
									"parameters": {
										"id": 1907,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 1904,
												"mutability": "mutable",
												"name": "to",
												"nameLocation": "9197:2:12",
												"nodeType": "VariableDeclaration",
												"scope": 1947,
												"src": "9189:10:12",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 1903,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "9189:7:12",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 1906,
												"mutability": "mutable",
												"name": "tokenId",
												"nameLocation": "9209:7:12",
												"nodeType": "VariableDeclaration",
												"scope": 1947,
												"src": "9201:15:12",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 1905,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "9201:7:12",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "9188:29:12"
									},
									"returnParameters": {
										"id": 1909,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "9234:0:12"
									},
									"scope": 2729,
									"src": "9172:362:12",
									"stateMutability": "nonpayable",
									"virtual": false,
									"visibility": "public"
								},
								{
									"baseFunctions": [
										189
									],
									"body": {
										"id": 1968,
										"nodeType": "Block",
										"src": "9672:123:12",
										"statements": [
											{
												"condition": {
													"id": 1959,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"lValueRequested": false,
													"nodeType": "UnaryOperation",
													"operator": "!",
													"prefix": true,
													"src": "9686:17:12",
													"subExpression": {
														"arguments": [
															{
																"id": 1957,
																"name": "tokenId",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 1950,
																"src": "9695:7:12",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															}
														],
														"expression": {
															"argumentTypes": [
																{
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															],
															"id": 1956,
															"name": "_exists",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 2118,
															"src": "9687:7:12",
															"typeDescriptions": {
																"typeIdentifier": "t_function_internal_view$_t_uint256_$returns$_t_bool_$",
																"typeString": "function (uint256) view returns (bool)"
															}
														},
														"id": 1958,
														"isConstant": false,
														"isLValue": false,
														"isPure": false,
														"kind": "functionCall",
														"lValueRequested": false,
														"names": [],
														"nodeType": "FunctionCall",
														"src": "9687:16:12",
														"tryCall": false,
														"typeDescriptions": {
															"typeIdentifier": "t_bool",
															"typeString": "bool"
														}
													},
													"typeDescriptions": {
														"typeIdentifier": "t_bool",
														"typeString": "bool"
													}
												},
												"id": 1963,
												"nodeType": "IfStatement",
												"src": "9682:64:12",
												"trueBody": {
													"errorCall": {
														"arguments": [],
														"expression": {
															"argumentTypes": [],
															"id": 1960,
															"name": "ApprovalQueryForNonexistentToken",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 1428,
															"src": "9712:32:12",
															"typeDescriptions": {
																"typeIdentifier": "t_function_error_pure$__$returns$__$",
																"typeString": "function () pure"
															}
														},
														"id": 1961,
														"isConstant": false,
														"isLValue": false,
														"isPure": false,
														"kind": "functionCall",
														"lValueRequested": false,
														"names": [],
														"nodeType": "FunctionCall",
														"src": "9712:34:12",
														"tryCall": false,
														"typeDescriptions": {
															"typeIdentifier": "t_tuple$__$",
															"typeString": "tuple()"
														}
													},
													"id": 1962,
													"nodeType": "RevertStatement",
													"src": "9705:41:12"
												}
											},
											{
												"expression": {
													"baseExpression": {
														"id": 1964,
														"name": "_tokenApprovals",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 1513,
														"src": "9764:15:12",
														"typeDescriptions": {
															"typeIdentifier": "t_mapping$_t_uint256_$_t_address_$",
															"typeString": "mapping(uint256 => address)"
														}
													},
													"id": 1966,
													"indexExpression": {
														"id": 1965,
														"name": "tokenId",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 1950,
														"src": "9780:7:12",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														}
													},
													"isConstant": false,
													"isLValue": true,
													"isPure": false,
													"lValueRequested": false,
													"nodeType": "IndexAccess",
													"src": "9764:24:12",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"functionReturnParameters": 1955,
												"id": 1967,
												"nodeType": "Return",
												"src": "9757:31:12"
											}
										]
									},
									"documentation": {
										"id": 1948,
										"nodeType": "StructuredDocumentation",
										"src": "9540:50:12",
										"text": " @dev See {IERC721-getApproved}."
									},
									"functionSelector": "081812fc",
									"id": 1969,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "getApproved",
									"nameLocation": "9604:11:12",
									"nodeType": "FunctionDefinition",
									"overrides": {
										"id": 1952,
										"nodeType": "OverrideSpecifier",
										"overrides": [],
										"src": "9645:8:12"
									},
									"parameters": {
										"id": 1951,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 1950,
												"mutability": "mutable",
												"name": "tokenId",
												"nameLocation": "9624:7:12",
												"nodeType": "VariableDeclaration",
												"scope": 1969,
												"src": "9616:15:12",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 1949,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "9616:7:12",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "9615:17:12"
									},
									"returnParameters": {
										"id": 1955,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 1954,
												"mutability": "mutable",
												"name": "",
												"nameLocation": "-1:-1:-1",
												"nodeType": "VariableDeclaration",
												"scope": 1969,
												"src": "9663:7:12",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 1953,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "9663:7:12",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "9662:9:12"
									},
									"scope": 2729,
									"src": "9595:200:12",
									"stateMutability": "view",
									"virtual": false,
									"visibility": "public"
								},
								{
									"baseFunctions": [
										197
									],
									"body": {
										"id": 2002,
										"nodeType": "Block",
										"src": "9938:198:12",
										"statements": [
											{
												"condition": {
													"commonType": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													},
													"id": 1981,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"lValueRequested": false,
													"leftExpression": {
														"id": 1978,
														"name": "operator",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 1972,
														"src": "9952:8:12",
														"typeDescriptions": {
															"typeIdentifier": "t_address",
															"typeString": "address"
														}
													},
													"nodeType": "BinaryOperation",
													"operator": "==",
													"rightExpression": {
														"arguments": [],
														"expression": {
															"argumentTypes": [],
															"id": 1979,
															"name": "_msgSender",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 603,
															"src": "9964:10:12",
															"typeDescriptions": {
																"typeIdentifier": "t_function_internal_view$__$returns$_t_address_$",
																"typeString": "function () view returns (address)"
															}
														},
														"id": 1980,
														"isConstant": false,
														"isLValue": false,
														"isPure": false,
														"kind": "functionCall",
														"lValueRequested": false,
														"names": [],
														"nodeType": "FunctionCall",
														"src": "9964:12:12",
														"tryCall": false,
														"typeDescriptions": {
															"typeIdentifier": "t_address",
															"typeString": "address"
														}
													},
													"src": "9952:24:12",
													"typeDescriptions": {
														"typeIdentifier": "t_bool",
														"typeString": "bool"
													}
												},
												"id": 1985,
												"nodeType": "IfStatement",
												"src": "9948:54:12",
												"trueBody": {
													"errorCall": {
														"arguments": [],
														"expression": {
															"argumentTypes": [],
															"id": 1982,
															"name": "ApproveToCaller",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 1430,
															"src": "9985:15:12",
															"typeDescriptions": {
																"typeIdentifier": "t_function_error_pure$__$returns$__$",
																"typeString": "function () pure"
															}
														},
														"id": 1983,
														"isConstant": false,
														"isLValue": false,
														"isPure": false,
														"kind": "functionCall",
														"lValueRequested": false,
														"names": [],
														"nodeType": "FunctionCall",
														"src": "9985:17:12",
														"tryCall": false,
														"typeDescriptions": {
															"typeIdentifier": "t_tuple$__$",
															"typeString": "tuple()"
														}
													},
													"id": 1984,
													"nodeType": "RevertStatement",
													"src": "9978:24:12"
												}
											},
											{
												"expression": {
													"id": 1993,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"lValueRequested": false,
													"leftHandSide": {
														"baseExpression": {
															"baseExpression": {
																"id": 1986,
																"name": "_operatorApprovals",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 1519,
																"src": "10013:18:12",
																"typeDescriptions": {
																	"typeIdentifier": "t_mapping$_t_address_$_t_mapping$_t_address_$_t_bool_$_$",
																	"typeString": "mapping(address => mapping(address => bool))"
																}
															},
															"id": 1990,
															"indexExpression": {
																"arguments": [],
																"expression": {
																	"argumentTypes": [],
																	"id": 1987,
																	"name": "_msgSender",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 603,
																	"src": "10032:10:12",
																	"typeDescriptions": {
																		"typeIdentifier": "t_function_internal_view$__$returns$_t_address_$",
																		"typeString": "function () view returns (address)"
																	}
																},
																"id": 1988,
																"isConstant": false,
																"isLValue": false,
																"isPure": false,
																"kind": "functionCall",
																"lValueRequested": false,
																"names": [],
																"nodeType": "FunctionCall",
																"src": "10032:12:12",
																"tryCall": false,
																"typeDescriptions": {
																	"typeIdentifier": "t_address",
																	"typeString": "address"
																}
															},
															"isConstant": false,
															"isLValue": true,
															"isPure": false,
															"lValueRequested": false,
															"nodeType": "IndexAccess",
															"src": "10013:32:12",
															"typeDescriptions": {
																"typeIdentifier": "t_mapping$_t_address_$_t_bool_$",
																"typeString": "mapping(address => bool)"
															}
														},
														"id": 1991,
														"indexExpression": {
															"id": 1989,
															"name": "operator",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 1972,
															"src": "10046:8:12",
															"typeDescriptions": {
																"typeIdentifier": "t_address",
																"typeString": "address"
															}
														},
														"isConstant": false,
														"isLValue": true,
														"isPure": false,
														"lValueRequested": true,
														"nodeType": "IndexAccess",
														"src": "10013:42:12",
														"typeDescriptions": {
															"typeIdentifier": "t_bool",
															"typeString": "bool"
														}
													},
													"nodeType": "Assignment",
													"operator": "=",
													"rightHandSide": {
														"id": 1992,
														"name": "approved",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 1974,
														"src": "10058:8:12",
														"typeDescriptions": {
															"typeIdentifier": "t_bool",
															"typeString": "bool"
														}
													},
													"src": "10013:53:12",
													"typeDescriptions": {
														"typeIdentifier": "t_bool",
														"typeString": "bool"
													}
												},
												"id": 1994,
												"nodeType": "ExpressionStatement",
												"src": "10013:53:12"
											},
											{
												"eventCall": {
													"arguments": [
														{
															"arguments": [],
															"expression": {
																"argumentTypes": [],
																"id": 1996,
																"name": "_msgSender",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 603,
																"src": "10096:10:12",
																"typeDescriptions": {
																	"typeIdentifier": "t_function_internal_view$__$returns$_t_address_$",
																	"typeString": "function () view returns (address)"
																}
															},
															"id": 1997,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"kind": "functionCall",
															"lValueRequested": false,
															"names": [],
															"nodeType": "FunctionCall",
															"src": "10096:12:12",
															"tryCall": false,
															"typeDescriptions": {
																"typeIdentifier": "t_address",
																"typeString": "address"
															}
														},
														{
															"id": 1998,
															"name": "operator",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 1972,
															"src": "10110:8:12",
															"typeDescriptions": {
																"typeIdentifier": "t_address",
																"typeString": "address"
															}
														},
														{
															"id": 1999,
															"name": "approved",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 1974,
															"src": "10120:8:12",
															"typeDescriptions": {
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															}
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_address",
																"typeString": "address"
															},
															{
																"typeIdentifier": "t_address",
																"typeString": "address"
															},
															{
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															}
														],
														"id": 1995,
														"name": "ApprovalForAll",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 137,
														"src": "10081:14:12",
														"typeDescriptions": {
															"typeIdentifier": "t_function_event_nonpayable$_t_address_$_t_address_$_t_bool_$returns$__$",
															"typeString": "function (address,address,bool)"
														}
													},
													"id": 2000,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"names": [],
													"nodeType": "FunctionCall",
													"src": "10081:48:12",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_tuple$__$",
														"typeString": "tuple()"
													}
												},
												"id": 2001,
												"nodeType": "EmitStatement",
												"src": "10076:53:12"
											}
										]
									},
									"documentation": {
										"id": 1970,
										"nodeType": "StructuredDocumentation",
										"src": "9801:56:12",
										"text": " @dev See {IERC721-setApprovalForAll}."
									},
									"functionSelector": "a22cb465",
									"id": 2003,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "setApprovalForAll",
									"nameLocation": "9871:17:12",
									"nodeType": "FunctionDefinition",
									"overrides": {
										"id": 1976,
										"nodeType": "OverrideSpecifier",
										"overrides": [],
										"src": "9929:8:12"
									},
									"parameters": {
										"id": 1975,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 1972,
												"mutability": "mutable",
												"name": "operator",
												"nameLocation": "9897:8:12",
												"nodeType": "VariableDeclaration",
												"scope": 2003,
												"src": "9889:16:12",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 1971,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "9889:7:12",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 1974,
												"mutability": "mutable",
												"name": "approved",
												"nameLocation": "9912:8:12",
												"nodeType": "VariableDeclaration",
												"scope": 2003,
												"src": "9907:13:12",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_bool",
													"typeString": "bool"
												},
												"typeName": {
													"id": 1973,
													"name": "bool",
													"nodeType": "ElementaryTypeName",
													"src": "9907:4:12",
													"typeDescriptions": {
														"typeIdentifier": "t_bool",
														"typeString": "bool"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "9888:33:12"
									},
									"returnParameters": {
										"id": 1977,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "9938:0:12"
									},
									"scope": 2729,
									"src": "9862:274:12",
									"stateMutability": "nonpayable",
									"virtual": false,
									"visibility": "public"
								},
								{
									"baseFunctions": [
										207
									],
									"body": {
										"id": 2020,
										"nodeType": "Block",
										"src": "10305:59:12",
										"statements": [
											{
												"expression": {
													"baseExpression": {
														"baseExpression": {
															"id": 2014,
															"name": "_operatorApprovals",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 1519,
															"src": "10322:18:12",
															"typeDescriptions": {
																"typeIdentifier": "t_mapping$_t_address_$_t_mapping$_t_address_$_t_bool_$_$",
																"typeString": "mapping(address => mapping(address => bool))"
															}
														},
														"id": 2016,
														"indexExpression": {
															"id": 2015,
															"name": "owner",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 2006,
															"src": "10341:5:12",
															"typeDescriptions": {
																"typeIdentifier": "t_address",
																"typeString": "address"
															}
														},
														"isConstant": false,
														"isLValue": true,
														"isPure": false,
														"lValueRequested": false,
														"nodeType": "IndexAccess",
														"src": "10322:25:12",
														"typeDescriptions": {
															"typeIdentifier": "t_mapping$_t_address_$_t_bool_$",
															"typeString": "mapping(address => bool)"
														}
													},
													"id": 2018,
													"indexExpression": {
														"id": 2017,
														"name": "operator",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 2008,
														"src": "10348:8:12",
														"typeDescriptions": {
															"typeIdentifier": "t_address",
															"typeString": "address"
														}
													},
													"isConstant": false,
													"isLValue": true,
													"isPure": false,
													"lValueRequested": false,
													"nodeType": "IndexAccess",
													"src": "10322:35:12",
													"typeDescriptions": {
														"typeIdentifier": "t_bool",
														"typeString": "bool"
													}
												},
												"functionReturnParameters": 2013,
												"id": 2019,
												"nodeType": "Return",
												"src": "10315:42:12"
											}
										]
									},
									"documentation": {
										"id": 2004,
										"nodeType": "StructuredDocumentation",
										"src": "10142:55:12",
										"text": " @dev See {IERC721-isApprovedForAll}."
									},
									"functionSelector": "e985e9c5",
									"id": 2021,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "isApprovedForAll",
									"nameLocation": "10211:16:12",
									"nodeType": "FunctionDefinition",
									"overrides": {
										"id": 2010,
										"nodeType": "OverrideSpecifier",
										"overrides": [],
										"src": "10281:8:12"
									},
									"parameters": {
										"id": 2009,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 2006,
												"mutability": "mutable",
												"name": "owner",
												"nameLocation": "10236:5:12",
												"nodeType": "VariableDeclaration",
												"scope": 2021,
												"src": "10228:13:12",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 2005,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "10228:7:12",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 2008,
												"mutability": "mutable",
												"name": "operator",
												"nameLocation": "10251:8:12",
												"nodeType": "VariableDeclaration",
												"scope": 2021,
												"src": "10243:16:12",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 2007,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "10243:7:12",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "10227:33:12"
									},
									"returnParameters": {
										"id": 2013,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 2012,
												"mutability": "mutable",
												"name": "",
												"nameLocation": "-1:-1:-1",
												"nodeType": "VariableDeclaration",
												"scope": 2021,
												"src": "10299:4:12",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_bool",
													"typeString": "bool"
												},
												"typeName": {
													"id": 2011,
													"name": "bool",
													"nodeType": "ElementaryTypeName",
													"src": "10299:4:12",
													"typeDescriptions": {
														"typeIdentifier": "t_bool",
														"typeString": "bool"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "10298:6:12"
									},
									"scope": 2729,
									"src": "10202:162:12",
									"stateMutability": "view",
									"virtual": true,
									"visibility": "public"
								},
								{
									"baseFunctions": [
										173
									],
									"body": {
										"id": 2038,
										"nodeType": "Block",
										"src": "10545:45:12",
										"statements": [
											{
												"expression": {
													"arguments": [
														{
															"id": 2033,
															"name": "from",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 2024,
															"src": "10565:4:12",
															"typeDescriptions": {
																"typeIdentifier": "t_address",
																"typeString": "address"
															}
														},
														{
															"id": 2034,
															"name": "to",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 2026,
															"src": "10571:2:12",
															"typeDescriptions": {
																"typeIdentifier": "t_address",
																"typeString": "address"
															}
														},
														{
															"id": 2035,
															"name": "tokenId",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 2028,
															"src": "10575:7:12",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_address",
																"typeString": "address"
															},
															{
																"typeIdentifier": "t_address",
																"typeString": "address"
															},
															{
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														],
														"id": 2032,
														"name": "_transfer",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 2483,
														"src": "10555:9:12",
														"typeDescriptions": {
															"typeIdentifier": "t_function_internal_nonpayable$_t_address_$_t_address_$_t_uint256_$returns$__$",
															"typeString": "function (address,address,uint256)"
														}
													},
													"id": 2036,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"names": [],
													"nodeType": "FunctionCall",
													"src": "10555:28:12",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_tuple$__$",
														"typeString": "tuple()"
													}
												},
												"id": 2037,
												"nodeType": "ExpressionStatement",
												"src": "10555:28:12"
											}
										]
									},
									"documentation": {
										"id": 2022,
										"nodeType": "StructuredDocumentation",
										"src": "10370:51:12",
										"text": " @dev See {IERC721-transferFrom}."
									},
									"functionSelector": "23b872dd",
									"id": 2039,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "transferFrom",
									"nameLocation": "10435:12:12",
									"nodeType": "FunctionDefinition",
									"overrides": {
										"id": 2030,
										"nodeType": "OverrideSpecifier",
										"overrides": [],
										"src": "10536:8:12"
									},
									"parameters": {
										"id": 2029,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 2024,
												"mutability": "mutable",
												"name": "from",
												"nameLocation": "10465:4:12",
												"nodeType": "VariableDeclaration",
												"scope": 2039,
												"src": "10457:12:12",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 2023,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "10457:7:12",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 2026,
												"mutability": "mutable",
												"name": "to",
												"nameLocation": "10487:2:12",
												"nodeType": "VariableDeclaration",
												"scope": 2039,
												"src": "10479:10:12",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 2025,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "10479:7:12",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 2028,
												"mutability": "mutable",
												"name": "tokenId",
												"nameLocation": "10507:7:12",
												"nodeType": "VariableDeclaration",
												"scope": 2039,
												"src": "10499:15:12",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 2027,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "10499:7:12",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "10447:73:12"
									},
									"returnParameters": {
										"id": 2031,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "10545:0:12"
									},
									"scope": 2729,
									"src": "10426:164:12",
									"stateMutability": "nonpayable",
									"virtual": true,
									"visibility": "public"
								},
								{
									"baseFunctions": [
										163
									],
									"body": {
										"id": 2057,
										"nodeType": "Block",
										"src": "10779:56:12",
										"statements": [
											{
												"expression": {
													"arguments": [
														{
															"id": 2051,
															"name": "from",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 2042,
															"src": "10806:4:12",
															"typeDescriptions": {
																"typeIdentifier": "t_address",
																"typeString": "address"
															}
														},
														{
															"id": 2052,
															"name": "to",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 2044,
															"src": "10812:2:12",
															"typeDescriptions": {
																"typeIdentifier": "t_address",
																"typeString": "address"
															}
														},
														{
															"id": 2053,
															"name": "tokenId",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 2046,
															"src": "10816:7:12",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														},
														{
															"hexValue": "",
															"id": 2054,
															"isConstant": false,
															"isLValue": false,
															"isPure": true,
															"kind": "string",
															"lValueRequested": false,
															"nodeType": "Literal",
															"src": "10825:2:12",
															"typeDescriptions": {
																"typeIdentifier": "t_stringliteral_c5d2460186f7233c927e7db2dcc703c0e500b653ca82273b7bfad8045d85a470",
																"typeString": "literal_string \"\""
															},
															"value": ""
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_address",
																"typeString": "address"
															},
															{
																"typeIdentifier": "t_address",
																"typeString": "address"
															},
															{
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															},
															{
																"typeIdentifier": "t_stringliteral_c5d2460186f7233c927e7db2dcc703c0e500b653ca82273b7bfad8045d85a470",
																"typeString": "literal_string \"\""
															}
														],
														"id": 2050,
														"name": "safeTransferFrom",
														"nodeType": "Identifier",
														"overloadedDeclarations": [
															2058,
															2094
														],
														"referencedDeclaration": 2094,
														"src": "10789:16:12",
														"typeDescriptions": {
															"typeIdentifier": "t_function_internal_nonpayable$_t_address_$_t_address_$_t_uint256_$_t_bytes_memory_ptr_$returns$__$",
															"typeString": "function (address,address,uint256,bytes memory)"
														}
													},
													"id": 2055,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"names": [],
													"nodeType": "FunctionCall",
													"src": "10789:39:12",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_tuple$__$",
														"typeString": "tuple()"
													}
												},
												"id": 2056,
												"nodeType": "ExpressionStatement",
												"src": "10789:39:12"
											}
										]
									},
									"documentation": {
										"id": 2040,
										"nodeType": "StructuredDocumentation",
										"src": "10596:55:12",
										"text": " @dev See {IERC721-safeTransferFrom}."
									},
									"functionSelector": "42842e0e",
									"id": 2058,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "safeTransferFrom",
									"nameLocation": "10665:16:12",
									"nodeType": "FunctionDefinition",
									"overrides": {
										"id": 2048,
										"nodeType": "OverrideSpecifier",
										"overrides": [],
										"src": "10770:8:12"
									},
									"parameters": {
										"id": 2047,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 2042,
												"mutability": "mutable",
												"name": "from",
												"nameLocation": "10699:4:12",
												"nodeType": "VariableDeclaration",
												"scope": 2058,
												"src": "10691:12:12",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 2041,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "10691:7:12",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 2044,
												"mutability": "mutable",
												"name": "to",
												"nameLocation": "10721:2:12",
												"nodeType": "VariableDeclaration",
												"scope": 2058,
												"src": "10713:10:12",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 2043,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "10713:7:12",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 2046,
												"mutability": "mutable",
												"name": "tokenId",
												"nameLocation": "10741:7:12",
												"nodeType": "VariableDeclaration",
												"scope": 2058,
												"src": "10733:15:12",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 2045,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "10733:7:12",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "10681:73:12"
									},
									"returnParameters": {
										"id": 2049,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "10779:0:12"
									},
									"scope": 2729,
									"src": "10656:179:12",
									"stateMutability": "nonpayable",
									"virtual": true,
									"visibility": "public"
								},
								{
									"baseFunctions": [
										219
									],
									"body": {
										"id": 2093,
										"nodeType": "Block",
										"src": "11052:208:12",
										"statements": [
											{
												"expression": {
													"arguments": [
														{
															"id": 2072,
															"name": "from",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 2061,
															"src": "11072:4:12",
															"typeDescriptions": {
																"typeIdentifier": "t_address",
																"typeString": "address"
															}
														},
														{
															"id": 2073,
															"name": "to",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 2063,
															"src": "11078:2:12",
															"typeDescriptions": {
																"typeIdentifier": "t_address",
																"typeString": "address"
															}
														},
														{
															"id": 2074,
															"name": "tokenId",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 2065,
															"src": "11082:7:12",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_address",
																"typeString": "address"
															},
															{
																"typeIdentifier": "t_address",
																"typeString": "address"
															},
															{
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														],
														"id": 2071,
														"name": "_transfer",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 2483,
														"src": "11062:9:12",
														"typeDescriptions": {
															"typeIdentifier": "t_function_internal_nonpayable$_t_address_$_t_address_$_t_uint256_$returns$__$",
															"typeString": "function (address,address,uint256)"
														}
													},
													"id": 2075,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"names": [],
													"nodeType": "FunctionCall",
													"src": "11062:28:12",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_tuple$__$",
														"typeString": "tuple()"
													}
												},
												"id": 2076,
												"nodeType": "ExpressionStatement",
												"src": "11062:28:12"
											},
											{
												"condition": {
													"commonType": {
														"typeIdentifier": "t_bool",
														"typeString": "bool"
													},
													"id": 2087,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"lValueRequested": false,
													"leftExpression": {
														"arguments": [],
														"expression": {
															"argumentTypes": [],
															"expression": {
																"id": 2077,
																"name": "to",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 2063,
																"src": "11104:2:12",
																"typeDescriptions": {
																	"typeIdentifier": "t_address",
																	"typeString": "address"
																}
															},
															"id": 2078,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"lValueRequested": false,
															"memberName": "isContract",
															"nodeType": "MemberAccess",
															"referencedDeclaration": 314,
															"src": "11104:13:12",
															"typeDescriptions": {
																"typeIdentifier": "t_function_internal_view$_t_address_$returns$_t_bool_$bound_to$_t_address_$",
																"typeString": "function (address) view returns (bool)"
															}
														},
														"id": 2079,
														"isConstant": false,
														"isLValue": false,
														"isPure": false,
														"kind": "functionCall",
														"lValueRequested": false,
														"names": [],
														"nodeType": "FunctionCall",
														"src": "11104:15:12",
														"tryCall": false,
														"typeDescriptions": {
															"typeIdentifier": "t_bool",
															"typeString": "bool"
														}
													},
													"nodeType": "BinaryOperation",
													"operator": "&&",
													"rightExpression": {
														"id": 2086,
														"isConstant": false,
														"isLValue": false,
														"isPure": false,
														"lValueRequested": false,
														"nodeType": "UnaryOperation",
														"operator": "!",
														"prefix": true,
														"src": "11123:57:12",
														"subExpression": {
															"arguments": [
																{
																	"id": 2081,
																	"name": "from",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 2061,
																	"src": "11155:4:12",
																	"typeDescriptions": {
																		"typeIdentifier": "t_address",
																		"typeString": "address"
																	}
																},
																{
																	"id": 2082,
																	"name": "to",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 2063,
																	"src": "11161:2:12",
																	"typeDescriptions": {
																		"typeIdentifier": "t_address",
																		"typeString": "address"
																	}
																},
																{
																	"id": 2083,
																	"name": "tokenId",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 2065,
																	"src": "11165:7:12",
																	"typeDescriptions": {
																		"typeIdentifier": "t_uint256",
																		"typeString": "uint256"
																	}
																},
																{
																	"id": 2084,
																	"name": "_data",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 2067,
																	"src": "11174:5:12",
																	"typeDescriptions": {
																		"typeIdentifier": "t_bytes_memory_ptr",
																		"typeString": "bytes memory"
																	}
																}
															],
															"expression": {
																"argumentTypes": [
																	{
																		"typeIdentifier": "t_address",
																		"typeString": "address"
																	},
																	{
																		"typeIdentifier": "t_address",
																		"typeString": "address"
																	},
																	{
																		"typeIdentifier": "t_uint256",
																		"typeString": "uint256"
																	},
																	{
																		"typeIdentifier": "t_bytes_memory_ptr",
																		"typeString": "bytes memory"
																	}
																],
																"id": 2080,
																"name": "_checkContractOnERC721Received",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 2702,
																"src": "11124:30:12",
																"typeDescriptions": {
																	"typeIdentifier": "t_function_internal_nonpayable$_t_address_$_t_address_$_t_uint256_$_t_bytes_memory_ptr_$returns$_t_bool_$",
																	"typeString": "function (address,address,uint256,bytes memory) returns (bool)"
																}
															},
															"id": 2085,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"kind": "functionCall",
															"lValueRequested": false,
															"names": [],
															"nodeType": "FunctionCall",
															"src": "11124:56:12",
															"tryCall": false,
															"typeDescriptions": {
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															}
														},
														"typeDescriptions": {
															"typeIdentifier": "t_bool",
															"typeString": "bool"
														}
													},
													"src": "11104:76:12",
													"typeDescriptions": {
														"typeIdentifier": "t_bool",
														"typeString": "bool"
													}
												},
												"id": 2092,
												"nodeType": "IfStatement",
												"src": "11100:154:12",
												"trueBody": {
													"id": 2091,
													"nodeType": "Block",
													"src": "11182:72:12",
													"statements": [
														{
															"errorCall": {
																"arguments": [],
																"expression": {
																	"argumentTypes": [],
																	"id": 2088,
																	"name": "TransferToNonERC721ReceiverImplementer",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 1456,
																	"src": "11203:38:12",
																	"typeDescriptions": {
																		"typeIdentifier": "t_function_error_pure$__$returns$__$",
																		"typeString": "function () pure"
																	}
																},
																"id": 2089,
																"isConstant": false,
																"isLValue": false,
																"isPure": false,
																"kind": "functionCall",
																"lValueRequested": false,
																"names": [],
																"nodeType": "FunctionCall",
																"src": "11203:40:12",
																"tryCall": false,
																"typeDescriptions": {
																	"typeIdentifier": "t_tuple$__$",
																	"typeString": "tuple()"
																}
															},
															"id": 2090,
															"nodeType": "RevertStatement",
															"src": "11196:47:12"
														}
													]
												}
											}
										]
									},
									"documentation": {
										"id": 2059,
										"nodeType": "StructuredDocumentation",
										"src": "10841:55:12",
										"text": " @dev See {IERC721-safeTransferFrom}."
									},
									"functionSelector": "b88d4fde",
									"id": 2094,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "safeTransferFrom",
									"nameLocation": "10910:16:12",
									"nodeType": "FunctionDefinition",
									"overrides": {
										"id": 2069,
										"nodeType": "OverrideSpecifier",
										"overrides": [],
										"src": "11043:8:12"
									},
									"parameters": {
										"id": 2068,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 2061,
												"mutability": "mutable",
												"name": "from",
												"nameLocation": "10944:4:12",
												"nodeType": "VariableDeclaration",
												"scope": 2094,
												"src": "10936:12:12",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 2060,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "10936:7:12",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 2063,
												"mutability": "mutable",
												"name": "to",
												"nameLocation": "10966:2:12",
												"nodeType": "VariableDeclaration",
												"scope": 2094,
												"src": "10958:10:12",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 2062,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "10958:7:12",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 2065,
												"mutability": "mutable",
												"name": "tokenId",
												"nameLocation": "10986:7:12",
												"nodeType": "VariableDeclaration",
												"scope": 2094,
												"src": "10978:15:12",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 2064,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "10978:7:12",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 2067,
												"mutability": "mutable",
												"name": "_data",
												"nameLocation": "11016:5:12",
												"nodeType": "VariableDeclaration",
												"scope": 2094,
												"src": "11003:18:12",
												"stateVariable": false,
												"storageLocation": "memory",
												"typeDescriptions": {
													"typeIdentifier": "t_bytes_memory_ptr",
													"typeString": "bytes"
												},
												"typeName": {
													"id": 2066,
													"name": "bytes",
													"nodeType": "ElementaryTypeName",
													"src": "11003:5:12",
													"typeDescriptions": {
														"typeIdentifier": "t_bytes_storage_ptr",
														"typeString": "bytes"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "10926:101:12"
									},
									"returnParameters": {
										"id": 2070,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "11052:0:12"
									},
									"scope": 2729,
									"src": "10901:359:12",
									"stateMutability": "nonpayable",
									"virtual": true,
									"visibility": "public"
								},
								{
									"body": {
										"id": 2117,
										"nodeType": "Block",
										"src": "11569:121:12",
										"statements": [
											{
												"expression": {
													"commonType": {
														"typeIdentifier": "t_bool",
														"typeString": "bool"
													},
													"id": 2115,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"lValueRequested": false,
													"leftExpression": {
														"commonType": {
															"typeIdentifier": "t_bool",
															"typeString": "bool"
														},
														"id": 2109,
														"isConstant": false,
														"isLValue": false,
														"isPure": false,
														"lValueRequested": false,
														"leftExpression": {
															"commonType": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															},
															"id": 2105,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"lValueRequested": false,
															"leftExpression": {
																"arguments": [],
																"expression": {
																	"argumentTypes": [],
																	"id": 2102,
																	"name": "_startTokenId",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 1549,
																	"src": "11586:13:12",
																	"typeDescriptions": {
																		"typeIdentifier": "t_function_internal_view$__$returns$_t_uint256_$",
																		"typeString": "function () view returns (uint256)"
																	}
																},
																"id": 2103,
																"isConstant": false,
																"isLValue": false,
																"isPure": false,
																"kind": "functionCall",
																"lValueRequested": false,
																"names": [],
																"nodeType": "FunctionCall",
																"src": "11586:15:12",
																"tryCall": false,
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															},
															"nodeType": "BinaryOperation",
															"operator": "<=",
															"rightExpression": {
																"id": 2104,
																"name": "tokenId",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 2097,
																"src": "11605:7:12",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															},
															"src": "11586:26:12",
															"typeDescriptions": {
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															}
														},
														"nodeType": "BinaryOperation",
														"operator": "&&",
														"rightExpression": {
															"commonType": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															},
															"id": 2108,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"lValueRequested": false,
															"leftExpression": {
																"id": 2106,
																"name": "tokenId",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 2097,
																"src": "11616:7:12",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															},
															"nodeType": "BinaryOperation",
															"operator": "<",
															"rightExpression": {
																"id": 2107,
																"name": "_currentIndex",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 1493,
																"src": "11626:13:12",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															},
															"src": "11616:23:12",
															"typeDescriptions": {
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															}
														},
														"src": "11586:53:12",
														"typeDescriptions": {
															"typeIdentifier": "t_bool",
															"typeString": "bool"
														}
													},
													"nodeType": "BinaryOperation",
													"operator": "&&",
													"rightExpression": {
														"id": 2114,
														"isConstant": false,
														"isLValue": false,
														"isPure": false,
														"lValueRequested": false,
														"nodeType": "UnaryOperation",
														"operator": "!",
														"prefix": true,
														"src": "11655:28:12",
														"subExpression": {
															"expression": {
																"baseExpression": {
																	"id": 2110,
																	"name": "_ownerships",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 1504,
																	"src": "11656:11:12",
																	"typeDescriptions": {
																		"typeIdentifier": "t_mapping$_t_uint256_$_t_struct$_TokenOwnership_$1482_storage_$",
																		"typeString": "mapping(uint256 => struct ERC721A.TokenOwnership storage ref)"
																	}
																},
																"id": 2112,
																"indexExpression": {
																	"id": 2111,
																	"name": "tokenId",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 2097,
																	"src": "11668:7:12",
																	"typeDescriptions": {
																		"typeIdentifier": "t_uint256",
																		"typeString": "uint256"
																	}
																},
																"isConstant": false,
																"isLValue": true,
																"isPure": false,
																"lValueRequested": false,
																"nodeType": "IndexAccess",
																"src": "11656:20:12",
																"typeDescriptions": {
																	"typeIdentifier": "t_struct$_TokenOwnership_$1482_storage",
																	"typeString": "struct ERC721A.TokenOwnership storage ref"
																}
															},
															"id": 2113,
															"isConstant": false,
															"isLValue": true,
															"isPure": false,
															"lValueRequested": false,
															"memberName": "burned",
															"nodeType": "MemberAccess",
															"referencedDeclaration": 1481,
															"src": "11656:27:12",
															"typeDescriptions": {
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															}
														},
														"typeDescriptions": {
															"typeIdentifier": "t_bool",
															"typeString": "bool"
														}
													},
													"src": "11586:97:12",
													"typeDescriptions": {
														"typeIdentifier": "t_bool",
														"typeString": "bool"
													}
												},
												"functionReturnParameters": 2101,
												"id": 2116,
												"nodeType": "Return",
												"src": "11579:104:12"
											}
										]
									},
									"documentation": {
										"id": 2095,
										"nodeType": "StructuredDocumentation",
										"src": "11266:235:12",
										"text": " @dev Returns whether `tokenId` exists.\n Tokens can be managed by their owner or approved accounts via {approve} or {setApprovalForAll}.\n Tokens start existing when they are minted (`_mint`),"
									},
									"id": 2118,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "_exists",
									"nameLocation": "11515:7:12",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 2098,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 2097,
												"mutability": "mutable",
												"name": "tokenId",
												"nameLocation": "11531:7:12",
												"nodeType": "VariableDeclaration",
												"scope": 2118,
												"src": "11523:15:12",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 2096,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "11523:7:12",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "11522:17:12"
									},
									"returnParameters": {
										"id": 2101,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 2100,
												"mutability": "mutable",
												"name": "",
												"nameLocation": "-1:-1:-1",
												"nodeType": "VariableDeclaration",
												"scope": 2118,
												"src": "11563:4:12",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_bool",
													"typeString": "bool"
												},
												"typeName": {
													"id": 2099,
													"name": "bool",
													"nodeType": "ElementaryTypeName",
													"src": "11563:4:12",
													"typeDescriptions": {
														"typeIdentifier": "t_bool",
														"typeString": "bool"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "11562:6:12"
									},
									"scope": 2729,
									"src": "11506:184:12",
									"stateMutability": "view",
									"virtual": false,
									"visibility": "internal"
								},
								{
									"body": {
										"id": 2131,
										"nodeType": "Block",
										"src": "11754:44:12",
										"statements": [
											{
												"expression": {
													"arguments": [
														{
															"id": 2126,
															"name": "to",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 2120,
															"src": "11774:2:12",
															"typeDescriptions": {
																"typeIdentifier": "t_address",
																"typeString": "address"
															}
														},
														{
															"id": 2127,
															"name": "quantity",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 2122,
															"src": "11778:8:12",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														},
														{
															"hexValue": "",
															"id": 2128,
															"isConstant": false,
															"isLValue": false,
															"isPure": true,
															"kind": "string",
															"lValueRequested": false,
															"nodeType": "Literal",
															"src": "11788:2:12",
															"typeDescriptions": {
																"typeIdentifier": "t_stringliteral_c5d2460186f7233c927e7db2dcc703c0e500b653ca82273b7bfad8045d85a470",
																"typeString": "literal_string \"\""
															},
															"value": ""
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_address",
																"typeString": "address"
															},
															{
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															},
															{
																"typeIdentifier": "t_stringliteral_c5d2460186f7233c927e7db2dcc703c0e500b653ca82273b7bfad8045d85a470",
																"typeString": "literal_string \"\""
															}
														],
														"id": 2125,
														"name": "_safeMint",
														"nodeType": "Identifier",
														"overloadedDeclarations": [
															2132,
															2150
														],
														"referencedDeclaration": 2150,
														"src": "11764:9:12",
														"typeDescriptions": {
															"typeIdentifier": "t_function_internal_nonpayable$_t_address_$_t_uint256_$_t_bytes_memory_ptr_$returns$__$",
															"typeString": "function (address,uint256,bytes memory)"
														}
													},
													"id": 2129,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"names": [],
													"nodeType": "FunctionCall",
													"src": "11764:27:12",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_tuple$__$",
														"typeString": "tuple()"
													}
												},
												"id": 2130,
												"nodeType": "ExpressionStatement",
												"src": "11764:27:12"
											}
										]
									},
									"id": 2132,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "_safeMint",
									"nameLocation": "11705:9:12",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 2123,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 2120,
												"mutability": "mutable",
												"name": "to",
												"nameLocation": "11723:2:12",
												"nodeType": "VariableDeclaration",
												"scope": 2132,
												"src": "11715:10:12",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 2119,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "11715:7:12",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 2122,
												"mutability": "mutable",
												"name": "quantity",
												"nameLocation": "11735:8:12",
												"nodeType": "VariableDeclaration",
												"scope": 2132,
												"src": "11727:16:12",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 2121,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "11727:7:12",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "11714:30:12"
									},
									"returnParameters": {
										"id": 2124,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "11754:0:12"
									},
									"scope": 2729,
									"src": "11696:102:12",
									"stateMutability": "nonpayable",
									"virtual": false,
									"visibility": "internal"
								},
								{
									"body": {
										"id": 2149,
										"nodeType": "Block",
										"src": "12257:49:12",
										"statements": [
											{
												"expression": {
													"arguments": [
														{
															"id": 2143,
															"name": "to",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 2135,
															"src": "12273:2:12",
															"typeDescriptions": {
																"typeIdentifier": "t_address",
																"typeString": "address"
															}
														},
														{
															"id": 2144,
															"name": "quantity",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 2137,
															"src": "12277:8:12",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														},
														{
															"id": 2145,
															"name": "_data",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 2139,
															"src": "12287:5:12",
															"typeDescriptions": {
																"typeIdentifier": "t_bytes_memory_ptr",
																"typeString": "bytes memory"
															}
														},
														{
															"hexValue": "74727565",
															"id": 2146,
															"isConstant": false,
															"isLValue": false,
															"isPure": true,
															"kind": "bool",
															"lValueRequested": false,
															"nodeType": "Literal",
															"src": "12294:4:12",
															"typeDescriptions": {
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															},
															"value": "true"
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_address",
																"typeString": "address"
															},
															{
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															},
															{
																"typeIdentifier": "t_bytes_memory_ptr",
																"typeString": "bytes memory"
															},
															{
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															}
														],
														"id": 2142,
														"name": "_mint",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 2317,
														"src": "12267:5:12",
														"typeDescriptions": {
															"typeIdentifier": "t_function_internal_nonpayable$_t_address_$_t_uint256_$_t_bytes_memory_ptr_$_t_bool_$returns$__$",
															"typeString": "function (address,uint256,bytes memory,bool)"
														}
													},
													"id": 2147,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"names": [],
													"nodeType": "FunctionCall",
													"src": "12267:32:12",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_tuple$__$",
														"typeString": "tuple()"
													}
												},
												"id": 2148,
												"nodeType": "ExpressionStatement",
												"src": "12267:32:12"
											}
										]
									},
									"documentation": {
										"id": 2133,
										"nodeType": "StructuredDocumentation",
										"src": "11804:340:12",
										"text": " @dev Safely mints `quantity` tokens and transfers them to `to`.\n Requirements:\n - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called for each safe transfer.\n - `quantity` must be greater than 0.\n Emits a {Transfer} event."
									},
									"id": 2150,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "_safeMint",
									"nameLocation": "12158:9:12",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 2140,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 2135,
												"mutability": "mutable",
												"name": "to",
												"nameLocation": "12185:2:12",
												"nodeType": "VariableDeclaration",
												"scope": 2150,
												"src": "12177:10:12",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 2134,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "12177:7:12",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 2137,
												"mutability": "mutable",
												"name": "quantity",
												"nameLocation": "12205:8:12",
												"nodeType": "VariableDeclaration",
												"scope": 2150,
												"src": "12197:16:12",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 2136,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "12197:7:12",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 2139,
												"mutability": "mutable",
												"name": "_data",
												"nameLocation": "12236:5:12",
												"nodeType": "VariableDeclaration",
												"scope": 2150,
												"src": "12223:18:12",
												"stateVariable": false,
												"storageLocation": "memory",
												"typeDescriptions": {
													"typeIdentifier": "t_bytes_memory_ptr",
													"typeString": "bytes"
												},
												"typeName": {
													"id": 2138,
													"name": "bytes",
													"nodeType": "ElementaryTypeName",
													"src": "12223:5:12",
													"typeDescriptions": {
														"typeIdentifier": "t_bytes_storage_ptr",
														"typeString": "bytes"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "12167:80:12"
									},
									"returnParameters": {
										"id": 2141,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "12257:0:12"
									},
									"scope": 2729,
									"src": "12149:157:12",
									"stateMutability": "nonpayable",
									"virtual": false,
									"visibility": "internal"
								},
								{
									"body": {
										"id": 2316,
										"nodeType": "Block",
										"src": "12676:1610:12",
										"statements": [
											{
												"assignments": [
													2163
												],
												"declarations": [
													{
														"constant": false,
														"id": 2163,
														"mutability": "mutable",
														"name": "startTokenId",
														"nameLocation": "12694:12:12",
														"nodeType": "VariableDeclaration",
														"scope": 2316,
														"src": "12686:20:12",
														"stateVariable": false,
														"storageLocation": "default",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														},
														"typeName": {
															"id": 2162,
															"name": "uint256",
															"nodeType": "ElementaryTypeName",
															"src": "12686:7:12",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														},
														"visibility": "internal"
													}
												],
												"id": 2165,
												"initialValue": {
													"id": 2164,
													"name": "_currentIndex",
													"nodeType": "Identifier",
													"overloadedDeclarations": [],
													"referencedDeclaration": 1493,
													"src": "12709:13:12",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"nodeType": "VariableDeclarationStatement",
												"src": "12686:36:12"
											},
											{
												"condition": {
													"commonType": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													},
													"id": 2171,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"lValueRequested": false,
													"leftExpression": {
														"id": 2166,
														"name": "to",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 2153,
														"src": "12736:2:12",
														"typeDescriptions": {
															"typeIdentifier": "t_address",
															"typeString": "address"
														}
													},
													"nodeType": "BinaryOperation",
													"operator": "==",
													"rightExpression": {
														"arguments": [
															{
																"hexValue": "30",
																"id": 2169,
																"isConstant": false,
																"isLValue": false,
																"isPure": true,
																"kind": "number",
																"lValueRequested": false,
																"nodeType": "Literal",
																"src": "12750:1:12",
																"typeDescriptions": {
																	"typeIdentifier": "t_rational_0_by_1",
																	"typeString": "int_const 0"
																},
																"value": "0"
															}
														],
														"expression": {
															"argumentTypes": [
																{
																	"typeIdentifier": "t_rational_0_by_1",
																	"typeString": "int_const 0"
																}
															],
															"id": 2168,
															"isConstant": false,
															"isLValue": false,
															"isPure": true,
															"lValueRequested": false,
															"nodeType": "ElementaryTypeNameExpression",
															"src": "12742:7:12",
															"typeDescriptions": {
																"typeIdentifier": "t_type$_t_address_$",
																"typeString": "type(address)"
															},
															"typeName": {
																"id": 2167,
																"name": "address",
																"nodeType": "ElementaryTypeName",
																"src": "12742:7:12",
																"typeDescriptions": {}
															}
														},
														"id": 2170,
														"isConstant": false,
														"isLValue": false,
														"isPure": true,
														"kind": "typeConversion",
														"lValueRequested": false,
														"names": [],
														"nodeType": "FunctionCall",
														"src": "12742:10:12",
														"tryCall": false,
														"typeDescriptions": {
															"typeIdentifier": "t_address",
															"typeString": "address"
														}
													},
													"src": "12736:16:12",
													"typeDescriptions": {
														"typeIdentifier": "t_bool",
														"typeString": "bool"
													}
												},
												"id": 2175,
												"nodeType": "IfStatement",
												"src": "12732:48:12",
												"trueBody": {
													"errorCall": {
														"arguments": [],
														"expression": {
															"argumentTypes": [],
															"id": 2172,
															"name": "MintToZeroAddress",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 1442,
															"src": "12761:17:12",
															"typeDescriptions": {
																"typeIdentifier": "t_function_error_pure$__$returns$__$",
																"typeString": "function () pure"
															}
														},
														"id": 2173,
														"isConstant": false,
														"isLValue": false,
														"isPure": false,
														"kind": "functionCall",
														"lValueRequested": false,
														"names": [],
														"nodeType": "FunctionCall",
														"src": "12761:19:12",
														"tryCall": false,
														"typeDescriptions": {
															"typeIdentifier": "t_tuple$__$",
															"typeString": "tuple()"
														}
													},
													"id": 2174,
													"nodeType": "RevertStatement",
													"src": "12754:26:12"
												}
											},
											{
												"condition": {
													"commonType": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													},
													"id": 2178,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"lValueRequested": false,
													"leftExpression": {
														"id": 2176,
														"name": "quantity",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 2155,
														"src": "12794:8:12",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														}
													},
													"nodeType": "BinaryOperation",
													"operator": "==",
													"rightExpression": {
														"hexValue": "30",
														"id": 2177,
														"isConstant": false,
														"isLValue": false,
														"isPure": true,
														"kind": "number",
														"lValueRequested": false,
														"nodeType": "Literal",
														"src": "12806:1:12",
														"typeDescriptions": {
															"typeIdentifier": "t_rational_0_by_1",
															"typeString": "int_const 0"
														},
														"value": "0"
													},
													"src": "12794:13:12",
													"typeDescriptions": {
														"typeIdentifier": "t_bool",
														"typeString": "bool"
													}
												},
												"id": 2182,
												"nodeType": "IfStatement",
												"src": "12790:44:12",
												"trueBody": {
													"errorCall": {
														"arguments": [],
														"expression": {
															"argumentTypes": [],
															"id": 2179,
															"name": "MintZeroQuantity",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 1444,
															"src": "12816:16:12",
															"typeDescriptions": {
																"typeIdentifier": "t_function_error_pure$__$returns$__$",
																"typeString": "function () pure"
															}
														},
														"id": 2180,
														"isConstant": false,
														"isLValue": false,
														"isPure": false,
														"kind": "functionCall",
														"lValueRequested": false,
														"names": [],
														"nodeType": "FunctionCall",
														"src": "12816:18:12",
														"tryCall": false,
														"typeDescriptions": {
															"typeIdentifier": "t_tuple$__$",
															"typeString": "tuple()"
														}
													},
													"id": 2181,
													"nodeType": "RevertStatement",
													"src": "12809:25:12"
												}
											},
											{
												"expression": {
													"arguments": [
														{
															"arguments": [
																{
																	"hexValue": "30",
																	"id": 2186,
																	"isConstant": false,
																	"isLValue": false,
																	"isPure": true,
																	"kind": "number",
																	"lValueRequested": false,
																	"nodeType": "Literal",
																	"src": "12875:1:12",
																	"typeDescriptions": {
																		"typeIdentifier": "t_rational_0_by_1",
																		"typeString": "int_const 0"
																	},
																	"value": "0"
																}
															],
															"expression": {
																"argumentTypes": [
																	{
																		"typeIdentifier": "t_rational_0_by_1",
																		"typeString": "int_const 0"
																	}
																],
																"id": 2185,
																"isConstant": false,
																"isLValue": false,
																"isPure": true,
																"lValueRequested": false,
																"nodeType": "ElementaryTypeNameExpression",
																"src": "12867:7:12",
																"typeDescriptions": {
																	"typeIdentifier": "t_type$_t_address_$",
																	"typeString": "type(address)"
																},
																"typeName": {
																	"id": 2184,
																	"name": "address",
																	"nodeType": "ElementaryTypeName",
																	"src": "12867:7:12",
																	"typeDescriptions": {}
																}
															},
															"id": 2187,
															"isConstant": false,
															"isLValue": false,
															"isPure": true,
															"kind": "typeConversion",
															"lValueRequested": false,
															"names": [],
															"nodeType": "FunctionCall",
															"src": "12867:10:12",
															"tryCall": false,
															"typeDescriptions": {
																"typeIdentifier": "t_address",
																"typeString": "address"
															}
														},
														{
															"id": 2188,
															"name": "to",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 2153,
															"src": "12879:2:12",
															"typeDescriptions": {
																"typeIdentifier": "t_address",
																"typeString": "address"
															}
														},
														{
															"id": 2189,
															"name": "startTokenId",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 2163,
															"src": "12883:12:12",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														},
														{
															"id": 2190,
															"name": "quantity",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 2155,
															"src": "12897:8:12",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_address",
																"typeString": "address"
															},
															{
																"typeIdentifier": "t_address",
																"typeString": "address"
															},
															{
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															},
															{
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														],
														"id": 2183,
														"name": "_beforeTokenTransfers",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 2715,
														"src": "12845:21:12",
														"typeDescriptions": {
															"typeIdentifier": "t_function_internal_nonpayable$_t_address_$_t_address_$_t_uint256_$_t_uint256_$returns$__$",
															"typeString": "function (address,address,uint256,uint256)"
														}
													},
													"id": 2191,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"names": [],
													"nodeType": "FunctionCall",
													"src": "12845:61:12",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_tuple$__$",
														"typeString": "tuple()"
													}
												},
												"id": 2192,
												"nodeType": "ExpressionStatement",
												"src": "12845:61:12"
											},
											{
												"id": 2305,
												"nodeType": "UncheckedBlock",
												"src": "13153:1057:12",
												"statements": [
													{
														"expression": {
															"id": 2201,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"lValueRequested": false,
															"leftHandSide": {
																"expression": {
																	"baseExpression": {
																		"id": 2193,
																		"name": "_addressData",
																		"nodeType": "Identifier",
																		"overloadedDeclarations": [],
																		"referencedDeclaration": 1509,
																		"src": "13177:12:12",
																		"typeDescriptions": {
																			"typeIdentifier": "t_mapping$_t_address_$_t_struct$_AddressData_$1491_storage_$",
																			"typeString": "mapping(address => struct ERC721A.AddressData storage ref)"
																		}
																	},
																	"id": 2195,
																	"indexExpression": {
																		"id": 2194,
																		"name": "to",
																		"nodeType": "Identifier",
																		"overloadedDeclarations": [],
																		"referencedDeclaration": 2153,
																		"src": "13190:2:12",
																		"typeDescriptions": {
																			"typeIdentifier": "t_address",
																			"typeString": "address"
																		}
																	},
																	"isConstant": false,
																	"isLValue": true,
																	"isPure": false,
																	"lValueRequested": false,
																	"nodeType": "IndexAccess",
																	"src": "13177:16:12",
																	"typeDescriptions": {
																		"typeIdentifier": "t_struct$_AddressData_$1491_storage",
																		"typeString": "struct ERC721A.AddressData storage ref"
																	}
																},
																"id": 2196,
																"isConstant": false,
																"isLValue": true,
																"isPure": false,
																"lValueRequested": true,
																"memberName": "balance",
																"nodeType": "MemberAccess",
																"referencedDeclaration": 1484,
																"src": "13177:24:12",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint64",
																	"typeString": "uint64"
																}
															},
															"nodeType": "Assignment",
															"operator": "+=",
															"rightHandSide": {
																"arguments": [
																	{
																		"id": 2199,
																		"name": "quantity",
																		"nodeType": "Identifier",
																		"overloadedDeclarations": [],
																		"referencedDeclaration": 2155,
																		"src": "13212:8:12",
																		"typeDescriptions": {
																			"typeIdentifier": "t_uint256",
																			"typeString": "uint256"
																		}
																	}
																],
																"expression": {
																	"argumentTypes": [
																		{
																			"typeIdentifier": "t_uint256",
																			"typeString": "uint256"
																		}
																	],
																	"id": 2198,
																	"isConstant": false,
																	"isLValue": false,
																	"isPure": true,
																	"lValueRequested": false,
																	"nodeType": "ElementaryTypeNameExpression",
																	"src": "13205:6:12",
																	"typeDescriptions": {
																		"typeIdentifier": "t_type$_t_uint64_$",
																		"typeString": "type(uint64)"
																	},
																	"typeName": {
																		"id": 2197,
																		"name": "uint64",
																		"nodeType": "ElementaryTypeName",
																		"src": "13205:6:12",
																		"typeDescriptions": {}
																	}
																},
																"id": 2200,
																"isConstant": false,
																"isLValue": false,
																"isPure": false,
																"kind": "typeConversion",
																"lValueRequested": false,
																"names": [],
																"nodeType": "FunctionCall",
																"src": "13205:16:12",
																"tryCall": false,
																"typeDescriptions": {
																	"typeIdentifier": "t_uint64",
																	"typeString": "uint64"
																}
															},
															"src": "13177:44:12",
															"typeDescriptions": {
																"typeIdentifier": "t_uint64",
																"typeString": "uint64"
															}
														},
														"id": 2202,
														"nodeType": "ExpressionStatement",
														"src": "13177:44:12"
													},
													{
														"expression": {
															"id": 2211,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"lValueRequested": false,
															"leftHandSide": {
																"expression": {
																	"baseExpression": {
																		"id": 2203,
																		"name": "_addressData",
																		"nodeType": "Identifier",
																		"overloadedDeclarations": [],
																		"referencedDeclaration": 1509,
																		"src": "13235:12:12",
																		"typeDescriptions": {
																			"typeIdentifier": "t_mapping$_t_address_$_t_struct$_AddressData_$1491_storage_$",
																			"typeString": "mapping(address => struct ERC721A.AddressData storage ref)"
																		}
																	},
																	"id": 2205,
																	"indexExpression": {
																		"id": 2204,
																		"name": "to",
																		"nodeType": "Identifier",
																		"overloadedDeclarations": [],
																		"referencedDeclaration": 2153,
																		"src": "13248:2:12",
																		"typeDescriptions": {
																			"typeIdentifier": "t_address",
																			"typeString": "address"
																		}
																	},
																	"isConstant": false,
																	"isLValue": true,
																	"isPure": false,
																	"lValueRequested": false,
																	"nodeType": "IndexAccess",
																	"src": "13235:16:12",
																	"typeDescriptions": {
																		"typeIdentifier": "t_struct$_AddressData_$1491_storage",
																		"typeString": "struct ERC721A.AddressData storage ref"
																	}
																},
																"id": 2206,
																"isConstant": false,
																"isLValue": true,
																"isPure": false,
																"lValueRequested": true,
																"memberName": "numberMinted",
																"nodeType": "MemberAccess",
																"referencedDeclaration": 1486,
																"src": "13235:29:12",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint64",
																	"typeString": "uint64"
																}
															},
															"nodeType": "Assignment",
															"operator": "+=",
															"rightHandSide": {
																"arguments": [
																	{
																		"id": 2209,
																		"name": "quantity",
																		"nodeType": "Identifier",
																		"overloadedDeclarations": [],
																		"referencedDeclaration": 2155,
																		"src": "13275:8:12",
																		"typeDescriptions": {
																			"typeIdentifier": "t_uint256",
																			"typeString": "uint256"
																		}
																	}
																],
																"expression": {
																	"argumentTypes": [
																		{
																			"typeIdentifier": "t_uint256",
																			"typeString": "uint256"
																		}
																	],
																	"id": 2208,
																	"isConstant": false,
																	"isLValue": false,
																	"isPure": true,
																	"lValueRequested": false,
																	"nodeType": "ElementaryTypeNameExpression",
																	"src": "13268:6:12",
																	"typeDescriptions": {
																		"typeIdentifier": "t_type$_t_uint64_$",
																		"typeString": "type(uint64)"
																	},
																	"typeName": {
																		"id": 2207,
																		"name": "uint64",
																		"nodeType": "ElementaryTypeName",
																		"src": "13268:6:12",
																		"typeDescriptions": {}
																	}
																},
																"id": 2210,
																"isConstant": false,
																"isLValue": false,
																"isPure": false,
																"kind": "typeConversion",
																"lValueRequested": false,
																"names": [],
																"nodeType": "FunctionCall",
																"src": "13268:16:12",
																"tryCall": false,
																"typeDescriptions": {
																	"typeIdentifier": "t_uint64",
																	"typeString": "uint64"
																}
															},
															"src": "13235:49:12",
															"typeDescriptions": {
																"typeIdentifier": "t_uint64",
																"typeString": "uint64"
															}
														},
														"id": 2212,
														"nodeType": "ExpressionStatement",
														"src": "13235:49:12"
													},
													{
														"expression": {
															"id": 2218,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"lValueRequested": false,
															"leftHandSide": {
																"expression": {
																	"baseExpression": {
																		"id": 2213,
																		"name": "_ownerships",
																		"nodeType": "Identifier",
																		"overloadedDeclarations": [],
																		"referencedDeclaration": 1504,
																		"src": "13299:11:12",
																		"typeDescriptions": {
																			"typeIdentifier": "t_mapping$_t_uint256_$_t_struct$_TokenOwnership_$1482_storage_$",
																			"typeString": "mapping(uint256 => struct ERC721A.TokenOwnership storage ref)"
																		}
																	},
																	"id": 2215,
																	"indexExpression": {
																		"id": 2214,
																		"name": "startTokenId",
																		"nodeType": "Identifier",
																		"overloadedDeclarations": [],
																		"referencedDeclaration": 2163,
																		"src": "13311:12:12",
																		"typeDescriptions": {
																			"typeIdentifier": "t_uint256",
																			"typeString": "uint256"
																		}
																	},
																	"isConstant": false,
																	"isLValue": true,
																	"isPure": false,
																	"lValueRequested": false,
																	"nodeType": "IndexAccess",
																	"src": "13299:25:12",
																	"typeDescriptions": {
																		"typeIdentifier": "t_struct$_TokenOwnership_$1482_storage",
																		"typeString": "struct ERC721A.TokenOwnership storage ref"
																	}
																},
																"id": 2216,
																"isConstant": false,
																"isLValue": true,
																"isPure": false,
																"lValueRequested": true,
																"memberName": "addr",
																"nodeType": "MemberAccess",
																"referencedDeclaration": 1477,
																"src": "13299:30:12",
																"typeDescriptions": {
																	"typeIdentifier": "t_address",
																	"typeString": "address"
																}
															},
															"nodeType": "Assignment",
															"operator": "=",
															"rightHandSide": {
																"id": 2217,
																"name": "to",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 2153,
																"src": "13332:2:12",
																"typeDescriptions": {
																	"typeIdentifier": "t_address",
																	"typeString": "address"
																}
															},
															"src": "13299:35:12",
															"typeDescriptions": {
																"typeIdentifier": "t_address",
																"typeString": "address"
															}
														},
														"id": 2219,
														"nodeType": "ExpressionStatement",
														"src": "13299:35:12"
													},
													{
														"expression": {
															"id": 2229,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"lValueRequested": false,
															"leftHandSide": {
																"expression": {
																	"baseExpression": {
																		"id": 2220,
																		"name": "_ownerships",
																		"nodeType": "Identifier",
																		"overloadedDeclarations": [],
																		"referencedDeclaration": 1504,
																		"src": "13348:11:12",
																		"typeDescriptions": {
																			"typeIdentifier": "t_mapping$_t_uint256_$_t_struct$_TokenOwnership_$1482_storage_$",
																			"typeString": "mapping(uint256 => struct ERC721A.TokenOwnership storage ref)"
																		}
																	},
																	"id": 2222,
																	"indexExpression": {
																		"id": 2221,
																		"name": "startTokenId",
																		"nodeType": "Identifier",
																		"overloadedDeclarations": [],
																		"referencedDeclaration": 2163,
																		"src": "13360:12:12",
																		"typeDescriptions": {
																			"typeIdentifier": "t_uint256",
																			"typeString": "uint256"
																		}
																	},
																	"isConstant": false,
																	"isLValue": true,
																	"isPure": false,
																	"lValueRequested": false,
																	"nodeType": "IndexAccess",
																	"src": "13348:25:12",
																	"typeDescriptions": {
																		"typeIdentifier": "t_struct$_TokenOwnership_$1482_storage",
																		"typeString": "struct ERC721A.TokenOwnership storage ref"
																	}
																},
																"id": 2223,
																"isConstant": false,
																"isLValue": true,
																"isPure": false,
																"lValueRequested": true,
																"memberName": "startTimestamp",
																"nodeType": "MemberAccess",
																"referencedDeclaration": 1479,
																"src": "13348:40:12",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint64",
																	"typeString": "uint64"
																}
															},
															"nodeType": "Assignment",
															"operator": "=",
															"rightHandSide": {
																"arguments": [
																	{
																		"expression": {
																			"id": 2226,
																			"name": "block",
																			"nodeType": "Identifier",
																			"overloadedDeclarations": [],
																			"referencedDeclaration": 4294967292,
																			"src": "13398:5:12",
																			"typeDescriptions": {
																				"typeIdentifier": "t_magic_block",
																				"typeString": "block"
																			}
																		},
																		"id": 2227,
																		"isConstant": false,
																		"isLValue": false,
																		"isPure": false,
																		"lValueRequested": false,
																		"memberName": "timestamp",
																		"nodeType": "MemberAccess",
																		"src": "13398:15:12",
																		"typeDescriptions": {
																			"typeIdentifier": "t_uint256",
																			"typeString": "uint256"
																		}
																	}
																],
																"expression": {
																	"argumentTypes": [
																		{
																			"typeIdentifier": "t_uint256",
																			"typeString": "uint256"
																		}
																	],
																	"id": 2225,
																	"isConstant": false,
																	"isLValue": false,
																	"isPure": true,
																	"lValueRequested": false,
																	"nodeType": "ElementaryTypeNameExpression",
																	"src": "13391:6:12",
																	"typeDescriptions": {
																		"typeIdentifier": "t_type$_t_uint64_$",
																		"typeString": "type(uint64)"
																	},
																	"typeName": {
																		"id": 2224,
																		"name": "uint64",
																		"nodeType": "ElementaryTypeName",
																		"src": "13391:6:12",
																		"typeDescriptions": {}
																	}
																},
																"id": 2228,
																"isConstant": false,
																"isLValue": false,
																"isPure": false,
																"kind": "typeConversion",
																"lValueRequested": false,
																"names": [],
																"nodeType": "FunctionCall",
																"src": "13391:23:12",
																"tryCall": false,
																"typeDescriptions": {
																	"typeIdentifier": "t_uint64",
																	"typeString": "uint64"
																}
															},
															"src": "13348:66:12",
															"typeDescriptions": {
																"typeIdentifier": "t_uint64",
																"typeString": "uint64"
															}
														},
														"id": 2230,
														"nodeType": "ExpressionStatement",
														"src": "13348:66:12"
													},
													{
														"assignments": [
															2232
														],
														"declarations": [
															{
																"constant": false,
																"id": 2232,
																"mutability": "mutable",
																"name": "updatedIndex",
																"nameLocation": "13437:12:12",
																"nodeType": "VariableDeclaration",
																"scope": 2305,
																"src": "13429:20:12",
																"stateVariable": false,
																"storageLocation": "default",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																},
																"typeName": {
																	"id": 2231,
																	"name": "uint256",
																	"nodeType": "ElementaryTypeName",
																	"src": "13429:7:12",
																	"typeDescriptions": {
																		"typeIdentifier": "t_uint256",
																		"typeString": "uint256"
																	}
																},
																"visibility": "internal"
															}
														],
														"id": 2234,
														"initialValue": {
															"id": 2233,
															"name": "startTokenId",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 2163,
															"src": "13452:12:12",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														},
														"nodeType": "VariableDeclarationStatement",
														"src": "13429:35:12"
													},
													{
														"assignments": [
															2236
														],
														"declarations": [
															{
																"constant": false,
																"id": 2236,
																"mutability": "mutable",
																"name": "end",
																"nameLocation": "13486:3:12",
																"nodeType": "VariableDeclaration",
																"scope": 2305,
																"src": "13478:11:12",
																"stateVariable": false,
																"storageLocation": "default",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																},
																"typeName": {
																	"id": 2235,
																	"name": "uint256",
																	"nodeType": "ElementaryTypeName",
																	"src": "13478:7:12",
																	"typeDescriptions": {
																		"typeIdentifier": "t_uint256",
																		"typeString": "uint256"
																	}
																},
																"visibility": "internal"
															}
														],
														"id": 2240,
														"initialValue": {
															"commonType": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															},
															"id": 2239,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"lValueRequested": false,
															"leftExpression": {
																"id": 2237,
																"name": "updatedIndex",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 2232,
																"src": "13492:12:12",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															},
															"nodeType": "BinaryOperation",
															"operator": "+",
															"rightExpression": {
																"id": 2238,
																"name": "quantity",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 2155,
																"src": "13507:8:12",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															},
															"src": "13492:23:12",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														},
														"nodeType": "VariableDeclarationStatement",
														"src": "13478:37:12"
													},
													{
														"condition": {
															"commonType": {
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															},
															"id": 2245,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"lValueRequested": false,
															"leftExpression": {
																"id": 2241,
																"name": "safe",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 2159,
																"src": "13534:4:12",
																"typeDescriptions": {
																	"typeIdentifier": "t_bool",
																	"typeString": "bool"
																}
															},
															"nodeType": "BinaryOperation",
															"operator": "&&",
															"rightExpression": {
																"arguments": [],
																"expression": {
																	"argumentTypes": [],
																	"expression": {
																		"id": 2242,
																		"name": "to",
																		"nodeType": "Identifier",
																		"overloadedDeclarations": [],
																		"referencedDeclaration": 2153,
																		"src": "13542:2:12",
																		"typeDescriptions": {
																			"typeIdentifier": "t_address",
																			"typeString": "address"
																		}
																	},
																	"id": 2243,
																	"isConstant": false,
																	"isLValue": false,
																	"isPure": false,
																	"lValueRequested": false,
																	"memberName": "isContract",
																	"nodeType": "MemberAccess",
																	"referencedDeclaration": 314,
																	"src": "13542:13:12",
																	"typeDescriptions": {
																		"typeIdentifier": "t_function_internal_view$_t_address_$returns$_t_bool_$bound_to$_t_address_$",
																		"typeString": "function (address) view returns (bool)"
																	}
																},
																"id": 2244,
																"isConstant": false,
																"isLValue": false,
																"isPure": false,
																"kind": "functionCall",
																"lValueRequested": false,
																"names": [],
																"nodeType": "FunctionCall",
																"src": "13542:15:12",
																"tryCall": false,
																"typeDescriptions": {
																	"typeIdentifier": "t_bool",
																	"typeString": "bool"
																}
															},
															"src": "13534:23:12",
															"typeDescriptions": {
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															}
														},
														"falseBody": {
															"id": 2299,
															"nodeType": "Block",
															"src": "14008:150:12",
															"statements": [
																{
																	"body": {
																		"id": 2294,
																		"nodeType": "Block",
																		"src": "14029:86:12",
																		"statements": [
																			{
																				"eventCall": {
																					"arguments": [
																						{
																							"arguments": [
																								{
																									"hexValue": "30",
																									"id": 2287,
																									"isConstant": false,
																									"isLValue": false,
																									"isPure": true,
																									"kind": "number",
																									"lValueRequested": false,
																									"nodeType": "Literal",
																									"src": "14073:1:12",
																									"typeDescriptions": {
																										"typeIdentifier": "t_rational_0_by_1",
																										"typeString": "int_const 0"
																									},
																									"value": "0"
																								}
																							],
																							"expression": {
																								"argumentTypes": [
																									{
																										"typeIdentifier": "t_rational_0_by_1",
																										"typeString": "int_const 0"
																									}
																								],
																								"id": 2286,
																								"isConstant": false,
																								"isLValue": false,
																								"isPure": true,
																								"lValueRequested": false,
																								"nodeType": "ElementaryTypeNameExpression",
																								"src": "14065:7:12",
																								"typeDescriptions": {
																									"typeIdentifier": "t_type$_t_address_$",
																									"typeString": "type(address)"
																								},
																								"typeName": {
																									"id": 2285,
																									"name": "address",
																									"nodeType": "ElementaryTypeName",
																									"src": "14065:7:12",
																									"typeDescriptions": {}
																								}
																							},
																							"id": 2288,
																							"isConstant": false,
																							"isLValue": false,
																							"isPure": true,
																							"kind": "typeConversion",
																							"lValueRequested": false,
																							"names": [],
																							"nodeType": "FunctionCall",
																							"src": "14065:10:12",
																							"tryCall": false,
																							"typeDescriptions": {
																								"typeIdentifier": "t_address",
																								"typeString": "address"
																							}
																						},
																						{
																							"id": 2289,
																							"name": "to",
																							"nodeType": "Identifier",
																							"overloadedDeclarations": [],
																							"referencedDeclaration": 2153,
																							"src": "14077:2:12",
																							"typeDescriptions": {
																								"typeIdentifier": "t_address",
																								"typeString": "address"
																							}
																						},
																						{
																							"id": 2291,
																							"isConstant": false,
																							"isLValue": false,
																							"isPure": false,
																							"lValueRequested": false,
																							"nodeType": "UnaryOperation",
																							"operator": "++",
																							"prefix": false,
																							"src": "14081:14:12",
																							"subExpression": {
																								"id": 2290,
																								"name": "updatedIndex",
																								"nodeType": "Identifier",
																								"overloadedDeclarations": [],
																								"referencedDeclaration": 2232,
																								"src": "14081:12:12",
																								"typeDescriptions": {
																									"typeIdentifier": "t_uint256",
																									"typeString": "uint256"
																								}
																							},
																							"typeDescriptions": {
																								"typeIdentifier": "t_uint256",
																								"typeString": "uint256"
																							}
																						}
																					],
																					"expression": {
																						"argumentTypes": [
																							{
																								"typeIdentifier": "t_address",
																								"typeString": "address"
																							},
																							{
																								"typeIdentifier": "t_address",
																								"typeString": "address"
																							},
																							{
																								"typeIdentifier": "t_uint256",
																								"typeString": "uint256"
																							}
																						],
																						"id": 2284,
																						"name": "Transfer",
																						"nodeType": "Identifier",
																						"overloadedDeclarations": [],
																						"referencedDeclaration": 119,
																						"src": "14056:8:12",
																						"typeDescriptions": {
																							"typeIdentifier": "t_function_event_nonpayable$_t_address_$_t_address_$_t_uint256_$returns$__$",
																							"typeString": "function (address,address,uint256)"
																						}
																					},
																					"id": 2292,
																					"isConstant": false,
																					"isLValue": false,
																					"isPure": false,
																					"kind": "functionCall",
																					"lValueRequested": false,
																					"names": [],
																					"nodeType": "FunctionCall",
																					"src": "14056:40:12",
																					"tryCall": false,
																					"typeDescriptions": {
																						"typeIdentifier": "t_tuple$__$",
																						"typeString": "tuple()"
																					}
																				},
																				"id": 2293,
																				"nodeType": "EmitStatement",
																				"src": "14051:45:12"
																			}
																		]
																	},
																	"condition": {
																		"commonType": {
																			"typeIdentifier": "t_uint256",
																			"typeString": "uint256"
																		},
																		"id": 2297,
																		"isConstant": false,
																		"isLValue": false,
																		"isPure": false,
																		"lValueRequested": false,
																		"leftExpression": {
																			"id": 2295,
																			"name": "updatedIndex",
																			"nodeType": "Identifier",
																			"overloadedDeclarations": [],
																			"referencedDeclaration": 2232,
																			"src": "14123:12:12",
																			"typeDescriptions": {
																				"typeIdentifier": "t_uint256",
																				"typeString": "uint256"
																			}
																		},
																		"nodeType": "BinaryOperation",
																		"operator": "!=",
																		"rightExpression": {
																			"id": 2296,
																			"name": "end",
																			"nodeType": "Identifier",
																			"overloadedDeclarations": [],
																			"referencedDeclaration": 2236,
																			"src": "14139:3:12",
																			"typeDescriptions": {
																				"typeIdentifier": "t_uint256",
																				"typeString": "uint256"
																			}
																		},
																		"src": "14123:19:12",
																		"typeDescriptions": {
																			"typeIdentifier": "t_bool",
																			"typeString": "bool"
																		}
																	},
																	"id": 2298,
																	"nodeType": "DoWhileStatement",
																	"src": "14026:118:12"
																}
															]
														},
														"id": 2300,
														"nodeType": "IfStatement",
														"src": "13530:628:12",
														"trueBody": {
															"id": 2283,
															"nodeType": "Block",
															"src": "13559:443:12",
															"statements": [
																{
																	"body": {
																		"id": 2271,
																		"nodeType": "Block",
																		"src": "13580:277:12",
																		"statements": [
																			{
																				"eventCall": {
																					"arguments": [
																						{
																							"arguments": [
																								{
																									"hexValue": "30",
																									"id": 2249,
																									"isConstant": false,
																									"isLValue": false,
																									"isPure": true,
																									"kind": "number",
																									"lValueRequested": false,
																									"nodeType": "Literal",
																									"src": "13624:1:12",
																									"typeDescriptions": {
																										"typeIdentifier": "t_rational_0_by_1",
																										"typeString": "int_const 0"
																									},
																									"value": "0"
																								}
																							],
																							"expression": {
																								"argumentTypes": [
																									{
																										"typeIdentifier": "t_rational_0_by_1",
																										"typeString": "int_const 0"
																									}
																								],
																								"id": 2248,
																								"isConstant": false,
																								"isLValue": false,
																								"isPure": true,
																								"lValueRequested": false,
																								"nodeType": "ElementaryTypeNameExpression",
																								"src": "13616:7:12",
																								"typeDescriptions": {
																									"typeIdentifier": "t_type$_t_address_$",
																									"typeString": "type(address)"
																								},
																								"typeName": {
																									"id": 2247,
																									"name": "address",
																									"nodeType": "ElementaryTypeName",
																									"src": "13616:7:12",
																									"typeDescriptions": {}
																								}
																							},
																							"id": 2250,
																							"isConstant": false,
																							"isLValue": false,
																							"isPure": true,
																							"kind": "typeConversion",
																							"lValueRequested": false,
																							"names": [],
																							"nodeType": "FunctionCall",
																							"src": "13616:10:12",
																							"tryCall": false,
																							"typeDescriptions": {
																								"typeIdentifier": "t_address",
																								"typeString": "address"
																							}
																						},
																						{
																							"id": 2251,
																							"name": "to",
																							"nodeType": "Identifier",
																							"overloadedDeclarations": [],
																							"referencedDeclaration": 2153,
																							"src": "13628:2:12",
																							"typeDescriptions": {
																								"typeIdentifier": "t_address",
																								"typeString": "address"
																							}
																						},
																						{
																							"id": 2252,
																							"name": "updatedIndex",
																							"nodeType": "Identifier",
																							"overloadedDeclarations": [],
																							"referencedDeclaration": 2232,
																							"src": "13632:12:12",
																							"typeDescriptions": {
																								"typeIdentifier": "t_uint256",
																								"typeString": "uint256"
																							}
																						}
																					],
																					"expression": {
																						"argumentTypes": [
																							{
																								"typeIdentifier": "t_address",
																								"typeString": "address"
																							},
																							{
																								"typeIdentifier": "t_address",
																								"typeString": "address"
																							},
																							{
																								"typeIdentifier": "t_uint256",
																								"typeString": "uint256"
																							}
																						],
																						"id": 2246,
																						"name": "Transfer",
																						"nodeType": "Identifier",
																						"overloadedDeclarations": [],
																						"referencedDeclaration": 119,
																						"src": "13607:8:12",
																						"typeDescriptions": {
																							"typeIdentifier": "t_function_event_nonpayable$_t_address_$_t_address_$_t_uint256_$returns$__$",
																							"typeString": "function (address,address,uint256)"
																						}
																					},
																					"id": 2253,
																					"isConstant": false,
																					"isLValue": false,
																					"isPure": false,
																					"kind": "functionCall",
																					"lValueRequested": false,
																					"names": [],
																					"nodeType": "FunctionCall",
																					"src": "13607:38:12",
																					"tryCall": false,
																					"typeDescriptions": {
																						"typeIdentifier": "t_tuple$__$",
																						"typeString": "tuple()"
																					}
																				},
																				"id": 2254,
																				"nodeType": "EmitStatement",
																				"src": "13602:43:12"
																			},
																			{
																				"condition": {
																					"id": 2265,
																					"isConstant": false,
																					"isLValue": false,
																					"isPure": false,
																					"lValueRequested": false,
																					"nodeType": "UnaryOperation",
																					"operator": "!",
																					"prefix": true,
																					"src": "13671:70:12",
																					"subExpression": {
																						"arguments": [
																							{
																								"arguments": [
																									{
																										"hexValue": "30",
																										"id": 2258,
																										"isConstant": false,
																										"isLValue": false,
																										"isPure": true,
																										"kind": "number",
																										"lValueRequested": false,
																										"nodeType": "Literal",
																										"src": "13711:1:12",
																										"typeDescriptions": {
																											"typeIdentifier": "t_rational_0_by_1",
																											"typeString": "int_const 0"
																										},
																										"value": "0"
																									}
																								],
																								"expression": {
																									"argumentTypes": [
																										{
																											"typeIdentifier": "t_rational_0_by_1",
																											"typeString": "int_const 0"
																										}
																									],
																									"id": 2257,
																									"isConstant": false,
																									"isLValue": false,
																									"isPure": true,
																									"lValueRequested": false,
																									"nodeType": "ElementaryTypeNameExpression",
																									"src": "13703:7:12",
																									"typeDescriptions": {
																										"typeIdentifier": "t_type$_t_address_$",
																										"typeString": "type(address)"
																									},
																									"typeName": {
																										"id": 2256,
																										"name": "address",
																										"nodeType": "ElementaryTypeName",
																										"src": "13703:7:12",
																										"typeDescriptions": {}
																									}
																								},
																								"id": 2259,
																								"isConstant": false,
																								"isLValue": false,
																								"isPure": true,
																								"kind": "typeConversion",
																								"lValueRequested": false,
																								"names": [],
																								"nodeType": "FunctionCall",
																								"src": "13703:10:12",
																								"tryCall": false,
																								"typeDescriptions": {
																									"typeIdentifier": "t_address",
																									"typeString": "address"
																								}
																							},
																							{
																								"id": 2260,
																								"name": "to",
																								"nodeType": "Identifier",
																								"overloadedDeclarations": [],
																								"referencedDeclaration": 2153,
																								"src": "13715:2:12",
																								"typeDescriptions": {
																									"typeIdentifier": "t_address",
																									"typeString": "address"
																								}
																							},
																							{
																								"id": 2262,
																								"isConstant": false,
																								"isLValue": false,
																								"isPure": false,
																								"lValueRequested": false,
																								"nodeType": "UnaryOperation",
																								"operator": "++",
																								"prefix": false,
																								"src": "13719:14:12",
																								"subExpression": {
																									"id": 2261,
																									"name": "updatedIndex",
																									"nodeType": "Identifier",
																									"overloadedDeclarations": [],
																									"referencedDeclaration": 2232,
																									"src": "13719:12:12",
																									"typeDescriptions": {
																										"typeIdentifier": "t_uint256",
																										"typeString": "uint256"
																									}
																								},
																								"typeDescriptions": {
																									"typeIdentifier": "t_uint256",
																									"typeString": "uint256"
																								}
																							},
																							{
																								"id": 2263,
																								"name": "_data",
																								"nodeType": "Identifier",
																								"overloadedDeclarations": [],
																								"referencedDeclaration": 2157,
																								"src": "13735:5:12",
																								"typeDescriptions": {
																									"typeIdentifier": "t_bytes_memory_ptr",
																									"typeString": "bytes memory"
																								}
																							}
																						],
																						"expression": {
																							"argumentTypes": [
																								{
																									"typeIdentifier": "t_address",
																									"typeString": "address"
																								},
																								{
																									"typeIdentifier": "t_address",
																									"typeString": "address"
																								},
																								{
																									"typeIdentifier": "t_uint256",
																									"typeString": "uint256"
																								},
																								{
																									"typeIdentifier": "t_bytes_memory_ptr",
																									"typeString": "bytes memory"
																								}
																							],
																							"id": 2255,
																							"name": "_checkContractOnERC721Received",
																							"nodeType": "Identifier",
																							"overloadedDeclarations": [],
																							"referencedDeclaration": 2702,
																							"src": "13672:30:12",
																							"typeDescriptions": {
																								"typeIdentifier": "t_function_internal_nonpayable$_t_address_$_t_address_$_t_uint256_$_t_bytes_memory_ptr_$returns$_t_bool_$",
																								"typeString": "function (address,address,uint256,bytes memory) returns (bool)"
																							}
																						},
																						"id": 2264,
																						"isConstant": false,
																						"isLValue": false,
																						"isPure": false,
																						"kind": "functionCall",
																						"lValueRequested": false,
																						"names": [],
																						"nodeType": "FunctionCall",
																						"src": "13672:69:12",
																						"tryCall": false,
																						"typeDescriptions": {
																							"typeIdentifier": "t_bool",
																							"typeString": "bool"
																						}
																					},
																					"typeDescriptions": {
																						"typeIdentifier": "t_bool",
																						"typeString": "bool"
																					}
																				},
																				"id": 2270,
																				"nodeType": "IfStatement",
																				"src": "13667:172:12",
																				"trueBody": {
																					"id": 2269,
																					"nodeType": "Block",
																					"src": "13743:96:12",
																					"statements": [
																						{
																							"errorCall": {
																								"arguments": [],
																								"expression": {
																									"argumentTypes": [],
																									"id": 2266,
																									"name": "TransferToNonERC721ReceiverImplementer",
																									"nodeType": "Identifier",
																									"overloadedDeclarations": [],
																									"referencedDeclaration": 1456,
																									"src": "13776:38:12",
																									"typeDescriptions": {
																										"typeIdentifier": "t_function_error_pure$__$returns$__$",
																										"typeString": "function () pure"
																									}
																								},
																								"id": 2267,
																								"isConstant": false,
																								"isLValue": false,
																								"isPure": false,
																								"kind": "functionCall",
																								"lValueRequested": false,
																								"names": [],
																								"nodeType": "FunctionCall",
																								"src": "13776:40:12",
																								"tryCall": false,
																								"typeDescriptions": {
																									"typeIdentifier": "t_tuple$__$",
																									"typeString": "tuple()"
																								}
																							},
																							"id": 2268,
																							"nodeType": "RevertStatement",
																							"src": "13769:47:12"
																						}
																					]
																				}
																			}
																		]
																	},
																	"condition": {
																		"commonType": {
																			"typeIdentifier": "t_uint256",
																			"typeString": "uint256"
																		},
																		"id": 2274,
																		"isConstant": false,
																		"isLValue": false,
																		"isPure": false,
																		"lValueRequested": false,
																		"leftExpression": {
																			"id": 2272,
																			"name": "updatedIndex",
																			"nodeType": "Identifier",
																			"overloadedDeclarations": [],
																			"referencedDeclaration": 2232,
																			"src": "13865:12:12",
																			"typeDescriptions": {
																				"typeIdentifier": "t_uint256",
																				"typeString": "uint256"
																			}
																		},
																		"nodeType": "BinaryOperation",
																		"operator": "!=",
																		"rightExpression": {
																			"id": 2273,
																			"name": "end",
																			"nodeType": "Identifier",
																			"overloadedDeclarations": [],
																			"referencedDeclaration": 2236,
																			"src": "13881:3:12",
																			"typeDescriptions": {
																				"typeIdentifier": "t_uint256",
																				"typeString": "uint256"
																			}
																		},
																		"src": "13865:19:12",
																		"typeDescriptions": {
																			"typeIdentifier": "t_bool",
																			"typeString": "bool"
																		}
																	},
																	"id": 2275,
																	"nodeType": "DoWhileStatement",
																	"src": "13577:309:12"
																},
																{
																	"condition": {
																		"commonType": {
																			"typeIdentifier": "t_uint256",
																			"typeString": "uint256"
																		},
																		"id": 2278,
																		"isConstant": false,
																		"isLValue": false,
																		"isPure": false,
																		"lValueRequested": false,
																		"leftExpression": {
																			"id": 2276,
																			"name": "_currentIndex",
																			"nodeType": "Identifier",
																			"overloadedDeclarations": [],
																			"referencedDeclaration": 1493,
																			"src": "13948:13:12",
																			"typeDescriptions": {
																				"typeIdentifier": "t_uint256",
																				"typeString": "uint256"
																			}
																		},
																		"nodeType": "BinaryOperation",
																		"operator": "!=",
																		"rightExpression": {
																			"id": 2277,
																			"name": "startTokenId",
																			"nodeType": "Identifier",
																			"overloadedDeclarations": [],
																			"referencedDeclaration": 2163,
																			"src": "13965:12:12",
																			"typeDescriptions": {
																				"typeIdentifier": "t_uint256",
																				"typeString": "uint256"
																			}
																		},
																		"src": "13948:29:12",
																		"typeDescriptions": {
																			"typeIdentifier": "t_bool",
																			"typeString": "bool"
																		}
																	},
																	"id": 2282,
																	"nodeType": "IfStatement",
																	"src": "13944:43:12",
																	"trueBody": {
																		"expression": {
																			"arguments": [],
																			"expression": {
																				"argumentTypes": [],
																				"id": 2279,
																				"name": "revert",
																				"nodeType": "Identifier",
																				"overloadedDeclarations": [
																					4294967277,
																					4294967277
																				],
																				"referencedDeclaration": 4294967277,
																				"src": "13979:6:12",
																				"typeDescriptions": {
																					"typeIdentifier": "t_function_revert_pure$__$returns$__$",
																					"typeString": "function () pure"
																				}
																			},
																			"id": 2280,
																			"isConstant": false,
																			"isLValue": false,
																			"isPure": false,
																			"kind": "functionCall",
																			"lValueRequested": false,
																			"names": [],
																			"nodeType": "FunctionCall",
																			"src": "13979:8:12",
																			"tryCall": false,
																			"typeDescriptions": {
																				"typeIdentifier": "t_tuple$__$",
																				"typeString": "tuple()"
																			}
																		},
																		"id": 2281,
																		"nodeType": "ExpressionStatement",
																		"src": "13979:8:12"
																	}
																}
															]
														}
													},
													{
														"expression": {
															"id": 2303,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"lValueRequested": false,
															"leftHandSide": {
																"id": 2301,
																"name": "_currentIndex",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 1493,
																"src": "14171:13:12",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															},
															"nodeType": "Assignment",
															"operator": "=",
															"rightHandSide": {
																"id": 2302,
																"name": "updatedIndex",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 2232,
																"src": "14187:12:12",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															},
															"src": "14171:28:12",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														},
														"id": 2304,
														"nodeType": "ExpressionStatement",
														"src": "14171:28:12"
													}
												]
											},
											{
												"expression": {
													"arguments": [
														{
															"arguments": [
																{
																	"hexValue": "30",
																	"id": 2309,
																	"isConstant": false,
																	"isLValue": false,
																	"isPure": true,
																	"kind": "number",
																	"lValueRequested": false,
																	"nodeType": "Literal",
																	"src": "14248:1:12",
																	"typeDescriptions": {
																		"typeIdentifier": "t_rational_0_by_1",
																		"typeString": "int_const 0"
																	},
																	"value": "0"
																}
															],
															"expression": {
																"argumentTypes": [
																	{
																		"typeIdentifier": "t_rational_0_by_1",
																		"typeString": "int_const 0"
																	}
																],
																"id": 2308,
																"isConstant": false,
																"isLValue": false,
																"isPure": true,
																"lValueRequested": false,
																"nodeType": "ElementaryTypeNameExpression",
																"src": "14240:7:12",
																"typeDescriptions": {
																	"typeIdentifier": "t_type$_t_address_$",
																	"typeString": "type(address)"
																},
																"typeName": {
																	"id": 2307,
																	"name": "address",
																	"nodeType": "ElementaryTypeName",
																	"src": "14240:7:12",
																	"typeDescriptions": {}
																}
															},
															"id": 2310,
															"isConstant": false,
															"isLValue": false,
															"isPure": true,
															"kind": "typeConversion",
															"lValueRequested": false,
															"names": [],
															"nodeType": "FunctionCall",
															"src": "14240:10:12",
															"tryCall": false,
															"typeDescriptions": {
																"typeIdentifier": "t_address",
																"typeString": "address"
															}
														},
														{
															"id": 2311,
															"name": "to",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 2153,
															"src": "14252:2:12",
															"typeDescriptions": {
																"typeIdentifier": "t_address",
																"typeString": "address"
															}
														},
														{
															"id": 2312,
															"name": "startTokenId",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 2163,
															"src": "14256:12:12",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														},
														{
															"id": 2313,
															"name": "quantity",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 2155,
															"src": "14270:8:12",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_address",
																"typeString": "address"
															},
															{
																"typeIdentifier": "t_address",
																"typeString": "address"
															},
															{
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															},
															{
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														],
														"id": 2306,
														"name": "_afterTokenTransfers",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 2728,
														"src": "14219:20:12",
														"typeDescriptions": {
															"typeIdentifier": "t_function_internal_nonpayable$_t_address_$_t_address_$_t_uint256_$_t_uint256_$returns$__$",
															"typeString": "function (address,address,uint256,uint256)"
														}
													},
													"id": 2314,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"names": [],
													"nodeType": "FunctionCall",
													"src": "14219:60:12",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_tuple$__$",
														"typeString": "tuple()"
													}
												},
												"id": 2315,
												"nodeType": "ExpressionStatement",
												"src": "14219:60:12"
											}
										]
									},
									"documentation": {
										"id": 2151,
										"nodeType": "StructuredDocumentation",
										"src": "12312:236:12",
										"text": " @dev Mints `quantity` tokens and transfers them to `to`.\n Requirements:\n - `to` cannot be the zero address.\n - `quantity` must be greater than 0.\n Emits a {Transfer} event."
									},
									"id": 2317,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "_mint",
									"nameLocation": "12562:5:12",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 2160,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 2153,
												"mutability": "mutable",
												"name": "to",
												"nameLocation": "12585:2:12",
												"nodeType": "VariableDeclaration",
												"scope": 2317,
												"src": "12577:10:12",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 2152,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "12577:7:12",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 2155,
												"mutability": "mutable",
												"name": "quantity",
												"nameLocation": "12605:8:12",
												"nodeType": "VariableDeclaration",
												"scope": 2317,
												"src": "12597:16:12",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 2154,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "12597:7:12",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 2157,
												"mutability": "mutable",
												"name": "_data",
												"nameLocation": "12636:5:12",
												"nodeType": "VariableDeclaration",
												"scope": 2317,
												"src": "12623:18:12",
												"stateVariable": false,
												"storageLocation": "memory",
												"typeDescriptions": {
													"typeIdentifier": "t_bytes_memory_ptr",
													"typeString": "bytes"
												},
												"typeName": {
													"id": 2156,
													"name": "bytes",
													"nodeType": "ElementaryTypeName",
													"src": "12623:5:12",
													"typeDescriptions": {
														"typeIdentifier": "t_bytes_storage_ptr",
														"typeString": "bytes"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 2159,
												"mutability": "mutable",
												"name": "safe",
												"nameLocation": "12656:4:12",
												"nodeType": "VariableDeclaration",
												"scope": 2317,
												"src": "12651:9:12",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_bool",
													"typeString": "bool"
												},
												"typeName": {
													"id": 2158,
													"name": "bool",
													"nodeType": "ElementaryTypeName",
													"src": "12651:4:12",
													"typeDescriptions": {
														"typeIdentifier": "t_bool",
														"typeString": "bool"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "12567:99:12"
									},
									"returnParameters": {
										"id": 2161,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "12676:0:12"
									},
									"scope": 2729,
									"src": "12553:1733:12",
									"stateMutability": "nonpayable",
									"virtual": false,
									"visibility": "internal"
								},
								{
									"body": {
										"id": 2482,
										"nodeType": "Block",
										"src": "14628:1967:12",
										"statements": [
											{
												"assignments": [
													2329
												],
												"declarations": [
													{
														"constant": false,
														"id": 2329,
														"mutability": "mutable",
														"name": "prevOwnership",
														"nameLocation": "14660:13:12",
														"nodeType": "VariableDeclaration",
														"scope": 2482,
														"src": "14638:35:12",
														"stateVariable": false,
														"storageLocation": "memory",
														"typeDescriptions": {
															"typeIdentifier": "t_struct$_TokenOwnership_$1482_memory_ptr",
															"typeString": "struct ERC721A.TokenOwnership"
														},
														"typeName": {
															"id": 2328,
															"nodeType": "UserDefinedTypeName",
															"pathNode": {
																"id": 2327,
																"name": "TokenOwnership",
																"nodeType": "IdentifierPath",
																"referencedDeclaration": 1482,
																"src": "14638:14:12"
															},
															"referencedDeclaration": 1482,
															"src": "14638:14:12",
															"typeDescriptions": {
																"typeIdentifier": "t_struct$_TokenOwnership_$1482_storage_ptr",
																"typeString": "struct ERC721A.TokenOwnership"
															}
														},
														"visibility": "internal"
													}
												],
												"id": 2333,
												"initialValue": {
													"arguments": [
														{
															"id": 2331,
															"name": "tokenId",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 2324,
															"src": "14688:7:12",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														],
														"id": 2330,
														"name": "ownershipOf",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 1814,
														"src": "14676:11:12",
														"typeDescriptions": {
															"typeIdentifier": "t_function_internal_view$_t_uint256_$returns$_t_struct$_TokenOwnership_$1482_memory_ptr_$",
															"typeString": "function (uint256) view returns (struct ERC721A.TokenOwnership memory)"
														}
													},
													"id": 2332,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"names": [],
													"nodeType": "FunctionCall",
													"src": "14676:20:12",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_struct$_TokenOwnership_$1482_memory_ptr",
														"typeString": "struct ERC721A.TokenOwnership memory"
													}
												},
												"nodeType": "VariableDeclarationStatement",
												"src": "14638:58:12"
											},
											{
												"assignments": [
													2335
												],
												"declarations": [
													{
														"constant": false,
														"id": 2335,
														"mutability": "mutable",
														"name": "isApprovedOrOwner",
														"nameLocation": "14712:17:12",
														"nodeType": "VariableDeclaration",
														"scope": 2482,
														"src": "14707:22:12",
														"stateVariable": false,
														"storageLocation": "default",
														"typeDescriptions": {
															"typeIdentifier": "t_bool",
															"typeString": "bool"
														},
														"typeName": {
															"id": 2334,
															"name": "bool",
															"nodeType": "ElementaryTypeName",
															"src": "14707:4:12",
															"typeDescriptions": {
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															}
														},
														"visibility": "internal"
													}
												],
												"id": 2356,
												"initialValue": {
													"components": [
														{
															"commonType": {
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															},
															"id": 2354,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"lValueRequested": false,
															"leftExpression": {
																"commonType": {
																	"typeIdentifier": "t_bool",
																	"typeString": "bool"
																},
																"id": 2347,
																"isConstant": false,
																"isLValue": false,
																"isPure": false,
																"lValueRequested": false,
																"leftExpression": {
																	"commonType": {
																		"typeIdentifier": "t_address",
																		"typeString": "address"
																	},
																	"id": 2340,
																	"isConstant": false,
																	"isLValue": false,
																	"isPure": false,
																	"lValueRequested": false,
																	"leftExpression": {
																		"arguments": [],
																		"expression": {
																			"argumentTypes": [],
																			"id": 2336,
																			"name": "_msgSender",
																			"nodeType": "Identifier",
																			"overloadedDeclarations": [],
																			"referencedDeclaration": 603,
																			"src": "14733:10:12",
																			"typeDescriptions": {
																				"typeIdentifier": "t_function_internal_view$__$returns$_t_address_$",
																				"typeString": "function () view returns (address)"
																			}
																		},
																		"id": 2337,
																		"isConstant": false,
																		"isLValue": false,
																		"isPure": false,
																		"kind": "functionCall",
																		"lValueRequested": false,
																		"names": [],
																		"nodeType": "FunctionCall",
																		"src": "14733:12:12",
																		"tryCall": false,
																		"typeDescriptions": {
																			"typeIdentifier": "t_address",
																			"typeString": "address"
																		}
																	},
																	"nodeType": "BinaryOperation",
																	"operator": "==",
																	"rightExpression": {
																		"expression": {
																			"id": 2338,
																			"name": "prevOwnership",
																			"nodeType": "Identifier",
																			"overloadedDeclarations": [],
																			"referencedDeclaration": 2329,
																			"src": "14749:13:12",
																			"typeDescriptions": {
																				"typeIdentifier": "t_struct$_TokenOwnership_$1482_memory_ptr",
																				"typeString": "struct ERC721A.TokenOwnership memory"
																			}
																		},
																		"id": 2339,
																		"isConstant": false,
																		"isLValue": true,
																		"isPure": false,
																		"lValueRequested": false,
																		"memberName": "addr",
																		"nodeType": "MemberAccess",
																		"referencedDeclaration": 1477,
																		"src": "14749:18:12",
																		"typeDescriptions": {
																			"typeIdentifier": "t_address",
																			"typeString": "address"
																		}
																	},
																	"src": "14733:34:12",
																	"typeDescriptions": {
																		"typeIdentifier": "t_bool",
																		"typeString": "bool"
																	}
																},
																"nodeType": "BinaryOperation",
																"operator": "||",
																"rightExpression": {
																	"arguments": [
																		{
																			"expression": {
																				"id": 2342,
																				"name": "prevOwnership",
																				"nodeType": "Identifier",
																				"overloadedDeclarations": [],
																				"referencedDeclaration": 2329,
																				"src": "14800:13:12",
																				"typeDescriptions": {
																					"typeIdentifier": "t_struct$_TokenOwnership_$1482_memory_ptr",
																					"typeString": "struct ERC721A.TokenOwnership memory"
																				}
																			},
																			"id": 2343,
																			"isConstant": false,
																			"isLValue": true,
																			"isPure": false,
																			"lValueRequested": false,
																			"memberName": "addr",
																			"nodeType": "MemberAccess",
																			"referencedDeclaration": 1477,
																			"src": "14800:18:12",
																			"typeDescriptions": {
																				"typeIdentifier": "t_address",
																				"typeString": "address"
																			}
																		},
																		{
																			"arguments": [],
																			"expression": {
																				"argumentTypes": [],
																				"id": 2344,
																				"name": "_msgSender",
																				"nodeType": "Identifier",
																				"overloadedDeclarations": [],
																				"referencedDeclaration": 603,
																				"src": "14820:10:12",
																				"typeDescriptions": {
																					"typeIdentifier": "t_function_internal_view$__$returns$_t_address_$",
																					"typeString": "function () view returns (address)"
																				}
																			},
																			"id": 2345,
																			"isConstant": false,
																			"isLValue": false,
																			"isPure": false,
																			"kind": "functionCall",
																			"lValueRequested": false,
																			"names": [],
																			"nodeType": "FunctionCall",
																			"src": "14820:12:12",
																			"tryCall": false,
																			"typeDescriptions": {
																				"typeIdentifier": "t_address",
																				"typeString": "address"
																			}
																		}
																	],
																	"expression": {
																		"argumentTypes": [
																			{
																				"typeIdentifier": "t_address",
																				"typeString": "address"
																			},
																			{
																				"typeIdentifier": "t_address",
																				"typeString": "address"
																			}
																		],
																		"id": 2341,
																		"name": "isApprovedForAll",
																		"nodeType": "Identifier",
																		"overloadedDeclarations": [],
																		"referencedDeclaration": 2021,
																		"src": "14783:16:12",
																		"typeDescriptions": {
																			"typeIdentifier": "t_function_internal_view$_t_address_$_t_address_$returns$_t_bool_$",
																			"typeString": "function (address,address) view returns (bool)"
																		}
																	},
																	"id": 2346,
																	"isConstant": false,
																	"isLValue": false,
																	"isPure": false,
																	"kind": "functionCall",
																	"lValueRequested": false,
																	"names": [],
																	"nodeType": "FunctionCall",
																	"src": "14783:50:12",
																	"tryCall": false,
																	"typeDescriptions": {
																		"typeIdentifier": "t_bool",
																		"typeString": "bool"
																	}
																},
																"src": "14733:100:12",
																"typeDescriptions": {
																	"typeIdentifier": "t_bool",
																	"typeString": "bool"
																}
															},
															"nodeType": "BinaryOperation",
															"operator": "||",
															"rightExpression": {
																"commonType": {
																	"typeIdentifier": "t_address",
																	"typeString": "address"
																},
																"id": 2353,
																"isConstant": false,
																"isLValue": false,
																"isPure": false,
																"lValueRequested": false,
																"leftExpression": {
																	"arguments": [
																		{
																			"id": 2349,
																			"name": "tokenId",
																			"nodeType": "Identifier",
																			"overloadedDeclarations": [],
																			"referencedDeclaration": 2324,
																			"src": "14861:7:12",
																			"typeDescriptions": {
																				"typeIdentifier": "t_uint256",
																				"typeString": "uint256"
																			}
																		}
																	],
																	"expression": {
																		"argumentTypes": [
																			{
																				"typeIdentifier": "t_uint256",
																				"typeString": "uint256"
																			}
																		],
																		"id": 2348,
																		"name": "getApproved",
																		"nodeType": "Identifier",
																		"overloadedDeclarations": [],
																		"referencedDeclaration": 1969,
																		"src": "14849:11:12",
																		"typeDescriptions": {
																			"typeIdentifier": "t_function_internal_view$_t_uint256_$returns$_t_address_$",
																			"typeString": "function (uint256) view returns (address)"
																		}
																	},
																	"id": 2350,
																	"isConstant": false,
																	"isLValue": false,
																	"isPure": false,
																	"kind": "functionCall",
																	"lValueRequested": false,
																	"names": [],
																	"nodeType": "FunctionCall",
																	"src": "14849:20:12",
																	"tryCall": false,
																	"typeDescriptions": {
																		"typeIdentifier": "t_address",
																		"typeString": "address"
																	}
																},
																"nodeType": "BinaryOperation",
																"operator": "==",
																"rightExpression": {
																	"arguments": [],
																	"expression": {
																		"argumentTypes": [],
																		"id": 2351,
																		"name": "_msgSender",
																		"nodeType": "Identifier",
																		"overloadedDeclarations": [],
																		"referencedDeclaration": 603,
																		"src": "14873:10:12",
																		"typeDescriptions": {
																			"typeIdentifier": "t_function_internal_view$__$returns$_t_address_$",
																			"typeString": "function () view returns (address)"
																		}
																	},
																	"id": 2352,
																	"isConstant": false,
																	"isLValue": false,
																	"isPure": false,
																	"kind": "functionCall",
																	"lValueRequested": false,
																	"names": [],
																	"nodeType": "FunctionCall",
																	"src": "14873:12:12",
																	"tryCall": false,
																	"typeDescriptions": {
																		"typeIdentifier": "t_address",
																		"typeString": "address"
																	}
																},
																"src": "14849:36:12",
																"typeDescriptions": {
																	"typeIdentifier": "t_bool",
																	"typeString": "bool"
																}
															},
															"src": "14733:152:12",
															"typeDescriptions": {
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															}
														}
													],
													"id": 2355,
													"isConstant": false,
													"isInlineArray": false,
													"isLValue": false,
													"isPure": false,
													"lValueRequested": false,
													"nodeType": "TupleExpression",
													"src": "14732:154:12",
													"typeDescriptions": {
														"typeIdentifier": "t_bool",
														"typeString": "bool"
													}
												},
												"nodeType": "VariableDeclarationStatement",
												"src": "14707:179:12"
											},
											{
												"condition": {
													"id": 2358,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"lValueRequested": false,
													"nodeType": "UnaryOperation",
													"operator": "!",
													"prefix": true,
													"src": "14901:18:12",
													"subExpression": {
														"id": 2357,
														"name": "isApprovedOrOwner",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 2335,
														"src": "14902:17:12",
														"typeDescriptions": {
															"typeIdentifier": "t_bool",
															"typeString": "bool"
														}
													},
													"typeDescriptions": {
														"typeIdentifier": "t_bool",
														"typeString": "bool"
													}
												},
												"id": 2362,
												"nodeType": "IfStatement",
												"src": "14897:66:12",
												"trueBody": {
													"errorCall": {
														"arguments": [],
														"expression": {
															"argumentTypes": [],
															"id": 2359,
															"name": "TransferCallerNotOwnerNorApproved",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 1452,
															"src": "14928:33:12",
															"typeDescriptions": {
																"typeIdentifier": "t_function_error_pure$__$returns$__$",
																"typeString": "function () pure"
															}
														},
														"id": 2360,
														"isConstant": false,
														"isLValue": false,
														"isPure": false,
														"kind": "functionCall",
														"lValueRequested": false,
														"names": [],
														"nodeType": "FunctionCall",
														"src": "14928:35:12",
														"tryCall": false,
														"typeDescriptions": {
															"typeIdentifier": "t_tuple$__$",
															"typeString": "tuple()"
														}
													},
													"id": 2361,
													"nodeType": "RevertStatement",
													"src": "14921:42:12"
												}
											},
											{
												"condition": {
													"commonType": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													},
													"id": 2366,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"lValueRequested": false,
													"leftExpression": {
														"expression": {
															"id": 2363,
															"name": "prevOwnership",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 2329,
															"src": "14977:13:12",
															"typeDescriptions": {
																"typeIdentifier": "t_struct$_TokenOwnership_$1482_memory_ptr",
																"typeString": "struct ERC721A.TokenOwnership memory"
															}
														},
														"id": 2364,
														"isConstant": false,
														"isLValue": true,
														"isPure": false,
														"lValueRequested": false,
														"memberName": "addr",
														"nodeType": "MemberAccess",
														"referencedDeclaration": 1477,
														"src": "14977:18:12",
														"typeDescriptions": {
															"typeIdentifier": "t_address",
															"typeString": "address"
														}
													},
													"nodeType": "BinaryOperation",
													"operator": "!=",
													"rightExpression": {
														"id": 2365,
														"name": "from",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 2320,
														"src": "14999:4:12",
														"typeDescriptions": {
															"typeIdentifier": "t_address",
															"typeString": "address"
														}
													},
													"src": "14977:26:12",
													"typeDescriptions": {
														"typeIdentifier": "t_bool",
														"typeString": "bool"
													}
												},
												"id": 2370,
												"nodeType": "IfStatement",
												"src": "14973:67:12",
												"trueBody": {
													"errorCall": {
														"arguments": [],
														"expression": {
															"argumentTypes": [],
															"id": 2367,
															"name": "TransferFromIncorrectOwner",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 1454,
															"src": "15012:26:12",
															"typeDescriptions": {
																"typeIdentifier": "t_function_error_pure$__$returns$__$",
																"typeString": "function () pure"
															}
														},
														"id": 2368,
														"isConstant": false,
														"isLValue": false,
														"isPure": false,
														"kind": "functionCall",
														"lValueRequested": false,
														"names": [],
														"nodeType": "FunctionCall",
														"src": "15012:28:12",
														"tryCall": false,
														"typeDescriptions": {
															"typeIdentifier": "t_tuple$__$",
															"typeString": "tuple()"
														}
													},
													"id": 2369,
													"nodeType": "RevertStatement",
													"src": "15005:35:12"
												}
											},
											{
												"condition": {
													"commonType": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													},
													"id": 2376,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"lValueRequested": false,
													"leftExpression": {
														"id": 2371,
														"name": "to",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 2322,
														"src": "15054:2:12",
														"typeDescriptions": {
															"typeIdentifier": "t_address",
															"typeString": "address"
														}
													},
													"nodeType": "BinaryOperation",
													"operator": "==",
													"rightExpression": {
														"arguments": [
															{
																"hexValue": "30",
																"id": 2374,
																"isConstant": false,
																"isLValue": false,
																"isPure": true,
																"kind": "number",
																"lValueRequested": false,
																"nodeType": "Literal",
																"src": "15068:1:12",
																"typeDescriptions": {
																	"typeIdentifier": "t_rational_0_by_1",
																	"typeString": "int_const 0"
																},
																"value": "0"
															}
														],
														"expression": {
															"argumentTypes": [
																{
																	"typeIdentifier": "t_rational_0_by_1",
																	"typeString": "int_const 0"
																}
															],
															"id": 2373,
															"isConstant": false,
															"isLValue": false,
															"isPure": true,
															"lValueRequested": false,
															"nodeType": "ElementaryTypeNameExpression",
															"src": "15060:7:12",
															"typeDescriptions": {
																"typeIdentifier": "t_type$_t_address_$",
																"typeString": "type(address)"
															},
															"typeName": {
																"id": 2372,
																"name": "address",
																"nodeType": "ElementaryTypeName",
																"src": "15060:7:12",
																"typeDescriptions": {}
															}
														},
														"id": 2375,
														"isConstant": false,
														"isLValue": false,
														"isPure": true,
														"kind": "typeConversion",
														"lValueRequested": false,
														"names": [],
														"nodeType": "FunctionCall",
														"src": "15060:10:12",
														"tryCall": false,
														"typeDescriptions": {
															"typeIdentifier": "t_address",
															"typeString": "address"
														}
													},
													"src": "15054:16:12",
													"typeDescriptions": {
														"typeIdentifier": "t_bool",
														"typeString": "bool"
													}
												},
												"id": 2380,
												"nodeType": "IfStatement",
												"src": "15050:52:12",
												"trueBody": {
													"errorCall": {
														"arguments": [],
														"expression": {
															"argumentTypes": [],
															"id": 2377,
															"name": "TransferToZeroAddress",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 1458,
															"src": "15079:21:12",
															"typeDescriptions": {
																"typeIdentifier": "t_function_error_pure$__$returns$__$",
																"typeString": "function () pure"
															}
														},
														"id": 2378,
														"isConstant": false,
														"isLValue": false,
														"isPure": false,
														"kind": "functionCall",
														"lValueRequested": false,
														"names": [],
														"nodeType": "FunctionCall",
														"src": "15079:23:12",
														"tryCall": false,
														"typeDescriptions": {
															"typeIdentifier": "t_tuple$__$",
															"typeString": "tuple()"
														}
													},
													"id": 2379,
													"nodeType": "RevertStatement",
													"src": "15072:30:12"
												}
											},
											{
												"expression": {
													"arguments": [
														{
															"id": 2382,
															"name": "from",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 2320,
															"src": "15135:4:12",
															"typeDescriptions": {
																"typeIdentifier": "t_address",
																"typeString": "address"
															}
														},
														{
															"id": 2383,
															"name": "to",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 2322,
															"src": "15141:2:12",
															"typeDescriptions": {
																"typeIdentifier": "t_address",
																"typeString": "address"
															}
														},
														{
															"id": 2384,
															"name": "tokenId",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 2324,
															"src": "15145:7:12",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														},
														{
															"hexValue": "31",
															"id": 2385,
															"isConstant": false,
															"isLValue": false,
															"isPure": true,
															"kind": "number",
															"lValueRequested": false,
															"nodeType": "Literal",
															"src": "15154:1:12",
															"typeDescriptions": {
																"typeIdentifier": "t_rational_1_by_1",
																"typeString": "int_const 1"
															},
															"value": "1"
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_address",
																"typeString": "address"
															},
															{
																"typeIdentifier": "t_address",
																"typeString": "address"
															},
															{
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															},
															{
																"typeIdentifier": "t_rational_1_by_1",
																"typeString": "int_const 1"
															}
														],
														"id": 2381,
														"name": "_beforeTokenTransfers",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 2715,
														"src": "15113:21:12",
														"typeDescriptions": {
															"typeIdentifier": "t_function_internal_nonpayable$_t_address_$_t_address_$_t_uint256_$_t_uint256_$returns$__$",
															"typeString": "function (address,address,uint256,uint256)"
														}
													},
													"id": 2386,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"names": [],
													"nodeType": "FunctionCall",
													"src": "15113:43:12",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_tuple$__$",
														"typeString": "tuple()"
													}
												},
												"id": 2387,
												"nodeType": "ExpressionStatement",
												"src": "15113:43:12"
											},
											{
												"expression": {
													"arguments": [
														{
															"arguments": [
																{
																	"hexValue": "30",
																	"id": 2391,
																	"isConstant": false,
																	"isLValue": false,
																	"isPure": true,
																	"kind": "number",
																	"lValueRequested": false,
																	"nodeType": "Literal",
																	"src": "15235:1:12",
																	"typeDescriptions": {
																		"typeIdentifier": "t_rational_0_by_1",
																		"typeString": "int_const 0"
																	},
																	"value": "0"
																}
															],
															"expression": {
																"argumentTypes": [
																	{
																		"typeIdentifier": "t_rational_0_by_1",
																		"typeString": "int_const 0"
																	}
																],
																"id": 2390,
																"isConstant": false,
																"isLValue": false,
																"isPure": true,
																"lValueRequested": false,
																"nodeType": "ElementaryTypeNameExpression",
																"src": "15227:7:12",
																"typeDescriptions": {
																	"typeIdentifier": "t_type$_t_address_$",
																	"typeString": "type(address)"
																},
																"typeName": {
																	"id": 2389,
																	"name": "address",
																	"nodeType": "ElementaryTypeName",
																	"src": "15227:7:12",
																	"typeDescriptions": {}
																}
															},
															"id": 2392,
															"isConstant": false,
															"isLValue": false,
															"isPure": true,
															"kind": "typeConversion",
															"lValueRequested": false,
															"names": [],
															"nodeType": "FunctionCall",
															"src": "15227:10:12",
															"tryCall": false,
															"typeDescriptions": {
																"typeIdentifier": "t_address",
																"typeString": "address"
															}
														},
														{
															"id": 2393,
															"name": "tokenId",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 2324,
															"src": "15239:7:12",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														},
														{
															"expression": {
																"id": 2394,
																"name": "prevOwnership",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 2329,
																"src": "15248:13:12",
																"typeDescriptions": {
																	"typeIdentifier": "t_struct$_TokenOwnership_$1482_memory_ptr",
																	"typeString": "struct ERC721A.TokenOwnership memory"
																}
															},
															"id": 2395,
															"isConstant": false,
															"isLValue": true,
															"isPure": false,
															"lValueRequested": false,
															"memberName": "addr",
															"nodeType": "MemberAccess",
															"referencedDeclaration": 1477,
															"src": "15248:18:12",
															"typeDescriptions": {
																"typeIdentifier": "t_address",
																"typeString": "address"
															}
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_address",
																"typeString": "address"
															},
															{
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															},
															{
																"typeIdentifier": "t_address",
																"typeString": "address"
															}
														],
														"id": 2388,
														"name": "_approve",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 2647,
														"src": "15218:8:12",
														"typeDescriptions": {
															"typeIdentifier": "t_function_internal_nonpayable$_t_address_$_t_uint256_$_t_address_$returns$__$",
															"typeString": "function (address,uint256,address)"
														}
													},
													"id": 2396,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"names": [],
													"nodeType": "FunctionCall",
													"src": "15218:49:12",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_tuple$__$",
														"typeString": "tuple()"
													}
												},
												"id": 2397,
												"nodeType": "ExpressionStatement",
												"src": "15218:49:12"
											},
											{
												"id": 2468,
												"nodeType": "UncheckedBlock",
												"src": "15533:961:12",
												"statements": [
													{
														"expression": {
															"id": 2403,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"lValueRequested": false,
															"leftHandSide": {
																"expression": {
																	"baseExpression": {
																		"id": 2398,
																		"name": "_addressData",
																		"nodeType": "Identifier",
																		"overloadedDeclarations": [],
																		"referencedDeclaration": 1509,
																		"src": "15557:12:12",
																		"typeDescriptions": {
																			"typeIdentifier": "t_mapping$_t_address_$_t_struct$_AddressData_$1491_storage_$",
																			"typeString": "mapping(address => struct ERC721A.AddressData storage ref)"
																		}
																	},
																	"id": 2400,
																	"indexExpression": {
																		"id": 2399,
																		"name": "from",
																		"nodeType": "Identifier",
																		"overloadedDeclarations": [],
																		"referencedDeclaration": 2320,
																		"src": "15570:4:12",
																		"typeDescriptions": {
																			"typeIdentifier": "t_address",
																			"typeString": "address"
																		}
																	},
																	"isConstant": false,
																	"isLValue": true,
																	"isPure": false,
																	"lValueRequested": false,
																	"nodeType": "IndexAccess",
																	"src": "15557:18:12",
																	"typeDescriptions": {
																		"typeIdentifier": "t_struct$_AddressData_$1491_storage",
																		"typeString": "struct ERC721A.AddressData storage ref"
																	}
																},
																"id": 2401,
																"isConstant": false,
																"isLValue": true,
																"isPure": false,
																"lValueRequested": true,
																"memberName": "balance",
																"nodeType": "MemberAccess",
																"referencedDeclaration": 1484,
																"src": "15557:26:12",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint64",
																	"typeString": "uint64"
																}
															},
															"nodeType": "Assignment",
															"operator": "-=",
															"rightHandSide": {
																"hexValue": "31",
																"id": 2402,
																"isConstant": false,
																"isLValue": false,
																"isPure": true,
																"kind": "number",
																"lValueRequested": false,
																"nodeType": "Literal",
																"src": "15587:1:12",
																"typeDescriptions": {
																	"typeIdentifier": "t_rational_1_by_1",
																	"typeString": "int_const 1"
																},
																"value": "1"
															},
															"src": "15557:31:12",
															"typeDescriptions": {
																"typeIdentifier": "t_uint64",
																"typeString": "uint64"
															}
														},
														"id": 2404,
														"nodeType": "ExpressionStatement",
														"src": "15557:31:12"
													},
													{
														"expression": {
															"id": 2410,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"lValueRequested": false,
															"leftHandSide": {
																"expression": {
																	"baseExpression": {
																		"id": 2405,
																		"name": "_addressData",
																		"nodeType": "Identifier",
																		"overloadedDeclarations": [],
																		"referencedDeclaration": 1509,
																		"src": "15602:12:12",
																		"typeDescriptions": {
																			"typeIdentifier": "t_mapping$_t_address_$_t_struct$_AddressData_$1491_storage_$",
																			"typeString": "mapping(address => struct ERC721A.AddressData storage ref)"
																		}
																	},
																	"id": 2407,
																	"indexExpression": {
																		"id": 2406,
																		"name": "to",
																		"nodeType": "Identifier",
																		"overloadedDeclarations": [],
																		"referencedDeclaration": 2322,
																		"src": "15615:2:12",
																		"typeDescriptions": {
																			"typeIdentifier": "t_address",
																			"typeString": "address"
																		}
																	},
																	"isConstant": false,
																	"isLValue": true,
																	"isPure": false,
																	"lValueRequested": false,
																	"nodeType": "IndexAccess",
																	"src": "15602:16:12",
																	"typeDescriptions": {
																		"typeIdentifier": "t_struct$_AddressData_$1491_storage",
																		"typeString": "struct ERC721A.AddressData storage ref"
																	}
																},
																"id": 2408,
																"isConstant": false,
																"isLValue": true,
																"isPure": false,
																"lValueRequested": true,
																"memberName": "balance",
																"nodeType": "MemberAccess",
																"referencedDeclaration": 1484,
																"src": "15602:24:12",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint64",
																	"typeString": "uint64"
																}
															},
															"nodeType": "Assignment",
															"operator": "+=",
															"rightHandSide": {
																"hexValue": "31",
																"id": 2409,
																"isConstant": false,
																"isLValue": false,
																"isPure": true,
																"kind": "number",
																"lValueRequested": false,
																"nodeType": "Literal",
																"src": "15630:1:12",
																"typeDescriptions": {
																	"typeIdentifier": "t_rational_1_by_1",
																	"typeString": "int_const 1"
																},
																"value": "1"
															},
															"src": "15602:29:12",
															"typeDescriptions": {
																"typeIdentifier": "t_uint64",
																"typeString": "uint64"
															}
														},
														"id": 2411,
														"nodeType": "ExpressionStatement",
														"src": "15602:29:12"
													},
													{
														"expression": {
															"id": 2417,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"lValueRequested": false,
															"leftHandSide": {
																"expression": {
																	"baseExpression": {
																		"id": 2412,
																		"name": "_ownerships",
																		"nodeType": "Identifier",
																		"overloadedDeclarations": [],
																		"referencedDeclaration": 1504,
																		"src": "15646:11:12",
																		"typeDescriptions": {
																			"typeIdentifier": "t_mapping$_t_uint256_$_t_struct$_TokenOwnership_$1482_storage_$",
																			"typeString": "mapping(uint256 => struct ERC721A.TokenOwnership storage ref)"
																		}
																	},
																	"id": 2414,
																	"indexExpression": {
																		"id": 2413,
																		"name": "tokenId",
																		"nodeType": "Identifier",
																		"overloadedDeclarations": [],
																		"referencedDeclaration": 2324,
																		"src": "15658:7:12",
																		"typeDescriptions": {
																			"typeIdentifier": "t_uint256",
																			"typeString": "uint256"
																		}
																	},
																	"isConstant": false,
																	"isLValue": true,
																	"isPure": false,
																	"lValueRequested": false,
																	"nodeType": "IndexAccess",
																	"src": "15646:20:12",
																	"typeDescriptions": {
																		"typeIdentifier": "t_struct$_TokenOwnership_$1482_storage",
																		"typeString": "struct ERC721A.TokenOwnership storage ref"
																	}
																},
																"id": 2415,
																"isConstant": false,
																"isLValue": true,
																"isPure": false,
																"lValueRequested": true,
																"memberName": "addr",
																"nodeType": "MemberAccess",
																"referencedDeclaration": 1477,
																"src": "15646:25:12",
																"typeDescriptions": {
																	"typeIdentifier": "t_address",
																	"typeString": "address"
																}
															},
															"nodeType": "Assignment",
															"operator": "=",
															"rightHandSide": {
																"id": 2416,
																"name": "to",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 2322,
																"src": "15674:2:12",
																"typeDescriptions": {
																	"typeIdentifier": "t_address",
																	"typeString": "address"
																}
															},
															"src": "15646:30:12",
															"typeDescriptions": {
																"typeIdentifier": "t_address",
																"typeString": "address"
															}
														},
														"id": 2418,
														"nodeType": "ExpressionStatement",
														"src": "15646:30:12"
													},
													{
														"expression": {
															"id": 2428,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"lValueRequested": false,
															"leftHandSide": {
																"expression": {
																	"baseExpression": {
																		"id": 2419,
																		"name": "_ownerships",
																		"nodeType": "Identifier",
																		"overloadedDeclarations": [],
																		"referencedDeclaration": 1504,
																		"src": "15690:11:12",
																		"typeDescriptions": {
																			"typeIdentifier": "t_mapping$_t_uint256_$_t_struct$_TokenOwnership_$1482_storage_$",
																			"typeString": "mapping(uint256 => struct ERC721A.TokenOwnership storage ref)"
																		}
																	},
																	"id": 2421,
																	"indexExpression": {
																		"id": 2420,
																		"name": "tokenId",
																		"nodeType": "Identifier",
																		"overloadedDeclarations": [],
																		"referencedDeclaration": 2324,
																		"src": "15702:7:12",
																		"typeDescriptions": {
																			"typeIdentifier": "t_uint256",
																			"typeString": "uint256"
																		}
																	},
																	"isConstant": false,
																	"isLValue": true,
																	"isPure": false,
																	"lValueRequested": false,
																	"nodeType": "IndexAccess",
																	"src": "15690:20:12",
																	"typeDescriptions": {
																		"typeIdentifier": "t_struct$_TokenOwnership_$1482_storage",
																		"typeString": "struct ERC721A.TokenOwnership storage ref"
																	}
																},
																"id": 2422,
																"isConstant": false,
																"isLValue": true,
																"isPure": false,
																"lValueRequested": true,
																"memberName": "startTimestamp",
																"nodeType": "MemberAccess",
																"referencedDeclaration": 1479,
																"src": "15690:35:12",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint64",
																	"typeString": "uint64"
																}
															},
															"nodeType": "Assignment",
															"operator": "=",
															"rightHandSide": {
																"arguments": [
																	{
																		"expression": {
																			"id": 2425,
																			"name": "block",
																			"nodeType": "Identifier",
																			"overloadedDeclarations": [],
																			"referencedDeclaration": 4294967292,
																			"src": "15735:5:12",
																			"typeDescriptions": {
																				"typeIdentifier": "t_magic_block",
																				"typeString": "block"
																			}
																		},
																		"id": 2426,
																		"isConstant": false,
																		"isLValue": false,
																		"isPure": false,
																		"lValueRequested": false,
																		"memberName": "timestamp",
																		"nodeType": "MemberAccess",
																		"src": "15735:15:12",
																		"typeDescriptions": {
																			"typeIdentifier": "t_uint256",
																			"typeString": "uint256"
																		}
																	}
																],
																"expression": {
																	"argumentTypes": [
																		{
																			"typeIdentifier": "t_uint256",
																			"typeString": "uint256"
																		}
																	],
																	"id": 2424,
																	"isConstant": false,
																	"isLValue": false,
																	"isPure": true,
																	"lValueRequested": false,
																	"nodeType": "ElementaryTypeNameExpression",
																	"src": "15728:6:12",
																	"typeDescriptions": {
																		"typeIdentifier": "t_type$_t_uint64_$",
																		"typeString": "type(uint64)"
																	},
																	"typeName": {
																		"id": 2423,
																		"name": "uint64",
																		"nodeType": "ElementaryTypeName",
																		"src": "15728:6:12",
																		"typeDescriptions": {}
																	}
																},
																"id": 2427,
																"isConstant": false,
																"isLValue": false,
																"isPure": false,
																"kind": "typeConversion",
																"lValueRequested": false,
																"names": [],
																"nodeType": "FunctionCall",
																"src": "15728:23:12",
																"tryCall": false,
																"typeDescriptions": {
																	"typeIdentifier": "t_uint64",
																	"typeString": "uint64"
																}
															},
															"src": "15690:61:12",
															"typeDescriptions": {
																"typeIdentifier": "t_uint64",
																"typeString": "uint64"
															}
														},
														"id": 2429,
														"nodeType": "ExpressionStatement",
														"src": "15690:61:12"
													},
													{
														"assignments": [
															2431
														],
														"declarations": [
															{
																"constant": false,
																"id": 2431,
																"mutability": "mutable",
																"name": "nextTokenId",
																"nameLocation": "16007:11:12",
																"nodeType": "VariableDeclaration",
																"scope": 2468,
																"src": "15999:19:12",
																"stateVariable": false,
																"storageLocation": "default",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																},
																"typeName": {
																	"id": 2430,
																	"name": "uint256",
																	"nodeType": "ElementaryTypeName",
																	"src": "15999:7:12",
																	"typeDescriptions": {
																		"typeIdentifier": "t_uint256",
																		"typeString": "uint256"
																	}
																},
																"visibility": "internal"
															}
														],
														"id": 2435,
														"initialValue": {
															"commonType": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															},
															"id": 2434,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"lValueRequested": false,
															"leftExpression": {
																"id": 2432,
																"name": "tokenId",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 2324,
																"src": "16021:7:12",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															},
															"nodeType": "BinaryOperation",
															"operator": "+",
															"rightExpression": {
																"hexValue": "31",
																"id": 2433,
																"isConstant": false,
																"isLValue": false,
																"isPure": true,
																"kind": "number",
																"lValueRequested": false,
																"nodeType": "Literal",
																"src": "16031:1:12",
																"typeDescriptions": {
																	"typeIdentifier": "t_rational_1_by_1",
																	"typeString": "int_const 1"
																},
																"value": "1"
															},
															"src": "16021:11:12",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														},
														"nodeType": "VariableDeclarationStatement",
														"src": "15999:33:12"
													},
													{
														"condition": {
															"commonType": {
																"typeIdentifier": "t_address",
																"typeString": "address"
															},
															"id": 2444,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"lValueRequested": false,
															"leftExpression": {
																"expression": {
																	"baseExpression": {
																		"id": 2436,
																		"name": "_ownerships",
																		"nodeType": "Identifier",
																		"overloadedDeclarations": [],
																		"referencedDeclaration": 1504,
																		"src": "16050:11:12",
																		"typeDescriptions": {
																			"typeIdentifier": "t_mapping$_t_uint256_$_t_struct$_TokenOwnership_$1482_storage_$",
																			"typeString": "mapping(uint256 => struct ERC721A.TokenOwnership storage ref)"
																		}
																	},
																	"id": 2438,
																	"indexExpression": {
																		"id": 2437,
																		"name": "nextTokenId",
																		"nodeType": "Identifier",
																		"overloadedDeclarations": [],
																		"referencedDeclaration": 2431,
																		"src": "16062:11:12",
																		"typeDescriptions": {
																			"typeIdentifier": "t_uint256",
																			"typeString": "uint256"
																		}
																	},
																	"isConstant": false,
																	"isLValue": true,
																	"isPure": false,
																	"lValueRequested": false,
																	"nodeType": "IndexAccess",
																	"src": "16050:24:12",
																	"typeDescriptions": {
																		"typeIdentifier": "t_struct$_TokenOwnership_$1482_storage",
																		"typeString": "struct ERC721A.TokenOwnership storage ref"
																	}
																},
																"id": 2439,
																"isConstant": false,
																"isLValue": true,
																"isPure": false,
																"lValueRequested": false,
																"memberName": "addr",
																"nodeType": "MemberAccess",
																"referencedDeclaration": 1477,
																"src": "16050:29:12",
																"typeDescriptions": {
																	"typeIdentifier": "t_address",
																	"typeString": "address"
																}
															},
															"nodeType": "BinaryOperation",
															"operator": "==",
															"rightExpression": {
																"arguments": [
																	{
																		"hexValue": "30",
																		"id": 2442,
																		"isConstant": false,
																		"isLValue": false,
																		"isPure": true,
																		"kind": "number",
																		"lValueRequested": false,
																		"nodeType": "Literal",
																		"src": "16091:1:12",
																		"typeDescriptions": {
																			"typeIdentifier": "t_rational_0_by_1",
																			"typeString": "int_const 0"
																		},
																		"value": "0"
																	}
																],
																"expression": {
																	"argumentTypes": [
																		{
																			"typeIdentifier": "t_rational_0_by_1",
																			"typeString": "int_const 0"
																		}
																	],
																	"id": 2441,
																	"isConstant": false,
																	"isLValue": false,
																	"isPure": true,
																	"lValueRequested": false,
																	"nodeType": "ElementaryTypeNameExpression",
																	"src": "16083:7:12",
																	"typeDescriptions": {
																		"typeIdentifier": "t_type$_t_address_$",
																		"typeString": "type(address)"
																	},
																	"typeName": {
																		"id": 2440,
																		"name": "address",
																		"nodeType": "ElementaryTypeName",
																		"src": "16083:7:12",
																		"typeDescriptions": {}
																	}
																},
																"id": 2443,
																"isConstant": false,
																"isLValue": false,
																"isPure": true,
																"kind": "typeConversion",
																"lValueRequested": false,
																"names": [],
																"nodeType": "FunctionCall",
																"src": "16083:10:12",
																"tryCall": false,
																"typeDescriptions": {
																	"typeIdentifier": "t_address",
																	"typeString": "address"
																}
															},
															"src": "16050:43:12",
															"typeDescriptions": {
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															}
														},
														"id": 2467,
														"nodeType": "IfStatement",
														"src": "16046:438:12",
														"trueBody": {
															"id": 2466,
															"nodeType": "Block",
															"src": "16095:389:12",
															"statements": [
																{
																	"condition": {
																		"commonType": {
																			"typeIdentifier": "t_uint256",
																			"typeString": "uint256"
																		},
																		"id": 2447,
																		"isConstant": false,
																		"isLValue": false,
																		"isPure": false,
																		"lValueRequested": false,
																		"leftExpression": {
																			"id": 2445,
																			"name": "nextTokenId",
																			"nodeType": "Identifier",
																			"overloadedDeclarations": [],
																			"referencedDeclaration": 2431,
																			"src": "16258:11:12",
																			"typeDescriptions": {
																				"typeIdentifier": "t_uint256",
																				"typeString": "uint256"
																			}
																		},
																		"nodeType": "BinaryOperation",
																		"operator": "<",
																		"rightExpression": {
																			"id": 2446,
																			"name": "_currentIndex",
																			"nodeType": "Identifier",
																			"overloadedDeclarations": [],
																			"referencedDeclaration": 1493,
																			"src": "16272:13:12",
																			"typeDescriptions": {
																				"typeIdentifier": "t_uint256",
																				"typeString": "uint256"
																			}
																		},
																		"src": "16258:27:12",
																		"typeDescriptions": {
																			"typeIdentifier": "t_bool",
																			"typeString": "bool"
																		}
																	},
																	"id": 2465,
																	"nodeType": "IfStatement",
																	"src": "16254:216:12",
																	"trueBody": {
																		"id": 2464,
																		"nodeType": "Block",
																		"src": "16287:183:12",
																		"statements": [
																			{
																				"expression": {
																					"id": 2454,
																					"isConstant": false,
																					"isLValue": false,
																					"isPure": false,
																					"lValueRequested": false,
																					"leftHandSide": {
																						"expression": {
																							"baseExpression": {
																								"id": 2448,
																								"name": "_ownerships",
																								"nodeType": "Identifier",
																								"overloadedDeclarations": [],
																								"referencedDeclaration": 1504,
																								"src": "16309:11:12",
																								"typeDescriptions": {
																									"typeIdentifier": "t_mapping$_t_uint256_$_t_struct$_TokenOwnership_$1482_storage_$",
																									"typeString": "mapping(uint256 => struct ERC721A.TokenOwnership storage ref)"
																								}
																							},
																							"id": 2450,
																							"indexExpression": {
																								"id": 2449,
																								"name": "nextTokenId",
																								"nodeType": "Identifier",
																								"overloadedDeclarations": [],
																								"referencedDeclaration": 2431,
																								"src": "16321:11:12",
																								"typeDescriptions": {
																									"typeIdentifier": "t_uint256",
																									"typeString": "uint256"
																								}
																							},
																							"isConstant": false,
																							"isLValue": true,
																							"isPure": false,
																							"lValueRequested": false,
																							"nodeType": "IndexAccess",
																							"src": "16309:24:12",
																							"typeDescriptions": {
																								"typeIdentifier": "t_struct$_TokenOwnership_$1482_storage",
																								"typeString": "struct ERC721A.TokenOwnership storage ref"
																							}
																						},
																						"id": 2451,
																						"isConstant": false,
																						"isLValue": true,
																						"isPure": false,
																						"lValueRequested": true,
																						"memberName": "addr",
																						"nodeType": "MemberAccess",
																						"referencedDeclaration": 1477,
																						"src": "16309:29:12",
																						"typeDescriptions": {
																							"typeIdentifier": "t_address",
																							"typeString": "address"
																						}
																					},
																					"nodeType": "Assignment",
																					"operator": "=",
																					"rightHandSide": {
																						"expression": {
																							"id": 2452,
																							"name": "prevOwnership",
																							"nodeType": "Identifier",
																							"overloadedDeclarations": [],
																							"referencedDeclaration": 2329,
																							"src": "16341:13:12",
																							"typeDescriptions": {
																								"typeIdentifier": "t_struct$_TokenOwnership_$1482_memory_ptr",
																								"typeString": "struct ERC721A.TokenOwnership memory"
																							}
																						},
																						"id": 2453,
																						"isConstant": false,
																						"isLValue": true,
																						"isPure": false,
																						"lValueRequested": false,
																						"memberName": "addr",
																						"nodeType": "MemberAccess",
																						"referencedDeclaration": 1477,
																						"src": "16341:18:12",
																						"typeDescriptions": {
																							"typeIdentifier": "t_address",
																							"typeString": "address"
																						}
																					},
																					"src": "16309:50:12",
																					"typeDescriptions": {
																						"typeIdentifier": "t_address",
																						"typeString": "address"
																					}
																				},
																				"id": 2455,
																				"nodeType": "ExpressionStatement",
																				"src": "16309:50:12"
																			},
																			{
																				"expression": {
																					"id": 2462,
																					"isConstant": false,
																					"isLValue": false,
																					"isPure": false,
																					"lValueRequested": false,
																					"leftHandSide": {
																						"expression": {
																							"baseExpression": {
																								"id": 2456,
																								"name": "_ownerships",
																								"nodeType": "Identifier",
																								"overloadedDeclarations": [],
																								"referencedDeclaration": 1504,
																								"src": "16381:11:12",
																								"typeDescriptions": {
																									"typeIdentifier": "t_mapping$_t_uint256_$_t_struct$_TokenOwnership_$1482_storage_$",
																									"typeString": "mapping(uint256 => struct ERC721A.TokenOwnership storage ref)"
																								}
																							},
																							"id": 2458,
																							"indexExpression": {
																								"id": 2457,
																								"name": "nextTokenId",
																								"nodeType": "Identifier",
																								"overloadedDeclarations": [],
																								"referencedDeclaration": 2431,
																								"src": "16393:11:12",
																								"typeDescriptions": {
																									"typeIdentifier": "t_uint256",
																									"typeString": "uint256"
																								}
																							},
																							"isConstant": false,
																							"isLValue": true,
																							"isPure": false,
																							"lValueRequested": false,
																							"nodeType": "IndexAccess",
																							"src": "16381:24:12",
																							"typeDescriptions": {
																								"typeIdentifier": "t_struct$_TokenOwnership_$1482_storage",
																								"typeString": "struct ERC721A.TokenOwnership storage ref"
																							}
																						},
																						"id": 2459,
																						"isConstant": false,
																						"isLValue": true,
																						"isPure": false,
																						"lValueRequested": true,
																						"memberName": "startTimestamp",
																						"nodeType": "MemberAccess",
																						"referencedDeclaration": 1479,
																						"src": "16381:39:12",
																						"typeDescriptions": {
																							"typeIdentifier": "t_uint64",
																							"typeString": "uint64"
																						}
																					},
																					"nodeType": "Assignment",
																					"operator": "=",
																					"rightHandSide": {
																						"expression": {
																							"id": 2460,
																							"name": "prevOwnership",
																							"nodeType": "Identifier",
																							"overloadedDeclarations": [],
																							"referencedDeclaration": 2329,
																							"src": "16423:13:12",
																							"typeDescriptions": {
																								"typeIdentifier": "t_struct$_TokenOwnership_$1482_memory_ptr",
																								"typeString": "struct ERC721A.TokenOwnership memory"
																							}
																						},
																						"id": 2461,
																						"isConstant": false,
																						"isLValue": true,
																						"isPure": false,
																						"lValueRequested": false,
																						"memberName": "startTimestamp",
																						"nodeType": "MemberAccess",
																						"referencedDeclaration": 1479,
																						"src": "16423:28:12",
																						"typeDescriptions": {
																							"typeIdentifier": "t_uint64",
																							"typeString": "uint64"
																						}
																					},
																					"src": "16381:70:12",
																					"typeDescriptions": {
																						"typeIdentifier": "t_uint64",
																						"typeString": "uint64"
																					}
																				},
																				"id": 2463,
																				"nodeType": "ExpressionStatement",
																				"src": "16381:70:12"
																			}
																		]
																	}
																}
															]
														}
													}
												]
											},
											{
												"eventCall": {
													"arguments": [
														{
															"id": 2470,
															"name": "from",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 2320,
															"src": "16518:4:12",
															"typeDescriptions": {
																"typeIdentifier": "t_address",
																"typeString": "address"
															}
														},
														{
															"id": 2471,
															"name": "to",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 2322,
															"src": "16524:2:12",
															"typeDescriptions": {
																"typeIdentifier": "t_address",
																"typeString": "address"
															}
														},
														{
															"id": 2472,
															"name": "tokenId",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 2324,
															"src": "16528:7:12",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_address",
																"typeString": "address"
															},
															{
																"typeIdentifier": "t_address",
																"typeString": "address"
															},
															{
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														],
														"id": 2469,
														"name": "Transfer",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 119,
														"src": "16509:8:12",
														"typeDescriptions": {
															"typeIdentifier": "t_function_event_nonpayable$_t_address_$_t_address_$_t_uint256_$returns$__$",
															"typeString": "function (address,address,uint256)"
														}
													},
													"id": 2473,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"names": [],
													"nodeType": "FunctionCall",
													"src": "16509:27:12",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_tuple$__$",
														"typeString": "tuple()"
													}
												},
												"id": 2474,
												"nodeType": "EmitStatement",
												"src": "16504:32:12"
											},
											{
												"expression": {
													"arguments": [
														{
															"id": 2476,
															"name": "from",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 2320,
															"src": "16567:4:12",
															"typeDescriptions": {
																"typeIdentifier": "t_address",
																"typeString": "address"
															}
														},
														{
															"id": 2477,
															"name": "to",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 2322,
															"src": "16573:2:12",
															"typeDescriptions": {
																"typeIdentifier": "t_address",
																"typeString": "address"
															}
														},
														{
															"id": 2478,
															"name": "tokenId",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 2324,
															"src": "16577:7:12",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														},
														{
															"hexValue": "31",
															"id": 2479,
															"isConstant": false,
															"isLValue": false,
															"isPure": true,
															"kind": "number",
															"lValueRequested": false,
															"nodeType": "Literal",
															"src": "16586:1:12",
															"typeDescriptions": {
																"typeIdentifier": "t_rational_1_by_1",
																"typeString": "int_const 1"
															},
															"value": "1"
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_address",
																"typeString": "address"
															},
															{
																"typeIdentifier": "t_address",
																"typeString": "address"
															},
															{
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															},
															{
																"typeIdentifier": "t_rational_1_by_1",
																"typeString": "int_const 1"
															}
														],
														"id": 2475,
														"name": "_afterTokenTransfers",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 2728,
														"src": "16546:20:12",
														"typeDescriptions": {
															"typeIdentifier": "t_function_internal_nonpayable$_t_address_$_t_address_$_t_uint256_$_t_uint256_$returns$__$",
															"typeString": "function (address,address,uint256,uint256)"
														}
													},
													"id": 2480,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"names": [],
													"nodeType": "FunctionCall",
													"src": "16546:42:12",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_tuple$__$",
														"typeString": "tuple()"
													}
												},
												"id": 2481,
												"nodeType": "ExpressionStatement",
												"src": "16546:42:12"
											}
										]
									},
									"documentation": {
										"id": 2318,
										"nodeType": "StructuredDocumentation",
										"src": "14292:231:12",
										"text": " @dev Transfers `tokenId` from `from` to `to`.\n Requirements:\n - `to` cannot be the zero address.\n - `tokenId` token must be owned by `from`.\n Emits a {Transfer} event."
									},
									"id": 2483,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "_transfer",
									"nameLocation": "14537:9:12",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 2325,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 2320,
												"mutability": "mutable",
												"name": "from",
												"nameLocation": "14564:4:12",
												"nodeType": "VariableDeclaration",
												"scope": 2483,
												"src": "14556:12:12",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 2319,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "14556:7:12",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 2322,
												"mutability": "mutable",
												"name": "to",
												"nameLocation": "14586:2:12",
												"nodeType": "VariableDeclaration",
												"scope": 2483,
												"src": "14578:10:12",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 2321,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "14578:7:12",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 2324,
												"mutability": "mutable",
												"name": "tokenId",
												"nameLocation": "14606:7:12",
												"nodeType": "VariableDeclaration",
												"scope": 2483,
												"src": "14598:15:12",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 2323,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "14598:7:12",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "14546:73:12"
									},
									"returnParameters": {
										"id": 2326,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "14628:0:12"
									},
									"scope": 2729,
									"src": "14528:2067:12",
									"stateMutability": "nonpayable",
									"virtual": false,
									"visibility": "private"
								},
								{
									"body": {
										"id": 2623,
										"nodeType": "Block",
										"src": "16861:1950:12",
										"statements": [
											{
												"assignments": [
													2491
												],
												"declarations": [
													{
														"constant": false,
														"id": 2491,
														"mutability": "mutable",
														"name": "prevOwnership",
														"nameLocation": "16893:13:12",
														"nodeType": "VariableDeclaration",
														"scope": 2623,
														"src": "16871:35:12",
														"stateVariable": false,
														"storageLocation": "memory",
														"typeDescriptions": {
															"typeIdentifier": "t_struct$_TokenOwnership_$1482_memory_ptr",
															"typeString": "struct ERC721A.TokenOwnership"
														},
														"typeName": {
															"id": 2490,
															"nodeType": "UserDefinedTypeName",
															"pathNode": {
																"id": 2489,
																"name": "TokenOwnership",
																"nodeType": "IdentifierPath",
																"referencedDeclaration": 1482,
																"src": "16871:14:12"
															},
															"referencedDeclaration": 1482,
															"src": "16871:14:12",
															"typeDescriptions": {
																"typeIdentifier": "t_struct$_TokenOwnership_$1482_storage_ptr",
																"typeString": "struct ERC721A.TokenOwnership"
															}
														},
														"visibility": "internal"
													}
												],
												"id": 2495,
												"initialValue": {
													"arguments": [
														{
															"id": 2493,
															"name": "tokenId",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 2486,
															"src": "16921:7:12",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														],
														"id": 2492,
														"name": "ownershipOf",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 1814,
														"src": "16909:11:12",
														"typeDescriptions": {
															"typeIdentifier": "t_function_internal_view$_t_uint256_$returns$_t_struct$_TokenOwnership_$1482_memory_ptr_$",
															"typeString": "function (uint256) view returns (struct ERC721A.TokenOwnership memory)"
														}
													},
													"id": 2494,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"names": [],
													"nodeType": "FunctionCall",
													"src": "16909:20:12",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_struct$_TokenOwnership_$1482_memory_ptr",
														"typeString": "struct ERC721A.TokenOwnership memory"
													}
												},
												"nodeType": "VariableDeclarationStatement",
												"src": "16871:58:12"
											},
											{
												"expression": {
													"arguments": [
														{
															"expression": {
																"id": 2497,
																"name": "prevOwnership",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 2491,
																"src": "16962:13:12",
																"typeDescriptions": {
																	"typeIdentifier": "t_struct$_TokenOwnership_$1482_memory_ptr",
																	"typeString": "struct ERC721A.TokenOwnership memory"
																}
															},
															"id": 2498,
															"isConstant": false,
															"isLValue": true,
															"isPure": false,
															"lValueRequested": false,
															"memberName": "addr",
															"nodeType": "MemberAccess",
															"referencedDeclaration": 1477,
															"src": "16962:18:12",
															"typeDescriptions": {
																"typeIdentifier": "t_address",
																"typeString": "address"
															}
														},
														{
															"arguments": [
																{
																	"hexValue": "30",
																	"id": 2501,
																	"isConstant": false,
																	"isLValue": false,
																	"isPure": true,
																	"kind": "number",
																	"lValueRequested": false,
																	"nodeType": "Literal",
																	"src": "16990:1:12",
																	"typeDescriptions": {
																		"typeIdentifier": "t_rational_0_by_1",
																		"typeString": "int_const 0"
																	},
																	"value": "0"
																}
															],
															"expression": {
																"argumentTypes": [
																	{
																		"typeIdentifier": "t_rational_0_by_1",
																		"typeString": "int_const 0"
																	}
																],
																"id": 2500,
																"isConstant": false,
																"isLValue": false,
																"isPure": true,
																"lValueRequested": false,
																"nodeType": "ElementaryTypeNameExpression",
																"src": "16982:7:12",
																"typeDescriptions": {
																	"typeIdentifier": "t_type$_t_address_$",
																	"typeString": "type(address)"
																},
																"typeName": {
																	"id": 2499,
																	"name": "address",
																	"nodeType": "ElementaryTypeName",
																	"src": "16982:7:12",
																	"typeDescriptions": {}
																}
															},
															"id": 2502,
															"isConstant": false,
															"isLValue": false,
															"isPure": true,
															"kind": "typeConversion",
															"lValueRequested": false,
															"names": [],
															"nodeType": "FunctionCall",
															"src": "16982:10:12",
															"tryCall": false,
															"typeDescriptions": {
																"typeIdentifier": "t_address",
																"typeString": "address"
															}
														},
														{
															"id": 2503,
															"name": "tokenId",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 2486,
															"src": "16994:7:12",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														},
														{
															"hexValue": "31",
															"id": 2504,
															"isConstant": false,
															"isLValue": false,
															"isPure": true,
															"kind": "number",
															"lValueRequested": false,
															"nodeType": "Literal",
															"src": "17003:1:12",
															"typeDescriptions": {
																"typeIdentifier": "t_rational_1_by_1",
																"typeString": "int_const 1"
															},
															"value": "1"
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_address",
																"typeString": "address"
															},
															{
																"typeIdentifier": "t_address",
																"typeString": "address"
															},
															{
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															},
															{
																"typeIdentifier": "t_rational_1_by_1",
																"typeString": "int_const 1"
															}
														],
														"id": 2496,
														"name": "_beforeTokenTransfers",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 2715,
														"src": "16940:21:12",
														"typeDescriptions": {
															"typeIdentifier": "t_function_internal_nonpayable$_t_address_$_t_address_$_t_uint256_$_t_uint256_$returns$__$",
															"typeString": "function (address,address,uint256,uint256)"
														}
													},
													"id": 2505,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"names": [],
													"nodeType": "FunctionCall",
													"src": "16940:65:12",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_tuple$__$",
														"typeString": "tuple()"
													}
												},
												"id": 2506,
												"nodeType": "ExpressionStatement",
												"src": "16940:65:12"
											},
											{
												"expression": {
													"arguments": [
														{
															"arguments": [
																{
																	"hexValue": "30",
																	"id": 2510,
																	"isConstant": false,
																	"isLValue": false,
																	"isPure": true,
																	"kind": "number",
																	"lValueRequested": false,
																	"nodeType": "Literal",
																	"src": "17084:1:12",
																	"typeDescriptions": {
																		"typeIdentifier": "t_rational_0_by_1",
																		"typeString": "int_const 0"
																	},
																	"value": "0"
																}
															],
															"expression": {
																"argumentTypes": [
																	{
																		"typeIdentifier": "t_rational_0_by_1",
																		"typeString": "int_const 0"
																	}
																],
																"id": 2509,
																"isConstant": false,
																"isLValue": false,
																"isPure": true,
																"lValueRequested": false,
																"nodeType": "ElementaryTypeNameExpression",
																"src": "17076:7:12",
																"typeDescriptions": {
																	"typeIdentifier": "t_type$_t_address_$",
																	"typeString": "type(address)"
																},
																"typeName": {
																	"id": 2508,
																	"name": "address",
																	"nodeType": "ElementaryTypeName",
																	"src": "17076:7:12",
																	"typeDescriptions": {}
																}
															},
															"id": 2511,
															"isConstant": false,
															"isLValue": false,
															"isPure": true,
															"kind": "typeConversion",
															"lValueRequested": false,
															"names": [],
															"nodeType": "FunctionCall",
															"src": "17076:10:12",
															"tryCall": false,
															"typeDescriptions": {
																"typeIdentifier": "t_address",
																"typeString": "address"
															}
														},
														{
															"id": 2512,
															"name": "tokenId",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 2486,
															"src": "17088:7:12",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														},
														{
															"expression": {
																"id": 2513,
																"name": "prevOwnership",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 2491,
																"src": "17097:13:12",
																"typeDescriptions": {
																	"typeIdentifier": "t_struct$_TokenOwnership_$1482_memory_ptr",
																	"typeString": "struct ERC721A.TokenOwnership memory"
																}
															},
															"id": 2514,
															"isConstant": false,
															"isLValue": true,
															"isPure": false,
															"lValueRequested": false,
															"memberName": "addr",
															"nodeType": "MemberAccess",
															"referencedDeclaration": 1477,
															"src": "17097:18:12",
															"typeDescriptions": {
																"typeIdentifier": "t_address",
																"typeString": "address"
															}
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_address",
																"typeString": "address"
															},
															{
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															},
															{
																"typeIdentifier": "t_address",
																"typeString": "address"
															}
														],
														"id": 2507,
														"name": "_approve",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 2647,
														"src": "17067:8:12",
														"typeDescriptions": {
															"typeIdentifier": "t_function_internal_nonpayable$_t_address_$_t_uint256_$_t_address_$returns$__$",
															"typeString": "function (address,uint256,address)"
														}
													},
													"id": 2515,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"names": [],
													"nodeType": "FunctionCall",
													"src": "17067:49:12",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_tuple$__$",
														"typeString": "tuple()"
													}
												},
												"id": 2516,
												"nodeType": "ExpressionStatement",
												"src": "17067:49:12"
											},
											{
												"id": 2597,
												"nodeType": "UncheckedBlock",
												"src": "17382:1137:12",
												"statements": [
													{
														"expression": {
															"id": 2523,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"lValueRequested": false,
															"leftHandSide": {
																"expression": {
																	"baseExpression": {
																		"id": 2517,
																		"name": "_addressData",
																		"nodeType": "Identifier",
																		"overloadedDeclarations": [],
																		"referencedDeclaration": 1509,
																		"src": "17406:12:12",
																		"typeDescriptions": {
																			"typeIdentifier": "t_mapping$_t_address_$_t_struct$_AddressData_$1491_storage_$",
																			"typeString": "mapping(address => struct ERC721A.AddressData storage ref)"
																		}
																	},
																	"id": 2520,
																	"indexExpression": {
																		"expression": {
																			"id": 2518,
																			"name": "prevOwnership",
																			"nodeType": "Identifier",
																			"overloadedDeclarations": [],
																			"referencedDeclaration": 2491,
																			"src": "17419:13:12",
																			"typeDescriptions": {
																				"typeIdentifier": "t_struct$_TokenOwnership_$1482_memory_ptr",
																				"typeString": "struct ERC721A.TokenOwnership memory"
																			}
																		},
																		"id": 2519,
																		"isConstant": false,
																		"isLValue": true,
																		"isPure": false,
																		"lValueRequested": false,
																		"memberName": "addr",
																		"nodeType": "MemberAccess",
																		"referencedDeclaration": 1477,
																		"src": "17419:18:12",
																		"typeDescriptions": {
																			"typeIdentifier": "t_address",
																			"typeString": "address"
																		}
																	},
																	"isConstant": false,
																	"isLValue": true,
																	"isPure": false,
																	"lValueRequested": false,
																	"nodeType": "IndexAccess",
																	"src": "17406:32:12",
																	"typeDescriptions": {
																		"typeIdentifier": "t_struct$_AddressData_$1491_storage",
																		"typeString": "struct ERC721A.AddressData storage ref"
																	}
																},
																"id": 2521,
																"isConstant": false,
																"isLValue": true,
																"isPure": false,
																"lValueRequested": true,
																"memberName": "balance",
																"nodeType": "MemberAccess",
																"referencedDeclaration": 1484,
																"src": "17406:40:12",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint64",
																	"typeString": "uint64"
																}
															},
															"nodeType": "Assignment",
															"operator": "-=",
															"rightHandSide": {
																"hexValue": "31",
																"id": 2522,
																"isConstant": false,
																"isLValue": false,
																"isPure": true,
																"kind": "number",
																"lValueRequested": false,
																"nodeType": "Literal",
																"src": "17450:1:12",
																"typeDescriptions": {
																	"typeIdentifier": "t_rational_1_by_1",
																	"typeString": "int_const 1"
																},
																"value": "1"
															},
															"src": "17406:45:12",
															"typeDescriptions": {
																"typeIdentifier": "t_uint64",
																"typeString": "uint64"
															}
														},
														"id": 2524,
														"nodeType": "ExpressionStatement",
														"src": "17406:45:12"
													},
													{
														"expression": {
															"id": 2531,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"lValueRequested": false,
															"leftHandSide": {
																"expression": {
																	"baseExpression": {
																		"id": 2525,
																		"name": "_addressData",
																		"nodeType": "Identifier",
																		"overloadedDeclarations": [],
																		"referencedDeclaration": 1509,
																		"src": "17465:12:12",
																		"typeDescriptions": {
																			"typeIdentifier": "t_mapping$_t_address_$_t_struct$_AddressData_$1491_storage_$",
																			"typeString": "mapping(address => struct ERC721A.AddressData storage ref)"
																		}
																	},
																	"id": 2528,
																	"indexExpression": {
																		"expression": {
																			"id": 2526,
																			"name": "prevOwnership",
																			"nodeType": "Identifier",
																			"overloadedDeclarations": [],
																			"referencedDeclaration": 2491,
																			"src": "17478:13:12",
																			"typeDescriptions": {
																				"typeIdentifier": "t_struct$_TokenOwnership_$1482_memory_ptr",
																				"typeString": "struct ERC721A.TokenOwnership memory"
																			}
																		},
																		"id": 2527,
																		"isConstant": false,
																		"isLValue": true,
																		"isPure": false,
																		"lValueRequested": false,
																		"memberName": "addr",
																		"nodeType": "MemberAccess",
																		"referencedDeclaration": 1477,
																		"src": "17478:18:12",
																		"typeDescriptions": {
																			"typeIdentifier": "t_address",
																			"typeString": "address"
																		}
																	},
																	"isConstant": false,
																	"isLValue": true,
																	"isPure": false,
																	"lValueRequested": false,
																	"nodeType": "IndexAccess",
																	"src": "17465:32:12",
																	"typeDescriptions": {
																		"typeIdentifier": "t_struct$_AddressData_$1491_storage",
																		"typeString": "struct ERC721A.AddressData storage ref"
																	}
																},
																"id": 2529,
																"isConstant": false,
																"isLValue": true,
																"isPure": false,
																"lValueRequested": true,
																"memberName": "numberBurned",
																"nodeType": "MemberAccess",
																"referencedDeclaration": 1488,
																"src": "17465:45:12",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint64",
																	"typeString": "uint64"
																}
															},
															"nodeType": "Assignment",
															"operator": "+=",
															"rightHandSide": {
																"hexValue": "31",
																"id": 2530,
																"isConstant": false,
																"isLValue": false,
																"isPure": true,
																"kind": "number",
																"lValueRequested": false,
																"nodeType": "Literal",
																"src": "17514:1:12",
																"typeDescriptions": {
																	"typeIdentifier": "t_rational_1_by_1",
																	"typeString": "int_const 1"
																},
																"value": "1"
															},
															"src": "17465:50:12",
															"typeDescriptions": {
																"typeIdentifier": "t_uint64",
																"typeString": "uint64"
															}
														},
														"id": 2532,
														"nodeType": "ExpressionStatement",
														"src": "17465:50:12"
													},
													{
														"expression": {
															"id": 2539,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"lValueRequested": false,
															"leftHandSide": {
																"expression": {
																	"baseExpression": {
																		"id": 2533,
																		"name": "_ownerships",
																		"nodeType": "Identifier",
																		"overloadedDeclarations": [],
																		"referencedDeclaration": 1504,
																		"src": "17611:11:12",
																		"typeDescriptions": {
																			"typeIdentifier": "t_mapping$_t_uint256_$_t_struct$_TokenOwnership_$1482_storage_$",
																			"typeString": "mapping(uint256 => struct ERC721A.TokenOwnership storage ref)"
																		}
																	},
																	"id": 2535,
																	"indexExpression": {
																		"id": 2534,
																		"name": "tokenId",
																		"nodeType": "Identifier",
																		"overloadedDeclarations": [],
																		"referencedDeclaration": 2486,
																		"src": "17623:7:12",
																		"typeDescriptions": {
																			"typeIdentifier": "t_uint256",
																			"typeString": "uint256"
																		}
																	},
																	"isConstant": false,
																	"isLValue": true,
																	"isPure": false,
																	"lValueRequested": false,
																	"nodeType": "IndexAccess",
																	"src": "17611:20:12",
																	"typeDescriptions": {
																		"typeIdentifier": "t_struct$_TokenOwnership_$1482_storage",
																		"typeString": "struct ERC721A.TokenOwnership storage ref"
																	}
																},
																"id": 2536,
																"isConstant": false,
																"isLValue": true,
																"isPure": false,
																"lValueRequested": true,
																"memberName": "addr",
																"nodeType": "MemberAccess",
																"referencedDeclaration": 1477,
																"src": "17611:25:12",
																"typeDescriptions": {
																	"typeIdentifier": "t_address",
																	"typeString": "address"
																}
															},
															"nodeType": "Assignment",
															"operator": "=",
															"rightHandSide": {
																"expression": {
																	"id": 2537,
																	"name": "prevOwnership",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 2491,
																	"src": "17639:13:12",
																	"typeDescriptions": {
																		"typeIdentifier": "t_struct$_TokenOwnership_$1482_memory_ptr",
																		"typeString": "struct ERC721A.TokenOwnership memory"
																	}
																},
																"id": 2538,
																"isConstant": false,
																"isLValue": true,
																"isPure": false,
																"lValueRequested": false,
																"memberName": "addr",
																"nodeType": "MemberAccess",
																"referencedDeclaration": 1477,
																"src": "17639:18:12",
																"typeDescriptions": {
																	"typeIdentifier": "t_address",
																	"typeString": "address"
																}
															},
															"src": "17611:46:12",
															"typeDescriptions": {
																"typeIdentifier": "t_address",
																"typeString": "address"
															}
														},
														"id": 2540,
														"nodeType": "ExpressionStatement",
														"src": "17611:46:12"
													},
													{
														"expression": {
															"id": 2550,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"lValueRequested": false,
															"leftHandSide": {
																"expression": {
																	"baseExpression": {
																		"id": 2541,
																		"name": "_ownerships",
																		"nodeType": "Identifier",
																		"overloadedDeclarations": [],
																		"referencedDeclaration": 1504,
																		"src": "17671:11:12",
																		"typeDescriptions": {
																			"typeIdentifier": "t_mapping$_t_uint256_$_t_struct$_TokenOwnership_$1482_storage_$",
																			"typeString": "mapping(uint256 => struct ERC721A.TokenOwnership storage ref)"
																		}
																	},
																	"id": 2543,
																	"indexExpression": {
																		"id": 2542,
																		"name": "tokenId",
																		"nodeType": "Identifier",
																		"overloadedDeclarations": [],
																		"referencedDeclaration": 2486,
																		"src": "17683:7:12",
																		"typeDescriptions": {
																			"typeIdentifier": "t_uint256",
																			"typeString": "uint256"
																		}
																	},
																	"isConstant": false,
																	"isLValue": true,
																	"isPure": false,
																	"lValueRequested": false,
																	"nodeType": "IndexAccess",
																	"src": "17671:20:12",
																	"typeDescriptions": {
																		"typeIdentifier": "t_struct$_TokenOwnership_$1482_storage",
																		"typeString": "struct ERC721A.TokenOwnership storage ref"
																	}
																},
																"id": 2544,
																"isConstant": false,
																"isLValue": true,
																"isPure": false,
																"lValueRequested": true,
																"memberName": "startTimestamp",
																"nodeType": "MemberAccess",
																"referencedDeclaration": 1479,
																"src": "17671:35:12",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint64",
																	"typeString": "uint64"
																}
															},
															"nodeType": "Assignment",
															"operator": "=",
															"rightHandSide": {
																"arguments": [
																	{
																		"expression": {
																			"id": 2547,
																			"name": "block",
																			"nodeType": "Identifier",
																			"overloadedDeclarations": [],
																			"referencedDeclaration": 4294967292,
																			"src": "17716:5:12",
																			"typeDescriptions": {
																				"typeIdentifier": "t_magic_block",
																				"typeString": "block"
																			}
																		},
																		"id": 2548,
																		"isConstant": false,
																		"isLValue": false,
																		"isPure": false,
																		"lValueRequested": false,
																		"memberName": "timestamp",
																		"nodeType": "MemberAccess",
																		"src": "17716:15:12",
																		"typeDescriptions": {
																			"typeIdentifier": "t_uint256",
																			"typeString": "uint256"
																		}
																	}
																],
																"expression": {
																	"argumentTypes": [
																		{
																			"typeIdentifier": "t_uint256",
																			"typeString": "uint256"
																		}
																	],
																	"id": 2546,
																	"isConstant": false,
																	"isLValue": false,
																	"isPure": true,
																	"lValueRequested": false,
																	"nodeType": "ElementaryTypeNameExpression",
																	"src": "17709:6:12",
																	"typeDescriptions": {
																		"typeIdentifier": "t_type$_t_uint64_$",
																		"typeString": "type(uint64)"
																	},
																	"typeName": {
																		"id": 2545,
																		"name": "uint64",
																		"nodeType": "ElementaryTypeName",
																		"src": "17709:6:12",
																		"typeDescriptions": {}
																	}
																},
																"id": 2549,
																"isConstant": false,
																"isLValue": false,
																"isPure": false,
																"kind": "typeConversion",
																"lValueRequested": false,
																"names": [],
																"nodeType": "FunctionCall",
																"src": "17709:23:12",
																"tryCall": false,
																"typeDescriptions": {
																	"typeIdentifier": "t_uint64",
																	"typeString": "uint64"
																}
															},
															"src": "17671:61:12",
															"typeDescriptions": {
																"typeIdentifier": "t_uint64",
																"typeString": "uint64"
															}
														},
														"id": 2551,
														"nodeType": "ExpressionStatement",
														"src": "17671:61:12"
													},
													{
														"expression": {
															"id": 2557,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"lValueRequested": false,
															"leftHandSide": {
																"expression": {
																	"baseExpression": {
																		"id": 2552,
																		"name": "_ownerships",
																		"nodeType": "Identifier",
																		"overloadedDeclarations": [],
																		"referencedDeclaration": 1504,
																		"src": "17746:11:12",
																		"typeDescriptions": {
																			"typeIdentifier": "t_mapping$_t_uint256_$_t_struct$_TokenOwnership_$1482_storage_$",
																			"typeString": "mapping(uint256 => struct ERC721A.TokenOwnership storage ref)"
																		}
																	},
																	"id": 2554,
																	"indexExpression": {
																		"id": 2553,
																		"name": "tokenId",
																		"nodeType": "Identifier",
																		"overloadedDeclarations": [],
																		"referencedDeclaration": 2486,
																		"src": "17758:7:12",
																		"typeDescriptions": {
																			"typeIdentifier": "t_uint256",
																			"typeString": "uint256"
																		}
																	},
																	"isConstant": false,
																	"isLValue": true,
																	"isPure": false,
																	"lValueRequested": false,
																	"nodeType": "IndexAccess",
																	"src": "17746:20:12",
																	"typeDescriptions": {
																		"typeIdentifier": "t_struct$_TokenOwnership_$1482_storage",
																		"typeString": "struct ERC721A.TokenOwnership storage ref"
																	}
																},
																"id": 2555,
																"isConstant": false,
																"isLValue": true,
																"isPure": false,
																"lValueRequested": true,
																"memberName": "burned",
																"nodeType": "MemberAccess",
																"referencedDeclaration": 1481,
																"src": "17746:27:12",
																"typeDescriptions": {
																	"typeIdentifier": "t_bool",
																	"typeString": "bool"
																}
															},
															"nodeType": "Assignment",
															"operator": "=",
															"rightHandSide": {
																"hexValue": "74727565",
																"id": 2556,
																"isConstant": false,
																"isLValue": false,
																"isPure": true,
																"kind": "bool",
																"lValueRequested": false,
																"nodeType": "Literal",
																"src": "17776:4:12",
																"typeDescriptions": {
																	"typeIdentifier": "t_bool",
																	"typeString": "bool"
																},
																"value": "true"
															},
															"src": "17746:34:12",
															"typeDescriptions": {
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															}
														},
														"id": 2558,
														"nodeType": "ExpressionStatement",
														"src": "17746:34:12"
													},
													{
														"assignments": [
															2560
														],
														"declarations": [
															{
																"constant": false,
																"id": 2560,
																"mutability": "mutable",
																"name": "nextTokenId",
																"nameLocation": "18032:11:12",
																"nodeType": "VariableDeclaration",
																"scope": 2597,
																"src": "18024:19:12",
																"stateVariable": false,
																"storageLocation": "default",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																},
																"typeName": {
																	"id": 2559,
																	"name": "uint256",
																	"nodeType": "ElementaryTypeName",
																	"src": "18024:7:12",
																	"typeDescriptions": {
																		"typeIdentifier": "t_uint256",
																		"typeString": "uint256"
																	}
																},
																"visibility": "internal"
															}
														],
														"id": 2564,
														"initialValue": {
															"commonType": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															},
															"id": 2563,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"lValueRequested": false,
															"leftExpression": {
																"id": 2561,
																"name": "tokenId",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 2486,
																"src": "18046:7:12",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															},
															"nodeType": "BinaryOperation",
															"operator": "+",
															"rightExpression": {
																"hexValue": "31",
																"id": 2562,
																"isConstant": false,
																"isLValue": false,
																"isPure": true,
																"kind": "number",
																"lValueRequested": false,
																"nodeType": "Literal",
																"src": "18056:1:12",
																"typeDescriptions": {
																	"typeIdentifier": "t_rational_1_by_1",
																	"typeString": "int_const 1"
																},
																"value": "1"
															},
															"src": "18046:11:12",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														},
														"nodeType": "VariableDeclarationStatement",
														"src": "18024:33:12"
													},
													{
														"condition": {
															"commonType": {
																"typeIdentifier": "t_address",
																"typeString": "address"
															},
															"id": 2573,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"lValueRequested": false,
															"leftExpression": {
																"expression": {
																	"baseExpression": {
																		"id": 2565,
																		"name": "_ownerships",
																		"nodeType": "Identifier",
																		"overloadedDeclarations": [],
																		"referencedDeclaration": 1504,
																		"src": "18075:11:12",
																		"typeDescriptions": {
																			"typeIdentifier": "t_mapping$_t_uint256_$_t_struct$_TokenOwnership_$1482_storage_$",
																			"typeString": "mapping(uint256 => struct ERC721A.TokenOwnership storage ref)"
																		}
																	},
																	"id": 2567,
																	"indexExpression": {
																		"id": 2566,
																		"name": "nextTokenId",
																		"nodeType": "Identifier",
																		"overloadedDeclarations": [],
																		"referencedDeclaration": 2560,
																		"src": "18087:11:12",
																		"typeDescriptions": {
																			"typeIdentifier": "t_uint256",
																			"typeString": "uint256"
																		}
																	},
																	"isConstant": false,
																	"isLValue": true,
																	"isPure": false,
																	"lValueRequested": false,
																	"nodeType": "IndexAccess",
																	"src": "18075:24:12",
																	"typeDescriptions": {
																		"typeIdentifier": "t_struct$_TokenOwnership_$1482_storage",
																		"typeString": "struct ERC721A.TokenOwnership storage ref"
																	}
																},
																"id": 2568,
																"isConstant": false,
																"isLValue": true,
																"isPure": false,
																"lValueRequested": false,
																"memberName": "addr",
																"nodeType": "MemberAccess",
																"referencedDeclaration": 1477,
																"src": "18075:29:12",
																"typeDescriptions": {
																	"typeIdentifier": "t_address",
																	"typeString": "address"
																}
															},
															"nodeType": "BinaryOperation",
															"operator": "==",
															"rightExpression": {
																"arguments": [
																	{
																		"hexValue": "30",
																		"id": 2571,
																		"isConstant": false,
																		"isLValue": false,
																		"isPure": true,
																		"kind": "number",
																		"lValueRequested": false,
																		"nodeType": "Literal",
																		"src": "18116:1:12",
																		"typeDescriptions": {
																			"typeIdentifier": "t_rational_0_by_1",
																			"typeString": "int_const 0"
																		},
																		"value": "0"
																	}
																],
																"expression": {
																	"argumentTypes": [
																		{
																			"typeIdentifier": "t_rational_0_by_1",
																			"typeString": "int_const 0"
																		}
																	],
																	"id": 2570,
																	"isConstant": false,
																	"isLValue": false,
																	"isPure": true,
																	"lValueRequested": false,
																	"nodeType": "ElementaryTypeNameExpression",
																	"src": "18108:7:12",
																	"typeDescriptions": {
																		"typeIdentifier": "t_type$_t_address_$",
																		"typeString": "type(address)"
																	},
																	"typeName": {
																		"id": 2569,
																		"name": "address",
																		"nodeType": "ElementaryTypeName",
																		"src": "18108:7:12",
																		"typeDescriptions": {}
																	}
																},
																"id": 2572,
																"isConstant": false,
																"isLValue": false,
																"isPure": true,
																"kind": "typeConversion",
																"lValueRequested": false,
																"names": [],
																"nodeType": "FunctionCall",
																"src": "18108:10:12",
																"tryCall": false,
																"typeDescriptions": {
																	"typeIdentifier": "t_address",
																	"typeString": "address"
																}
															},
															"src": "18075:43:12",
															"typeDescriptions": {
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															}
														},
														"id": 2596,
														"nodeType": "IfStatement",
														"src": "18071:438:12",
														"trueBody": {
															"id": 2595,
															"nodeType": "Block",
															"src": "18120:389:12",
															"statements": [
																{
																	"condition": {
																		"commonType": {
																			"typeIdentifier": "t_uint256",
																			"typeString": "uint256"
																		},
																		"id": 2576,
																		"isConstant": false,
																		"isLValue": false,
																		"isPure": false,
																		"lValueRequested": false,
																		"leftExpression": {
																			"id": 2574,
																			"name": "nextTokenId",
																			"nodeType": "Identifier",
																			"overloadedDeclarations": [],
																			"referencedDeclaration": 2560,
																			"src": "18283:11:12",
																			"typeDescriptions": {
																				"typeIdentifier": "t_uint256",
																				"typeString": "uint256"
																			}
																		},
																		"nodeType": "BinaryOperation",
																		"operator": "<",
																		"rightExpression": {
																			"id": 2575,
																			"name": "_currentIndex",
																			"nodeType": "Identifier",
																			"overloadedDeclarations": [],
																			"referencedDeclaration": 1493,
																			"src": "18297:13:12",
																			"typeDescriptions": {
																				"typeIdentifier": "t_uint256",
																				"typeString": "uint256"
																			}
																		},
																		"src": "18283:27:12",
																		"typeDescriptions": {
																			"typeIdentifier": "t_bool",
																			"typeString": "bool"
																		}
																	},
																	"id": 2594,
																	"nodeType": "IfStatement",
																	"src": "18279:216:12",
																	"trueBody": {
																		"id": 2593,
																		"nodeType": "Block",
																		"src": "18312:183:12",
																		"statements": [
																			{
																				"expression": {
																					"id": 2583,
																					"isConstant": false,
																					"isLValue": false,
																					"isPure": false,
																					"lValueRequested": false,
																					"leftHandSide": {
																						"expression": {
																							"baseExpression": {
																								"id": 2577,
																								"name": "_ownerships",
																								"nodeType": "Identifier",
																								"overloadedDeclarations": [],
																								"referencedDeclaration": 1504,
																								"src": "18334:11:12",
																								"typeDescriptions": {
																									"typeIdentifier": "t_mapping$_t_uint256_$_t_struct$_TokenOwnership_$1482_storage_$",
																									"typeString": "mapping(uint256 => struct ERC721A.TokenOwnership storage ref)"
																								}
																							},
																							"id": 2579,
																							"indexExpression": {
																								"id": 2578,
																								"name": "nextTokenId",
																								"nodeType": "Identifier",
																								"overloadedDeclarations": [],
																								"referencedDeclaration": 2560,
																								"src": "18346:11:12",
																								"typeDescriptions": {
																									"typeIdentifier": "t_uint256",
																									"typeString": "uint256"
																								}
																							},
																							"isConstant": false,
																							"isLValue": true,
																							"isPure": false,
																							"lValueRequested": false,
																							"nodeType": "IndexAccess",
																							"src": "18334:24:12",
																							"typeDescriptions": {
																								"typeIdentifier": "t_struct$_TokenOwnership_$1482_storage",
																								"typeString": "struct ERC721A.TokenOwnership storage ref"
																							}
																						},
																						"id": 2580,
																						"isConstant": false,
																						"isLValue": true,
																						"isPure": false,
																						"lValueRequested": true,
																						"memberName": "addr",
																						"nodeType": "MemberAccess",
																						"referencedDeclaration": 1477,
																						"src": "18334:29:12",
																						"typeDescriptions": {
																							"typeIdentifier": "t_address",
																							"typeString": "address"
																						}
																					},
																					"nodeType": "Assignment",
																					"operator": "=",
																					"rightHandSide": {
																						"expression": {
																							"id": 2581,
																							"name": "prevOwnership",
																							"nodeType": "Identifier",
																							"overloadedDeclarations": [],
																							"referencedDeclaration": 2491,
																							"src": "18366:13:12",
																							"typeDescriptions": {
																								"typeIdentifier": "t_struct$_TokenOwnership_$1482_memory_ptr",
																								"typeString": "struct ERC721A.TokenOwnership memory"
																							}
																						},
																						"id": 2582,
																						"isConstant": false,
																						"isLValue": true,
																						"isPure": false,
																						"lValueRequested": false,
																						"memberName": "addr",
																						"nodeType": "MemberAccess",
																						"referencedDeclaration": 1477,
																						"src": "18366:18:12",
																						"typeDescriptions": {
																							"typeIdentifier": "t_address",
																							"typeString": "address"
																						}
																					},
																					"src": "18334:50:12",
																					"typeDescriptions": {
																						"typeIdentifier": "t_address",
																						"typeString": "address"
																					}
																				},
																				"id": 2584,
																				"nodeType": "ExpressionStatement",
																				"src": "18334:50:12"
																			},
																			{
																				"expression": {
																					"id": 2591,
																					"isConstant": false,
																					"isLValue": false,
																					"isPure": false,
																					"lValueRequested": false,
																					"leftHandSide": {
																						"expression": {
																							"baseExpression": {
																								"id": 2585,
																								"name": "_ownerships",
																								"nodeType": "Identifier",
																								"overloadedDeclarations": [],
																								"referencedDeclaration": 1504,
																								"src": "18406:11:12",
																								"typeDescriptions": {
																									"typeIdentifier": "t_mapping$_t_uint256_$_t_struct$_TokenOwnership_$1482_storage_$",
																									"typeString": "mapping(uint256 => struct ERC721A.TokenOwnership storage ref)"
																								}
																							},
																							"id": 2587,
																							"indexExpression": {
																								"id": 2586,
																								"name": "nextTokenId",
																								"nodeType": "Identifier",
																								"overloadedDeclarations": [],
																								"referencedDeclaration": 2560,
																								"src": "18418:11:12",
																								"typeDescriptions": {
																									"typeIdentifier": "t_uint256",
																									"typeString": "uint256"
																								}
																							},
																							"isConstant": false,
																							"isLValue": true,
																							"isPure": false,
																							"lValueRequested": false,
																							"nodeType": "IndexAccess",
																							"src": "18406:24:12",
																							"typeDescriptions": {
																								"typeIdentifier": "t_struct$_TokenOwnership_$1482_storage",
																								"typeString": "struct ERC721A.TokenOwnership storage ref"
																							}
																						},
																						"id": 2588,
																						"isConstant": false,
																						"isLValue": true,
																						"isPure": false,
																						"lValueRequested": true,
																						"memberName": "startTimestamp",
																						"nodeType": "MemberAccess",
																						"referencedDeclaration": 1479,
																						"src": "18406:39:12",
																						"typeDescriptions": {
																							"typeIdentifier": "t_uint64",
																							"typeString": "uint64"
																						}
																					},
																					"nodeType": "Assignment",
																					"operator": "=",
																					"rightHandSide": {
																						"expression": {
																							"id": 2589,
																							"name": "prevOwnership",
																							"nodeType": "Identifier",
																							"overloadedDeclarations": [],
																							"referencedDeclaration": 2491,
																							"src": "18448:13:12",
																							"typeDescriptions": {
																								"typeIdentifier": "t_struct$_TokenOwnership_$1482_memory_ptr",
																								"typeString": "struct ERC721A.TokenOwnership memory"
																							}
																						},
																						"id": 2590,
																						"isConstant": false,
																						"isLValue": true,
																						"isPure": false,
																						"lValueRequested": false,
																						"memberName": "startTimestamp",
																						"nodeType": "MemberAccess",
																						"referencedDeclaration": 1479,
																						"src": "18448:28:12",
																						"typeDescriptions": {
																							"typeIdentifier": "t_uint64",
																							"typeString": "uint64"
																						}
																					},
																					"src": "18406:70:12",
																					"typeDescriptions": {
																						"typeIdentifier": "t_uint64",
																						"typeString": "uint64"
																					}
																				},
																				"id": 2592,
																				"nodeType": "ExpressionStatement",
																				"src": "18406:70:12"
																			}
																		]
																	}
																}
															]
														}
													}
												]
											},
											{
												"eventCall": {
													"arguments": [
														{
															"expression": {
																"id": 2599,
																"name": "prevOwnership",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 2491,
																"src": "18543:13:12",
																"typeDescriptions": {
																	"typeIdentifier": "t_struct$_TokenOwnership_$1482_memory_ptr",
																	"typeString": "struct ERC721A.TokenOwnership memory"
																}
															},
															"id": 2600,
															"isConstant": false,
															"isLValue": true,
															"isPure": false,
															"lValueRequested": false,
															"memberName": "addr",
															"nodeType": "MemberAccess",
															"referencedDeclaration": 1477,
															"src": "18543:18:12",
															"typeDescriptions": {
																"typeIdentifier": "t_address",
																"typeString": "address"
															}
														},
														{
															"arguments": [
																{
																	"hexValue": "30",
																	"id": 2603,
																	"isConstant": false,
																	"isLValue": false,
																	"isPure": true,
																	"kind": "number",
																	"lValueRequested": false,
																	"nodeType": "Literal",
																	"src": "18571:1:12",
																	"typeDescriptions": {
																		"typeIdentifier": "t_rational_0_by_1",
																		"typeString": "int_const 0"
																	},
																	"value": "0"
																}
															],
															"expression": {
																"argumentTypes": [
																	{
																		"typeIdentifier": "t_rational_0_by_1",
																		"typeString": "int_const 0"
																	}
																],
																"id": 2602,
																"isConstant": false,
																"isLValue": false,
																"isPure": true,
																"lValueRequested": false,
																"nodeType": "ElementaryTypeNameExpression",
																"src": "18563:7:12",
																"typeDescriptions": {
																	"typeIdentifier": "t_type$_t_address_$",
																	"typeString": "type(address)"
																},
																"typeName": {
																	"id": 2601,
																	"name": "address",
																	"nodeType": "ElementaryTypeName",
																	"src": "18563:7:12",
																	"typeDescriptions": {}
																}
															},
															"id": 2604,
															"isConstant": false,
															"isLValue": false,
															"isPure": true,
															"kind": "typeConversion",
															"lValueRequested": false,
															"names": [],
															"nodeType": "FunctionCall",
															"src": "18563:10:12",
															"tryCall": false,
															"typeDescriptions": {
																"typeIdentifier": "t_address",
																"typeString": "address"
															}
														},
														{
															"id": 2605,
															"name": "tokenId",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 2486,
															"src": "18575:7:12",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_address",
																"typeString": "address"
															},
															{
																"typeIdentifier": "t_address",
																"typeString": "address"
															},
															{
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														],
														"id": 2598,
														"name": "Transfer",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 119,
														"src": "18534:8:12",
														"typeDescriptions": {
															"typeIdentifier": "t_function_event_nonpayable$_t_address_$_t_address_$_t_uint256_$returns$__$",
															"typeString": "function (address,address,uint256)"
														}
													},
													"id": 2606,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"names": [],
													"nodeType": "FunctionCall",
													"src": "18534:49:12",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_tuple$__$",
														"typeString": "tuple()"
													}
												},
												"id": 2607,
												"nodeType": "EmitStatement",
												"src": "18529:54:12"
											},
											{
												"expression": {
													"arguments": [
														{
															"expression": {
																"id": 2609,
																"name": "prevOwnership",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 2491,
																"src": "18614:13:12",
																"typeDescriptions": {
																	"typeIdentifier": "t_struct$_TokenOwnership_$1482_memory_ptr",
																	"typeString": "struct ERC721A.TokenOwnership memory"
																}
															},
															"id": 2610,
															"isConstant": false,
															"isLValue": true,
															"isPure": false,
															"lValueRequested": false,
															"memberName": "addr",
															"nodeType": "MemberAccess",
															"referencedDeclaration": 1477,
															"src": "18614:18:12",
															"typeDescriptions": {
																"typeIdentifier": "t_address",
																"typeString": "address"
															}
														},
														{
															"arguments": [
																{
																	"hexValue": "30",
																	"id": 2613,
																	"isConstant": false,
																	"isLValue": false,
																	"isPure": true,
																	"kind": "number",
																	"lValueRequested": false,
																	"nodeType": "Literal",
																	"src": "18642:1:12",
																	"typeDescriptions": {
																		"typeIdentifier": "t_rational_0_by_1",
																		"typeString": "int_const 0"
																	},
																	"value": "0"
																}
															],
															"expression": {
																"argumentTypes": [
																	{
																		"typeIdentifier": "t_rational_0_by_1",
																		"typeString": "int_const 0"
																	}
																],
																"id": 2612,
																"isConstant": false,
																"isLValue": false,
																"isPure": true,
																"lValueRequested": false,
																"nodeType": "ElementaryTypeNameExpression",
																"src": "18634:7:12",
																"typeDescriptions": {
																	"typeIdentifier": "t_type$_t_address_$",
																	"typeString": "type(address)"
																},
																"typeName": {
																	"id": 2611,
																	"name": "address",
																	"nodeType": "ElementaryTypeName",
																	"src": "18634:7:12",
																	"typeDescriptions": {}
																}
															},
															"id": 2614,
															"isConstant": false,
															"isLValue": false,
															"isPure": true,
															"kind": "typeConversion",
															"lValueRequested": false,
															"names": [],
															"nodeType": "FunctionCall",
															"src": "18634:10:12",
															"tryCall": false,
															"typeDescriptions": {
																"typeIdentifier": "t_address",
																"typeString": "address"
															}
														},
														{
															"id": 2615,
															"name": "tokenId",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 2486,
															"src": "18646:7:12",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														},
														{
															"hexValue": "31",
															"id": 2616,
															"isConstant": false,
															"isLValue": false,
															"isPure": true,
															"kind": "number",
															"lValueRequested": false,
															"nodeType": "Literal",
															"src": "18655:1:12",
															"typeDescriptions": {
																"typeIdentifier": "t_rational_1_by_1",
																"typeString": "int_const 1"
															},
															"value": "1"
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_address",
																"typeString": "address"
															},
															{
																"typeIdentifier": "t_address",
																"typeString": "address"
															},
															{
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															},
															{
																"typeIdentifier": "t_rational_1_by_1",
																"typeString": "int_const 1"
															}
														],
														"id": 2608,
														"name": "_afterTokenTransfers",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 2728,
														"src": "18593:20:12",
														"typeDescriptions": {
															"typeIdentifier": "t_function_internal_nonpayable$_t_address_$_t_address_$_t_uint256_$_t_uint256_$returns$__$",
															"typeString": "function (address,address,uint256,uint256)"
														}
													},
													"id": 2617,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"names": [],
													"nodeType": "FunctionCall",
													"src": "18593:64:12",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_tuple$__$",
														"typeString": "tuple()"
													}
												},
												"id": 2618,
												"nodeType": "ExpressionStatement",
												"src": "18593:64:12"
											},
											{
												"id": 2622,
												"nodeType": "UncheckedBlock",
												"src": "18756:49:12",
												"statements": [
													{
														"expression": {
															"id": 2620,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"lValueRequested": false,
															"nodeType": "UnaryOperation",
															"operator": "++",
															"prefix": false,
															"src": "18780:14:12",
															"subExpression": {
																"id": 2619,
																"name": "_burnCounter",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 1495,
																"src": "18780:12:12",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															},
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														},
														"id": 2621,
														"nodeType": "ExpressionStatement",
														"src": "18780:14:12"
													}
												]
											}
										]
									},
									"documentation": {
										"id": 2484,
										"nodeType": "StructuredDocumentation",
										"src": "16601:206:12",
										"text": " @dev Destroys `tokenId`.\n The approval is cleared when the token is burned.\n Requirements:\n - `tokenId` must exist.\n Emits a {Transfer} event."
									},
									"id": 2624,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "_burn",
									"nameLocation": "16821:5:12",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 2487,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 2486,
												"mutability": "mutable",
												"name": "tokenId",
												"nameLocation": "16835:7:12",
												"nodeType": "VariableDeclaration",
												"scope": 2624,
												"src": "16827:15:12",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 2485,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "16827:7:12",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "16826:17:12"
									},
									"returnParameters": {
										"id": 2488,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "16861:0:12"
									},
									"scope": 2729,
									"src": "16812:1999:12",
									"stateMutability": "nonpayable",
									"virtual": true,
									"visibility": "internal"
								},
								{
									"body": {
										"id": 2646,
										"nodeType": "Block",
										"src": "19022:89:12",
										"statements": [
											{
												"expression": {
													"id": 2638,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"lValueRequested": false,
													"leftHandSide": {
														"baseExpression": {
															"id": 2634,
															"name": "_tokenApprovals",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 1513,
															"src": "19032:15:12",
															"typeDescriptions": {
																"typeIdentifier": "t_mapping$_t_uint256_$_t_address_$",
																"typeString": "mapping(uint256 => address)"
															}
														},
														"id": 2636,
														"indexExpression": {
															"id": 2635,
															"name": "tokenId",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 2629,
															"src": "19048:7:12",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														},
														"isConstant": false,
														"isLValue": true,
														"isPure": false,
														"lValueRequested": true,
														"nodeType": "IndexAccess",
														"src": "19032:24:12",
														"typeDescriptions": {
															"typeIdentifier": "t_address",
															"typeString": "address"
														}
													},
													"nodeType": "Assignment",
													"operator": "=",
													"rightHandSide": {
														"id": 2637,
														"name": "to",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 2627,
														"src": "19059:2:12",
														"typeDescriptions": {
															"typeIdentifier": "t_address",
															"typeString": "address"
														}
													},
													"src": "19032:29:12",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"id": 2639,
												"nodeType": "ExpressionStatement",
												"src": "19032:29:12"
											},
											{
												"eventCall": {
													"arguments": [
														{
															"id": 2641,
															"name": "owner",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 2631,
															"src": "19085:5:12",
															"typeDescriptions": {
																"typeIdentifier": "t_address",
																"typeString": "address"
															}
														},
														{
															"id": 2642,
															"name": "to",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 2627,
															"src": "19092:2:12",
															"typeDescriptions": {
																"typeIdentifier": "t_address",
																"typeString": "address"
															}
														},
														{
															"id": 2643,
															"name": "tokenId",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 2629,
															"src": "19096:7:12",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_address",
																"typeString": "address"
															},
															{
																"typeIdentifier": "t_address",
																"typeString": "address"
															},
															{
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														],
														"id": 2640,
														"name": "Approval",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 128,
														"src": "19076:8:12",
														"typeDescriptions": {
															"typeIdentifier": "t_function_event_nonpayable$_t_address_$_t_address_$_t_uint256_$returns$__$",
															"typeString": "function (address,address,uint256)"
														}
													},
													"id": 2644,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"names": [],
													"nodeType": "FunctionCall",
													"src": "19076:28:12",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_tuple$__$",
														"typeString": "tuple()"
													}
												},
												"id": 2645,
												"nodeType": "EmitStatement",
												"src": "19071:33:12"
											}
										]
									},
									"documentation": {
										"id": 2625,
										"nodeType": "StructuredDocumentation",
										"src": "18817:100:12",
										"text": " @dev Approve `to` to operate on `tokenId`\n Emits a {Approval} event."
									},
									"id": 2647,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "_approve",
									"nameLocation": "18931:8:12",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 2632,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 2627,
												"mutability": "mutable",
												"name": "to",
												"nameLocation": "18957:2:12",
												"nodeType": "VariableDeclaration",
												"scope": 2647,
												"src": "18949:10:12",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 2626,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "18949:7:12",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 2629,
												"mutability": "mutable",
												"name": "tokenId",
												"nameLocation": "18977:7:12",
												"nodeType": "VariableDeclaration",
												"scope": 2647,
												"src": "18969:15:12",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 2628,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "18969:7:12",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 2631,
												"mutability": "mutable",
												"name": "owner",
												"nameLocation": "19002:5:12",
												"nodeType": "VariableDeclaration",
												"scope": 2647,
												"src": "18994:13:12",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 2630,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "18994:7:12",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "18939:74:12"
									},
									"returnParameters": {
										"id": 2633,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "19022:0:12"
									},
									"scope": 2729,
									"src": "18922:189:12",
									"stateMutability": "nonpayable",
									"virtual": false,
									"visibility": "private"
								},
								{
									"body": {
										"id": 2701,
										"nodeType": "Block",
										"src": "19756:486:12",
										"statements": [
											{
												"clauses": [
													{
														"block": {
															"id": 2682,
															"nodeType": "Block",
															"src": "19867:87:12",
															"statements": [
																{
																	"expression": {
																		"commonType": {
																			"typeIdentifier": "t_bytes4",
																			"typeString": "bytes4"
																		},
																		"id": 2680,
																		"isConstant": false,
																		"isLValue": false,
																		"isPure": false,
																		"lValueRequested": false,
																		"leftExpression": {
																			"id": 2674,
																			"name": "retval",
																			"nodeType": "Identifier",
																			"overloadedDeclarations": [],
																			"referencedDeclaration": 2672,
																			"src": "19888:6:12",
																			"typeDescriptions": {
																				"typeIdentifier": "t_bytes4",
																				"typeString": "bytes4"
																			}
																		},
																		"nodeType": "BinaryOperation",
																		"operator": "==",
																		"rightExpression": {
																			"expression": {
																				"expression": {
																					"arguments": [
																						{
																							"id": 2676,
																							"name": "to",
																							"nodeType": "Identifier",
																							"overloadedDeclarations": [],
																							"referencedDeclaration": 2652,
																							"src": "19914:2:12",
																							"typeDescriptions": {
																								"typeIdentifier": "t_address",
																								"typeString": "address"
																							}
																						}
																					],
																					"expression": {
																						"argumentTypes": [
																							{
																								"typeIdentifier": "t_address",
																								"typeString": "address"
																							}
																						],
																						"id": 2675,
																						"name": "IERC721Receiver",
																						"nodeType": "Identifier",
																						"overloadedDeclarations": [],
																						"referencedDeclaration": 238,
																						"src": "19898:15:12",
																						"typeDescriptions": {
																							"typeIdentifier": "t_type$_t_contract$_IERC721Receiver_$238_$",
																							"typeString": "type(contract IERC721Receiver)"
																						}
																					},
																					"id": 2677,
																					"isConstant": false,
																					"isLValue": false,
																					"isPure": false,
																					"kind": "typeConversion",
																					"lValueRequested": false,
																					"names": [],
																					"nodeType": "FunctionCall",
																					"src": "19898:19:12",
																					"tryCall": false,
																					"typeDescriptions": {
																						"typeIdentifier": "t_contract$_IERC721Receiver_$238",
																						"typeString": "contract IERC721Receiver"
																					}
																				},
																				"id": 2678,
																				"isConstant": false,
																				"isLValue": false,
																				"isPure": false,
																				"lValueRequested": false,
																				"memberName": "onERC721Received",
																				"nodeType": "MemberAccess",
																				"referencedDeclaration": 237,
																				"src": "19898:36:12",
																				"typeDescriptions": {
																					"typeIdentifier": "t_function_external_nonpayable$_t_address_$_t_address_$_t_uint256_$_t_bytes_memory_ptr_$returns$_t_bytes4_$",
																					"typeString": "function (address,address,uint256,bytes memory) external returns (bytes4)"
																				}
																			},
																			"id": 2679,
																			"isConstant": false,
																			"isLValue": false,
																			"isPure": false,
																			"lValueRequested": false,
																			"memberName": "selector",
																			"nodeType": "MemberAccess",
																			"src": "19898:45:12",
																			"typeDescriptions": {
																				"typeIdentifier": "t_bytes4",
																				"typeString": "bytes4"
																			}
																		},
																		"src": "19888:55:12",
																		"typeDescriptions": {
																			"typeIdentifier": "t_bool",
																			"typeString": "bool"
																		}
																	},
																	"functionReturnParameters": 2660,
																	"id": 2681,
																	"nodeType": "Return",
																	"src": "19881:62:12"
																}
															]
														},
														"errorName": "",
														"id": 2683,
														"nodeType": "TryCatchClause",
														"parameters": {
															"id": 2673,
															"nodeType": "ParameterList",
															"parameters": [
																{
																	"constant": false,
																	"id": 2672,
																	"mutability": "mutable",
																	"name": "retval",
																	"nameLocation": "19859:6:12",
																	"nodeType": "VariableDeclaration",
																	"scope": 2683,
																	"src": "19852:13:12",
																	"stateVariable": false,
																	"storageLocation": "default",
																	"typeDescriptions": {
																		"typeIdentifier": "t_bytes4",
																		"typeString": "bytes4"
																	},
																	"typeName": {
																		"id": 2671,
																		"name": "bytes4",
																		"nodeType": "ElementaryTypeName",
																		"src": "19852:6:12",
																		"typeDescriptions": {
																			"typeIdentifier": "t_bytes4",
																			"typeString": "bytes4"
																		}
																	},
																	"visibility": "internal"
																}
															],
															"src": "19851:15:12"
														},
														"src": "19843:111:12"
													},
													{
														"block": {
															"id": 2698,
															"nodeType": "Block",
															"src": "19983:253:12",
															"statements": [
																{
																	"condition": {
																		"commonType": {
																			"typeIdentifier": "t_uint256",
																			"typeString": "uint256"
																		},
																		"id": 2690,
																		"isConstant": false,
																		"isLValue": false,
																		"isPure": false,
																		"lValueRequested": false,
																		"leftExpression": {
																			"expression": {
																				"id": 2687,
																				"name": "reason",
																				"nodeType": "Identifier",
																				"overloadedDeclarations": [],
																				"referencedDeclaration": 2685,
																				"src": "20001:6:12",
																				"typeDescriptions": {
																					"typeIdentifier": "t_bytes_memory_ptr",
																					"typeString": "bytes memory"
																				}
																			},
																			"id": 2688,
																			"isConstant": false,
																			"isLValue": false,
																			"isPure": false,
																			"lValueRequested": false,
																			"memberName": "length",
																			"nodeType": "MemberAccess",
																			"src": "20001:13:12",
																			"typeDescriptions": {
																				"typeIdentifier": "t_uint256",
																				"typeString": "uint256"
																			}
																		},
																		"nodeType": "BinaryOperation",
																		"operator": "==",
																		"rightExpression": {
																			"hexValue": "30",
																			"id": 2689,
																			"isConstant": false,
																			"isLValue": false,
																			"isPure": true,
																			"kind": "number",
																			"lValueRequested": false,
																			"nodeType": "Literal",
																			"src": "20018:1:12",
																			"typeDescriptions": {
																				"typeIdentifier": "t_rational_0_by_1",
																				"typeString": "int_const 0"
																			},
																			"value": "0"
																		},
																		"src": "20001:18:12",
																		"typeDescriptions": {
																			"typeIdentifier": "t_bool",
																			"typeString": "bool"
																		}
																	},
																	"falseBody": {
																		"id": 2696,
																		"nodeType": "Block",
																		"src": "20107:119:12",
																		"statements": [
																			{
																				"AST": {
																					"nodeType": "YulBlock",
																					"src": "20134:78:12",
																					"statements": [
																						{
																							"expression": {
																								"arguments": [
																									{
																										"arguments": [
																											{
																												"kind": "number",
																												"nodeType": "YulLiteral",
																												"src": "20167:2:12",
																												"type": "",
																												"value": "32"
																											},
																											{
																												"name": "reason",
																												"nodeType": "YulIdentifier",
																												"src": "20171:6:12"
																											}
																										],
																										"functionName": {
																											"name": "add",
																											"nodeType": "YulIdentifier",
																											"src": "20163:3:12"
																										},
																										"nodeType": "YulFunctionCall",
																										"src": "20163:15:12"
																									},
																									{
																										"arguments": [
																											{
																												"name": "reason",
																												"nodeType": "YulIdentifier",
																												"src": "20186:6:12"
																											}
																										],
																										"functionName": {
																											"name": "mload",
																											"nodeType": "YulIdentifier",
																											"src": "20180:5:12"
																										},
																										"nodeType": "YulFunctionCall",
																										"src": "20180:13:12"
																									}
																								],
																								"functionName": {
																									"name": "revert",
																									"nodeType": "YulIdentifier",
																									"src": "20156:6:12"
																								},
																								"nodeType": "YulFunctionCall",
																								"src": "20156:38:12"
																							},
																							"nodeType": "YulExpressionStatement",
																							"src": "20156:38:12"
																						}
																					]
																				},
																				"evmVersion": "london",
																				"externalReferences": [
																					{
																						"declaration": 2685,
																						"isOffset": false,
																						"isSlot": false,
																						"src": "20171:6:12",
																						"valueSize": 1
																					},
																					{
																						"declaration": 2685,
																						"isOffset": false,
																						"isSlot": false,
																						"src": "20186:6:12",
																						"valueSize": 1
																					}
																				],
																				"id": 2695,
																				"nodeType": "InlineAssembly",
																				"src": "20125:87:12"
																			}
																		]
																	},
																	"id": 2697,
																	"nodeType": "IfStatement",
																	"src": "19997:229:12",
																	"trueBody": {
																		"id": 2694,
																		"nodeType": "Block",
																		"src": "20021:80:12",
																		"statements": [
																			{
																				"errorCall": {
																					"arguments": [],
																					"expression": {
																						"argumentTypes": [],
																						"id": 2691,
																						"name": "TransferToNonERC721ReceiverImplementer",
																						"nodeType": "Identifier",
																						"overloadedDeclarations": [],
																						"referencedDeclaration": 1456,
																						"src": "20046:38:12",
																						"typeDescriptions": {
																							"typeIdentifier": "t_function_error_pure$__$returns$__$",
																							"typeString": "function () pure"
																						}
																					},
																					"id": 2692,
																					"isConstant": false,
																					"isLValue": false,
																					"isPure": false,
																					"kind": "functionCall",
																					"lValueRequested": false,
																					"names": [],
																					"nodeType": "FunctionCall",
																					"src": "20046:40:12",
																					"tryCall": false,
																					"typeDescriptions": {
																						"typeIdentifier": "t_tuple$__$",
																						"typeString": "tuple()"
																					}
																				},
																				"id": 2693,
																				"nodeType": "RevertStatement",
																				"src": "20039:47:12"
																			}
																		]
																	}
																}
															]
														},
														"errorName": "",
														"id": 2699,
														"nodeType": "TryCatchClause",
														"parameters": {
															"id": 2686,
															"nodeType": "ParameterList",
															"parameters": [
																{
																	"constant": false,
																	"id": 2685,
																	"mutability": "mutable",
																	"name": "reason",
																	"nameLocation": "19975:6:12",
																	"nodeType": "VariableDeclaration",
																	"scope": 2699,
																	"src": "19962:19:12",
																	"stateVariable": false,
																	"storageLocation": "memory",
																	"typeDescriptions": {
																		"typeIdentifier": "t_bytes_memory_ptr",
																		"typeString": "bytes"
																	},
																	"typeName": {
																		"id": 2684,
																		"name": "bytes",
																		"nodeType": "ElementaryTypeName",
																		"src": "19962:5:12",
																		"typeDescriptions": {
																			"typeIdentifier": "t_bytes_storage_ptr",
																			"typeString": "bytes"
																		}
																	},
																	"visibility": "internal"
																}
															],
															"src": "19961:21:12"
														},
														"src": "19955:281:12"
													}
												],
												"externalCall": {
													"arguments": [
														{
															"arguments": [],
															"expression": {
																"argumentTypes": [],
																"id": 2665,
																"name": "_msgSender",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 603,
																"src": "19807:10:12",
																"typeDescriptions": {
																	"typeIdentifier": "t_function_internal_view$__$returns$_t_address_$",
																	"typeString": "function () view returns (address)"
																}
															},
															"id": 2666,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"kind": "functionCall",
															"lValueRequested": false,
															"names": [],
															"nodeType": "FunctionCall",
															"src": "19807:12:12",
															"tryCall": false,
															"typeDescriptions": {
																"typeIdentifier": "t_address",
																"typeString": "address"
															}
														},
														{
															"id": 2667,
															"name": "from",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 2650,
															"src": "19821:4:12",
															"typeDescriptions": {
																"typeIdentifier": "t_address",
																"typeString": "address"
															}
														},
														{
															"id": 2668,
															"name": "tokenId",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 2654,
															"src": "19827:7:12",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														},
														{
															"id": 2669,
															"name": "_data",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 2656,
															"src": "19836:5:12",
															"typeDescriptions": {
																"typeIdentifier": "t_bytes_memory_ptr",
																"typeString": "bytes memory"
															}
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_address",
																"typeString": "address"
															},
															{
																"typeIdentifier": "t_address",
																"typeString": "address"
															},
															{
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															},
															{
																"typeIdentifier": "t_bytes_memory_ptr",
																"typeString": "bytes memory"
															}
														],
														"expression": {
															"arguments": [
																{
																	"id": 2662,
																	"name": "to",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 2652,
																	"src": "19786:2:12",
																	"typeDescriptions": {
																		"typeIdentifier": "t_address",
																		"typeString": "address"
																	}
																}
															],
															"expression": {
																"argumentTypes": [
																	{
																		"typeIdentifier": "t_address",
																		"typeString": "address"
																	}
																],
																"id": 2661,
																"name": "IERC721Receiver",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 238,
																"src": "19770:15:12",
																"typeDescriptions": {
																	"typeIdentifier": "t_type$_t_contract$_IERC721Receiver_$238_$",
																	"typeString": "type(contract IERC721Receiver)"
																}
															},
															"id": 2663,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"kind": "typeConversion",
															"lValueRequested": false,
															"names": [],
															"nodeType": "FunctionCall",
															"src": "19770:19:12",
															"tryCall": false,
															"typeDescriptions": {
																"typeIdentifier": "t_contract$_IERC721Receiver_$238",
																"typeString": "contract IERC721Receiver"
															}
														},
														"id": 2664,
														"isConstant": false,
														"isLValue": false,
														"isPure": false,
														"lValueRequested": false,
														"memberName": "onERC721Received",
														"nodeType": "MemberAccess",
														"referencedDeclaration": 237,
														"src": "19770:36:12",
														"typeDescriptions": {
															"typeIdentifier": "t_function_external_nonpayable$_t_address_$_t_address_$_t_uint256_$_t_bytes_memory_ptr_$returns$_t_bytes4_$",
															"typeString": "function (address,address,uint256,bytes memory) external returns (bytes4)"
														}
													},
													"id": 2670,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"names": [],
													"nodeType": "FunctionCall",
													"src": "19770:72:12",
													"tryCall": true,
													"typeDescriptions": {
														"typeIdentifier": "t_bytes4",
														"typeString": "bytes4"
													}
												},
												"id": 2700,
												"nodeType": "TryStatement",
												"src": "19766:470:12"
											}
										]
									},
									"documentation": {
										"id": 2648,
										"nodeType": "StructuredDocumentation",
										"src": "19117:470:12",
										"text": " @dev Internal function to invoke {IERC721Receiver-onERC721Received} on a target contract.\n @param from address representing the previous owner of the given token ID\n @param to target address that will receive the tokens\n @param tokenId uint256 ID of the token to be transferred\n @param _data bytes optional data to send along with the call\n @return bool whether the call correctly returned the expected magic value"
									},
									"id": 2702,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "_checkContractOnERC721Received",
									"nameLocation": "19601:30:12",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 2657,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 2650,
												"mutability": "mutable",
												"name": "from",
												"nameLocation": "19649:4:12",
												"nodeType": "VariableDeclaration",
												"scope": 2702,
												"src": "19641:12:12",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 2649,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "19641:7:12",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 2652,
												"mutability": "mutable",
												"name": "to",
												"nameLocation": "19671:2:12",
												"nodeType": "VariableDeclaration",
												"scope": 2702,
												"src": "19663:10:12",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 2651,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "19663:7:12",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 2654,
												"mutability": "mutable",
												"name": "tokenId",
												"nameLocation": "19691:7:12",
												"nodeType": "VariableDeclaration",
												"scope": 2702,
												"src": "19683:15:12",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 2653,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "19683:7:12",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 2656,
												"mutability": "mutable",
												"name": "_data",
												"nameLocation": "19721:5:12",
												"nodeType": "VariableDeclaration",
												"scope": 2702,
												"src": "19708:18:12",
												"stateVariable": false,
												"storageLocation": "memory",
												"typeDescriptions": {
													"typeIdentifier": "t_bytes_memory_ptr",
													"typeString": "bytes"
												},
												"typeName": {
													"id": 2655,
													"name": "bytes",
													"nodeType": "ElementaryTypeName",
													"src": "19708:5:12",
													"typeDescriptions": {
														"typeIdentifier": "t_bytes_storage_ptr",
														"typeString": "bytes"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "19631:101:12"
									},
									"returnParameters": {
										"id": 2660,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 2659,
												"mutability": "mutable",
												"name": "",
												"nameLocation": "-1:-1:-1",
												"nodeType": "VariableDeclaration",
												"scope": 2702,
												"src": "19750:4:12",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_bool",
													"typeString": "bool"
												},
												"typeName": {
													"id": 2658,
													"name": "bool",
													"nodeType": "ElementaryTypeName",
													"src": "19750:4:12",
													"typeDescriptions": {
														"typeIdentifier": "t_bool",
														"typeString": "bool"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "19749:6:12"
									},
									"scope": 2729,
									"src": "19592:650:12",
									"stateMutability": "nonpayable",
									"virtual": false,
									"visibility": "private"
								},
								{
									"body": {
										"id": 2714,
										"nodeType": "Block",
										"src": "21025:2:12",
										"statements": []
									},
									"documentation": {
										"id": 2703,
										"nodeType": "StructuredDocumentation",
										"src": "20248:620:12",
										"text": " @dev Hook that is called before a set of serially-ordered token ids are about to be transferred. This includes minting.\n And also called before burning one token.\n startTokenId - the first token id to be transferred\n quantity - the amount to be transferred\n Calling conditions:\n - When `from` and `to` are both non-zero, `from`'s `tokenId` will be\n transferred to `to`.\n - When `from` is zero, `tokenId` will be minted for `to`.\n - When `to` is zero, `tokenId` will be burned by `from`.\n - `from` and `to` are never both zero."
									},
									"id": 2715,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "_beforeTokenTransfers",
									"nameLocation": "20882:21:12",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 2712,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 2705,
												"mutability": "mutable",
												"name": "from",
												"nameLocation": "20921:4:12",
												"nodeType": "VariableDeclaration",
												"scope": 2715,
												"src": "20913:12:12",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 2704,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "20913:7:12",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 2707,
												"mutability": "mutable",
												"name": "to",
												"nameLocation": "20943:2:12",
												"nodeType": "VariableDeclaration",
												"scope": 2715,
												"src": "20935:10:12",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 2706,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "20935:7:12",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 2709,
												"mutability": "mutable",
												"name": "startTokenId",
												"nameLocation": "20963:12:12",
												"nodeType": "VariableDeclaration",
												"scope": 2715,
												"src": "20955:20:12",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 2708,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "20955:7:12",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 2711,
												"mutability": "mutable",
												"name": "quantity",
												"nameLocation": "20993:8:12",
												"nodeType": "VariableDeclaration",
												"scope": 2715,
												"src": "20985:16:12",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 2710,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "20985:7:12",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "20903:104:12"
									},
									"returnParameters": {
										"id": 2713,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "21025:0:12"
									},
									"scope": 2729,
									"src": "20873:154:12",
									"stateMutability": "nonpayable",
									"virtual": true,
									"visibility": "internal"
								},
								{
									"body": {
										"id": 2727,
										"nodeType": "Block",
										"src": "21819:2:12",
										"statements": []
									},
									"documentation": {
										"id": 2716,
										"nodeType": "StructuredDocumentation",
										"src": "21033:630:12",
										"text": " @dev Hook that is called after a set of serially-ordered token ids have been transferred. This includes\n minting.\n And also called after one token has been burned.\n startTokenId - the first token id to be transferred\n quantity - the amount to be transferred\n Calling conditions:\n - When `from` and `to` are both non-zero, `from`'s `tokenId` has been\n transferred to `to`.\n - When `from` is zero, `tokenId` has been minted for `to`.\n - When `to` is zero, `tokenId` has been burned by `from`.\n - `from` and `to` are never both zero."
									},
									"id": 2728,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "_afterTokenTransfers",
									"nameLocation": "21677:20:12",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 2725,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 2718,
												"mutability": "mutable",
												"name": "from",
												"nameLocation": "21715:4:12",
												"nodeType": "VariableDeclaration",
												"scope": 2728,
												"src": "21707:12:12",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 2717,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "21707:7:12",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 2720,
												"mutability": "mutable",
												"name": "to",
												"nameLocation": "21737:2:12",
												"nodeType": "VariableDeclaration",
												"scope": 2728,
												"src": "21729:10:12",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 2719,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "21729:7:12",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 2722,
												"mutability": "mutable",
												"name": "startTokenId",
												"nameLocation": "21757:12:12",
												"nodeType": "VariableDeclaration",
												"scope": 2728,
												"src": "21749:20:12",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 2721,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "21749:7:12",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 2724,
												"mutability": "mutable",
												"name": "quantity",
												"nameLocation": "21787:8:12",
												"nodeType": "VariableDeclaration",
												"scope": 2728,
												"src": "21779:16:12",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 2723,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "21779:7:12",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "21697:104:12"
									},
									"returnParameters": {
										"id": 2726,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "21819:0:12"
									},
									"scope": 2729,
									"src": "21668:153:12",
									"stateMutability": "nonpayable",
									"virtual": true,
									"visibility": "internal"
								}
							],
							"scope": 2730,
							"src": "1708:20115:12",
							"usedErrors": [
								1426,
								1428,
								1430,
								1432,
								1434,
								1448,
								1452,
								1454,
								1456,
								1458,
								1460
							]
						}
					],
					"src": "56:21768:12"
				},
				"id": 12
			}
		}
	}
}